# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
# 1 "/home/giulianob/gcc_git_gnu/build_temp/gcc//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
# 21 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
# 1 "./config.h" 1





# 1 "./auto-host.h" 1
# 7 "./config.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
extern "C" {
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h"
}
# 9 "./config.h" 2
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4

# 40 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 44 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2


# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);




# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __arg)
{
  return vfprintf (stdout, __fmt, __arg);
}



extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0010) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
# 865 "/usr/include/stdio.h" 2 3 4
# 873 "/usr/include/stdio.h" 3 4
}
# 47 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 103 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 187 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 209 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h" 1
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
enum {

  _sch_isblank = 0x0001,
  _sch_iscntrl = 0x0002,
  _sch_isdigit = 0x0004,
  _sch_islower = 0x0008,
  _sch_isprint = 0x0010,
  _sch_ispunct = 0x0020,
  _sch_isspace = 0x0040,
  _sch_isupper = 0x0080,
  _sch_isxdigit = 0x0100,


  _sch_isidst = 0x0200,
  _sch_isvsp = 0x0400,
  _sch_isnvsp = 0x0800,


  _sch_isalpha = _sch_isupper|_sch_islower,
  _sch_isalnum = _sch_isalpha|_sch_isdigit,
  _sch_isidnum = _sch_isidst|_sch_isdigit,
  _sch_isgraph = _sch_isalnum|_sch_ispunct,
  _sch_iscppsp = _sch_isvsp|_sch_isnvsp,
  _sch_isbasic = _sch_isprint|_sch_iscppsp

};


extern const unsigned short _sch_istable[256];
# 110 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
extern const unsigned char _sch_toupper[256];
extern const unsigned char _sch_tolower[256];
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h"
# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4

# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 174 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int isalnum (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalnum; }
extern __inline __attribute__ ((__gnu_inline__)) int isalpha (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISalpha; }
extern __inline __attribute__ ((__gnu_inline__)) int iscntrl (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _IScntrl; }
extern __inline __attribute__ ((__gnu_inline__)) int isdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISdigit; }
extern __inline __attribute__ ((__gnu_inline__)) int islower (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISlower; }
extern __inline __attribute__ ((__gnu_inline__)) int isgraph (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISgraph; }
extern __inline __attribute__ ((__gnu_inline__)) int isprint (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISprint; }
extern __inline __attribute__ ((__gnu_inline__)) int ispunct (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISpunct; }
extern __inline __attribute__ ((__gnu_inline__)) int isspace (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISspace; }
extern __inline __attribute__ ((__gnu_inline__)) int isupper (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISupper; }
extern __inline __attribute__ ((__gnu_inline__)) int isxdigit (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISxdigit; }

extern __inline __attribute__ ((__gnu_inline__)) int isblank (int __c) throw () { return (*__ctype_b_loc ())[(int) (__c)] & (unsigned short int) _ISblank; }
# 206 "/usr/include/ctype.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) tolower (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_tolower_loc ())[__c] : __c;
}

extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) toupper (int __c) throw ()
{
  return __c >= -128 && __c < 256 ? (*__ctype_toupper_loc ())[__c] : __c;
}
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/safe-ctype.h" 2
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

# 1 "/usr/include/errno.h" 1 3 4
# 28 "/usr/include/errno.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/errno.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/errno.h" 3 4
# 1 "/usr/include/linux/errno.h" 1 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/errno.h" 1 3 4
# 1 "/usr/include/asm-generic/errno.h" 1 3 4




# 1 "/usr/include/asm-generic/errno-base.h" 1 3 4
# 6 "/usr/include/asm-generic/errno.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/errno.h" 2 3 4
# 2 "/usr/include/linux/errno.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/errno.h" 2 3 4
# 29 "/usr/include/errno.h" 2 3 4





extern "C" {


extern int *__errno_location (void) throw () __attribute__ ((__const__));







extern char *program_invocation_name;
extern char *program_invocation_short_name;

# 1 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3 4
typedef int error_t;
# 49 "/usr/include/errno.h" 2 3 4



}
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/cstring" 1 3
# 39 "/usr/include/c++/10/cstring" 3
       
# 40 "/usr/include/c++/10/cstring" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 1 3
# 262 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 284 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 522 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h" 1 3
# 523 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/cpu_defines.h" 1 3
# 526 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h" 2 3
# 42 "/usr/include/c++/10/cstring" 2 3
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4
}
# 43 "/usr/include/c++/10/cstring" 2 3
# 71 "/usr/include/c++/10/cstring" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 122 "/usr/include/c++/10/cstring" 3

}
}
# 236 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/c++/10/new" 1 3
# 38 "/usr/include/c++/10/new" 3
       
# 39 "/usr/include/c++/10/new" 3


# 1 "/usr/include/c++/10/exception" 1 3
# 33 "/usr/include/c++/10/exception" 3
       
# 34 "/usr/include/c++/10/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception.h" 1 3
# 34 "/usr/include/c++/10/bits/exception.h" 3
       
# 35 "/usr/include/c++/10/bits/exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "/usr/include/c++/10/bits/exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;

    exception(const exception&) = default;
    exception& operator=(const exception&) = default;
    exception(exception&&) = default;
    exception& operator=(exception&&) = default;




    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "/usr/include/c++/10/exception" 2 3

extern "C++" {

namespace std
{






  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 105 "/usr/include/c++/10/exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));




  int uncaught_exceptions() noexcept __attribute__ ((__pure__));



}

namespace __gnu_cxx
{

# 137 "/usr/include/c++/10/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "/usr/include/c++/10/bits/exception_ptr.h" 1 3
# 34 "/usr/include/c++/10/bits/exception_ptr.h" 3
#pragma GCC visibility push(default)


# 1 "/usr/include/c++/10/bits/exception_defines.h" 1 3
# 38 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 1 3
# 34 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
       
# 35 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 39 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 2 3
# 50 "/usr/include/c++/10/bits/cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void ( *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/typeinfo" 1 3
# 32 "/usr/include/c++/10/typeinfo" 3
       
# 33 "/usr/include/c++/10/typeinfo" 3



# 1 "/usr/include/c++/10/bits/hash_bytes.h" 1 3
# 33 "/usr/include/c++/10/bits/hash_bytes.h" 3
       
# 34 "/usr/include/c++/10/bits/hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "/usr/include/c++/10/typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "/usr/include/c++/10/typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }
# 115 "/usr/include/c++/10/typeinfo" 3
    bool before(const type_info& __arg) const noexcept
    { return (__name[0] == '*' && __arg.__name[0] == '*')
 ? __name < __arg.__name
 : __builtin_strcmp (__name, __arg.__name) < 0; }

    bool operator==(const type_info& __arg) const noexcept
    {
      return ((__name == __arg.__name)
       || (__name[0] != '*' &&
    __builtin_strcmp (__name, __arg.__name) == 0));
    }
# 138 "/usr/include/c++/10/typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }



    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "/usr/include/c++/10/bits/exception_ptr.h" 2 3
# 1 "/usr/include/c++/10/new" 1 3
# 41 "/usr/include/c++/10/bits/exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;






  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 118 "/usr/include/c++/10/bits/exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 145 "/usr/include/c++/10/bits/exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };



    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }




    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }


  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 213 "/usr/include/c++/10/bits/exception_ptr.h" 3
      return exception_ptr();

    }


}

}

#pragma GCC visibility pop
# 148 "/usr/include/c++/10/exception" 2 3
# 1 "/usr/include/c++/10/bits/nested_exception.h" 1 3
# 33 "/usr/include/c++/10/bits/nested_exception.h" 3
#pragma GCC visibility push(default)






# 1 "/usr/include/c++/10/bits/move.h" 1 3
# 38 "/usr/include/c++/10/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}

# 1 "/usr/include/c++/10/type_traits" 1 3
# 32 "/usr/include/c++/10/type_traits" 3
       
# 33 "/usr/include/c++/10/type_traits" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 56 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }




      constexpr value_type operator()() const noexcept { return value; }

    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "/usr/include/c++/10/type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template <typename _Type>
    struct __type_identity
    { using type = _Type; };

  template<typename _Tp>
    using __type_identity_t = typename __type_identity<_Tp>::type;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 188 "/usr/include/c++/10/type_traits" 3
  template<typename>
    struct is_reference;
  template<typename>
    struct is_function;
  template<typename>
    struct is_void;
  template<typename>
    struct __is_array_unknown_bounds;




  template <typename _Tp, size_t = sizeof(_Tp)>
    constexpr true_type __is_complete_or_unbounded(__type_identity<_Tp>)
    { return {}; }

  template <typename _TypeIdentity,
      typename _NestedType = typename _TypeIdentity::type>
    constexpr typename __or_<
      is_reference<_NestedType>,
      is_function<_NestedType>,
      is_void<_NestedType>,
      __is_array_unknown_bounds<_NestedType>
    >::type __is_complete_or_unbounded(_TypeIdentity)
    { return {}; }






  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };

  template<typename>
    struct remove_cv;


  template<typename _Tp>
    using __remove_cv_t = typename remove_cv<_Tp>::type;

  template<typename>
    struct is_const;



  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };
# 284 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };




  template<>
    struct __is_integral_helper<__int128>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned __int128>
    : public true_type { };
# 364 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };


  template<>
    struct __is_floating_point_helper<__float128>
    : public true_type { };



  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public __not_<is_function<_Tp>>::type { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public is_function<_Tp>::type { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename _Tp>
    struct is_function
    : public __bool_constant<!is_const<const _Tp>::value> { };

  template<typename _Tp>
    struct is_function<_Tp&>
    : public false_type { };

  template<typename _Tp>
    struct is_function<_Tp&&>
    : public false_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<__remove_cv_t<_Tp>>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { } __attribute__ ((__deprecated__ ("use '" "std::is_null_pointer" "' instead")));




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public __not_<is_fundamental<_Tp>>::type { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<__remove_cv_t<_Tp>>::type
    { };

  template<typename, typename>
    struct is_same;

  template<typename _Tp, typename... _Types>
    using __is_one_of = __or_<is_same<_Tp, _Types>...>;


  template<typename _Tp>
    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,
   signed char, signed short, signed int, signed long,
   signed long long

   , signed __int128
# 604 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,
   unsigned char, unsigned short, unsigned int, unsigned long,
   unsigned long long

   , unsigned __int128
# 623 "/usr/include/c++/10/type_traits" 3
   >;


  template<typename _Tp>
    using __is_standard_integer
      = __or_<__is_signed_integer<_Tp>, __is_unsigned_integer<_Tp>>;


  template<typename...> using __void_t = void;



  template<typename _Tp, typename = void>
    struct __is_referenceable
    : public false_type
    { };

  template<typename _Tp>
    struct __is_referenceable<_Tp, __void_t<_Tp&>>
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct
   
    is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };




  template<typename _Tp>
    struct is_final
    : public integral_constant<bool, __is_final(_Tp)>
    { };



  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 770 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static __bool_constant<noexcept(declval<_Tp&>().~_Tp())>
      __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename... _Args>
    struct __is_constructible_impl
    : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __is_constructible_impl<_Tp, _Args...>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public __is_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<bool, typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public false_type
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl<true, _Tp, _Args...>
    : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<true, _Tp, _Arg>
    : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<true, _Tp>
    : public __bool_constant<noexcept(_Tp())>
    { };

  template<typename _Tp, size_t _Num>
    struct __is_nt_constructible_impl<true, _Tp[_Num]>
    : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>
    { };
# 1001 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp, typename... _Args>
    using __is_nothrow_constructible_impl
      = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...),
       _Tp, _Args...>;


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __is_nothrow_constructible_impl<_Tp, _Args...>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __is_nothrow_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public __is_nothrow_constructible_impl<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_assignable
    : public __bool_constant<__is_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_assignable_impl
    : public __and_<__bool_constant<__is_assignable(_Tp, _Up)>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __is_nothrow_assignable_impl<_Tp, _Up>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public __is_nothrow_assignable_impl<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public __bool_constant<__is_trivially_constructible(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<__is_constructible_impl<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<__is_copy_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };


  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<__is_move_constructible_impl<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };


  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>
    { };


  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp&&)>
    { };


  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<__is_destructible_safe<_Tp>,
      __bool_constant<__has_trivial_destructor(_Tp)>>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, alignof(_Tp)>
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename _Tp, typename _Up>
    struct is_same

    : public integral_constant<bool, __is_same_as(_Tp, _Up)>



    { };
# 1410 "/usr/include/c++/10/type_traits" 3
  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    {
      typedef typename is_void<_To>::type type;
    };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };


  template<typename _ToElementType, typename _FromElementType>
    using __is_array_convertible
      = is_convertible<_FromElementType(*)[], _ToElementType(*)[]>;

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_nt_convertible_helper
    : is_void<_To>
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template<typename _From, typename _To>
    class __is_nt_convertible_helper<_From, _To, false>
    {
      template<typename _To1>
 static void __test_aux(_To1) noexcept;

      template<typename _From1, typename _To1>
 static
 __bool_constant<noexcept(__test_aux<_To1>(std::declval<_From1>()))>
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      using type = decltype(__test<_From, _To>(0));
    };
#pragma GCC diagnostic pop


  template<typename _From, typename _To>
    struct __is_nothrow_convertible
    : public __is_nt_convertible_helper<_From, _To>::type
    { };
# 1508 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<volatile _Tp>
    { using type = _Tp; };

  template<typename _Tp>
    struct remove_cv<const volatile _Tp>
    { using type = _Tp; };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };






  template<typename _Tp>
    using remove_const_t = typename remove_const<_Tp>::type;


  template<typename _Tp>
    using remove_volatile_t = typename remove_volatile<_Tp>::type;


  template<typename _Tp>
    using remove_cv_t = typename remove_cv<_Tp>::type;


  template<typename _Tp>
    using add_const_t = typename add_const<_Tp>::type;


  template<typename _Tp>
    using add_volatile_t = typename add_volatile<_Tp>::type;


  template<typename _Tp>
    using add_cv_t = typename add_cv<_Tp>::type;





  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_reference_t = typename remove_reference<_Tp>::type;


  template<typename _Tp>
    using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;


  template<typename _Tp>
    using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;





  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __make_unsigned<__int128>
    { typedef unsigned __int128 __type; };
# 1730 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      using __unsigned_type
 = typename __make_unsigned<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };

  class __make_unsigned_selector_base
  {
  protected:
    template<typename...> struct _List { };

    template<typename _Tp, typename... _Up>
      struct _List<_Tp, _Up...> : _List<_Up...>
      { static constexpr size_t __size = sizeof(_Tp); };

    template<size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
      struct __select;

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, true>
      { using __type = _Uint; };

    template<size_t _Sz, typename _Uint, typename... _UInts>
      struct __select<_Sz, _List<_Uint, _UInts...>, false>
      : __select<_Sz, _List<_UInts...>>
      { };
  };


  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    : __make_unsigned_selector_base
    {

      using _UInts = _List<unsigned char, unsigned short, unsigned int,
      unsigned long, unsigned long long>;

      using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
    };






  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };
# 1806 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };


  template<>
    struct __make_signed<unsigned __int128>
    { typedef __int128 __type; };
# 1884 "/usr/include/c++/10/type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      using __signed_type
 = typename __make_signed<__remove_cv_t<_Tp>>::__type;

    public:
      using __type
 = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
    };


  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };






  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };
# 1932 "/usr/include/c++/10/type_traits" 3
  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;



  template<typename _Tp>
    using make_signed_t = typename make_signed<_Tp>::type;


  template<typename _Tp>
    using make_unsigned_t = typename make_unsigned<_Tp>::type;





  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };



  template<typename _Tp>
    using remove_extent_t = typename remove_extent<_Tp>::type;


  template<typename _Tp>
    using remove_all_extents_t = typename remove_all_extents<_Tp>::type;




  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };



  template<typename _Tp>
    using remove_pointer_t = typename remove_pointer<_Tp>::type;


  template<typename _Tp>
    using add_pointer_t = typename add_pointer<_Tp>::type;


  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 2067 "/usr/include/c++/10/type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 2106 "/usr/include/c++/10/type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef __remove_cv_t<_Up> __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };


  template<typename _Tp>
    using __decay_t = typename decay<_Tp>::type;

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };


  template<bool _Cond, typename _Tp = void>
    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;

  template<typename... _Cond>
    using _Require = __enable_if_t<__and_<_Cond...>::value>;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename _Tp>
    using __remove_cvref_t
     = typename remove_cv<typename remove_reference<_Tp>::type>::type;


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      using __cond_t
 = decltype(true ? std::declval<_Tp>() : std::declval<_Up>());



    template<typename _Tp, typename _Up>
      static __success_type<__decay_t<__cond_t<_Tp, _Up>>>
      _S_test(int);
# 2239 "/usr/include/c++/10/type_traits" 3
    template<typename, typename>
      static __failure_type
      _S_test_2(...);

    template<typename _Tp, typename _Up>
      static decltype(_S_test_2<_Tp, _Up>(0))
      _S_test(...);
  };


  template<>
    struct common_type<>
    { };


  template<typename _Tp0>
    struct common_type<_Tp0>
    : public common_type<_Tp0, _Tp0>
    { };


  template<typename _Tp1, typename _Tp2,
    typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>
    struct __common_type_impl
    {


      using type = common_type<_Dp1, _Dp2>;
    };

  template<typename _Tp1, typename _Tp2>
    struct __common_type_impl<_Tp1, _Tp2, _Tp1, _Tp2>
    : private __do_common_type_impl
    {


      using type = decltype(_S_test<_Tp1, _Tp2>(0));
    };


  template<typename _Tp1, typename _Tp2>
    struct common_type<_Tp1, _Tp2>
    : public __common_type_impl<_Tp1, _Tp2>::type
    { };

  template<typename...>
    struct __common_type_pack
    { };

  template<typename, typename, typename = void>
    struct __common_type_fold;


  template<typename _Tp1, typename _Tp2, typename... _Rp>
    struct common_type<_Tp1, _Tp2, _Rp...>
    : public __common_type_fold<common_type<_Tp1, _Tp2>,
    __common_type_pack<_Rp...>>
    { };




  template<typename _CTp, typename... _Rp>
    struct __common_type_fold<_CTp, __common_type_pack<_Rp...>,
         __void_t<typename _CTp::type>>
    : public common_type<typename _CTp::type, _Rp...>
    { };


  template<typename _CTp, typename _Rp>
    struct __common_type_fold<_CTp, _Rp, void>
    { };

  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __underlying_type_impl
    {
      using type = __underlying_type(_Tp);
    };

  template<typename _Tp>
    struct __underlying_type_impl<_Tp, false>
    { };


  template<typename _Tp>
    struct underlying_type
    : public __underlying_type_impl<_Tp>
    { };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }


  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef __remove_cvref_t<_Arg> _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_reference<_Arg>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<is_base_of<_Class, _Argval>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<__decay_t<_MemPtr>,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };



  template<size_t _Len, size_t _Align =
     __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

  template <size_t _Len, typename... _Types>
    using aligned_union_t = typename aligned_union<_Len, _Types...>::type;


  template<typename _Tp>
    using decay_t = typename decay<_Tp>::type;


  template<bool _Cond, typename _Tp = void>
    using enable_if_t = typename enable_if<_Cond, _Tp>::type;


  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;


  template<typename... _Tp>
    using common_type_t = typename common_type<_Tp...>::type;


  template<typename _Tp>
    using underlying_type_t = typename underlying_type<_Tp>::type;


  template<typename _Tp>
    using result_of_t = typename result_of<_Tp>::type;





  template<typename...> using void_t = void;



  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2624 "/usr/include/c++/10/type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
    { };

  template<typename _Tp>
   
    inline
    _Require<__not_<__is_tuple_like<_Tp>>,
      is_move_constructible<_Tp>,
      is_move_assignable<_Tp>>
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
   
    inline
    __enable_if_t<__is_swappable<_Tp>::value>
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };






  template<typename _Tp>
    struct is_swappable
    : public __is_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };


  template<typename _Tp>
    struct is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    {
      static_assert(std::__is_complete_or_unbounded(__type_identity<_Tp>{}),
 "template argument must be a complete class or an unbounded array");
    };



  template<typename _Tp>
    constexpr bool is_swappable_v =
      is_swappable<_Tp>::value;


  template<typename _Tp>
    constexpr bool is_nothrow_swappable_v =
      is_nothrow_swappable<_Tp>::value;


  namespace __swappable_with_details {
    using std::swap;

    struct __do_is_swappable_with_impl
    {
      template<typename _Tp, typename _Up, typename
               = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
               typename
               = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
        static true_type __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_with_impl
    {
      template<typename _Tp, typename _Up>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp>(), std::declval<_Up>()))
          &&
          noexcept(swap(std::declval<_Up>(), std::declval<_Tp>()))
        > __test(int);

      template<typename, typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp, typename _Up>
    struct __is_swappable_with_impl
    : public __swappable_with_details::__do_is_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };

  template<typename _Tp, typename _Up>
    struct __is_nothrow_swappable_with_impl
    : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
    {
      typedef decltype(__test<_Tp, _Up>(0)) type;
    };


  template<typename _Tp>
    struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&>
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp&>(0)) type;
    };


  template<typename _Tp, typename _Up>
    struct is_swappable_with
    : public __is_swappable_with_impl<_Tp, _Up>::type
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_swappable_with
    : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
    { };



  template<typename _Tp, typename _Up>
    constexpr bool is_swappable_with_v =
      is_swappable_with<_Tp, _Up>::value;


  template<typename _Tp, typename _Up>
    constexpr bool is_nothrow_swappable_with_v =
      is_nothrow_swappable_with<_Tp, _Up>::value;







  template<typename _Result, typename _Ret,
    bool = is_void<_Ret>::value, typename = void>
    struct __is_invocable_impl : false_type { };


  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                true,
          __void_t<typename _Result::type>>
    : true_type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret,
                                false,
          __void_t<typename _Result::type>>
    {
    private:


      static typename _Result::type _S_get();

      template<typename _Tp>
 static void _S_conv(_Tp);


      template<typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>
 static true_type
 _S_test(int);

      template<typename _Tp>
 static false_type
 _S_test(...);

    public:
      using type = decltype(_S_test<_Ret>(1));
    };
#pragma GCC diagnostic pop

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  struct __nonesuchbase {};
  struct __nonesuch : private __nonesuchbase {
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
#pragma GCC diagnostic pop
# 3455 "/usr/include/c++/10/type_traits" 3

}
# 58 "/usr/include/c++/10/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 118 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 138 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 179 "/usr/include/c++/10/bits/move.h" 3
  template<typename _Tp>
   
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type



    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)

    {




      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
   
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type



    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 41 "/usr/include/c++/10/bits/nested_exception.h" 2 3

extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };



  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }





  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }




  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }




  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 149 "/usr/include/c++/10/exception" 2 3
# 42 "/usr/include/c++/10/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }


    bad_alloc(const bad_alloc&) = default;
    bad_alloc& operator=(const bad_alloc&) = default;




    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 126 "/usr/include/c++/10/new" 3
 void* operator new(std::size_t)
  __attribute__((__externally_visible__));
 void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));

void operator delete(void*, std::size_t) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept
  __attribute__((__externally_visible__));

 void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
 void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 174 "/usr/include/c++/10/new" 3
 inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
 inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 230 "/usr/include/c++/10/new" 3
#pragma GCC visibility pop
# 237 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/c++/10/utility" 1 3
# 58 "/usr/include/c++/10/utility" 3
       
# 59 "/usr/include/c++/10/utility" 3
# 69 "/usr/include/c++/10/utility" 3
# 1 "/usr/include/c++/10/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/10/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace rel_ops
  {
# 85 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/10/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }
  }


}
# 70 "/usr/include/c++/10/utility" 2 3
# 1 "/usr/include/c++/10/bits/stl_pair.h" 1 3
# 69 "/usr/include/c++/10/bits/stl_pair.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 80 "/usr/include/c++/10/bits/stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();




  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };


  template<typename _U1, typename _U2> class __pair_base
  {

    template<typename _T1, typename _T2> friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;

  };
# 210 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    : private __pair_base<_T1, _T2>
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 256 "/usr/include/c++/10/bits/stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;



      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }


       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 288 "/usr/include/c++/10/bits/stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }



      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>

        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
        is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
      is_assignable<_T2&, const _U2&>>::value,
      pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
      is_assignable<_T2&, _U2&&>>::value,
      pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }


      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>

        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };
# 464 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }
# 487 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 524 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    inline


    typename enable_if<__and_<__is_swappable<_T1>,
                              __is_swappable<_T2>>::value>::type



    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename _T1, typename _T2>
    typename enable_if<!__and_<__is_swappable<_T1>,
          __is_swappable<_T2>>::value>::type
    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
# 564 "/usr/include/c++/10/bits/stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 583 "/usr/include/c++/10/bits/stl_pair.h" 3

}
# 71 "/usr/include/c++/10/utility" 2 3





# 1 "/usr/include/c++/10/initializer_list" 1 3
# 33 "/usr/include/c++/10/initializer_list" 3
       
# 34 "/usr/include/c++/10/initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };







  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }







  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 77 "/usr/include/c++/10/utility" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp>
    struct tuple_size;





  template<typename _Tp,
    typename _Up = typename remove_cv<_Tp>::type,
    typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
    size_t = tuple_size<_Tp>::value>
    using __enable_if_has_tuple_size = _Tp;

  template<typename _Tp>
    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };

  template<typename _Tp>
    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>
    : public tuple_size<_Tp> { };


  template<std::size_t __i, typename _Tp>
    struct tuple_element;


  template<std::size_t __i, typename _Tp>
    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const _Tp>
    {
      typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, volatile _Tp>
    {
      typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
    };

  template<std::size_t __i, typename _Tp>
    struct tuple_element<__i, const volatile _Tp>
    {
      typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
    };







  template<std::size_t __i, typename _Tp>
    using tuple_element_t = typename tuple_element<__i, _Tp>::type;





  template<typename _T1, typename _T2>
    struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
    { };


  template<class _Tp1, class _Tp2>
    struct tuple_size<std::pair<_Tp1, _Tp2>>
    : public integral_constant<std::size_t, 2> { };


  template<class _Tp1, class _Tp2>
    struct tuple_element<0, std::pair<_Tp1, _Tp2>>
    { typedef _Tp1 type; };


  template<class _Tp1, class _Tp2>
    struct tuple_element<1, std::pair<_Tp1, _Tp2>>
    { typedef _Tp2 type; };

  template<std::size_t _Int>
    struct __pair_get;

  template<>
    struct __pair_get<0>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp1&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp1>(__pair.first); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.first; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp1&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp1>(__pair.first); }
    };

  template<>
    struct __pair_get<1>
    {
      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&
        __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr _Tp2&&
        __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<_Tp2>(__pair.second); }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&
        __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
        { return __pair.second; }

      template<typename _Tp1, typename _Tp2>
        static constexpr const _Tp2&&
        __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
        { return std::forward<const _Tp2>(__pair.second); }
    };

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__move_get(std::move(__in)); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&
    get(const std::pair<_Tp1, _Tp2>& __in) noexcept
    { return __pair_get<_Int>::__const_get(__in); }

  template<std::size_t _Int, class _Tp1, class _Tp2>
    constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&&
    get(const std::pair<_Tp1, _Tp2>&& __in) noexcept
    { return __pair_get<_Int>::__const_move_get(std::move(__in)); }





  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Tp, _Up>& __p) noexcept
    { return __p.first; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Tp, _Up>&& __p) noexcept
    { return std::move(__p.first); }

  template <typename _Tp, typename _Up>
    constexpr _Tp&
    get(pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&
    get(const pair<_Up, _Tp>& __p) noexcept
    { return __p.second; }

  template <typename _Tp, typename _Up>
    constexpr _Tp&&
    get(pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }

  template <typename _Tp, typename _Up>
    constexpr const _Tp&&
    get(const pair<_Up, _Tp>&& __p) noexcept
    { return std::move(__p.second); }




  template <typename _Tp, typename _Up = _Tp>
   
    inline _Tp
    exchange(_Tp& __obj, _Up&& __new_val)
    { return std::__exchange(__obj, std::forward<_Up>(__new_val)); }





  template<size_t... _Indexes> struct _Index_tuple { };
# 307 "/usr/include/c++/10/utility" 3
  template<size_t _Num>
    struct _Build_index_tuple
    {






      using __type = _Index_tuple<__integer_pack(_Num)...>;

    };






  template<typename _Tp, _Tp... _Idx>
    struct integer_sequence
    {
      typedef _Tp value_type;
      static constexpr size_t size() noexcept { return sizeof...(_Idx); }
    };


  template<typename _Tp, _Tp _Num>
    using make_integer_sequence



      = integer_sequence<_Tp, __integer_pack(_Num)...>;





  template<size_t... _Idx>
    using index_sequence = integer_sequence<size_t, _Idx...>;


  template<size_t _Num>
    using make_index_sequence = make_integer_sequence<size_t, _Num>;


  template<typename... _Types>
    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
# 473 "/usr/include/c++/10/utility" 3

}
# 238 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 259 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/c++/10/stdlib.h" 1 3
# 36 "/usr/include/c++/10/stdlib.h" 3
# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 75 "/usr/include/c++/10/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;
# 401 "/usr/include/stdlib.h" 3 4
extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 826 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/10/cstdlib" 2 3

# 1 "/usr/include/c++/10/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/10/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/10/bits/std_abs.h" 3
# 46 "/usr/include/c++/10/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/10/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/10/cstdlib" 2 3
# 121 "/usr/include/c++/10/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/10/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/10/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/10/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 260 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2







# 1 "/usr/include/c++/10/cstdlib" 1 3
# 39 "/usr/include/c++/10/cstdlib" 3
       
# 40 "/usr/include/c++/10/cstdlib" 3
# 268 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 295 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 202 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 203 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 207 "/usr/include/unistd.h" 2 3 4
# 226 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 227 "/usr/include/unistd.h" 2 3 4
# 267 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 287 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 334 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 345 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, const void *__buf, size_t __n) ;
# 376 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) ;
# 404 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 432 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 444 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 469 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 511 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 610 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 660 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () ;




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () ;




extern int seteuid (__uid_t __uid) throw () ;






extern int setgid (__gid_t __gid) throw () ;




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () ;




extern int setegid (__gid_t __gid) throw () ;





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () ;



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () ;






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 870 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 991 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1003 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1014 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1024 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1035 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1056 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1079 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1089 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1107 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);
# 1124 "/usr/include/unistd.h" 3 4
extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));







extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1161 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) ;
# 1170 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/unistd_ext.h" 3 4
extern __pid_t gettid (void) throw ();
# 1171 "/usr/include/unistd.h" 2 3 4

}
# 296 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/sys/param.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 195 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 26 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/limits.h" 2 3 4
# 183 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 162 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 184 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 188 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uio_lim.h" 1 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 192 "/usr/include/limits.h" 2 3 4
# 196 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/10/include/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 2 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4

# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_DETHREAD = -7,

  SI_TKILL,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 66 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK,

  ILL_BADIADDR

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB,

  FPE_FLTUNK = 14,

  FPE_CONDTRAP

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR,

  SEGV_ACCADI,

  SEGV_ADIDERR,

  SEGV_ADIPERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE,

  TRAP_BRANCH,

  TRAP_HWBKPT,

  TRAP_UNK

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 210 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
    __extension__ unsigned long long int __ssp[4];
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();





# 1 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/signal_ext.h" 3 4
extern int tgkill (__pid_t __tgid, __pid_t __tid, int __signal);
# 375 "/usr/include/signal.h" 2 3 4

}
# 29 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/param.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/param.h" 3 4
# 1 "/usr/include/linux/param.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/param.h" 1 3 4
# 1 "/usr/include/asm-generic/param.h" 1 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/param.h" 2 3 4
# 6 "/usr/include/linux/param.h" 2 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/param.h" 2 3 4
# 32 "/usr/include/x86_64-linux-gnu/sys/param.h" 2 3 4
# 300 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2






# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 307 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };
# 66 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    void *__restrict __tz) throw () __attribute__ ((__nonnull__ (1)));







extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 187 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 338 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;
# 190 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 205 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 274 "/usr/include/time.h" 3 4
extern int getdate_err;
# 283 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 297 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 339 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 350 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/fcntl.h" 1 3 4
# 28 "/usr/include/fcntl.h" 3 4
extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 3 4
struct flock
  {
    short int l_type;
    short int l_whence;

    __off_t l_start;
    __off_t l_len;




    __pid_t l_pid;
  };


struct flock64
  {
    short int l_type;
    short int l_whence;
    __off64_t l_start;
    __off64_t l_len;
    __pid_t l_pid;
  };



# 1 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/struct_iovec.h" 2 3 4


struct iovec
  {
    void *iov_base;
    size_t iov_len;
  };
# 39 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4
# 265 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
enum __pid_type
  {
    F_OWNER_TID = 0,
    F_OWNER_PID,
    F_OWNER_PGRP,
    F_OWNER_GID = F_OWNER_PGRP
  };


struct f_owner_ex
  {
    enum __pid_type type;
    __pid_t pid;
  };
# 353 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
# 1 "/usr/include/linux/falloc.h" 1 3 4
# 354 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 2 3 4



struct file_handle
{
  unsigned int handle_bytes;
  int handle_type;

  unsigned char f_handle[0];
};
# 392 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern "C" {




extern __ssize_t readahead (int __fd, __off64_t __offset, size_t __count)
    throw ();






extern int sync_file_range (int __fd, __off64_t __offset, __off64_t __count,
       unsigned int __flags);






extern __ssize_t vmsplice (int __fdout, const struct iovec *__iov,
      size_t __count, unsigned int __flags);





extern __ssize_t splice (int __fdin, __off64_t *__offin, int __fdout,
    __off64_t *__offout, size_t __len,
    unsigned int __flags);





extern __ssize_t tee (int __fdin, int __fdout, size_t __len,
        unsigned int __flags);






extern int fallocate (int __fd, int __mode, __off_t __offset, __off_t __len);
# 447 "/usr/include/x86_64-linux-gnu/bits/fcntl-linux.h" 3 4
extern int fallocate64 (int __fd, int __mode, __off64_t __offset,
   __off64_t __len);




extern int name_to_handle_at (int __dfd, const char *__name,
         struct file_handle *__handle, int *__mnt_id,
         int __flags) throw ();





extern int open_by_handle_at (int __mountdirfd, struct file_handle *__handle,
         int __flags);



}
# 62 "/usr/include/x86_64-linux-gnu/bits/fcntl.h" 2 3 4
# 36 "/usr/include/fcntl.h" 2 3 4
# 78 "/usr/include/fcntl.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
struct stat
  {
    __dev_t st_dev;




    __ino_t st_ino;







    __nlink_t st_nlink;
    __mode_t st_mode;

    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;

    __dev_t st_rdev;




    __off_t st_size;



    __blksize_t st_blksize;

    __blkcnt_t st_blocks;
# 91 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 106 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];
# 115 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
  };



struct stat64
  {
    __dev_t st_dev;

    __ino64_t st_ino;
    __nlink_t st_nlink;
    __mode_t st_mode;






    __uid_t st_uid;
    __gid_t st_gid;

    int __pad0;
    __dev_t st_rdev;
    __off_t st_size;





    __blksize_t st_blksize;
    __blkcnt64_t st_blocks;







    struct timespec st_atim;
    struct timespec st_mtim;
    struct timespec st_ctim;
# 164 "/usr/include/x86_64-linux-gnu/bits/stat.h" 3 4
    __syscall_slong_t __glibc_reserved[3];



  };
# 79 "/usr/include/fcntl.h" 2 3 4
# 148 "/usr/include/fcntl.h" 3 4
extern int fcntl (int __fd, int __cmd, ...);
# 157 "/usr/include/fcntl.h" 3 4
extern int fcntl64 (int __fd, int __cmd, ...);
# 168 "/usr/include/fcntl.h" 3 4
extern int open (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 178 "/usr/include/fcntl.h" 3 4
extern int open64 (const char *__file, int __oflag, ...) __attribute__ ((__nonnull__ (1)));
# 192 "/usr/include/fcntl.h" 3 4
extern int openat (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 203 "/usr/include/fcntl.h" 3 4
extern int openat64 (int __fd, const char *__file, int __oflag, ...)
     __attribute__ ((__nonnull__ (2)));
# 214 "/usr/include/fcntl.h" 3 4
extern int creat (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/fcntl.h" 3 4
extern int creat64 (const char *__file, mode_t __mode) __attribute__ ((__nonnull__ (1)));
# 260 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise (int __fd, off_t __offset, off_t __len,
     int __advise) throw ();
# 272 "/usr/include/fcntl.h" 3 4
extern int posix_fadvise64 (int __fd, off64_t __offset, off64_t __len,
       int __advise) throw ();
# 282 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate (int __fd, off_t __offset, off_t __len);
# 293 "/usr/include/fcntl.h" 3 4
extern int posix_fallocate64 (int __fd, off64_t __offset, off64_t __len);
# 304 "/usr/include/fcntl.h" 3 4
}
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 397 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/wait.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern "C" {
# 77 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);
# 100 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 121 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);






struct rusage;






extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) throw ();




extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) throw ();



}
# 398 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 1 3 4
# 113 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4
extern "C" {



int memfd_create (const char *__name, unsigned int __flags) throw ();



int mlock2 (const void *__addr, size_t __length, unsigned int __flags) throw ();





int pkey_alloc (unsigned int __flags, unsigned int __access_rights) throw ();



int pkey_set (int __key, unsigned int __access_rights) throw ();



int pkey_get (int __key) throw ();



int pkey_free (int __key) throw ();



int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) throw ();

}
# 114 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 2 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4




extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 70 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (const void *__addr, size_t __len) throw ();


extern int munlock (const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 133 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);

}
# 429 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/resource.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/resource.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
enum __rlimit_resource
{

  RLIMIT_CPU = 0,



  RLIMIT_FSIZE = 1,



  RLIMIT_DATA = 2,



  RLIMIT_STACK = 3,



  RLIMIT_CORE = 4,






  __RLIMIT_RSS = 5,



  RLIMIT_NOFILE = 7,
  __RLIMIT_OFILE = RLIMIT_NOFILE,




  RLIMIT_AS = 9,



  __RLIMIT_NPROC = 6,



  __RLIMIT_MEMLOCK = 8,



  __RLIMIT_LOCKS = 10,



  __RLIMIT_SIGPENDING = 11,



  __RLIMIT_MSGQUEUE = 12,





  __RLIMIT_NICE = 13,




  __RLIMIT_RTPRIO = 14,





  __RLIMIT_RTTIME = 15,


  __RLIMIT_NLIMITS = 16,
  __RLIM_NLIMITS = __RLIMIT_NLIMITS


};
# 131 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
typedef __rlim_t rlim_t;




typedef __rlim64_t rlim64_t;


struct rlimit
  {

    rlim_t rlim_cur;

    rlim_t rlim_max;
  };


struct rlimit64
  {

    rlim64_t rlim_cur;

    rlim64_t rlim_max;
 };



enum __rusage_who
{

  RUSAGE_SELF = 0,



  RUSAGE_CHILDREN = -1



  ,

  RUSAGE_THREAD = 1




};


# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/types/struct_rusage.h" 3 4
struct rusage
  {

    struct timeval ru_utime;

    struct timeval ru_stime;

    __extension__ union
      {
 long int ru_maxrss;
 __syscall_slong_t __ru_maxrss_word;
      };


    __extension__ union
      {
 long int ru_ixrss;
 __syscall_slong_t __ru_ixrss_word;
      };

    __extension__ union
      {
 long int ru_idrss;
 __syscall_slong_t __ru_idrss_word;
      };

    __extension__ union
      {
 long int ru_isrss;
  __syscall_slong_t __ru_isrss_word;
      };


    __extension__ union
      {
 long int ru_minflt;
 __syscall_slong_t __ru_minflt_word;
      };

    __extension__ union
      {
 long int ru_majflt;
 __syscall_slong_t __ru_majflt_word;
      };

    __extension__ union
      {
 long int ru_nswap;
 __syscall_slong_t __ru_nswap_word;
      };


    __extension__ union
      {
 long int ru_inblock;
 __syscall_slong_t __ru_inblock_word;
      };

    __extension__ union
      {
 long int ru_oublock;
 __syscall_slong_t __ru_oublock_word;
      };

    __extension__ union
      {
 long int ru_msgsnd;
 __syscall_slong_t __ru_msgsnd_word;
      };

    __extension__ union
      {
 long int ru_msgrcv;
 __syscall_slong_t __ru_msgrcv_word;
      };

    __extension__ union
      {
 long int ru_nsignals;
 __syscall_slong_t __ru_nsignals_word;
      };



    __extension__ union
      {
 long int ru_nvcsw;
 __syscall_slong_t __ru_nvcsw_word;
      };


    __extension__ union
      {
 long int ru_nivcsw;
 __syscall_slong_t __ru_nivcsw_word;
      };
  };
# 180 "/usr/include/x86_64-linux-gnu/bits/resource.h" 2 3 4







enum __priority_which
{
  PRIO_PROCESS = 0,

  PRIO_PGRP = 1,

  PRIO_USER = 2

};


extern "C" {




extern int prlimit (__pid_t __pid, enum __rlimit_resource __resource,
      const struct rlimit *__new_limit,
      struct rlimit *__old_limit) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/resource.h" 3 4
extern int prlimit64 (__pid_t __pid, enum __rlimit_resource __resource,
        const struct rlimit64 *__new_limit,
        struct rlimit64 *__old_limit) throw ();



}
# 25 "/usr/include/x86_64-linux-gnu/sys/resource.h" 2 3 4






extern "C" {
# 42 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
typedef int __rlimit_resource_t;
typedef int __rusage_who_t;
typedef int __priority_which_t;





extern int getrlimit (__rlimit_resource_t __resource,
        struct rlimit *__rlimits) throw ();
# 61 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int getrlimit64 (__rlimit_resource_t __resource,
   struct rlimit64 *__rlimits) throw ();






extern int setrlimit (__rlimit_resource_t __resource,
        const struct rlimit *__rlimits) throw ();
# 81 "/usr/include/x86_64-linux-gnu/sys/resource.h" 3 4
extern int setrlimit64 (__rlimit_resource_t __resource,
   const struct rlimit64 *__rlimits) throw ();




extern int getrusage (__rusage_who_t __who, struct rusage *__usage) throw ();





extern int getpriority (__priority_which_t __which, id_t __who) throw ();



extern int setpriority (__priority_which_t __which, id_t __who, int __prio)
     throw ();

}
# 441 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/times.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/sys/times.h" 3 4
extern "C" {


struct tms
  {
    clock_t tms_utime;
    clock_t tms_stime;

    clock_t tms_cutime;
    clock_t tms_cstime;
  };






extern clock_t times (struct tms *__buffer) throw ();

}
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"

# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 521 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}



# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4

# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h" 2 3 4
# 526 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/usr/include/inttypes.h" 1 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const wchar_t * __restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) wcstoimax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const wchar_t *
          __restrict __nptr,
          wchar_t **
          __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) ;

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) wcstoumax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4
}
# 530 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2




# 533 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern "C" {
# 576 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
}
# 599 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/x86_64-linux-gnu/sys/stat.h" 1 3 4
# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4

# 99 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/stat.h" 1 3 4
# 102 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4
# 205 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat (const char *__restrict __file,
   struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int fstat (int __fd, struct stat *__buf) throw () __attribute__ ((__nonnull__ (2)));
# 224 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int stat64 (const char *__restrict __file,
     struct stat64 *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int fstat64 (int __fd, struct stat64 *__buf) throw () __attribute__ ((__nonnull__ (2)));







extern int fstatat (int __fd, const char *__restrict __file,
      struct stat *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));
# 249 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int fstatat64 (int __fd, const char *__restrict __file,
        struct stat64 *__restrict __buf, int __flag)
     throw () __attribute__ ((__nonnull__ (2, 3)));







extern int lstat (const char *__restrict __file,
    struct stat *__restrict __buf) throw () __attribute__ ((__nonnull__ (1, 2)));
# 272 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int lstat64 (const char *__restrict __file,
      struct stat64 *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int chmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int lchmod (const char *__file, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));




extern int fchmod (int __fd, __mode_t __mode) throw ();





extern int fchmodat (int __fd, const char *__file, __mode_t __mode,
       int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;






extern __mode_t umask (__mode_t __mask) throw ();




extern __mode_t getumask (void) throw ();



extern int mkdir (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkdirat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));






extern int mknod (const char *__path, __mode_t __mode, __dev_t __dev)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mknodat (int __fd, const char *__path, __mode_t __mode,
      __dev_t __dev) throw () __attribute__ ((__nonnull__ (2)));





extern int mkfifo (const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (1)));





extern int mkfifoat (int __fd, const char *__path, __mode_t __mode)
     throw () __attribute__ ((__nonnull__ (2)));





extern int utimensat (int __fd, const char *__path,
        const struct timespec __times[2],
        int __flags)
     throw () __attribute__ ((__nonnull__ (2)));




extern int futimens (int __fd, const struct timespec __times[2]) throw ();
# 395 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat (int __ver, int __fildes, struct stat *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat (int __ver, const char *__filename,
      struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat (int __ver, const char *__filename,
       struct stat *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat (int __ver, int __fildes, const char *__filename,
         struct stat *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));
# 428 "/usr/include/x86_64-linux-gnu/sys/stat.h" 3 4
extern int __fxstat64 (int __ver, int __fildes, struct stat64 *__stat_buf)
     throw () __attribute__ ((__nonnull__ (3)));
extern int __xstat64 (int __ver, const char *__filename,
        struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __lxstat64 (int __ver, const char *__filename,
         struct stat64 *__stat_buf) throw () __attribute__ ((__nonnull__ (2, 3)));
extern int __fxstatat64 (int __ver, int __fildes, const char *__filename,
    struct stat64 *__stat_buf, int __flag)
     throw () __attribute__ ((__nonnull__ (3, 4)));

extern int __xmknod (int __ver, const char *__path, __mode_t __mode,
       __dev_t *__dev) throw () __attribute__ ((__nonnull__ (2, 4)));

extern int __xmknodat (int __ver, int __fd, const char *__path,
         __mode_t __mode, __dev_t *__dev)
     throw () __attribute__ ((__nonnull__ (3, 5)));


# 1 "/usr/include/x86_64-linux-gnu/bits/statx.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/statx.h" 3 4
# 1 "/usr/include/linux/stat.h" 1 3 4




# 1 "/usr/include/linux/types.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/asm/types.h" 1 3 4
# 1 "/usr/include/asm-generic/types.h" 1 3 4






# 1 "/usr/include/asm-generic/int-ll64.h" 1 3 4
# 12 "/usr/include/asm-generic/int-ll64.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 3 4
# 1 "/usr/include/asm-generic/bitsperlong.h" 1 3 4
# 12 "/usr/include/x86_64-linux-gnu/asm/bitsperlong.h" 2 3 4
# 13 "/usr/include/asm-generic/int-ll64.h" 2 3 4







typedef __signed__ char __s8;
typedef unsigned char __u8;

typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;


__extension__ typedef __signed__ long long __s64;
__extension__ typedef unsigned long long __u64;
# 8 "/usr/include/asm-generic/types.h" 2 3 4
# 2 "/usr/include/x86_64-linux-gnu/asm/types.h" 2 3 4
# 6 "/usr/include/linux/types.h" 2 3 4



# 1 "/usr/include/linux/posix_types.h" 1 3 4




# 1 "/usr/include/linux/stddef.h" 1 3 4
# 6 "/usr/include/linux/posix_types.h" 2 3 4
# 25 "/usr/include/linux/posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits[1024 / (8 * sizeof(long))];
} __kernel_fd_set;


typedef void (*__kernel_sighandler_t)(int);


typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 1 3 4






# 1 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 3 4
typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;


typedef unsigned long __kernel_old_dev_t;


# 1 "/usr/include/asm-generic/posix_types.h" 1 3 4
# 15 "/usr/include/asm-generic/posix_types.h" 3 4
typedef long __kernel_long_t;
typedef unsigned long __kernel_ulong_t;



typedef __kernel_ulong_t __kernel_ino_t;



typedef unsigned int __kernel_mode_t;



typedef int __kernel_pid_t;



typedef int __kernel_ipc_pid_t;



typedef unsigned int __kernel_uid_t;
typedef unsigned int __kernel_gid_t;



typedef __kernel_long_t __kernel_suseconds_t;



typedef int __kernel_daddr_t;



typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;
# 72 "/usr/include/asm-generic/posix_types.h" 3 4
typedef __kernel_ulong_t __kernel_size_t;
typedef __kernel_long_t __kernel_ssize_t;
typedef __kernel_long_t __kernel_ptrdiff_t;




typedef struct {
 int val[2];
} __kernel_fsid_t;





typedef __kernel_long_t __kernel_off_t;
typedef long long __kernel_loff_t;
typedef __kernel_long_t __kernel_old_time_t;
typedef __kernel_long_t __kernel_time_t;
typedef long long __kernel_time64_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef char * __kernel_caddr_t;
typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
# 19 "/usr/include/x86_64-linux-gnu/asm/posix_types_64.h" 2 3 4
# 8 "/usr/include/x86_64-linux-gnu/asm/posix_types.h" 2 3 4
# 37 "/usr/include/linux/posix_types.h" 2 3 4
# 10 "/usr/include/linux/types.h" 2 3 4
# 24 "/usr/include/linux/types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;
typedef __u64 __le64;
typedef __u64 __be64;

typedef __u16 __sum16;
typedef __u32 __wsum;
# 47 "/usr/include/linux/types.h" 3 4
typedef unsigned __poll_t;
# 6 "/usr/include/linux/stat.h" 2 3 4
# 56 "/usr/include/linux/stat.h" 3 4
struct statx_timestamp {
 __s64 tv_sec;
 __u32 tv_nsec;
 __s32 __reserved;
};
# 99 "/usr/include/linux/stat.h" 3 4
struct statx {

 __u32 stx_mask;
 __u32 stx_blksize;
 __u64 stx_attributes;

 __u32 stx_nlink;
 __u32 stx_uid;
 __u32 stx_gid;
 __u16 stx_mode;
 __u16 __spare0[1];

 __u64 stx_ino;
 __u64 stx_size;
 __u64 stx_blocks;
 __u64 stx_attributes_mask;

 struct statx_timestamp stx_atime;
 struct statx_timestamp stx_btime;
 struct statx_timestamp stx_ctime;
 struct statx_timestamp stx_mtime;

 __u32 stx_rdev_major;
 __u32 stx_rdev_minor;
 __u32 stx_dev_major;
 __u32 stx_dev_minor;

 __u64 __spare2[14];

};
# 32 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx_timestamp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_statx.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/statx-generic.h" 3 4
extern "C" {


int statx (int __dirfd, const char *__restrict __path, int __flags,
           unsigned int __mask, struct statx *__restrict __buf)
  throw () __attribute__ ((__nonnull__ (2, 5)));

}
# 40 "/usr/include/x86_64-linux-gnu/bits/statx.h" 2 3 4
# 447 "/usr/include/x86_64-linux-gnu/sys/stat.h" 2 3 4





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat (const char *__path, struct stat *__statbuf) throw ()
{
  return __xstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat (const char *__path, struct stat *__statbuf) throw ()
{
  return __lxstat (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat (int __fd, struct stat *__statbuf) throw ()
{
  return __fxstat (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat (int __fd, const char *__filename, struct stat *__statbuf, int __flag) throw ()

{
  return __fxstatat (1, __fd, __filename, __statbuf, __flag);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknod (const char *__path, __mode_t __mode, __dev_t __dev) throw ()
{
  return __xmknod (0, __path, __mode, &__dev);
}



extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) mknodat (int __fd, const char *__path, __mode_t __mode, __dev_t __dev) throw ()

{
  return __xmknodat (0, __fd, __path, __mode, &__dev);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) stat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __xstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) lstat64 (const char *__path, struct stat64 *__statbuf) throw ()
{
  return __lxstat64 (1, __path, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstat64 (int __fd, struct stat64 *__statbuf) throw ()
{
  return __fxstat64 (1, __fd, __statbuf);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) fstatat64 (int __fd, const char *__filename, struct stat64 *__statbuf, int __flag) throw ()

{
  return __fxstatat64 (1, __fd, __filename, __statbuf, __flag);
}






}
# 600 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 671 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"

# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
extern "C" {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/ansidecl.h" 1
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 2


typedef unsigned int hashval_t;




typedef hashval_t (*htab_hash) (const void *);






typedef int (*htab_eq) (const void *, const void *);



typedef void (*htab_del) (void *);





typedef int (*htab_trav) (void **, void *);





typedef void *(*htab_alloc) (size_t, size_t);


typedef void (*htab_free) (void *);



typedef void *(*htab_alloc_with_arg) (void *, size_t, size_t);
typedef void (*htab_free_with_arg) (void *, void *);
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h"
struct htab {

  htab_hash hash_f;


  htab_eq eq_f;


  htab_del del_f;


  void **entries;


  size_t size;


  size_t n_elements;


  size_t n_deleted;



  unsigned int searches;



  unsigned int collisions;


  htab_alloc alloc_f;
  htab_free free_f;


  void *alloc_arg;
  htab_alloc_with_arg alloc_with_arg_f;
  htab_free_with_arg free_with_arg_f;



  unsigned int size_prime_index;
};

typedef struct htab *htab_t;


enum insert_option {NO_INSERT, INSERT};



extern htab_t htab_create_alloc (size_t, htab_hash,
                                    htab_eq, htab_del,
                                    htab_alloc, htab_free);

extern htab_t htab_create_alloc_ex (size_t, htab_hash,
                                      htab_eq, htab_del,
                                      void *, htab_alloc_with_arg,
                                      htab_free_with_arg);

extern htab_t htab_create_typed_alloc (size_t, htab_hash, htab_eq, htab_del,
     htab_alloc, htab_alloc, htab_free);


extern htab_t htab_create (size_t, htab_hash, htab_eq, htab_del);
extern htab_t htab_try_create (size_t, htab_hash, htab_eq, htab_del);

extern void htab_set_functions_ex (htab_t, htab_hash,
                                       htab_eq, htab_del,
                                       void *, htab_alloc_with_arg,
                                       htab_free_with_arg);

extern void htab_delete (htab_t);
extern void htab_empty (htab_t);

extern void * htab_find (htab_t, const void *);
extern void ** htab_find_slot (htab_t, const void *, enum insert_option);
extern void * htab_find_with_hash (htab_t, const void *, hashval_t);
extern void ** htab_find_slot_with_hash (htab_t, const void *,
       hashval_t, enum insert_option);
extern void htab_clear_slot (htab_t, void **);
extern void htab_remove_elt (htab_t, const void *);
extern void htab_remove_elt_with_hash (htab_t, const void *, hashval_t);

extern void htab_traverse (htab_t, htab_trav, void *);
extern void htab_traverse_noresize (htab_t, htab_trav, void *);

extern size_t htab_size (htab_t);
extern size_t htab_elements (htab_t);
extern double htab_collisions (htab_t);


extern htab_hash htab_hash_pointer;


extern htab_eq htab_eq_pointer;


extern hashval_t htab_hash_string (const void *);


extern hashval_t iterative_hash (const void *, size_t, hashval_t);




}
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h" 2


extern "C" {
# 84 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/filenames.h"
extern int filename_cmp (const char *s1, const char *s2);


extern int filename_ncmp (const char *s1, const char *s2,
     size_t n);

extern hashval_t filename_hash (const void *s);

extern int filename_eq (const void *s1, const void *s2);

extern int canonical_filename_eq (const char *a, const char *b);


}
# 672 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 683 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/usr/include/dlfcn.h" 1 3 4
# 24 "/usr/include/dlfcn.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 25 "/usr/include/dlfcn.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 1 3 4
# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4

# 57 "/usr/include/x86_64-linux-gnu/bits/dlfcn.h" 3 4
extern "C" {


extern void _dl_mcount_wrapper_check (void *__selfpc) throw ();

}
# 28 "/usr/include/dlfcn.h" 2 3 4
# 44 "/usr/include/dlfcn.h" 3 4
typedef long int Lmid_t;







extern "C" {



extern void *dlopen (const char *__file, int __mode) throw ();



extern int dlclose (void *__handle) throw () __attribute__ ((__nonnull__ (1)));



extern void *dlsym (void *__restrict __handle,
      const char *__restrict __name) throw () __attribute__ ((__nonnull__ (2)));



extern void *dlmopen (Lmid_t __nsid, const char *__file, int __mode) throw ();



extern void *dlvsym (void *__restrict __handle,
       const char *__restrict __name,
       const char *__restrict __version)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern char *dlerror (void) throw ();





typedef struct
{
  const char *dli_fname;
  void *dli_fbase;
  const char *dli_sname;
  void *dli_saddr;
} Dl_info;



extern int dladdr (const void *__address, Dl_info *__info)
     throw () __attribute__ ((__nonnull__ (2)));


extern int dladdr1 (const void *__address, Dl_info *__info,
      void **__extra_info, int __flags) throw () __attribute__ ((__nonnull__ (2)));




enum
  {

    RTLD_DL_SYMENT = 1,


    RTLD_DL_LINKMAP = 2
  };







extern int dlinfo (void *__restrict __handle,
     int __request, void *__restrict __arg)
     throw () __attribute__ ((__nonnull__ (1, 3)));


enum
  {

    RTLD_DI_LMID = 1,



    RTLD_DI_LINKMAP = 2,

    RTLD_DI_CONFIGADDR = 3,






    RTLD_DI_SERINFO = 4,
    RTLD_DI_SERINFOSIZE = 5,



    RTLD_DI_ORIGIN = 6,

    RTLD_DI_PROFILENAME = 7,
    RTLD_DI_PROFILEOUT = 8,




    RTLD_DI_TLS_MODID = 9,





    RTLD_DI_TLS_DATA = 10,

    RTLD_DI_MAX = 10
  };




typedef struct
{
  char *dls_name;
  unsigned int dls_flags;
} Dl_serpath;



typedef struct
{
  size_t dls_size;
  unsigned int dls_cnt;





  __extension__ union
  {
    Dl_serpath dls_serpath[0];
    Dl_serpath __dls_serpath_pad[1];
  };



} Dl_serinfo;



}
# 684 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2




# 1 "/usr/include/x86_64-linux-gnu/gmp.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
# 1 "/usr/include/c++/10/iosfwd" 1 3 4
# 36 "/usr/include/c++/10/iosfwd" 3 4
       
# 37 "/usr/include/c++/10/iosfwd" 3


# 1 "/usr/include/c++/10/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/10/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/10/bits/stringfwd.h" 3


# 1 "/usr/include/c++/10/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/10/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/10/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/10/bits/memoryfwd.h" 3
  template<typename>
    class allocator;


  template<>
    class allocator<void>;




  template<typename, typename>
    struct uses_allocator;





}
# 41 "/usr/include/c++/10/bits/stringfwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;







  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

}


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;
# 93 "/usr/include/c++/10/bits/stringfwd.h" 3
  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;





}
# 40 "/usr/include/c++/10/iosfwd" 2 3
# 1 "/usr/include/c++/10/bits/postypes.h" 1 3
# 38 "/usr/include/c++/10/bits/postypes.h" 3
       
# 39 "/usr/include/c++/10/bits/postypes.h" 3

# 1 "/usr/include/c++/10/cwchar" 1 3
# 39 "/usr/include/c++/10/cwchar" 3
       
# 40 "/usr/include/c++/10/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 27 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/wchar.h" 2 3 4







# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 36 "/usr/include/wchar.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3 4
typedef unsigned int wint_t;
# 42 "/usr/include/wchar.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 1 3 4





typedef __mbstate_t mbstate_t;
# 43 "/usr/include/wchar.h" 2 3 4
# 79 "/usr/include/wchar.h" 3 4
extern "C" {



struct tm;



extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();



extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, locale_t __loc) throw ();




extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();







extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));




extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
# 181 "/usr/include/wchar.h" 3 4
extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));




extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));




extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 240 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();




extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();





extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();







extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
__attribute__ ((__leaf__)) btowc (int __c) throw ()
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) wctob (wint_t __wc) throw ()
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
__attribute__ ((__leaf__)) mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ()

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }




extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();





extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();





extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();



extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 396 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr) throw ();



extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();



extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
# 428 "/usr/include/wchar.h" 3 4
extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();




__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();





__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();






extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 511 "/usr/include/wchar.h" 3 4
extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       locale_t __loc) throw ();



extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();



extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         locale_t __loc) throw ();
# 551 "/usr/include/wchar.h" 3 4
extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();
# 567 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();





extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream, const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_fwscanf")


                                                          ;
extern int wscanf (const wchar_t *__restrict __format, ...) __asm__ ("" "__isoc99_wscanf")

                                                          ;
extern int swscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, ...) throw () __asm__ ("" "__isoc99_swscanf")


                                                          ;
# 671 "/usr/include/wchar.h" 3 4
extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;






extern int vfwscanf (__FILE *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfwscanf")


                                                          ;
extern int vwscanf (const wchar_t *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vwscanf")

                                                          ;
extern int vswscanf (const wchar_t *__restrict __s, const wchar_t *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vswscanf")


                                                          ;
# 726 "/usr/include/wchar.h" 3 4
extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);
# 781 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 807 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 817 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);






extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();
# 856 "/usr/include/wchar.h" 3 4
}
# 45 "/usr/include/c++/10/cwchar" 2 3
# 62 "/usr/include/c++/10/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/10/cwchar" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 234 "/usr/include/c++/10/cwchar" 3

}
}







namespace __gnu_cxx
{





  using ::wcstold;
# 260 "/usr/include/c++/10/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 280 "/usr/include/c++/10/cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "/usr/include/c++/10/bits/postypes.h" 2 3
# 68 "/usr/include/c++/10/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/10/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/10/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/10/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/10/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      fpos(const fpos&) = default;
      fpos& operator=(const fpos&) = default;
      ~fpos() = default;



      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 245 "/usr/include/c++/10/bits/postypes.h" 3
  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "/usr/include/c++/10/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 35 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 1 "/usr/include/c++/10/cstdio" 1 3 4
# 39 "/usr/include/c++/10/cstdio" 3 4
       
# 40 "/usr/include/c++/10/cstdio" 3
# 96 "/usr/include/c++/10/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;




  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "/usr/include/c++/10/cstdio" 3
namespace __gnu_cxx
{
# 175 "/usr/include/c++/10/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 36 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 55 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 56 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/limits.h" 1 3 4
# 57 "/usr/include/x86_64-linux-gnu/gmp.h" 2 3 4
# 141 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
typedef unsigned long int mp_limb_t;
typedef long int mp_limb_signed_t;


typedef unsigned long int mp_bitcnt_t;




typedef struct
{
  int _mp_alloc;

  int _mp_size;


  mp_limb_t *_mp_d;
} __mpz_struct;




typedef __mpz_struct MP_INT;
typedef __mpz_struct mpz_t[1];

typedef mp_limb_t * mp_ptr;
typedef const mp_limb_t * mp_srcptr;







typedef long int mp_size_t;
typedef long int mp_exp_t;


typedef struct
{
  __mpz_struct _mp_num;
  __mpz_struct _mp_den;
} __mpq_struct;

typedef __mpq_struct MP_RAT;
typedef __mpq_struct mpq_t[1];

typedef struct
{
  int _mp_prec;



  int _mp_size;


  mp_exp_t _mp_exp;
  mp_limb_t *_mp_d;
} __mpf_struct;


typedef __mpf_struct mpf_t[1];


typedef enum
{
  GMP_RAND_ALG_DEFAULT = 0,
  GMP_RAND_ALG_LC = GMP_RAND_ALG_DEFAULT
} gmp_randalg_t;


typedef struct
{
  mpz_t _mp_seed;
  gmp_randalg_t _mp_alg;
  union {
    void *_mp_lc;
  } _mp_algdata;
} __gmp_randstate_struct;
typedef __gmp_randstate_struct gmp_randstate_t[1];



typedef const __mpz_struct *mpz_srcptr;
typedef __mpz_struct *mpz_ptr;
typedef const __mpf_struct *mpf_srcptr;
typedef __mpf_struct *mpf_ptr;
typedef const __mpq_struct *mpq_srcptr;
typedef __mpq_struct *mpq_ptr;
# 472 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern "C" {
using std::FILE;



 void __gmp_set_memory_functions (void *(*) (size_t),
          void *(*) (void *, size_t, size_t),
          void (*) (void *, size_t)) noexcept;


 void __gmp_get_memory_functions (void *(**) (size_t),
          void *(**) (void *, size_t, size_t),
          void (**) (void *, size_t)) noexcept;


 extern const int __gmp_bits_per_limb;


 extern int __gmp_errno;


 extern const char * const __gmp_version;






 void __gmp_randinit (gmp_randstate_t, gmp_randalg_t, ...);


 void __gmp_randinit_default (gmp_randstate_t);


 void __gmp_randinit_lc_2exp (gmp_randstate_t, mpz_srcptr, unsigned long int, mp_bitcnt_t);


 int __gmp_randinit_lc_2exp_size (gmp_randstate_t, mp_bitcnt_t);


 void __gmp_randinit_mt (gmp_randstate_t);


 void __gmp_randinit_set (gmp_randstate_t, const __gmp_randstate_struct *);


 void __gmp_randseed (gmp_randstate_t, mpz_srcptr);


 void __gmp_randseed_ui (gmp_randstate_t, unsigned long int);


 void __gmp_randclear (gmp_randstate_t);


 unsigned long __gmp_urandomb_ui (gmp_randstate_t, unsigned long);


 unsigned long __gmp_urandomm_ui (gmp_randstate_t, unsigned long);





 int __gmp_asprintf (char **, const char *, ...);



 int __gmp_fprintf (FILE *, const char *, ...);
# 554 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 int __gmp_printf (const char *, ...);


 int __gmp_snprintf (char *, size_t, const char *, ...);


 int __gmp_sprintf (char *, const char *, ...);



 int __gmp_vasprintf (char **, const char *, va_list);




 int __gmp_vfprintf (FILE *, const char *, va_list);




 int __gmp_vprintf (const char *, va_list);




 int __gmp_vsnprintf (char *, size_t, const char *, va_list);




 int __gmp_vsprintf (char *, const char *, va_list);







 int __gmp_fscanf (FILE *, const char *, ...);



 int __gmp_scanf (const char *, ...);


 int __gmp_sscanf (const char *, const char *, ...);



 int __gmp_vfscanf (FILE *, const char *, va_list);




 int __gmp_vscanf (const char *, va_list);




 int __gmp_vsscanf (const char *, const char *, va_list);







 void *__gmpz_realloc (mpz_ptr, mp_size_t);



 void __gmpz_abs (mpz_ptr, mpz_srcptr);



 void __gmpz_add (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_add_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_addmul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_addmul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_and (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_array_init (mpz_ptr, mp_size_t, mp_size_t);


 void __gmpz_bin_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_bin_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_cdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_cdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_cdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_cdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_cdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_cdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_clear (mpz_ptr);


 void __gmpz_clears (mpz_ptr, ...);


 void __gmpz_clrbit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_cmp (mpz_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_cmp_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmp_si (mpz_srcptr, signed long int) noexcept __attribute__ ((__pure__));


 int __gmpz_cmp_ui (mpz_srcptr, unsigned long int) noexcept __attribute__ ((__pure__));


 int __gmpz_cmpabs (mpz_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_cmpabs_d (mpz_srcptr, double) __attribute__ ((__pure__));


 int __gmpz_cmpabs_ui (mpz_srcptr, unsigned long int) noexcept __attribute__ ((__pure__));


 void __gmpz_com (mpz_ptr, mpz_srcptr);


 void __gmpz_combit (mpz_ptr, mp_bitcnt_t);


 int __gmpz_congruent_p (mpz_srcptr, mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_congruent_2exp_p (mpz_srcptr, mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 int __gmpz_congruent_ui_p (mpz_srcptr, unsigned long, unsigned long) __attribute__ ((__pure__));


 void __gmpz_divexact (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_divexact_ui (mpz_ptr, mpz_srcptr, unsigned long);


 int __gmpz_divisible_p (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_divisible_ui_p (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_divisible_2exp_p (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 void __gmpz_dump (mpz_srcptr);


 void *__gmpz_export (void *, size_t *, int, size_t, int, size_t, mpz_srcptr);


 void __gmpz_fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_2fac_ui (mpz_ptr, unsigned long int);


 void __gmpz_mfac_uiui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_primorial_ui (mpz_ptr, unsigned long int);


 void __gmpz_fdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_fdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_fdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_fdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_fdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 unsigned long int __gmpz_fdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_fib_ui (mpz_ptr, unsigned long int);


 void __gmpz_fib2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_fits_sint_p (mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_fits_slong_p (mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpz_fits_sshort_p (mpz_srcptr) noexcept __attribute__ ((__pure__));



 int __gmpz_fits_uint_p (mpz_srcptr) noexcept __attribute__ ((__pure__));




 int __gmpz_fits_ulong_p (mpz_srcptr) noexcept __attribute__ ((__pure__));




 int __gmpz_fits_ushort_p (mpz_srcptr) noexcept __attribute__ ((__pure__));



 void __gmpz_gcd (mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_gcd_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_gcdext (mpz_ptr, mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 double __gmpz_get_d (mpz_srcptr) __attribute__ ((__pure__));


 double __gmpz_get_d_2exp (signed long int *, mpz_srcptr);


 long int __gmpz_get_si (mpz_srcptr) noexcept __attribute__ ((__pure__));


 char *__gmpz_get_str (char *, int, mpz_srcptr);



 unsigned long int __gmpz_get_ui (mpz_srcptr) noexcept __attribute__ ((__pure__));




 mp_limb_t __gmpz_getlimbn (mpz_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));



 mp_bitcnt_t __gmpz_hamdist (mpz_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpz_import (mpz_ptr, size_t, int, size_t, int, size_t, const void *);


 void __gmpz_init (mpz_ptr) noexcept;


 void __gmpz_init2 (mpz_ptr, mp_bitcnt_t);


 void __gmpz_inits (mpz_ptr, ...) noexcept;


 void __gmpz_init_set (mpz_ptr, mpz_srcptr);


 void __gmpz_init_set_d (mpz_ptr, double);


 void __gmpz_init_set_si (mpz_ptr, signed long int);


 int __gmpz_init_set_str (mpz_ptr, const char *, int);


 void __gmpz_init_set_ui (mpz_ptr, unsigned long int);



 size_t __gmpz_inp_raw (mpz_ptr, FILE *);




 size_t __gmpz_inp_str (mpz_ptr, FILE *, int);



 int __gmpz_invert (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_ior (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_jacobi (mpz_srcptr, mpz_srcptr) __attribute__ ((__pure__));




 int __gmpz_kronecker_si (mpz_srcptr, long) __attribute__ ((__pure__));


 int __gmpz_kronecker_ui (mpz_srcptr, unsigned long) __attribute__ ((__pure__));


 int __gmpz_si_kronecker (long, mpz_srcptr) __attribute__ ((__pure__));


 int __gmpz_ui_kronecker (unsigned long, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpz_lcm (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_lcm_ui (mpz_ptr, mpz_srcptr, unsigned long);




 void __gmpz_lucnum_ui (mpz_ptr, unsigned long int);


 void __gmpz_lucnum2_ui (mpz_ptr, mpz_ptr, unsigned long int);


 int __gmpz_millerrabin (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_mod (mpz_ptr, mpz_srcptr, mpz_srcptr);




 void __gmpz_mul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_mul_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 void __gmpz_mul_si (mpz_ptr, mpz_srcptr, long int);


 void __gmpz_mul_ui (mpz_ptr, mpz_srcptr, unsigned long int);



 void __gmpz_neg (mpz_ptr, mpz_srcptr);



 void __gmpz_nextprime (mpz_ptr, mpz_srcptr);



 size_t __gmpz_out_raw (FILE *, mpz_srcptr);




 size_t __gmpz_out_str (FILE *, int, mpz_srcptr);



 int __gmpz_perfect_power_p (mpz_srcptr) __attribute__ ((__pure__));



 int __gmpz_perfect_square_p (mpz_srcptr) __attribute__ ((__pure__));




 mp_bitcnt_t __gmpz_popcount (mpz_srcptr) noexcept __attribute__ ((__pure__));



 void __gmpz_pow_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_powm (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_sec (mpz_ptr, mpz_srcptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_powm_ui (mpz_ptr, mpz_srcptr, unsigned long int, mpz_srcptr);


 int __gmpz_probab_prime_p (mpz_srcptr, int) __attribute__ ((__pure__));


 void __gmpz_random (mpz_ptr, mp_size_t);


 void __gmpz_random2 (mpz_ptr, mp_size_t);


 void __gmpz_realloc2 (mpz_ptr, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_remove (mpz_ptr, mpz_srcptr, mpz_srcptr);


 int __gmpz_root (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rootrem (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_rrandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 mp_bitcnt_t __gmpz_scan0 (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 mp_bitcnt_t __gmpz_scan1 (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 void __gmpz_set (mpz_ptr, mpz_srcptr);


 void __gmpz_set_d (mpz_ptr, double);


 void __gmpz_set_f (mpz_ptr, mpf_srcptr);



 void __gmpz_set_q (mpz_ptr, mpq_srcptr);



 void __gmpz_set_si (mpz_ptr, signed long int);


 int __gmpz_set_str (mpz_ptr, const char *, int);


 void __gmpz_set_ui (mpz_ptr, unsigned long int);


 void __gmpz_setbit (mpz_ptr, mp_bitcnt_t);



 size_t __gmpz_size (mpz_srcptr) noexcept __attribute__ ((__pure__));



 size_t __gmpz_sizeinbase (mpz_srcptr, int) noexcept __attribute__ ((__pure__));


 void __gmpz_sqrt (mpz_ptr, mpz_srcptr);


 void __gmpz_sqrtrem (mpz_ptr, mpz_ptr, mpz_srcptr);


 void __gmpz_sub (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_sub_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_ui_sub (mpz_ptr, unsigned long int, mpz_srcptr);


 void __gmpz_submul (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_submul_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_swap (mpz_ptr, mpz_ptr) noexcept;


 unsigned long int __gmpz_tdiv_ui (mpz_srcptr, unsigned long int) __attribute__ ((__pure__));


 void __gmpz_tdiv_q (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_q_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_q_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_qr (mpz_ptr, mpz_ptr, mpz_srcptr, mpz_srcptr);


 unsigned long int __gmpz_tdiv_qr_ui (mpz_ptr, mpz_ptr, mpz_srcptr, unsigned long int);


 void __gmpz_tdiv_r (mpz_ptr, mpz_srcptr, mpz_srcptr);


 void __gmpz_tdiv_r_2exp (mpz_ptr, mpz_srcptr, mp_bitcnt_t);


 unsigned long int __gmpz_tdiv_r_ui (mpz_ptr, mpz_srcptr, unsigned long int);


 int __gmpz_tstbit (mpz_srcptr, mp_bitcnt_t) noexcept __attribute__ ((__pure__));


 void __gmpz_ui_pow_ui (mpz_ptr, unsigned long int, unsigned long int);


 void __gmpz_urandomb (mpz_ptr, gmp_randstate_t, mp_bitcnt_t);


 void __gmpz_urandomm (mpz_ptr, gmp_randstate_t, mpz_srcptr);



 void __gmpz_xor (mpz_ptr, mpz_srcptr, mpz_srcptr);


 mp_srcptr __gmpz_limbs_read (mpz_srcptr);


 mp_ptr __gmpz_limbs_write (mpz_ptr, mp_size_t);


 mp_ptr __gmpz_limbs_modify (mpz_ptr, mp_size_t);


 void __gmpz_limbs_finish (mpz_ptr, mp_size_t);


 mpz_srcptr __gmpz_roinit_n (mpz_ptr, mp_srcptr, mp_size_t);







 void __gmpq_abs (mpq_ptr, mpq_srcptr);



 void __gmpq_add (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_canonicalize (mpq_ptr);


 void __gmpq_clear (mpq_ptr);


 void __gmpq_clears (mpq_ptr, ...);


 int __gmpq_cmp (mpq_srcptr, mpq_srcptr) __attribute__ ((__pure__));


 int __gmpq_cmp_si (mpq_srcptr, long, unsigned long) __attribute__ ((__pure__));


 int __gmpq_cmp_ui (mpq_srcptr, unsigned long int, unsigned long int) __attribute__ ((__pure__));


 int __gmpq_cmp_z (mpq_srcptr, mpz_srcptr) __attribute__ ((__pure__));


 void __gmpq_div (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_div_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);


 int __gmpq_equal (mpq_srcptr, mpq_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpq_get_num (mpz_ptr, mpq_srcptr);


 void __gmpq_get_den (mpz_ptr, mpq_srcptr);


 double __gmpq_get_d (mpq_srcptr) __attribute__ ((__pure__));


 char *__gmpq_get_str (char *, int, mpq_srcptr);


 void __gmpq_init (mpq_ptr);


 void __gmpq_inits (mpq_ptr, ...);



 size_t __gmpq_inp_str (mpq_ptr, FILE *, int);



 void __gmpq_inv (mpq_ptr, mpq_srcptr);


 void __gmpq_mul (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_mul_2exp (mpq_ptr, mpq_srcptr, mp_bitcnt_t);



 void __gmpq_neg (mpq_ptr, mpq_srcptr);




 size_t __gmpq_out_str (FILE *, int, mpq_srcptr);



 void __gmpq_set (mpq_ptr, mpq_srcptr);


 void __gmpq_set_d (mpq_ptr, double);


 void __gmpq_set_den (mpq_ptr, mpz_srcptr);


 void __gmpq_set_f (mpq_ptr, mpf_srcptr);


 void __gmpq_set_num (mpq_ptr, mpz_srcptr);


 void __gmpq_set_si (mpq_ptr, signed long int, unsigned long int);


 int __gmpq_set_str (mpq_ptr, const char *, int);


 void __gmpq_set_ui (mpq_ptr, unsigned long int, unsigned long int);


 void __gmpq_set_z (mpq_ptr, mpz_srcptr);


 void __gmpq_sub (mpq_ptr, mpq_srcptr, mpq_srcptr);


 void __gmpq_swap (mpq_ptr, mpq_ptr) noexcept;





 void __gmpf_abs (mpf_ptr, mpf_srcptr);


 void __gmpf_add (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_add_ui (mpf_ptr, mpf_srcptr, unsigned long int);

 void __gmpf_ceil (mpf_ptr, mpf_srcptr);


 void __gmpf_clear (mpf_ptr);


 void __gmpf_clears (mpf_ptr, ...);


 int __gmpf_cmp (mpf_srcptr, mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_cmp_z (mpf_srcptr, mpz_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_cmp_d (mpf_srcptr, double) __attribute__ ((__pure__));


 int __gmpf_cmp_si (mpf_srcptr, signed long int) noexcept __attribute__ ((__pure__));


 int __gmpf_cmp_ui (mpf_srcptr, unsigned long int) noexcept __attribute__ ((__pure__));


 void __gmpf_div (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_div_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_div_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_dump (mpf_srcptr);


 int __gmpf_eq (mpf_srcptr, mpf_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 int __gmpf_fits_sint_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_slong_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_sshort_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_uint_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_ulong_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 int __gmpf_fits_ushort_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_floor (mpf_ptr, mpf_srcptr);


 double __gmpf_get_d (mpf_srcptr) __attribute__ ((__pure__));


 double __gmpf_get_d_2exp (signed long int *, mpf_srcptr);


 mp_bitcnt_t __gmpf_get_default_prec (void) noexcept __attribute__ ((__pure__));


 mp_bitcnt_t __gmpf_get_prec (mpf_srcptr) noexcept __attribute__ ((__pure__));


 long __gmpf_get_si (mpf_srcptr) noexcept __attribute__ ((__pure__));


 char *__gmpf_get_str (char *, mp_exp_t *, int, size_t, mpf_srcptr);


 unsigned long __gmpf_get_ui (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_init (mpf_ptr);


 void __gmpf_init2 (mpf_ptr, mp_bitcnt_t);


 void __gmpf_inits (mpf_ptr, ...);


 void __gmpf_init_set (mpf_ptr, mpf_srcptr);


 void __gmpf_init_set_d (mpf_ptr, double);


 void __gmpf_init_set_si (mpf_ptr, signed long int);


 int __gmpf_init_set_str (mpf_ptr, const char *, int);


 void __gmpf_init_set_ui (mpf_ptr, unsigned long int);



 size_t __gmpf_inp_str (mpf_ptr, FILE *, int);



 int __gmpf_integer_p (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_mul (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_mul_2exp (mpf_ptr, mpf_srcptr, mp_bitcnt_t);


 void __gmpf_mul_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_neg (mpf_ptr, mpf_srcptr);



 size_t __gmpf_out_str (FILE *, int, size_t, mpf_srcptr);



 void __gmpf_pow_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_random2 (mpf_ptr, mp_size_t, mp_exp_t);


 void __gmpf_reldiff (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_set (mpf_ptr, mpf_srcptr);


 void __gmpf_set_d (mpf_ptr, double);


 void __gmpf_set_default_prec (mp_bitcnt_t) noexcept;


 void __gmpf_set_prec (mpf_ptr, mp_bitcnt_t);


 void __gmpf_set_prec_raw (mpf_ptr, mp_bitcnt_t) noexcept;


 void __gmpf_set_q (mpf_ptr, mpq_srcptr);


 void __gmpf_set_si (mpf_ptr, signed long int);


 int __gmpf_set_str (mpf_ptr, const char *, int);


 void __gmpf_set_ui (mpf_ptr, unsigned long int);


 void __gmpf_set_z (mpf_ptr, mpz_srcptr);


 size_t __gmpf_size (mpf_srcptr) noexcept __attribute__ ((__pure__));


 void __gmpf_sqrt (mpf_ptr, mpf_srcptr);


 void __gmpf_sqrt_ui (mpf_ptr, unsigned long int);


 void __gmpf_sub (mpf_ptr, mpf_srcptr, mpf_srcptr);


 void __gmpf_sub_ui (mpf_ptr, mpf_srcptr, unsigned long int);


 void __gmpf_swap (mpf_ptr, mpf_ptr) noexcept;


 void __gmpf_trunc (mpf_ptr, mpf_srcptr);


 void __gmpf_ui_div (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_ui_sub (mpf_ptr, unsigned long int, mpf_srcptr);


 void __gmpf_urandomb (mpf_t, gmp_randstate_t, mp_bitcnt_t);
# 1465 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 mp_limb_t __gmpn_add (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) noexcept;



 mp_limb_t __gmpn_add_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_addmul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);



 int __gmpn_cmp (mp_srcptr, mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));




 int __gmpn_zero_p (mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));



 void __gmpn_divexact_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divexact_by3c (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);





 mp_limb_t __gmpn_divrem (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_divrem_1 (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_divrem_2 (mp_ptr, mp_size_t, mp_ptr, mp_size_t, mp_srcptr);


 mp_limb_t __gmpn_div_qr_1 (mp_ptr, mp_limb_t *, mp_srcptr, mp_size_t, mp_limb_t);


 mp_limb_t __gmpn_div_qr_2 (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_srcptr);


 mp_size_t __gmpn_gcd (mp_ptr, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 mp_limb_t __gmpn_gcd_11 (mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_gcd_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_gcdext_1 (mp_limb_signed_t *, mp_limb_signed_t *, mp_limb_t, mp_limb_t);


 mp_size_t __gmpn_gcdext (mp_ptr, mp_ptr, mp_size_t *, mp_ptr, mp_size_t, mp_ptr, mp_size_t);


 size_t __gmpn_get_str (unsigned char *, int, mp_ptr, mp_size_t);


 mp_bitcnt_t __gmpn_hamdist (mp_srcptr, mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));


 mp_limb_t __gmpn_lshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_limb_t __gmpn_mod_1 (mp_srcptr, mp_size_t, mp_limb_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_mul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_mul_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_sqr (mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_neg (mp_ptr, mp_srcptr, mp_size_t);



 void __gmpn_com (mp_ptr, mp_srcptr, mp_size_t);


 int __gmpn_perfect_square_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_perfect_power_p (mp_srcptr, mp_size_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_popcount (mp_srcptr, mp_size_t) noexcept __attribute__ ((__pure__));


 mp_size_t __gmpn_pow_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);



 mp_limb_t __gmpn_preinv_mod_1 (mp_srcptr, mp_size_t, mp_limb_t, mp_limb_t) __attribute__ ((__pure__));


 void __gmpn_random (mp_ptr, mp_size_t);


 void __gmpn_random2 (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_rshift (mp_ptr, mp_srcptr, mp_size_t, unsigned int);


 mp_bitcnt_t __gmpn_scan0 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_bitcnt_t __gmpn_scan1 (mp_srcptr, mp_bitcnt_t) __attribute__ ((__pure__));


 mp_size_t __gmpn_set_str (mp_ptr, const unsigned char *, size_t, int);


 size_t __gmpn_sizeinbase (mp_srcptr, mp_size_t, int);


 mp_size_t __gmpn_sqrtrem (mp_ptr, mp_ptr, mp_srcptr, mp_size_t);



 mp_limb_t __gmpn_sub (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);




 mp_limb_t __gmpn_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t) noexcept;



 mp_limb_t __gmpn_sub_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_submul_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t);


 void __gmpn_tdiv_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t);


 void __gmpn_and_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_andn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nand_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_ior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_iorn_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_nior_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 void __gmpn_xnor_n (mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 void __gmpn_copyi (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_copyd (mp_ptr, mp_srcptr, mp_size_t);

 void __gmpn_zero (mp_ptr, mp_size_t);


 mp_limb_t __gmpn_cnd_add_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);

 mp_limb_t __gmpn_cnd_sub_n (mp_limb_t, mp_ptr, mp_srcptr, mp_srcptr, mp_size_t);


 mp_limb_t __gmpn_sec_add_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_add_1_itch (mp_size_t) __attribute__ ((__pure__));


 mp_limb_t __gmpn_sec_sub_1 (mp_ptr, mp_srcptr, mp_size_t, mp_limb_t, mp_ptr);

 mp_size_t __gmpn_sec_sub_1_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_cnd_swap (mp_limb_t, volatile mp_limb_t *, volatile mp_limb_t *, mp_size_t);


 void __gmpn_sec_mul (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_mul_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_sqr (mp_ptr, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_sqr_itch (mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_powm (mp_ptr, mp_srcptr, mp_size_t, mp_srcptr, mp_bitcnt_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_powm_itch (mp_size_t, mp_bitcnt_t, mp_size_t) __attribute__ ((__pure__));


 void __gmpn_sec_tabselect (volatile mp_limb_t *, volatile const mp_limb_t *, mp_size_t, mp_size_t, mp_size_t);


 mp_limb_t __gmpn_sec_div_qr (mp_ptr, mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_qr_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));

 void __gmpn_sec_div_r (mp_ptr, mp_size_t, mp_srcptr, mp_size_t, mp_ptr);

 mp_size_t __gmpn_sec_div_r_itch (mp_size_t, mp_size_t) __attribute__ ((__pure__));


 int __gmpn_sec_invert (mp_ptr, mp_ptr, mp_srcptr, mp_size_t, mp_bitcnt_t, mp_ptr);

 mp_size_t __gmpn_sec_invert_itch (mp_size_t) __attribute__ ((__pure__));
# 1714 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_abs (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = ((__gmp_w->_mp_size) >= 0 ? (__gmp_w->_mp_size) : -(__gmp_w->_mp_size));
}
# 1738 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_uint_p (mpz_srcptr __gmp_z) noexcept
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffff * 2U + 1U)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ulong_p (mpz_srcptr __gmp_z) noexcept
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fffffffffffffffL * 2UL + 1UL)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_fits_ushort_p (mpz_srcptr __gmp_z) noexcept
{
  mp_size_t __gmp_n = __gmp_z->_mp_size; mp_ptr __gmp_p = __gmp_z->_mp_d; return (__gmp_n == 0 || (__gmp_n == 1 && __gmp_p[0] <= (0x7fff * 2 + 1)));;
}




extern __inline__ __attribute__ ((__gnu_inline__))

unsigned long
__gmpz_get_ui (mpz_srcptr __gmp_z) noexcept
{
  mp_ptr __gmp_p = __gmp_z->_mp_d;
  mp_size_t __gmp_n = __gmp_z->_mp_size;
  mp_limb_t __gmp_l = __gmp_p[0];






  return (__gmp_n != 0 ? __gmp_l : 0);
# 1794 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpz_getlimbn (mpz_srcptr __gmp_z, mp_size_t __gmp_n) noexcept
{
  mp_limb_t __gmp_result = 0;
  if (__builtin_expect ((__gmp_n >= 0 && __gmp_n < ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size))) != 0, 1))
    __gmp_result = __gmp_z->_mp_d[__gmp_n];
  return __gmp_result;
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpz_neg (mpz_ptr __gmp_w, mpz_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpz_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_size = - __gmp_w->_mp_size;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpz_perfect_square_p (mpz_srcptr __gmp_a)
{
  mp_size_t __gmp_asize;
  int __gmp_result;

  __gmp_asize = __gmp_a->_mp_size;
  __gmp_result = (__gmp_asize >= 0);
  if (__builtin_expect ((__gmp_asize > 0) != 0, 1))
    __gmp_result = __gmpn_perfect_square_p (__gmp_a->_mp_d, __gmp_asize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_bitcnt_t
__gmpz_popcount (mpz_srcptr __gmp_u) noexcept
{
  mp_size_t __gmp_usize;
  mp_bitcnt_t __gmp_result;

  __gmp_usize = __gmp_u->_mp_size;
  __gmp_result = (__gmp_usize < 0 ? ~ (static_cast<mp_bitcnt_t> (0)) : (static_cast<mp_bitcnt_t> (0)));
  if (__builtin_expect ((__gmp_usize > 0) != 0, 1))
    __gmp_result = __gmpn_popcount (__gmp_u->_mp_d, __gmp_usize);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

void
__gmpz_set_q (mpz_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  __gmpz_tdiv_q (__gmp_w, (&((__gmp_u)->_mp_num)), (&((__gmp_u)->_mp_den)));
}




extern __inline__ __attribute__ ((__gnu_inline__))

size_t
__gmpz_size (mpz_srcptr __gmp_z) noexcept
{
  return ((__gmp_z->_mp_size) >= 0 ? (__gmp_z->_mp_size) : -(__gmp_z->_mp_size));
}






extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_abs (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = ((__gmp_w->_mp_num._mp_size) >= 0 ? (__gmp_w->_mp_num._mp_size) : -(__gmp_w->_mp_num._mp_size));
}



extern __inline__ __attribute__ ((__gnu_inline__)) void
__gmpq_neg (mpq_ptr __gmp_w, mpq_srcptr __gmp_u)
{
  if (__gmp_w != __gmp_u)
    __gmpq_set (__gmp_w, __gmp_u);
  __gmp_w->_mp_num._mp_size = - __gmp_w->_mp_num._mp_size;
}
# 2136 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_add_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x + 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)) == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_add_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) noexcept
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x + (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_r) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x + 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_r) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_cmp (mp_srcptr __gmp_xp, mp_srcptr __gmp_yp, mp_size_t __gmp_size) noexcept
{
  int __gmp_result;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_y; (__gmp_result) = 0; __gmp_i = (__gmp_size); while (--__gmp_i >= 0) { __gmp_x = (__gmp_xp)[__gmp_i]; __gmp_y = (__gmp_yp)[__gmp_i]; if (__gmp_x != __gmp_y) { (__gmp_result) = (__gmp_x > __gmp_y ? 1 : -1); break; } } } while (0);
  return __gmp_result;
}




extern __inline__ __attribute__ ((__gnu_inline__))

int
__gmpn_zero_p (mp_srcptr __gmp_p, mp_size_t __gmp_n) noexcept
{

    do {
      if (__gmp_p[--__gmp_n] != 0)
 return 0;
    } while (__gmp_n != 0);
  return 1;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub (mp_ptr __gmp_wp, mp_srcptr __gmp_xp, mp_size_t __gmp_xsize, mp_srcptr __gmp_yp, mp_size_t __gmp_ysize)
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x; __gmp_i = (__gmp_ysize); if (__gmp_i != 0) { if (__gmpn_sub_n (__gmp_wp, __gmp_xp, __gmp_yp, __gmp_i)) { do { if (__gmp_i >= (__gmp_xsize)) { (__gmp_c) = 1; goto __gmp_done; } __gmp_x = (__gmp_xp)[__gmp_i]; } while ((((__gmp_wp)[__gmp_i++] = (__gmp_x - 1) & ((~ (static_cast<mp_limb_t> (0))) >> 0)), __gmp_x == 0)); } } if ((__gmp_wp) != (__gmp_xp)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_xsize); __gmp_j++) (__gmp_wp)[__gmp_j] = (__gmp_xp)[__gmp_j]; } while (0); (__gmp_c) = 0; __gmp_done: ; } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_sub_1 (mp_ptr __gmp_dst, mp_srcptr __gmp_src, mp_size_t __gmp_size, mp_limb_t __gmp_n) noexcept
{
  mp_limb_t __gmp_c;
  do { mp_size_t __gmp_i; mp_limb_t __gmp_x, __gmp_r; __gmp_x = (__gmp_src)[0]; __gmp_r = __gmp_x - (__gmp_n); (__gmp_dst)[0] = __gmp_r; if (((__gmp_x) < ((__gmp_n)))) { (__gmp_c) = 1; for (__gmp_i = 1; __gmp_i < (__gmp_size);) { __gmp_x = (__gmp_src)[__gmp_i]; __gmp_r = __gmp_x - 1; (__gmp_dst)[__gmp_i] = __gmp_r; ++__gmp_i; if (!((__gmp_x) < (1))) { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (__gmp_i); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; break; } } } else { if ((__gmp_src) != (__gmp_dst)) do { mp_size_t __gmp_j; ; for (__gmp_j = (1); __gmp_j < (__gmp_size); __gmp_j++) (__gmp_dst)[__gmp_j] = (__gmp_src)[__gmp_j]; } while (0); (__gmp_c) = 0; } } while (0);
  return __gmp_c;
}




extern __inline__ __attribute__ ((__gnu_inline__))

mp_limb_t
__gmpn_neg (mp_ptr __gmp_rp, mp_srcptr __gmp_up, mp_size_t __gmp_n)
{
  while (*__gmp_up == 0)
    {
      *__gmp_rp = 0;
      if (!--__gmp_n)
 return 0;
      ++__gmp_up; ++__gmp_rp;
    }

  *__gmp_rp = (- *__gmp_up) & ((~ (static_cast<mp_limb_t> (0))) >> 0);

  if (--__gmp_n)
    __gmpn_com (++__gmp_rp, ++__gmp_up, __gmp_n);

  return 1;
}



}
# 2285 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
 std::ostream& operator<< (std::ostream &, mpz_srcptr);
 std::ostream& operator<< (std::ostream &, mpq_srcptr);
 std::ostream& operator<< (std::ostream &, mpf_srcptr);
 std::istream& operator>> (std::istream &, mpz_ptr);
 std::istream& operator>> (std::istream &, mpq_ptr);
 std::istream& operator>> (std::istream &, mpf_ptr);
# 2316 "/usr/include/x86_64-linux-gnu/gmp.h" 3 4
enum
{
  GMP_ERROR_NONE = 0,
  GMP_ERROR_UNSUPPORTED_ARGUMENT = 1,
  GMP_ERROR_DIVISION_BY_ZERO = 2,
  GMP_ERROR_SQRT_OF_NEGATIVE = 4,
  GMP_ERROR_INVALID_ARGUMENT = 8
};
# 689 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2



# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 1
# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"

# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern "C" {





# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h" 2
# 55 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void unlock_stream (FILE *);





extern void unlock_std_streams (void);





extern FILE *fopen_unlocked (const char *, const char *);
extern FILE *fdopen_unlocked (int, const char *);
extern FILE *freopen_unlocked (const char *, const char *, FILE *);




extern char **buildargv (const char *) __attribute__ ((__malloc__));



extern void freeargv (char **);




extern char **dupargv (char * const *) __attribute__ ((__malloc__));



extern void expandargv (int *, char ***);



extern int writeargv (char * const *, FILE *);



extern int countargv (char * const *);
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));




extern const char *dos_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));





extern const char *unix_lbasename (const char *) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1)));



extern char *lrealpath (const char *);



extern int is_valid_fd (int fd);





extern char *concat (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));
# 157 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *reconcat (char *, const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));





extern unsigned long concat_length (const char *, ...) __attribute__ ((__sentinel__));






extern char *concat_copy (char *, const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__sentinel__));






extern char *concat_copy2 (const char *, ...) __attribute__ ((__returns_nonnull__)) __attribute__ ((__sentinel__));



extern char *libiberty_concat_ptr;
# 193 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int fdmatch (int fd1, int fd2);
# 205 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char * getpwd (void);
# 218 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern long get_run_time (void);




extern char *make_relative_prefix (const char *, const char *,
                                   const char *) __attribute__ ((__malloc__));





extern char *make_relative_prefix_ignore_links (const char *, const char *,
      const char *) __attribute__ ((__malloc__));




extern const char *choose_tmpdir (void) __attribute__ ((__returns_nonnull__));



extern char *choose_temp_base (void) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__));



extern char *make_temp_file (const char *) __attribute__ ((__malloc__));




extern char *make_temp_file_with_prefix (const char *, const char *) __attribute__ ((__malloc__));



extern int unlink_if_ordinary (const char *);



extern const char *spaces (int count);




extern int errno_max (void);




extern const char *strerrno (int);



extern int strtoerrno (const char *);



extern char *xstrerror (int) __attribute__ ((__returns_nonnull__));




extern int signo_max (void);
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *strsigno (int);



extern int strtosigno (const char *);



extern int xatexit (void (*fn) (void));



extern void xexit (int status) __attribute__ ((__noreturn__));



extern void xmalloc_set_program_name (const char *);


extern void xmalloc_failed (size_t) __attribute__ ((__noreturn__));





extern void *xmalloc (size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1))) __attribute__ ((warn_unused_result));





extern void *xrealloc (void *, size_t) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (2))) __attribute__ ((warn_unused_result));




extern void *xcalloc (size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((alloc_size (1, 2))) __attribute__ ((warn_unused_result));



extern char *xstrdup (const char *) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern char *xstrndup (const char *, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));



extern void *xmemdup (const void *, size_t, size_t) __attribute__ ((__malloc__)) __attribute__ ((__returns_nonnull__)) __attribute__ ((warn_unused_result));


extern double physmem_total (void);
extern double physmem_available (void);


extern unsigned int xcrc32 (const unsigned char *, int, unsigned int);
# 391 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const unsigned char _hex_value[256];
extern void hex_init (void);
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern struct pex_obj *pex_init (int flags, const char *pname,
     const char *tempbase) __attribute__ ((__returns_nonnull__));
# 528 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run (struct pex_obj *obj, int flags,
       const char *executable, char * const *argv,
       const char *outname, const char *errname,
       int *err);
# 543 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_run_in_environment (struct pex_obj *obj, int flags,
                      const char *executable,
                                           char * const *argv,
                                           char * const *env,
                              const char *outname,
        const char *errname, int *err);





extern FILE *pex_input_file (struct pex_obj *obj, int flags,
                             const char *in_name);






extern FILE *pex_input_pipe (struct pex_obj *obj, int binary);







extern FILE *pex_read_output (struct pex_obj *, int binary);







extern FILE *pex_read_err (struct pex_obj *, int binary);





extern int pex_get_status (struct pex_obj *, int count, int *vector);






struct pex_time
{
  unsigned long user_seconds;
  unsigned long user_microseconds;
  unsigned long system_seconds;
  unsigned long system_microseconds;
};

extern int pex_get_times (struct pex_obj *, int count,
     struct pex_time *vector);




extern void pex_free (struct pex_obj *);
# 618 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern const char *pex_one (int flags, const char *executable,
       char * const *argv, const char *pname,
       const char *outname, const char *errname,
       int *status, int *err);
# 637 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern int pexecute (const char *, char * const *, const char *,
                     const char *, char **, char **, int);



extern int pwait (int, int *, int);



extern void *bsearch_r (const void *, const void *,
   size_t, size_t,
   int (*)(const void *, const void *, void *),
   void *);
# 661 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xasprintf (const char *, ...) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern char *xvasprintf (const char *, va_list) __attribute__ ((__malloc__)) __attribute__ ((__format__ (__printf__, 1, 0))) __attribute__ ((__nonnull__ (1)));
# 722 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void setproctitle (const char *name, ...);


extern void stack_limit_increase (unsigned long);
# 735 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
extern void *C_alloca (size_t) __attribute__ ((__malloc__));
# 762 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/libiberty.h"
}
# 693 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 731 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/unique-ptr.h" 1
# 78 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/unique-ptr.h"
# 1 "/usr/include/c++/10/memory" 1 3
# 47 "/usr/include/c++/10/memory" 3
       
# 48 "/usr/include/c++/10/memory" 3
# 63 "/usr/include/c++/10/memory" 3
# 1 "/usr/include/c++/10/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/10/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/10/bits/functexcept.h" 1 3
# 42 "/usr/include/c++/10/bits/functexcept.h" 3

# 42 "/usr/include/c++/10/bits/functexcept.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_ios_failure(const char*, int) __attribute__((__noreturn__));


  void
  __throw_system_error(int) __attribute__((__noreturn__));


  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 184 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 270 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 287 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 423 "/usr/include/c++/10/bits/cpp_type_traits.h" 3
  template<typename> struct iterator_traits;


  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable
    {
      enum { __value = __is_trivially_copyable(_Tp) };
    };




  template<typename _Tp>
    struct __is_nonvolatile_trivially_copyable<volatile _Tp>
    {
      enum { __value = 0 };
    };


  template<typename _OutputIter, typename _InputIter>
    struct __memcpyable
    {
      enum { __value = 0 };
    };

  template<typename _Tp>
    struct __memcpyable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcpyable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };






  template<typename _Iter1, typename _Iter2>
    struct __memcmpable
    {
      enum { __value = 0 };
    };


  template<typename _Tp>
    struct __memcmpable<_Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<const _Tp*, _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };

  template<typename _Tp>
    struct __memcmpable<_Tp*, const _Tp*>
    : __is_nonvolatile_trivially_copyable<_Tp>
    { };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
   
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 62 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 63 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/10/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? -(((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0) - 1 : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/10/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/10/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
# 74 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 93 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 125 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 149 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits;




  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };



  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };


  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 209 "/usr/include/c++/10/bits/stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };






  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }




  template<typename _Iter>
    using __iterator_category_t
      = typename iterator_traits<_Iter>::iterator_category;

  template<typename _InIter>
    using _RequireInputIter =
      __enable_if_t<is_convertible<__iterator_category_t<_InIter>,
       input_iterator_tag>::value>;

  template<typename _It,
    typename _Cat = __iterator_category_t<_It>>
    struct __is_random_access_iter
      : is_base_of<random_access_iterator_tag, _Cat>
    {
      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;
      enum { __value = _Base::value };
    };








}
# 66 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3

# 1 "/usr/include/c++/10/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/10/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/10/bits/concept_check.h" 3
# 65 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 2 3
# 1 "/usr/include/c++/10/debug/assertions.h" 1 3
# 66 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline constexpr
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline constexpr
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline constexpr void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline constexpr void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline constexpr void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "/usr/include/c++/10/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {

     
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "/usr/include/c++/10/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/10/bits/stl_iterator.h" 1 3
# 66 "/usr/include/c++/10/bits/stl_iterator.h" 3
# 1 "/usr/include/c++/10/bits/ptr_traits.h" 1 3
# 42 "/usr/include/c++/10/bits/ptr_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 210 "/usr/include/c++/10/bits/ptr_traits.h" 3

}
# 67 "/usr/include/c++/10/bits/stl_iterator.h" 2 3
# 85 "/usr/include/c++/10/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 124 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;
# 160 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




     
      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }


      reverse_iterator& operator=(const reverse_iterator&) = default;






      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 206 "/usr/include/c++/10/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const




      {


 _Iterator __tmp = current;
 --__tmp;
 return _S_to_pointer(__tmp);
      }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }

    private:
      template<typename _Tp>
 static _Tp*
 _S_to_pointer(_Tp* __p)
        { return __p; }

      template<typename _Tp>
 static pointer
 _S_to_pointer(_Tp __t)
        { return __t.operator->(); }
    };
# 358 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 498 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }







  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }
# 539 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
   
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
   
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 570 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;







      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 610 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

     
      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



     
      back_insert_iterator&
      operator*()
      { return *this; }


     
      back_insert_iterator&
      operator++()
      { return *this; }


     
      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 657 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
   
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 673 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;







      explicit
      front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 713 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

     
      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



     
      front_insert_iterator&
      operator*()
      { return *this; }


     
      front_insert_iterator&
      operator++()
      { return *this; }


     
      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 760 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
   
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 780 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {







      typedef typename _Container::iterator _Iter;

    protected:
      _Container* container;
      _Iter iter;


    public:

      typedef _Container container_type;
# 812 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      insert_iterator(_Container& __x, _Iter __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 848 "/usr/include/c++/10/bits/stl_iterator.h" 3
     
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

     
      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



     
      insert_iterator&
      operator*()
      { return *this; }


     
      insert_iterator&
      operator++()
      { return *this; }


     
      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 904 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }





}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 929 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef std::iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;





      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
       
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


     
      reference
      operator*() const noexcept
      { return *_M_current; }

     
      pointer
      operator->() const noexcept
      { return _M_current; }

     
      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

     
      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


     
      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

     
      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


     
      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

     
      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

     
      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

     
      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

     
      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

     
      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 1061 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
   
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
   
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }






  template<typename _IteratorL, typename _IteratorR, typename _Container>


   
    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
   
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
   
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
# 1260 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
      _Iterator _M_current;

      using __traits_type = iterator_traits<_Iterator>;



      using __base_ref = typename __traits_type::reference;


    public:
      using iterator_type = _Iterator;
# 1284 "/usr/include/c++/10/bits/stl_iterator.h" 3
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;


     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(std::move(__i)) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }


      iterator_type
      base() const
      { return _M_current; }
# 1326 "/usr/include/c++/10/bits/stl_iterator.h" 3
      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }







      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
# 1423 "/usr/include/c++/10/bits/stl_iterator.h" 3
    };

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return __x.base() == __y.base(); }
# 1442 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)



    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)



    { return !(__x < __y); }
# 1493 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(std::move(__i)); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }
# 2154 "/usr/include/c++/10/bits/stl_iterator.h" 3
  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 2201 "/usr/include/c++/10/bits/stl_iterator.h" 3

}
# 68 "/usr/include/c++/10/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/10/debug/debug.h" 1 3
# 48 "/usr/include/c++/10/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;

  template<typename _Ite, typename _Seq, typename _Cat>
    struct _Safe_iterator;
}
# 70 "/usr/include/c++/10/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/10/bits/predefined_ops.h" 1 3
# 33 "/usr/include/c++/10/bits/predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      constexpr
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

  constexpr
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




   
    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

 
  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

 
  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




   
    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
     
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

 
  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

 
  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

 
  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
     
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

 
  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

 
  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit constexpr
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
        constexpr
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
    constexpr
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

     
      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>

 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

     
      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

     
      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


     
      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>

 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
   
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

     
      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
   
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

     
      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
   
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

     
      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
   
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

     
      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>

 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
   
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

     
      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>

 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
   
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "/usr/include/c++/10/bits/stl_algobase.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{






  template<typename _Tp, typename _Up>
    constexpr
    inline int
    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
    {

      static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
# 105 "/usr/include/c++/10/bits/stl_algobase.h" 3
 return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
    }
# 149 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 182 "/usr/include/c++/10/bits/stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 198 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 227 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 275 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 297 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    constexpr
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
   
    inline _Iterator
    __niter_base(_Iterator __it)
    noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }




  template<typename _From, typename _To>
   
    inline _From
    __niter_wrap(_From __from, _To __res)
    { return __from + (__res - std::__niter_base(__from)); }


  template<typename _Iterator>
   
    inline _Iterator
    __niter_wrap(const _Iterator&, _Iterator __res)
    { return __res; }







  template<bool _IsMove, bool _IsSimple, typename _Category>
    struct __copy_move
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>

 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>

 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::iterator_category _Category;





      return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _Tp, typename _Ref, typename _Ptr>
    struct _Deque_iterator;



  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     std::_Deque_iterator<_Tp, _Ref, _Ptr>,
     _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_a1(std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_ITp, _IRef, _IPtr>,
     std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_a1(_II, _II, std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
    _OI
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
    _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_a(_II, _II,
    const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
    const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 557 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 590 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
   
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a<true>(std::__miter_base(__first),
          std::__miter_base(__last), __result);
    }






  template<bool _IsMove, bool _IsSimple, typename _Category>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type
     __n = __last - __first;
   for (; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>

 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type
     __n = __last - __first;
   for (; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>

 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::iterator_category _Category;





      return std::__copy_move_backward<_IsMove,
           __memcpyable<_BI2, _BI1>::__value,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
   
    inline _BI2
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }

  template<bool _IsMove,
    typename _Tp, typename _Ref, typename _Ptr, typename _OI>
    _OI
    __copy_move_backward_a1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       std::_Deque_iterator<_Tp, _Ref, _Ptr>,
       _OI);

  template<bool _IsMove,
    typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
    std::_Deque_iterator<_OTp, _OTp&, _OTp*>
    __copy_move_backward_a1(
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_ITp, _IRef, _IPtr>,
   std::_Deque_iterator<_OTp, _OTp&, _OTp*>);

  template<bool _IsMove, typename _II, typename _Tp>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value,
      std::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
    __copy_move_backward_a1(_II, _II,
       std::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
   
    inline _OI
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
    {
      return std::__niter_wrap(__result,
  std::__copy_move_backward_a1<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }

  template<bool _IsMove,
    typename _Ite, typename _Seq, typename _Cat, typename _OI>
    _OI
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
  _OI);

  template<bool _IsMove,
    typename _II, typename _Ite, typename _Seq, typename _Cat>
    __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __copy_move_backward_a(_II, _II,
  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);

  template<bool _IsMove,
    typename _IIte, typename _ISeq, typename _ICat,
    typename _OIte, typename _OSeq, typename _OCat>
    ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
    __copy_move_backward_a(
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
# 794 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
   
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
      (std::__miter_base(__first), std::__miter_base(__last), __result);
    }
# 830 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
   
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
            std::__miter_base(__last),
            __result);
    }






  template<typename _ForwardIterator, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
# 892 "/usr/include/c++/10/bits/stl_algobase.h" 3
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }

  template<typename _Ite, typename _Cont, typename _Tp>
   
    inline void
    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
       ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
       const _Tp& __value)
    { std::__fill_a1(__first.base(), __last.base(), __value); }

  template<typename _Tp, typename _VTp>
    void
    __fill_a1(const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const std::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
       const _VTp&);

  template<typename _FIte, typename _Tp>
   
    inline void
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
    { std::__fill_a1(__first, __last, __value); }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
    void
    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
      const _Tp&);
# 934 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(__first, __last, __value);
    }


  inline constexpr int
  __size_to_integer(int __n) { return __n; }
  inline constexpr unsigned
  __size_to_integer(unsigned __n) { return __n; }
  inline constexpr long
  __size_to_integer(long __n) { return __n; }
  inline constexpr unsigned long
  __size_to_integer(unsigned long __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long long __n) { return __n; }
  inline constexpr unsigned long long
  __size_to_integer(unsigned long long __n) { return __n; }


  inline constexpr __int128
  __size_to_integer(__int128 __n) { return __n; }
  inline constexpr unsigned __int128
  __size_to_integer(unsigned __int128 __n) { return __n; }
# 986 "/usr/include/c++/10/bits/stl_algobase.h" 3
  inline constexpr long long
  __size_to_integer(float __n) { return __n; }
  inline constexpr long long
  __size_to_integer(double __n) { return __n; }
  inline constexpr long long
  __size_to_integer(long double __n) { return __n; }

  inline constexpr long long
  __size_to_integer(__float128 __n) { return __n; }


  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
    typename _Tp>
    ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
        _Size __n, const _Tp& __value,
        std::input_iterator_tag);

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::output_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::input_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      return __fill_n_a1(__first, __n, __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
   
    inline _OutputIterator
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
        std::random_access_iterator_tag)
    {

      static_assert(is_integral<_Size>{}, "fill_n must pass integral size");

      if (__n <= 0)
 return __first;

      ;

      std::__fill_a(__first, __first + __n, __value);
      return __first + __n;
    }
# 1086 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
   
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return std::__fill_n_a(__first, std::__size_to_integer(__n), __value,
          std::__iterator_category(__first));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>

 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>

 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !std::__memcmp(__first1, __first2, __len);
   return true;
 }
    };

  template<typename _Tp, typename _Ref, typename _Ptr, typename _II>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   std::_Deque_iterator<_Tp, _Ref, _Ptr>,
   _II);

  template<typename _Tp1, typename _Ref1, typename _Ptr1,
    typename _Tp2, typename _Ref2, typename _Ptr2>
    bool
    __equal_aux1(std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,
   std::_Deque_iterator<_Tp2, _Ref2, _Ptr2>);

  template<typename _II, typename _Tp, typename _Ref, typename _Ptr>
    typename __gnu_cxx::__enable_if<
      __is_random_access_iter<_II>::__value, bool>::__type
    __equal_aux1(_II, _II,
  std::_Deque_iterator<_Tp, _Ref, _Ptr>);

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __memcmpable<_II1, _II2>::__value);
      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename _II1, typename _II2>
   
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      return std::__equal_aux1(std::__niter_base(__first1),
          std::__niter_base(__last1),
          std::__niter_base(__first2));
    }

  template<typename _II1, typename _Seq1, typename _Cat1, typename _II2>
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  _II2);

  template<typename _II1, typename _II2, typename _Seq2, typename _Cat2>
    bool
    __equal_aux(_II1, _II1,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename _II1, typename _Seq1, typename _Cat1,
    typename _II2, typename _Seq2, typename _Cat2>
    bool
    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,
  const ::__gnu_debug::_Safe_iterator<_II2, _Seq2, _Cat2>&);

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>

 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>

 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>

 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
   
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>

 static bool
 __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
 {
   using __gnu_cxx::__ops::__iter_less_iter;
   return std::__lexicographical_compare_impl(__first1, __last1,
           __first2, __last2,
           __iter_less_iter());
 }
    };

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>

 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = std::__memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
   
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value







  );

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
   
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 1347 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
   
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }


# 1403 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(__first1, __last1, __first2);
    }
# 1434 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
   
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1524 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {

     
     
     


      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2);
    }
# 1557 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
   
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__equal4(__first1, __last1, __first2, __last2,
          __binary_pred);
    }
# 1589 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
   
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1626 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
   
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }
# 1740 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1768 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1802 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __first2 != __last2
      && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1851 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1887 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
   
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _BinaryPredicate __binary_pred)
    {

     
     
      ;
      ;

      return std::__mismatch(__first1, __last1, __first2, __last2,
        __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }





  template<typename _InputIterator, typename _Predicate>
   
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !__pred(__first))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
   
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;

   if (__pred(__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(__first))
     return __first;
   ++__first;

 case 2:
   if (__pred(__first))
     return __first;
   ++__first;

 case 1:
   if (__pred(__first))
     return __first;
   ++__first;

 case 0:
 default:
   return __last;
 }
    }

  template<typename _Iterator, typename _Predicate>
   
    inline _Iterator
    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
    {
      return __find_if(__first, __last, __pred,
         std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Predicate>
   
    typename iterator_traits<_InputIterator>::difference_type
    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(__first))
   ++__n;
      return __n;
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
   
    bool
    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
       _ForwardIterator2 __first2, _BinaryPredicate __pred)
    {


      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!__pred(__first1, __first2))
   break;

      if (__first1 == __last1)
 return true;



      _ForwardIterator2 __last2 = __first2;
      std::advance(__last2, std::distance(__first1, __last1));
      for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
 {
   if (__scan != std::__find_if(__first1, __scan,
     __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
     continue;

   auto __matches
     = std::__count_if(__first2, __last2,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
   if (0 == __matches ||
       std::__count_if(__scan, __last1,
   __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))
       != __matches)
     return false;
 }
      return true;
    }
# 2044 "/usr/include/c++/10/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
   
    inline bool
    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
     _ForwardIterator2 __first2)
    {

     
     
     


      ;

      return std::__is_permutation(__first1, __last1, __first2,
       __gnu_cxx::__ops::__iter_equal_to_iter());
    }



}
# 64 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/allocator.h" 1 3
# 46 "/usr/include/c++/10/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 3
# 1 "/usr/include/c++/10/ext/new_allocator.h" 1 3
# 40 "/usr/include/c++/10/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/10/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef _Tp value_type;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };





      typedef std::true_type propagate_on_container_move_assignment;


     
      new_allocator() noexcept { }

     
      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>

 new_allocator(const new_allocator<_Tp1>&) noexcept { }


      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }




      _Tp*
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->_M_max_size())
   std::__throw_bad_alloc();
# 115 "/usr/include/c++/10/ext/new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(_Tp* __p, size_type __t)
      {
# 133 "/usr/include/c++/10/ext/new_allocator.h" 3
 ::operator delete(__p

     , __t * sizeof(_Tp)

    );
      }


      size_type
      max_size() const noexcept
      { return _M_max_size(); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }
# 169 "/usr/include/c++/10/ext/new_allocator.h" 3
      template<typename _Up>
 friend bool
 operator==(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return true; }


      template<typename _Up>
 friend bool
 operator!=(const new_allocator&, const new_allocator<_Up>&)
 noexcept
 { return false; }


    private:
      constexpr size_type
      _M_max_size() const noexcept
      {

 return std::size_t(0x7fffffffffffffffL) / sizeof(_Tp);



      }
    };


}
# 34 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 2 3


namespace std
{
# 47 "/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "/usr/include/c++/10/bits/allocator.h" 2 3







namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef void value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef void* pointer;
      typedef const void* const_pointer;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };
# 89 "/usr/include/c++/10/bits/allocator.h" 3
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p)
 noexcept(std::is_nothrow_destructible<_Up>::value)
 { __p->~_Up(); }

    };
# 115 "/usr/include/c++/10/bits/allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
    public:
      typedef _Tp value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;

      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };





      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;




     
      allocator() noexcept { }

     
      allocator(const allocator& __a) noexcept
      : __allocator_base<_Tp>(__a) { }



      allocator& operator=(const allocator&) = default;


      template<typename _Tp1>

 allocator(const allocator<_Tp1>&) noexcept { }




      ~allocator() noexcept { }
# 191 "/usr/include/c++/10/bits/allocator.h" 3
      friend bool
      operator==(const allocator&, const allocator&) noexcept
      { return true; }


      friend bool
      operator!=(const allocator&, const allocator&) noexcept
      { return false; }



    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }


  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }




  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {
# 314 "/usr/include/c++/10/bits/allocator.h" 3
 return false;

      }
    };



}
# 65 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/stl_construct.h" 1 3
# 73 "/usr/include/c++/10/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 106 "/usr/include/c++/10/bits/stl_construct.h" 3
  template<typename _Tp, typename... _Args>
    inline void
    _Construct(_Tp* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
# 121 "/usr/include/c++/10/bits/stl_construct.h" 3
  template<typename _T1>
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }

  template<typename _ForwardIterator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last);




  template<typename _Tp>
    constexpr inline void
    _Destroy(_Tp* __pointer)
    {



      __pointer->~_Tp();

    }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
 static void
 __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");





      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  template<bool>
    struct _Destroy_n_aux
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __destroy_n(_ForwardIterator __first, _Size __count)
 {
   for (; __count > 0; (void)++__first, --__count)
     std::_Destroy(std::__addressof(*__first));
   return __first;
 }
    };

  template<>
    struct _Destroy_n_aux<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   std::advance(__first, __count);
   return __first;
 }
    };






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");





      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 __destroy_n(__first, __count);
    }
# 253 "/usr/include/c++/10/bits/stl_construct.h" 3

}
# 66 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/stl_uninitialized.h" 1 3
# 67 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
# 1 "/usr/include/c++/10/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/10/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/10/ext/alloc_traits.h" 3

# 1 "/usr/include/c++/10/bits/alloc_traits.h" 1 3
# 41 "/usr/include/c++/10/bits/alloc_traits.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static constexpr auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static constexpr pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static constexpr _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static constexpr
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 {

   ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);



 }

      template<typename _Alloc2, typename _Tp>
 static constexpr auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 noexcept(noexcept(__a.destroy(__p)))
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static constexpr void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 noexcept(std::is_nothrow_destructible<_Tp>::value)
 { std::_Destroy(__p); }

      template<typename _Alloc2>
 static constexpr auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static constexpr size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static constexpr auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static constexpr _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 312 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 327 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 339 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 354 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto
 construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 noexcept(noexcept(_S_construct(__a, __p,
           std::forward<_Args>(__args)...)))
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 370 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Tp>
 static void
 destroy(_Alloc& __a, _Tp* __p)
 noexcept(noexcept(_S_destroy(__a, __p, 0)))
 { _S_destroy(__a, __p, 0); }
# 384 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static size_type
      max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 396 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };






  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;


      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 458 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 472 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      {

 return __a.allocate(__n, __hint);



      }
# 490 "/usr/include/c++/10/bits/alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 505 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
    _Args&&... __args)
 noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 {

   __a.construct(__p, std::forward<_Args>(__args)...);



 }
# 525 "/usr/include/c++/10/bits/alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 noexcept(is_nothrow_destructible<_Up>::value)
 {

   __a.destroy(__p);



 }






      static size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
      {

 return __a.max_size();



      }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;




      __do_alloc_on_copy(__one, __two, __pocca());

    }

  template<typename _Alloc>
    constexpr _Alloc
    __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }


  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;




      __do_alloc_on_move(__one, __two, __pocma());

    }


  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }


  template<typename _Alloc>
    constexpr inline void
    __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;







      __do_alloc_on_swap(__one, __two, __pocs());

    }

  template<typename _Alloc, typename _Tp,
    typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
    typename = void>
    struct __is_alloc_insertable_impl
    : false_type
    { };

  template<typename _Alloc, typename _Tp, typename _ValueT>
    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
      __void_t<decltype(allocator_traits<_Alloc>::construct(
     std::declval<_Alloc&>(), std::declval<_ValueT*>(),
     std::declval<_Tp>()))>>
    : true_type
    { };




  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_alloc_insertable_impl<_Alloc,
     typename _Alloc::value_type const&>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };




  template<typename _Alloc>
    struct __is_move_insertable
    : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
    { };


  template<typename _Tp>
    struct __is_move_insertable<allocator<_Tp>>
    : is_move_constructible<_Tp>
    { };


  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;

  template<typename _Alloc>
    using _RequireNotAllocator
      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
# 719 "/usr/include/c++/10/bits/alloc_traits.h" 3
  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)



 allocator_traits<_Allocator>::destroy(__alloc,
           std::__addressof(*__first));

    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 35 "/usr/include/c++/10/ext/alloc_traits.h" 2 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
           std::forward<_Args>(__args)...)))
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static constexpr
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static constexpr void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 166 "/usr/include/c++/10/ext/alloc_traits.h" 3
  };


}
# 68 "/usr/include/c++/10/bits/stl_uninitialized.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{








  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   if (true)
     {
       for (; __first != __last; ++__first, (void)++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__result, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 123 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;





      static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
   "result type must be constructible from value type of input range");

      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;


      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }



  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 198 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;





      static_assert(is_constructible<_ValueType, const _Tp&>::value,
   "result type must be constructible from input type");



      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }



  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 270 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;





      static_assert(is_constructible<_ValueType, const _Tp&>::value,
   "result type must be constructible from input type");



      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }
# 300 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, (void)++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur, __alloc);
   ;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
   ;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
   ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 414 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
   ;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      if (true)
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
   ;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      if (true)
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      if (false)
 {
   std::_Destroy(__result, __mid, __alloc);
   ;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      if (true)
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      if (false)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   ;
 }
    }
# 521 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
   ;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      if (true)
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__first, __cur, __alloc);
   ;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>
 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __cur != __last; ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _ForwardIterator __cur = __first;
   if (true)
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
       return __cur;
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
   ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      if (true)
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return {__first, __cur};
 }
      if (false)
 {
   std::_Destroy(__result, __cur);
   ;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 852 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }


  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 966 "/usr/include/c++/10/bits/stl_uninitialized.h" 3
  template<typename _Tp, typename _Up, typename _Allocator>
    inline void
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
   _Allocator& __alloc)
    noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
    __dest, std::move(*__orig)))
      && noexcept(std::allocator_traits<_Allocator>::destroy(
       __alloc, std::__addressof(*__orig))))
    {
      typedef std::allocator_traits<_Allocator> __traits;
      __traits::construct(__alloc, __dest, std::move(*__orig));
      __traits::destroy(__alloc, std::__addressof(*__orig));
    }



  template<typename _Tp, typename = void>
    struct __is_bitwise_relocatable
    : is_trivial<_Tp> { };

  template <typename _Tp, typename _Up>
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
     _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
 __builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
    }

  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
    inline _ForwardIterator
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
     _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
            std::addressof(*__first),
            __alloc)))
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
   "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
      for (; __first != __last; ++__first, (void)++__cur)
 std::__relocate_object_a(std::__addressof(*__cur),
     std::__addressof(*__first), __alloc);
      return __cur;
    }

  template <typename _InputIterator, typename _ForwardIterator,
     typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
   _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
         std::__niter_base(__last),
         std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
       std::__niter_base(__last),
       std::__niter_base(__result), __alloc);
    }







}
# 67 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/stl_tempbuf.h" 1 3
# 62 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  namespace __detail
  {
    template<typename _Tp>
      inline void
      __return_temporary_buffer(_Tp* __p,
    size_t __len __attribute__((__unused__)))
      {

 ::operator delete(__p, __len * sizeof(_Tp));



      }
  }
# 98 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len) noexcept
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 125 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p); }






  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::__detail::__return_temporary_buffer(_M_buffer, _M_len);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if (__first == __last)
     return;

   _Pointer __cur = __first;
   if (true)
     {
       std::_Construct(std::__addressof(*__first),
         std::move(*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    std::move(*__prev));
       *__seed = std::move(*__prev);
     }
   if (false)
     {
       std::_Destroy(__first, __cur);
       ;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 243 "/usr/include/c++/10/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)
    : _M_original_len(__original_len), _M_len(0), _M_buffer(0)
    {
      std::pair<pointer, size_type> __p(
  std::get_temporary_buffer<value_type>(_M_original_len));

      if (__p.first)
 {
   if (true)
     {
       std::__uninitialized_construct_buf(__p.first, __p.first + __p.second,
       __seed);
       _M_buffer = __p.first;
       _M_len = __p.second;
     }
   if (false)
     {
       std::__detail::__return_temporary_buffer(__p.first, __p.second);
       ;
     }
 }
    }


}
# 68 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/include/c++/10/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }




      raw_storage_iterator&
      operator=(_Tp&& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), std::move(__element));
 return *this;
      }


      raw_storage_iterator&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator
      operator++(int)
      {
 raw_storage_iterator __tmp = *this;
 ++_M_iter;
 return __tmp;
      }



      _OutputIterator base() const { return _M_iter; }
    };


}
# 69 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/ranges_uninitialized.h" 1 3
# 70 "/usr/include/c++/10/memory" 2 3





# 1 "/usr/include/c++/10/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/10/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/10/ext/atomicity.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 22 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4
# 43 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 76 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3 4
struct sched_param
{
  int sched_priority;
};
# 77 "/usr/include/x86_64-linux-gnu/bits/sched.h" 2 3 4

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int getcpu (unsigned int *, unsigned int *) throw ();


extern int setns (int __fd, int __nstype) throw ();


}
# 44 "/usr/include/sched.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
     throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 45 "/usr/include/sched.h" 2 3 4






extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 121 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 23 "/usr/include/pthread.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4




enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 100 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 120 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 155 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 193 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);
# 238 "/usr/include/pthread.h" 3 4
extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,
                                 clockid_t __clockid,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 470 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 482 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 516 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};
# 656 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)
     ;
# 668 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)
  ;
# 691 "/usr/include/pthread.h" 3 4
extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)
     ;
# 704 "/usr/include/pthread.h" 3 4
extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)
  ;



extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)
     __attribute__ ((__noreturn__))

     __attribute__ ((__weak__))

     ;



struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,
        clockid_t __clockid,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 789 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 871 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,
           clockid_t __clockid,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 997 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));
# 1010 "/usr/include/pthread.h" 3 4
extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __clockid_t __clock_id,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 4)));





extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1056 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1123 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1157 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 36 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 2 3
# 47 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 102 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once"), __copy__ (pthread_once)));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific"), __copy__ (pthread_getspecific)));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific"), __copy__ (pthread_setspecific)));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create"), __copy__ (pthread_create)));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join"), __copy__ (pthread_join)));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal"), __copy__ (pthread_equal)));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self"), __copy__ (pthread_self)));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach"), __copy__ (pthread_detach)));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel"), __copy__ (pthread_cancel)));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield"), __copy__ (sched_yield)));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock"), __copy__ (pthread_mutex_lock)));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock"), __copy__ (pthread_mutex_trylock)));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock"), __copy__ (pthread_mutex_timedlock)));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock"), __copy__ (pthread_mutex_unlock)));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init"), __copy__ (pthread_mutex_init)));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy"), __copy__ (pthread_mutex_destroy)));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init"), __copy__ (pthread_cond_init)));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast"), __copy__ (pthread_cond_broadcast)));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal"), __copy__ (pthread_cond_signal)));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait"), __copy__ (pthread_cond_wait)));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait"), __copy__ (pthread_cond_timedwait)));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy"), __copy__ (pthread_cond_destroy)));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create"), __copy__ (pthread_key_create)));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete"), __copy__ (pthread_key_delete)));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init"), __copy__ (pthread_mutexattr_init)));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype"), __copy__ (pthread_mutexattr_settype)));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy"), __copy__ (pthread_mutexattr_destroy)));
# 237 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create"), __copy__ (pthread_key_create)));
# 247 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 659 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 808 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 850 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/10/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/10/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  inline void
  __attribute__((__always_inline__))
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/10/ext/atomicity.h" 3
  inline _Atomic_word
  __attribute__((__always_inline__))
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  inline void
  __attribute__((__always_inline__))
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  inline _Atomic_word
  __attribute__ ((__always_inline__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);

    return __exchange_and_add_single(__mem, __val);
  }

  inline void
  __attribute__ ((__always_inline__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      {
 __atomic_add(__mem, __val);
 return;
      }

    __atomic_add_single(__mem, __val);
  }


}
# 76 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/ext/concurrence.h" 1 3
# 32 "/usr/include/c++/10/ext/concurrence.h" 3
       
# 33 "/usr/include/c++/10/ext/concurrence.h" 3







namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  enum _Lock_policy { _S_single, _S_mutex, _S_atomic };



  static const _Lock_policy __default_lock_policy =



  _S_atomic;






  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_lock_error"; }
  };

  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_unlock_error"; }
  };

  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };

  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const*
    what() const throw()
    { return "__gnu_cxx::__concurrence_wait_error"; }
  };


  inline void
  __throw_concurrence_lock_error()
  { (__builtin_abort()); }

  inline void
  __throw_concurrence_unlock_error()
  { (__builtin_abort()); }


  inline void
  __throw_concurrence_broadcast_error()
  { (__builtin_abort()); }

  inline void
  __throw_concurrence_wait_error()
  { (__builtin_abort()); }


  class __mutex
  {
  private:

    __gthread_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_TIMED_NP, 0, 0, { 0, 0 } } };




    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex()
    {




    }
# 144 "/usr/include/c++/10/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_mutex_t* gthread_mutex(void)
      { return &_M_mutex; }
  };

  class __recursive_mutex
  {
  private:

    __gthread_recursive_mutex_t _M_mutex = { { 0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, { 0, 0 } } };




    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex()
    {




    }
# 199 "/usr/include/c++/10/ext/concurrence.h" 3
    void lock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
     __throw_concurrence_lock_error();
 }

    }

    void unlock()
    {

      if (__gthread_active_p())
 {
   if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
     __throw_concurrence_unlock_error();
 }

    }

    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)
    { return &_M_mutex; }
  };




  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;

    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)
    { _M_device.lock(); }

    ~__scoped_lock() throw()
    { _M_device.unlock(); }
  };


  class __cond
  {
  private:

    __gthread_cond_t _M_cond = { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } };




    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond()
    {




    }
# 277 "/usr/include/c++/10/ext/concurrence.h" 3
    void broadcast()
    {

      if (__gthread_active_p())
 {
   if (__gthread_cond_broadcast(&_M_cond) != 0)
     __throw_concurrence_broadcast_error();
 }

    }

    void wait(__mutex *mutex)
    {

      {
   if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
     __throw_concurrence_wait_error();
      }

    }

    void wait_recursive(__recursive_mutex *mutex)
    {

      {
   if (__gthread_cond_wait_recursive(&_M_cond,
         mutex->gthread_recursive_mutex())
       != 0)
     __throw_concurrence_wait_error();
      }

    }
  };



}
# 77 "/usr/include/c++/10/memory" 2 3

# 1 "/usr/include/c++/10/bits/stl_function.h" 1 3
# 63 "/usr/include/c++/10/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 104 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 144 "/usr/include/c++/10/bits/stl_function.h" 3
  struct __is_transparent;

  template<typename _Tp = void>
    struct plus;

  template<typename _Tp = void>
    struct minus;

  template<typename _Tp = void>
    struct multiplies;

  template<typename _Tp = void>
    struct divides;

  template<typename _Tp = void>
    struct modulus;

  template<typename _Tp = void>
    struct negate;



  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };





  template<>
    struct plus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct minus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct multiplies<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct divides<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct modulus<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct negate<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(-std::forward<_Tp>(__t)))
 -> decltype(-std::forward<_Tp>(__t))
 { return -std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 330 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct equal_to;

  template<typename _Tp = void>
    struct not_equal_to;

  template<typename _Tp = void>
    struct greater;

  template<typename _Tp = void>
    struct less;

  template<typename _Tp = void>
    struct greater_equal;

  template<typename _Tp = void>
    struct less_equal;



  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x > __y;

 return (long unsigned int)__x > (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x < __y;

 return (long unsigned int)__x < (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x >= __y;

 return (long unsigned int)__x >= (long unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      constexpr bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {


 if (__builtin_is_constant_evaluated())



   return __x <= __y;

 return (long unsigned int)__x <= (long unsigned int)__y;
      }
    };



  template<>
    struct equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct not_equal_to<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct greater<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct greater_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return greater_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };


  template<>
    struct less_equal<void>
    {
      template <typename _Tp, typename _Up>
 constexpr auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 {
   return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
   __ptr_cmp<_Tp, _Up>{});
 }

      template<typename _Tp, typename _Up>
 constexpr bool
 operator()(_Tp* __t, _Up* __u) const noexcept
 { return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }

      typedef __is_transparent is_transparent;

    private:
      template <typename _Tp, typename _Up>
 static constexpr decltype(auto)
 _S_cmp(_Tp&& __t, _Up&& __u, false_type)
 { return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }

      template <typename _Tp, typename _Up>
 static constexpr bool
 _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 {
   return less_equal<const volatile void*>{}(
       static_cast<const volatile void*>(std::forward<_Tp>(__t)),
       static_cast<const volatile void*>(std::forward<_Up>(__u)));
 }


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded2 : true_type { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded2<_Tp, _Up, __void_t<
   decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 : false_type { };


      template<typename _Tp, typename _Up, typename = void>
 struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };


      template<typename _Tp, typename _Up>
 struct __not_overloaded<_Tp, _Up, __void_t<
   decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 : false_type { };

      template<typename _Tp, typename _Up>
 using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
       is_convertible<_Tp, const volatile void*>,
       is_convertible<_Up, const volatile void*>>;
    };
# 774 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Tp = void>
    struct logical_and;

  template<typename _Tp = void>
    struct logical_or;

  template<typename _Tp = void>
    struct logical_not;



  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      constexpr
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };



  template<>
    struct logical_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };


  template<>
    struct logical_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(!std::forward<_Tp>(__t)))
 -> decltype(!std::forward<_Tp>(__t))
 { return !std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };




  template<typename _Tp = void>
    struct bit_and;

  template<typename _Tp = void>
    struct bit_or;

  template<typename _Tp = void>
    struct bit_xor;

  template<typename _Tp = void>
    struct bit_not;




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      constexpr
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
    constexpr
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };


  template <>
    struct bit_and<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_or<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_xor<void>
    {
      template <typename _Tp, typename _Up>
 constexpr
 auto
 operator()(_Tp&& __t, _Up&& __u) const
 noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 { return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }

      typedef __is_transparent is_transparent;
    };

  template <>
    struct bit_not<void>
    {
      template <typename _Tp>
 constexpr
 auto
 operator()(_Tp&& __t) const
 noexcept(noexcept(~std::forward<_Tp>(__t)))
 -> decltype(~std::forward<_Tp>(__t))
 { return ~std::forward<_Tp>(__t); }

      typedef __is_transparent is_transparent;
    };
# 1002 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    constexpr
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      constexpr
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      constexpr
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    constexpr
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1079 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1202 "/usr/include/c++/10/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/10/backward/binders.h" 1 3
# 60 "/usr/include/c++/10/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std __attribute__ ((__visibility__ ("default")))
{

# 107 "/usr/include/c++/10/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1393 "/usr/include/c++/10/bits/stl_function.h" 2 3
# 79 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/uses_allocator.h" 1 3
# 35 "/usr/include/c++/10/bits/uses_allocator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct __erased_type { };




  template<typename _Alloc, typename _Tp>
    using __is_erased_or_convertible
      = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;


  struct allocator_arg_t { explicit allocator_arg_t() = default; };

  constexpr allocator_arg_t allocator_arg =
    allocator_arg_t();

  template<typename _Tp, typename _Alloc, typename = __void_t<>>
    struct __uses_allocator_helper
    : false_type { };

  template<typename _Tp, typename _Alloc>
    struct __uses_allocator_helper<_Tp, _Alloc,
       __void_t<typename _Tp::allocator_type>>
    : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
    { };


  template<typename _Tp, typename _Alloc>
    struct uses_allocator
    : __uses_allocator_helper<_Tp, _Alloc>::type
    { };

  struct __uses_alloc_base { };

  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink { void operator=(const void*) { } } _M_a;
  };

  template<typename _Alloc>
    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };

  template<typename _Alloc>
    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };

  template<bool, typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc;

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<true, _Tp, _Alloc, _Args...>
    : conditional<
        is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,
        __uses_alloc1<_Alloc>,
        __uses_alloc2<_Alloc>>::type
    {


      static_assert(__or_<
   is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,
   is_constructible<_Tp, _Args..., const _Alloc&>>::value,
   "construction with an allocator must be possible"
   " if uses_allocator is true");
    };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __uses_alloc<false, _Tp, _Alloc, _Args...>
    : __uses_alloc0 { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    using __uses_alloc_t =
      __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;

  template<typename _Tp, typename _Alloc, typename... _Args>
   
    inline __uses_alloc_t<_Tp, _Alloc, _Args...>
    __use_alloc(const _Alloc& __a)
    {
      __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
      __ret._M_a = std::__addressof(__a);
      return __ret;
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void
    __use_alloc(const _Alloc&&) = delete;







  template<template<typename...> class _Predicate,
    typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_predicate
    : conditional<uses_allocator<_Tp, _Alloc>::value,
      __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>,
     _Predicate<_Tp, _Args..., _Alloc>>,
      _Predicate<_Tp, _Args...>>::type { };

  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
    { };


  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename _Alloc, typename... _Args>
    struct __is_nothrow_uses_allocator_constructible
    : __is_uses_allocator_predicate<is_nothrow_constructible,
        _Tp, _Alloc, _Args...>
    { };



  template<typename _Tp, typename _Alloc, typename... _Args>
    constexpr bool
    __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;


  template<typename _Tp, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    {
      ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a,
          std::forward<_Args>(__args)...);
    }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,
      _Args&&... __args)
    { ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a); }

  template<typename _Tp, typename _Alloc, typename... _Args>
    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,
        _Args&&... __args)
    {
      std::__uses_allocator_construct_impl(
   std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr,
   std::forward<_Args>(__args)...);
    }


}
# 80 "/usr/include/c++/10/memory" 2 3



# 1 "/usr/include/c++/10/bits/unique_ptr.h" 1 3
# 37 "/usr/include/c++/10/bits/unique_ptr.h" 3
# 1 "/usr/include/c++/10/tuple" 1 3
# 32 "/usr/include/c++/10/tuple" 3
       
# 33 "/usr/include/c++/10/tuple" 3






# 1 "/usr/include/c++/10/array" 1 3
# 32 "/usr/include/c++/10/array" 3
       
# 33 "/usr/include/c++/10/array" 3
# 41 "/usr/include/c++/10/array" 3
# 1 "/usr/include/c++/10/bits/range_access.h" 1 3
# 33 "/usr/include/c++/10/bits/range_access.h" 3
       
# 34 "/usr/include/c++/10/bits/range_access.h" 3



# 1 "/usr/include/c++/10/bits/iterator_concepts.h" 1 3
# 33 "/usr/include/c++/10/bits/iterator_concepts.h" 3
       
# 34 "/usr/include/c++/10/bits/iterator_concepts.h" 3

# 1 "/usr/include/c++/10/concepts" 1 3
# 36 "/usr/include/c++/10/bits/iterator_concepts.h" 2 3

# 1 "/usr/include/c++/10/bits/range_cmp.h" 1 3
# 38 "/usr/include/c++/10/bits/iterator_concepts.h" 2 3
# 38 "/usr/include/c++/10/bits/range_access.h" 2 3
# 1 "/usr/include/c++/10/bits/int_limits.h" 1 3
# 33 "/usr/include/c++/10/bits/int_limits.h" 3
       
# 34 "/usr/include/c++/10/bits/int_limits.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

namespace __detail
{






  template<typename _Tp, bool = is_signed<_Tp>::value>
    struct __int_limits
    {
      static_assert(is_integral<_Tp>::value, "unsupported specialization");
      using _Up = typename make_unsigned<_Tp>::type;
      static constexpr int digits = sizeof(_Tp) * 8 - 1;
      static constexpr _Tp min() noexcept { return _Tp(_Up(1) << digits); }
      static constexpr _Tp max() noexcept { return _Tp(_Up(~_Up(0)) >> 1); }
    };


  template<typename _Tp>
    struct __int_limits<_Tp, false>
    {
      static_assert(is_integral<_Tp>::value, "unsupported specialization");
      static constexpr int digits = sizeof(_Tp) * 8;
      static constexpr _Tp min() noexcept { return 0; }
      static constexpr _Tp max() noexcept { return _Tp(-1); }
    };

  template<> struct __int_limits<bool>;
}

}
# 39 "/usr/include/c++/10/bits/range_access.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline constexpr _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }



  template<typename _Tp> class valarray;

  template<typename _Tp> _Tp* begin(valarray<_Tp>&);
  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);
  template<typename _Tp> _Tp* end(valarray<_Tp>&);
  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);






  template<typename _Container>
    inline constexpr auto
    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      -> decltype(std::begin(__cont))
    { return std::begin(__cont); }






  template<typename _Container>
    inline constexpr auto
    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))
      -> decltype(std::end(__cont))
    { return std::end(__cont); }






  template<typename _Container>
    inline auto
    rbegin(_Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())
    { return __cont.rbegin(); }






  template<typename _Container>
    inline auto
    rend(_Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Container>
    inline auto
    rend(const _Container& __cont) -> decltype(__cont.rend())
    { return __cont.rend(); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rbegin(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr + _Nm); }






  template<typename _Tp, size_t _Nm>
    inline reverse_iterator<_Tp*>
    rend(_Tp (&__arr)[_Nm])
    { return reverse_iterator<_Tp*>(__arr); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rbegin(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.end()); }






  template<typename _Tp>
    inline reverse_iterator<const _Tp*>
    rend(initializer_list<_Tp> __il)
    { return reverse_iterator<const _Tp*>(__il.begin()); }






  template<typename _Container>
    inline auto
    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))
    { return std::rbegin(__cont); }






  template<typename _Container>
    inline auto
    crend(const _Container& __cont) -> decltype(std::rend(__cont))
    { return std::rend(__cont); }
# 1143 "/usr/include/c++/10/bits/range_access.h" 3

}
# 42 "/usr/include/c++/10/array" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, std::size_t _Nm>
    struct __array_traits
    {
      typedef _Tp _Type[_Nm];
      typedef __is_swappable<_Tp> _Is_swappable;
      typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;

      static constexpr _Tp&
      _S_ref(const _Type& __t, std::size_t __n) noexcept
      { return const_cast<_Tp&>(__t[__n]); }

      static constexpr _Tp*
      _S_ptr(const _Type& __t) noexcept
      { return const_cast<_Tp*>(__t); }
    };

 template<typename _Tp>
   struct __array_traits<_Tp, 0>
   {
     struct _Type { };
     typedef true_type _Is_swappable;
     typedef true_type _Is_nothrow_swappable;

     static constexpr _Tp&
     _S_ref(const _Type&, std::size_t) noexcept
     { return *static_cast<_Tp*>(nullptr); }

     static constexpr _Tp*
     _S_ptr(const _Type&) noexcept
     { return nullptr; }
   };
# 93 "/usr/include/c++/10/array" 3
  template<typename _Tp, std::size_t _Nm>
    struct array
    {
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef value_type* iterator;
      typedef const value_type* const_iterator;
      typedef std::size_t size_type;
      typedef std::ptrdiff_t difference_type;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;


      typedef std::__array_traits<_Tp, _Nm> _AT_Type;
      typename _AT_Type::_Type _M_elems;




      void
      fill(const value_type& __u)
      { std::fill_n(begin(), size(), __u); }

      void
      swap(array& __other)
      noexcept(_AT_Type::_Is_nothrow_swappable::value)
      { std::swap_ranges(begin(), end(), __other.begin()); }


      iterator
      begin() noexcept
      { return iterator(data()); }

      const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      iterator
      end() noexcept
      { return iterator(data() + _Nm); }

      const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }

      const_iterator
      cbegin() const noexcept
      { return const_iterator(data()); }

      const_iterator
      cend() const noexcept
      { return const_iterator(data() + _Nm); }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      constexpr size_type
      size() const noexcept { return _Nm; }

      constexpr size_type
      max_size() const noexcept { return _Nm; }

      constexpr bool
      empty() const noexcept { return size() == 0; }


      reference
      operator[](size_type __n) noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      constexpr const_reference
      operator[](size_type __n) const noexcept
      { return _AT_Type::_S_ref(_M_elems, __n); }

      reference
      at(size_type __n)
      {
 if (__n >= _Nm)
   std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                 ,
     __n, _Nm);
 return _AT_Type::_S_ref(_M_elems, __n);
      }

      constexpr const_reference
      at(size_type __n) const
      {


 return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
   : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) " ">= _Nm (which is %zu)")
                                    ,
        __n, _Nm),
      _AT_Type::_S_ref(_M_elems, 0));
      }

      reference
      front() noexcept
      { return *begin(); }

      constexpr const_reference
      front() const noexcept
      { return _AT_Type::_S_ref(_M_elems, 0); }

      reference
      back() noexcept
      { return _Nm ? *(end() - 1) : *end(); }

      constexpr const_reference
      back() const noexcept
      {
 return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
             : _AT_Type::_S_ref(_M_elems, 0);
      }

      pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }

      const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
    };
# 250 "/usr/include/c++/10/array" 3
  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return std::equal(__one.begin(), __one.end(), __two.begin()); }
# 275 "/usr/include/c++/10/array" 3
  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one == __two); }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
    {
      return std::lexicographical_compare(__a.begin(), __a.end(),
       __b.begin(), __b.end());
    }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return __two < __one; }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one > __two); }

  template<typename _Tp, std::size_t _Nm>
   
    inline bool
    operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
    { return !(__one < __two); }



  template<typename _Tp, std::size_t _Nm>
   
    inline


    typename enable_if<
      std::__array_traits<_Tp, _Nm>::_Is_swappable::value
    >::type



    swap(array<_Tp, _Nm>& __one, array<_Tp, _Nm>& __two)
    noexcept(noexcept(__one.swap(__two)))
    { __one.swap(__two); }


  template<typename _Tp, std::size_t _Nm>
    typename enable_if<
      !std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type
    swap(array<_Tp, _Nm>&, array<_Tp, _Nm>&) = delete;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&
    get(array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr _Tp&&
    get(array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&
    get(const array<_Tp, _Nm>& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::__array_traits<_Tp, _Nm>::
 _S_ref(__arr._M_elems, _Int);
    }

  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    constexpr const _Tp&&
    get(const array<_Tp, _Nm>&& __arr) noexcept
    {
      static_assert(_Int < _Nm, "array index is within bounds");
      return std::move(std::get<_Int>(__arr));
    }
# 404 "/usr/include/c++/10/array" 3

}

namespace std __attribute__ ((__visibility__ ("default")))
{





  template<typename _Tp>
    struct tuple_size;


  template<typename _Tp, std::size_t _Nm>
    struct tuple_size<std::array<_Tp, _Nm>>
    : public integral_constant<std::size_t, _Nm> { };


  template<std::size_t _Int, typename _Tp>
    struct tuple_element;


  template<std::size_t _Int, typename _Tp, std::size_t _Nm>
    struct tuple_element<_Int, std::array<_Tp, _Nm>>
    {
      static_assert(_Int < _Nm, "index is out of bounds");
      typedef _Tp type;
    };

  template<typename _Tp, std::size_t _Nm>
    struct __is_tuple_like_impl<std::array<_Tp, _Nm>> : true_type
    { };


}
# 40 "/usr/include/c++/10/tuple" 2 3

# 1 "/usr/include/c++/10/bits/invoke.h" 1 3
# 33 "/usr/include/c++/10/bits/invoke.h" 3
       
# 34 "/usr/include/c++/10/bits/invoke.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 52 "/usr/include/c++/10/bits/invoke.h" 3
  template<typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
    constexpr _Up&&
    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
    _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
    }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)
    { return __invfwd<_Tp>(__t).*__f; }

  template<typename _Res, typename _MemPtr, typename _Tp>
    constexpr _Res
    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)
    { return (*std::forward<_Tp>(__t)).*__f; }


  template<typename _Callable, typename... _Args>
    constexpr typename __invoke_result<_Callable, _Args...>::type
    __invoke(_Callable&& __fn, _Args&&... __args)
    noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }
# 118 "/usr/include/c++/10/bits/invoke.h" 3
  template<typename _Res, typename _Callable, typename... _Args>
    using __can_invoke_as_void = __enable_if_t<
      __and_<is_void<_Res>, __is_invocable<_Callable, _Args...>>::value,
      _Res
    >;

  template<typename _Res, typename _Callable, typename... _Args>
    using __can_invoke_as_nonvoid = __enable_if_t<
      __and_<__not_<is_void<_Res>>,
      is_convertible<typename __invoke_result<_Callable, _Args...>::type,
       _Res>
      >::value,
      _Res
    >;


  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }


  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
     std::forward<_Args>(__args)...);
    }



}
# 42 "/usr/include/c++/10/tuple" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename... _Elements>
    class tuple;

  template<typename _Tp>
    struct __is_empty_non_tuple : is_empty<_Tp> { };


  template<typename _El0, typename... _El>
    struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };


  template<typename _Tp>
    using __empty_not_final
    = typename conditional<__is_final(_Tp), false_type,
      __is_empty_non_tuple<_Tp>>::type;

  template<std::size_t _Idx, typename _Head,
    bool = __empty_not_final<_Head>::value>
    struct _Head_base;

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, true>
    : public _Head
    {
      constexpr _Head_base()
      : _Head() { }

      constexpr _Head_base(const _Head& __h)
      : _Head(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _Head(std::forward<_UHead>(__h)) { }

      _Head_base(allocator_arg_t, __uses_alloc0)
      : _Head() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _Head(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _Head(*__a._M_a) { }

      template<typename _UHead>
 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }

      constexpr _Head_base(const _Head& __h)
      : _M_head_impl(__h) { }

      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
 : _M_head_impl(std::forward<_UHead>(__h)) { }

     
      _Head_base(allocator_arg_t, __uses_alloc0)
      : _M_head_impl() { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 : _M_head_impl(allocator_arg, *__a._M_a) { }

      template<typename _Alloc>
 _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 : _M_head_impl(*__a._M_a) { }

      template<typename _UHead>

 _Head_base(__uses_alloc0, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead)) { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 { }

      template<typename _Alloc, typename _UHead>
 _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }

      static constexpr _Head&
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }

      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }

      _Head _M_head_impl;
    };
# 182 "/usr/include/c++/10/tuple" 3
  template<std::size_t _Idx, typename... _Elements>
    struct _Tuple_impl;






  template<std::size_t _Idx, typename _Head, typename... _Tail>
    struct _Tuple_impl<_Idx, _Head, _Tail...>
    : public _Tuple_impl<_Idx + 1, _Tail...>,
      private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr _Inherited&
      _M_tail(_Tuple_impl& __t) noexcept { return __t; }

      static constexpr const _Inherited&
      _M_tail(const _Tuple_impl& __t) noexcept { return __t; }

      constexpr _Tuple_impl()
      : _Inherited(), _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
      : _Inherited(__tail...), _Base(__head) { }

      template<typename _UHead, typename... _UTail, typename = typename
               enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
        explicit
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 : _Inherited(std::forward<_UTail>(__tail)...),
   _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(__and_<is_nothrow_move_constructible<_Head>,
               is_nothrow_move_constructible<_Inherited>>::value)
      : _Inherited(std::move(_M_tail(__in))),
 _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename... _UElements>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _UHead, typename... _UTails>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a),
          _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head, const _Tail&... __tail)
 : _Inherited(__tag, __a, __tail...),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead, typename... _UTail,
               typename = typename enable_if<sizeof...(_Tail)
          == sizeof...(_UTail)>::type>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head, _UTail&&... __tail)
 : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>

        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Inherited(__tag, __a, _M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Inherited(__tag, __a, std::move(_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename... _UElements>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UElements...>& __in)
 : _Inherited(__tag, __a,
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
   _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead, typename... _UTails>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 : _Inherited(__tag, __a, std::move
       (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
   _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>
  (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }

      template<typename... _UElements>

        void
        _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
   _M_tail(*this)._M_assign(
       _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
 }

      template<typename _UHead, typename... _UTails>

        void
        _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        {
   _M_head(*this) = std::forward<_UHead>
     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
   _M_tail(*this)._M_assign(
       std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
 }

    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
 _Inherited::_M_swap(_M_tail(__in));
      }
    };


  template<std::size_t _Idx, typename _Head>
    struct _Tuple_impl<_Idx, _Head>
    : private _Head_base<_Idx, _Head>
    {
      template<std::size_t, typename...> friend class _Tuple_impl;

      typedef _Head_base<_Idx, _Head> _Base;

      static constexpr _Head&
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      static constexpr const _Head&
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }

      constexpr _Tuple_impl()
      : _Base() { }

      explicit
      constexpr _Tuple_impl(const _Head& __head)
      : _Base(__head) { }

      template<typename _UHead>
        explicit
        constexpr _Tuple_impl(_UHead&& __head)
 : _Base(std::forward<_UHead>(__head)) { }

      constexpr _Tuple_impl(const _Tuple_impl&) = default;



      _Tuple_impl& operator=(const _Tuple_impl&) = delete;

      constexpr
      _Tuple_impl(_Tuple_impl&& __in)
      noexcept(is_nothrow_move_constructible<_Head>::value)
      : _Base(std::forward<_Head>(_M_head(__in))) { }

      template<typename _UHead>
        constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _UHead>
        constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 : _Base(__tag, __use_alloc<_Head>(__a)) { }

      template<typename _Alloc>
 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
      const _Head& __head)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _UHead&& __head)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
         std::forward<_UHead>(__head)) { }

      template<typename _Alloc>

        _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }

      template<typename _Alloc>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
         std::forward<_Head>(_M_head(__in))) { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             const _Tuple_impl<_Idx, _UHead>& __in)
 : _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
  _Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }

      template<typename _Alloc, typename _UHead>

 _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
             _Tuple_impl<_Idx, _UHead>&& __in)
 : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 { }

      template<typename _UHead>

        void
        _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
        {
   _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 }

      template<typename _UHead>

        void
        _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
        {
   _M_head(*this)
     = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 }

    protected:
     
      void
      _M_swap(_Tuple_impl& __in)
      {
 using std::swap;
 swap(_M_head(*this), _M_head(__in));
      }
    };



  template<bool, typename... _Types>
    struct _TupleConstraints
    {



      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 {
   return __and_<is_constructible<_Types, _UTypes>...,
   is_convertible<_UTypes, _Types>...
   >::value;
 }




      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 {
   return __and_<is_constructible<_Types, _UTypes>...,
   __not_<__and_<is_convertible<_UTypes, _Types>...>>
   >::value;
 }

      static constexpr bool __is_implicitly_default_constructible()
      {
 return __and_<std::__is_implicitly_default_constructible<_Types>...
        >::value;
      }

      static constexpr bool __is_explicitly_default_constructible()
      {
 return __and_<is_default_constructible<_Types>...,
        __not_<__and_<
   std::__is_implicitly_default_constructible<_Types>...>
        >>::value;
      }
    };



  template<typename... _Types>
    struct _TupleConstraints<false, _Types...>
    {
      template<typename... _UTypes>
 static constexpr bool __is_implicitly_constructible()
 { return false; }

      template<typename... _UTypes>
 static constexpr bool __is_explicitly_constructible()
 { return false; }
    };


  template<typename... _Elements>
    class tuple : public _Tuple_impl<0, _Elements...>
    {
      typedef _Tuple_impl<0, _Elements...> _Inherited;

      template<bool _Cond>
 using _TCC = _TupleConstraints<_Cond, _Elements...>;


      template<bool _Dummy>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TCC<_Dummy>::__is_explicitly_default_constructible(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_Args...>(),
   bool>;


      template<bool _Cond, typename... _Args>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_Args...>(),
   bool>;

      template<typename... _UElements>
 static constexpr
 __enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>
 __assignable()
 { return __and_<is_assignable<_Elements&, _UElements>...>::value; }


      template<typename... _UElements>
 static constexpr bool __nothrow_assignable()
 {
   return
     __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
 }


      template<typename... _UElements>
 static constexpr bool __nothrow_constructible()
 {
   return
     __and_<is_nothrow_constructible<_Elements, _UElements>...>::value;
 }


      template<typename _Up>
 static constexpr bool __valid_args()
 {
   return sizeof...(_Elements) == 1
     && !is_same<tuple, __remove_cvref_t<_Up>>::value;
 }


      template<typename, typename, typename... _Tail>
 static constexpr bool __valid_args()
 { return (sizeof...(_Tail) + 2) == sizeof...(_Elements); }
# 591 "/usr/include/c++/10/tuple" 3
      template<typename _Tuple, typename = tuple,
        typename = __remove_cvref_t<_Tuple>>
 struct _UseOtherCtor
 : false_type
 { };


      template<typename _Tuple, typename _Tp, typename _Up>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Up>>
 : __or_<is_convertible<_Tuple, _Tp>, is_constructible<_Tp, _Tuple>>
 { };


      template<typename _Tuple, typename _Tp>
 struct _UseOtherCtor<_Tuple, tuple<_Tp>, tuple<_Tp>>
 : true_type
 { };




      template<typename _Tuple>
 static constexpr bool __use_other_ctor()
 { return _UseOtherCtor<_Tuple>::value; }

    public:
      template<typename _Dummy = void,
        _ImplicitDefaultCtor<is_void<_Dummy>::value> = true>
 constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<typename _Dummy = void,
        _ExplicitDefaultCtor<is_void<_Dummy>::value> = false>
 explicit constexpr
 tuple()
 noexcept(__and_<is_nothrow_default_constructible<_Elements>...>::value)
 : _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
 constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>
 explicit constexpr
 tuple(const _Elements&... __elements)
 noexcept(__nothrow_constructible<const _Elements&...>())
 : _Inherited(__elements...) { }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      template<typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(_UElements&&... __elements)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(std::forward<_UElements>(__elements)...) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>
 constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
      && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>
 explicit constexpr
 tuple(const tuple<_UElements...>& __in)
 noexcept(__nothrow_constructible<const _UElements&...>())
 : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>
 constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }

      template<typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>
 explicit constexpr
 tuple(tuple<_UElements...>&& __in)
 noexcept(__nothrow_constructible<_UElements...>())
 : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ImplicitCtor<_NotEmpty, const _Elements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, bool _NotEmpty = (sizeof...(_Elements) >= 1),
        _ExplicitCtor<_NotEmpty, const _Elements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _Elements&... __elements)
 : _Inherited(__tag, __a, __elements...) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = __valid_args<_UElements...>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { }

      template<typename _Alloc, typename... _UElements,
   bool _Valid = __valid_args<_UElements...>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _UElements&&... __elements)
 : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ImplicitCtor<_Valid, const _UElements&...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<const tuple<_UElements...>&>(),
        _ExplicitCtor<_Valid, const _UElements&...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_UElements...>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ImplicitCtor<_Valid, _UElements...> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }

      template<typename _Alloc, typename... _UElements,
        bool _Valid = (sizeof...(_Elements) == sizeof...(_UElements))
        && !__use_other_ctor<tuple<_UElements...>&&>(),
        _ExplicitCtor<_Valid, _UElements...> = false>

 explicit
 tuple(allocator_arg_t __tag, const _Alloc& __a,
       tuple<_UElements...>&& __in)
 : _Inherited(__tag, __a,
              static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 { }



     
      tuple&
      operator=(typename conditional<__assignable<const _Elements&...>(),
         const tuple&,
         const __nonesuch&>::type __in)
      noexcept(__nothrow_assignable<const _Elements&...>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(typename conditional<__assignable<_Elements...>(),
         tuple&&,
         __nonesuch&&>::type __in)
      noexcept(__nothrow_assignable<_Elements...>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename... _UElements>

 __enable_if_t<__assignable<const _UElements&...>(), tuple&>
 operator=(const tuple<_UElements...>& __in)
 noexcept(__nothrow_assignable<const _UElements&...>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename... _UElements>

 __enable_if_t<__assignable<_UElements...>(), tuple&>
 operator=(tuple<_UElements...>&& __in)
 noexcept(__nothrow_assignable<_UElements...>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }


     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
      { _Inherited::_M_swap(__in); }
    };
# 867 "/usr/include/c++/10/tuple" 3
  template<>
    class tuple<>
    {
    public:
      void swap(tuple&) noexcept { }


      tuple() = default;

      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&) noexcept { }
      template<typename _Alloc>

 tuple(allocator_arg_t, const _Alloc&, const tuple&) noexcept { }
    };



  template<typename _T1, typename _T2>
    class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
    {
      typedef _Tuple_impl<0, _T1, _T2> _Inherited;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ImplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_implicitly_default_constructible(),
   bool>;


      template<bool _Dummy, typename _U1, typename _U2>
 using _ExplicitDefaultCtor = __enable_if_t<
   _TupleConstraints<_Dummy, _U1, _U2>::
     __is_explicitly_default_constructible(),
   bool>;

      template<bool _Dummy>
 using _TCC = _TupleConstraints<_Dummy, _T1, _T2>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ImplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_implicitly_constructible<_U1, _U2>(),
   bool>;


      template<bool _Cond, typename _U1, typename _U2>
 using _ExplicitCtor = __enable_if_t<
   _TCC<_Cond>::template __is_explicitly_constructible<_U1, _U2>(),
   bool>;

      template<typename _U1, typename _U2>
 static constexpr bool __assignable()
 {
   return __and_<is_assignable<_T1&, _U1>,
   is_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_assignable()
 {
   return __and_<is_nothrow_assignable<_T1&, _U1>,
   is_nothrow_assignable<_T2&, _U2>>::value;
 }

      template<typename _U1, typename _U2>
 static constexpr bool __nothrow_constructible()
 {
   return __and_<is_nothrow_constructible<_T1, _U1>,
       is_nothrow_constructible<_T2, _U2>>::value;
 }

      static constexpr bool __nothrow_default_constructible()
      {
 return __and_<is_nothrow_default_constructible<_T1>,
        is_nothrow_default_constructible<_T2>>::value;
      }

      template<typename _U1>
 static constexpr bool __is_alloc_arg()
 { return is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value; }

    public:
      template<bool _Dummy = true,
        _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
 constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ExplicitDefaultCtor<_Dummy, _T1, _T2> = false>
 explicit constexpr
 tuple()
 noexcept(__nothrow_default_constructible())
 : _Inherited() { }

      template<bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>
 constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit constexpr
 tuple(const _T1& __a1, const _T2& __a2)
 noexcept(__nothrow_constructible<const _T1&, const _T2&>())
 : _Inherited(__a1, __a2) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = true>
 constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<!__is_alloc_arg<_U1>(), _U1, _U2> = false>
 explicit constexpr
 tuple(_U1&& __a1, _U2&& __a2)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>
 constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit constexpr
 tuple(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_constructible<const _U1&, const _U2&>())
 : _Inherited(__in.first, __in.second) { }

      template<typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>
 constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit constexpr
 tuple(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_constructible<_U1, _U2>())
 : _Inherited(std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



      template<typename _Alloc,
        _ImplicitDefaultCtor<is_object<_Alloc>::value, _T1, _T2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a)
 : _Inherited(__tag, __a) { }

      template<typename _Alloc, bool _Dummy = true,
        _ImplicitCtor<_Dummy, const _T1&, const _T2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, bool _Dummy = true,
        _ExplicitCtor<_Dummy, const _T1&, const _T2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const _T1& __a1, const _T2& __a2)
 : _Inherited(__tag, __a, __a1, __a2) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       _U1&& __a1, _U2&& __a2)
 : _Inherited(__tag, __a, std::forward<_U1>(__a1),
              std::forward<_U2>(__a2)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }

      template<typename _Alloc>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const tuple<_U1, _U2>& __in)
 : _Inherited(__tag, __a,
              static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
 { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, const _U1&, const _U2&> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, const _U1&, const _U2&> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a,
       const pair<_U1, _U2>& __in)
 : _Inherited(__tag, __a, __in.first, __in.second) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ImplicitCtor<true, _U1, _U2> = true>

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }

      template<typename _Alloc, typename _U1, typename _U2,
        _ExplicitCtor<true, _U1, _U2> = false>
 explicit

 tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
 : _Inherited(__tag, __a, std::forward<_U1>(__in.first),
       std::forward<_U2>(__in.second)) { }



     
      tuple&
      operator=(typename conditional<__assignable<const _T1&, const _T2&>(),
         const tuple&,
         const __nonesuch&>::type __in)
      noexcept(__nothrow_assignable<const _T1&, const _T2&>())
      {
 this->_M_assign(__in);
 return *this;
      }

     
      tuple&
      operator=(typename conditional<__assignable<_T1, _T2>(),
         tuple&&,
         __nonesuch&&>::type __in)
      noexcept(__nothrow_assignable<_T1, _T2>())
      {
 this->_M_assign(std::move(__in));
 return *this;
      }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const tuple<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_assign(__in);
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(tuple<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_assign(std::move(__in));
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
 operator=(const pair<_U1, _U2>& __in)
 noexcept(__nothrow_assignable<const _U1&, const _U2&>())
 {
   this->_M_head(*this) = __in.first;
   this->_M_tail(*this)._M_head(*this) = __in.second;
   return *this;
 }

      template<typename _U1, typename _U2>

 __enable_if_t<__assignable<_U1, _U2>(), tuple&>
 operator=(pair<_U1, _U2>&& __in)
 noexcept(__nothrow_assignable<_U1, _U2>())
 {
   this->_M_head(*this) = std::forward<_U1>(__in.first);
   this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
   return *this;
 }

     
      void
      swap(tuple& __in)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
        __is_nothrow_swappable<_T2>>::value)
      { _Inherited::_M_swap(__in); }
    };



  template<typename... _Elements>
    struct tuple_size<tuple<_Elements...>>
    : public integral_constant<std::size_t, sizeof...(_Elements)> { };
# 1258 "/usr/include/c++/10/tuple" 3
  template<std::size_t __i, typename _Head, typename... _Tail>
    struct tuple_element<__i, tuple<_Head, _Tail...> >
    : tuple_element<__i - 1, tuple<_Tail...> > { };




  template<typename _Head, typename... _Tail>
    struct tuple_element<0, tuple<_Head, _Tail...> >
    {
      typedef _Head type;
    };




  template<size_t __i>
    struct tuple_element<__i, tuple<>>
    {
      static_assert(__i < tuple_size<tuple<>>::value,
   "tuple index is in range");
    };

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr _Head&
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<std::size_t __i, typename _Head, typename... _Tail>
    constexpr const _Head&
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
    { return std::__get_helper<__i>(__t); }


  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
    get(tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<__element_type&&>(std::get<__i>(__t));
    }


  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
    get(const tuple<_Elements...>&& __t) noexcept
    {
      typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
      return std::forward<const __element_type&&>(std::get<__i>(__t));
    }





  template<typename _Head, size_t __i, typename... _Tail>
    constexpr _Head&
    __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  template<typename _Head, size_t __i, typename... _Tail>
    constexpr const _Head&
    __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&
    get(tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }


  template <typename _Tp, typename... _Types>
    constexpr _Tp&&
    get(tuple<_Types...>&& __t) noexcept
    { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }


  template <typename _Tp, typename... _Types>
    constexpr const _Tp&
    get(const tuple<_Types...>& __t) noexcept
    { return std::__get_helper2<_Tp>(__t); }



  template <typename _Tp, typename... _Types>
    constexpr const _Tp&&
    get(const tuple<_Types...>&& __t) noexcept
    { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }



  template<typename _Tp, typename _Up, size_t __i, size_t __size>
    struct __tuple_compare
    {
      static constexpr bool
      __eq(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) == std::get<__i>(__u))
   && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
      }

      static constexpr bool
      __less(const _Tp& __t, const _Up& __u)
      {
 return bool(std::get<__i>(__t) < std::get<__i>(__u))
   || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
       && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
      }
    };

  template<typename _Tp, typename _Up, size_t __size>
    struct __tuple_compare<_Tp, _Up, __size, __size>
    {
      static constexpr bool
      __eq(const _Tp&, const _Up&) { return true; }

      static constexpr bool
      __less(const _Tp&, const _Up&) { return false; }
    };

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator==(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__eq(__t, __u);
    }
# 1433 "/usr/include/c++/10/tuple" 3
  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    {
      static_assert(sizeof...(_TElements) == sizeof...(_UElements),
   "tuple objects can only be compared if they have equal sizes.");
      using __compare = __tuple_compare<tuple<_TElements...>,
     tuple<_UElements...>,
     0, sizeof...(_TElements)>;
      return __compare::__less(__t, __u);
    }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator!=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t == __u); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>(const tuple<_TElements...>& __t,
       const tuple<_UElements...>& __u)
    { return __u < __t; }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator<=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__u < __t); }

  template<typename... _TElements, typename... _UElements>
    constexpr bool
    operator>=(const tuple<_TElements...>& __t,
        const tuple<_UElements...>& __u)
    { return !(__t < __u); }



  template<typename... _Elements>
    constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
    make_tuple(_Elements&&... __args)
    {
      typedef tuple<typename __decay_and_strip<_Elements>::__type...>
 __result_type;
      return __result_type(std::forward<_Elements>(__args)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&&...>
    forward_as_tuple(_Elements&&... __args) noexcept
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }

  template<size_t, typename, typename, size_t>
    struct __make_tuple_impl;

  template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
    struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
    : __make_tuple_impl<_Idx + 1,
   tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
   _Tuple, _Nm>
    { };

  template<std::size_t _Nm, typename _Tuple, typename... _Tp>
    struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
    {
      typedef tuple<_Tp...> __type;
    };

  template<typename _Tuple>
    struct __do_make_tuple
    : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
    { };


  template<typename _Tuple>
    struct __make_tuple
    : public __do_make_tuple<__remove_cvref_t<_Tuple>>
    { };


  template<typename...>
    struct __combine_tuples;

  template<>
    struct __combine_tuples<>
    {
      typedef tuple<> __type;
    };

  template<typename... _Ts>
    struct __combine_tuples<tuple<_Ts...>>
    {
      typedef tuple<_Ts...> __type;
    };

  template<typename... _T1s, typename... _T2s, typename... _Rem>
    struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
    {
      typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
     _Rem...>::__type __type;
    };


  template<typename... _Tpls>
    struct __tuple_cat_result
    {
      typedef typename __combine_tuples
        <typename __make_tuple<_Tpls>::__type...>::__type __type;
    };



  template<typename...>
    struct __make_1st_indices;

  template<>
    struct __make_1st_indices<>
    {
      typedef std::_Index_tuple<> __type;
    };

  template<typename _Tp, typename... _Tpls>
    struct __make_1st_indices<_Tp, _Tpls...>
    {
      typedef typename std::_Build_index_tuple<std::tuple_size<
 typename std::remove_reference<_Tp>::type>::value>::__type __type;
    };




  template<typename _Ret, typename _Indices, typename... _Tpls>
    struct __tuple_concater;

  template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
    struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
    {
      template<typename... _Us>
        static constexpr _Ret
        _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
        {
   typedef typename __make_1st_indices<_Tpls...>::__type __idx;
   typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
   return __next::_S_do(std::forward<_Tpls>(__tps)...,
          std::forward<_Us>(__us)...,
          std::get<_Is>(std::forward<_Tp>(__tp))...);
 }
    };

  template<typename _Ret>
    struct __tuple_concater<_Ret, std::_Index_tuple<>>
    {
      template<typename... _Us>
 static constexpr _Ret
 _S_do(_Us&&... __us)
        {
   return _Ret(std::forward<_Us>(__us)...);
 }
    };


  template<typename... _Tpls, typename = typename
           enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
    constexpr auto
    tuple_cat(_Tpls&&... __tpls)
    -> typename __tuple_cat_result<_Tpls...>::__type
    {
      typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
      return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
    }




  template<typename... _Elements>
    constexpr tuple<_Elements&...>
    tie(_Elements&... __args) noexcept
    { return tuple<_Elements&...>(__args...); }


  template<typename... _Elements>
   
    inline


    typename enable_if<__and_<__is_swappable<_Elements>...>::value
      >::type



    swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }


  template<typename... _Elements>
   
    typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
    swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;






  struct _Swallow_assign
  {
    template<class _Tp>
      constexpr const _Swallow_assign&
      operator=(const _Tp&) const
      { return *this; }
  };



  constexpr _Swallow_assign ignore{};


  template<typename... _Types, typename _Alloc>
    struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
# 1669 "/usr/include/c++/10/tuple" 3
  template<class _T1, class _T2>
    template<typename... _Args1, typename... _Args2>
     
      inline
      pair<_T1, _T2>::
      pair(piecewise_construct_t,
    tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first, __second,
      typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
      typename _Build_index_tuple<sizeof...(_Args2)>::__type())
      { }

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
    _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
      { }
# 1759 "/usr/include/c++/10/tuple" 3

}
# 38 "/usr/include/c++/10/bits/unique_ptr.h" 2 3

# 1 "/usr/include/c++/10/bits/functional_hash.h" 1 3
# 33 "/usr/include/c++/10/bits/functional_hash.h" 3
       
# 34 "/usr/include/c++/10/bits/functional_hash.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };







  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<__int128> : public __hash_base<size_t, __int128> { size_t operator()(__int128 __val) const noexcept { return static_cast<size_t>(__val); } };
  template<> struct hash<__int128 unsigned> : public __hash_base<size_t, __int128 unsigned> { size_t operator()(__int128 unsigned __val) const noexcept { return static_cast<size_t>(__val); } };
# 192 "/usr/include/c++/10/bits/functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };
# 278 "/usr/include/c++/10/bits/functional_hash.h" 3
  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 40 "/usr/include/c++/10/bits/unique_ptr.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{








#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename> class auto_ptr;
#pragma GCC diagnostic pop



  template<typename _Tp>
    struct default_delete
    {

      constexpr default_delete() noexcept = default;






      template<typename _Up,
        typename = _Require<is_convertible<_Up*, _Tp*>>>
        default_delete(const default_delete<_Up>&) noexcept { }


      void
      operator()(_Tp* __ptr) const
      {
 static_assert(!is_void<_Tp>::value,
        "can't delete pointer to incomplete type");
 static_assert(sizeof(_Tp)>0,
        "can't delete pointer to incomplete type");
 delete __ptr;
      }
    };





  template<typename _Tp>
    struct default_delete<_Tp[]>
    {
    public:

      constexpr default_delete() noexcept = default;
# 109 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Up,
        typename = _Require<is_convertible<_Up(*)[], _Tp(*)[]>>>
        default_delete(const default_delete<_Up[]>&) noexcept { }


      template<typename _Up>
 typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
 operator()(_Up* __ptr) const
 {
   static_assert(sizeof(_Tp)>0,
   "can't delete pointer to incomplete type");
   delete [] __ptr;
 }
    };




  template <typename _Tp, typename _Dp>
    class __uniq_ptr_impl
    {
      template <typename _Up, typename _Ep, typename = void>
 struct _Ptr
 {
   using type = _Up*;
 };

      template <typename _Up, typename _Ep>
 struct
 _Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
 {
   using type = typename remove_reference<_Ep>::type::pointer;
 };

    public:
      using _DeleterConstraint = enable_if<
        __and_<__not_<is_pointer<_Dp>>,
        is_default_constructible<_Dp>>::value>;

      using pointer = typename _Ptr<_Tp, _Dp>::type;

      static_assert( !is_rvalue_reference<_Dp>::value,
       "unique_ptr's deleter type must be a function object type"
       " or an lvalue reference type" );

      __uniq_ptr_impl() = default;
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }

      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 : _M_t(__p, std::forward<_Del>(__d)) { }

      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept
      : _M_t(std::move(__u._M_t))
      { __u._M_ptr() = nullptr; }

      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
      {
 reset(__u.release());
 _M_deleter() = std::forward<_Dp>(__u._M_deleter());
 return *this;
      }

      pointer& _M_ptr() { return std::get<0>(_M_t); }
      pointer _M_ptr() const { return std::get<0>(_M_t); }
      _Dp& _M_deleter() { return std::get<1>(_M_t); }
      const _Dp& _M_deleter() const { return std::get<1>(_M_t); }

      void reset(pointer __p) noexcept
      {
 const pointer __old_p = _M_ptr();
 _M_ptr() = __p;
 if (__old_p)
   _M_deleter()(__old_p);
      }

      pointer release() noexcept
      {
 pointer __p = _M_ptr();
 _M_ptr() = nullptr;
 return __p;
      }

      void
      swap(__uniq_ptr_impl& __rhs) noexcept
      {
 using std::swap;
 swap(this->_M_ptr(), __rhs._M_ptr());
 swap(this->_M_deleter(), __rhs._M_deleter());
      }

    private:
      tuple<pointer, _Dp> _M_t;
    };


  template <typename _Tp, typename _Dp,
     bool = is_move_constructible<_Dp>::value,
     bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
    };

  template <typename _Tp, typename _Dp>
    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = delete;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;
    };



  template <typename _Tp, typename _Dp = default_delete<_Tp>>
    class unique_ptr
    {
      template <typename _Up>
 using _DeleterConstraint =
   typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_data<_Tp, _Dp> _M_t;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;

    private:


      template<typename _Up, typename _Ep>
 using __safe_conversion_up = __and_<
   is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>,
   __not_<is_array<_Up>>
        >;

    public:



      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }







      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 explicit
 unique_ptr(pointer __p) noexcept
 : _M_t(__p)
        { }
# 292 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_copy_constructible<_Del>>>
 unique_ptr(pointer __p, const deleter_type& __d) noexcept
 : _M_t(__p, __d) { }
# 304 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Del = deleter_type,
        typename = _Require<is_move_constructible<_Del>>>
 unique_ptr(pointer __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(__p, std::move(__d))
 { }

      template<typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type>
 unique_ptr(pointer,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
 { }




      unique_ptr(unique_ptr&&) = default;







      template<typename _Up, typename _Ep, typename = _Require<
               __safe_conversion_up<_Up, _Ep>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Up, typename = _Require<
        is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
 unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop



      ~unique_ptr() noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(std::move(__ptr));
 __ptr = pointer();
      }







      unique_ptr& operator=(unique_ptr&&) = default;
# 380 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
        typename enable_if< __and_<
          __safe_conversion_up<_Up, _Ep>,
          is_assignable<deleter_type&, _Ep&&>
          >::value,
          unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename add_lvalue_reference<element_type>::type
      operator*() const
      {
 ;
 return *get();
      }


      pointer
      operator->() const noexcept
      {
 ;
 return get();
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      { return _M_t.release(); }







      void
      reset(pointer __p = pointer()) noexcept
      {
 static_assert(__is_invocable<deleter_type&, pointer>::value,
        "unique_ptr's deleter must be invocable with a pointer");
 _M_t.reset(std::move(__p));
      }


      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
  };





  template<typename _Tp, typename _Dp>
    class unique_ptr<_Tp[], _Dp>
    {
      template <typename _Up>
      using _DeleterConstraint =
 typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;

      __uniq_ptr_data<_Tp, _Dp> _M_t;

      template<typename _Up>
 using __remove_cv = typename remove_cv<_Up>::type;


      template<typename _Up>
 using __is_derived_Tp
   = __and_< is_base_of<_Tp, _Up>,
      __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>> >;

    public:
      using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
      using element_type = _Tp;
      using deleter_type = _Dp;



      template<typename _Up, typename _Ep,
               typename _UPtr = unique_ptr<_Up, _Ep>,
        typename _UP_pointer = typename _UPtr::pointer,
        typename _UP_element_type = typename _UPtr::element_type>
 using __safe_conversion_up = __and_<
          is_array<_Up>,
          is_same<pointer, element_type*>,
          is_same<_UP_pointer, _UP_element_type*>,
          is_convertible<_UP_element_type(*)[], element_type(*)[]>
        >;


      template<typename _Up>
        using __safe_conversion_raw = __and_<
          __or_<__or_<is_same<_Up, pointer>,
                      is_same<_Up, nullptr_t>>,
                __and_<is_pointer<_Up>,
                       is_same<pointer, element_type*>,
                       is_convertible<
                         typename remove_pointer<_Up>::type(*)[],
                         element_type(*)[]>
                >
          >
        >;




      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr() noexcept
 : _M_t()
 { }
# 541 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Up,
        typename _Vp = _Dp,
        typename = _DeleterConstraint<_Vp>,
        typename = typename enable_if<
                 __safe_conversion_raw<_Up>::value, bool>::type>
 explicit
 unique_ptr(_Up __p) noexcept
 : _M_t(__p)
        { }
# 559 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_copy_constructible<_Del>>>
      unique_ptr(_Up __p, const deleter_type& __d) noexcept
      : _M_t(__p, __d) { }
# 573 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Up, typename _Del = deleter_type,
        typename = _Require<__safe_conversion_raw<_Up>,
       is_move_constructible<_Del>>>
 unique_ptr(_Up __p,
     __enable_if_t<!is_lvalue_reference<_Del>::value,
     _Del&&> __d) noexcept
 : _M_t(std::move(__p), std::move(__d))
 { }

      template<typename _Up, typename _Del = deleter_type,
        typename _DelUnref = typename remove_reference<_Del>::type,
        typename = _Require<__safe_conversion_raw<_Up>>>
 unique_ptr(_Up,
     __enable_if_t<is_lvalue_reference<_Del>::value,
     _DelUnref&&>) = delete;


      unique_ptr(unique_ptr&&) = default;


      template<typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
 constexpr unique_ptr(nullptr_t) noexcept
 : _M_t()
        { }

      template<typename _Up, typename _Ep, typename = _Require<
        __safe_conversion_up<_Up, _Ep>,
        typename conditional<is_reference<_Dp>::value,
        is_same<_Ep, _Dp>,
        is_convertible<_Ep, _Dp>>::type>>
 unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept
 : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
 { }


      ~unique_ptr()
      {
 auto& __ptr = _M_t._M_ptr();
 if (__ptr != nullptr)
   get_deleter()(__ptr);
 __ptr = pointer();
      }







      unique_ptr&
      operator=(unique_ptr&&) = default;
# 632 "/usr/include/c++/10/bits/unique_ptr.h" 3
      template<typename _Up, typename _Ep>
 typename
 enable_if<__and_<__safe_conversion_up<_Up, _Ep>,
                         is_assignable<deleter_type&, _Ep&&>
                  >::value,
                  unique_ptr&>::type
 operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
 {
   reset(__u.release());
   get_deleter() = std::forward<_Ep>(__u.get_deleter());
   return *this;
 }


      unique_ptr&
      operator=(nullptr_t) noexcept
      {
 reset();
 return *this;
      }




      typename std::add_lvalue_reference<element_type>::type
      operator[](size_t __i) const
      {
 ;
 return get()[__i];
      }


      pointer
      get() const noexcept
      { return _M_t._M_ptr(); }


      deleter_type&
      get_deleter() noexcept
      { return _M_t._M_deleter(); }


      const deleter_type&
      get_deleter() const noexcept
      { return _M_t._M_deleter(); }


      explicit operator bool() const noexcept
      { return get() == pointer() ? false : true; }




      pointer
      release() noexcept
      { return _M_t.release(); }







      template <typename _Up,
                typename = _Require<
                  __or_<is_same<_Up, pointer>,
                        __and_<is_same<pointer, element_type*>,
                               is_pointer<_Up>,
                               is_convertible<
                                 typename remove_pointer<_Up>::type(*)[],
                                 element_type(*)[]
                               >
                        >
                  >
               >>
      void
      reset(_Up __p) noexcept
      { _M_t.reset(std::move(__p)); }

      void reset(nullptr_t = nullptr) noexcept
      { reset(pointer()); }


      void
      swap(unique_ptr& __u) noexcept
      {
 static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
 _M_t.swap(__u._M_t);
      }


      unique_ptr(const unique_ptr&) = delete;
      unique_ptr& operator=(const unique_ptr&) = delete;
    };




  template<typename _Tp, typename _Dp>
    inline


    typename enable_if<__is_swappable<_Dp>::value>::type



    swap(unique_ptr<_Tp, _Dp>& __x,
  unique_ptr<_Tp, _Dp>& __y) noexcept
    { __x.swap(__y); }


  template<typename _Tp, typename _Dp>
    typename enable_if<!__is_swappable<_Dp>::value>::type
    swap(unique_ptr<_Tp, _Dp>&,
  unique_ptr<_Tp, _Dp>&) = delete;



  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() == __y.get(); }


  template<typename _Tp, typename _Dp>
    inline bool
    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return !__x; }



  template<typename _Tp, typename _Dp>
    inline bool
    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return !__x; }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }


  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
    { return (bool)__x; }


  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
    { return (bool)__x; }



  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    {
      typedef typename
 std::common_type<typename unique_ptr<_Tp, _Dp>::pointer,
                  typename unique_ptr<_Up, _Ep>::pointer>::type _CT;
      return std::less<_CT>()(__x.get(), __y.get());
    }


  template<typename _Tp, typename _Dp>
    inline bool
    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr);
    }


  template<typename _Tp, typename _Dp>
    inline bool
    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get());
    }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(nullptr < __x); }


  template<typename _Tp, typename _Dp>
    inline bool
    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(__x < nullptr); }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x,
       const unique_ptr<_Up, _Ep>& __y)
    { return (__y < __x); }


  template<typename _Tp, typename _Dp>
    inline bool
    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,
         __x.get());
    }


  template<typename _Tp, typename _Dp>
    inline bool
    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    {
      return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),
         nullptr);
    }


  template<typename _Tp, typename _Dp,
    typename _Up, typename _Ep>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x,
        const unique_ptr<_Up, _Ep>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
    { return !(__x < nullptr); }


  template<typename _Tp, typename _Dp>
    inline bool
    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
    { return !(nullptr < __x); }
# 912 "/usr/include/c++/10/bits/unique_ptr.h" 3
  template<typename _Up, typename _Ptr = typename _Up::pointer,
    bool = __poison_hash<_Ptr>::__enable_hash_call>
    struct __uniq_ptr_hash

    : private __poison_hash<_Ptr>

    {
      size_t
      operator()(const _Up& __u) const
      noexcept(noexcept(std::declval<hash<_Ptr>>()(std::declval<_Ptr>())))
      { return hash<_Ptr>()(__u.get()); }
    };

  template<typename _Up, typename _Ptr>
    struct __uniq_ptr_hash<_Up, _Ptr, false>
    : private __poison_hash<_Ptr>
    { };



  template<typename _Tp, typename _Dp>
    struct hash<unique_ptr<_Tp, _Dp>>
    : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
      public __uniq_ptr_hash<unique_ptr<_Tp, _Dp>>
    { };







  template<typename _Tp>
    struct _MakeUniq
    { typedef unique_ptr<_Tp> __single_object; };

  template<typename _Tp>
    struct _MakeUniq<_Tp[]>
    { typedef unique_ptr<_Tp[]> __array; };

  template<typename _Tp, size_t _Bound>
    struct _MakeUniq<_Tp[_Bound]>
    { struct __invalid_type { }; };




  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }


  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }


  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__invalid_type
    make_unique(_Args&&...) = delete;
# 1008 "/usr/include/c++/10/bits/unique_ptr.h" 3

}
# 84 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/shared_ptr.h" 1 3
# 52 "/usr/include/c++/10/bits/shared_ptr.h" 3
# 1 "/usr/include/c++/10/bits/shared_ptr_base.h" 1 3
# 53 "/usr/include/c++/10/bits/shared_ptr_base.h" 3
# 1 "/usr/include/c++/10/bits/allocated_ptr.h" 1 3
# 40 "/usr/include/c++/10/bits/allocated_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Alloc>
    struct __allocated_ptr
    {
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;


      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr)
      { }


      template<typename _Ptr,
        typename _Req = _Require<is_same<_Ptr, value_type*>>>
      __allocated_ptr(_Alloc& __a, _Ptr __ptr)
      : _M_alloc(std::__addressof(__a)),
 _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
      { }


      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }


      ~__allocated_ptr()
      {
 if (_M_ptr != nullptr)
   std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }


      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
 _M_ptr = nullptr;
 return *this;
      }


      value_type* get() { return std::__to_address(_M_ptr); }

    private:
      _Alloc* _M_alloc;
      pointer _M_ptr;
    };


  template<typename _Alloc>
    __allocated_ptr<_Alloc>
    __allocate_guarded(_Alloc& __a)
    {
      return { __a, std::allocator_traits<_Alloc>::allocate(__a, 1) };
    }


}
# 54 "/usr/include/c++/10/bits/shared_ptr_base.h" 2 3
# 1 "/usr/include/c++/10/bits/refwrap.h" 1 3
# 33 "/usr/include/c++/10/bits/refwrap.h" 3
       
# 34 "/usr/include/c++/10/bits/refwrap.h" 3
# 43 "/usr/include/c++/10/bits/refwrap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Res, typename... _ArgTypes>
    struct _Maybe_unary_or_binary_function { };


  template<typename _Res, typename _T1>
    struct _Maybe_unary_or_binary_function<_Res, _T1>
    : std::unary_function<_T1, _Res> { };


  template<typename _Res, typename _T1, typename _T2>
    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>
    : std::binary_function<_T1, _T2, _Res> { };

  template<typename _Signature>
    struct _Mem_fn_traits;

  template<typename _Res, typename _Class, typename... _ArgTypes>
    struct _Mem_fn_traits_base
    {
      using __result_type = _Res;
      using __maybe_type
 = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;
      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;
    };
# 99 "/usr/include/c++/10/bits/refwrap.h" 3
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) > : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const > : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile > : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile > : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const &&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) volatile &&> : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...> { using __vararg = true_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = false_type; }; template<typename _Res, typename _Class, typename... _ArgTypes> struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes... ...) const volatile &&> : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...> { using __vararg = true_type; };
# 113 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Functor, typename = __void_t<>>
    struct _Maybe_get_result_type
    { };

  template<typename _Functor>
    struct _Maybe_get_result_type<_Functor,
      __void_t<typename _Functor::result_type>>
    { typedef typename _Functor::result_type result_type; };





  template<typename _Functor>
    struct _Weak_result_type_impl
    : _Maybe_get_result_type<_Functor>
    { };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes...) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(_ArgTypes......) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) >
    { typedef _Res result_type; };


  template<typename _Res, typename... _ArgTypes >
    struct
    _Weak_result_type_impl<_Res(*)(_ArgTypes......) >
    { typedef _Res result_type; };


  template<typename _Functor,
    bool = is_member_function_pointer<_Functor>::value>
    struct _Weak_result_type_memfun
    : _Weak_result_type_impl<_Functor>
    { };


  template<typename _MemFunPtr>
    struct _Weak_result_type_memfun<_MemFunPtr, true>
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };


  template<typename _Func, typename _Class>
    struct _Weak_result_type_memfun<_Func _Class::*, false>
    { };





  template<typename _Functor>
    struct _Weak_result_type
    : _Weak_result_type_memfun<typename remove_cv<_Functor>::type>
    { };



  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg1
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg1<_Tp,
         __void_t<typename _Tp::argument_type>>
    {
      typedef typename _Tp::argument_type argument_type;
    };


  template<typename _Tp, typename = __void_t<>>
    struct _Refwrap_base_arg2
    { };


  template<typename _Tp>
    struct _Refwrap_base_arg2<_Tp,
         __void_t<typename _Tp::first_argument_type,
           typename _Tp::second_argument_type>>
    {
      typedef typename _Tp::first_argument_type first_argument_type;
      typedef typename _Tp::second_argument_type second_argument_type;
    };







  template<typename _Tp>
    struct _Reference_wrapper_base
    : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(_T1) >
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) volatile>
    : unary_function<_T1, _Res>
    { };

  template<typename _Res, typename _T1>
    struct _Reference_wrapper_base<_Res(_T1) const volatile>
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Res, typename _T1, typename _T2>
    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>
    : binary_function<_T1, _T2, _Res>
    { };


  template<typename _Res, typename _T1 >
    struct _Reference_wrapper_base<_Res(*)(_T1) >
    : unary_function<_T1, _Res>
    { };


  template<typename _Res, typename _T1, typename _T2 >
    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) >
    : binary_function<_T1, _T2, _Res>
    { };

  template<typename _Tp, bool = is_member_function_pointer<_Tp>::value>
    struct _Reference_wrapper_base_memfun
    : _Reference_wrapper_base<_Tp>
    { };

  template<typename _MemFunPtr>
    struct _Reference_wrapper_base_memfun<_MemFunPtr, true>
    : _Mem_fn_traits<_MemFunPtr>::__maybe_type
    {
      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
    };
# 293 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Tp>
    class reference_wrapper



    : public _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>

    {
      _Tp* _M_data;

     
      static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }

      static void _S_fun(_Tp&&) = delete;

      template<typename _Up, typename _Up2 = __remove_cvref_t<_Up>>
 using __not_same
   = typename enable_if<!is_same<reference_wrapper, _Up2>::value>::type;

    public:
      typedef _Tp type;




      template<typename _Up, typename = __not_same<_Up>, typename
  = decltype(reference_wrapper::_S_fun(std::declval<_Up>()))>

 reference_wrapper(_Up&& __uref)
 noexcept(noexcept(reference_wrapper::_S_fun(std::declval<_Up>())))
 : _M_data(reference_wrapper::_S_fun(std::forward<_Up>(__uref)))
 { }

      reference_wrapper(const reference_wrapper&) = default;

      reference_wrapper&
      operator=(const reference_wrapper&) = default;

     
      operator _Tp&() const noexcept
      { return this->get(); }

     
      _Tp&
      get() const noexcept
      { return *_M_data; }

      template<typename... _Args>

 typename result_of<_Tp&(_Args&&...)>::type
 operator()(_Args&&... __args) const
 {




   return std::__invoke(get(), std::forward<_Args>(__args)...);
 }
    };
# 361 "/usr/include/c++/10/bits/refwrap.h" 3
  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(_Tp& __t) noexcept
    { return reference_wrapper<_Tp>(__t); }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(const _Tp& __t) noexcept
    { return reference_wrapper<const _Tp>(__t); }

  template<typename _Tp>
    void ref(const _Tp&&) = delete;

  template<typename _Tp>
    void cref(const _Tp&&) = delete;


  template<typename _Tp>
   
    inline reference_wrapper<_Tp>
    ref(reference_wrapper<_Tp> __t) noexcept
    { return __t; }


  template<typename _Tp>
   
    inline reference_wrapper<const _Tp>
    cref(reference_wrapper<_Tp> __t) noexcept
    { return { __t.get() }; }




}
# 55 "/usr/include/c++/10/bits/shared_ptr_base.h" 2 3

# 1 "/usr/include/c++/10/ext/aligned_buffer.h" 1 3
# 32 "/usr/include/c++/10/ext/aligned_buffer.h" 3
       
# 33 "/usr/include/c++/10/ext/aligned_buffer.h" 3







namespace __gnu_cxx
{




  template<typename _Tp>
    struct __aligned_membuf
    {





      struct _Tp2 { _Tp _M_t; };

      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];

      __aligned_membuf() = default;


      __aligned_membuf(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      { return static_cast<void*>(&_M_storage); }

      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };
# 89 "/usr/include/c++/10/ext/aligned_buffer.h" 3
  template<typename _Tp>
    struct __aligned_buffer
    : std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>
    {
      typename
 std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;

      __aligned_buffer() = default;


      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
      }

      const void*
      _M_addr() const noexcept
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
      { return static_cast<_Tp*>(_M_addr()); }

      const _Tp*
      _M_ptr() const noexcept
      { return static_cast<const _Tp*>(_M_addr()); }
    };


}
# 57 "/usr/include/c++/10/bits/shared_ptr_base.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template<typename> class auto_ptr;
#pragma GCC diagnostic pop






  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const* what() const noexcept;

    virtual ~bad_weak_ptr() noexcept;
  };


  inline void
  __throw_bad_weak_ptr()
  { (__builtin_abort()); }

  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_S_single;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_atomic;


  template<_Lock_policy _Lp>
    class _Mutex_base
    {
    protected:

      enum { _S_need_barriers = 0 };
    };

  template<>
    class _Mutex_base<_S_mutex>
    : public __gnu_cxx::__mutex
    {
    protected:



      enum { _S_need_barriers = 1 };
    };

  template<_Lock_policy _Lp = __default_lock_policy>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }

      virtual
      ~_Sp_counted_base() noexcept
      { }



      virtual void
      _M_dispose() noexcept = 0;


      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept = 0;

      void
      _M_add_ref_copy()
      { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }

      void
      _M_add_ref_lock();

      bool
      _M_add_ref_lock_nothrow();

      void
      _M_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
   {
            ;
     _M_dispose();




     if (_Mutex_base<_Lp>::_S_need_barriers)
       {
  __atomic_thread_fence (4);
       }


            ;
     if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
             -1) == 1)
              {
                ;
         _M_destroy();
              }
   }
      }

      void
      _M_weak_add_ref() noexcept
      { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }

      void
      _M_weak_release() noexcept
      {

        ;
 if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
   {
            ;
     if (_Mutex_base<_Lp>::_S_need_barriers)
       {


  __atomic_thread_fence (4);
       }
     _M_destroy();
   }
      }

      long
      _M_get_use_count() const noexcept
      {


        return __atomic_load_n(&_M_use_count, 0);
      }

    private:
      _Sp_counted_base(_Sp_counted_base const&) = delete;
      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;

      _Atomic_word _M_use_count;
      _Atomic_word _M_weak_count;
    };

  template<>
    inline void
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock()
    {
      if (_M_use_count == 0)
 __throw_bad_weak_ptr();
      ++_M_use_count;
    }

  template<>
    inline void
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   __throw_bad_weak_ptr();
 }
    }

  template<>
    inline void
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     __throw_bad_weak_ptr();


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
    }

  template<>
    inline bool
    _Sp_counted_base<_S_single>::
    _M_add_ref_lock_nothrow()
    {
      if (_M_use_count == 0)
 return false;
      ++_M_use_count;
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_mutex>::
    _M_add_ref_lock_nothrow()
    {
      __gnu_cxx::__scoped_lock sentry(*this);
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
 {
   _M_use_count = 0;
   return false;
 }
      return true;
    }

  template<>
    inline bool
    _Sp_counted_base<_S_atomic>::
    _M_add_ref_lock_nothrow()
    {

      _Atomic_word __count = _M_get_use_count();
      do
 {
   if (__count == 0)
     return false;


 }
      while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1,
       true, 4,
       0));
      return true;
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
        }
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
    { ++_M_weak_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_weak_release() noexcept
    {
      if (--_M_weak_count == 0)
        _M_destroy();
    }

  template<>
    inline long
    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
    { return _M_use_count; }



  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __shared_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __weak_ptr;

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy>
    class __enable_shared_from_this;

  template<typename _Tp>
    class shared_ptr;

  template<typename _Tp>
    class weak_ptr;

  template<typename _Tp>
    struct owner_less;

  template<typename _Tp>
    class enable_shared_from_this;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __weak_count;

  template<_Lock_policy _Lp = __default_lock_policy>
    class __shared_count;



  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }

      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

    private:
      _Ptr _M_ptr;
    };

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }

  template<>
    inline void
    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }

  template<int _Nm, typename _Tp,
    bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
    struct _Sp_ebo_helper;


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
    };


  template<int _Nm, typename _Tp>
    struct _Sp_ebo_helper<_Nm, _Tp, false>
    {
      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }
      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }

      static _Tp&
      _S_get(_Sp_ebo_helper& __eboh)
      { return __eboh._M_tp; }

    private:
      _Tp _M_tp;
    };


  template<typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
 typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

      public:
 _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
 : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
 { }

 _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
 _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }

 _Ptr _M_ptr;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;


      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, std::move(__d), _Alloc()) { }


      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, std::move(__d), __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }

      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_deleter();
      }

      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept
      {







        return nullptr;

      }

    private:
      _Impl _M_impl;
    };



  struct _Sp_make_shared_tag
  {
  private:
    template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
      friend class _Sp_counted_ptr_inplace;

    static const type_info&
    _S_ti() noexcept __attribute__ ((__visibility__ ("default")))
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = { };
      return reinterpret_cast<const type_info&>(__tag);
    }

    static bool _S_eq(const type_info&) noexcept;
  };

  template<typename _Alloc>
    struct _Sp_alloc_shared_tag
    {
      const _Alloc& _M_a;
    };

  template<typename _Tp, typename _Alloc, _Lock_policy _Lp>
    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
    {
      class _Impl : _Sp_ebo_helper<0, _Alloc>
      {
 typedef _Sp_ebo_helper<0, _Alloc> _A_base;

      public:
 explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }

 _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }

 __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
      };

    public:
      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;


      template<typename... _Args>
 _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)
 : _M_impl(__a)
 {


   allocator_traits<_Alloc>::construct(__a, _M_ptr(),
       std::forward<_Args>(__args)...);
 }

      ~_Sp_counted_ptr_inplace() noexcept { }

      virtual void
      _M_dispose() noexcept
      {
 allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr());
      }


      virtual void
      _M_destroy() noexcept
      {
 __allocator_type __a(_M_impl._M_alloc());
 __allocated_ptr<__allocator_type> __guard_ptr{ __a, this };
 this->~_Sp_counted_ptr_inplace();
      }

    private:
      friend class __shared_count<_Lp>;



      virtual void*
      _M_get_deleter(const std::type_info& __ti) noexcept override
      {
 auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());




 if (&__ti == &_Sp_make_shared_tag::_S_ti()
     ||



     _Sp_make_shared_tag::_S_eq(__ti)

    )
   return __ptr;
 return nullptr;
      }

      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }

      _Impl _M_impl;
    };


  struct __sp_array_delete
  {
    template<typename _Yp>
      void operator()(_Yp* __p) const { delete[] __p; }
  };

  template<_Lock_policy _Lp>
    class __shared_count
    {
      template<typename _Tp>
 struct __not_alloc_shared_tag { using type = void; };

      template<typename _Tp>
 struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };

    public:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
 __shared_count(_Ptr __p) : _M_pi(0)
 {
   if (true)
     {
       _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
     }
   if (false)
     {
       delete __p;
       ;
     }
 }

      template<typename _Ptr>
 __shared_count(_Ptr __p, false_type)
 : __shared_count(__p)
 { }

      template<typename _Ptr>
 __shared_count(_Ptr __p, true_type)
 : __shared_count(__p, __sp_array_delete{}, allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter,
        typename = typename __not_alloc_shared_tag<_Deleter>::type>
 __shared_count(_Ptr __p, _Deleter __d)
 : __shared_count(__p, std::move(__d), allocator<void>())
 { }

      template<typename _Ptr, typename _Deleter, typename _Alloc,
        typename = typename __not_alloc_shared_tag<_Deleter>::type>
 __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
 {
   typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
   if (true)
     {
       typename _Sp_cd_type::__allocator_type __a2(__a);
       auto __guard = std::__allocate_guarded(__a2);
       _Sp_cd_type* __mem = __guard.get();
       ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
       _M_pi = __mem;
       __guard = nullptr;
     }
   if (false)
     {
       __d(__p);
       ;
     }
 }

      template<typename _Tp, typename _Alloc, typename... _Args>
 __shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,
         _Args&&... __args)
 {
   typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
   typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
   auto __guard = std::__allocate_guarded(__a2);
   _Sp_cp_type* __mem = __guard.get();
   auto __pi = ::new (__mem)
     _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
   __guard = nullptr;
   _M_pi = __pi;
   __p = __pi->_M_ptr();
 }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Tp>
        explicit
 __shared_count(std::auto_ptr<_Tp>&& __r);
#pragma GCC diagnostic pop



      template<typename _Tp, typename _Del>
        explicit
 __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
 {


   if (__r.get() == nullptr)
     return;

   using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
   using _Del2 = typename conditional<is_reference<_Del>::value,
       reference_wrapper<typename remove_reference<_Del>::type>,
       _Del>::type;
   using _Sp_cd_type
     = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
   using _Alloc = allocator<_Sp_cd_type>;
   using _Alloc_traits = allocator_traits<_Alloc>;
   _Alloc __a;
   _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
   _Alloc_traits::construct(__a, __mem, __r.release(),
       __r.get_deleter());
   _M_pi = __mem;
 }


      explicit __shared_count(const __weak_count<_Lp>& __r);


      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != 0)
   _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != _M_pi)
   {
     if (__tmp != 0)
       __tmp->_M_add_ref_copy();
     if (_M_pi != 0)
       _M_pi->_M_release();
     _M_pi = __tmp;
   }
 return *this;
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_unique() const noexcept
      { return this->_M_get_use_count() == 1; }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr; }

      bool
      _M_less(const __shared_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __weak_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __shared_count& __a, const __shared_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __weak_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    class __weak_count
    {
    public:
      constexpr __weak_count() noexcept : _M_pi(nullptr)
      { }

      __weak_count(const __shared_count<_Lp>& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(const __weak_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_add_ref();
      }

      __weak_count(__weak_count&& __r) noexcept
      : _M_pi(__r._M_pi)
      { __r._M_pi = nullptr; }

      ~__weak_count() noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
      }

      __weak_count&
      operator=(const __shared_count<_Lp>& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(const __weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 if (__tmp != nullptr)
   __tmp->_M_weak_add_ref();
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __tmp;
 return *this;
      }

      __weak_count&
      operator=(__weak_count&& __r) noexcept
      {
 if (_M_pi != nullptr)
   _M_pi->_M_weak_release();
 _M_pi = __r._M_pi;
        __r._M_pi = nullptr;
 return *this;
      }

      void
      _M_swap(__weak_count& __r) noexcept
      {
 _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 __r._M_pi = _M_pi;
 _M_pi = __tmp;
      }

      long
      _M_get_use_count() const noexcept
      { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }

      bool
      _M_less(const __weak_count& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }

      bool
      _M_less(const __shared_count<_Lp>& __rhs) const noexcept
      { return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi); }


      friend inline bool
      operator==(const __weak_count& __a, const __weak_count& __b) noexcept
      { return __a._M_pi == __b._M_pi; }

    private:
      friend class __shared_count<_Lp>;

      _Sp_counted_base<_Lp>* _M_pi;
    };


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 _M_pi->_M_add_ref_lock();
      else
 __throw_bad_weak_ptr();
    }


  template<_Lock_policy _Lp>
    inline
    __shared_count<_Lp>::
    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t)
    : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
 if (!_M_pi->_M_add_ref_lock_nothrow())
   _M_pi = nullptr;
    }







  template<typename _Yp_ptr, typename _Tp_ptr>
    struct __sp_compatible_with
    : false_type
    { };

  template<typename _Yp, typename _Tp>
    struct __sp_compatible_with<_Yp*, _Tp*>
    : is_convertible<_Yp*, _Tp*>::type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>
    : true_type
    { };

  template<typename _Up, size_t _Nm>
    struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>
    : true_type
    { };


  template<typename _Up, size_t _Nm, typename _Yp, typename = void>
    struct __sp_is_constructible_arrN
    : false_type
    { };

  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>
    : is_convertible<_Yp(*)[_Nm], _Up(*)[_Nm]>::type
    { };


  template<typename _Up, typename _Yp, typename = void>
    struct __sp_is_constructible_arr
    : false_type
    { };

  template<typename _Up, typename _Yp>
    struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>
    : is_convertible<_Yp(*)[], _Up(*)[]>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible;


  template<typename _Up, size_t _Nm, typename _Yp>
    struct __sp_is_constructible<_Up[_Nm], _Yp>
    : __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
    { };


  template<typename _Up, typename _Yp>
    struct __sp_is_constructible<_Up[], _Yp>
    : __sp_is_constructible_arr<_Up, _Yp>::type
    { };


  template<typename _Tp, typename _Yp>
    struct __sp_is_constructible
    : is_convertible<_Yp*, _Tp*>::type
    { };



  template<typename _Tp, _Lock_policy _Lp,
    bool = is_array<_Tp>::value, bool = is_void<_Tp>::value>
    class __shared_ptr_access
    {
    public:
      using element_type = _Tp;

      element_type&
      operator*() const noexcept
      {
 ;
 return *_M_get();
      }

      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, false, true>
    {
    public:
      using element_type = _Tp;

      element_type*
      operator->() const noexcept
      {
 auto __ptr = static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get();
 ;
 return __ptr;
      }
    };


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr_access<_Tp, _Lp, true, false>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;


      [[__deprecated__("shared_ptr<T[]>::operator* is absent from C++17")]]
      element_type&
      operator*() const noexcept
      {
 ;
 return *_M_get();
      }

      [[__deprecated__("shared_ptr<T[]>::operator-> is absent from C++17")]]
      element_type*
      operator->() const noexcept
      {
 ;
 return _M_get();
      }


      element_type&
      operator[](ptrdiff_t __i) const
      {
 ;
 ;
 return _M_get()[__i];
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
    : public __shared_ptr_access<_Tp, _Lp>
    {
    public:
      using element_type = typename remove_extent<_Tp>::type;

    private:

      template<typename _Yp>
 using _SafeConv
   = typename enable_if<__sp_is_constructible<_Tp, _Yp>::value>::type;


      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __shared_ptr&>;


      template<typename _Yp, typename _Del, typename _Res = void,
        typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>
 using _UniqCompatible = typename enable_if<__and_<
   __sp_compatible_with<_Yp*, _Tp*>, is_convertible<_Ptr, element_type*>
   >::value, _Res>::type;


      template<typename _Yp, typename _Del>
 using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;

    public:





      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Yp, typename = _SafeConv<_Yp>>
 explicit
 __shared_ptr(_Yp* __p)
 : _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 {
   static_assert( !is_void<_Yp>::value, "incomplete type" );
   static_assert( sizeof(_Yp) > 0, "incomplete type" );
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _SafeConv<_Yp>>
 __shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))
 {
   static_assert(__is_invocable<_Deleter&, _Yp*&>::value,
       "deleter expression d(p) is well-formed");
   _M_enable_shared_from_this_with(__p);
 }

      template<typename _Deleter>
 __shared_ptr(nullptr_t __p, _Deleter __d)
 : _M_ptr(0), _M_refcount(__p, std::move(__d))
 { }

      template<typename _Deleter, typename _Alloc>
        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))
 { }


      template<typename _Yp>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount(__r._M_refcount)
 { }


      template<typename _Yp>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,
       element_type* __p) noexcept
 : _M_ptr(__p), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = 0;
 }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
 _M_refcount._M_swap(__r._M_refcount);
 __r._M_ptr = 0;
      }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount()
 {
   _M_refcount._M_swap(__r._M_refcount);
   __r._M_ptr = 0;
 }

      template<typename _Yp, typename = _Compatible<_Yp>>
 explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)
 : _M_refcount(__r._M_refcount)
 {


   _M_ptr = __r._M_ptr;
 }


      template<typename _Yp, typename _Del,
        typename = _UniqCompatible<_Yp, _Del>>
 __shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = __to_address(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }


    protected:

      template<typename _Tp1, typename _Del,
        typename enable_if<__and_<
   __not_<is_array<_Tp>>, is_array<_Tp1>,
          is_convertible<typename unique_ptr<_Tp1, _Del>::pointer, _Tp*>
        >::value, bool>::type = true>
 __shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)
 : _M_ptr(__r.get()), _M_refcount()
 {
   auto __raw = __to_address(__r.get());
   _M_refcount = __shared_count<_Lp>(std::move(__r));
   _M_enable_shared_from_this_with(__raw);
 }
    public:



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

      template<typename _Yp, typename = _Compatible<_Yp>>
 __shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop


      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp>
 _Assignable<_Yp>
 operator=(auto_ptr<_Yp>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }
#pragma GCC diagnostic pop


      __shared_ptr&
      operator=(__shared_ptr&& __r) noexcept
      {
 __shared_ptr(std::move(__r)).swap(*this);
 return *this;
      }

      template<class _Yp>
 _Assignable<_Yp>
 operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      template<typename _Yp, typename _Del>
 _UniqAssignable<_Yp, _Del>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   __shared_ptr(std::move(__r)).swap(*this);
   return *this;
 }

      void
      reset() noexcept
      { __shared_ptr().swap(*this); }

      template<typename _Yp>
 _SafeConv<_Yp>
 reset(_Yp* __p)
 {

   ;
   __shared_ptr(__p).swap(*this);
 }

      template<typename _Yp, typename _Deleter>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d)
 { __shared_ptr(__p, std::move(__d)).swap(*this); }

      template<typename _Yp, typename _Deleter, typename _Alloc>
 _SafeConv<_Yp>
 reset(_Yp* __p, _Deleter __d, _Alloc __a)
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }


      element_type*
      get() const noexcept
      { return _M_ptr; }


      explicit operator bool() const
      { return _M_ptr == 0 ? false : true; }


      bool
      unique() const noexcept
      { return _M_refcount._M_unique(); }


      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }


      void
      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
      {
 std::swap(_M_ptr, __other._M_ptr);
 _M_refcount._M_swap(__other._M_refcount);
      }
# 1356 "/usr/include/c++/10/bits/shared_ptr_base.h" 3
      template<typename _Tp1>
 bool
 owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }


    protected:

      template<typename _Alloc, typename... _Args>
 __shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 { _M_enable_shared_from_this_with(_M_ptr); }

      template<typename _Tp1, _Lock_policy _Lp1, typename _Alloc,
        typename... _Args>
 friend __shared_ptr<_Tp1, _Lp1>
 __allocate_shared(const _Alloc& __a, _Args&&... __args);



      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t)
      : _M_refcount(__r._M_refcount, std::nothrow)
      {
 _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
      }

      friend class __weak_ptr<_Tp, _Lp>;

    private:

      template<typename _Yp>
 using __esft_base_t = decltype(__enable_shared_from_this_base(
       std::declval<const __shared_count<_Lp>&>(),
       std::declval<_Yp*>()));


      template<typename _Yp, typename = void>
 struct __has_esft_base
 : false_type { };

      template<typename _Yp>
 struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>
 : __not_<is_array<_Tp>> { };

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp* __p) noexcept
 {
   if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
     __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
 }

      template<typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
 typename enable_if<!__has_esft_base<_Yp2>::value>::type
 _M_enable_shared_from_this_with(_Yp*) noexcept
 { }

      void*
      _M_get_deleter(const std::type_info& __ti) const noexcept
      { return _M_refcount._M_get_deleter(__ti); }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;

      template<typename _Del, typename _Tp1, _Lock_policy _Lp1>
 friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;

      template<typename _Del, typename _Tp1>
 friend _Del* get_deleter(const shared_ptr<_Tp1>&) noexcept;

      element_type* _M_ptr;
      __shared_count<_Lp> _M_refcount;
    };



  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() == __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !__a; }
# 1463 "/usr/include/c++/10/bits/shared_ptr_base.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !__a; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return __a.get() != __b.get(); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return (bool)__a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return (bool)__a; }

  template<typename _Tp, typename _Up, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a,
       const __shared_ptr<_Up, _Lp>& __b) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      using _Up_elt = typename __shared_ptr<_Up, _Lp>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    {
      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp1, _Lp>& __a,
       const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return (__b < __a); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return __a < nullptr; }

  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,
        const __shared_ptr<_Tp2, _Lp>& __b) noexcept
    { return !(__a < __b); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
    { return !(nullptr < __a); }



  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }
# 1573 "/usr/include/c++/10/bits/shared_ptr_base.h" 3
  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }






  template<typename _Tp, typename _Tp1, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
    {
      using _Sp = __shared_ptr<_Tp, _Lp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 1619 "/usr/include/c++/10/bits/shared_ptr_base.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    class __weak_ptr
    {
      template<typename _Yp, typename _Res = void>
 using _Compatible = typename
   enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;


      template<typename _Yp>
 using _Assignable = _Compatible<_Yp, __weak_ptr&>;

    public:
      using element_type = typename remove_extent<_Tp>::type;

      constexpr __weak_ptr() noexcept
      : _M_ptr(nullptr), _M_refcount()
      { }

      __weak_ptr(const __weak_ptr&) noexcept = default;

      ~__weak_ptr() = default;
# 1655 "/usr/include/c++/10/bits/shared_ptr_base.h" 3
      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 : _M_refcount(__r._M_refcount)
        { _M_ptr = __r.lock().get(); }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
 { }

      __weak_ptr(__weak_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
      { __r._M_ptr = nullptr; }

      template<typename _Yp, typename = _Compatible<_Yp>>
 __weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 : _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
        { __r._M_ptr = nullptr; }

      __weak_ptr&
      operator=(const __weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = __r._M_refcount;
   return *this;
 }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
 {
   _M_ptr = __r._M_ptr;
   _M_refcount = __r._M_refcount;
   return *this;
 }

      __weak_ptr&
      operator=(__weak_ptr&& __r) noexcept
      {
 _M_ptr = __r._M_ptr;
 _M_refcount = std::move(__r._M_refcount);
 __r._M_ptr = nullptr;
 return *this;
      }

      template<typename _Yp>
 _Assignable<_Yp>
 operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept
 {
   _M_ptr = __r.lock().get();
   _M_refcount = std::move(__r._M_refcount);
   __r._M_ptr = nullptr;
   return *this;
 }

      __shared_ptr<_Tp, _Lp>
      lock() const noexcept
      { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }

      long
      use_count() const noexcept
      { return _M_refcount._M_get_use_count(); }

      bool
      expired() const noexcept
      { return _M_refcount._M_get_use_count() == 0; }

      template<typename _Tp1>
 bool
 owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      template<typename _Tp1>
 bool
 owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept
 { return _M_refcount._M_less(__rhs._M_refcount); }

      void
      reset() noexcept
      { __weak_ptr().swap(*this); }

      void
      swap(__weak_ptr& __s) noexcept
      {
 std::swap(_M_ptr, __s._M_ptr);
 _M_refcount._M_swap(__s._M_refcount);
      }

    private:

      void
      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
      {
 if (use_count() == 0)
   {
     _M_ptr = __ptr;
     _M_refcount = __refcount;
   }
      }

      template<typename _Tp1, _Lock_policy _Lp1> friend class __shared_ptr;
      template<typename _Tp1, _Lock_policy _Lp1> friend class __weak_ptr;
      friend class __enable_shared_from_this<_Tp, _Lp>;
      friend class enable_shared_from_this<_Tp>;

      element_type* _M_ptr;
      __weak_count<_Lp> _M_refcount;
    };


  template<typename _Tp, _Lock_policy _Lp>
    inline void
    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept
    { __a.swap(__b); }

  template<typename _Tp, typename _Tp1>
    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }

      bool
      operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept
      { return __lhs.owner_before(__rhs); }
    };

  template<>
    struct _Sp_owner_less<void, void>
    {
      template<typename _Tp, typename _Up>
 auto
 operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept
 -> decltype(__lhs.owner_before(__rhs))
 { return __lhs.owner_before(__rhs); }

      using is_transparent = void;
    };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__shared_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
    { };

  template<typename _Tp, _Lock_policy _Lp>
    struct owner_less<__weak_ptr<_Tp, _Lp>>
    : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
    { };


  template<typename _Tp, _Lock_policy _Lp>
    class __enable_shared_from_this
    {
    protected:
      constexpr __enable_shared_from_this() noexcept { }

      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }

      __enable_shared_from_this&
      operator=(const __enable_shared_from_this&) noexcept
      { return *this; }

      ~__enable_shared_from_this() { }

    public:
      __shared_ptr<_Tp, _Lp>
      shared_from_this()
      { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }

      __shared_ptr<const _Tp, _Lp>
      shared_from_this() const
      { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }


      __weak_ptr<_Tp, _Lp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      __weak_ptr<const _Tp, _Lp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }


    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }

      friend const __enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<_Lp>&,
         const __enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
    };

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,
    typename _Alloc, typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return __shared_ptr<_Tp, _Lp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }

  template<typename _Tp, _Lock_policy _Lp = __default_lock_policy,
    typename... _Args>
    inline __shared_ptr<_Tp, _Lp>
    __make_shared(_Args&&... __args)
    {
      typedef typename std::remove_const<_Tp>::type _Tp_nc;
      return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp, _Lock_policy _Lp>
    struct hash<__shared_ptr<_Tp, _Lp>>
    : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
    {
      size_t
      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
      {
 return hash<typename __shared_ptr<_Tp, _Lp>::element_type*>()(
     __s.get());
      }
    };


}
# 53 "/usr/include/c++/10/bits/shared_ptr.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 67 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
    inline std::basic_ostream<_Ch, _Tr>&
    operator<<(std::basic_ostream<_Ch, _Tr>& __os,
        const __shared_ptr<_Tp, _Lp>& __p)
    {
      __os << __p.get();
      return __os;
    }

  template<typename _Del, typename _Tp, _Lock_policy _Lp>
    inline _Del*
    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
    {



      return 0;

    }





  template<typename _Del, typename _Tp>
    inline _Del*
    get_deleter(const shared_ptr<_Tp>& __p) noexcept
    {



      return 0;

    }
# 120 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
    {
      template<typename... _Args>
 using _Constructible = typename enable_if<
   is_constructible<__shared_ptr<_Tp>, _Args...>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__shared_ptr<_Tp>&, _Arg>::value, shared_ptr&
 >::type;

    public:


      using element_type = typename __shared_ptr<_Tp>::element_type;
# 147 "/usr/include/c++/10/bits/shared_ptr.h" 3
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;







      template<typename _Yp, typename = _Constructible<_Yp*>>
 explicit
 shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }
# 174 "/usr/include/c++/10/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter,
        typename = _Constructible<_Yp*, _Deleter>>
 shared_ptr(_Yp* __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 192 "/usr/include/c++/10/bits/shared_ptr.h" 3
      template<typename _Deleter>
 shared_ptr(nullptr_t __p, _Deleter __d)
        : __shared_ptr<_Tp>(__p, std::move(__d)) { }
# 211 "/usr/include/c++/10/bits/shared_ptr.h" 3
      template<typename _Yp, typename _Deleter, typename _Alloc,
        typename = _Constructible<_Yp*, _Deleter, _Alloc>>
 shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 231 "/usr/include/c++/10/bits/shared_ptr.h" 3
      template<typename _Deleter, typename _Alloc>
 shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)
 : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a)) { }
# 255 "/usr/include/c++/10/bits/shared_ptr.h" 3
      template<typename _Yp>
 shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept
 : __shared_ptr<_Tp>(__r, __p) { }
# 293 "/usr/include/c++/10/bits/shared_ptr.h" 3
      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 shared_ptr(const shared_ptr<_Yp>& __r) noexcept
        : __shared_ptr<_Tp>(__r) { }






      shared_ptr(shared_ptr&& __r) noexcept
      : __shared_ptr<_Tp>(std::move(__r)) { }






      template<typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
 shared_ptr(shared_ptr<_Yp>&& __r) noexcept
 : __shared_ptr<_Tp>(std::move(__r)) { }
# 323 "/usr/include/c++/10/bits/shared_ptr.h" 3
      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 explicit shared_ptr(const weak_ptr<_Yp>& __r)
 : __shared_ptr<_Tp>(__r) { }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp, typename = _Constructible<auto_ptr<_Yp>>>
 shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop




      template<typename _Yp, typename _Del,
        typename = _Constructible<unique_ptr<_Yp, _Del>>>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r)) { }





      template<typename _Yp, typename _Del,
  _Constructible<unique_ptr<_Yp, _Del>, __sp_array_delete>* = 0>
 shared_ptr(unique_ptr<_Yp, _Del>&& __r)
 : __shared_ptr<_Tp>(std::move(__r), __sp_array_delete()) { }






      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(__r);
   return *this;
 }


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
      template<typename _Yp>
 _Assignable<auto_ptr<_Yp>>
 operator=(auto_ptr<_Yp>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }
#pragma GCC diagnostic pop


      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
 this->__shared_ptr<_Tp>::operator=(std::move(__r));
 return *this;
      }

      template<class _Yp>
 _Assignable<shared_ptr<_Yp>>
 operator=(shared_ptr<_Yp>&& __r) noexcept
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      template<typename _Yp, typename _Del>
 _Assignable<unique_ptr<_Yp, _Del>>
 operator=(unique_ptr<_Yp, _Del>&& __r)
 {
   this->__shared_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

    private:

      template<typename _Alloc, typename... _Args>
 shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
 : __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
 { }

      template<typename _Yp, typename _Alloc, typename... _Args>
 friend shared_ptr<_Yp>
 allocate_shared(const _Alloc& __a, _Args&&... __args);


      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t)
      : __shared_ptr<_Tp>(__r, std::nothrow) { }

      friend class weak_ptr<_Tp>;
    };
# 434 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Up>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() == __b.get(); }


  template<typename _Tp>
    inline bool
    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !__a; }
# 461 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Tp>
    inline bool
    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !__a; }


  template<typename _Tp, typename _Up>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return __a.get() != __b.get(); }


  template<typename _Tp>
    inline bool
    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return (bool)__a; }


  template<typename _Tp>
    inline bool
    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return (bool)__a; }


  template<typename _Tp, typename _Up>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      using _Up_elt = typename shared_ptr<_Up>::element_type;
      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
      return less<_Vp>()(__a.get(), __b.get());
    }


  template<typename _Tp>
    inline bool
    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(__a.get(), nullptr);
    }


  template<typename _Tp>
    inline bool
    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    {
      using _Tp_elt = typename shared_ptr<_Tp>::element_type;
      return less<_Tp_elt*>()(nullptr, __a.get());
    }


  template<typename _Tp, typename _Up>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__b < __a); }


  template<typename _Tp>
    inline bool
    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(nullptr < __a); }


  template<typename _Tp>
    inline bool
    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(__a < nullptr); }


  template<typename _Tp, typename _Up>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return (__b < __a); }


  template<typename _Tp>
    inline bool
    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return nullptr < __a; }


  template<typename _Tp>
    inline bool
    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return __a < nullptr; }


  template<typename _Tp, typename _Up>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
    { return !(__a < __b); }


  template<typename _Tp>
    inline bool
    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
    { return !(__a < nullptr); }


  template<typename _Tp>
    inline bool
    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
    { return !(nullptr < __a); }





  template<typename _Tp>
    inline void
    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }




  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    static_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
    }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    const_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
    }


  template<typename _Tp, typename _Up>
    inline shared_ptr<_Tp>
    dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept
    {
      using _Sp = shared_ptr<_Tp>;
      if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
 return _Sp(__r, __p);
      return _Sp();
    }
# 684 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Tp>
    class weak_ptr : public __weak_ptr<_Tp>
    {
      template<typename _Arg>
 using _Constructible = typename enable_if<
   is_constructible<__weak_ptr<_Tp>, _Arg>::value
 >::type;

      template<typename _Arg>
 using _Assignable = typename enable_if<
   is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&
 >::type;

    public:
      constexpr weak_ptr() noexcept = default;

      template<typename _Yp,
        typename = _Constructible<const shared_ptr<_Yp>&>>
 weak_ptr(const shared_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(const weak_ptr&) noexcept = default;

      template<typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
 weak_ptr(const weak_ptr<_Yp>& __r) noexcept
 : __weak_ptr<_Tp>(__r) { }

      weak_ptr(weak_ptr&&) noexcept = default;

      template<typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
 weak_ptr(weak_ptr<_Yp>&& __r) noexcept
 : __weak_ptr<_Tp>(std::move(__r)) { }

      weak_ptr&
      operator=(const weak_ptr& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<const weak_ptr<_Yp>&>
 operator=(const weak_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      template<typename _Yp>
 _Assignable<const shared_ptr<_Yp>&>
 operator=(const shared_ptr<_Yp>& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(__r);
   return *this;
 }

      weak_ptr&
      operator=(weak_ptr&& __r) noexcept = default;

      template<typename _Yp>
 _Assignable<weak_ptr<_Yp>>
 operator=(weak_ptr<_Yp>&& __r) noexcept
 {
   this->__weak_ptr<_Tp>::operator=(std::move(__r));
   return *this;
 }

      shared_ptr<_Tp>
      lock() const noexcept
      { return shared_ptr<_Tp>(*this, std::nothrow); }
    };
# 760 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Tp>
    inline void
    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept
    { __a.swap(__b); }



  template<typename _Tp = void>
    struct owner_less;


  template<>
    struct owner_less<void> : _Sp_owner_less<void, void>
    { };


  template<typename _Tp>
    struct owner_less<shared_ptr<_Tp>>
    : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
    { };


  template<typename _Tp>
    struct owner_less<weak_ptr<_Tp>>
    : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
    { };




  template<typename _Tp>
    class enable_shared_from_this
    {
    protected:
      constexpr enable_shared_from_this() noexcept { }

      enable_shared_from_this(const enable_shared_from_this&) noexcept { }

      enable_shared_from_this&
      operator=(const enable_shared_from_this&) noexcept
      { return *this; }

      ~enable_shared_from_this() { }

    public:
      shared_ptr<_Tp>
      shared_from_this()
      { return shared_ptr<_Tp>(this->_M_weak_this); }

      shared_ptr<const _Tp>
      shared_from_this() const
      { return shared_ptr<const _Tp>(this->_M_weak_this); }



      weak_ptr<_Tp>
      weak_from_this() noexcept
      { return this->_M_weak_this; }

      weak_ptr<const _Tp>
      weak_from_this() const noexcept
      { return this->_M_weak_this; }


    private:
      template<typename _Tp1>
 void
 _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
 { _M_weak_this._M_assign(__p, __n); }


      friend const enable_shared_from_this*
      __enable_shared_from_this_base(const __shared_count<>&,
         const enable_shared_from_this* __p)
      { return __p; }

      template<typename, _Lock_policy>
 friend class __shared_ptr;

      mutable weak_ptr<_Tp> _M_weak_this;
    };
# 855 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Tp, typename _Alloc, typename... _Args>
    inline shared_ptr<_Tp>
    allocate_shared(const _Alloc& __a, _Args&&... __args)
    {
      return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a},
        std::forward<_Args>(__args)...);
    }
# 870 "/usr/include/c++/10/bits/shared_ptr.h" 3
  template<typename _Tp, typename... _Args>
    inline shared_ptr<_Tp>
    make_shared(_Args&&... __args)
    {
      typedef typename std::remove_cv<_Tp>::type _Tp_nc;
      return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(),
           std::forward<_Args>(__args)...);
    }


  template<typename _Tp>
    struct hash<shared_ptr<_Tp>>
    : public __hash_base<size_t, shared_ptr<_Tp>>
    {
      size_t
      operator()(const shared_ptr<_Tp>& __s) const noexcept
      {
 return std::hash<typename shared_ptr<_Tp>::element_type*>()(__s.get());
      }
    };
# 915 "/usr/include/c++/10/bits/shared_ptr.h" 3

}
# 85 "/usr/include/c++/10/memory" 2 3
# 1 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 1 3
# 33 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 3
# 1 "/usr/include/c++/10/bits/atomic_base.h" 1 3
# 33 "/usr/include/c++/10/bits/atomic_base.h" 3
       
# 34 "/usr/include/c++/10/bits/atomic_base.h" 3



# 1 "/usr/include/c++/10/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/include/c++/10/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/include/c++/10/bits/atomic_lockfree_defines.h" 3
# 38 "/usr/include/c++/10/bits/atomic_base.h" 2 3






namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/10/bits/atomic_base.h" 3
  typedef enum memory_order
    {
      memory_order_relaxed,
      memory_order_consume,
      memory_order_acquire,
      memory_order_release,
      memory_order_acq_rel,
      memory_order_seq_cst
    } memory_order;


  enum __memory_order_modifier
    {
      __memory_order_mask = 0x0ffff,
      __memory_order_modifier_mask = 0xffff0000,
      __memory_order_hle_acquire = 0x10000,
      __memory_order_hle_release = 0x20000
    };

  constexpr memory_order
  operator|(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(int(__m) | int(__mod));
  }

  constexpr memory_order
  operator&(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(int(__m) & int(__mod));
  }


  constexpr memory_order
  __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
      : __m == memory_order_release ? memory_order_relaxed : __m;
  }

  constexpr memory_order
  __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask)
      | __memory_order_modifier(__m & __memory_order_modifier_mask));
  }

  inline __attribute__((__always_inline__)) void
  atomic_thread_fence(memory_order __m) noexcept
  { __atomic_thread_fence(int(__m)); }

  inline __attribute__((__always_inline__)) void
  atomic_signal_fence(memory_order __m) noexcept
  { __atomic_signal_fence(int(__m)); }


  template<typename _Tp>
    inline _Tp
    kill_dependency(_Tp __y) noexcept
    {
      _Tp __ret(__y);
      return __ret;
    }



  template<typename _IntTp>
    struct __atomic_base;
# 151 "/usr/include/c++/10/bits/atomic_base.h" 3
  template<typename _Tp>
    struct atomic;

  template<typename _Tp>
    struct atomic<_Tp*>;



    typedef bool __atomic_flag_data_type;
# 174 "/usr/include/c++/10/bits/atomic_base.h" 3
  extern "C" {

  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i ;
  };

  }




  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;


    constexpr atomic_flag(bool __i) noexcept
      : __atomic_flag_base{ _S_init(__i) }
    { }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set (&_M_i, int(__m));
    }

    inline __attribute__((__always_inline__)) bool
    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set (&_M_i, int(__m));
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, int(__m));
    }

    inline __attribute__((__always_inline__)) void
    clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;

      __atomic_clear (&_M_i, int(__m));
    }

  private:
    static constexpr __atomic_flag_data_type
    _S_init(bool __i)
    { return __i ? 1 : 0; }
  };
# 264 "/usr/include/c++/10/bits/atomic_base.h" 3
  template<typename _ITp>
    struct __atomic_base
    {
      using value_type = _ITp;
      using difference_type = value_type;

    private:
      typedef _ITp __int_type;

      static constexpr int _S_alignment =
 sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);

      alignas(_S_alignment) __int_type _M_i ;

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }

      operator __int_type() const noexcept
      { return load(); }

      operator __int_type() const volatile noexcept
      { return load(); }

      __int_type
      operator=(__int_type __i) noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator=(__int_type __i) volatile noexcept
      {
 store(__i);
 return __i;
      }

      __int_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __int_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __int_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __int_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __int_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) noexcept
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator+=(__int_type __i) volatile noexcept
      { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator-=(__int_type __i) noexcept
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator-=(__int_type __i) volatile noexcept
      { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator&=(__int_type __i) noexcept
      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator&=(__int_type __i) volatile noexcept
      { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator|=(__int_type __i) noexcept
      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator|=(__int_type __i) volatile noexcept
      { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator^=(__int_type __i) noexcept
      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      __int_type
      operator^=(__int_type __i) volatile noexcept
      { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_i),
     reinterpret_cast<void *>(-_S_alignment));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) void
      store(__int_type __i,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_i, int(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, int(__m));
      }


      inline __attribute__((__always_inline__)) __int_type
      exchange(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_i, __i, int(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m1,
       memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
       memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_weak(__int_type& __i1, __int_type __i2,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_weak(__i1, __i2, __m,
         __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1, memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
         memory_order __m = memory_order_seq_cst) noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__int_type& __i1, __int_type __i2,
   memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return compare_exchange_strong(__i1, __i2, __m,
           __cmpexch_failure_order(__m));
      }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_add(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_sub(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_and(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_and(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_and(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_or(__int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_or(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_xor(&_M_i, __i, int(__m)); }

      inline __attribute__((__always_inline__)) __int_type
      fetch_xor(__int_type __i,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_xor(&_M_i, __i, int(__m)); }
    };



  template<typename _PTp>
    struct __atomic_base<_PTp*>
    {
    private:
      typedef _PTp* __pointer_type;

      __pointer_type _M_p ;


      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }

      constexpr ptrdiff_t
      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }

    public:
      __atomic_base() noexcept = default;
      ~__atomic_base() noexcept = default;
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;


      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }

      operator __pointer_type() const noexcept
      { return load(); }

      operator __pointer_type() const volatile noexcept
      { return load(); }

      __pointer_type
      operator=(__pointer_type __p) noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator=(__pointer_type __p) volatile noexcept
      {
 store(__p);
 return __p;
      }

      __pointer_type
      operator++(int) noexcept
      { return fetch_add(1); }

      __pointer_type
      operator++(int) volatile noexcept
      { return fetch_add(1); }

      __pointer_type
      operator--(int) noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator--(int) volatile noexcept
      { return fetch_sub(1); }

      __pointer_type
      operator++() noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator++() volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator--() noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator--() volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(1),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator+=(ptrdiff_t __d) noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator+=(ptrdiff_t __d) volatile noexcept
      { return __atomic_add_fetch(&_M_p, _M_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator-=(ptrdiff_t __d) noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      int(memory_order_seq_cst)); }

      __pointer_type
      operator-=(ptrdiff_t __d) volatile noexcept
      { return __atomic_sub_fetch(&_M_p, _M_type_size(__d),
      int(memory_order_seq_cst)); }

      bool
      is_lock_free() const noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      bool
      is_lock_free() const volatile noexcept
      {

 return __atomic_is_lock_free(sizeof(_M_p),
     reinterpret_cast<void *>(-__alignof(_M_p)));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) noexcept
      {
        memory_order __b = __m & __memory_order_mask;

 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) void
      store(__pointer_type __p,
     memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;
 ;

 __atomic_store_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      load(memory_order __m = memory_order_seq_cst) const volatile noexcept
      {
 memory_order __b = __m & __memory_order_mask;
 ;
 ;

 return __atomic_load_n(&_M_p, int(__m));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, int(__m));
      }


      inline __attribute__((__always_inline__)) __pointer_type
      exchange(__pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
      {
 return __atomic_exchange_n(&_M_p, __p, int(__m));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;
 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) bool
      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,
         memory_order __m1,
         memory_order __m2) volatile noexcept
      {
 memory_order __b2 = __m2 & __memory_order_mask;
 memory_order __b1 = __m1 & __memory_order_mask;

 ;
 ;
 ;

 return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0,
        int(__m1), int(__m2));
      }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_add(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_add(&_M_p, _M_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), int(__m)); }

      inline __attribute__((__always_inline__)) __pointer_type
      fetch_sub(ptrdiff_t __d,
  memory_order __m = memory_order_seq_cst) volatile noexcept
      { return __atomic_fetch_sub(&_M_p, _M_type_size(__d), int(__m)); }
    };
# 1700 "/usr/include/c++/10/bits/atomic_base.h" 3

}
# 34 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 3
  struct _Sp_locker
  {
    _Sp_locker(const _Sp_locker&) = delete;
    _Sp_locker& operator=(const _Sp_locker&) = delete;


    explicit
    _Sp_locker(const void*) noexcept;
    _Sp_locker(const void*, const void*) noexcept;
    ~_Sp_locker();

  private:
    unsigned char _M_key1;
    unsigned char _M_key2;



  };
# 74 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 3
  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>* __p)
    {

      return __gthread_active_p() == 0;



    }

  template<typename _Tp>
    inline bool
    atomic_is_lock_free(const shared_ptr<_Tp>* __p)
    { return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p); }
# 101 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_load(const shared_ptr<_Tp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)
    {
      _Sp_locker __lock{__p};
      return *__p;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)
    { return std::atomic_load_explicit(__p, memory_order_seq_cst); }
# 137 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline void
    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp>
    inline void
    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp> __r,
     memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline void
    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    { std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst); }
# 174 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp>
    inline shared_ptr<_Tp>
    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,
        __shared_ptr<_Tp, _Lp> __r,
        memory_order)
    {
      _Sp_locker __lock{__p};
      __p->swap(__r);
      return __r;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline __shared_ptr<_Tp, _Lp>
    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)
    {
      return std::atomic_exchange_explicit(__p, std::move(__r),
        memory_order_seq_cst);
    }
# 223 "/usr/include/c++/10/bits/shared_ptr_atomic.h" 3
  template<typename _Tp>
    bool
    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,
         shared_ptr<_Tp>* __v,
         shared_ptr<_Tp> __w,
         memory_order,
         memory_order)
    {
      shared_ptr<_Tp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<shared_ptr<_Tp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,
       shared_ptr<_Tp>* __v,
       shared_ptr<_Tp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp>
    inline bool
    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
     shared_ptr<_Tp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    bool
    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,
         __shared_ptr<_Tp, _Lp>* __v,
         __shared_ptr<_Tp, _Lp> __w,
         memory_order,
         memory_order)
    {
      __shared_ptr<_Tp, _Lp> __x;
      _Sp_locker __lock{__p, __v};
      owner_less<__shared_ptr<_Tp, _Lp>> __less;
      if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
 {
   __x = std::move(*__p);
   *__p = std::move(__w);
   return true;
 }
      __x = std::move(*__v);
      *__v = *__p;
      return false;
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,
       __shared_ptr<_Tp, _Lp>* __v,
       __shared_ptr<_Tp, _Lp> __w,
       memory_order __success,
       memory_order __failure)
    {
      return std::atomic_compare_exchange_strong_explicit(__p, __v,
   std::move(__w), __success, __failure);
    }

  template<typename _Tp, _Lock_policy _Lp>
    inline bool
    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,
     __shared_ptr<_Tp, _Lp>* __v,
     __shared_ptr<_Tp, _Lp> __w)
    {
      return std::atomic_compare_exchange_weak_explicit(__p, __v,
   std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
    }






}
# 86 "/usr/include/c++/10/memory" 2 3

# 1 "/usr/include/c++/10/backward/auto_ptr.h" 1 3
# 36 "/usr/include/c++/10/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/10/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } __attribute__ ((__deprecated__));

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 88 "/usr/include/c++/10/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 114 "/usr/include/c++/10/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 126 "/usr/include/c++/10/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 137 "/usr/include/c++/10/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 154 "/usr/include/c++/10/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 172 "/usr/include/c++/10/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 182 "/usr/include/c++/10/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 ;
 return _M_ptr;
      }
# 212 "/usr/include/c++/10/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 226 "/usr/include/c++/10/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 241 "/usr/include/c++/10/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 266 "/usr/include/c++/10/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } __attribute__ ((__deprecated__));



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } __attribute__ ((__deprecated__));


  template<_Lock_policy _Lp>
  template<typename _Tp>
    inline
    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)
    : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
    { __r.release(); }

  template<typename _Tp, _Lock_policy _Lp>
  template<typename _Tp1, typename>
    inline
    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : _M_ptr(__r.get()), _M_refcount()
    {
     
      static_assert( sizeof(_Tp1) > 0, "incomplete type" );
      _Tp1* __tmp = __r.get();
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      _M_enable_shared_from_this_with(__tmp);
    }

  template<typename _Tp>
  template<typename _Tp1, typename>
    inline
    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)
    : __shared_ptr<_Tp>(std::move(__r)) { }

  template<typename _Tp, typename _Dp>
  template<typename _Up, typename>
    inline
    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept
    : _M_t(__u.release(), deleter_type()) { }


#pragma GCC diagnostic pop


}
# 88 "/usr/include/c++/10/memory" 2 3






# 1 "/usr/include/c++/10/cstdint" 1 3
# 32 "/usr/include/c++/10/cstdint" 3
       
# 33 "/usr/include/c++/10/cstdint" 3
# 44 "/usr/include/c++/10/cstdint" 3
namespace std
{

  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;





}
# 95 "/usr/include/c++/10/memory" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 122 "/usr/include/c++/10/memory" 3
inline void*
align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept
{

  const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);






  const auto __aligned = (__intptr - 1u + __align) & -__align;
  const auto __diff = __aligned - __intptr;
  if ((__size + __diff) > __space)
    return nullptr;
  else
    {
      __space -= __diff;
      return __ptr = reinterpret_cast<void*>(__aligned);
    }
}
# 158 "/usr/include/c++/10/memory" 3
enum class pointer_safety { relaxed, preferred, strict };


inline void
declare_reachable(void*) { }


template <typename _Tp>
  inline _Tp*
  undeclare_reachable(_Tp* __p) { return __p; }


inline void
declare_no_pointers(char*, size_t) { }


inline void
undeclare_no_pointers(char*, size_t) { }


inline pointer_safety
get_pointer_safety() noexcept { return pointer_safety::relaxed; }
# 400 "/usr/include/c++/10/memory" 3

}
# 79 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/unique-ptr.h" 2



# 81 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/unique-ptr.h"
namespace gnu
{





template<typename T> using unique_ptr = std::unique_ptr<T>;


using std::move;
# 356 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/unique-ptr.h"
template <typename T>
struct xmalloc_deleter
{
  void operator() (T *ptr) const { free (ptr); }
};


template <typename T>
struct xmalloc_deleter<T[]>
{
  void operator() (T *ptr) const { free (ptr); }
};






template<typename T> using unique_xmalloc_ptr
  = std::unique_ptr<T, xmalloc_deleter<T>>;
# 403 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/unique-ptr.h"
}
# 732 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2
# 763 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
extern void fancy_abort (const char *, int, const char *)
      __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
# 894 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        




        






        




        


        
# 963 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        






        
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        
# 1073 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        


        



        
# 1091 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        






       
# 1107 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
        



       
# 1224 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h" 1
# 77 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
typedef long __gcc_host_wide_int__;
# 141 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline unsigned long
least_bit_hwi (unsigned long x)
{
  return (x & -x);
}



static inline bool
pow2_or_zerop (unsigned long x)
{
  return least_bit_hwi (x) == x;
}



static inline bool
pow2p_hwi (unsigned long x)
{
  return x && pow2_or_zerop (x);
}
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
static inline int
clz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_clzl (x);





}

static inline int
ctz_hwi (unsigned long x)
{
  if (x == 0)
    return 64;

  return __builtin_ctzl (x);





}

static inline int
ffs_hwi (unsigned long x)
{

  return __builtin_ffsl (x);





}

static inline int
popcount_hwi (unsigned long x)
{

  return __builtin_popcountl (x);





}

static inline int
floor_log2 (unsigned long x)
{
  return 64 - 1 - clz_hwi (x);
}

static inline int
ceil_log2 (unsigned long x)
{
  return x == 0 ? 0 : floor_log2 (x - 1) + 1;
}

static inline int
exact_log2 (unsigned long x)
{
  return pow2p_hwi (x) ? ctz_hwi (x) : -1;
}







extern long abs_hwi (long);
extern unsigned long absu_hwi (long);
extern long gcd (long, long);
extern long pos_mul_hwi (long, long);
extern long mul_hwi (long, long);
extern long least_common_multiple (long, long);



static inline int
ctz_or_zero (unsigned long x)
{
  return ffs_hwi (x) - 1;
}



static inline long
sext_hwi (long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else

    {






      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 291, __FUNCTION__), 0 : 0));
      int shift = 64 - prec;
      return ((long) ((unsigned long) src << shift)) >> shift;
    }
# 304 "/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h"
}


static inline unsigned long
zext_hwi (unsigned long src, unsigned int prec)
{
  if (prec == 64)
    return src;
  else
    {
      ((void)(!(prec < 64) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 314, __FUNCTION__), 0 : 0));
      return src & ((1UL << prec) - 1);
    }
}



inline long
abs_hwi (long x)
{
  ((void)(!(x != (long) (1UL << (64 - 1))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hwint.h", 324, __FUNCTION__), 0 : 0));
  return x >= 0 ? x : -x;
}



inline unsigned long
absu_hwi (long x)
{
  return x >= 0 ? (unsigned long)x : -(unsigned long)x;
}
# 1225 "/home/giulianob/gcc_git_gnu/gcc/gcc/system.h" 2

typedef int sort_r_cmp_fn (const void *, const void *, void *);
void qsort_chk (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_sort_r (void *, size_t, size_t, sort_r_cmp_fn *, void *);
void gcc_qsort (void *, size_t, size_t, int (*)(const void *, const void *));
void gcc_stablesort (void *, size_t, size_t,
       int (*)(const void *, const void *));
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 1
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int64_t gcov_type;
typedef uint64_t gcov_type_unsigned;

struct bitmap_obstack;
class bitmap_head;
typedef class bitmap_head *bitmap;
typedef const class bitmap_head *const_bitmap;
struct simple_bitmap_def;
typedef struct simple_bitmap_def *sbitmap;
typedef const struct simple_bitmap_def *const_sbitmap;
struct rtx_def;
typedef struct rtx_def *rtx;
typedef const struct rtx_def *const_rtx;
class scalar_mode;
class scalar_int_mode;
class scalar_float_mode;
class complex_mode;
class fixed_size_mode;
template<typename> class opt_mode;
typedef opt_mode<scalar_mode> opt_scalar_mode;
typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;
typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;
template<typename> struct pod_mode;
typedef pod_mode<scalar_mode> scalar_mode_pod;
typedef pod_mode<scalar_int_mode> scalar_int_mode_pod;
typedef pod_mode<fixed_size_mode> fixed_size_mode_pod;




struct rtx_def;
  struct rtx_expr_list;
  struct rtx_insn_list;
  struct rtx_sequence;
  struct rtx_insn;
    struct rtx_debug_insn;
    struct rtx_nonjump_insn;
    struct rtx_jump_insn;
    struct rtx_call_insn;
    struct rtx_jump_table_data;
    struct rtx_barrier;
    struct rtx_code_label;
    struct rtx_note;

struct rtvec_def;
typedef struct rtvec_def *rtvec;
typedef const struct rtvec_def *const_rtvec;
struct hwivec_def;
typedef struct hwivec_def *hwivec;
typedef const struct hwivec_def *const_hwivec;
union tree_node;
typedef union tree_node *tree;
typedef const union tree_node *const_tree;
struct gimple;
typedef gimple *gimple_seq;
struct gimple_stmt_iterator;




struct gcond;
struct gdebug;
struct ggoto;
struct glabel;
struct gswitch;
struct gassign;
struct gasm;
struct gcall;
struct gtransaction;
struct greturn;
struct gbind;
struct gcatch;
struct geh_filter;
struct geh_mnt;
struct geh_else;
struct gresx;
struct geh_dispatch;
struct gphi;
struct gtry;
struct gomp_atomic_load;
struct gomp_atomic_store;
struct gomp_continue;
struct gomp_critical;
struct gomp_ordered;
struct gomp_for;
struct gomp_parallel;
struct gomp_task;
struct gomp_sections;
struct gomp_single;
struct gomp_target;
struct gomp_teams;




struct symtab_node;
  struct cgraph_node;
  struct varpool_node;
struct cgraph_edge;

union section;
typedef union section section;
struct gcc_options;
struct cl_target_option;
struct cl_optimization;
struct cl_option;
struct cl_decoded_option;
struct cl_option_handlers;
struct diagnostic_context;
class pretty_printer;
class diagnostic_event_id_t;

template<typename T> struct array_traits;



template<typename T, typename Traits = array_traits<T>,
  bool has_constant_size = Traits::has_constant_size>
class bitmap_view;


typedef unsigned char addr_space_t;






enum ir_type {
  IR_GIMPLE,
  IR_RTL_CFGRTL,
  IR_RTL_CFGLAYOUT
};






struct cpp_reader;
struct cpp_token;




enum tls_model {
  TLS_MODEL_NONE,
  TLS_MODEL_EMULATED,
  TLS_MODEL_REAL,
  TLS_MODEL_GLOBAL_DYNAMIC = TLS_MODEL_REAL,
  TLS_MODEL_LOCAL_DYNAMIC,
  TLS_MODEL_INITIAL_EXEC,
  TLS_MODEL_LOCAL_EXEC
};


enum offload_abi {
  OFFLOAD_ABI_UNSET,
  OFFLOAD_ABI_LP64,
  OFFLOAD_ABI_ILP32
};


enum profile_update {
  PROFILE_UPDATE_SINGLE,
  PROFILE_UPDATE_ATOMIC,
  PROFILE_UPDATE_PREFER_ATOMIC
};


enum profile_reproducibility {
    PROFILE_REPRODUCIBILITY_SERIAL,
    PROFILE_REPRODUCIBILITY_PARALLEL_RUNS,
    PROFILE_REPRODUCIBILITY_MULTITHREADED
};



enum unwind_info_type
{
  UI_NONE,
  UI_SJLJ,
  UI_DWARF2,
  UI_TARGET,
  UI_SEH
};


enum node_frequency {


  NODE_FREQUENCY_UNLIKELY_EXECUTED,


  NODE_FREQUENCY_EXECUTED_ONCE,

  NODE_FREQUENCY_NORMAL,


  NODE_FREQUENCY_HOT
};


enum optimization_type {

  OPTIMIZE_FOR_SPEED,


  OPTIMIZE_FOR_BOTH,


  OPTIMIZE_FOR_SIZE
};


enum pad_direction {

  PAD_NONE,




  PAD_UPWARD,




  PAD_DOWNWARD
};




enum var_init_status
{
  VAR_INIT_STATUS_UNKNOWN,
  VAR_INIT_STATUS_UNINITIALIZED,
  VAR_INIT_STATUS_INITIALIZED
};



enum warn_strict_overflow_code
{



  WARN_STRICT_OVERFLOW_ALL = 1,




  WARN_STRICT_OVERFLOW_CONDITIONAL = 2,


  WARN_STRICT_OVERFLOW_COMPARISON = 3,


  WARN_STRICT_OVERFLOW_MISC = 4,


  WARN_STRICT_OVERFLOW_MAGNITUDE = 5
};







typedef int alias_set_type;

class edge_def;
typedef class edge_def *edge;
typedef const class edge_def *const_edge;
struct basic_block_def;
typedef struct basic_block_def *basic_block;
typedef const struct basic_block_def *const_basic_block;
# 343 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
typedef int reg_class_t;

class rtl_opt_pass;

namespace gcc {
  class context;
}

typedef std::pair <tree, tree> tree_pair;
typedef std::pair <const char *, int> string_int_pair;


template <typename ValueType>
struct kv_pair
{
  const char *const name;
  const ValueType value;
};



template<typename T>
struct iterator_range
{
public:
  iterator_range (const T &begin, const T &end)
    : m_begin (begin), m_end (end) {}

  T begin () const { return m_begin; }
  T end () const { return m_end; }

private:
  T m_begin;
  T m_end;
};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
enum function_class {
  function_c94,
  function_c99_misc,
  function_c99_math_complex,
  function_sincos,
  function_c11_misc,
  function_c2x_misc
};



enum symbol_visibility
{
  VISIBILITY_DEFAULT,
  VISIBILITY_PROTECTED,
  VISIBILITY_HIDDEN,
  VISIBILITY_INTERNAL
};



enum flt_eval_method
{
  FLT_EVAL_METHOD_UNPREDICTABLE = -1,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT = 0,
  FLT_EVAL_METHOD_PROMOTE_TO_DOUBLE = 1,
  FLT_EVAL_METHOD_PROMOTE_TO_LONG_DOUBLE = 2,
  FLT_EVAL_METHOD_PROMOTE_TO_FLOAT16 = 16
};

enum excess_precision_type
{
  EXCESS_PRECISION_TYPE_IMPLICIT,
  EXCESS_PRECISION_TYPE_STANDARD,
  EXCESS_PRECISION_TYPE_FAST
};



typedef void (*gt_pointer_operator) (void *, void *);


typedef unsigned char uchar;




# 1 "./insn-modes.h" 1






enum machine_mode
{
  E_VOIDmode,






  E_BLKmode,






  E_CCmode,






  E_CCGCmode,






  E_CCGOCmode,






  E_CCNOmode,






  E_CCGZmode,






  E_CCAmode,






  E_CCCmode,






  E_CCOmode,






  E_CCPmode,






  E_CCSmode,






  E_CCZmode,






  E_CCFPmode,






  E_BImode,






  E_QImode,






  E_HImode,






  E_SImode,






  E_DImode,






  E_TImode,






  E_OImode,






  E_XImode,






  E_P2QImode,






  E_P2HImode,






  E_POImode,






  E_QQmode,






  E_HQmode,






  E_SQmode,






  E_DQmode,






  E_TQmode,






  E_UQQmode,






  E_UHQmode,






  E_USQmode,






  E_UDQmode,






  E_UTQmode,






  E_HAmode,






  E_SAmode,






  E_DAmode,






  E_TAmode,






  E_UHAmode,






  E_USAmode,






  E_UDAmode,






  E_UTAmode,






  E_SFmode,






  E_DFmode,






  E_XFmode,






  E_TFmode,






  E_SDmode,






  E_DDmode,






  E_TDmode,






  E_CQImode,






  E_CP2QImode,






  E_CHImode,






  E_CP2HImode,






  E_CSImode,






  E_CDImode,






  E_CTImode,






  E_CPOImode,






  E_COImode,






  E_CXImode,






  E_SCmode,






  E_DCmode,






  E_XCmode,






  E_TCmode,






  E_V2QImode,






  E_V4QImode,






  E_V2HImode,






  E_V1SImode,






  E_V8QImode,






  E_V4HImode,






  E_V2SImode,






  E_V1DImode,






  E_V12QImode,






  E_V6HImode,






  E_V14QImode,






  E_V16QImode,






  E_V8HImode,






  E_V4SImode,






  E_V2DImode,






  E_V1TImode,






  E_V32QImode,






  E_V16HImode,






  E_V8SImode,






  E_V4DImode,






  E_V2TImode,






  E_V64QImode,






  E_V32HImode,






  E_V16SImode,






  E_V8DImode,






  E_V4TImode,






  E_V128QImode,






  E_V64HImode,






  E_V32SImode,






  E_V16DImode,






  E_V8TImode,






  E_V64SImode,






  E_V2SFmode,






  E_V4SFmode,






  E_V2DFmode,






  E_V8SFmode,






  E_V4DFmode,






  E_V2TFmode,






  E_V16SFmode,






  E_V8DFmode,






  E_V4TFmode,






  E_V32SFmode,






  E_V16DFmode,






  E_V8TFmode,






  E_V64SFmode,






  E_V32DFmode,






  E_V16TFmode,






  MAX_MACHINE_MODE,

  MIN_MODE_RANDOM = E_VOIDmode,
  MAX_MODE_RANDOM = E_BLKmode,

  MIN_MODE_CC = E_CCmode,
  MAX_MODE_CC = E_CCFPmode,

  MIN_MODE_INT = E_QImode,
  MAX_MODE_INT = E_XImode,

  MIN_MODE_PARTIAL_INT = E_P2QImode,
  MAX_MODE_PARTIAL_INT = E_POImode,

  MIN_MODE_FRACT = E_QQmode,
  MAX_MODE_FRACT = E_TQmode,

  MIN_MODE_UFRACT = E_UQQmode,
  MAX_MODE_UFRACT = E_UTQmode,

  MIN_MODE_ACCUM = E_HAmode,
  MAX_MODE_ACCUM = E_TAmode,

  MIN_MODE_UACCUM = E_UHAmode,
  MAX_MODE_UACCUM = E_UTAmode,

  MIN_MODE_FLOAT = E_SFmode,
  MAX_MODE_FLOAT = E_TFmode,

  MIN_MODE_DECIMAL_FLOAT = E_SDmode,
  MAX_MODE_DECIMAL_FLOAT = E_TDmode,

  MIN_MODE_COMPLEX_INT = E_CQImode,
  MAX_MODE_COMPLEX_INT = E_CXImode,

  MIN_MODE_COMPLEX_FLOAT = E_SCmode,
  MAX_MODE_COMPLEX_FLOAT = E_TCmode,

  MIN_MODE_VECTOR_BOOL = E_VOIDmode,
  MAX_MODE_VECTOR_BOOL = E_VOIDmode,

  MIN_MODE_VECTOR_INT = E_V2QImode,
  MAX_MODE_VECTOR_INT = E_V64SImode,

  MIN_MODE_VECTOR_FRACT = E_VOIDmode,
  MAX_MODE_VECTOR_FRACT = E_VOIDmode,

  MIN_MODE_VECTOR_UFRACT = E_VOIDmode,
  MAX_MODE_VECTOR_UFRACT = E_VOIDmode,

  MIN_MODE_VECTOR_ACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_ACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_UACCUM = E_VOIDmode,
  MAX_MODE_VECTOR_UACCUM = E_VOIDmode,

  MIN_MODE_VECTOR_FLOAT = E_V2SFmode,
  MAX_MODE_VECTOR_FLOAT = E_V16TFmode,

  NUM_MACHINE_MODES = MAX_MACHINE_MODE
};
# 450 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/signop.h"
enum signop {
  SIGNED,
  UNSIGNED
};
# 451 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 1
# 314 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T> class generic_wide_int;
template <int N> class fixed_wide_int_storage;
class wide_int_storage;





typedef generic_wide_int <wide_int_storage> wide_int;
typedef generic_wide_int < fixed_wide_int_storage <((64 + 4 + 64 - 1) & ~(64 - 1))> > offset_int;
typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64)> > widest_int;


typedef generic_wide_int < fixed_wide_int_storage <(((160 + 64) / 64) * 64) * 2> > widest2_int;



template <bool SE, bool HDP = true>
class wide_int_ref_storage;

typedef generic_wide_int <wide_int_ref_storage <false> > wide_int_ref;
# 348 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{
# 358 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  enum overflow_type {
    OVF_NONE = 0,
    OVF_UNDERFLOW = -1,
    OVF_OVERFLOW = 1,


    OVF_UNKNOWN = 2
  };


  enum precision_type {



    FLEXIBLE_PRECISION,


    VAR_PRECISION,



    CONST_PRECISION
  };
# 403 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> struct int_traits;




  template <typename T1, typename T2,
     enum precision_type P1 = int_traits <T1>::precision_type,
     enum precision_type P2 = int_traits <T2>::precision_type>
  struct binary_traits;





  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef widest_int result_type;

  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, FLEXIBLE_PRECISION, CONST_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T2>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, FLEXIBLE_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, FLEXIBLE_PRECISION>
  {


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, CONST_PRECISION, CONST_PRECISION>
  {
    static_assert ((int_traits <T1>::precision == int_traits <T2>::precision), "int_traits <T1>::precision == int_traits <T2>::precision");


    typedef generic_wide_int < fixed_wide_int_storage
          <int_traits <T1>::precision> > result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
    typedef result_type signed_shift_result_type;
    typedef bool signed_predicate_result;
  };

  template <typename T1, typename T2>
  struct binary_traits <T1, T2, VAR_PRECISION, VAR_PRECISION>
  {
    typedef wide_int result_type;
    typedef result_type operator_result;
    typedef bool predicate_result;
  };
}


namespace wi
{
  template <typename T>
  unsigned int get_precision (const T &);

  template <typename T1, typename T2>
  unsigned int get_binary_precision (const T1 &, const T2 &);

  template <typename T1, typename T2>
  void copy (T1 &, const T2 &);
# 512 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> bool fits_shwi_p (const T &);
  template <typename T> bool fits_uhwi_p (const T &);
  template <typename T> bool neg_p (const T &, signop = SIGNED);

  template <typename T>
  long sign_mask (const T &);

  template <typename T1, typename T2> bool eq_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ne_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool lt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool lts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ltu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool le_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool les_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool leu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gt_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool gts_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool gtu_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool ge_p (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> bool ges_p (const T1 &, const T2 &);
  template <typename T1, typename T2> bool geu_p (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmp (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  int cmps (const T1 &, const T2 &);

  template <typename T1, typename T2>
  int cmpu (const T1 &, const T2 &);

  template <typename T> typename wi::binary_traits <T, T>::result_type bit_not (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type neg (const T &, overflow_type *);
  template <typename T> typename wi::binary_traits <T, T>::result_type abs (const T &);
  template <typename T> typename wi::binary_traits <T, T>::result_type ext (const T &, unsigned int, signop);
  template <typename T> typename wi::binary_traits <T, T>::result_type sext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type zext (const T &, unsigned int);
  template <typename T> typename wi::binary_traits <T, T>::result_type set_bit (const T &, unsigned int);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type min (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umin (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type max (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smax (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umax (const T1 &, const T2 &);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_and_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_or_not (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type bit_xor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type add (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sub (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul (const T1 &, const T2 &, signop, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umul (const T1 &, const T2 &, overflow_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mul_high (const T1 &, const T2 &, signop);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type sdiv_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type udiv_ceil (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type div_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type divmod_trunc (const T1 &, const T2 &, signop,
    typename wi::binary_traits <T1, T2>::result_type *);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type gcd (const T1 &, const T2 &, signop = UNSIGNED);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_trunc (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type smod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_trunc (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_floor (const T1 &, const T2 &, signop,
        overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type umod_floor (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_ceil (const T1 &, const T2 &, signop,
       overflow_type * = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T2>::result_type mod_round (const T1 &, const T2 &, signop,
        overflow_type * = 0);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop);

  template <typename T1, typename T2>
  bool multiple_of_p (const T1 &, const T2 &, signop,
        typename wi::binary_traits <T1, T2>::result_type *);

  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type arshift (const T1 &, const T2 &);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rshift (const T1 &, const T2 &, signop sgn);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type lrotate (const T1 &, const T2 &, unsigned int = 0);
  template <typename T1, typename T2> typename wi::binary_traits <T1, T1>::result_type rrotate (const T1 &, const T2 &, unsigned int = 0);







  bool only_sign_bit_p (const wide_int_ref &, unsigned int);
  bool only_sign_bit_p (const wide_int_ref &);
  int clz (const wide_int_ref &);
  int clrsb (const wide_int_ref &);
  int ctz (const wide_int_ref &);
  int exact_log2 (const wide_int_ref &);
  int floor_log2 (const wide_int_ref &);
  int ffs (const wide_int_ref &);
  int popcount (const wide_int_ref &);
  int parity (const wide_int_ref &);

  template <typename T>
  unsigned long extract_uhwi (const T &, unsigned int, unsigned int);

  template <typename T>
  unsigned int min_precision (const T &, signop);

  static inline void accumulate_overflow (overflow_type &, overflow_type);
}

namespace wi
{


  class storage_ref
  {
  public:
    storage_ref () {}
    storage_ref (const long *, unsigned int, unsigned int);

    const long *val;
    unsigned int len;
    unsigned int precision;



    unsigned int get_len () const;
    unsigned int get_precision () const;
    const long *get_val () const;
  };
}

inline::wi::storage_ref::storage_ref (const long *val_in,
          unsigned int len_in,
          unsigned int precision_in)
  : val (val_in), len (len_in), precision (precision_in)
{
}

inline unsigned int
wi::storage_ref::get_len () const
{
  return len;
}

inline unsigned int
wi::storage_ref::get_precision () const
{
  return precision;
}

inline const long *
wi::storage_ref::get_val () const
{
  return val;
}
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename storage>
class generic_wide_int : public storage
{
public:
  generic_wide_int ();

  template <typename T>
  generic_wide_int (const T &);

  template <typename T>
  generic_wide_int (const T &, unsigned int);


  long to_shwi (unsigned int) const;
  long to_shwi () const;
  unsigned long to_uhwi (unsigned int) const;
  unsigned long to_uhwi () const;
  long to_short_addr () const;


  long sign_mask () const;
  long elt (unsigned int) const;
  long sext_elt (unsigned int) const;
  unsigned long ulow () const;
  unsigned long uhigh () const;
  long slow () const;
  long shigh () const;

  template <typename T>
  generic_wide_int &operator = (const T &);
# 754 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  template <typename T> generic_wide_int &operator &= (const T &c) { return (*this = wi::bit_and (*this, c)); }
  template <typename T> generic_wide_int &operator |= (const T &c) { return (*this = wi::bit_or (*this, c)); }
  template <typename T> generic_wide_int &operator ^= (const T &c) { return (*this = wi::bit_xor (*this, c)); }
  template <typename T> generic_wide_int &operator += (const T &c) { return (*this = wi::add (*this, c)); }
  template <typename T> generic_wide_int &operator -= (const T &c) { return (*this = wi::sub (*this, c)); }
  template <typename T> generic_wide_int &operator *= (const T &c) { return (*this = wi::mul (*this, c)); }
  template <typename T> generic_wide_int &operator <<= (const T &c) { return (*this = wi::lshift (*this, c)); }
  template <typename T> generic_wide_int &operator >>= (const T &c) { return (*this = *this >> c); }
  generic_wide_int &operator ++ () { *this += 1; return *this; }
  generic_wide_int &operator -- () { *this += -1; return *this; }






  void dump () const;

  static const bool is_sign_extended
    = wi::int_traits <generic_wide_int <storage> >::is_sign_extended;
};

template <typename storage>
inline generic_wide_int <storage>::generic_wide_int () {}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x)
  : storage (x)
{
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage>::generic_wide_int (const T &x,
           unsigned int precision)
  : storage (x, precision)
{
}



template <typename storage>
inline long
generic_wide_int <storage>::to_shwi (unsigned int precision) const
{
  if (precision < 64)
    return sext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::to_shwi () const
{
  if (is_sign_extended)
    return this->get_val ()[0];
  else
    return to_shwi (this->get_precision ());
}




template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi (unsigned int precision) const
{
  if (precision < 64)
    return zext_hwi (this->get_val ()[0], precision);
  else
    return this->get_val ()[0];
}


template <typename storage>
inline unsigned long
generic_wide_int <storage>::to_uhwi () const
{
  return to_uhwi (this->get_precision ());
}





template <typename storage>
inline long
generic_wide_int <storage>::to_short_addr () const
{
  return this->get_val ()[0];
}


template <typename storage>
inline long
generic_wide_int <storage>::sign_mask () const
{
  unsigned int len = this->get_len ();
  ((void)(!(len > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 855, __FUNCTION__), 0 : 0));

  unsigned long high = this->get_val ()[len - 1];
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      int excess = len * 64 - precision;
      if (excess > 0)
 high <<= excess;
    }
  return (long) (high) < 0 ? -1 : 0;
}



template <typename storage>
inline long
generic_wide_int <storage>::slow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline long
generic_wide_int <storage>::shigh () const
{
  return this->get_val ()[this->get_len () - 1];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::ulow () const
{
  return this->get_val ()[0];
}



template <typename storage>
inline unsigned long
generic_wide_int <storage>::uhigh () const
{
  return this->get_val ()[this->get_len () - 1];
}


template <typename storage>
inline long
generic_wide_int <storage>::elt (unsigned int i) const
{
  if (i >= this->get_len ())
    return sign_mask ();
  else
    return this->get_val ()[i];
}



template <typename storage>
inline long
generic_wide_int <storage>::sext_elt (unsigned int i) const
{
  long elt_i = elt (i);
  if (!is_sign_extended)
    {
      unsigned int precision = this->get_precision ();
      unsigned int lsb = i * 64;
      if (precision - lsb < 64)
 elt_i = sext_hwi (elt_i, precision - lsb);
    }
  return elt_i;
}

template <typename storage>
template <typename T>
inline generic_wide_int <storage> &
generic_wide_int <storage>::operator = (const T &x)
{
  storage::operator = (x);
  return *this;
}


template <typename storage>
void
generic_wide_int <storage>::dump () const
{
  unsigned int len = this->get_len ();
  const long *val = this->get_val ();
  unsigned int precision = this->get_precision ();
  fprintf (
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "[");
  if (len * 64 < precision)
    fprintf (
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 951 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "...,");
  for (unsigned int i = 0; i < len - 1; ++i)
    fprintf (
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
            stderr
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                  , "%#" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                    "l" "x" 
# 953 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                            ",", val[len - 1 - i]);
  fprintf (
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
          stderr
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                , "%#" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h" 3 4
                  "l" "x" 
# 954 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
                                          "], precision = %d\n",
    val[0], precision);
}

namespace wi
{
  template <typename storage>
  struct int_traits < generic_wide_int <storage> >
    : public wi::int_traits <storage>
  {
    static unsigned int get_precision (const generic_wide_int <storage> &);
    static wi::storage_ref decompose (long *, unsigned int,
          const generic_wide_int <storage> &);
  };
}

template <typename storage>
inline unsigned int
wi::int_traits < generic_wide_int <storage> >::
get_precision (const generic_wide_int <storage> &x)
{
  return x.get_precision ();
}

template <typename storage>
inline wi::storage_ref
wi::int_traits < generic_wide_int <storage> >::
decompose (long *, unsigned int precision,
    const generic_wide_int <storage> &x)
{
  ((void)(!(precision == x.get_precision ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 984, __FUNCTION__), 0 : 0));
  return wi::storage_ref (x.get_val (), x.get_len (), precision);
}




template <bool SE, bool HDP>
class wide_int_ref_storage : public wi::storage_ref
{
private:


  long scratch[2];

public:
  wide_int_ref_storage () {}

  wide_int_ref_storage (const wi::storage_ref &);

  template <typename T>
  wide_int_ref_storage (const T &);

  template <typename T>
  wide_int_ref_storage (const T &, unsigned int);
};


template <bool SE, bool HDP>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const wi::storage_ref &x)
  : storage_ref (x)
{}




template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::wide_int_ref_storage (const T &x)
  : storage_ref (wi::int_traits <T>::decompose (scratch,
      wi::get_precision (x), x))
{
}


template <bool SE, bool HDP>
template <typename T>
inline wide_int_ref_storage <SE, HDP>::
wide_int_ref_storage (const T &x, unsigned int precision)
  : storage_ref (wi::int_traits <T>::decompose (scratch, precision, x))
{
}

namespace wi
{
  template <bool SE, bool HDP>
  struct int_traits <wide_int_ref_storage <SE, HDP> >
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = HDP;
    static const bool is_sign_extended = SE;
  };
}

namespace wi
{
  unsigned int force_to_size (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         signop sgn);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool = true);
}


class wide_int_storage
{
private:
  long val[((160 + 64) / 64)];
  unsigned int len;
  unsigned int precision;

public:
  wide_int_storage ();
  template <typename T>
  wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  wide_int_storage &operator = (const T &);

  static wide_int from (const wide_int_ref &, unsigned int, signop);
  static wide_int from_array (const long *, unsigned int,
         unsigned int, bool = true);
  static wide_int create (unsigned int);


  wide_int bswap () const;
};

namespace wi
{
  template <>
  struct int_traits <wide_int_storage>
  {
    static const enum precision_type precision_type = VAR_PRECISION;

    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    template <typename T1, typename T2>
    static wide_int get_binary_result (const T1 &, const T2 &);
  };
}

inline wide_int_storage::wide_int_storage () {}





template <typename T>
inline wide_int_storage::wide_int_storage (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
}

template <typename T>
inline wide_int_storage&
wide_int_storage::operator = (const T &x)
{
  { static_assert ((!wi::int_traits<T>::host_dependent_precision), "!wi::int_traits<T>::host_dependent_precision"); }
  { static_assert ((wi::int_traits<T>::precision_type != wi::CONST_PRECISION), "wi::int_traits<T>::precision_type != wi::CONST_PRECISION"); }
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  precision = xi.precision;
  wi::copy (*this, xi);
  return *this;
}

inline unsigned int
wide_int_storage::get_precision () const
{
  return precision;
}

inline const long *
wide_int_storage::get_val () const
{
  return val;
}

inline unsigned int
wide_int_storage::get_len () const
{
  return len;
}

inline long *
wide_int_storage::write_val ()
{
  return val;
}

inline void
wide_int_storage::set_len (unsigned int l, bool is_sign_extended)
{
  len = l;
  if (!is_sign_extended && len * 64 > precision)
    val[len - 1] = sext_hwi (val[len - 1],
        precision % 64);
}



inline wide_int
wide_int_storage::from (const wide_int_ref &x, unsigned int precision,
   signop sgn)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, precision, sgn));
  return result;
}




inline wide_int
wide_int_storage::from_array (const long *val, unsigned int len,
         unsigned int precision, bool need_canon_p)
{
  wide_int result = wide_int::create (precision);
  result.set_len (wi::from_array (result.write_val (), val, len, precision,
      need_canon_p));
  return result;
}


inline wide_int
wide_int_storage::create (unsigned int precision)
{
  wide_int x;
  x.precision = precision;
  return x;
}

template <typename T1, typename T2>
inline wide_int
wi::int_traits <wide_int_storage>::get_binary_result (const T1 &x, const T2 &y)
{

  static_assert ((wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION), "wi::int_traits <T1>::precision_type != FLEXIBLE_PRECISION || wi::int_traits <T2>::precision_type != FLEXIBLE_PRECISION")
                                                                ;
  if (wi::int_traits <T1>::precision_type == FLEXIBLE_PRECISION)
    return wide_int::create (wi::get_precision (y));
  else
    return wide_int::create (wi::get_precision (x));
}


template <int N>
class fixed_wide_int_storage
{
private:
  long val[(N + 64 + 1) / 64];
  unsigned int len;

public:
  fixed_wide_int_storage ();
  template <typename T>
  fixed_wide_int_storage (const T &);


  unsigned int get_precision () const;
  const long *get_val () const;
  unsigned int get_len () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  static generic_wide_int < fixed_wide_int_storage <N> > from (const wide_int_ref &, signop);
  static generic_wide_int < fixed_wide_int_storage <N> > from_array (const long *, unsigned int,
     bool = true);
};

namespace wi
{
  template <int N>
  struct int_traits < fixed_wide_int_storage <N> >
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static const unsigned int precision = N;
    template <typename T1, typename T2>
    static generic_wide_int < fixed_wide_int_storage <N> > get_binary_result (const T1 &, const T2 &);
  };
}

template <int N>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage () {}


template <int N>
template <typename T>
inline fixed_wide_int_storage <N>::fixed_wide_int_storage (const T &x)
{


  typename wi::binary_traits <T, generic_wide_int < fixed_wide_int_storage <N> > >::result_type *assertion __attribute__ ((__unused__));
  wi::copy (*this, generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > (x, N));
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_precision () const
{
  return N;
}

template <int N>
inline const long *
fixed_wide_int_storage <N>::get_val () const
{
  return val;
}

template <int N>
inline unsigned int
fixed_wide_int_storage <N>::get_len () const
{
  return len;
}

template <int N>
inline long *
fixed_wide_int_storage <N>::write_val ()
{
  return val;
}

template <int N>
inline void
fixed_wide_int_storage <N>::set_len (unsigned int l, bool)
{
  len = l;

  static_assert ((N % 64 == 0), "N % HOST_BITS_PER_WIDE_INT == 0");
}


template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from (const wide_int_ref &x, signop sgn)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::force_to_size (result.write_val (), x.val, x.len,
         x.precision, N, sgn));
  return result;
}




template <int N>
inline generic_wide_int < fixed_wide_int_storage <N> >
fixed_wide_int_storage <N>::from_array (const long *val,
     unsigned int len,
     bool need_canon_p)
{
  generic_wide_int < fixed_wide_int_storage <N> > result;
  result.set_len (wi::from_array (result.write_val (), val, len,
      N, need_canon_p));
  return result;
}

template <int N>
template <typename T1, typename T2>
inline generic_wide_int < fixed_wide_int_storage <N> >
wi::int_traits < fixed_wide_int_storage <N> >::
get_binary_result (const T1 &, const T2 &)
{
  return generic_wide_int < fixed_wide_int_storage <N> > ();
}


class trailing_wide_int_storage
{
private:


  unsigned int m_precision;


  unsigned char *m_len;



  long *m_val;

public:
  trailing_wide_int_storage (unsigned int, unsigned char *, long *);


  unsigned int get_len () const;
  unsigned int get_precision () const;
  const long *get_val () const;
  long *write_val ();
  void set_len (unsigned int, bool = false);

  template <typename T>
  trailing_wide_int_storage &operator = (const T &);
};

typedef generic_wide_int <trailing_wide_int_storage> trailing_wide_int;


namespace wi
{
  template <>
  struct int_traits <trailing_wide_int_storage>
    : public int_traits <wide_int_storage> {};
}





template <int N>
struct trailing_wide_ints
{
private:

  unsigned short m_precision;


  unsigned char m_max_len;


  unsigned char m_len[N];



  long m_val[1];

public:
  typedef generic_wide_int <wide_int_ref_storage <wi::int_traits <trailing_wide_int_storage>::is_sign_extended, wi::int_traits <trailing_wide_int_storage>::host_dependent_precision> > const_reference;

  void set_precision (unsigned int);
  unsigned int get_precision () const { return m_precision; }
  trailing_wide_int operator [] (unsigned int);
  const_reference operator [] (unsigned int) const;
  static size_t extra_size (unsigned int);
  size_t extra_size () const { return extra_size (m_precision); }
};

inline trailing_wide_int_storage::
trailing_wide_int_storage (unsigned int precision, unsigned char *len,
      long *val)
  : m_precision (precision), m_len (len), m_val (val)
{
}

inline unsigned int
trailing_wide_int_storage::get_len () const
{
  return *m_len;
}

inline unsigned int
trailing_wide_int_storage::get_precision () const
{
  return m_precision;
}

inline const long *
trailing_wide_int_storage::get_val () const
{
  return m_val;
}

inline long *
trailing_wide_int_storage::write_val ()
{
  return m_val;
}

inline void
trailing_wide_int_storage::set_len (unsigned int len, bool is_sign_extended)
{
  *m_len = len;
  if (!is_sign_extended && len * 64 > m_precision)
    m_val[len - 1] = sext_hwi (m_val[len - 1],
          m_precision % 64);
}

template <typename T>
inline trailing_wide_int_storage &
trailing_wide_int_storage::operator = (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, m_precision);
  wi::copy (*this, xi);
  return *this;
}



template <int N>
inline void
trailing_wide_ints <N>::set_precision (unsigned int precision)
{
  m_precision = precision;
  m_max_len = ((precision + 64 - 1)
        / 64);
}


template <int N>
inline trailing_wide_int
trailing_wide_ints <N>::operator [] (unsigned int index)
{
  return trailing_wide_int_storage (m_precision, &m_len[index],
        &m_val[index * m_max_len]);
}

template <int N>
inline typename trailing_wide_ints <N>::const_reference
trailing_wide_ints <N>::operator [] (unsigned int index) const
{
  return wi::storage_ref (&m_val[index * m_max_len],
     m_len[index], m_precision);
}



template <int N>
inline size_t
trailing_wide_ints <N>::extra_size (unsigned int precision)
{
  unsigned int max_len = ((precision + 64 - 1)
     / 64);
  return (N * max_len - 1) * sizeof (long);
}
# 1503 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
namespace wi
{

  template <typename T, bool signed_p>
  struct primitive_int_traits
  {
    static const enum precision_type precision_type = FLEXIBLE_PRECISION;
    static const bool host_dependent_precision = true;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (T);
    static wi::storage_ref decompose (long *, unsigned int, T);
  };
}

template <typename T, bool signed_p>
inline unsigned int
wi::primitive_int_traits <T, signed_p>::get_precision (T)
{
  return sizeof (T) * 8;
}

template <typename T, bool signed_p>
inline wi::storage_ref
wi::primitive_int_traits <T, signed_p>::decompose (long *scratch,
         unsigned int precision, T x)
{
  scratch[0] = x;
  if (signed_p || scratch[0] >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}


namespace wi
{
  template <>
  struct int_traits <unsigned char>
    : public primitive_int_traits <unsigned char, false> {};

  template <>
  struct int_traits <unsigned short>
    : public primitive_int_traits <unsigned short, false> {};

  template <>
  struct int_traits <int>
    : public primitive_int_traits <int, true> {};

  template <>
  struct int_traits <unsigned int>
    : public primitive_int_traits <unsigned int, false> {};

  template <>
  struct int_traits <long>
    : public primitive_int_traits <long, true> {};

  template <>
  struct int_traits <unsigned long>
    : public primitive_int_traits <unsigned long, false> {};


  template <>
  struct int_traits <long long>
    : public primitive_int_traits <long long, true> {};

  template <>
  struct int_traits <unsigned long long>
    : public primitive_int_traits <unsigned long long, false> {};

}

namespace wi
{


  class hwi_with_prec
  {
  public:
    hwi_with_prec () {}
    hwi_with_prec (long, unsigned int, signop);
    long val;
    unsigned int precision;
    signop sgn;
  };

  hwi_with_prec shwi (long, unsigned int);
  hwi_with_prec uhwi (unsigned long, unsigned int);

  hwi_with_prec minus_one (unsigned int);
  hwi_with_prec zero (unsigned int);
  hwi_with_prec one (unsigned int);
  hwi_with_prec two (unsigned int);
}

inline wi::hwi_with_prec::hwi_with_prec (long v, unsigned int p,
      signop s)
  : precision (p), sgn (s)
{
  if (precision < 64)
    val = sext_hwi (v, precision);
  else
    val = v;
}


inline wi::hwi_with_prec
wi::shwi (long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, SIGNED);
}


inline wi::hwi_with_prec
wi::uhwi (unsigned long val, unsigned int precision)
{
  return hwi_with_prec (val, precision, UNSIGNED);
}


inline wi::hwi_with_prec
wi::minus_one (unsigned int precision)
{
  return wi::shwi (-1, precision);
}


inline wi::hwi_with_prec
wi::zero (unsigned int precision)
{
  return wi::shwi (0, precision);
}


inline wi::hwi_with_prec
wi::one (unsigned int precision)
{
  return wi::shwi (1, precision);
}


inline wi::hwi_with_prec
wi::two (unsigned int precision)
{
  return wi::shwi (2, precision);
}

namespace wi
{


  template<typename T, precision_type = int_traits<T>::precision_type>
  struct ints_for
  {
    static int zero (const T &) { return 0; }
  };

  template<typename T>
  struct ints_for<T, VAR_PRECISION>
  {
    static hwi_with_prec zero (const T &);
  };
}

template<typename T>
inline wi::hwi_with_prec
wi::ints_for<T, wi::VAR_PRECISION>::zero (const T &x)
{
  return wi::zero (wi::get_precision (x));
}

namespace wi
{
  template <>
  struct int_traits <wi::hwi_with_prec>
  {
    static const enum precision_type precision_type = VAR_PRECISION;


    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static unsigned int get_precision (const wi::hwi_with_prec &);
    static wi::storage_ref decompose (long *, unsigned int,
          const wi::hwi_with_prec &);
  };
}

inline unsigned int
wi::int_traits <wi::hwi_with_prec>::get_precision (const wi::hwi_with_prec &x)
{
  return x.precision;
}

inline wi::storage_ref
wi::int_traits <wi::hwi_with_prec>::
decompose (long *scratch, unsigned int precision,
    const wi::hwi_with_prec &x)
{
  ((void)(!(precision == x.precision) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h", 1700, __FUNCTION__), 0 : 0));
  scratch[0] = x.val;
  if (x.sgn == SIGNED || x.val >= 0 || precision <= 64)
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = 0;
  return wi::storage_ref (scratch, 2, precision);
}






namespace wi
{
  bool eq_p_large (const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  bool lts_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  bool ltu_p_large (const long *, unsigned int, unsigned int,
      const long *, unsigned int);
  int cmps_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  int cmpu_large (const long *, unsigned int, unsigned int,
    const long *, unsigned int);
  unsigned int sext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int zext_large (long *, const long *,
      unsigned int,
      unsigned int, unsigned int);
  unsigned int set_bit_large (long *, const long *,
         unsigned int, unsigned int, unsigned int);
  unsigned int lshift_large (long *, const long *,
        unsigned int, unsigned int, unsigned int);
  unsigned int lrshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int arshift_large (long *, const long *,
         unsigned int, unsigned int, unsigned int,
         unsigned int);
  unsigned int and_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int and_not_large (long *, const long *,
         unsigned int, const long *,
         unsigned int, unsigned int);
  unsigned int or_large (long *, const long *, unsigned int,
    const long *, unsigned int, unsigned int);
  unsigned int or_not_large (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int);
  unsigned int xor_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int);
  unsigned int add_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int sub_large (long *, const long *, unsigned int,
     const long *, unsigned int, unsigned int,
     signop, overflow_type *);
  unsigned int mul_internal (long *, const long *,
        unsigned int, const long *,
        unsigned int, unsigned int, signop,
        overflow_type *, bool);
  unsigned int divmod_internal (long *, unsigned int *,
    long *, const long *,
    unsigned int, unsigned int,
    const long *,
    unsigned int, unsigned int,
    signop, overflow_type *);
}


template <typename T>
inline unsigned int
wi::get_precision (const T &x)
{
  return wi::int_traits <T>::get_precision (x);
}



template <typename T1, typename T2>
inline unsigned int
wi::get_binary_precision (const T1 &x, const T2 &y)
{
  return get_precision (wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::
   get_binary_result (x, y));
}


template <typename T1, typename T2>
inline void
wi::copy (T1 &x, const T2 &y)
{
  long *xval = x.write_val ();
  const long *yval = y.get_val ();
  unsigned int len = y.get_len ();
  unsigned int i = 0;
  do
    xval[i] = yval[i];
  while (++i < len);
  x.set_len (len, y.is_sign_extended);
}


template <typename T>
inline bool
wi::fits_shwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.len == 1;
}



template <typename T>
inline bool
wi::fits_uhwi_p (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (xi.precision <= 64)
    return true;
  if (xi.len == 1)
    return xi.slow () >= 0;
  return xi.len == 2 && xi.uhigh () == 0;
}



template <typename T>
inline bool
wi::neg_p (const T &x, signop sgn)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  if (sgn == UNSIGNED)
    return false;
  return xi.sign_mask () < 0;
}


template <typename T>
inline long
wi::sign_mask (const T &x)
{
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x);
  return xi.sign_mask ();
}


template <typename T1, typename T2>
inline bool
wi::eq_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (xi.is_sign_extended && yi.is_sign_extended)
    {

      if (xi.len != yi.len)
 return false;
      unsigned int i = 0;
      do
 if (xi.val[i] != yi.val[i])
   return false;
      while (++i != xi.len);
      return true;
    }
  if (__builtin_expect (yi.len == 1, true))
    {

      if (xi.len != 1)
 return false;


      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return xi.val[0] == 0;

      unsigned long diff = xi.val[0] ^ yi.val[0];
      int excess = 64 - precision;
      if (excess > 0)
 diff <<= excess;
      return diff == 0;
    }
  return eq_p_large (xi.val, xi.len, yi.val, yi.len, precision);
}


template <typename T1, typename T2>
inline bool
wi::ne_p (const T1 &x, const T2 &y)
{
  return !eq_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::lts_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi);

      if (wi::fits_shwi_p (xi))
 return xi.to_shwi () < yi.to_shwi ();


      if (neg_p (xi))
 return true;


      return false;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return !neg_p (yi);
  return lts_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::ltu_p (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    return xi.len == 1 && xi.to_uhwi () < (unsigned long) yi.val[0];
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    return yi.len != 1 || yi.to_uhwi () > (unsigned long) xi.val[0];



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl;
    }
  return ltu_p_large (xi.val, xi.len, precision, yi.val, yi.len);
}


template <typename T1, typename T2>
inline bool
wi::lt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return lts_p (x, y);
  else
    return ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::les_p (const T1 &x, const T2 &y)
{
  return !lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::leu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::le_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return les_p (x, y);
  else
    return leu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::gts_p (const T1 &x, const T2 &y)
{
  return lts_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gtu_p (const T1 &x, const T2 &y)
{
  return ltu_p (y, x);
}


template <typename T1, typename T2>
inline bool
wi::gt_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return gts_p (x, y);
  else
    return gtu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ges_p (const T1 &x, const T2 &y)
{
  return !lts_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::geu_p (const T1 &x, const T2 &y)
{
  return !ltu_p (x, y);
}


template <typename T1, typename T2>
inline bool
wi::ge_p (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return ges_p (x, y);
  else
    return geu_p (x, y);
}



template <typename T1, typename T2>
inline int
wi::cmps (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (wi::fits_shwi_p (yi))
    {

      if ((__builtin_constant_p (yi.val[0] == 0) && (yi.val[0] == 0)))
 return neg_p (xi) ? -1 : !(xi.len == 1 && xi.val[0] == 0);

      if (wi::fits_shwi_p (xi))
 {
   long xl = xi.to_shwi ();
   long yl = yi.to_shwi ();
   return xl < yl ? -1 : xl > yl;
 }


      if (neg_p (xi))
 return -1;


      return 1;
    }

  if ((__builtin_constant_p (xi.len == 1) && (xi.len == 1)))


    return neg_p (yi) ? 1 : -1;
  return cmps_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmpu (const T1 &x, const T2 &y)
{
  unsigned int precision = get_binary_precision (x, y);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);

  if ((__builtin_constant_p (yi.len == 1 && yi.val[0] >= 0) && (yi.len == 1 && yi.val[0] >= 0)))
    {

      if (xi.len != 1)
 return 1;

      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.val[0];
      return xl < yl ? -1 : xl > yl;
    }
  if ((__builtin_constant_p (xi.len == 1 && xi.val[0] >= 0) && (xi.len == 1 && xi.val[0] >= 0)))
    {

      if (yi.len != 1)
 return -1;

      unsigned long xl = xi.val[0];
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }



  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.to_uhwi ();
      unsigned long yl = yi.to_uhwi ();
      return xl < yl ? -1 : xl > yl;
    }
  return cmpu_large (xi.val, xi.len, precision, yi.val, yi.len);
}



template <typename T1, typename T2>
inline int
wi::cmp (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == SIGNED)
    return cmps (x, y);
  else
    return cmpu (x, y);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::bit_not (const T &x)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, get_precision (result));
  for (unsigned int i = 0; i < xi.len; ++i)
    val[i] = ~xi.val[i];
  result.set_len (xi.len);
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x)
{
  return sub (0, x);
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::neg (const T &x, overflow_type *overflow)
{
  *overflow = only_sign_bit_p (x) ? OVF_OVERFLOW : OVF_NONE;
  return sub (0, x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::abs (const T &x)
{
  return neg_p (x) ? neg (x) : typename wi::binary_traits <T, T>::result_type (x);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::sext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);

  if (offset <= 64)
    {
      val[0] = sext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (sext_large (val, xi.val, xi.len, precision, offset));
  return result;
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::zext (const T &x, unsigned int offset)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (offset >= precision)
    {
      wi::copy (result, xi);
      return result;
    }



  if (offset < 64)
    {
      val[0] = zext_hwi (xi.ulow (), offset);
      result.set_len (1, true);
    }
  else
    result.set_len (zext_large (val, xi.val, xi.len, precision, offset), true);
  return result;
}



template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::ext (const T &x, unsigned int offset, signop sgn)
{
  return sgn == SIGNED ? sext (x, offset) : zext (x, offset);
}


template <typename T>
inline typename wi::binary_traits <T, T>::result_type
wi::set_bit (const T &x, unsigned int bit)
{
  typename wi::binary_traits <T, T>::result_type result = wi::int_traits <typename wi::binary_traits <T, T>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () | (1UL << bit);
      result.set_len (1);
    }
  else
    result.set_len (set_bit_large (val, xi.val, xi.len, precision, bit));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::min (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::le_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umin (const T1 &x, const T2 &y)
{
  return wi::min (x, y, UNSIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::max (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val __attribute__ ((__unused__)) = result.write_val ();
  unsigned int precision = get_precision (result);
  if (wi::ge_p (x, y, sgn))
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > (x, precision));
  else
    wi::copy (result, generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > (y, precision));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umax (const T1 &x, const T2 &y)
{
  return wi::max (x, y, UNSIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_large (val, xi.val, xi.len, yi.val, yi.len,
          precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_and_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () & ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (and_not_large (val, xi.val, xi.len, yi.val, yi.len,
       precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_large (val, xi.val, xi.len,
         yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_or_not (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () | ~yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (or_not_large (val, xi.val, xi.len, yi.val, yi.len,
      precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::bit_xor (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  bool is_sign_extended = xi.is_sign_extended && yi.is_sign_extended;
  if (__builtin_expect (xi.len + yi.len == 2, true))
    {
      val[0] = xi.ulow () ^ yi.ulow ();
      result.set_len (1, is_sign_extended);
    }
  else
    result.set_len (xor_large (val, xi.val, xi.len,
          yi.val, yi.len, precision), is_sign_extended);
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () + yi.ulow ();
      result.set_len (1);
    }
# 2441 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (resultl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::add (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl + yl;
      if (sgn == SIGNED)
 {
   if ((((resultl ^ xl) & (resultl ^ yl))
        >> (precision - 1)) & 1)
     {
       if (xl > resultl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < resultl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       < (xl << (64 - precision)))
   ? OVF_OVERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (add_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () - yi.ulow ();
      result.set_len (1);
    }
# 2527 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
  else if ((__builtin_constant_p (precision > 64) && (precision > 64))
    && __builtin_expect (xi.len + yi.len == 2, true))
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      val[0] = resultl;
      val[1] = (long) resultl < 0 ? 0 : -1;
      result.set_len (1 + (((resultl ^ xl) & (xl ^ yl))
      >> (64 - 1)));
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          UNSIGNED, 0));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sub (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      unsigned long xl = xi.ulow ();
      unsigned long yl = yi.ulow ();
      unsigned long resultl = xl - yl;
      if (sgn == SIGNED)
 {
   if ((((xl ^ yl) & (resultl ^ xl)) >> (precision - 1)) & 1)
     {
       if (xl > yl)
  *overflow = OVF_UNDERFLOW;
       else if (xl < yl)
  *overflow = OVF_OVERFLOW;
       else
  *overflow = OVF_NONE;
     }
   else
     *overflow = OVF_NONE;
 }
      else
 *overflow = ((resultl << (64 - precision))
       > (xl << (64 - precision)))
   ? OVF_UNDERFLOW : OVF_NONE;
      val[0] = resultl;
      result.set_len (1);
    }
  else
    result.set_len (sub_large (val, xi.val, xi.len,
          yi.val, yi.len, precision,
          sgn, overflow));
  return result;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  if (precision <= 64)
    {
      val[0] = xi.ulow () * yi.ulow ();
      result.set_len (1);
    }
  else
    result.set_len (mul_internal (val, xi.val, xi.len, yi.val, yi.len,
      precision, UNSIGNED, 0, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, overflow, false));
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, SIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umul (const T1 &x, const T2 &y, overflow_type *overflow)
{
  return mul (x, y, UNSIGNED, overflow);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mul_high (const T1 &x, const T2 &y, signop sgn)
{
  typename wi::binary_traits <T1, T2>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y, precision);
  result.set_len (mul_internal (val, xi.val, xi.len,
    yi.val, yi.len, precision,
    sgn, 0, true));
  return result;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  quotient.set_len (divmod_internal (quotient_val, 0, 0, xi.val, xi.len,
         precision,
         yi.val, yi.len, yi.precision,
         sgn, overflow));
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, SIGNED);
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_trunc (const T1 &x, const T2 &y)
{
  return div_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return quotient - 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::sdiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_floor (const T1 &x, const T2 &y)
{
  return div_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);
  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return quotient + 1;
  return quotient;
}


template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::udiv_ceil (const T1 &x, const T2 &y)
{
  return div_ceil (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::div_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return quotient - 1;
       else
  return quotient + 1;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return quotient + 1;
 }
    }
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::divmod_trunc (const T1 &x, const T2 &y, signop sgn,
    typename wi::binary_traits <T1, T2>::result_type *remainder_ptr)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn, 0));
  remainder.set_len (remainder_len);

  *remainder_ptr = remainder;
  return quotient;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::gcd (const T1 &a, const T2 &b, signop sgn)
{
  T1 x, y, z;

  x = wi::abs (a);
  y = wi::abs (b);

  while (gt_p (x, 0, sgn))
    {
      z = mod_trunc (y, x, sgn);
      y = x;
      x = z;
    }

  return y;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_trunc (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (remainder);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  divmod_internal (0, &remainder_len, remainder_val,
     xi.val, xi.len, precision,
     yi.val, yi.len, yi.precision, sgn, overflow);
  remainder.set_len (remainder_len);

  return remainder;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::smod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, SIGNED);
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_trunc (const T1 &x, const T2 &y)
{
  return mod_trunc (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_floor (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn) && remainder != 0)
    return remainder + y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::umod_floor (const T1 &x, const T2 &y)
{
  return mod_floor (x, y, UNSIGNED);
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_ceil (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (wi::neg_p (x, sgn) == wi::neg_p (y, sgn) && remainder != 0)
    return remainder - y;
  return remainder;
}




template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::result_type
wi::mod_round (const T1 &x, const T2 &y, signop sgn, overflow_type *overflow)
{
  typename wi::binary_traits <T1, T2>::result_type quotient = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *quotient_val = quotient.write_val ();
  typename wi::binary_traits <T1, T2>::result_type remainder = wi::int_traits <typename wi::binary_traits <T1, T2>::result_type>::get_binary_result (x, y); long *remainder_val = remainder.write_val ();
  unsigned int precision = get_precision (quotient);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  unsigned int remainder_len;
  quotient.set_len (divmod_internal (quotient_val,
         &remainder_len, remainder_val,
         xi.val, xi.len, precision,
         yi.val, yi.len, yi.precision, sgn,
         overflow));
  remainder.set_len (remainder_len);

  if (remainder != 0)
    {
      if (sgn == SIGNED)
 {
   typename wi::binary_traits <T1, T2>::result_type abs_remainder = wi::abs (remainder);
   if (wi::geu_p (abs_remainder, wi::sub (wi::abs (y), abs_remainder)))
     {
       if (wi::neg_p (x, sgn) != wi::neg_p (y, sgn))
  return remainder + y;
       else
  return remainder - y;
     }
 }
      else
 {
   if (wi::geu_p (remainder, wi::sub (y, remainder)))
     return remainder - y;
 }
    }
  return remainder;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn)
{
  return wi::mod_trunc (x, y, sgn) == 0;
}



template <typename T1, typename T2>
inline bool
wi::multiple_of_p (const T1 &x, const T2 &y, signop sgn,
     typename wi::binary_traits <T1, T2>::result_type *res)
{
  typename wi::binary_traits <T1, T2>::result_type remainder;
  typename wi::binary_traits <T1, T2>::result_type quotient
    = divmod_trunc (x, y, sgn, &remainder);
  if (remainder == 0)
    {
      *res = quotient;
      return true;
    }
  return false;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();
  unsigned int precision = get_precision (result);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x, precision);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3054 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? ((__builtin_constant_p (shift < 64 - 1) && (shift < 64 - 1))
      && xi.len == 1
      && ((unsigned long) (xi.val[0]) - (unsigned long) (0) <= (unsigned long) ((~((long) (1UL << (64 - 1)))) >> shift) - (unsigned long) (0)))
   : precision <= 64)
 {
   val[0] = xi.ulow () << shift;
   result.set_len (1);
 }
      else
 result.set_len (lshift_large (val, xi.val, xi.len,
          precision, shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::lrshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = 0;
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
# 3098 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
      if ((__builtin_constant_p (xi.precision > 64) && (xi.precision > 64))
   ? (shift < 64
      && xi.len == 1
      && xi.val[0] >= 0)
   : xi.precision <= 64)
 {
   val[0] = xi.to_uhwi () >> shift;
   result.set_len (1);
 }
      else
 result.set_len (lrshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::arshift (const T1 &x, const T2 &y)
{
  typename wi::binary_traits <T1, T1>::result_type result = wi::int_traits <typename wi::binary_traits <T1, T1>::result_type>::get_binary_result (x, x); long *val = result.write_val ();


  generic_wide_int <wide_int_ref_storage <wi::int_traits <T1>::is_sign_extended, wi::int_traits <T1>::host_dependent_precision> > xi (x);
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T2>::is_sign_extended, wi::int_traits <T2>::host_dependent_precision> > yi (y);

  if (geu_p (yi, xi.precision))
    {
      val[0] = sign_mask (x);
      result.set_len (1);
    }
  else
    {
      unsigned int shift = yi.to_uhwi ();
      if (xi.precision <= 64)
 {
   val[0] = sext_hwi (xi.ulow () >> shift, xi.precision - shift);
   result.set_len (1, true);
 }
      else
 result.set_len (arshift_large (val, xi.val, xi.len, xi.precision,
           get_precision (result), shift));
    }
  return result;
}



template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T1>::result_type
wi::rshift (const T1 &x, const T2 &y, signop sgn)
{
  if (sgn == UNSIGNED)
    return lrshift (x, y);
  else
    return arshift (x, y);
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::lrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}




template <typename T1, typename T2>
typename wi::binary_traits <T1, T1>::result_type
wi::rrotate (const T1 &x, const T2 &y, unsigned int width)
{
  unsigned int precision = get_binary_precision (x, x);
  if (width == 0)
    width = precision;
  typename wi::binary_traits <T2, T2>::result_type ymod = umod_trunc (y, width);
  typename wi::binary_traits <T1, T1>::result_type right = wi::lrshift (x, ymod);
  typename wi::binary_traits <T1, T1>::result_type left = wi::lshift (x, wi::sub (width, ymod));
  if (width != precision)
    return wi::zext (left, width) | wi::zext (right, width);
  return left | right;
}



inline int
wi::parity (const wide_int_ref &x)
{
  return popcount (x) & 1;
}


template <typename T>
inline unsigned long
wi::extract_uhwi (const T &x, unsigned int bitpos, unsigned int width)
{
  unsigned precision = get_precision (x);
  if (precision < bitpos + width)
    precision = bitpos + width;
  generic_wide_int <wide_int_ref_storage <wi::int_traits <T>::is_sign_extended, wi::int_traits <T>::host_dependent_precision> > xi (x, precision);



  if (width == 0)
    return 0;

  unsigned int start = bitpos / 64;
  unsigned int shift = bitpos % 64;
  unsigned long res = xi.elt (start);
  res >>= shift;
  if (shift + width > 64)
    {
      unsigned long upper = xi.elt (start + 1);
      res |= upper << (-shift % 64);
    }
  return zext_hwi (res, width);
}


template <typename T>
inline unsigned int
wi::min_precision (const T &x, signop sgn)
{
  if (sgn == SIGNED)
    return get_precision (x) - clrsb (x);
  else
    return get_precision (x) - clz (x);
}
# 3248 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator < (const T1 &x, const T2 &y) { return wi::lts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator <= (const T1 &x, const T2 &y) { return wi::les_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator > (const T1 &x, const T2 &y) { return wi::gts_p (x, y); }
template <typename T1, typename T2> inline typename wi::binary_traits <T1, T2>::signed_predicate_result operator >= (const T1 &x, const T2 &y) { return wi::ges_p (x, y); }
# 3287 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int.h"
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator ~ (const generic_wide_int<T> &x) { return wi::bit_not (x); }
template<typename T> typename wi::binary_traits <generic_wide_int<T>, generic_wide_int<T> >::result_type operator - (const generic_wide_int<T> &x) { return wi::neg (x); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator == (const T1 &x, const T2 &y) { return wi::eq_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::predicate_result operator != (const T1 &x, const T2 &y) { return wi::ne_p (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator & (const T1 &x, const T2 &y) { return wi::bit_and (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator | (const T1 &x, const T2 &y) { return wi::bit_or (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator ^ (const T1 &x, const T2 &y) { return wi::bit_xor (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator + (const T1 &x, const T2 &y) { return wi::add (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator - (const T1 &x, const T2 &y) { return wi::sub (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T2>::operator_result operator * (const T1 &x, const T2 &y) { return wi::mul (x, y); }
template<typename T1, typename T2> typename wi::binary_traits <T1, T1>::operator_result operator << (const T1 &x, const T2 &y) { return wi::lshift (x, y); }






template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator >> (const T1 &x, const T2 &y)
{
  return wi::arshift (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator / (const T1 &x, const T2 &y)
{
  return wi::sdiv_trunc (x, y);
}

template <typename T1, typename T2>
inline typename wi::binary_traits <T1, T2>::signed_shift_result_type
operator % (const T1 &x, const T2 &y)
{
  return wi::smod_trunc (x, y);
}

template<typename T>
void
gt_ggc_mx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *)
{
}

template<typename T>
void
gt_pch_nx (generic_wide_int <T> *, void (*) (void *, void *), void *)
{
}

template<int N>
void
gt_ggc_mx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *)
{
}

template<int N>
void
gt_pch_nx (trailing_wide_ints <N> *, void (*) (void *, void *), void *)
{
}

namespace wi
{



  struct never_used1 {};
  struct never_used2 {};

  wide_int min_value (unsigned int, signop);
  wide_int min_value (never_used1 *);
  wide_int min_value (never_used2 *);
  wide_int max_value (unsigned int, signop);
  wide_int max_value (never_used1 *);
  wide_int max_value (never_used2 *);



  wide_int from_buffer (const unsigned char *, unsigned int);


  void to_mpz (const wide_int_ref &, mpz_t, signop);


  wide_int mask (unsigned int, bool, unsigned int);
  wide_int shifted_mask (unsigned int, unsigned int, bool, unsigned int);
  wide_int set_bit_in_zero (unsigned int, unsigned int);
  wide_int insert (const wide_int &x, const wide_int &y, unsigned int,
     unsigned int);
  wide_int round_down_for_mask (const wide_int &, const wide_int &);
  wide_int round_up_for_mask (const wide_int &, const wide_int &);

  wide_int mod_inv (const wide_int &a, const wide_int &b);

  template <typename T>
  T mask (unsigned int, bool);

  template <typename T>
  T shifted_mask (unsigned int, unsigned int, bool);

  template <typename T>
  T set_bit_in_zero (unsigned int);

  unsigned int mask (long *, unsigned int, bool, unsigned int);
  unsigned int shifted_mask (long *, unsigned int, unsigned int,
        bool, unsigned int);
  unsigned int from_array (long *, const long *,
      unsigned int, unsigned int, bool);
}



inline wide_int
wi::mask (unsigned int width, bool negate_p, unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (mask (result.write_val (), width, negate_p, precision));
  return result;
}




inline wide_int
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p,
    unsigned int precision)
{
  wide_int result = wide_int::create (precision);
  result.set_len (shifted_mask (result.write_val (), start, width, negate_p,
    precision));
  return result;
}



inline wide_int
wi::set_bit_in_zero (unsigned int bit, unsigned int precision)
{
  return shifted_mask (bit, 1, false, precision);
}



template <typename T>
inline T
wi::mask (unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (mask (result.write_val (), width, negate_p,
   wi::int_traits <T>::precision));
  return result;
}




template <typename T>
inline T
wi::shifted_mask (unsigned int start, unsigned int width, bool negate_p)
{
  static_assert ((wi::int_traits<T>::precision), "wi::int_traits<T>::precision");
  T result;
  result.set_len (shifted_mask (result.write_val (), start, width,
    negate_p,
    wi::int_traits <T>::precision));
  return result;
}



template <typename T>
inline T
wi::set_bit_in_zero (unsigned int bit)
{
  return shifted_mask <T> (bit, 1, false);
}



static inline void
wi::accumulate_overflow (wi::overflow_type &overflow,
    wi::overflow_type suboverflow)
{
  if (!suboverflow)
    return;
  if (!overflow)
    overflow = suboverflow;
  else if (overflow != suboverflow)
    overflow = wi::OVF_UNKNOWN;
}
# 452 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-print.h"
extern void print_dec (const wide_int_ref &wi, char *buf, signop sgn);
extern void print_dec (const wide_int_ref &wi, FILE *file, signop sgn);
extern void print_decs (const wide_int_ref &wi, char *buf);
extern void print_decs (const wide_int_ref &wi, FILE *file);
extern void print_decu (const wide_int_ref &wi, char *buf);
extern void print_decu (const wide_int_ref &wi, FILE *file);
extern void print_hex (const wide_int_ref &wi, char *buf);
extern void print_hex (const wide_int_ref &wi, FILE *file);
# 453 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename T> struct poly_int_pod;
template<unsigned int N, typename T> class poly_int;
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T, wi::precision_type = wi::int_traits<T>::precision_type>
struct poly_coeff_traits;

template<typename T>
struct poly_coeff_traits<T, wi::FLEXIBLE_PRECISION>
{
  typedef T result;
  typedef T int_type;
  static const int signedness = (T (0) >= T (-1));
  static const int precision = sizeof (T) * 8;
  static const T max_value = (signedness
         ? ((T (1) << (precision - 2))
     + ((T (1) << (precision - 2)) - 1))
         : T (-1));
  static const int rank = sizeof (T) * 2 + !signedness;
};

template<typename T>
struct poly_coeff_traits<T, wi::VAR_PRECISION>
{
  typedef T result;
  typedef int int_type;
  static const int signedness = -1;
  static const int precision = (((160 + 64) / 64) * 64);
  static const int rank = 0x7fffffff;
};

template<typename T>
struct poly_coeff_traits<T, wi::CONST_PRECISION>
{
  typedef typename wi::binary_traits <T, T>::result_type result;
  typedef int int_type;

  static const int signedness = 1;
  static const int precision = wi::int_traits<T>::precision;
  static const int rank = precision * 2 / 8;
};


template<typename T1, typename T2>
struct poly_coeff_pair_traits
{
# 118 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  static const bool lossless_p = (poly_coeff_traits<T1>::signedness
      == poly_coeff_traits<T2>::signedness
      ? (poly_coeff_traits<T1>::precision
         >= poly_coeff_traits<T2>::precision)
      : (poly_coeff_traits<T1>::signedness == 1
         && poly_coeff_traits<T2>::signedness == 0
         && (poly_coeff_traits<T1>::precision
      > poly_coeff_traits<T2>::precision)));





  static const int result_kind
    = ((poly_coeff_traits<T1>::rank <= poly_coeff_traits<long>::rank
 && poly_coeff_traits<T2>::rank <= poly_coeff_traits<long>::rank)
       ? 0
       : (poly_coeff_traits<T1>::rank <= poly_coeff_traits<unsigned long>::rank
   && poly_coeff_traits<T2>::rank <= poly_coeff_traits<unsigned long>::rank)
       ? 1 : 2);

};



template<typename T1, typename T2, typename T3,
  bool lossless_p = poly_coeff_pair_traits<T1, T2>::lossless_p>
struct if_lossless;
template<typename T1, typename T2, typename T3>
struct if_lossless<T1, T2, T3, true>
{
  typedef T3 type;
};
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T>
struct poly_int_traits
{
  static const bool is_poly = false;
  static const unsigned int num_coeffs = 1;
  typedef T coeff_type;
  typedef typename poly_coeff_traits<T>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int_pod<N, C> >
{
  static const bool is_poly = true;
  static const unsigned int num_coeffs = N;
  typedef C coeff_type;
  typedef typename poly_coeff_traits<C>::int_type int_type;
};
template<unsigned int N, typename C>
struct poly_int_traits<poly_int<N, C> > : poly_int_traits<poly_int_pod<N, C> >
{
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_nonpoly {};
template<typename T1, typename T2>
struct if_nonpoly<T1, T2, false>
{
  typedef T2 type;
};



template<typename T1, typename T2, typename T3,
  bool is_poly1 = poly_int_traits<T1>::is_poly,
  bool is_poly2 = poly_int_traits<T2>::is_poly>
struct if_nonpoly2 {};
template<typename T1, typename T2, typename T3>
struct if_nonpoly2<T1, T2, T3, false, false>
{
  typedef T3 type;
};



template<typename T1, typename T2 = T1,
  bool is_poly = poly_int_traits<T1>::is_poly>
struct if_poly {};
template<typename T1, typename T2>
struct if_poly<T1, T2, true>
{
  typedef T2 type;
};
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2 = T1,
  int result_kind = poly_coeff_pair_traits<T1, T2>::result_kind>
struct poly_result;


template<typename T1, typename T2>
struct poly_result<T1, T2, 0>
{
  typedef long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 1>
{
  typedef unsigned long type;


  typedef type cast;
};


template<typename T1, typename T2>
struct poly_result<T1, T2, 2>
{
  typedef typename wi::binary_traits <T1, T2>::result_type type;


  typedef const T1 &cast;
};
# 337 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename C>
struct poly_int_pod
{
public:
  template<typename Ca>
  poly_int_pod &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int_pod &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int_pod &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int_pod>::type &operator *= (const Ca &);

  poly_int_pod &operator <<= (unsigned int);

  bool is_constant () const;

  template<typename T>
  typename if_lossless<T, C, bool>::type is_constant (T *) const;

  C to_constant () const;

  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, unsigned int,
         signop);
  template<typename Ca>
  static poly_int<N, C> from (const poly_int_pod<N, Ca> &, signop);

  bool to_shwi (poly_int_pod<N, long> *) const;
  bool to_uhwi (poly_int_pod<N, unsigned long> *) const;
  poly_int<N, long> force_shwi () const;
  poly_int<N, unsigned long> force_uhwi () const;





  C coeffs[N];
};

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator = (const Ca &a)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = a) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (a)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int_pod<N, C> >::type &
poly_int_pod<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int_pod<N, C>&
poly_int_pod<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::is_constant () const
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (this->coeffs[i] != 0)
 return false;
  return true;
}




template<unsigned int N, typename C>
template<typename T>
inline typename if_lossless<T, C, bool>::type
poly_int_pod<N, C>::is_constant (T *const_value) const
{
  if (is_constant ())
    {
      *const_value = this->coeffs[0];
      return true;
    }
  return false;
}







template<unsigned int N, typename C>
inline C
poly_int_pod<N, C>::to_constant () const
{
  ((void)(!(is_constant ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 504, __FUNCTION__), 0 : 0));
  return this->coeffs[0];
}





template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a,
     unsigned int bitsize, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], bitsize, sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], bitsize, sgn))));
  return r;
}




template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>
poly_int_pod<N, C>::from (const poly_int_pod<N, Ca> &a, signop sgn)
{
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = C::from (a.coeffs[i], sgn)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (C::from (a.coeffs[i], sgn))));
  return r;
}





template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_shwi (poly_int_pod<N, long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_shwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_shwi ();
  return true;
}






template<unsigned int N, typename C>
inline bool
poly_int_pod<N, C>::to_uhwi (poly_int_pod<N, unsigned long> *r) const
{
  for (unsigned int i = 0; i < N; i++)
    if (!wi::fits_uhwi_p (this->coeffs[i]))
      return false;
  for (unsigned int i = 0; i < N; i++)
    r->coeffs[i] = this->coeffs[i].to_uhwi ();
  return true;
}




template<unsigned int N, typename C>
inline poly_int<N, long>
poly_int_pod<N, C>::force_shwi () const
{
  poly_int_pod<N, long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_shwi ();
  return r;
}




template<unsigned int N, typename C>
inline poly_int<N, unsigned long>
poly_int_pod<N, C>::force_uhwi () const
{
  poly_int_pod<N, unsigned long> r;
  for (unsigned int i = 0; i < N; i++)
    r.coeffs[i] = this->coeffs[i].to_uhwi ();
  return r;
}
# 611 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename C>
class poly_int : public poly_int_pod<N, C>
{
public:
  poly_int () {}

  template<typename Ca>
  poly_int (const poly_int<N, Ca> &);
  template<typename Ca>
  poly_int (const poly_int_pod<N, Ca> &);
  template<typename C0>
  poly_int (const C0 &);
  template<typename C0, typename C1>
  poly_int (const C0 &, const C1 &);

  template<typename Ca>
  poly_int &operator = (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator = (const Ca &);

  template<typename Ca>
  poly_int &operator += (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator += (const Ca &);

  template<typename Ca>
  poly_int &operator -= (const poly_int_pod<N, Ca> &);
  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator -= (const Ca &);

  template<typename Ca>
  typename if_nonpoly<Ca, poly_int>::type &operator *= (const Ca &);

  poly_int &operator <<= (unsigned int);
};

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename Ca>
inline
poly_int<N, C>::poly_int (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = a.coeffs[i]) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (a.coeffs[i])));
}

template<unsigned int N, typename C>
template<typename C0>
inline
poly_int<N, C>::poly_int (const C0 &c0)
{
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename C0, typename C1>
inline
poly_int<N, C>::poly_int (const C0 &c0, const C1 &c1)
{
  static_assert ((N >= 2), "N >= 2");
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[0] = c0) : (void) ((*this).coeffs[0].~C (), new (&(*this).coeffs[0]) C (c0)));
  ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[1] = c1) : (void) ((*this).coeffs[1].~C (), new (&(*this).coeffs[1]) C (c1)));
  for (unsigned int i = 2; i < N; i++)
    ((void) (&(*this).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((*this).coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0])) : (void) ((*this).coeffs[i].~C (), new (&(*this).coeffs[i]) C (wi::ints_for<C>::zero (this->coeffs[0]))));
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator = (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] = a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator = (const Ca &a)
{
  this->coeffs[0] = a;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      this->coeffs[i] = wi::ints_for<C>::zero (this->coeffs[0]);
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator += (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] += a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator += (const Ca &a)
{
  this->coeffs[0] += a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline poly_int<N, C>&
poly_int<N, C>::operator -= (const poly_int_pod<N, Ca> &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] -= a.coeffs[i];
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator -= (const Ca &a)
{
  this->coeffs[0] -= a;
  return *this;
}

template<unsigned int N, typename C>
template<typename Ca>
inline typename if_nonpoly<Ca, poly_int<N, C> >::type &
poly_int<N, C>::operator *= (const Ca &a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] *= a;
  return *this;
}

template<unsigned int N, typename C>
inline poly_int<N, C>&
poly_int<N, C>::operator <<= (unsigned int a)
{
  for (unsigned int i = 0; i < N; i++)
    this->coeffs[i] <<= a;
  return *this;
}



template<typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const Ca &a, const Cb &b, const Cc &c)
{
  return a >= b && a <= c;
}

template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline typename if_nonpoly<Ca, bool>::type
coeffs_in_range_p (const poly_int_pod<N, Ca> &a, const Cb &b, const Cc &c)
{
  for (unsigned int i = 0; i < N; i++)
    if (a.coeffs[i] < b || a.coeffs[i] > c)
      return false;
  return true;
}

namespace wi {


template<unsigned int N>
inline poly_int<N, hwi_with_prec>
shwi (const poly_int_pod<N, long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::shwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::shwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N>
inline poly_int<N, hwi_with_prec>
uhwi (const poly_int_pod<N, unsigned long> &a, unsigned int precision)
{
  poly_int<N, hwi_with_prec> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (hwi_with_prec *) 0), wi::int_traits<hwi_with_prec>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::uhwi (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~hwi_with_prec (), new (&(r).coeffs[i]) hwi_with_prec (wi::uhwi (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
sext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sext (a.coeffs[i], precision))));
  return r;
}



template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
zext (const poly_int_pod<N, Ca> &a, unsigned int precision)
{
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::zext (a.coeffs[i], precision)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::zext (a.coeffs[i], precision))));
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator + (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) + b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) + b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator + (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) + b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) + b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator + (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a + NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a + NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
add (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::add (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::add (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
operator - (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) - b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) - b.coeffs[i])));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator - (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = NCa (a.coeffs[0]) - b) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (NCa (a.coeffs[0]) - b)));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator - (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = a - NCb (b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (a - NCb (b.coeffs[0]))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCb (b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCb (b.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], wi::ints_for<Cb>::zero (b)))))
                                      ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a, b.coeffs[0])) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a, b.coeffs[0]))));
  for (unsigned int i = 1; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (wi::ints_for<Ca>::zero (a), b.coeffs[i]))))
                       ;
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
sub (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::sub (a.coeffs[0], b.coeffs[0], sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::sub (a.coeffs[i], b.coeffs[i], sgn, &suboverflow))))
                   ;
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator - (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = -NCa (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (-NCa (a.coeffs[i]))));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
neg (const poly_int_pod<N, Ca> &a, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::neg (a.coeffs[0], overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::neg (a.coeffs[0], overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::neg (a.coeffs[i], &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::neg (a.coeffs[i], &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator ~ (const poly_int_pod<N, Ca> &a)
{
  if (N >= 2)
    return -1 - a;
  return ~a.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
operator * (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) * b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) * b)));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
operator * (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a) * b.coeffs[i]) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a) * b.coeffs[i])));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a, b.coeffs[i])) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a, b.coeffs[i]))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Cb>::result_type>
mul (const poly_int_pod<N, Ca> &a, const Cb &b,
     signop sgn, wi::overflow_type *overflow)
{
  typedef typename wi::binary_traits <Ca, Cb>::result_type C;
  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = wi::mul (a.coeffs[0], b, sgn, overflow)) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (wi::mul (a.coeffs[0], b, sgn, overflow))));
  for (unsigned int i = 1; i < N; i++)
    {
      wi::overflow_type suboverflow;
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::mul (a.coeffs[i], b, sgn, &suboverflow)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::mul (a.coeffs[i], b, sgn, &suboverflow))));
      wi::accumulate_overflow (*overflow, suboverflow);
    }
  return r;
}
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Ca>::type>
operator << (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Ca>::cast NCa;
  typedef typename poly_result<Ca, Ca>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = NCa (a.coeffs[i]) << b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (NCa (a.coeffs[i]) << b)));
  return r;
}

namespace wi {


template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename wi::binary_traits <Ca, Ca>::result_type>
lshift (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename wi::binary_traits <Ca, Ca>::result_type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = wi::lshift (a.coeffs[i], b)) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (wi::lshift (a.coeffs[i], b))));
  return r;
}
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b0, const Cb &b1)
{
  if (a1 != b1)







    return (a1 < b1
     ? b0 <= a0 && (a0 - b0) % (b1 - a1) == 0
     : b0 >= a0 && (b0 - a0) % (a1 - b1) == 0);
  return a0 == b0;
}




template<typename Ca, typename Cb>
inline bool
maybe_eq_2 (const Ca &a0, const Ca &a1, const Cb &b)
{
  if (a1 != 0)






    return (a1 < 0
     ? b <= a0 && (a0 - b) % a1 == 0
     : b >= a0 && (b - a0) % a1 == 0);
  return a0 == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_eq (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b.coeffs[0], b.coeffs[1]);
  return a.coeffs[0] == b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_eq (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (a.coeffs[0], a.coeffs[1], b);
  return a.coeffs[0] == b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_eq (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  static_assert ((N <= 2), "N <= 2");
  if (N == 2)
    return maybe_eq_2 (b.coeffs[0], b.coeffs[1], a);
  return a == b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_eq (const Ca &a, const Cb &b)
{
  return a == b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_ne (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != b.coeffs[i])
 return true;
  return a.coeffs[0] != b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_ne (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] != 0)
 return true;
  return a.coeffs[0] != b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_ne (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] != 0)
 return true;
  return a != b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_ne (const Ca &a, const Cb &b)
{
  return a != b;
}
# 1312 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_le (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] <= b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_le (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] <= b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_le (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a <= b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_le (const Ca &a, const Cb &b)
{
  return a <= b;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
maybe_lt (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < b.coeffs[i])
 return true;
  return a.coeffs[0] < b.coeffs[0];
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
maybe_lt (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (a.coeffs[i] < 0)
 return true;
  return a.coeffs[0] < b;
}

template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
maybe_lt (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if (b.coeffs[i] > 0)
 return true;
  return a < b.coeffs[0];
}

template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
maybe_lt (const Ca &a, const Cb &b)
{
  return a < b;
}
# 1414 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2>
inline bool
ordered_p (const T1 &a, const T2 &b)
{
  return ((poly_int_traits<T1>::num_coeffs == 1
    && poly_int_traits<T2>::num_coeffs == 1)
   || (!maybe_lt (b, a))
   || (!maybe_lt (a, b)));
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1439, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_min (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1453, __FUNCTION__), 0 : 0));
      return b;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_min (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1467, __FUNCTION__), 0 : 0));
      return b;
    }
}







template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1487, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
ordered_max (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1501, __FUNCTION__), 0 : 0));
      return a;
    }
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
ordered_max (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return b;
  else
    {
      if (N > 1)
 ((void)(!((!maybe_lt (a, b))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1515, __FUNCTION__), 0 : 0));
      return a;
    }
}




template<unsigned int N, typename Ca>
inline Ca
constant_lower_bound (const poly_int_pod<N, Ca> &a)
{
  ((void)(!((!maybe_lt (a, typename poly_int_traits<Ca>::int_type (0)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1527, __FUNCTION__), 0 : 0));
  return a.coeffs[0];
}



template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_lower_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (a, b)))
    return a.coeffs[0];
  return b;
}




template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type
constant_upper_bound_with_limit (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  if ((!maybe_lt (b, a)))
    return a.coeffs[0];
  return b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) < (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
lower_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return lower_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
lower_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) < (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}

template<typename Ca, typename Cb>
inline typename poly_result<typename if_nonpoly<Ca>::type, typename if_nonpoly<Cb>::type>::type
lower_bound (const Ca &a, const Cb &b)
{
  return a < b ? a : b;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const Cb &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;

  poly_int<N, C> r;
  ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b)))) : (void) ((r).coeffs[0].~C (), new (&(r).coeffs[0]) C (((NCa (a.coeffs[0])) > (NCb (b)) ? (NCa (a.coeffs[0])) : (NCb (b))))));
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0)))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (ICb (0)) ? (NCa (a.coeffs[i])) : (ICb (0))))));
  return r;
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
upper_bound (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return upper_bound (b, a);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
upper_bound (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<Ca, Cb>::type C;

  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = ((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i])))) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (((NCa (a.coeffs[i])) > (NCb (b.coeffs[i])) ? (NCa (a.coeffs[i])) : (NCb (b.coeffs[i]))))));
  return r;
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
coeff_gcd (const poly_int_pod<N, Ca> &a)
{

  unsigned int i;
  for (i = N - 1; i > 0; --i)
    if (a.coeffs[i] != 0)
      break;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[i];
  for (unsigned int j = 0; j < i; ++j)
    if (a.coeffs[j] != 0)
      r = gcd (r, C (a.coeffs[j]));
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
common_multiple (const poly_int_pod<N, Ca> &a, Cb b)
{
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type xgcd = coeff_gcd (a);
  return a * (least_common_multiple (xgcd, b) / xgcd);
}

template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<typename if_nonpoly<Ca>::type, Cb>::type>
common_multiple (const Ca &a, const poly_int_pod<N, Cb> &b)
{
  return common_multiple (b, a);
}
# 1692 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
poly_int<N, typename poly_result<Ca, Cb>::type>
force_common_multiple (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return common_multiple (a, b.coeffs[0]);
  if (a.is_constant ())
    return common_multiple (a.coeffs[0], b);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Ca>::int_type ICa;

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] != ICa (0))
      {
 C lcm = least_common_multiple (NCa (a.coeffs[i]), NCb (b.coeffs[i]));
 C amul = lcm / a.coeffs[i];
 C bmul = lcm / b.coeffs[i];
 for (unsigned int j = 0; j < N; ++j)
   ((void)(!(a.coeffs[j] * amul == b.coeffs[j] * bmul) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1714, __FUNCTION__), 0 : 0));
 return a * amul;
      }
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1717, __FUNCTION__));
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline int
compare_sizes_for_sort (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b)
{
  for (unsigned int i = N; i-- > 0; )
    if (a.coeffs[i] != b.coeffs[i])
      return a.coeffs[i] < b.coeffs[i] ? -1 : 1;
  return 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_p (const poly_int_pod<N, Ca> &value, Cb align)
{
  for (unsigned int i = 1; i < N; i++)
    if ((value.coeffs[i] & (align - 1)) != 0)
      return false;
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_up (const poly_int_pod<N, Ca> &value, Cb align,
       poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value + (-value.coeffs[0] & (align - 1));
  return true;
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
can_align_down (const poly_int_pod<N, Ca> &value, Cb align,
  poly_int_pod<N, Ca> *aligned)
{
  if (!can_align_p (value, align))
    return false;
  *aligned = value - (value.coeffs[0] & (align - 1));
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_up (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b,
       Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_up (a, align, &aligned_a)
   && can_align_up (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}





template<unsigned int N, typename Ca, typename Cb, typename Cc>
inline bool
known_equal_after_align_down (const poly_int_pod<N, Ca> &a,
         const poly_int_pod<N, Cb> &b,
         Cc align)
{
  poly_int<N, Ca> aligned_a;
  poly_int<N, Cb> aligned_b;
  return (can_align_down (a, align, &aligned_a)
   && can_align_down (b, align, &aligned_b)
   && (!maybe_ne (aligned_a, aligned_b)));
}
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1827, __FUNCTION__), 0 : 0));
  return value + (-value.coeffs[0] & (align - 1));
}
# 1838 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1842, __FUNCTION__), 0 : 0));
  return value - (value.coeffs[0] & (align - 1));
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_lower_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)


    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] - (value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] - (value.coeffs[i] & (align - 1))))))
                                             ;
  return r;
}





template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
aligned_upper_bound (const poly_int_pod<N, Ca> &value, Cb align)
{
  poly_int<N, Ca> r;
  for (unsigned int i = 0; i < N; i++)
    ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = (value.coeffs[i] + (-value.coeffs[i] & (align - 1)))) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca ((value.coeffs[i] + (-value.coeffs[i] & (align - 1))))))
                                              ;
  return r;
}
# 1886 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_down_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1890, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] - (value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}
# 1910 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, Ca>
force_align_up_and_div (const poly_int_pod<N, Ca> &value, Cb align)
{
  ((void)(!(can_align_p (value, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1914, __FUNCTION__), 0 : 0));

  poly_int<N, Ca> r;
  ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[0] = ((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align)) : (void) ((r).coeffs[0].~Ca (), new (&(r).coeffs[0]) Ca (((value.coeffs[0] + (-value.coeffs[0] & (align - 1))) / align))))

                 ;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      ((void) (&(r).coeffs[0] == (Ca *) 0), wi::int_traits<Ca>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = value.coeffs[i] / align) : (void) ((r).coeffs[i].~Ca (), new (&(r).coeffs[i]) Ca (value.coeffs[i] / align)));
  return r;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
known_misalignment (const poly_int_pod<N, Ca> &value, Cb align, Cm *misalign)
{
  ((void)(!(align != 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1934, __FUNCTION__), 0 : 0));
  if (!can_align_p (value, align))
    return false;
  *misalign = value.coeffs[0] & (align - 1);
  return true;
}





template<unsigned int N, typename Ca, typename Cb>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
force_get_misalignment (const poly_int_pod<N, Ca> &a, Cb align)
{
  ((void)(!(can_align_p (a, align)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 1949, __FUNCTION__), 0 : 0));
  return a.coeffs[0] & (align - 1);
}




template<unsigned int N, typename Ca>
inline typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type
known_alignment (const poly_int_pod<N, Ca> &a)
{
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type C;
  C r = a.coeffs[0];
  for (unsigned int i = 1; i < N; ++i)
    r |= a.coeffs[i];
  return r & -r;
}




template<unsigned int N, typename Ca, typename Cb, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_ior_p (const poly_int_pod<N, Ca> &a, Cb b, Cr *result)
{


  typedef typename poly_int_traits<Ca>::int_type int_type;
  if (N >= 2)
    for (unsigned int i = 1; i < N; i++)
      if ((-(a.coeffs[i] & -a.coeffs[i]) & b) != int_type (0))
 return false;
  *result = a;
  result->coeffs[0] |= b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
constant_multiple_p (const poly_int_pod<N, Ca> &a, Cb b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  if (NCa (a.coeffs[0]) % NCb (b) != 0 || !a.is_constant ())
    return false;
  *multiple = NCa (a.coeffs[0]) / NCb (b);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
constant_multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type int_type;



  if (NCa (a) % NCb (b.coeffs[0]) != 0
      || (a != int_type (0) && !b.is_constant ()))
    return false;
  *multiple = NCa (a) / NCb (b.coeffs[0]);
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
constant_multiple_p (const poly_int_pod<N, Ca> &a,
       const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;

  if (NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0)
    return false;

  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    if (b.coeffs[i] == ICb (0)
 ? a.coeffs[i] != ICa (0)
 : (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0
    || NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != r))
      return false;

  *multiple = r;
  return true;
}



template<typename Ca, typename Cb>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b)
{
  return a % b == 0;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b)
{
  for (unsigned int i = 0; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  return true;
}



template<unsigned int N, typename Ca, typename Cb>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b)
{
  typedef typename poly_int_traits<Ca>::int_type int_type;



  return a % b.coeffs[0] == 0 && (a == int_type (0) || b.is_constant ());
}




template<unsigned int N, typename Ca, typename Cb>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0]);
  typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Ca>::coeff_type>::type tmp;
  return constant_multiple_p (a, b, &tmp);
}




template<typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly2<Ca, Cb, bool>::type
multiple_p (Ca a, Cb b, Cm *multiple)
{
  if (a % b != 0)
    return false;
  *multiple = a / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Cb, bool>::type
multiple_p (const poly_int_pod<N, Ca> &a, Cb b, poly_int_pod<N, Cm> *multiple)
{
  if (!multiple_p (a, b))
    return false;
  for (unsigned int i = 0; i < N; ++i)
    multiple->coeffs[i] = a.coeffs[i] / b;
  return true;
}




template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline typename if_nonpoly<Ca, bool>::type
multiple_p (Ca a, const poly_int_pod<N, Cb> &b, Cm *multiple)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;



  if (a % b.coeffs[0] != 0 || (NCa (a) != 0 && !b.is_constant ()))
    return false;
  *multiple = a / b.coeffs[0];
  return true;
}





template<unsigned int N, typename Ca, typename Cb, typename Cm>
inline bool
multiple_p (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b,
     poly_int_pod<N, Cm> *multiple)
{
  if (b.is_constant ())
    return multiple_p (a, b.coeffs[0], multiple);
  return constant_multiple_p (a, b, multiple);
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type>
exact_div (const poly_int_pod<N, Ca> &a, Cb b)
{
  typedef typename poly_result<Ca, typename if_nonpoly<Cb>::type>::type C;
  poly_int<N, C> r;
  for (unsigned int i = 0; i < N; i++)
    {
      ((void)(!(a.coeffs[i] % b == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2162, __FUNCTION__), 0 : 0));
      ((void) (&(r).coeffs[0] == (C *) 0), wi::int_traits<C>::precision_type == wi::FLEXIBLE_PRECISION ? (void) ((r).coeffs[i] = a.coeffs[i] / b) : (void) ((r).coeffs[i].~C (), new (&(r).coeffs[i]) C (a.coeffs[i] / b)));
    }
  return r;
}



template<unsigned int N, typename Ca, typename Cb>
inline poly_int<N, typename poly_result<Ca, Cb>::type>
exact_div (const poly_int_pod<N, Ca> &a, const poly_int_pod<N, Cb> &b)
{
  if (b.is_constant ())
    return exact_div (a, b.coeffs[0]);

  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  typedef typename poly_int_traits<Cb>::int_type int_type;

  ((void)(!(a.coeffs[0] % b.coeffs[0] == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2182, __FUNCTION__), 0 : 0));
  C r = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
  for (unsigned int i = 1; i < N; ++i)
    ((void)(!(b.coeffs[i] == int_type (0) ? a.coeffs[i] == int_type (0) : (a.coeffs[i] % b.coeffs[i] == 0 && NCa (a.coeffs[i]) / NCb (b.coeffs[i]) == r)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h", 2185, __FUNCTION__), 0 : 0))


                                                      ;

  return r;
}
# 2201 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly2<Cb, Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b, Cq *quotient)
{
  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;



  Cq q = NCa (a.coeffs[0]) / NCb (b);
  if (!a.is_constant ())
    return false;
  *quotient = q;
  return true;
}

template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient)
{


  typedef typename poly_result<Ca, Cb>::cast NCa;
  typedef typename poly_result<Cb, Ca>::cast NCb;
  typedef typename poly_int_traits<Ca>::int_type ICa;
  typedef typename poly_int_traits<Cb>::int_type ICb;
  typedef typename poly_result<typename poly_int_traits<Ca>::coeff_type, typename poly_int_traits<Cb>::coeff_type>::type C;
  C q = NCa (a.coeffs[0]) / NCb (b.coeffs[0]);
# 2277 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  bool rem_p = NCa (a.coeffs[0]) % NCb (b.coeffs[0]) != 0;
  for (unsigned int i = 1; i < N; ++i)
    {
      if (b.coeffs[i] == ICb (0))
 {

   if (a.coeffs[i] != ICa (0))
     return false;
 }
      else
 {
   if (q == 0)
     {

       if (a.coeffs[i] != ICa (0))
  {


    C neg_abs_a = (a.coeffs[i] < 0 ? a.coeffs[i] : -a.coeffs[i]);
    C neg_abs_b = (b.coeffs[i] < 0 ? b.coeffs[i] : -b.coeffs[i]);
    if (neg_abs_a < neg_abs_b)
      return false;
    rem_p = true;
  }
     }
   else
     {

       if (NCa (a.coeffs[i]) / NCb (b.coeffs[i]) != q)
  return false;
       if (NCa (a.coeffs[i]) % NCb (b.coeffs[i]) != 0)
  rem_p = true;
     }
 }
    }




  if (rem_p && (!ordered_p (a, ICa (0)) || !ordered_p (b, ICb (0))))
    return false;

  *quotient = q;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cq, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   Cq *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a - *quotient * b;
  return true;
}
# 2345 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient)
{

  for (unsigned int i = 1; i < N; ++i)
    if (a.coeffs[i] % b != 0)
      return false;
  for (unsigned int i = 0; i < N; ++i)
    quotient->coeffs[i] = a.coeffs[i] / b;
  return true;
}



template<unsigned int N, typename Ca, typename Cb, typename Cq, typename Cr>
inline typename if_nonpoly<Cb, bool>::type
can_div_trunc_p (const poly_int_pod<N, Ca> &a, Cb b,
   poly_int_pod<N, Cq> *quotient, Cr *remainder)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  *remainder = a.coeffs[0] % b;
  return true;
}







template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline bool
can_div_trunc_p (const poly_int_pod<N, Ca> &a,
   const poly_int_pod<N, Cb> &b,
   poly_int_pod<N, Cq> *quotient)
{
  if (b.is_constant ())
    return can_div_trunc_p (a, b.coeffs[0], quotient);
  if (!can_div_trunc_p (a, b, &quotient->coeffs[0]))
    return false;
  for (unsigned int i = 1; i < N; ++i)
    quotient->coeffs[i] = 0;
  return true;
}
# 2401 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<unsigned int N, typename Ca, typename Cb, typename Cq>
inline typename if_nonpoly<Cq, bool>::type
can_div_away_from_zero_p (const poly_int_pod<N, Ca> &a,
     const poly_int_pod<N, Cb> &b,
     Cq *quotient)
{
  if (!can_div_trunc_p (a, b, quotient))
    return false;
  if (maybe_ne (*quotient * b, a))
    *quotient += (*quotient < 0 ? -1 : 1);
  return true;
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file, signop sgn)
{
  if (value.is_constant ())
    print_dec (value.coeffs[0], file, sgn);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_dec (value.coeffs[i], file, sgn);
   fputc (i == N - 1 ? ']' : ',', file);
 }
    }
}




template<unsigned int N, typename C>
void
print_dec (const poly_int_pod<N, C> &value, FILE *file)
{
  static_assert ((poly_coeff_traits<C>::signedness >= 0), "poly_coeff_traits<C>::signedness >= 0");
  print_dec (value, file,
      poly_coeff_traits<C>::signedness ? SIGNED : UNSIGNED);
}



template<unsigned int N, typename C>
void
print_hex (const poly_int_pod<N, C> &value, FILE *file)
{
  if (value.is_constant ())
    print_hex (value.coeffs[0], file);
  else
    {
      fprintf (file, "[");
      for (unsigned int i = 0; i < N; ++i)
 {
   print_hex (value.coeffs[i], file);
   fputc (i == N - 1 ? ']' : ',', file);
 }
    }
}
# 2482 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
template<typename T1, typename T2,
  typename Res = typename poly_result<typename poly_int_traits<typename poly_result<typename poly_int_traits<T1>::coeff_type, typename poly_int_traits<T2>::coeff_type>::type>::coeff_type, typename poly_int_traits<unsigned long>::coeff_type>::type
                               >
struct poly_span_traits
{
  template<typename T>
  static const T &cast (const T &x) { return x; }
};

template<typename T1, typename T2>
struct poly_span_traits<T1, T2, unsigned long>
{
  template<typename T>
  static typename if_nonpoly<T, unsigned long>::type
  cast (const T &x) { return x; }

  template<unsigned int N, typename T>
  static poly_int<N, unsigned long>
  cast (const poly_int_pod<N, T> &x) { return x; }
};




template<typename T>
inline bool
known_size_p (const T &a)
{
  return maybe_ne (a, typename poly_int_traits<T>::int_type (-1));
}





template<typename T1, typename T2, typename T3>
inline bool
maybe_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  if ((!maybe_le (pos, val)))
    return false;
  if (!known_size_p (size))
    return true;
  if ((poly_int_traits<T1>::num_coeffs > 1
       || poly_int_traits<T2>::num_coeffs > 1)
      && maybe_lt (val, pos))


    return true;
  return maybe_lt (start_span::cast (val) - start_span::cast (pos),
     size_span::cast (size));
}





template<typename T1, typename T2, typename T3>
inline bool
known_in_range_p (const T1 &val, const T2 &pos, const T3 &size)
{
  typedef poly_span_traits<T1, T2> start_span;
  typedef poly_span_traits<T3, T3> size_span;
  return (known_size_p (size)
   && (!maybe_lt (val, pos))
   && (!maybe_le (size_span::cast (size), start_span::cast (val) - start_span::cast (pos)))
                                );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_maybe_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  if (maybe_in_range_p (pos2, pos1, size1))
    return maybe_ne (size2, typename poly_int_traits<T4>::int_type (0));
  if (maybe_in_range_p (pos1, pos2, size2))
    return maybe_ne (size1, typename poly_int_traits<T2>::int_type (0));
  return false;
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
ranges_known_overlap_p (const T1 &pos1, const T2 &size1,
   const T3 &pos2, const T4 &size2)
{
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T2> size1_span;
  typedef poly_span_traits<T4, T4> size2_span;
# 2593 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int.h"
  return (known_size_p (size1)
   && known_size_p (size2)
   && (!maybe_le (size1_span::cast (size1), start_span::cast (pos2) - start_span::cast (lower_bound (pos1, pos2))))


   && (!maybe_le (size2_span::cast (size2), start_span::cast (pos1) - start_span::cast (lower_bound (pos1, pos2))))

                                  );
}





template<typename T1, typename T2, typename T3, typename T4>
inline bool
known_subrange_p (const T1 &pos1, const T2 &size1,
    const T3 &pos2, const T4 &size2)
{
  typedef typename poly_int_traits<T2>::coeff_type C2;
  typedef poly_span_traits<T1, T3> start_span;
  typedef poly_span_traits<T2, T4> size_span;
  return ((!maybe_le (size1, typename poly_int_traits<T2>::int_type (0)))
   && (poly_coeff_traits<C2>::signedness > 0
       || known_size_p (size1))
   && known_size_p (size2)
   && (!maybe_lt (pos1, pos2))
   && (!maybe_lt (size2, size1))
   && (!maybe_lt (size_span::cast (size2) - size_span::cast (size1), start_span::cast (pos1) - start_span::cast (pos2)))
                                                           );
}





template<typename T>
inline typename if_nonpoly<T, bool>::type
endpoint_representable_p (const T &pos, const T &size)
{
  return (!known_size_p (size)
   || pos <= poly_coeff_traits<T>::max_value - size);
}

template<unsigned int N, typename C>
inline bool
endpoint_representable_p (const poly_int_pod<N, C> &pos,
     const poly_int_pod<N, C> &size)
{
  if (known_size_p (size))
    for (unsigned int i = 0; i < N; ++i)
      if (pos.coeffs[i] > poly_coeff_traits<C>::max_value - size.coeffs[i])
 return false;
  return true;
}

template<unsigned int N, typename C>
void
gt_ggc_mx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *)
{
}

template<unsigned int N, typename C>
void
gt_pch_nx (poly_int_pod<N, C> *, void (*) (void *, void *), void *)
{
}
# 467 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/poly-int-types.h"
typedef poly_int_pod<1, unsigned short> poly_uint16_pod;
typedef poly_int_pod<1, long> poly_int64_pod;
typedef poly_int_pod<1,
       unsigned long> poly_uint64_pod;
typedef poly_int_pod<1, offset_int> poly_offset_int_pod;
typedef poly_int_pod<1, wide_int> poly_wide_int_pod;
typedef poly_int_pod<1, widest_int> poly_widest_int_pod;

typedef poly_int<1, unsigned short> poly_uint16;
typedef poly_int<1, long> poly_int64;
typedef poly_int<1, unsigned long> poly_uint64;
typedef poly_int<1, offset_int> poly_offset_int;
typedef poly_int<1, wide_int> poly_wide_int;
typedef poly_int<1, wide_int_ref> poly_wide_int_ref;
typedef poly_int<1, widest_int> poly_widest_int;
# 468 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "./insn-modes-inline.h" 1
# 10 "./insn-modes-inline.h"
inline __attribute__((__always_inline__))



poly_uint16
mode_size_inline (machine_mode mode)
{
  extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 18, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 2;
    case E_CP2QImode: return 4;
    case E_CHImode: return 4;
    case E_CP2HImode: return 8;
    case E_CSImode: return 8;
    case E_CDImode: return 16;
    case E_CTImode: return 32;
    case E_CPOImode: return 64;
    case E_COImode: return 64;
    case E_CXImode: return 128;
    case E_SCmode: return 8;
    case E_DCmode: return 16;
    case E_TCmode: return 32;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 4;
    case E_V1SImode: return 4;
    case E_V8QImode: return 8;
    case E_V4HImode: return 8;
    case E_V2SImode: return 8;
    case E_V1DImode: return 8;
    case E_V12QImode: return 12;
    case E_V6HImode: return 12;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 16;
    case E_V4SImode: return 16;
    case E_V2DImode: return 16;
    case E_V1TImode: return 16;
    case E_V32QImode: return 32;
    case E_V16HImode: return 32;
    case E_V8SImode: return 32;
    case E_V4DImode: return 32;
    case E_V2TImode: return 32;
    case E_V64QImode: return 64;
    case E_V32HImode: return 64;
    case E_V16SImode: return 64;
    case E_V8DImode: return 64;
    case E_V4TImode: return 64;
    case E_V128QImode: return 128;
    case E_V64HImode: return 128;
    case E_V32SImode: return 128;
    case E_V16DImode: return 128;
    case E_V8TImode: return 128;
    case E_V64SImode: return 256;
    case E_V2SFmode: return 8;
    case E_V4SFmode: return 16;
    case E_V2DFmode: return 16;
    case E_V8SFmode: return 32;
    case E_V4DFmode: return 32;
    case E_V2TFmode: return 32;
    case E_V16SFmode: return 64;
    case E_V8DFmode: return 64;
    case E_V4TFmode: return 64;
    case E_V32SFmode: return 128;
    case E_V16DFmode: return 128;
    case E_V8TFmode: return 128;
    case E_V64SFmode: return 256;
    case E_V32DFmode: return 256;
    case E_V16TFmode: return 256;
    default: return mode_size[mode];
    }
}


inline __attribute__((__always_inline__))



poly_uint16
mode_nunits_inline (machine_mode mode)
{
  extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 1;
    case E_CCGCmode: return 1;
    case E_CCGOCmode: return 1;
    case E_CCNOmode: return 1;
    case E_CCGZmode: return 1;
    case E_CCAmode: return 1;
    case E_CCCmode: return 1;
    case E_CCOmode: return 1;
    case E_CCPmode: return 1;
    case E_CCSmode: return 1;
    case E_CCZmode: return 1;
    case E_CCFPmode: return 1;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 1;
    case E_SImode: return 1;
    case E_DImode: return 1;
    case E_TImode: return 1;
    case E_OImode: return 1;
    case E_XImode: return 1;
    case E_P2QImode: return 1;
    case E_P2HImode: return 1;
    case E_POImode: return 1;
    case E_QQmode: return 1;
    case E_HQmode: return 1;
    case E_SQmode: return 1;
    case E_DQmode: return 1;
    case E_TQmode: return 1;
    case E_UQQmode: return 1;
    case E_UHQmode: return 1;
    case E_USQmode: return 1;
    case E_UDQmode: return 1;
    case E_UTQmode: return 1;
    case E_HAmode: return 1;
    case E_SAmode: return 1;
    case E_DAmode: return 1;
    case E_TAmode: return 1;
    case E_UHAmode: return 1;
    case E_USAmode: return 1;
    case E_UDAmode: return 1;
    case E_UTAmode: return 1;
    case E_SFmode: return 1;
    case E_DFmode: return 1;
    case E_XFmode: return 1;
    case E_TFmode: return 1;
    case E_SDmode: return 1;
    case E_DDmode: return 1;
    case E_TDmode: return 1;
    case E_CQImode: return 2;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 2;
    case E_CSImode: return 2;
    case E_CDImode: return 2;
    case E_CTImode: return 2;
    case E_CPOImode: return 2;
    case E_COImode: return 2;
    case E_CXImode: return 2;
    case E_SCmode: return 2;
    case E_DCmode: return 2;
    case E_XCmode: return 2;
    case E_TCmode: return 2;
    case E_V2QImode: return 2;
    case E_V4QImode: return 4;
    case E_V2HImode: return 2;
    case E_V1SImode: return 1;
    case E_V8QImode: return 8;
    case E_V4HImode: return 4;
    case E_V2SImode: return 2;
    case E_V1DImode: return 1;
    case E_V12QImode: return 12;
    case E_V6HImode: return 6;
    case E_V14QImode: return 14;
    case E_V16QImode: return 16;
    case E_V8HImode: return 8;
    case E_V4SImode: return 4;
    case E_V2DImode: return 2;
    case E_V1TImode: return 1;
    case E_V32QImode: return 32;
    case E_V16HImode: return 16;
    case E_V8SImode: return 8;
    case E_V4DImode: return 4;
    case E_V2TImode: return 2;
    case E_V64QImode: return 64;
    case E_V32HImode: return 32;
    case E_V16SImode: return 16;
    case E_V8DImode: return 8;
    case E_V4TImode: return 4;
    case E_V128QImode: return 128;
    case E_V64HImode: return 64;
    case E_V32SImode: return 32;
    case E_V16DImode: return 16;
    case E_V8TImode: return 8;
    case E_V64SImode: return 64;
    case E_V2SFmode: return 2;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 2;
    case E_V8SFmode: return 8;
    case E_V4DFmode: return 4;
    case E_V2TFmode: return 2;
    case E_V16SFmode: return 16;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 4;
    case E_V32SFmode: return 32;
    case E_V16DFmode: return 16;
    case E_V8TFmode: return 8;
    case E_V64SFmode: return 64;
    case E_V32DFmode: return 32;
    case E_V16TFmode: return 16;
    default: return mode_nunits[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_inner_inline (machine_mode mode)
{
  extern const unsigned char mode_inner[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 269, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return E_VOIDmode;
    case E_BLKmode: return E_BLKmode;
    case E_CCmode: return E_CCmode;
    case E_CCGCmode: return E_CCGCmode;
    case E_CCGOCmode: return E_CCGOCmode;
    case E_CCNOmode: return E_CCNOmode;
    case E_CCGZmode: return E_CCGZmode;
    case E_CCAmode: return E_CCAmode;
    case E_CCCmode: return E_CCCmode;
    case E_CCOmode: return E_CCOmode;
    case E_CCPmode: return E_CCPmode;
    case E_CCSmode: return E_CCSmode;
    case E_CCZmode: return E_CCZmode;
    case E_CCFPmode: return E_CCFPmode;
    case E_BImode: return E_BImode;
    case E_QImode: return E_QImode;
    case E_HImode: return E_HImode;
    case E_SImode: return E_SImode;
    case E_DImode: return E_DImode;
    case E_TImode: return E_TImode;
    case E_OImode: return E_OImode;
    case E_XImode: return E_XImode;
    case E_P2QImode: return E_P2QImode;
    case E_P2HImode: return E_P2HImode;
    case E_POImode: return E_POImode;
    case E_QQmode: return E_QQmode;
    case E_HQmode: return E_HQmode;
    case E_SQmode: return E_SQmode;
    case E_DQmode: return E_DQmode;
    case E_TQmode: return E_TQmode;
    case E_UQQmode: return E_UQQmode;
    case E_UHQmode: return E_UHQmode;
    case E_USQmode: return E_USQmode;
    case E_UDQmode: return E_UDQmode;
    case E_UTQmode: return E_UTQmode;
    case E_HAmode: return E_HAmode;
    case E_SAmode: return E_SAmode;
    case E_DAmode: return E_DAmode;
    case E_TAmode: return E_TAmode;
    case E_UHAmode: return E_UHAmode;
    case E_USAmode: return E_USAmode;
    case E_UDAmode: return E_UDAmode;
    case E_UTAmode: return E_UTAmode;
    case E_SFmode: return E_SFmode;
    case E_DFmode: return E_DFmode;
    case E_XFmode: return E_XFmode;
    case E_TFmode: return E_TFmode;
    case E_SDmode: return E_SDmode;
    case E_DDmode: return E_DDmode;
    case E_TDmode: return E_TDmode;
    case E_CQImode: return E_QImode;
    case E_CP2QImode: return E_P2QImode;
    case E_CHImode: return E_HImode;
    case E_CP2HImode: return E_P2HImode;
    case E_CSImode: return E_SImode;
    case E_CDImode: return E_DImode;
    case E_CTImode: return E_TImode;
    case E_CPOImode: return E_POImode;
    case E_COImode: return E_OImode;
    case E_CXImode: return E_XImode;
    case E_SCmode: return E_SFmode;
    case E_DCmode: return E_DFmode;
    case E_XCmode: return E_XFmode;
    case E_TCmode: return E_TFmode;
    case E_V2QImode: return E_QImode;
    case E_V4QImode: return E_QImode;
    case E_V2HImode: return E_HImode;
    case E_V1SImode: return E_SImode;
    case E_V8QImode: return E_QImode;
    case E_V4HImode: return E_HImode;
    case E_V2SImode: return E_SImode;
    case E_V1DImode: return E_DImode;
    case E_V12QImode: return E_QImode;
    case E_V6HImode: return E_HImode;
    case E_V14QImode: return E_QImode;
    case E_V16QImode: return E_QImode;
    case E_V8HImode: return E_HImode;
    case E_V4SImode: return E_SImode;
    case E_V2DImode: return E_DImode;
    case E_V1TImode: return E_TImode;
    case E_V32QImode: return E_QImode;
    case E_V16HImode: return E_HImode;
    case E_V8SImode: return E_SImode;
    case E_V4DImode: return E_DImode;
    case E_V2TImode: return E_TImode;
    case E_V64QImode: return E_QImode;
    case E_V32HImode: return E_HImode;
    case E_V16SImode: return E_SImode;
    case E_V8DImode: return E_DImode;
    case E_V4TImode: return E_TImode;
    case E_V128QImode: return E_QImode;
    case E_V64HImode: return E_HImode;
    case E_V32SImode: return E_SImode;
    case E_V16DImode: return E_DImode;
    case E_V8TImode: return E_TImode;
    case E_V64SImode: return E_SImode;
    case E_V2SFmode: return E_SFmode;
    case E_V4SFmode: return E_SFmode;
    case E_V2DFmode: return E_DFmode;
    case E_V8SFmode: return E_SFmode;
    case E_V4DFmode: return E_DFmode;
    case E_V2TFmode: return E_TFmode;
    case E_V16SFmode: return E_SFmode;
    case E_V8DFmode: return E_DFmode;
    case E_V4TFmode: return E_TFmode;
    case E_V32SFmode: return E_SFmode;
    case E_V16DFmode: return E_DFmode;
    case E_V8TFmode: return E_TFmode;
    case E_V64SFmode: return E_SFmode;
    case E_V32DFmode: return E_DFmode;
    case E_V16TFmode: return E_TFmode;
    default: return mode_inner[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned char
mode_unit_size_inline (machine_mode mode)
{
  extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 396, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4;
    case E_CCGCmode: return 4;
    case E_CCGOCmode: return 4;
    case E_CCNOmode: return 4;
    case E_CCGZmode: return 4;
    case E_CCAmode: return 4;
    case E_CCCmode: return 4;
    case E_CCOmode: return 4;
    case E_CCPmode: return 4;
    case E_CCSmode: return 4;
    case E_CCZmode: return 4;
    case E_CCFPmode: return 4;
    case E_BImode: return 1;
    case E_QImode: return 1;
    case E_HImode: return 2;
    case E_SImode: return 4;
    case E_DImode: return 8;
    case E_TImode: return 16;
    case E_OImode: return 32;
    case E_XImode: return 64;
    case E_P2QImode: return 2;
    case E_P2HImode: return 4;
    case E_POImode: return 32;
    case E_QQmode: return 1;
    case E_HQmode: return 2;
    case E_SQmode: return 4;
    case E_DQmode: return 8;
    case E_TQmode: return 16;
    case E_UQQmode: return 1;
    case E_UHQmode: return 2;
    case E_USQmode: return 4;
    case E_UDQmode: return 8;
    case E_UTQmode: return 16;
    case E_HAmode: return 2;
    case E_SAmode: return 4;
    case E_DAmode: return 8;
    case E_TAmode: return 16;
    case E_UHAmode: return 2;
    case E_USAmode: return 4;
    case E_UDAmode: return 8;
    case E_UTAmode: return 16;
    case E_SFmode: return 4;
    case E_DFmode: return 8;
    case E_TFmode: return 16;
    case E_SDmode: return 4;
    case E_DDmode: return 8;
    case E_TDmode: return 16;
    case E_CQImode: return 1;
    case E_CP2QImode: return 2;
    case E_CHImode: return 2;
    case E_CP2HImode: return 4;
    case E_CSImode: return 4;
    case E_CDImode: return 8;
    case E_CTImode: return 16;
    case E_CPOImode: return 32;
    case E_COImode: return 32;
    case E_CXImode: return 64;
    case E_SCmode: return 4;
    case E_DCmode: return 8;
    case E_TCmode: return 16;
    case E_V2QImode: return 1;
    case E_V4QImode: return 1;
    case E_V2HImode: return 2;
    case E_V1SImode: return 4;
    case E_V8QImode: return 1;
    case E_V4HImode: return 2;
    case E_V2SImode: return 4;
    case E_V1DImode: return 8;
    case E_V12QImode: return 1;
    case E_V6HImode: return 2;
    case E_V14QImode: return 1;
    case E_V16QImode: return 1;
    case E_V8HImode: return 2;
    case E_V4SImode: return 4;
    case E_V2DImode: return 8;
    case E_V1TImode: return 16;
    case E_V32QImode: return 1;
    case E_V16HImode: return 2;
    case E_V8SImode: return 4;
    case E_V4DImode: return 8;
    case E_V2TImode: return 16;
    case E_V64QImode: return 1;
    case E_V32HImode: return 2;
    case E_V16SImode: return 4;
    case E_V8DImode: return 8;
    case E_V4TImode: return 16;
    case E_V128QImode: return 1;
    case E_V64HImode: return 2;
    case E_V32SImode: return 4;
    case E_V16DImode: return 8;
    case E_V8TImode: return 16;
    case E_V64SImode: return 4;
    case E_V2SFmode: return 4;
    case E_V4SFmode: return 4;
    case E_V2DFmode: return 8;
    case E_V8SFmode: return 4;
    case E_V4DFmode: return 8;
    case E_V2TFmode: return 16;
    case E_V16SFmode: return 4;
    case E_V8DFmode: return 8;
    case E_V4TFmode: return 16;
    case E_V32SFmode: return 4;
    case E_V16DFmode: return 8;
    case E_V8TFmode: return 16;
    case E_V64SFmode: return 4;
    case E_V32DFmode: return 8;
    case E_V16TFmode: return 16;
    default: return mode_unit_size[mode];
    }
}


inline __attribute__((__always_inline__))



unsigned short
mode_unit_precision_inline (machine_mode mode)
{
  extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
  ((void)(!(mode >= 0 && mode < NUM_MACHINE_MODES) ? fancy_abort ("./insn-modes-inline.h", 521, __FUNCTION__), 0 : 0));
  switch (mode)
    {
    case E_VOIDmode: return 0;
    case E_BLKmode: return 0;
    case E_CCmode: return 4*(8);
    case E_CCGCmode: return 4*(8);
    case E_CCGOCmode: return 4*(8);
    case E_CCNOmode: return 4*(8);
    case E_CCGZmode: return 4*(8);
    case E_CCAmode: return 4*(8);
    case E_CCCmode: return 4*(8);
    case E_CCOmode: return 4*(8);
    case E_CCPmode: return 4*(8);
    case E_CCSmode: return 4*(8);
    case E_CCZmode: return 4*(8);
    case E_CCFPmode: return 4*(8);
    case E_BImode: return 1;
    case E_QImode: return 1*(8);
    case E_HImode: return 2*(8);
    case E_SImode: return 4*(8);
    case E_DImode: return 8*(8);
    case E_TImode: return 16*(8);
    case E_OImode: return 32*(8);
    case E_XImode: return 64*(8);
    case E_P2QImode: return 16;
    case E_P2HImode: return 32;
    case E_POImode: return 160;
    case E_QQmode: return 1*(8);
    case E_HQmode: return 2*(8);
    case E_SQmode: return 4*(8);
    case E_DQmode: return 8*(8);
    case E_TQmode: return 16*(8);
    case E_UQQmode: return 1*(8);
    case E_UHQmode: return 2*(8);
    case E_USQmode: return 4*(8);
    case E_UDQmode: return 8*(8);
    case E_UTQmode: return 16*(8);
    case E_HAmode: return 2*(8);
    case E_SAmode: return 4*(8);
    case E_DAmode: return 8*(8);
    case E_TAmode: return 16*(8);
    case E_UHAmode: return 2*(8);
    case E_USAmode: return 4*(8);
    case E_UDAmode: return 8*(8);
    case E_UTAmode: return 16*(8);
    case E_SFmode: return 4*(8);
    case E_DFmode: return 8*(8);
    case E_XFmode: return 80;
    case E_TFmode: return 16*(8);
    case E_SDmode: return 4*(8);
    case E_DDmode: return 8*(8);
    case E_TDmode: return 16*(8);
    case E_CQImode: return 1*(8);
    case E_CP2QImode: return 16;
    case E_CHImode: return 2*(8);
    case E_CP2HImode: return 32;
    case E_CSImode: return 4*(8);
    case E_CDImode: return 8*(8);
    case E_CTImode: return 16*(8);
    case E_CPOImode: return 160;
    case E_COImode: return 32*(8);
    case E_CXImode: return 64*(8);
    case E_SCmode: return 4*(8);
    case E_DCmode: return 8*(8);
    case E_XCmode: return 80;
    case E_TCmode: return 16*(8);
    case E_V2QImode: return 1*(8);
    case E_V4QImode: return 1*(8);
    case E_V2HImode: return 2*(8);
    case E_V1SImode: return 4*(8);
    case E_V8QImode: return 1*(8);
    case E_V4HImode: return 2*(8);
    case E_V2SImode: return 4*(8);
    case E_V1DImode: return 8*(8);
    case E_V12QImode: return 1*(8);
    case E_V6HImode: return 2*(8);
    case E_V14QImode: return 1*(8);
    case E_V16QImode: return 1*(8);
    case E_V8HImode: return 2*(8);
    case E_V4SImode: return 4*(8);
    case E_V2DImode: return 8*(8);
    case E_V1TImode: return 16*(8);
    case E_V32QImode: return 1*(8);
    case E_V16HImode: return 2*(8);
    case E_V8SImode: return 4*(8);
    case E_V4DImode: return 8*(8);
    case E_V2TImode: return 16*(8);
    case E_V64QImode: return 1*(8);
    case E_V32HImode: return 2*(8);
    case E_V16SImode: return 4*(8);
    case E_V8DImode: return 8*(8);
    case E_V4TImode: return 16*(8);
    case E_V128QImode: return 1*(8);
    case E_V64HImode: return 2*(8);
    case E_V32SImode: return 4*(8);
    case E_V16DImode: return 8*(8);
    case E_V8TImode: return 16*(8);
    case E_V64SImode: return 4*(8);
    case E_V2SFmode: return 4*(8);
    case E_V4SFmode: return 4*(8);
    case E_V2DFmode: return 8*(8);
    case E_V8SFmode: return 4*(8);
    case E_V4DFmode: return 8*(8);
    case E_V2TFmode: return 16*(8);
    case E_V16SFmode: return 4*(8);
    case E_V8DFmode: return 8*(8);
    case E_V4TFmode: return 16*(8);
    case E_V32SFmode: return 4*(8);
    case E_V16DFmode: return 8*(8);
    case E_V8TFmode: return 16*(8);
    case E_V64SFmode: return 4*(8);
    case E_V32DFmode: return 8*(8);
    case E_V16TFmode: return 16*(8);
    default: return mode_unit_precision[mode];
    }
}
# 469 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
typedef opt_mode<machine_mode> opt_machine_mode;

extern poly_uint16_pod mode_size[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_inner[NUM_MACHINE_MODES];
extern const poly_uint16_pod mode_nunits[NUM_MACHINE_MODES];
extern unsigned char mode_unit_size[NUM_MACHINE_MODES];
extern const unsigned short mode_unit_precision[NUM_MACHINE_MODES];
extern const unsigned char mode_wider[NUM_MACHINE_MODES];
extern const unsigned char mode_2xwider[NUM_MACHINE_MODES];

template<typename T>
struct mode_traits
{
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
  enum from_int { dummy = MAX_MACHINE_MODE };

};

template<>
struct mode_traits<machine_mode>
{

  typedef machine_mode from_int;
};
# 89 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern const char * const mode_name[NUM_MACHINE_MODES];




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mode-classes.def" 1
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h" 2

enum mode_class { MODE_RANDOM, MODE_CC, MODE_INT, MODE_PARTIAL_INT, MODE_FRACT, MODE_UFRACT, MODE_ACCUM, MODE_UACCUM, MODE_FLOAT, MODE_DECIMAL_FLOAT, MODE_COMPLEX_INT, MODE_COMPLEX_FLOAT, MODE_VECTOR_BOOL, MODE_VECTOR_INT, MODE_VECTOR_FRACT, MODE_VECTOR_UFRACT, MODE_VECTOR_ACCUM, MODE_VECTOR_UACCUM, MODE_VECTOR_FLOAT, MAX_MODE_CLASS };






extern const unsigned char mode_class[NUM_MACHINE_MODES];
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
class opt_mode
{
public:
  enum from_int { dummy = MAX_MACHINE_MODE };

  inline __attribute__ ((always_inline)) constexpr opt_mode () : m_mode (E_VOIDmode) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (const T &m) : m_mode (m) {}
  template<typename U>
  inline __attribute__ ((always_inline)) constexpr opt_mode (const U &m) : m_mode (T (m)) {}
  inline __attribute__ ((always_inline)) constexpr opt_mode (from_int m) : m_mode (machine_mode (m)) {}

  machine_mode else_void () const;
  machine_mode else_blk () const { return else_mode (((void) 0, E_BLKmode)); }
  machine_mode else_mode (machine_mode) const;
  T require () const;

  bool exists () const;
  template<typename U> bool exists (U *) const;

  bool operator== (const T &m) const { return m_mode == m; }
  bool operator!= (const T &m) const { return m_mode != m; }

private:
  machine_mode m_mode;
};




template<typename T>
inline __attribute__ ((always_inline)) machine_mode
opt_mode<T>::else_void () const
{
  return m_mode;
}



template<typename T>
inline machine_mode
opt_mode<T>::else_mode (machine_mode fallback) const
{
  return m_mode == E_VOIDmode ? fallback : m_mode;
}



template<typename T>
inline T
opt_mode<T>::require () const
{
  ((void)(!(m_mode != E_VOIDmode) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 293, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m_mode);
}



template<typename T>
inline __attribute__ ((always_inline)) bool
opt_mode<T>::exists () const
{
  return m_mode != E_VOIDmode;
}



template<typename T>
template<typename U>
inline bool
opt_mode<T>::exists (U *mode) const
{
  if (m_mode != E_VOIDmode)
    {
      *mode = T (typename mode_traits<T>::from_int (m_mode));
      return true;
    }
  return false;
}



template<typename T>
struct pod_mode
{
  typedef typename mode_traits<T>::from_int from_int;
  typedef typename T::measurement_type measurement_type;

  machine_mode m_mode;
  inline __attribute__ ((always_inline)) constexpr
  operator machine_mode () const { return m_mode; }

  inline __attribute__ ((always_inline)) constexpr
  operator T () const { return from_int (m_mode); }

  inline __attribute__ ((always_inline)) pod_mode &operator = (const T &m) { m_mode = m; return *this; }
};



template<typename T>
inline bool
is_a (machine_mode m)
{
  return T::includes_p (m);
}

template<typename T, typename U>
inline bool
is_a (const opt_mode<U> &m)
{
  return T::includes_p (m.else_void ());
}



template<typename T>
inline T
as_a (machine_mode m)
{
  ((void)(!(T::includes_p (m)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h", 361, __FUNCTION__), 0 : 0));
  return typename mode_traits<T>::from_int (m);
}

template<typename T, typename U>
inline T
as_a (const opt_mode<U> &m)
{
  return as_a <T> (m.else_void ());
}



template<typename T>
inline opt_mode<T>
dyn_cast (machine_mode m)
{
  if (T::includes_p (m))
    return T (typename mode_traits<T>::from_int (m));
  return opt_mode<T> ();
}

template<typename T, typename U>
inline opt_mode<T>
dyn_cast (const opt_mode<U> &m)
{
  return dyn_cast <T> (m.else_void ());
}




template<typename T, typename U>
inline bool
is_a (machine_mode m, U *result)
{
  if (T::includes_p (m))
    {
      *result = T (typename mode_traits<T>::from_int (m));
      return true;
    }
  return false;
}


class scalar_int_mode
{
public:
  typedef mode_traits<scalar_int_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_int_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_int_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_INT || ((enum mode_class) mode_class[m]) == MODE_PARTIAL_INT);
}


class scalar_float_mode
{
public:
  typedef mode_traits<scalar_float_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_float_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_float_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_float_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_FLOAT || ((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT);
}


class scalar_mode
{
public:
  typedef mode_traits<scalar_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) scalar_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  scalar_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
scalar_mode::includes_p (machine_mode m)
{
  switch (((enum mode_class) mode_class[m]))
    {
    case MODE_INT:
    case MODE_PARTIAL_INT:
    case MODE_FRACT:
    case MODE_UFRACT:
    case MODE_ACCUM:
    case MODE_UACCUM:
    case MODE_FLOAT:
    case MODE_DECIMAL_FLOAT:
      return true;
    default:
      return false;
    }
}


class complex_mode
{
public:
  typedef mode_traits<complex_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) complex_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  complex_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
complex_mode::includes_p (machine_mode m)
{
  return (((enum mode_class) mode_class[m]) == MODE_COMPLEX_INT || ((enum mode_class) mode_class[m]) == MODE_COMPLEX_FLOAT);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bytes (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_size_inline (mode) : mode_size[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_bits (machine_mode mode)
{
  return mode_to_bytes (mode) * (8);
}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_precision (machine_mode mode)
{
  return mode_precision[mode];
}



inline __attribute__ ((always_inline)) scalar_mode
mode_to_inner (machine_mode mode)
{

  return scalar_mode::from_int (__builtin_constant_p (mode)
    ? mode_inner_inline (mode)
    : mode_inner[mode]);



}



inline __attribute__ ((always_inline)) unsigned char
mode_to_unit_size (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_size_inline (mode) : mode_unit_size[mode]);



}



inline __attribute__ ((always_inline)) unsigned short
mode_to_unit_precision (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_unit_precision_inline (mode) : mode_unit_precision[mode]);



}



inline __attribute__ ((always_inline)) poly_uint16
mode_to_nunits (machine_mode mode)
{

  return (__builtin_constant_p (mode)
   ? mode_nunits_inline (mode) : mode_nunits[mode]);



}






inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_SIZE (machine_mode mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_SIZE (const T &mode)
{
  return mode_to_bytes (mode).coeffs[0];
}







inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_BITSIZE (machine_mode mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_BITSIZE (const T &mode)
{
  return mode_to_bits (mode).coeffs[0];
}
# 679 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_PRECISION (machine_mode mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_PRECISION (const T &mode)
{
  return mode_to_precision (mode).coeffs[0];
}



extern const unsigned char mode_ibit[NUM_MACHINE_MODES];



extern const unsigned char mode_fbit[NUM_MACHINE_MODES];





extern const unsigned long mode_mask_array[NUM_MACHINE_MODES];
# 737 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline __attribute__ ((always_inline)) poly_uint16
GET_MODE_NUNITS (machine_mode mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_poly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode);
}

template<typename T>
inline __attribute__ ((always_inline)) typename if_nonpoly<typename T::measurement_type>::type
GET_MODE_NUNITS (const T &mode)
{
  return mode_to_nunits (mode).coeffs[0];
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_WIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_wider[m]);
}




template<typename T>
inline __attribute__ ((always_inline)) opt_mode<T>
GET_MODE_2XWIDER_MODE (const T &m)
{
  return typename opt_mode<T>::from_int (mode_2xwider[m]);
}


extern const unsigned char mode_complex[NUM_MACHINE_MODES];






class fixed_size_mode
{
public:
  typedef mode_traits<fixed_size_mode>::from_int from_int;
  typedef unsigned short measurement_type;

  inline __attribute__ ((always_inline)) fixed_size_mode () {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (from_int m) : m_mode (machine_mode (m)) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_float_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const scalar_int_mode_pod &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr
  fixed_size_mode (const complex_mode &m) : m_mode (m) {}

  inline __attribute__ ((always_inline)) constexpr operator machine_mode () const { return m_mode; }

  static bool includes_p (machine_mode);

protected:
  machine_mode m_mode;
};



inline bool
fixed_size_mode::includes_p (machine_mode mode)
{
  return mode_to_bytes (mode).is_constant ();
}
# 841 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
extern opt_machine_mode mode_for_size (poly_uint64, enum mode_class, int);





inline opt_scalar_int_mode
int_mode_for_size (poly_uint64 size, int limit)
{
  return dyn_cast <scalar_int_mode> (mode_for_size (size, MODE_INT, limit));
}




inline opt_scalar_float_mode
float_mode_for_size (poly_uint64 size)
{
  return dyn_cast <scalar_float_mode> (mode_for_size (size, MODE_FLOAT, 0));
}



inline opt_scalar_float_mode
decimal_float_mode_for_size (unsigned int size)
{
  return dyn_cast <scalar_float_mode>
    (mode_for_size (size, MODE_DECIMAL_FLOAT, 0));
}

extern machine_mode smallest_mode_for_size (poly_uint64, enum mode_class);




inline scalar_int_mode
smallest_int_mode_for_size (poly_uint64 size)
{
  return as_a <scalar_int_mode> (smallest_mode_for_size (size, MODE_INT));
}

extern opt_scalar_int_mode int_mode_for_mode (machine_mode);
extern opt_machine_mode bitwise_mode_for_mode (machine_mode);
extern opt_machine_mode mode_for_vector (scalar_mode, poly_uint64);
extern opt_machine_mode related_vector_mode (machine_mode, scalar_mode,
          poly_uint64 = 0);
extern opt_machine_mode related_int_vector_mode (machine_mode);


class bit_field_mode_iterator
{
public:
  bit_field_mode_iterator (long, long,
      poly_int64, poly_int64,
      unsigned int, bool);
  bool next_mode (scalar_int_mode *);
  bool prefer_smaller_modes ();

private:
  opt_scalar_int_mode m_mode;


  long m_bitsize;
  long m_bitpos;
  poly_int64 m_bitregion_start;
  poly_int64 m_bitregion_end;
  unsigned int m_align;
  bool m_volatilep;
  int m_count;
};



extern bool get_best_mode (int, int, poly_uint64, poly_uint64, unsigned int,
      unsigned long, bool, scalar_int_mode *);



extern unsigned short mode_base_align[NUM_MACHINE_MODES];

extern unsigned get_mode_alignment (machine_mode);





extern const unsigned char class_narrowest_mode[MAX_MODE_CLASS];
# 939 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
inline T
get_narrowest_mode (T mode)
{
  return typename mode_traits<T>::from_int
    (class_narrowest_mode[((enum mode_class) mode_class[mode])]);
}




extern scalar_int_mode byte_mode;
extern scalar_int_mode word_mode;
extern scalar_int_mode ptr_mode;


extern void init_adjust_machine_modes (void);
# 964 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
inline bool
HWI_COMPUTABLE_MODE_P (machine_mode mode)
{
  machine_mode mme = mode;
  return ((((enum mode_class) mode_class[mme]) == MODE_INT || ((enum mode_class) mode_class[mme]) == MODE_PARTIAL_INT)
   && mode_to_precision (mme).coeffs[0] <= 64);
}

inline bool
HWI_COMPUTABLE_MODE_P (scalar_int_mode mode)
{
  return GET_MODE_PRECISION (mode) <= 64;
}

struct int_n_data_t {

  unsigned int bitsize;
  scalar_int_mode_pod m;

};



extern bool int_n_enabled_p[1];
extern const int_n_data_t int_n_data[1];




template<typename T>
inline bool
is_int_mode (machine_mode mode, T *int_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_INT)
    {
      *int_mode = scalar_int_mode (scalar_int_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_float_mode (machine_mode mode, T *float_mode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_FLOAT)
    {
      *float_mode = scalar_float_mode (scalar_float_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_int_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_INT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




template<typename T>
inline bool
is_complex_float_mode (machine_mode mode, T *cmode)
{
  if (((enum mode_class) mode_class[mode]) == MODE_COMPLEX_FLOAT)
    {
      *cmode = complex_mode (complex_mode::from_int (mode));
      return true;
    }
  return false;
}




inline bool
is_narrower_int_mode (machine_mode mode, scalar_int_mode limit)
{
  scalar_int_mode int_mode;
  return (is_a <scalar_int_mode> (mode, &int_mode)
   && GET_MODE_PRECISION (int_mode) < GET_MODE_PRECISION (limit));
}

namespace mode_iterator
{


  template<typename T>
  inline void
  start (opt_mode<T> *iter, enum mode_class mclass)
  {
    if (((machine_mode) class_narrowest_mode[mclass]) == E_VOIDmode)
      *iter = opt_mode<T> ();
    else
      *iter = as_a<T> (((machine_mode) class_narrowest_mode[mclass]));
  }

  inline void
  start (machine_mode *iter, enum mode_class mclass)
  {
    *iter = ((machine_mode) class_narrowest_mode[mclass]);
  }



  template<typename T>
  inline bool
  iterate_p (opt_mode<T> *iter)
  {
    return iter->exists ();
  }

  inline bool
  iterate_p (machine_mode *iter)
  {
    return *iter != E_VOIDmode;
  }




  template<typename T>
  inline void
  get_wider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_WIDER_MODE (iter->require ());
  }

  inline void
  get_wider (machine_mode *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).else_void ();
  }




  template<typename T>
  inline void
  get_known_wider (T *iter)
  {
    *iter = GET_MODE_WIDER_MODE (*iter).require ();
  }




  template<typename T>
  inline void
  get_2xwider (opt_mode<T> *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (iter->require ());
  }

  inline void
  get_2xwider (machine_mode *iter)
  {
    *iter = GET_MODE_2XWIDER_MODE (*iter).else_void ();
  }
}
# 1183 "/home/giulianob/gcc_git_gnu/gcc/gcc/machmode.h"
template<typename T>
void
gt_ggc_mx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *)
{
}

template<typename T>
void
gt_pch_nx (pod_mode<T> *, void (*) (void *, void *), void *)
{
}
# 470 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h" 1
# 49 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
struct double_int
{







  static double_int from_uhwi (unsigned long cst);
  static double_int from_shwi (long cst);
  static double_int from_pair (long high, unsigned long low);



  static double_int from_buffer (const unsigned char *buffer, int len);





  static double_int mask (unsigned prec);
  static double_int max_value (unsigned int prec, bool uns);
  static double_int min_value (unsigned int prec, bool uns);



  double_int &operator ++ ();
  double_int &operator -- ();
  double_int &operator *= (double_int);
  double_int &operator += (double_int);
  double_int &operator -= (double_int);
  double_int &operator &= (double_int);
  double_int &operator ^= (double_int);
  double_int &operator |= (double_int);





  long to_shwi () const;
  unsigned long to_uhwi () const;



  bool fits_uhwi () const;
  bool fits_shwi () const;
  bool fits_hwi (bool uns) const;



  int trailing_zeros () const;
  int popcount () const;



  bool multiple_of (double_int, bool, double_int *) const;







  double_int set_bit (unsigned) const;
  double_int mul_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int wide_mul_with_sign (double_int, bool unsigned_p,
     double_int *higher, bool *overflow) const;
  double_int add_with_sign (double_int, bool unsigned_p, bool *overflow) const;
  double_int sub_with_overflow (double_int, bool *overflow) const;
  double_int neg_with_overflow (bool *overflow) const;

  double_int operator * (double_int) const;
  double_int operator + (double_int) const;
  double_int operator - (double_int) const;
  double_int operator - () const;
  double_int operator ~ () const;
  double_int operator & (double_int) const;
  double_int operator | (double_int) const;
  double_int operator ^ (double_int) const;
  double_int and_not (double_int) const;

  double_int lshift (long count) const;
  double_int lshift (long count, unsigned int prec, bool arith) const;
  double_int rshift (long count) const;
  double_int rshift (long count, unsigned int prec, bool arith) const;
  double_int alshift (long count, unsigned int prec) const;
  double_int arshift (long count, unsigned int prec) const;
  double_int llshift (long count, unsigned int prec) const;
  double_int lrshift (long count, unsigned int prec) const;
  double_int lrotate (long count, unsigned int prec) const;
  double_int rrotate (long count, unsigned int prec) const;





  double_int div (double_int, bool, unsigned) const;
  double_int sdiv (double_int, unsigned) const;
  double_int udiv (double_int, unsigned) const;
  double_int mod (double_int, bool, unsigned) const;
  double_int smod (double_int, unsigned) const;
  double_int umod (double_int, unsigned) const;
  double_int divmod_with_overflow (double_int, bool, unsigned,
       double_int *, bool *) const;
  double_int divmod (double_int, bool, unsigned, double_int *) const;
  double_int sdivmod (double_int, unsigned, double_int *) const;
  double_int udivmod (double_int, unsigned, double_int *) const;



  double_int ext (unsigned prec, bool uns) const;
  double_int zext (unsigned prec) const;
  double_int sext (unsigned prec) const;



  bool is_zero () const;
  bool is_one () const;
  bool is_minus_one () const;
  bool is_negative () const;

  int cmp (double_int b, bool uns) const;
  int ucmp (double_int b) const;
  int scmp (double_int b) const;

  bool ult (double_int b) const;
  bool ule (double_int b) const;
  bool ugt (double_int b) const;
  bool slt (double_int b) const;
  bool sle (double_int b) const;
  bool sgt (double_int b) const;

  double_int max (double_int b, bool uns);
  double_int smax (double_int b);
  double_int umax (double_int b);

  double_int min (double_int b, bool uns);
  double_int smin (double_int b);
  double_int umin (double_int b);

  bool operator == (double_int cst2) const;
  bool operator != (double_int cst2) const;



  unsigned long low;
  long high;

};
# 207 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_shwi (long cst)
{
  double_int r;
  r.low = (unsigned long) cst;
  r.high = cst < 0 ? -1 : 0;
  return r;
}
# 230 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline double_int
double_int::from_uhwi (unsigned long cst)
{
  double_int r;
  r.low = cst;
  r.high = 0;
  return r;
}

inline double_int
double_int::from_pair (long high, unsigned long low)
{
  double_int r;
  r.low = low;
  r.high = high;
  return r;
}

inline double_int &
double_int::operator ++ ()
{
  *this += (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator -- ()
{
  *this -= (double_int::from_shwi (1));
  return *this;
}

inline double_int &
double_int::operator &= (double_int b)
{
  *this = *this & b;
  return *this;
}

inline double_int &
double_int::operator ^= (double_int b)
{
  *this = *this ^ b;
  return *this;
}

inline double_int &
double_int::operator |= (double_int b)
{
  *this = *this | b;
  return *this;
}




inline long
double_int::to_shwi () const
{
  return (long) low;
}




inline unsigned long
double_int::to_uhwi () const
{
  return low;
}



inline bool
double_int::fits_uhwi () const
{
  return high == 0;
}





inline double_int
double_int::operator ~ () const
{
  double_int result;
  result.low = ~low;
  result.high = ~high;
  return result;
}



inline double_int
double_int::operator | (double_int b) const
{
  double_int result;
  result.low = low | b.low;
  result.high = high | b.high;
  return result;
}



inline double_int
double_int::operator & (double_int b) const
{
  double_int result;
  result.low = low & b.low;
  result.high = high & b.high;
  return result;
}



inline double_int
double_int::and_not (double_int b) const
{
  double_int result;
  result.low = low & ~b.low;
  result.high = high & ~b.high;
  return result;
}



inline double_int
double_int::operator ^ (double_int b) const
{
  double_int result;
  result.low = low ^ b.low;
  result.high = high ^ b.high;
  return result;
}

void dump_double_int (FILE *, double_int, bool);
# 376 "/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h"
inline bool
double_int::is_zero () const
{
  return low == 0 && high == 0;
}



inline bool
double_int::is_one () const
{
  return low == 1 && high == 0;
}



inline bool
double_int::is_minus_one () const
{
  return low == -1UL && high == -1;
}



inline bool
double_int::is_negative () const
{
  return high < 0;
}



inline bool
double_int::operator == (double_int cst2) const
{
  return low == cst2.low && high == cst2.high;
}



inline bool
double_int::operator != (double_int cst2) const
{
  return low != cst2.low || high != cst2.high;
}



inline int
double_int::popcount () const
{
  return popcount_hwi (high) + popcount_hwi (low);
}





void mpz_set_double_int (mpz_t, double_int, bool);
double_int mpz_get_double_int (const_tree, mpz_t, bool);


namespace wi
{
  template <>
  struct int_traits <double_int>
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = true;
    static const unsigned int precision = (2 * 64);
    static unsigned int get_precision (const double_int &);
    static wi::storage_ref decompose (long *, unsigned int,
          const double_int &);
  };
}

inline unsigned int
wi::int_traits <double_int>::get_precision (const double_int &)
{
  return precision;
}

inline wi::storage_ref
wi::int_traits <double_int>::decompose (long *scratch, unsigned int p,
     const double_int &x)
{
  ((void)(!(precision == p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/double-int.h", 462, __FUNCTION__), 0 : 0));
  scratch[0] = x.low;
  if ((x.high == 0 && scratch[0] >= 0) || (x.high == -1 && scratch[0] < 0))
    return wi::storage_ref (scratch, 1, precision);
  scratch[1] = x.high;
  return wi::storage_ref (scratch, 2, precision);
}
# 471 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h" 1
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/align.h"
struct align_flags_tuple
{



  int log;
  int maxskip;


  void normalize ()
  {
    int n = (1 << log);
    if (maxskip > n)
      maxskip = n - 1;
  }


  int get_value ()
  {
    return maxskip + 1;
  }
};




class align_flags
{
public:

  align_flags (int log0 = 0, int maxskip0 = 0, int log1 = 0, int maxskip1 = 0)
  {
    levels[0].log = log0;
    levels[0].maxskip = maxskip0;
    levels[1].log = log1;
    levels[1].maxskip = maxskip1;
    normalize ();
  }


  void normalize ()
  {
    for (unsigned i = 0; i < 2; i++)
      levels[i].normalize ();
  }


  static align_flags max (const align_flags f0, const align_flags f1)
    {
      int log0 = ((f0.levels[0].log) > (f1.levels[0].log) ? (f0.levels[0].log) : (f1.levels[0].log));
      int maxskip0 = ((f0.levels[0].maxskip) > (f1.levels[0].maxskip) ? (f0.levels[0].maxskip) : (f1.levels[0].maxskip));
      int log1 = ((f0.levels[1].log) > (f1.levels[1].log) ? (f0.levels[1].log) : (f1.levels[1].log));
      int maxskip1 = ((f0.levels[1].maxskip) > (f1.levels[1].maxskip) ? (f0.levels[1].maxskip) : (f1.levels[1].maxskip));
      return align_flags (log0, maxskip0, log1, maxskip1);
    }

  align_flags_tuple levels[2];
};
# 472 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
enum real_value_class {
  rvc_zero,
  rvc_normal,
  rvc_inf,
  rvc_nan
};







struct real_value {



  unsigned int cl : 2;

  unsigned int decimal : 1;

  unsigned int sign : 1;

  unsigned int signalling : 1;


  unsigned int canonical : 1;

  unsigned int uexp : (32 - 6);

  unsigned long sig[((128 + (8 * 8)) / (8 * 8))];
};
# 80 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern char test_real_width
  [sizeof (struct real_value) <= (((128 + (8 * 8)) + 32)/64 + (((128 + (8 * 8)) + 32)%64 ? 1 : 0)) * sizeof (long) ? 1 : -1];
# 118 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
struct real_format
{

  void (*encode) (const struct real_format *, long *,
    const struct real_value *);
  void (*decode) (const struct real_format *, struct real_value *,
    const long *);


  int b;


  int p;


  int pnan;


  int emin;


  int emax;



  int signbit_ro;



  int signbit_rw;
# 158 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
  int ieee_bits;


  bool round_towards_zero;
  bool has_sign_dependent_rounding;


  bool has_nans;
  bool has_inf;
  bool has_denorm;
  bool has_signed_zero;
  bool qnan_msb_set;
  bool canonical_nan_lsbs_set;
  const char *name;
};







extern const struct real_format *
  real_format_for_mode[MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1
         + MAX_MODE_DECIMAL_FLOAT - MIN_MODE_DECIMAL_FLOAT + 1];
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
class format_helper
{
public:
  format_helper (const real_format *format) : m_format (format) {}
  template<typename T> format_helper (const T &);
  const real_format *operator-> () const { return m_format; }
  operator const real_format *() const { return m_format; }

  bool decimal_p () const { return m_format && m_format->b == 10; }
  bool can_represent_integral_type_p (tree type) const;

private:
  const real_format *m_format;
};

template<typename T>
inline format_helper::format_helper (const T &m)
  : m_format (m == ((void) 0, E_VOIDmode) ? 0 : (real_format_for_mode[(((enum mode_class) mode_class[m]) == MODE_DECIMAL_FLOAT) ? (((m) - MIN_MODE_DECIMAL_FLOAT) + (MAX_MODE_FLOAT - MIN_MODE_FLOAT + 1)) : ((enum mode_class) mode_class[m]) == MODE_FLOAT ? ((m) - MIN_MODE_FLOAT) : ((fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/real.h", 234, __FUNCTION__)), 0)]))
{}
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern bool HONOR_NANS (machine_mode);
extern bool HONOR_NANS (const_tree);
extern bool HONOR_NANS (const_rtx);


extern bool HONOR_SNANS (machine_mode);
extern bool HONOR_SNANS (const_tree);
extern bool HONOR_SNANS (const_rtx);



extern bool HONOR_INFINITIES (machine_mode);
extern bool HONOR_INFINITIES (const_tree);
extern bool HONOR_INFINITIES (const_rtx);



extern bool HONOR_SIGNED_ZEROS (machine_mode);
extern bool HONOR_SIGNED_ZEROS (const_tree);
extern bool HONOR_SIGNED_ZEROS (const_rtx);



extern bool HONOR_SIGN_DEPENDENT_ROUNDING (machine_mode);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_tree);
extern bool HONOR_SIGN_DEPENDENT_ROUNDING (const_rtx);


extern bool real_arithmetic (struct real_value *, int, const struct real_value *,
        const struct real_value *);


extern bool real_compare (int, const struct real_value *, const struct real_value *);


extern bool real_isinf (const struct real_value *);


extern bool real_isnan (const struct real_value *);


extern bool real_issignaling_nan (const struct real_value *);


extern bool real_isfinite (const struct real_value *);


extern bool real_isneg (const struct real_value *);


extern bool real_isnegzero (const struct real_value *);


extern bool real_identical (const struct real_value *, const struct real_value *);
extern bool real_equal (const struct real_value *, const struct real_value *);
extern bool real_less (const struct real_value *, const struct real_value *);


extern void real_convert (struct real_value *, format_helper,
     const struct real_value *);


extern bool exact_real_truncate (format_helper, const struct real_value *);


extern void real_to_decimal (char *, const struct real_value *, size_t,
        size_t, int);



extern void real_to_decimal_for_mode (char *, const struct real_value *, size_t,
          size_t, int, machine_mode);


extern void real_to_hexadecimal (char *, const struct real_value *,
     size_t, size_t, int);


extern long real_to_integer (const struct real_value *);



extern int real_from_string (struct real_value *, const char *);

extern void real_from_string3 (struct real_value *, const char *, format_helper);

extern long real_to_target (long *, const struct real_value *, format_helper);

extern void real_from_target (struct real_value *, const long *,
         format_helper);

extern void real_inf (struct real_value *);

extern bool real_nan (struct real_value *, const char *, int, format_helper);

extern void real_maxval (struct real_value *, int, machine_mode);

extern void real_2expN (struct real_value *, int, format_helper);

extern unsigned int real_hash (const struct real_value *);



extern const struct real_format ieee_single_format;
extern const struct real_format mips_single_format;
extern const struct real_format motorola_single_format;
extern const struct real_format spu_single_format;
extern const struct real_format ieee_double_format;
extern const struct real_format mips_double_format;
extern const struct real_format motorola_double_format;
extern const struct real_format ieee_extended_motorola_format;
extern const struct real_format ieee_extended_intel_96_format;
extern const struct real_format ieee_extended_intel_96_round_53_format;
extern const struct real_format ieee_extended_intel_128_format;
extern const struct real_format ibm_extended_format;
extern const struct real_format mips_extended_format;
extern const struct real_format ieee_quad_format;
extern const struct real_format mips_quad_format;
extern const struct real_format vax_f_format;
extern const struct real_format vax_d_format;
extern const struct real_format vax_g_format;
extern const struct real_format real_internal_format;
extern const struct real_format decimal_single_format;
extern const struct real_format decimal_double_format;
extern const struct real_format decimal_quad_format;
extern const struct real_format ieee_half_format;
extern const struct real_format arm_half_format;
extern const struct real_format arm_bfloat_half_format;
# 418 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern struct real_value real_value_truncate (format_helper, struct real_value);

extern struct real_value real_value_negate (const struct real_value *);
extern struct real_value real_value_abs (const struct real_value *);

extern int significand_size (format_helper);

extern struct real_value real_from_string2 (const char *, format_helper);
# 443 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern int real_exponent (const struct real_value *);


extern void real_ldexp (struct real_value *, const struct real_value *, int);





extern struct real_value dconst0;
extern struct real_value dconst1;
extern struct real_value dconst2;
extern struct real_value dconstm1;
extern struct real_value dconsthalf;
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/real.h"
extern const struct real_value * dconst_e_ptr (void);


extern const struct real_value *dconst_third_ptr (void);
extern const struct real_value *dconst_quarter_ptr (void);
extern const struct real_value *dconst_sixth_ptr (void);
extern const struct real_value *dconst_ninth_ptr (void);


extern const struct real_value * dconst_sqrt2_ptr (void);



struct real_value real_value_from_int_cst (const_tree, const_tree);


extern rtx const_double_from_real_value (struct real_value, machine_mode);


extern bool exact_real_inverse (format_helper, struct real_value *);




bool real_can_shorten_arithmetic (machine_mode, machine_mode);


extern tree build_real (tree, struct real_value);


extern tree build_real_truncate (tree, struct real_value);


extern bool real_powi (struct real_value *, format_helper,
         const struct real_value *, long);


extern void real_trunc (struct real_value *, format_helper,
   const struct real_value *);
extern void real_floor (struct real_value *, format_helper,
   const struct real_value *);
extern void real_ceil (struct real_value *, format_helper,
         const struct real_value *);
extern void real_round (struct real_value *, format_helper,
   const struct real_value *);
extern void real_roundeven (struct real_value *, format_helper,
       const struct real_value *);


extern void real_copysign (struct real_value *, const struct real_value *);


extern bool real_isinteger (const struct real_value *, format_helper);
extern bool real_isinteger (const struct real_value *, long *);


extern bool real_nextafter (struct real_value *, format_helper,
       const struct real_value *, const struct real_value *);




extern void get_max_float (const struct real_format *, char *, size_t, bool);



extern wide_int real_to_integer (const struct real_value *, bool *, int);
extern void real_from_integer (struct real_value *, format_helper,
          const wide_int_ref &, signop);




extern void build_sinatan_real (struct real_value *, tree);
# 475 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
struct fixed_value
{
  double_int data;
  scalar_mode_pod mode;
};
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
extern struct fixed_value fconst0[18];
extern struct fixed_value fconst1[8];
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/fixed-value.h"
extern rtx const_fixed_from_fixed_value (struct fixed_value, machine_mode);



extern struct fixed_value fixed_from_double_int (double_int, scalar_mode);



static inline rtx
const_fixed_from_double_int (double_int payload,
        scalar_mode mode)
{
  return
    const_fixed_from_fixed_value (fixed_from_double_int (payload, mode),
                                  mode);
}


extern void fixed_from_string (struct fixed_value *, const char *,
          scalar_mode);


extern tree build_fixed (tree, struct fixed_value);


extern bool fixed_convert (struct fixed_value *, scalar_mode,
      const struct fixed_value *, bool);


extern bool fixed_convert_from_int (struct fixed_value *, scalar_mode,
        double_int, bool, bool);


extern bool fixed_convert_from_real (struct fixed_value *, scalar_mode,
         const struct real_value *, bool);


extern void real_convert_from_fixed (struct real_value *, scalar_mode,
         const struct fixed_value *);


extern bool fixed_identical (const struct fixed_value *, const struct fixed_value *);


extern unsigned int fixed_hash (const struct fixed_value *);







extern void fixed_to_decimal (char *str, const struct fixed_value *, size_t);


extern bool fixed_arithmetic (struct fixed_value *, int, const struct fixed_value *,
         const struct fixed_value *, bool);


extern bool fixed_compare (int, const struct fixed_value *,
      const struct fixed_value *);


extern bool fixed_isneg (const struct fixed_value *);
# 476 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 1
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h" 1
# 61 "/home/giulianob/gcc_git_gnu/gcc/gcc/statistics.h"
struct function;


extern void statistics_early_init (void);
extern void statistics_init (void);
extern void statistics_fini (void);
extern void statistics_fini_pass (void);
extern void statistics_counter_event (struct function *, const char *, int);
extern void statistics_histogram_event (struct function *, const char *, int);
# 247 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
# 1 "./gtype-desc.h" 1
# 31 "./gtype-desc.h"
extern void gt_ggc_mx_line_maps (void *);



extern void gt_ggc_mx_cpp_token (void *);



extern void gt_ggc_mx_cpp_macro (void *);



extern void gt_ggc_mx_string_concat (void *);



extern void gt_ggc_mx_string_concat_db (void *);



extern void gt_ggc_mx_hash_map_location_hash_string_concat__ (void *);



extern void gt_ggc_mx_bitmap_head (void *);



extern void gt_ggc_mx_rtx_def (void *);



extern void gt_ggc_mx_rtvec_def (void *);



extern void gt_ggc_mx_gimple (void *);



extern void gt_ggc_mx_symtab_node (void *);



extern void gt_ggc_mx_cgraph_edge (void *);



extern void gt_ggc_mx_section (void *);



extern void gt_ggc_mx_cl_target_option (void *);



extern void gt_ggc_mx_cl_optimization (void *);



extern void gt_ggc_mx_edge_def (void *);



extern void gt_ggc_mx_basic_block_def (void *);



extern void gt_ggc_mx_stack_local_entry (void *);



extern void gt_ggc_mx_machine_function (void *);



extern void gt_ggc_mx_bitmap_element (void *);



extern void gt_ggc_mx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_ggc_mx_coverage_data (void *);



extern void gt_ggc_mx_mem_attrs (void *);



extern void gt_ggc_mx_reg_attrs (void *);



extern void gt_ggc_mx_object_block (void *);



extern void gt_ggc_mx_vec_rtx_va_gc_ (void *);



extern void gt_ggc_mx_real_value (void *);



extern void gt_ggc_mx_fixed_value (void *);



extern void gt_ggc_mx_constant_descriptor_rtx (void *);



extern void gt_ggc_mx_function (void *);



extern void gt_ggc_mx_target_rtl (void *);



extern void gt_ggc_mx_cgraph_rtl_info (void *);



extern void gt_ggc_mx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_ggc_mx_ptr_info_def (void *);



extern void gt_ggc_mx_range_info_def (void *);



extern void gt_ggc_mx_die_struct (void *);



extern void gt_ggc_mx_vec_constructor_elt_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_va_gc_ (void *);



extern void gt_ggc_mx_lang_type (void *);



extern void gt_ggc_mx_lang_decl (void *);



extern void gt_ggc_mx_tree_statement_list_node (void *);



extern void gt_ggc_mx_target_globals (void *);



extern void gt_ggc_mx_lang_tree_node (void *);



extern void gt_ggc_mx_tree_map (void *);



extern void gt_ggc_mx_tree_decl_map (void *);



extern void gt_ggc_mx_tree_int_map (void *);



extern void gt_ggc_mx_tree_vec_map (void *);



extern void gt_ggc_mx_vec_alias_pair_va_gc_ (void *);



extern void gt_ggc_mx_libfunc_entry (void *);



extern void gt_ggc_mx_hash_table_libfunc_hasher_ (void *);



extern void gt_ggc_mx_target_libfuncs (void *);



extern void gt_ggc_mx_sequence_stack (void *);



extern void gt_ggc_mx_vec_rtx_insn__va_gc_ (void *);



extern void gt_ggc_mx_call_site_record_d (void *);



extern void gt_ggc_mx_vec_uchar_va_gc_ (void *);



extern void gt_ggc_mx_vec_call_site_record_va_gc_ (void *);



extern void gt_ggc_mx_gimple_df (void *);



extern void gt_ggc_mx_dw_fde_node (void *);



extern void gt_ggc_mx_rtx_constant_pool (void *);



extern void gt_ggc_mx_frame_space (void *);



extern void gt_ggc_mx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_ggc_mx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_ggc_mx_stack_usage (void *);



extern void gt_ggc_mx_eh_status (void *);



extern void gt_ggc_mx_control_flow_graph (void *);



extern void gt_ggc_mx_loops (void *);



extern void gt_ggc_mx_language_function (void *);



extern void gt_ggc_mx_hash_set_tree_ (void *);



extern void gt_ggc_mx_types_used_by_vars_entry (void *);



extern void gt_ggc_mx_hash_table_used_type_hasher_ (void *);



extern void gt_ggc_mx_nb_iter_bound (void *);



extern void gt_ggc_mx_loop_exit (void *);



extern void gt_ggc_mx_loop (void *);



extern void gt_ggc_mx_control_iv (void *);



extern void gt_ggc_mx_vec_loop_p_va_gc_ (void *);



extern void gt_ggc_mx_niter_desc (void *);



extern void gt_ggc_mx_hash_table_loop_exit_hasher_ (void *);



extern void gt_ggc_mx_vec_basic_block_va_gc_ (void *);



extern void gt_ggc_mx_rtl_bb_info (void *);



extern void gt_ggc_mx_vec_edge_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_ggc_mx_section_hash_entry (void *);



extern void gt_ggc_mx_lto_file_decl_data (void *);



extern void gt_ggc_mx_ipa_replace_map (void *);



extern void gt_ggc_mx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_ggc_mx_ipa_param_adjustments (void *);



extern void gt_ggc_mx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_ggc_mx_cgraph_simd_clone (void *);



extern void gt_ggc_mx_cgraph_function_version_info (void *);



extern void gt_ggc_mx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_ggc_mx_cgraph_indirect_call_info (void *);



extern void gt_ggc_mx_asm_node (void *);



extern void gt_ggc_mx_symbol_table (void *);



extern void gt_ggc_mx_hash_table_section_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_asmname_hasher_ (void *);



extern void gt_ggc_mx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_ggc_mx_constant_descriptor_tree (void *);



extern void gt_ggc_mx_hash_map_alias_set_hash_int_ (void *);



extern void gt_ggc_mx_alias_set_entry (void *);



extern void gt_ggc_mx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_ggc_mx_hash_table_function_version_hasher_ (void *);



extern void gt_ggc_mx_lto_in_decl_state (void *);



extern void gt_ggc_mx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_ggc_mx_ipa_node_params (void *);



extern void gt_ggc_mx_ipa_edge_args (void *);



extern void gt_ggc_mx_ipa_agg_replacement_value (void *);



extern void gt_ggc_mx_ipa_fn_summary (void *);



extern void gt_ggc_mx_odr_type_d (void *);



extern void gt_ggc_mx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_ggc_mx_param_access (void *);



extern void gt_ggc_mx_vec_param_access__va_gc_ (void *);



extern void gt_ggc_mx_isra_func_summary (void *);



extern void gt_ggc_mx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_ggc_mx_ipa_sra_function_summaries (void *);



extern void gt_ggc_mx_typeinfo (void *);



extern void gt_ggc_mx_dw_cfi_node (void *);



extern void gt_ggc_mx_dw_loc_descr_node (void *);



extern void gt_ggc_mx_dw_loc_list_struct (void *);



extern void gt_ggc_mx_dw_discr_list_node (void *);



extern void gt_ggc_mx_dw_cfa_location (void *);



extern void gt_ggc_mx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_ggc_mx_addr_table_entry (void *);



extern void gt_ggc_mx_indirect_string_node (void *);



extern void gt_ggc_mx_dwarf_file_data (void *);



extern void gt_ggc_mx_hash_map_char__tree_ (void *);



extern void gt_ggc_mx_dw_cfi_row (void *);



extern void gt_ggc_mx_reg_saved_in_data (void *);



extern void gt_ggc_mx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_indirect_string_hasher_ (void *);



extern void gt_ggc_mx_comdat_type_node (void *);



extern void gt_ggc_mx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_ggc_mx_dw_line_info_table (void *);



extern void gt_ggc_mx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_ggc_mx_limbo_die_struct (void *);



extern void gt_ggc_mx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_die_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_ggc_mx_variable_value_struct (void *);



extern void gt_ggc_mx_hash_table_variable_value_hasher_ (void *);



extern void gt_ggc_mx_hash_table_block_die_hasher_ (void *);



extern void gt_ggc_mx_var_loc_node (void *);



extern void gt_ggc_mx_var_loc_list_def (void *);



extern void gt_ggc_mx_call_arg_loc_node (void *);



extern void gt_ggc_mx_hash_table_decl_loc_hasher_ (void *);



extern void gt_ggc_mx_cached_dw_loc_list_def (void *);



extern void gt_ggc_mx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_ggc_mx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_ggc_mx_vec_pubname_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_va_gc_ (void *);



extern void gt_ggc_mx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_ggc_mx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_addr_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_ggc_mx_inline_entry_data (void *);



extern void gt_ggc_mx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_ggc_mx_temp_slot (void *);



extern void gt_ggc_mx_initial_value_struct (void *);



extern void gt_ggc_mx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_const_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_ggc_mx_hash_table_reg_attr_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_double_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_fixed_hasher_ (void *);



extern void gt_ggc_mx_eh_region_d (void *);



extern void gt_ggc_mx_eh_landing_pad_d (void *);



extern void gt_ggc_mx_eh_catch_d (void *);



extern void gt_ggc_mx_vec_eh_region_va_gc_ (void *);



extern void gt_ggc_mx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_ggc_mx_hash_map_gimple__int_ (void *);



extern void gt_ggc_mx_hash_table_insn_cache_hasher_ (void *);



extern void gt_ggc_mx_temp_slot_address_entry (void *);



extern void gt_ggc_mx_hash_table_temp_address_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_hash_tree_ (void *);



extern void gt_ggc_mx_test_struct (void *);



extern void gt_ggc_mx_test_of_length (void *);



extern void gt_ggc_mx_test_other (void *);



extern void gt_ggc_mx_test_of_union (void *);



extern void gt_ggc_mx_example_base (void *);



extern void gt_ggc_mx_test_node (void *);



extern void gt_ggc_mx_user_struct (void *);



extern void gt_ggc_mx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_ggc_mx_string_pool_data (void *);



extern void gt_ggc_mx_type_hash (void *);



extern void gt_ggc_mx_hash_table_type_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_ggc_mx_hash_table_cl_option_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_ggc_mx_hash_table_section_hasher_ (void *);



extern void gt_ggc_mx_hash_table_object_block_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_ggc_mx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_clone_hasher_ (void *);



extern void gt_ggc_mx_tm_restart_node (void *);



extern void gt_ggc_mx_hash_map_tree_tree_ (void *);



extern void gt_ggc_mx_hash_table_ssa_name_hasher_ (void *);



extern void gt_ggc_mx_hash_table_tm_restart_hasher_ (void *);



extern void gt_ggc_mx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_ggc_mx_scev_info_str (void *);



extern void gt_ggc_mx_hash_table_scev_info_hasher_ (void *);



extern void gt_ggc_mx_ssa_operand_memory_d (void *);



extern void gt_ggc_mx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_ggc_mx_omp_declare_variant_base_entry (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_ggc_mx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_ggc_mx_hash_table_dllimport_hasher_ (void *);



extern void gt_ggc_mx_hash_map_char__unsigned_ (void *);



extern void gt_ggc_mx_vec_gimple__va_gc_ (void *);



extern void gt_ggc_mx_int_range_1_ (void *);



extern void gt_ggc_mx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_ggc_mx_ipa_bits (void *);



extern void gt_ggc_mx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_bits__va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_vr_va_gc_ (void *);



extern void gt_ggc_mx_ipcp_transformation (void *);



extern void gt_ggc_mx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_ggc_mx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_ggc_mx_ipa_node_params_t (void *);



extern void gt_ggc_mx_ipa_edge_args_sum_t (void *);



extern void gt_ggc_mx_function_summary_ipcp_transformation__ (void *);



extern void gt_ggc_mx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_ggc_mx_hash_table_decl_state_hasher_ (void *);



extern void gt_ggc_mx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_ggc_mx_vec_condition_va_gc_ (void *);



extern void gt_ggc_mx_vec_size_time_entry_va_gc_ (void *);



extern void gt_ggc_mx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_ggc_mx_tree_type_map (void *);



extern void gt_ggc_mx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_ggc_mx_vec_odr_type_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_value_annotation_hasher_ (void *);



extern void gt_ggc_mx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_ggc_mx_tree_entity_vec_map (void *);



extern void gt_ggc_mx_hash_table_dummy_type_hasher_ (void *);



extern void gt_ggc_mx_parm_attr_d (void *);



extern void gt_ggc_mx_vec_parm_attr_va_gc_ (void *);



extern void gt_ggc_mx_stmt_group (void *);



extern void gt_ggc_mx_elab_info (void *);



extern void gt_ggc_mx_range_check_info_d (void *);



extern void gt_ggc_mx_vec_range_check_info_va_gc_ (void *);



extern void gt_ggc_mx_loop_info_d (void *);



extern void gt_ggc_mx_vec_loop_info_va_gc_ (void *);



extern void gt_ggc_mx_gnat_binding_level (void *);



extern void gt_ggc_mx_packable_type_hash (void *);



extern void gt_ggc_mx_hash_table_packable_type_hasher_ (void *);



extern void gt_ggc_mx_pad_type_hash (void *);



extern void gt_ggc_mx_hash_table_pad_type_hasher_ (void *);



extern void gt_ggc_mx_c_label_vars (void *);



extern void gt_ggc_mx_c_binding (void *);



extern void gt_ggc_mx_c_scope (void *);



extern void gt_ggc_mx_c_goto_bindings (void *);



extern void gt_ggc_mx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_ggc_mx_c_inline_static (void *);



extern void gt_ggc_mx_sorted_fields_type (void *);



extern void gt_ggc_mx_vec_const_char_p_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_ggc_mx_align_stack (void *);



extern void gt_ggc_mx_vec_pending_weak_va_gc_ (void *);



extern void gt_ggc_mx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_ggc_mx_opt_stack (void *);



extern void gt_ggc_mx_c_parser (void *);



extern void gt_ggc_mx_vec_c_token_va_gc_ (void *);



extern void gt_ggc_mx_binding_table_s (void *);



extern void gt_ggc_mx_binding_entry_s (void *);



extern void gt_ggc_mx_cxx_binding (void *);



extern void gt_ggc_mx_cp_binding_level (void *);



extern void gt_ggc_mx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_ggc_mx_cp_token_cache (void *);



extern void gt_ggc_mx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_ggc_mx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_ggc_mx_saved_scope (void *);



extern void gt_ggc_mx_cxx_int_tree_map (void *);



extern void gt_ggc_mx_named_label_entry (void *);



extern void gt_ggc_mx_hash_table_named_label_hash_ (void *);



extern void gt_ggc_mx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_ggc_mx_tree_pair_s (void *);



extern void gt_ggc_mx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_named_decl_hash_ (void *);



extern void gt_ggc_mx_tinst_level (void *);



extern void gt_ggc_mx_tree_check (void *);



extern void gt_ggc_mx_vec_cp_token_va_gc_ (void *);



extern void gt_ggc_mx_cp_lexer (void *);



extern void gt_ggc_mx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser_context (void *);



extern void gt_ggc_mx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_ggc_mx_cp_parser (void *);



extern void gt_ggc_mx_hash_map_tree_int_ (void *);



extern void gt_ggc_mx_constexpr_fundef (void *);



extern void gt_ggc_mx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_ggc_mx_constexpr_call (void *);



extern void gt_ggc_mx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_ggc_mx_sat_entry (void *);



extern void gt_ggc_mx_hash_table_sat_hasher_ (void *);



extern void gt_ggc_mx_coroutine_info (void *);



extern void gt_ggc_mx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_ggc_mx_source_location_table_entry (void *);



extern void gt_ggc_mx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_ggc_mx_named_label_use_entry (void *);



extern void gt_ggc_mx_vec_incomplete_var_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_typename_hasher_ (void *);



extern void gt_ggc_mx_hash_table_mangled_decl_hash_ (void *);



extern void gt_ggc_mx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_ggc_mx_vec_tree_int_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_conv_type_hasher_ (void *);



extern void gt_ggc_mx_subsumption_entry (void *);



extern void gt_ggc_mx_hash_table_subsumption_hasher_ (void *);



extern void gt_ggc_mx_pending_template (void *);



extern void gt_ggc_mx_spec_entry (void *);



extern void gt_ggc_mx_hash_table_spec_hasher_ (void *);



extern void gt_ggc_mx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_ggc_mx_vec_tinfo_s_va_gc_ (void *);



extern void gt_ggc_mx_vec_deferred_access_va_gc_ (void *);



extern void gt_ggc_mx_hash_table_cplus_array_hasher_ (void *);



extern void gt_ggc_mx_hash_table_list_hasher_ (void *);



extern void gt_ggc_mx_pending_abstract_type (void *);



extern void gt_ggc_mx_hash_table_abstract_type_hasher_ (void *);



extern void gt_ggc_mx_Statement (void *);



extern void gt_ggc_mx_binding_level (void *);



extern void gt_ggc_mx_d_label_use_entry (void *);



extern void gt_ggc_mx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_ggc_mx_hash_table_module_hasher_ (void *);



extern void gt_ggc_mx_module_htab_entry (void *);



extern void gt_ggc_mx_hash_table_module_decl_hasher_ (void *);



extern void gt_ggc_mx_objc_map_private (void *);



extern void gt_ggc_mx_hashed_entry (void *);



extern void gt_ggc_mx_hashed_attribute (void *);



extern void gt_ggc_mx_imp_entry (void *);



extern void gt_ggc_mx_string_descriptor (void *);



extern void gt_ggc_mx_hash_table_objc_string_hasher_ (void *);



extern void gt_ggc_mx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_ggc_mx_vec_msgref_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_ggc_mx_vec_ivarref_entry_va_gc_ (void *);
# 1388 "./gtype-desc.h"
extern void gt_pch_nx_line_maps (void *);



extern void gt_pch_nx_cpp_token (void *);



extern void gt_pch_nx_cpp_macro (void *);



extern void gt_pch_nx_string_concat (void *);



extern void gt_pch_nx_string_concat_db (void *);



extern void gt_pch_nx_hash_map_location_hash_string_concat__ (void *);



extern void gt_pch_nx_bitmap_head (void *);



extern void gt_pch_nx_rtx_def (void *);



extern void gt_pch_nx_rtvec_def (void *);



extern void gt_pch_nx_gimple (void *);



extern void gt_pch_nx_symtab_node (void *);



extern void gt_pch_nx_cgraph_edge (void *);



extern void gt_pch_nx_section (void *);



extern void gt_pch_nx_cl_target_option (void *);



extern void gt_pch_nx_cl_optimization (void *);



extern void gt_pch_nx_edge_def (void *);



extern void gt_pch_nx_basic_block_def (void *);



extern void gt_pch_nx_stack_local_entry (void *);



extern void gt_pch_nx_machine_function (void *);



extern void gt_pch_nx_bitmap_element (void *);



extern void gt_pch_nx_generic_wide_int_wide_int_storage_ (void *);



extern void gt_pch_nx_coverage_data (void *);



extern void gt_pch_nx_mem_attrs (void *);



extern void gt_pch_nx_reg_attrs (void *);



extern void gt_pch_nx_object_block (void *);



extern void gt_pch_nx_vec_rtx_va_gc_ (void *);



extern void gt_pch_nx_real_value (void *);



extern void gt_pch_nx_fixed_value (void *);



extern void gt_pch_nx_constant_descriptor_rtx (void *);



extern void gt_pch_nx_function (void *);



extern void gt_pch_nx_target_rtl (void *);



extern void gt_pch_nx_cgraph_rtl_info (void *);



extern void gt_pch_nx_hash_map_tree_tree_decl_tree_cache_traits_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_type_tree_cache_traits_ (void *);



extern void gt_pch_nx_ptr_info_def (void *);



extern void gt_pch_nx_range_info_def (void *);



extern void gt_pch_nx_die_struct (void *);



extern void gt_pch_nx_vec_constructor_elt_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_va_gc_ (void *);



extern void gt_pch_nx_lang_type (void *);



extern void gt_pch_nx_lang_decl (void *);



extern void gt_pch_nx_tree_statement_list_node (void *);



extern void gt_pch_nx_target_globals (void *);



extern void gt_pch_nx_lang_tree_node (void *);



extern void gt_pch_nx_tree_map (void *);



extern void gt_pch_nx_tree_decl_map (void *);



extern void gt_pch_nx_tree_int_map (void *);



extern void gt_pch_nx_tree_vec_map (void *);



extern void gt_pch_nx_vec_alias_pair_va_gc_ (void *);



extern void gt_pch_nx_libfunc_entry (void *);



extern void gt_pch_nx_hash_table_libfunc_hasher_ (void *);



extern void gt_pch_nx_target_libfuncs (void *);



extern void gt_pch_nx_sequence_stack (void *);



extern void gt_pch_nx_vec_rtx_insn__va_gc_ (void *);



extern void gt_pch_nx_call_site_record_d (void *);



extern void gt_pch_nx_vec_uchar_va_gc_ (void *);



extern void gt_pch_nx_vec_call_site_record_va_gc_ (void *);



extern void gt_pch_nx_gimple_df (void *);



extern void gt_pch_nx_dw_fde_node (void *);



extern void gt_pch_nx_rtx_constant_pool (void *);



extern void gt_pch_nx_frame_space (void *);



extern void gt_pch_nx_vec_callinfo_callee_va_gc_ (void *);



extern void gt_pch_nx_vec_callinfo_dalloc_va_gc_ (void *);



extern void gt_pch_nx_stack_usage (void *);



extern void gt_pch_nx_eh_status (void *);



extern void gt_pch_nx_control_flow_graph (void *);



extern void gt_pch_nx_loops (void *);



extern void gt_pch_nx_language_function (void *);



extern void gt_pch_nx_hash_set_tree_ (void *);



extern void gt_pch_nx_types_used_by_vars_entry (void *);



extern void gt_pch_nx_hash_table_used_type_hasher_ (void *);



extern void gt_pch_nx_nb_iter_bound (void *);



extern void gt_pch_nx_loop_exit (void *);



extern void gt_pch_nx_loop (void *);



extern void gt_pch_nx_control_iv (void *);



extern void gt_pch_nx_vec_loop_p_va_gc_ (void *);



extern void gt_pch_nx_niter_desc (void *);



extern void gt_pch_nx_hash_table_loop_exit_hasher_ (void *);



extern void gt_pch_nx_vec_basic_block_va_gc_ (void *);



extern void gt_pch_nx_rtl_bb_info (void *);



extern void gt_pch_nx_vec_edge_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_ref_t_va_gc_ (void *);



extern void gt_pch_nx_section_hash_entry (void *);



extern void gt_pch_nx_lto_file_decl_data (void *);



extern void gt_pch_nx_ipa_replace_map (void *);



extern void gt_pch_nx_vec_ipa_replace_map__va_gc_ (void *);



extern void gt_pch_nx_ipa_param_adjustments (void *);



extern void gt_pch_nx_vec_ipa_param_performed_split_va_gc_ (void *);



extern void gt_pch_nx_cgraph_simd_clone (void *);



extern void gt_pch_nx_cgraph_function_version_info (void *);



extern void gt_pch_nx_hash_table_cgraph_edge_hasher_ (void *);



extern void gt_pch_nx_cgraph_indirect_call_info (void *);



extern void gt_pch_nx_asm_node (void *);



extern void gt_pch_nx_symbol_table (void *);



extern void gt_pch_nx_hash_table_section_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_asmname_hasher_ (void *);



extern void gt_pch_nx_hash_map_symtab_node__symbol_priority_map_ (void *);



extern void gt_pch_nx_constant_descriptor_tree (void *);



extern void gt_pch_nx_hash_map_alias_set_hash_int_ (void *);



extern void gt_pch_nx_alias_set_entry (void *);



extern void gt_pch_nx_vec_alias_set_entry__va_gc_ (void *);



extern void gt_pch_nx_hash_table_function_version_hasher_ (void *);



extern void gt_pch_nx_lto_in_decl_state (void *);



extern void gt_pch_nx_hash_table_ipa_bit_ggc_hash_traits_ (void *);



extern void gt_pch_nx_hash_table_ipa_vr_ggc_hash_traits_ (void *);



extern void gt_pch_nx_ipa_node_params (void *);



extern void gt_pch_nx_ipa_edge_args (void *);



extern void gt_pch_nx_ipa_agg_replacement_value (void *);



extern void gt_pch_nx_ipa_fn_summary (void *);



extern void gt_pch_nx_odr_type_d (void *);



extern void gt_pch_nx_vec_ipa_adjusted_param_va_gc_ (void *);



extern void gt_pch_nx_param_access (void *);



extern void gt_pch_nx_vec_param_access__va_gc_ (void *);



extern void gt_pch_nx_isra_func_summary (void *);



extern void gt_pch_nx_vec_isra_param_desc_va_gc_ (void *);



extern void gt_pch_nx_ipa_sra_function_summaries (void *);



extern void gt_pch_nx_typeinfo (void *);



extern void gt_pch_nx_dw_cfi_node (void *);



extern void gt_pch_nx_dw_loc_descr_node (void *);



extern void gt_pch_nx_dw_loc_list_struct (void *);



extern void gt_pch_nx_dw_discr_list_node (void *);



extern void gt_pch_nx_dw_cfa_location (void *);



extern void gt_pch_nx_vec_dw_cfi_ref_va_gc_ (void *);



extern void gt_pch_nx_addr_table_entry (void *);



extern void gt_pch_nx_indirect_string_node (void *);



extern void gt_pch_nx_dwarf_file_data (void *);



extern void gt_pch_nx_hash_map_char__tree_ (void *);



extern void gt_pch_nx_dw_cfi_row (void *);



extern void gt_pch_nx_reg_saved_in_data (void *);



extern void gt_pch_nx_vec_dw_fde_ref_va_gc_ (void *);



extern void gt_pch_nx_hash_table_indirect_string_hasher_ (void *);



extern void gt_pch_nx_comdat_type_node (void *);



extern void gt_pch_nx_vec_dw_line_info_entry_va_gc_ (void *);



extern void gt_pch_nx_dw_line_info_table (void *);



extern void gt_pch_nx_vec_dw_attr_node_va_gc_ (void *);



extern void gt_pch_nx_limbo_die_struct (void *);



extern void gt_pch_nx_hash_table_dwarf_file_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_die_hasher_ (void *);



extern void gt_pch_nx_vec_dw_die_ref_va_gc_ (void *);



extern void gt_pch_nx_variable_value_struct (void *);



extern void gt_pch_nx_hash_table_variable_value_hasher_ (void *);



extern void gt_pch_nx_hash_table_block_die_hasher_ (void *);



extern void gt_pch_nx_var_loc_node (void *);



extern void gt_pch_nx_var_loc_list_def (void *);



extern void gt_pch_nx_call_arg_loc_node (void *);



extern void gt_pch_nx_hash_table_decl_loc_hasher_ (void *);



extern void gt_pch_nx_cached_dw_loc_list_def (void *);



extern void gt_pch_nx_hash_table_dw_loc_list_hasher_ (void *);



extern void gt_pch_nx_vec_dw_line_info_table__va_gc_ (void *);



extern void gt_pch_nx_vec_pubname_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_macinfo_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_va_gc_ (void *);



extern void gt_pch_nx_vec_dw_ranges_by_label_va_gc_ (void *);



extern void gt_pch_nx_vec_die_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_hash_table_addr_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_sym_off_pair_ (void *);



extern void gt_pch_nx_inline_entry_data (void *);



extern void gt_pch_nx_hash_table_inline_entry_data_hasher_ (void *);



extern void gt_pch_nx_temp_slot (void *);



extern void gt_pch_nx_initial_value_struct (void *);



extern void gt_pch_nx_vec_temp_slot_p_va_gc_ (void *);



extern void gt_pch_nx_hash_table_const_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_wide_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_poly_int_hasher_ (void *);



extern void gt_pch_nx_hash_table_reg_attr_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_double_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_fixed_hasher_ (void *);



extern void gt_pch_nx_eh_region_d (void *);



extern void gt_pch_nx_eh_landing_pad_d (void *);



extern void gt_pch_nx_eh_catch_d (void *);



extern void gt_pch_nx_vec_eh_region_va_gc_ (void *);



extern void gt_pch_nx_vec_eh_landing_pad_va_gc_ (void *);



extern void gt_pch_nx_hash_map_gimple__int_ (void *);



extern void gt_pch_nx_hash_table_insn_cache_hasher_ (void *);



extern void gt_pch_nx_temp_slot_address_entry (void *);



extern void gt_pch_nx_hash_table_temp_address_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_hash_tree_ (void *);



extern void gt_pch_nx_test_struct (void *);



extern void gt_pch_nx_test_of_length (void *);



extern void gt_pch_nx_test_other (void *);



extern void gt_pch_nx_test_of_union (void *);



extern void gt_pch_nx_example_base (void *);



extern void gt_pch_nx_test_node (void *);



extern void gt_pch_nx_user_struct (void *);



extern void gt_pch_nx_hash_table_libfunc_decl_hasher_ (void *);



extern void gt_pch_nx_string_pool_data (void *);



extern void gt_pch_nx_type_hash (void *);



extern void gt_pch_nx_hash_table_type_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_poly_int_cst_hasher_ (void *);



extern void gt_pch_nx_hash_table_cl_option_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_decl_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_vec_map_cache_hasher_ (void *);



extern void gt_pch_nx_hash_table_section_hasher_ (void *);



extern void gt_pch_nx_hash_table_object_block_hasher_ (void *);



extern void gt_pch_nx_hash_table_tree_descriptor_hasher_ (void *);



extern void gt_pch_nx_hash_table_const_rtx_desc_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_clone_hasher_ (void *);



extern void gt_pch_nx_tm_restart_node (void *);



extern void gt_pch_nx_hash_map_tree_tree_ (void *);



extern void gt_pch_nx_hash_table_ssa_name_hasher_ (void *);



extern void gt_pch_nx_hash_table_tm_restart_hasher_ (void *);



extern void gt_pch_nx_vec_mem_addr_template_va_gc_ (void *);



extern void gt_pch_nx_scev_info_str (void *);



extern void gt_pch_nx_hash_table_scev_info_hasher_ (void *);



extern void gt_pch_nx_ssa_operand_memory_d (void *);



extern void gt_pch_nx_vec_omp_declare_variant_entry_va_gc_ (void *);



extern void gt_pch_nx_omp_declare_variant_base_entry (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_hasher_ (void *);



extern void gt_pch_nx_hash_table_omp_declare_variant_alt_hasher_ (void *);



extern void gt_pch_nx_hash_table_dllimport_hasher_ (void *);



extern void gt_pch_nx_hash_map_char__unsigned_ (void *);



extern void gt_pch_nx_vec_gimple__va_gc_ (void *);



extern void gt_pch_nx_int_range_1_ (void *);



extern void gt_pch_nx_vec_ipa_agg_jf_item_va_gc_ (void *);



extern void gt_pch_nx_ipa_bits (void *);



extern void gt_pch_nx_vec_ipa_param_descriptor_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_bits__va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_vr_va_gc_ (void *);



extern void gt_pch_nx_ipcp_transformation (void *);



extern void gt_pch_nx_vec_ipa_jump_func_va_gc_ (void *);



extern void gt_pch_nx_vec_ipa_polymorphic_call_context_va_gc_ (void *);



extern void gt_pch_nx_ipa_node_params_t (void *);



extern void gt_pch_nx_ipa_edge_args_sum_t (void *);



extern void gt_pch_nx_function_summary_ipcp_transformation__ (void *);



extern void gt_pch_nx_hash_table_tm_wrapper_hasher_ (void *);



extern void gt_pch_nx_hash_table_decl_state_hasher_ (void *);



extern void gt_pch_nx_vec_expr_eval_op_va_gc_ (void *);



extern void gt_pch_nx_vec_condition_va_gc_ (void *);



extern void gt_pch_nx_vec_size_time_entry_va_gc_ (void *);



extern void gt_pch_nx_fast_function_summary_ipa_fn_summary__va_gc_ (void *);



extern void gt_pch_nx_tree_type_map (void *);



extern void gt_pch_nx_hash_table_tree_type_map_cache_hasher_ (void *);



extern void gt_pch_nx_vec_odr_type_va_gc_ (void *);



extern void gt_pch_nx_hash_table_value_annotation_hasher_ (void *);



extern void gt_pch_nx_vec_Entity_Id_va_gc_atomic_ (void *);



extern void gt_pch_nx_tree_entity_vec_map (void *);



extern void gt_pch_nx_hash_table_dummy_type_hasher_ (void *);



extern void gt_pch_nx_parm_attr_d (void *);



extern void gt_pch_nx_vec_parm_attr_va_gc_ (void *);



extern void gt_pch_nx_stmt_group (void *);



extern void gt_pch_nx_elab_info (void *);



extern void gt_pch_nx_range_check_info_d (void *);



extern void gt_pch_nx_vec_range_check_info_va_gc_ (void *);



extern void gt_pch_nx_loop_info_d (void *);



extern void gt_pch_nx_vec_loop_info_va_gc_ (void *);



extern void gt_pch_nx_gnat_binding_level (void *);



extern void gt_pch_nx_packable_type_hash (void *);



extern void gt_pch_nx_hash_table_packable_type_hasher_ (void *);



extern void gt_pch_nx_pad_type_hash (void *);



extern void gt_pch_nx_hash_table_pad_type_hasher_ (void *);



extern void gt_pch_nx_c_label_vars (void *);



extern void gt_pch_nx_c_binding (void *);



extern void gt_pch_nx_c_scope (void *);



extern void gt_pch_nx_c_goto_bindings (void *);



extern void gt_pch_nx_vec_c_goto_bindings_p_va_gc_ (void *);



extern void gt_pch_nx_c_inline_static (void *);



extern void gt_pch_nx_sorted_fields_type (void *);



extern void gt_pch_nx_vec_const_char_p_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_gc_vec_va_gc_ (void *);



extern void gt_pch_nx_align_stack (void *);



extern void gt_pch_nx_vec_pending_weak_va_gc_ (void *);



extern void gt_pch_nx_vec_pending_redefinition_va_gc_ (void *);



extern void gt_pch_nx_opt_stack (void *);



extern void gt_pch_nx_c_parser (void *);



extern void gt_pch_nx_vec_c_token_va_gc_ (void *);



extern void gt_pch_nx_binding_table_s (void *);



extern void gt_pch_nx_binding_entry_s (void *);



extern void gt_pch_nx_cxx_binding (void *);



extern void gt_pch_nx_cp_binding_level (void *);



extern void gt_pch_nx_vec_cp_class_binding_va_gc_ (void *);



extern void gt_pch_nx_cp_token_cache (void *);



extern void gt_pch_nx_vec_deferred_access_check_va_gc_ (void *);



extern void gt_pch_nx_vec_cxx_saved_binding_va_gc_ (void *);



extern void gt_pch_nx_saved_scope (void *);



extern void gt_pch_nx_cxx_int_tree_map (void *);



extern void gt_pch_nx_named_label_entry (void *);



extern void gt_pch_nx_hash_table_named_label_hash_ (void *);



extern void gt_pch_nx_hash_table_cxx_int_tree_map_hasher_ (void *);



extern void gt_pch_nx_tree_pair_s (void *);



extern void gt_pch_nx_vec_tree_pair_s_va_gc_ (void *);



extern void gt_pch_nx_hash_table_named_decl_hash_ (void *);



extern void gt_pch_nx_tinst_level (void *);



extern void gt_pch_nx_tree_check (void *);



extern void gt_pch_nx_vec_cp_token_va_gc_ (void *);



extern void gt_pch_nx_cp_lexer (void *);



extern void gt_pch_nx_vec_cp_default_arg_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser_context (void *);



extern void gt_pch_nx_vec_cp_unparsed_functions_entry_va_gc_ (void *);



extern void gt_pch_nx_cp_parser (void *);



extern void gt_pch_nx_hash_map_tree_int_ (void *);



extern void gt_pch_nx_constexpr_fundef (void *);



extern void gt_pch_nx_hash_table_constexpr_fundef_hasher_ (void *);



extern void gt_pch_nx_constexpr_call (void *);



extern void gt_pch_nx_hash_table_constexpr_call_hasher_ (void *);



extern void gt_pch_nx_sat_entry (void *);



extern void gt_pch_nx_hash_table_sat_hasher_ (void *);



extern void gt_pch_nx_coroutine_info (void *);



extern void gt_pch_nx_hash_table_coroutine_info_hasher_ (void *);



extern void gt_pch_nx_source_location_table_entry (void *);



extern void gt_pch_nx_hash_table_source_location_table_entry_hash_ (void *);



extern void gt_pch_nx_named_label_use_entry (void *);



extern void gt_pch_nx_vec_incomplete_var_va_gc_ (void *);



extern void gt_pch_nx_hash_table_typename_hasher_ (void *);



extern void gt_pch_nx_hash_table_mangled_decl_hash_ (void *);



extern void gt_pch_nx_vec_pending_noexcept_va_gc_ (void *);



extern void gt_pch_nx_vec_tree_int_va_gc_ (void *);



extern void gt_pch_nx_hash_table_conv_type_hasher_ (void *);



extern void gt_pch_nx_subsumption_entry (void *);



extern void gt_pch_nx_hash_table_subsumption_hasher_ (void *);



extern void gt_pch_nx_pending_template (void *);



extern void gt_pch_nx_spec_entry (void *);



extern void gt_pch_nx_hash_table_spec_hasher_ (void *);



extern void gt_pch_nx_hash_map_tree_tree_pair_p_ (void *);



extern void gt_pch_nx_vec_tinfo_s_va_gc_ (void *);



extern void gt_pch_nx_vec_deferred_access_va_gc_ (void *);



extern void gt_pch_nx_hash_table_cplus_array_hasher_ (void *);



extern void gt_pch_nx_hash_table_list_hasher_ (void *);



extern void gt_pch_nx_pending_abstract_type (void *);



extern void gt_pch_nx_hash_table_abstract_type_hasher_ (void *);



extern void gt_pch_nx_Statement (void *);



extern void gt_pch_nx_binding_level (void *);



extern void gt_pch_nx_d_label_use_entry (void *);



extern void gt_pch_nx_hash_map_Statement__d_label_entry_ (void *);



extern void gt_pch_nx_hash_table_module_hasher_ (void *);



extern void gt_pch_nx_module_htab_entry (void *);



extern void gt_pch_nx_hash_table_module_decl_hasher_ (void *);



extern void gt_pch_nx_objc_map_private (void *);



extern void gt_pch_nx_hashed_entry (void *);



extern void gt_pch_nx_hashed_attribute (void *);



extern void gt_pch_nx_imp_entry (void *);



extern void gt_pch_nx_string_descriptor (void *);



extern void gt_pch_nx_hash_table_objc_string_hasher_ (void *);



extern void gt_pch_nx_vec_ident_data_tuple_va_gc_ (void *);



extern void gt_pch_nx_vec_msgref_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_prot_list_entry_va_gc_ (void *);



extern void gt_pch_nx_vec_ivarref_entry_va_gc_ (void *);





extern void gt_pch_p_9line_maps
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_token
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cpp_macro
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13string_concat
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_concat_db
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_map_location_hash_string_concat__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11bitmap_head
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7rtx_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9rtvec_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11symtab_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cgraph_edge
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7section
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cl_target_option
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cl_optimization
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8edge_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15basic_block_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17stack_local_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16machine_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14bitmap_element
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34generic_wide_int_wide_int_storage_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13coverage_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9mem_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9reg_attrs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12object_block
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14vec_rtx_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10real_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11fixed_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23constant_descriptor_rtx
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10target_rtl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15cgraph_rtl_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_decl_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_tree_tree_type_tree_cache_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12ptr_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14range_info_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_constructor_elt_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_tree_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9lang_decl
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24tree_statement_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14target_globals
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14lang_tree_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_decl_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_int_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12tree_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_alias_pair_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13libfunc_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_libfunc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15target_libfuncs
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14sequence_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_rtx_insn__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18call_site_record_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16vec_uchar_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_call_site_record_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9gimple_df
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_fde_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17rtx_constant_pool
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11frame_space
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_callee_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_callinfo_dalloc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11stack_usage
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9eh_status
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18control_flow_graph
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_5loops
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17language_function
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14hash_set_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24types_used_by_vars_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_used_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13nb_iter_bound
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9loop_exit
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_4loop
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10control_iv
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_loop_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10niter_desc
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_loop_exit_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_basic_block_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11rtl_bb_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15vec_edge_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_ref_t_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18section_hash_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18lto_file_decl_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_replace_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ipa_replace_map__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21ipa_param_adjustments
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_ipa_param_performed_split_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cgraph_simd_clone
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28cgraph_function_version_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cgraph_edge_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25cgraph_indirect_call_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8asm_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12symbol_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_section_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_asmname_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_map_symtab_node__symbol_priority_map_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24constant_descriptor_tree
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_map_alias_set_hash_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15alias_set_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_alias_set_entry__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_function_version_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17lto_in_decl_state
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_ipa_bit_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_ipa_vr_ggc_hash_traits_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15ipa_node_params
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13ipa_edge_args
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25ipa_agg_replacement_value
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14ipa_fn_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10odr_type_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_ipa_adjusted_param_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12param_access
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_param_access__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17isra_func_summary
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_isra_param_desc_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26ipa_sra_function_summaries
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8typeinfo
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11dw_cfi_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17dw_loc_descr_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_loc_list_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_discr_list_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dw_cfa_location
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_cfi_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16addr_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20indirect_string_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15dwarf_file_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20hash_map_char__tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10dw_cfi_row
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17reg_saved_in_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_fde_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_indirect_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16comdat_type_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_line_info_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18dw_line_info_table
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_dw_attr_node_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16limbo_die_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dwarf_file_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21vec_dw_die_ref_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21variable_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_variable_value_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_block_die_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12var_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16var_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17call_arg_loc_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_decl_loc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22cached_dw_loc_list_def
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_dw_loc_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30vec_dw_line_info_table__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_pubname_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_macinfo_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_dw_ranges_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29vec_dw_ranges_by_label_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_die_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_addr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_map_tree_sym_off_pair_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17inline_entry_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36hash_table_inline_entry_data_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9temp_slot
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20initial_value_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_temp_slot_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_const_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_wide_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_poly_int_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_reg_attr_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_const_double_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_const_fixed_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11eh_region_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16eh_landing_pad_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10eh_catch_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_eh_region_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_eh_landing_pad_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21hash_map_gimple__int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_insn_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23temp_slot_address_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_temp_address_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_tree_hash_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11test_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14test_of_length
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10test_other
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13test_of_union
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12example_base
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9test_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11user_struct
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_libfunc_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16string_pool_data
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_type_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_poly_int_cst_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_cl_option_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_decl_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_37hash_table_tree_vec_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_table_section_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31hash_table_object_block_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_table_tree_descriptor_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_const_rtx_desc_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_tm_clone_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_6gimple
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15tm_restart_node
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19hash_map_tree_tree_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_ssa_name_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_restart_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_mem_addr_template_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13scev_info_str
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_scev_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20ssa_operand_memory_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_36vec_omp_declare_variant_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30omp_declare_variant_base_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_omp_declare_variant_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_42hash_table_omp_declare_variant_alt_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_dllimport_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24hash_map_char__unsigned_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_gimple__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12int_range_1_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_ipa_agg_jf_item_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8ipa_bits
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_ipa_param_descriptor_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_ipa_bits__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17vec_ipa_vr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipcp_transformation
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ipa_jump_func_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_39vec_ipa_polymorphic_call_context_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17ipa_node_params_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19ipa_edge_args_sum_t
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38function_summary_ipcp_transformation__
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_tm_wrapper_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_decl_state_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_expr_eval_op_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_condition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_size_time_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44fast_function_summary_ipa_fn_summary__va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13tree_type_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38hash_table_tree_type_map_cache_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_odr_type_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_value_annotation_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_Entity_Id_va_gc_atomic_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19tree_entity_vec_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_dummy_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11parm_attr_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_parm_attr_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10stmt_group
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9elab_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18range_check_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_range_check_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11loop_info_d
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_20vec_loop_info_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18gnat_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18packable_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_packable_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13pad_type_hash
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_pad_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12c_label_vars
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9c_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_7c_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_goto_bindings
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_c_goto_bindings_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15c_inline_static
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18sorted_fields_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_const_char_p_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_gc_vec_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11align_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_pending_weak_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_pending_redefinition_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9opt_stack
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8c_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_c_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_table_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_15binding_entry_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11cxx_binding
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cp_binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_cp_class_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14cp_token_cache
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32vec_deferred_access_check_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28vec_cxx_saved_binding_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11saved_scope
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16cxx_int_tree_map
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17named_label_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_named_label_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_cxx_int_tree_map_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tree_pair_s
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22vec_tree_pair_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_named_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_11tinst_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10tree_check
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_cp_token_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_8cp_lexer
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_31vec_cp_default_arg_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17cp_parser_context
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_38vec_cp_unparsed_functions_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9cp_parser
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18hash_map_tree_int_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16constexpr_fundef
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_35hash_table_constexpr_fundef_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14constexpr_call
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_constexpr_call_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9sat_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_22hash_table_sat_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_14coroutine_info
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_33hash_table_coroutine_info_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27source_location_table_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_44hash_table_source_location_table_entry_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21named_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25vec_incomplete_var_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27hash_table_typename_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_29hash_table_mangled_decl_hash_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_pending_noexcept_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_19vec_tree_int_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_28hash_table_conv_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17subsumption_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_subsumption_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16pending_template
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_10spec_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_spec_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26hash_map_tree_tree_pair_p_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_18vec_tinfo_s_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_deferred_access_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_cplus_array_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23hash_table_list_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_21pending_abstract_type
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_32hash_table_abstract_type_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9Statement
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_13binding_level
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17d_label_use_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_34hash_map_Statement__d_label_entry_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_25hash_table_module_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17module_htab_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_module_decl_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16objc_map_private
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_12hashed_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_16hashed_attribute
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_9imp_entry
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_17string_descriptor
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_30hash_table_objc_string_hasher_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_27vec_ident_data_tuple_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_23vec_msgref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_26vec_prot_list_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
extern void gt_pch_p_24vec_ivarref_entry_va_gc_
    (void *, void *, gt_pointer_operator, void *);
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h" 2




typedef void (*gt_note_pointers) (void *, void *, gt_pointer_operator,
      void *);






typedef void (*gt_handle_reorder) (void *, void *, gt_pointer_operator,
       void *);


extern int gt_pch_note_object (void *, void *, gt_note_pointers);



extern void gt_pch_note_reorder (void *, void *, gt_handle_reorder);


extern void gt_clear_caches ();


typedef void (*gt_pointer_walker) (void *);



struct ggc_root_tab {
  void *base;
  size_t nelt;
  size_t stride;
  gt_pointer_walker cb;
  gt_pointer_walker pchw;
};


extern const struct ggc_root_tab * const gt_ggc_rtab[];
extern const struct ggc_root_tab * const gt_ggc_deletable_rtab[];
extern const struct ggc_root_tab * const gt_pch_scalar_rtab[];
# 91 "/home/giulianob/gcc_git_gnu/gcc/gcc/ggc.h"
extern int ggc_set_mark (const void *);




extern int ggc_marked_p (const void *);


extern void gt_pch_n_S (const void *);
extern void gt_ggc_m_S (const void *);




extern void init_stringpool (void);


extern void init_ggc (void);





extern bool ggc_protect_identifiers;


extern void gt_pch_save (FILE *f);





extern void *ggc_internal_alloc (size_t, void (*)(void *), size_t,
     size_t )
     __attribute__ ((__malloc__));

inline void *
ggc_internal_alloc (size_t s )
{
  return ggc_internal_alloc (s, nullptr, 0, 1 );
}

extern size_t ggc_round_alloc_size (size_t requested_size);


extern void *ggc_internal_cleared_alloc (size_t, void (*)(void *),
      size_t, size_t
      ) __attribute__ ((__malloc__));

inline void *
ggc_internal_cleared_alloc (size_t s )
{
  return ggc_internal_cleared_alloc (s, nullptr, 0, 1 );
}


extern void *ggc_realloc (void *, size_t );


extern void ggc_free (void *);

extern void dump_ggc_loc_statistics ();





template<typename T>
void
finalize (void *p)
{
  static_cast<T *> (p)->~T ();
}

template<typename T>
inline bool
need_finalization_p ()
{

  return !__has_trivial_destructor (T);



}

template<typename T>
inline T *
ggc_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), finalize<T>, 0, 1
       ));
  else
    return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
       ));
}





template<typename T>
inline T *
ggc_alloc_no_dtor ()
{
  return static_cast<T *> (ggc_internal_alloc (sizeof (T), nullptr, 0, 1
            ));
}

template<typename T>
inline T *
ggc_cleared_alloc ()
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T),
        finalize<T>, 0, 1
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (sizeof (T), nullptr, 0, 1
        ));
}

template<typename T>
inline T *
ggc_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), finalize<T>,
       sizeof (T), c ));
  else
    return static_cast<T *> (ggc_internal_alloc (c * sizeof (T), nullptr, 0, 0
       ));
}

template<typename T>
inline T *
ggc_cleared_vec_alloc (size_t c )
{
  if (need_finalization_p<T> ())
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T),
        finalize<T>,
        sizeof (T), c
        ));
  else
    return static_cast<T *> (ggc_internal_cleared_alloc (c * sizeof (T), nullptr,
        0, 0 ));
}

inline void *
ggc_alloc_atomic (size_t s )
{
    return ggc_internal_alloc (s );
}



template <typename T>
inline void
ggc_delete (T *ptr)
{
  ptr->~T ();
  ggc_free (ptr);
}




extern const char *ggc_alloc_string (const char *contents, int length
                                     );






extern void ggc_collect (void);


extern void ggc_trim (void);


extern void ggc_grow (void);



extern void ggc_register_root_tab (const struct ggc_root_tab *);


extern void gt_pch_restore (FILE *f);




extern void ggc_print_statistics (void);

extern void stringpool_statistics (void);


extern void init_ggc_heuristics (void);


extern void report_heap_memory_use (void);







inline struct rtx_def *
ggc_alloc_rtx_def_stat (size_t s )
{
  return (struct rtx_def *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_alloc (s );
}

inline union tree_node *
ggc_alloc_cleared_tree_node_stat (size_t s )
{
  return (union tree_node *) ggc_internal_cleared_alloc (s );
}

inline gimple *
ggc_alloc_cleared_gimple_statement_stat (size_t s )
{
  return (gimple *) ggc_internal_cleared_alloc (s );
}

inline void
gt_ggc_mx (const char *s)
{
  ((const_cast<char *> (s)) != nullptr && ((void *) (const_cast<char *> (s))) != (void *) 1 && ! ggc_set_mark (const_cast<char *> (s)));
}

inline void
gt_pch_nx (const char *)
{
}

inline void
gt_ggc_mx (int)
{
}

inline void
gt_pch_nx (int)
{
}

inline void
gt_pch_nx (unsigned int)
{
}
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 1
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void ggc_free (void *);
extern size_t ggc_round_alloc_size (size_t requested_size);
extern void *ggc_realloc (void *, size_t );
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
extern void dump_vec_loc_statistics (void);


extern htab_t vec_mem_usage_hash;




struct vec_prefix
{




  void register_overhead (void *, size_t, size_t );
  void release_overhead (void *, size_t, size_t, bool );
  static unsigned calculate_allocation (vec_prefix *, unsigned, bool);
  static unsigned calculate_allocation_1 (unsigned, unsigned);







  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;

  unsigned m_alloc : 31;
  unsigned m_using_auto_storage : 1;
  unsigned m_num;
};





inline unsigned
vec_prefix::calculate_allocation (vec_prefix *pfx, unsigned reserve,
      bool exact)
{
  if (exact)
    return (pfx ? pfx->m_num : 0) + reserve;
  else if (!pfx)
    return ((4) > (reserve) ? (4) : (reserve));
  return calculate_allocation_1 (pfx->m_alloc, pfx->m_num + reserve);
}

template<typename, typename, typename> struct vec;






struct vl_embed { };
struct vl_ptr { };
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
struct va_heap
{


  typedef vl_ptr default_layout;

  template<typename T>
  static void reserve (vec<T, va_heap, vl_embed> *&, unsigned, bool
         );

  template<typename T>
  static void release (vec<T, va_heap, vl_embed> *&);
};







template<typename T>
inline void
va_heap::reserve (vec<T, va_heap, vl_embed> *&v, unsigned reserve, bool exact
    )
{
  size_t elt_size = sizeof (T);
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  ((void)(!(alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 282, __FUNCTION__), 0 : 0));

  if (0 && v)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), false);

  size_t size = vec<T, va_heap, vl_embed>::embedded_size (alloc);
  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, va_heap, vl_embed> *> (xrealloc (v, size));
  v->embedded_init (alloc, nelem);

  if (0)
    v->m_vecpfx.register_overhead (v, alloc, elt_size );
}



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfree-nonheap-object"




template<typename T>
void
va_heap::release (vec<T, va_heap, vl_embed> *&v)
{
  size_t elt_size = sizeof (T);
  if (v == nullptr)
    return;

  if (0)
    v->m_vecpfx.release_overhead (v, elt_size * v->allocated (),
      v->allocated (), true);
  ::free (v);
  v = nullptr;
}


#pragma GCC diagnostic pop





struct va_gc
{




  typedef vl_embed default_layout;

  template<typename T, typename A>
  static void reserve (vec<T, A, vl_embed> *&, unsigned, bool
         );

  template<typename T, typename A>
  static void release (vec<T, A, vl_embed> *&v);
};




template<typename T, typename A>
inline void
va_gc::release (vec<T, A, vl_embed> *&v)
{
  if (v)
    ::ggc_free (v);
  v = nullptr;
}







template<typename T, typename A>
void
va_gc::reserve (vec<T, A, vl_embed> *&v, unsigned reserve, bool exact
  )
{
  unsigned alloc
    = vec_prefix::calculate_allocation (v ? &v->m_vecpfx : 0, reserve, exact);
  if (!alloc)
    {
      ::ggc_free (v);
      v = nullptr;
      return;
    }


  size_t size = vec<T, A, vl_embed>::embedded_size (alloc);


  size = ::ggc_round_alloc_size (size);


  size_t vec_offset = sizeof (vec_prefix);
  size_t elt_size = sizeof (T);
  alloc = (size - vec_offset) / elt_size;


  size = vec_offset + alloc * elt_size;

  unsigned nelem = v ? v->length () : 0;
  v = static_cast <vec<T, A, vl_embed> *> (::ggc_realloc (v, size
              ));
  v->embedded_init (alloc, nelem);
}





struct va_gc_atomic : va_gc
{
};
# 415 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T,
         typename A = va_heap,
         typename L = typename A::default_layout>
struct vec
{
};
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
void
debug_helper (vec<T> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 440 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
                  stderr
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                        );
    }
}






template<typename T>
void
debug_helper (vec<T, va_gc> &ref)
{
  unsigned i;
  for (i = 0; i < ref.length (); ++i)
    {
      fprintf (
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
              stderr
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                    , "[%d] = ", i);
      debug_slim (ref[i]);
      fputc ('\n', 
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
                  stderr
# 460 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                        );
    }
}
# 501 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
inline void
vec_default_construct (T *dst, unsigned n)
{
# 520 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
  for ( ; n; ++dst, --n)
    ::new (static_cast<void*>(dst)) T ();
}



template <typename T>
inline void
vec_copy_construct (T *dst, const T *src, unsigned n)
{
  for ( ; n; ++dst, ++src, --n)
    ::new (static_cast<void*>(dst)) T (*src);
}







struct vnull
{
  template <typename T, typename A, typename L>
  constexpr operator vec<T, A, L> () { return vec<T, A, L>(); }
};
extern vnull vNULL;
# 574 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
struct vec<T, A, vl_embed>
{
public:
  unsigned allocated (void) const { return m_vecpfx.m_alloc; }
  unsigned length (void) const { return m_vecpfx.m_num; }
  bool is_empty (void) const { return m_vecpfx.m_num == 0; }
  T *address (void) { return m_vecdata; }
  const T *address (void) const { return m_vecdata; }
  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return address () + length (); }
  const T *end () const { return address () + length (); }
  const T &operator[] (unsigned) const;
  T &operator[] (unsigned);
  T &last (void);
  bool space (unsigned) const;
  bool iterate (unsigned, T *) const;
  bool iterate (unsigned, T **) const;
  vec *copy () const;
  void splice (const vec &);
  void splice (const vec *src);
  T *quick_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void quick_insert (unsigned, const T &);
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  static size_t embedded_size (unsigned);
  void embedded_init (unsigned, unsigned = 0, unsigned = 0);
  void quick_grow (unsigned len);
  void quick_grow_cleared (unsigned len);


  template <typename, typename, typename> friend struct vec;


  friend struct va_gc;
  friend struct va_gc_atomic;
  friend struct va_heap;



  vec_prefix m_vecpfx;
  T m_vecdata[1];
};
# 645 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec_safe_space (const vec<T, A, vl_embed> *v, unsigned nelems)
{
  return v ? v->space (nelems) : nelems == 0;
}



template<typename T, typename A>
inline unsigned
vec_safe_length (const vec<T, A, vl_embed> *v)
{
  return v ? v->length () : 0;
}



template<typename T, typename A>
inline T *
vec_safe_address (vec<T, A, vl_embed> *v)
{
  return v ? v->address () : nullptr;
}



template<typename T, typename A>
inline bool
vec_safe_is_empty (vec<T, A, vl_embed> *v)
{
  return v ? v->is_empty () : true;
}



template<typename T, typename A>
inline bool
vec_safe_reserve (vec<T, A, vl_embed> *&v, unsigned nelems, bool exact = false
    )
{
  bool extend = nelems ? !vec_safe_space (v, nelems) : false;
  if (extend)
    A::reserve (v, nelems, exact );
  return extend;
}

template<typename T, typename A>
inline bool
vec_safe_reserve_exact (vec<T, A, vl_embed> *&v, unsigned nelems
   )
{
  return vec_safe_reserve (v, nelems, true );
}





template<typename T, typename A>
inline void
vec_alloc (vec<T, A, vl_embed> *&v, unsigned nelems )
{
  v = nullptr;
  vec_safe_reserve (v, nelems, false );
}




template<typename T, typename A>
inline void
vec_free (vec<T, A, vl_embed> *&v)
{
  A::release (v);
}



template<typename T, typename A>
inline void
vec_safe_grow (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  ((void)(!(len >= oldlen) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 729, __FUNCTION__), 0 : 0));
  vec_safe_reserve_exact (v, len - oldlen );
  v->quick_grow (len);
}



template<typename T, typename A>
inline void
vec_safe_grow_cleared (vec<T, A, vl_embed> *&v, unsigned len )
{
  unsigned oldlen = vec_safe_length (v);
  vec_safe_grow (v, len );
  vec_default_construct (v->address () + oldlen, len - oldlen);
}




template<typename T>
inline void
vec_safe_grow_cleared (vec<T, va_heap, vl_ptr> *&v,
         unsigned len )
{
  v->safe_grow_cleared (len );
}




template<typename T>
inline bool
vec_safe_reserve (vec<T, va_heap, vl_ptr> *&v, unsigned nelems, bool exact = false
    )
{
  return v->reserve (nelems, exact);
}



template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T **ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}

template<typename T, typename A>
inline bool
vec_safe_iterate (const vec<T, A, vl_embed> *v, unsigned ix, T *ptr)
{
  if (v)
    return v->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline T *
vec_safe_push (vec<T, A, vl_embed> *&v, const T &obj )
{
  vec_safe_reserve (v, 1, false );
  return v->quick_push (obj);
}




template<typename T, typename A>
inline void
vec_safe_insert (vec<T, A, vl_embed> *&v, unsigned ix, const T &obj
   )
{
  vec_safe_reserve (v, 1, false );
  v->quick_insert (ix, obj);
}



template<typename T, typename A>
inline void
vec_safe_truncate (vec<T, A, vl_embed> *v, unsigned size)
{
  if (v)
    v->truncate (size);
}



template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec_safe_copy (vec<T, A, vl_embed> *src )
{
  return src ? src->copy () : nullptr;
}



template<typename T, typename A>
inline void
vec_safe_splice (vec<T, A, vl_embed> *&dst, const vec<T, A, vl_embed> *src
   )
{
  unsigned src_len = vec_safe_length (src);
  if (src_len)
    {
      vec_safe_reserve_exact (dst, vec_safe_length (dst) + src_len
         );
      dst->splice (*src);
    }
}




template<typename T, typename A>
inline bool
vec_safe_contains (vec<T, A, vl_embed> *v, const T &search)
{
  return v ? v->contains (search) : false;
}




template<typename T, typename A>
inline const T &
vec<T, A, vl_embed>::operator[] (unsigned ix) const
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 870, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}

template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::operator[] (unsigned ix)
{
  ((void)(!(ix < m_vecpfx.m_num) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 878, __FUNCTION__), 0 : 0));
  return m_vecdata[ix];
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::last (void)
{
  ((void)(!(m_vecpfx.m_num > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 889, __FUNCTION__), 0 : 0));
  return (*this)[m_vecpfx.m_num - 1];
}
# 900 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::space (unsigned nelems) const
{
  return m_vecpfx.m_alloc - m_vecpfx.m_num >= nelems;
}
# 915 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T *ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = m_vecdata[ix];
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}
# 941 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::iterate (unsigned ix, T **ptr) const
{
  if (ix < m_vecpfx.m_num)
    {
      *ptr = (const_cast<T *> ((&m_vecdata[ix])));
      return true;
    }
  else
    {
      *ptr = 0;
      return false;
    }
}




template<typename T, typename A>
inline vec<T, A, vl_embed> *
vec<T, A, vl_embed>::copy (void) const
{
  vec<T, A, vl_embed> *new_vec = nullptr;
  unsigned len = length ();
  if (len)
    {
      vec_alloc (new_vec, len );
      new_vec->embedded_init (len, len);
      vec_copy_construct (new_vec->address (), m_vecdata, len);
    }
  return new_vec;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> &src)
{
  unsigned len = src.length ();
  if (len)
    {
      ((void)(!(space (len)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 986, __FUNCTION__), 0 : 0));
      vec_copy_construct (end (), src.address (), len);
      m_vecpfx.m_num += len;
    }
}

template<typename T, typename A>
inline void
vec<T, A, vl_embed>::splice (const vec<T, A, vl_embed> *src)
{
  if (src)
    splice (*src);
}






template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::quick_push (const T &obj)
{
  ((void)(!(space (1)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1009, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[m_vecpfx.m_num++];
  *slot = obj;
  return slot;
}




template<typename T, typename A>
inline T &
vec<T, A, vl_embed>::pop (void)
{
  ((void)(!(length () > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1022, __FUNCTION__), 0 : 0));
  return m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::truncate (unsigned size)
{
  ((void)(!(length () >= size) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1034, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = size;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_insert (unsigned ix, const T &obj)
{
  ((void)(!(length () < allocated ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1046, __FUNCTION__), 0 : 0));
  ((void)(!(ix <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1047, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot + 1, slot, (m_vecpfx.m_num++ - ix) * sizeof (T));
  *slot = obj;
}






template<typename T, typename A>
inline void
vec<T, A, vl_embed>::ordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1062, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  memmove (slot, slot + 1, (--m_vecpfx.m_num - ix) * sizeof (T));
}
# 1105 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline void
vec<T, A, vl_embed>::unordered_remove (unsigned ix)
{
  ((void)(!(ix < length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1109, __FUNCTION__), 0 : 0));
  m_vecdata[ix] = m_vecdata[--m_vecpfx.m_num];
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::block_remove (unsigned ix, unsigned len)
{
  ((void)(!(ix + len <= length ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1121, __FUNCTION__), 0 : 0));
  T *slot = &m_vecdata[ix];
  m_vecpfx.m_num -= len;
  memmove (slot, slot + len, (m_vecpfx.m_num - ix) * sizeof (T));
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::qsort (int (*cmp) (const void *, const void *))
{
  if (length () > 1)
    gcc_qsort (address (), length (), sizeof (T), cmp);
}




template<typename T, typename A>
inline void
vec<T, A, vl_embed>::sort (int (*cmp) (const void *, const void *, void *),
      void *data)
{
  if (length () > 1)
    gcc_sort_r (address (), length (), sizeof (T), cmp, data);
}





template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *))
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline T *
vec<T, A, vl_embed>::bsearch (const void *key,
         int (*compar) (const void *, const void *,
          void *), void *data)
{
  const void *base = this->address ();
  size_t nmemb = this->length ();
  size_t size = sizeof (T);

  size_t l, u, idx;
  const void *p;
  int comparison;

  l = 0;
  u = nmemb;
  while (l < u)
    {
      idx = (l + u) / 2;
      p = (const void *) (((const char *) base) + (idx * size));
      comparison = (*compar) (key, p, data);
      if (comparison < 0)
 u = idx;
      else if (comparison > 0)
 l = idx + 1;
      else
 return (T *)const_cast<void *>(p);
    }

  return nullptr;
}




template<typename T, typename A>
inline bool
vec<T, A, vl_embed>::contains (const T &search) const
{
  unsigned int len = length ();
  for (unsigned int i = 0; i < len; i++)
    if ((*this)[i] == search)
      return true;

  return false;
}






template<typename T, typename A>
unsigned
vec<T, A, vl_embed>::lower_bound (T obj, bool (*lessthan)(const T &, const T &))
  const
{
  unsigned int len = length ();
  unsigned int half, middle;
  unsigned int first = 0;
  while (len > 0)
    {
      half = len / 2;
      middle = first;
      middle += half;
      T middle_elem = (*this)[middle];
      if (lessthan (middle_elem, obj))
 {
   first = middle;
   ++first;
   len = len - half - 1;
 }
      else
 len = half;
    }
  return first;
}
# 1280 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, typename A>
inline size_t
vec<T, A, vl_embed>::embedded_size (unsigned alloc)
{
  struct alignas (T) U { char data[sizeof (T)]; };
  typedef vec<U, A, vl_embed> vec_embedded;
  typedef typename std::conditional<std::is_standard_layout<T>::value,
        vec, vec_embedded>::type vec_stdlayout;
  static_assert (sizeof (vec_stdlayout) == sizeof (vec), "");
  static_assert (alignof (vec_stdlayout) == alignof (vec), "");
  return 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        __builtin_offsetof (
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        vec_stdlayout
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        , 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
        m_vecdata
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h" 3 4
        ) 
# 1290 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
                                            + alloc * sizeof (T);
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::embedded_init (unsigned alloc, unsigned num, unsigned aut)
{
  m_vecpfx.m_alloc = alloc;
  m_vecpfx.m_using_auto_storage = aut;
  m_vecpfx.m_num = num;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow (unsigned len)
{
  ((void)(!(length () <= len && len <= m_vecpfx.m_alloc) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1314, __FUNCTION__), 0 : 0));
  m_vecpfx.m_num = len;
}





template<typename T, typename A>
inline void
vec<T, A, vl_embed>::quick_grow_cleared (unsigned len)
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  quick_grow (len);
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}



template<typename T>
void
gt_ggc_mx (vec<T, va_gc> *v)
{
  extern void gt_ggc_mx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_ggc_mx ((*v)[i]);
}

template<typename T>
void
gt_ggc_mx (vec<T, va_gc_atomic, vl_embed> *v __attribute__ ((__unused__)))
{


}




template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v)
{
  extern void gt_pch_nx (T &);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx ((*v)[i]);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T *, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  for (unsigned i = 0; i < v->length (); i++)
    op (&((*v)[i]), cookie);
}

template<typename T, typename A>
void
gt_pch_nx (vec<T, A, vl_embed> *v, gt_pointer_operator op, void *cookie)
{
  extern void gt_pch_nx (T *, gt_pointer_operator, void *);
  for (unsigned i = 0; i < v->length (); i++)
    gt_pch_nx (&((*v)[i]), op, cookie);
}
# 1410 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
struct vec<T, va_heap, vl_ptr>
{
public:


  void create (unsigned nelems );
  void release (void);


  bool exists (void) const
  { return m_vec != nullptr; }

  bool is_empty (void) const
  { return m_vec ? m_vec->is_empty () : true; }

  unsigned length (void) const
  { return m_vec ? m_vec->length () : 0; }

  T *address (void)
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  const T *address (void) const
  { return m_vec ? m_vec->m_vecdata : nullptr; }

  T *begin () { return address (); }
  const T *begin () const { return address (); }
  T *end () { return begin () + length (); }
  const T *end () const { return begin () + length (); }
  const T &operator[] (unsigned ix) const
  { return (*m_vec)[ix]; }

  bool operator!=(const vec &other) const
  { return !(*this == other); }

  bool operator==(const vec &other) const
  { return address () == other.address (); }

  T &operator[] (unsigned ix)
  { return (*m_vec)[ix]; }

  T &last (void)
  { return m_vec->last (); }

  bool space (int nelems) const
  { return m_vec ? m_vec->space (nelems) : nelems == 0; }

  bool iterate (unsigned ix, T *p) const;
  bool iterate (unsigned ix, T **p) const;
  vec copy () const;
  bool reserve (unsigned, bool = false );
  bool reserve_exact (unsigned );
  void splice (const vec &);
  void safe_splice (const vec & );
  T *quick_push (const T &);
  T *safe_push (const T &);
  T &pop (void);
  void truncate (unsigned);
  void safe_grow (unsigned );
  void safe_grow_cleared (unsigned );
  void quick_grow (unsigned);
  void quick_grow_cleared (unsigned);
  void quick_insert (unsigned, const T &);
  void safe_insert (unsigned, const T & );
  void ordered_remove (unsigned);
  void unordered_remove (unsigned);
  void block_remove (unsigned, unsigned);
  void qsort (int (*) (const void *, const void *));
  void sort (int (*) (const void *, const void *, void *), void *);
  T *bsearch (const void *key, int (*compar)(const void *, const void *));
  T *bsearch (const void *key,
       int (*compar)(const void *, const void *, void *), void *);
  unsigned lower_bound (T, bool (*)(const T &, const T &)) const;
  bool contains (const T &search) const;
  void reverse (void);

  bool using_auto_storage () const;



  vec<T, va_heap, vl_embed> *m_vec;
};
# 1500 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T, size_t N = 0>
class auto_vec : public vec<T, va_heap>
{
public:
  auto_vec ()
  {
    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  auto_vec (size_t s)
  {
    if (s > N)
      {
 this->create (s);
 return;
      }

    m_auto.embedded_init (((N) > (2) ? (N) : (2)), 0, 1);
    this->m_vec = &m_auto;
  }

  ~auto_vec ()
  {
    this->release ();
  }

private:
  vec<T, va_heap, vl_embed> m_auto;
  T m_data[((N - 1) > (1) ? (N - 1) : (1))];
};



template<typename T>
class auto_vec<T, 0> : public vec<T, va_heap>
{
public:
  auto_vec () { this->m_vec = nullptr; }
  auto_vec (size_t n) { this->create (n); }
  ~auto_vec () { this->release (); }
};






template<typename T>
inline void
vec_alloc (vec<T> *&v, unsigned nelems )
{
  v = new vec<T>;
  v->create (nelems );
}





class auto_string_vec : public auto_vec <char *>
{
 public:
  ~auto_string_vec ();
};
# 1578 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template <typename T>
class auto_delete_vec : public auto_vec <T *>
{
 public:
  auto_delete_vec () {}
  auto_delete_vec (size_t s) : auto_vec <T *> (s) {}

  ~auto_delete_vec ();

private:
  auto_delete_vec<T> (const auto_delete_vec<T>&) = delete; void operator= (const auto_delete_vec<T> &) = delete;
};



template<typename T>
inline void
vec_check_alloc (vec<T, va_heap> *&vec, unsigned nelems )
{
  if (!vec)
    vec_alloc (vec, nelems );
}




template<typename T>
inline void
vec_free (vec<T> *&v)
{
  if (v == nullptr)
    return;

  v->release ();
  delete v;
  v = nullptr;
}
# 1624 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T *ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1647 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::iterate (unsigned ix, T **ptr) const
{
  if (m_vec)
    return m_vec->iterate (ix, ptr);
  else
    {
      *ptr = 0;
      return false;
    }
}
# 1686 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
inline
auto_string_vec::~auto_string_vec ()
{
  int i;
  char *str;
  for (i = 0; (*this).iterate ((i), &(str)); ++(i))
    free (str);
}




template <typename T>
inline
auto_delete_vec<T>::~auto_delete_vec ()
{
  int i;
  T *item;
  for (i = 0; (*this).iterate ((i), &(item)); ++(i))
    delete item;
}




template<typename T>
inline vec<T, va_heap, vl_ptr>
vec<T, va_heap, vl_ptr>::copy (void) const
{
  vec<T, va_heap, vl_ptr> new_vec = vNULL;
  if (length ())
    new_vec.m_vec = m_vec->copy ();
  return new_vec;
}
# 1731 "/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h"
template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve (unsigned nelems, bool exact )
{
  if (space (nelems))
    return false;




  vec<T, va_heap, vl_embed> *oldvec = m_vec;
  unsigned int oldsize = 0;
  bool handle_auto_vec = m_vec && using_auto_storage ();
  if (handle_auto_vec)
    {
      m_vec = nullptr;
      oldsize = oldvec->length ();
      nelems += oldsize;
    }

  va_heap::reserve (m_vec, nelems, exact );
  if (handle_auto_vec)
    {
      vec_copy_construct (m_vec->address (), oldvec->address (), oldsize);
      m_vec->m_vecpfx.m_num = oldsize;
    }

  return true;
}







template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::reserve_exact (unsigned nelems )
{
  return reserve (nelems, true );
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::create (unsigned nelems )
{
  m_vec = nullptr;
  if (nelems > 0)
    reserve_exact (nelems );
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::release (void)
{
  if (!m_vec)
    return;

  if (using_auto_storage ())
    {
      m_vec->m_vecpfx.m_num = 0;
      return;
    }

  va_heap::release (m_vec);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::splice (const vec<T, va_heap, vl_ptr> &src)
{
  if (src.length ())
    m_vec->splice (*(src.m_vec));
}







template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_splice (const vec<T, va_heap, vl_ptr> &src
          )
{
  if (src.length ())
    {
      reserve_exact (src.length ());
      splice (src);
    }
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::quick_push (const T &obj)
{
  return m_vec->quick_push (obj);
}






template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::safe_push (const T &obj )
{
  reserve (1, false );
  return quick_push (obj);
}




template<typename T>
inline T &
vec<T, va_heap, vl_ptr>::pop (void)
{
  return m_vec->pop ();
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::truncate (unsigned size)
{
  if (m_vec)
    m_vec->truncate (size);
  else
    ((void)(!(size == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1885, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow (unsigned len )
{
  unsigned oldlen = length ();
  ((void)(!(oldlen <= len) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1898, __FUNCTION__), 0 : 0));
  reserve_exact (len - oldlen );
  if (m_vec)
    m_vec->quick_grow (len);
  else
    ((void)(!(len == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1903, __FUNCTION__), 0 : 0));
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_grow_cleared (unsigned len )
{
  unsigned oldlen = length ();
  size_t growby = len - oldlen;
  safe_grow (len );
  if (growby != 0)
    vec_default_construct (address () + oldlen, growby);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1930, __FUNCTION__), 0 : 0));
  m_vec->quick_grow (len);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_grow_cleared (unsigned len)
{
  ((void)(!(m_vec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/vec.h", 1943, __FUNCTION__), 0 : 0));
  m_vec->quick_grow_cleared (len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::quick_insert (unsigned ix, const T &obj)
{
  m_vec->quick_insert (ix, obj);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::safe_insert (unsigned ix, const T &obj )
{
  reserve (1, false );
  quick_insert (ix, obj);
}






template<typename T>
inline void
vec<T, va_heap, vl_ptr>::ordered_remove (unsigned ix)
{
  m_vec->ordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::unordered_remove (unsigned ix)
{
  m_vec->unordered_remove (ix);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::block_remove (unsigned ix, unsigned len)
{
  m_vec->block_remove (ix, len);
}





template<typename T>
inline void
vec<T, va_heap, vl_ptr>::qsort (int (*cmp) (const void *, const void *))
{
  if (m_vec)
    m_vec->qsort (cmp);
}




template<typename T>
inline void
vec<T, va_heap, vl_ptr>::sort (int (*cmp) (const void *, const void *,
        void *), void *data)
{
  if (m_vec)
    m_vec->sort (cmp, data);
}





template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *))
{
  if (m_vec)
    return m_vec->bsearch (key, cmp);
  return nullptr;
}




template<typename T>
inline T *
vec<T, va_heap, vl_ptr>::bsearch (const void *key,
      int (*cmp) (const void *, const void *,
           void *), void *data)
{
  if (m_vec)
    return m_vec->bsearch (key, cmp, data);
  return nullptr;
}







template<typename T>
inline unsigned
vec<T, va_heap, vl_ptr>::lower_bound (T obj,
          bool (*lessthan)(const T &, const T &))
    const
{
  return m_vec ? m_vec->lower_bound (obj, lessthan) : 0;
}




template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::contains (const T &search) const
{
  return m_vec ? m_vec->contains (search) : false;
}



template<typename T>
inline void
vec<T, va_heap, vl_ptr>::reverse (void)
{
  unsigned l = length ();
  T *ptr = address ();

  for (unsigned i = 0; i < l / 2; i++)
    std::swap (ptr[i], ptr[l - i - 1]);
}

template<typename T>
inline bool
vec<T, va_heap, vl_ptr>::using_auto_storage () const
{
  return m_vec->m_vecpfx.m_using_auto_storage;
}



template<typename T>
inline void
release_vec_vec (vec<vec<T> > &vec)
{
  for (unsigned i = 0; i < vec.length (); i++)
    vec[i].release ();

  vec.release ();
}


        
# 249 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/hashtab.h" 1
# 250 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
hashval_t iterative_hash_host_wide_int (long, hashval_t);
hashval_t iterative_hash_hashval_t (hashval_t, hashval_t);

namespace inchash
{

class hash
{
 public:


  hash (hashval_t seed = 0)
  {
    val = seed;
    bits = 0;
  }


  hashval_t end ()
  {
    return val;
  }


  void add_int (unsigned v)
  {
    val = iterative_hash_hashval_t (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_int (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_int (v.coeffs[i]);
  }


  void add_hwi (long v)
  {
    val = iterative_hash_host_wide_int (v, val);
  }


  template<unsigned int N, typename T>
  void add_poly_hwi (const poly_int_pod<N, T> &v)
  {
    for (unsigned int i = 0; i < N; ++i)
      add_hwi (v.coeffs[i]);
  }


  template<typename T>
  void add_wide_int (const generic_wide_int<T> &x)
  {
    add_int (x.get_len ());
    for (unsigned i = 0; i < x.get_len (); i++)
      add_hwi (x.sext_elt (i));
  }


  void add_ptr (const void *ptr)
  {
    add (&ptr, sizeof (ptr));
  }


  void add (const void *data, size_t len)
  {
    val = iterative_hash (data, len, val);
  }


  void merge_hash (hashval_t other)
  {
    val = iterative_hash_hashval_t (other, val);
  }


  void merge (hash &other)
  {
    merge_hash (other.val);
  }

  template<class T> void add_object(T &obj)
  {
    add (&obj, sizeof(T));
  }



  void add_flag (bool flag)
  {
    bits = (bits << 1) | flag;
  }

  void commit_flag ()
  {
    add_int (bits);
    bits = 0;
  }





  void add_commutative (hash &a, hash &b)
  {
    if (a.end() > b.end())
      {
 merge (b);
 merge (a);
      }
    else
      {
 merge (a);
 merge (b);
      }
  }

 private:
  hashval_t val;
  unsigned bits;
};

}
# 174 "/home/giulianob/gcc_git_gnu/gcc/gcc/inchash.h"
inline
hashval_t
iterative_hash_hashval_t (hashval_t val, hashval_t val2)
{

  hashval_t a = 0x9e3779b9;

  { a -= val; a -= val2; a ^= (val2>>13); val -= val2; val -= a; val ^= (a<< 8); val2 -= a; val2 -= val; val2 ^= ((val&0xffffffff)>>13); a -= val; a -= val2; a ^= ((val2&0xffffffff)>>12); val -= val2; val -= a; val = (val ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>> 5)) & 0xffffffff; a -= val; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; val -= val2; val -= a; val = (val ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= val; val2 = (val2 ^ (val>>15)) & 0xffffffff; };
  return val2;
}



inline
hashval_t
iterative_hash_host_wide_int (long val, hashval_t val2)
{
  if (sizeof (long) == sizeof (hashval_t))
    return iterative_hash_hashval_t (val, val2);
  else
    {
      hashval_t a = (hashval_t) val;


      int zero = 0;
      hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 8 + zero));
      { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
      if (sizeof (long) > 2 * sizeof (hashval_t))
 {
   hashval_t a = (hashval_t) (val >> (sizeof (hashval_t) * 16 + zero));
   hashval_t b = (hashval_t) (val >> (sizeof (hashval_t) * 24 + zero));
   { a -= b; a -= val2; a ^= (val2>>13); b -= val2; b -= a; b ^= (a<< 8); val2 -= a; val2 -= b; val2 ^= ((b&0xffffffff)>>13); a -= b; a -= val2; a ^= ((val2&0xffffffff)>>12); b -= val2; b -= a; b = (b ^ (a<<16)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>> 5)) & 0xffffffff; a -= b; a -= val2; a = (a ^ (val2>> 3)) & 0xffffffff; b -= val2; b -= a; b = (b ^ (a<<10)) & 0xffffffff; val2 -= a; val2 -= b; val2 = (val2 ^ (b>>15)) & 0xffffffff; };
 }
      return val2;
    }
}
# 251 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats-traits.h"
enum mem_alloc_origin
{
  HASH_TABLE_ORIGIN,
  HASH_MAP_ORIGIN,
  HASH_SET_ORIGIN,
  VEC_ORIGIN,
  BITMAP_ORIGIN,
  GGC_ORIGIN,
  ALLOC_POOL_ORIGIN,
  MEM_ALLOC_ORIGIN_LENGTH
};


static const char * mem_alloc_origin_names[] = { "Hash tables", "Hash maps",
  "Hash sets", "Heap vectors", "Bitmaps", "GGC memory", "Allocation pool" };
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h"
template <typename Type>
struct typed_free_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_free_remove <Type>::remove (Type *p)
{
  free (p);
}



template <typename Type>
struct typed_delete_remove
{
  static inline void remove (Type *p);
};




template <typename Type>
inline void
typed_delete_remove <Type>::remove (Type *p)
{
  delete p;
}



template <typename Type>
struct typed_noop_remove
{
  static inline void remove (Type &);
};




template <typename Type>
inline void
typed_noop_remove <Type>::remove (Type &)
{
}







template <typename Type, Type Empty, Type Deleted = Empty>
struct int_hash : typed_noop_remove <Type>
{
  typedef Type value_type;
  typedef Type compare_type;

  static inline hashval_t hash (value_type);
  static inline bool equal (value_type existing, value_type candidate);
  static inline void mark_deleted (Type &);
  static const bool empty_zero_p = Empty == 0;
  static inline void mark_empty (Type &);
  static inline bool is_deleted (Type);
  static inline bool is_empty (Type);
};

template <typename Type, Type Empty, Type Deleted>
inline hashval_t
int_hash <Type, Empty, Deleted>::hash (value_type x)
{
  return x;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::equal (value_type x, value_type y)
{
  return x == y;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_deleted (Type &x)
{
  ((void)(!(Empty != Deleted) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-traits.h", 115, __FUNCTION__), 0 : 0));
  x = Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline void
int_hash <Type, Empty, Deleted>::mark_empty (Type &x)
{
  x = Empty;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_deleted (Type x)
{
  return Empty != Deleted && x == Deleted;
}

template <typename Type, Type Empty, Type Deleted>
inline bool
int_hash <Type, Empty, Deleted>::is_empty (Type x)
{
  return x == Empty;
}





template <typename Type>
struct pointer_hash
{
  typedef Type *value_type;
  typedef Type *compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &existing,
       const compare_type &candidate);
  static inline void mark_deleted (Type *&);
  static const bool empty_zero_p = true;
  static inline void mark_empty (Type *&);
  static inline bool is_deleted (Type *);
  static inline bool is_empty (Type *);
};

template <typename Type>
inline hashval_t
pointer_hash <Type>::hash (const value_type &candidate)
{


  return (hashval_t) ((intptr_t)candidate >> 3);
}

template <typename Type>
inline bool
pointer_hash <Type>::equal (const value_type &existing,
      const compare_type &candidate)
{
  return existing == candidate;
}

template <typename Type>
inline void
pointer_hash <Type>::mark_deleted (Type *&e)
{
  e = reinterpret_cast<Type *> (1);
}

template <typename Type>
inline void
pointer_hash <Type>::mark_empty (Type *&e)
{
  e = nullptr;
}

template <typename Type>
inline bool
pointer_hash <Type>::is_deleted (Type *e)
{
  return e == reinterpret_cast<Type *> (1);
}

template <typename Type>
inline bool
pointer_hash <Type>::is_empty (Type *e)
{
  return e == nullptr;
}




struct string_hash : pointer_hash <const char>
{
  static inline hashval_t hash (const char *);
  static inline bool equal (const char *, const char *);
};

inline hashval_t
string_hash::hash (const char *id)
{
  return htab_hash_string (id);
}

inline bool
string_hash::equal (const char *id1, const char *id2)
{
  return strcmp (id1, id2) == 0;
}



template<typename T>
struct ggc_remove
{
  static void remove (T &) {}

  static void
  ggc_mx (T &p)
  {
    extern void gt_ggc_mx (T &);
    gt_ggc_mx (p);
  }


  static void
  ggc_maybe_mx (T &p)
  {
    ggc_mx (p);
  }

  static void
  pch_nx (T &p)
  {
    extern void gt_pch_nx (T &);
    gt_pch_nx (p);
  }

  static void
  pch_nx (T &p, gt_pointer_operator op, void *cookie)
  {
    op (&p, cookie);
  }
};




template<typename T>
struct ggc_cache_remove : ggc_remove<T>
{

  static void ggc_maybe_mx (T &) {}

  static int
  keep_cache_entry (T &e)
  {
    return ggc_marked_p (e) ? -1 : 0;
  }
};




template <typename T>
struct nofree_ptr_hash : pointer_hash <T>, typed_noop_remove <T *> {};




template <typename T>
struct free_ptr_hash : pointer_hash <T>, typed_free_remove <T> {};




template <typename T>
struct delete_ptr_hash : pointer_hash <T>, typed_delete_remove <T> {};




template <typename T>
struct ggc_ptr_hash : pointer_hash <T>, ggc_remove <T *> {};





template <typename T>
struct ggc_cache_ptr_hash : pointer_hash <T>, ggc_cache_remove <T *> {};




struct nofree_string_hash : string_hash, typed_noop_remove <const char *> {};




template <typename T1, typename T2>
struct pair_hash
{
  typedef std::pair <typename T1::value_type,
       typename T2::value_type> value_type;
  typedef std::pair <typename T1::compare_type,
       typename T2::compare_type> compare_type;

  static inline hashval_t hash (const value_type &);
  static inline bool equal (const value_type &, const compare_type &);
  static inline void remove (value_type &);
  static inline void mark_deleted (value_type &);
  static const bool empty_zero_p = T1::empty_zero_p;
  static inline void mark_empty (value_type &);
  static inline bool is_deleted (const value_type &);
  static inline bool is_empty (const value_type &);
};

template <typename T1, typename T2>
inline hashval_t
pair_hash <T1, T2>::hash (const value_type &x)
{
  return iterative_hash_hashval_t (T1::hash (x.first), T2::hash (x.second));
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::equal (const value_type &x, const compare_type &y)
{
  return T1::equal (x.first, y.first) && T2::equal (x.second, y.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::remove (value_type &x)
{
  T1::remove (x.first);
  T2::remove (x.second);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_deleted (value_type &x)
{
  T1::mark_deleted (x.first);
}

template <typename T1, typename T2>
inline void
pair_hash <T1, T2>::mark_empty (value_type &x)
{
  T1::mark_empty (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_deleted (const value_type &x)
{
  return T1::is_deleted (x.first);
}

template <typename T1, typename T2>
inline bool
pair_hash <T1, T2>::is_empty (const value_type &x)
{
  return T1::is_empty (x.first);
}

template <typename T> struct default_hash_traits : T {};

template <typename T>
struct default_hash_traits <T *> : ggc_ptr_hash <T> {};
# 253 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map-traits.h"
template <typename H, typename Value>
struct simple_hashmap_traits
{
  typedef typename H::value_type key_type;
  static const bool maybe_mx = true;
  static inline hashval_t hash (const key_type &);
  static inline bool equal_keys (const key_type &, const key_type &);
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = H::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename H, typename Value>
inline hashval_t
simple_hashmap_traits <H, Value>::hash (const key_type &h)
{
  return H::hash (h);
}

template <typename H, typename Value>
inline bool
simple_hashmap_traits <H, Value>::equal_keys (const key_type &k1,
           const key_type &k2)
{
  return H::equal (k1, k2);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::remove (T &entry)
{
  H::remove (entry.m_key);
  entry.m_value.~Value ();
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_empty (const T &entry)
{
  return H::is_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline bool
simple_hashmap_traits <H, Value>::is_deleted (const T &entry)
{
  return H::is_deleted (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_empty (T &entry)
{
  H::mark_empty (entry.m_key);
}

template <typename H, typename Value>
template <typename T>
inline void
simple_hashmap_traits <H, Value>::mark_deleted (T &entry)
{
  H::mark_deleted (entry.m_key);
}

template <typename H, typename Value>
struct simple_cache_map_traits: public simple_hashmap_traits<H,Value>
{
  static const bool maybe_mx = false;
};






template <typename Value>
struct unbounded_hashmap_traits
{
  template <typename T> static inline void remove (T &);
  static const bool empty_zero_p = default_hash_traits <Value>::empty_zero_p;
  template <typename T> static inline bool is_empty (const T &);
  template <typename T> static inline bool is_deleted (const T &);
  template <typename T> static inline void mark_empty (T &);
  template <typename T> static inline void mark_deleted (T &);
};

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::remove (T &entry)
{
  default_hash_traits <Value>::remove (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_empty (const T &entry)
{
  return default_hash_traits <Value>::is_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline bool
unbounded_hashmap_traits <Value>::is_deleted (const T &entry)
{
  return default_hash_traits <Value>::is_deleted (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_empty (T &entry)
{
  default_hash_traits <Value>::mark_empty (entry.m_value);
}

template <typename Value>
template <typename T>
inline void
unbounded_hashmap_traits <Value>::mark_deleted (T &entry)
{
  default_hash_traits <Value>::mark_deleted (entry.m_value);
}





template <typename Key, typename Value>
struct unbounded_int_hashmap_traits : unbounded_hashmap_traits <Value>
{
  typedef Key key_type;
  static inline hashval_t hash (Key);
  static inline bool equal_keys (Key, Key);
};

template <typename Key, typename Value>
inline hashval_t
unbounded_int_hashmap_traits <Key, Value>::hash (Key k)
{
  return k;
}

template <typename Key, typename Value>
inline bool
unbounded_int_hashmap_traits <Key, Value>::equal_keys (Key k1, Key k2)
{
  return k1 == k2;
}
# 254 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

template<typename, typename, typename> class hash_map;
template<typename, bool, typename> class hash_set;




template <typename Type>
struct xcallocator
{
  static Type *data_alloc (size_t count);
  static void data_free (Type *memory);
};




template <typename Type>
inline Type *
xcallocator <Type>::data_alloc (size_t count)
{
  return static_cast <Type *> (xcalloc (count, sizeof (Type)));
}




template <typename Type>
inline void
xcallocator <Type>::data_free (Type *memory)
{
  return ::free (memory);
}




struct prime_ent
{
  hashval_t prime;
  hashval_t inv;
  hashval_t inv_m2;
  hashval_t shift;
};

extern struct prime_ent const prime_tab[];


extern unsigned int hash_table_sanitize_eq_limit;



extern unsigned int hash_table_higher_prime_index (unsigned long n)
   __attribute__ ((__pure__));

extern __attribute__ ((__noreturn__)) __attribute__ ((__cold__)) void hashtab_chk_error ();
# 322 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
inline hashval_t
mul_mod (hashval_t x, hashval_t y, hashval_t inv, int shift)
{
   hashval_t t1, t2, t3, t4, q, r;

   t1 = ((uint64_t)x * inv) >> 32;
   t2 = x - t1;
   t3 = t2 >> 1;
   t4 = t1 + t3;
   q = t4 >> shift;
   r = x - (q * y);

   return r;
}



inline hashval_t
hash_table_mod1 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 343, __FUNCTION__), 0 : 0));
  return mul_mod (hash, p->prime, p->inv, p->shift);
}



inline hashval_t
hash_table_mod2 (hashval_t hash, unsigned int index)
{
  const struct prime_ent *p = &prime_tab[index];
  ((void)(!(sizeof (hashval_t) * 8 <= 32) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 353, __FUNCTION__), 0 : 0));
  return 1 + mul_mod (hash, p->prime - 2, p->inv_m2, p->shift);
}

class mem_usage;
# 372 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template <typename Descriptor, bool Lazy = false,
   template<typename Type> class Allocator = xcallocator>
class hash_table
{
  typedef typename Descriptor::value_type value_type;
  typedef typename Descriptor::compare_type compare_type;

public:
  explicit hash_table (size_t, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  explicit hash_table (const hash_table &, bool ggc = false,
         bool sanitize_eq_and_hash = true,
         bool gather_mem_stats = 0,
         mem_alloc_origin origin = HASH_TABLE_ORIGIN
         );
  ~hash_table ();


  static hash_table *
  create_ggc (size_t n, bool sanitize_eq_and_hash = true )
  {
    hash_table *table = ggc_alloc<hash_table> ();
    new (table) hash_table (n, true, sanitize_eq_and_hash, 0,
       HASH_TABLE_ORIGIN );
    return table;
  }


  size_t size () const { return m_size; }


  size_t elements () const { return m_n_elements - m_n_deleted; }


  size_t elements_with_deleted () const { return m_n_elements; }


  void empty () { if (elements ()) empty_slow (); }


  bool is_empty () const { return elements () == 0; }




  void clear_slot (value_type *);




  value_type &find_with_hash (const compare_type &, hashval_t);


  value_type &find (const value_type &value)
    {
      return find_with_hash (value, Descriptor::hash (value));
    }

  value_type *find_slot (const value_type &value, insert_option insert)
    {
      return find_slot_with_hash (value, Descriptor::hash (value), insert);
    }
# 445 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
  value_type *find_slot_with_hash (const compare_type &comparable,
       hashval_t hash, enum insert_option insert);




  void remove_elt_with_hash (const compare_type &, hashval_t);



  void remove_elt (const value_type &value)
    {
      remove_elt_with_hash (value, Descriptor::hash (value));
    }




  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse_noresize (Argument argument);



  template <typename Argument,
     int (*Callback) (value_type *slot, Argument argument)>
  void traverse (Argument argument);

  class iterator
  {
  public:
    iterator () : m_slot (nullptr), m_limit (nullptr) {}

    iterator (value_type *slot, value_type *limit) :
      m_slot (slot), m_limit (limit) {}

    inline value_type &operator * () { return *m_slot; }
    void slide ();
    inline iterator &operator ++ ();
    bool operator != (const iterator &other) const
      {
 return m_slot != other.m_slot || m_limit != other.m_limit;
      }

  private:
    value_type *m_slot;
    value_type *m_limit;
  };

  iterator begin () const
    {
      if (Lazy && m_entries == nullptr)
 return iterator ();
      iterator iter (m_entries, m_entries + m_size);
      iter.slide ();
      return iter;
    }

  iterator end () const { return iterator (); }

  double collisions () const
    {
      return m_searches ? static_cast <double> (m_collisions) / m_searches : 0;
    }

private:

  void operator= (hash_table&);

  template<typename T> friend void gt_ggc_mx (hash_table<T> *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *);
  template<typename T> friend void
    hashtab_entry_note_pointers (void *, void *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void
  gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);
  template<typename T> friend void gt_pch_nx (hash_table<T> *,
           gt_pointer_operator, void *);

  template<typename T> friend void gt_cleare_cache (hash_table<T> *);

  void empty_slow ();

  value_type *alloc_entries (size_t n ) const;
  value_type *find_empty_slot_for_expand (hashval_t);
  void verify (const compare_type &comparable, hashval_t hash);
  bool too_empty_p (unsigned int);
  void expand ();
  static bool is_deleted (value_type &v)
  {
    return Descriptor::is_deleted (v);
  }

  static bool is_empty (value_type &v)
  {
    return Descriptor::is_empty (v);
  }

  static void mark_deleted (value_type &v)
  {
    Descriptor::mark_deleted (v);
  }

  static void mark_empty (value_type &v)
  {
    Descriptor::mark_empty (v);
  }


  typename Descriptor::value_type *m_entries;

  size_t m_size;


  size_t m_n_elements;


  size_t m_n_deleted;



  unsigned int m_searches;



  unsigned int m_collisions;



  unsigned int m_size_prime_index;


  bool m_ggc;


  bool m_sanitize_eq_and_hash;





  static const bool m_gather_mem_stats = false;

};




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
template<typename Key, typename Value,
  typename Traits = simple_hashmap_traits<default_hash_traits<Key>,
       Value> >
class hash_map;





class mem_location
{
public:

  inline
  mem_location () {}


  inline
  mem_location (mem_alloc_origin origin, bool ggc,
  const char *filename = nullptr, int line = 0,
  const char *function = nullptr):
    m_filename (filename), m_function (function), m_line (line), m_origin
    (origin), m_ggc (ggc) {}


  inline
  mem_location (mem_location &other): m_filename (other.m_filename),
    m_function (other.m_function), m_line (other.m_line),
    m_origin (other.m_origin), m_ggc (other.m_ggc) {}





  hashval_t
  hash ()
  {
    inchash::hash hash;

    hash.add_ptr (m_filename);
    hash.add_ptr (m_function);
    hash.add_int (m_line);

    return hash.end ();
  }


  int
  equal (const mem_location &other)
  {
    return m_filename == other.m_filename && m_function == other.m_function
      && m_line == other.m_line;
  }


  inline const char *
  get_trimmed_filename ()
  {
    const char *s1 = m_filename;
    const char *s2;

    while ((s2 = strstr (s1, "gcc/")))
      s1 = s2 + 4;

    return s1;
  }

  inline char *
  to_string ()
  {
    unsigned l = strlen (get_trimmed_filename ()) + strlen (m_function)
      + 30;

    char *s = ((char *) xmalloc (sizeof (char) * (l)));
    sprintf (s, "%s:%i (%s)", get_trimmed_filename (),
      m_line, m_function);

    s[((48) < (l - 1) ? (48) : (l - 1))] = '\0';

    return s;
  }


  static const char *
  get_origin_name (mem_alloc_origin origin)
  {
    return mem_alloc_origin_names[(unsigned) origin];
  }


  const char *m_filename;

  const char *m_function;

  int m_line;

  mem_alloc_origin m_origin;

  bool m_ggc;
};


class mem_usage
{
public:

  mem_usage (): m_allocated (0), m_times (0), m_peak (0), m_instances (1) {}


  mem_usage (size_t allocated, size_t times, size_t peak, size_t instances = 0):
    m_allocated (allocated), m_times (times), m_peak (peak),
    m_instances (instances) {}


  inline void
  register_overhead (size_t size)
  {
    m_allocated += size;
    m_times++;

    if (m_peak < m_allocated)
      m_peak = m_allocated;
  }


  inline void
  release_overhead (size_t size)
  {
    ((void)(!(size <= m_allocated) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h", 153, __FUNCTION__), 0 : 0));

    m_allocated -= size;
  }


  mem_usage
  operator+ (const mem_usage &second)
  {
    return mem_usage (m_allocated + second.m_allocated,
        m_times + second.m_times,
        m_peak + second.m_peak,
        m_instances + second.m_instances);
  }


  inline bool
  operator== (const mem_usage &second) const
  {
    return (m_allocated == second.m_allocated
     && m_peak == second.m_peak
     && m_times == second.m_times);
  }


  inline bool
  operator< (const mem_usage &second) const
  {
    if (*this == second)
      return false;

    return (m_allocated == second.m_allocated ?
     (m_peak == second.m_peak ? m_times < second.m_times
      : m_peak < second.m_peak) : m_allocated < second.m_allocated);
  }


  static int
  compare (const void *first, const void *second)
  {
    typedef std::pair<mem_location *, mem_usage *> mem_pair_t;

    const mem_pair_t f = *(const mem_pair_t *)first;
    const mem_pair_t s = *(const mem_pair_t *)second;

    if (*f.second == *s.second)
      return 0;

    return *f.second < *s.second ? 1 : -1;
  }


  inline void
  dump (mem_location *loc, const mem_usage &total) const
  {
    char *location_string = loc->to_string ();

    fprintf (
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s " "%" "9" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                             "l" "u" 
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                             "%c" ":%5.1f%%"
      "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
     "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
     "%c" "%" "9" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
              "l" "u" 
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
              "%c" ":%5.1f%%%10s\n",
      location_string, (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_allocated, total.m_allocated),
      (uint64_t)(((m_peak) < 10 * 1024 ? (m_peak) : ((m_peak) < 10 * (1024 * 1024) ? (m_peak) / 1024 : (m_peak) / (1024 * 1024)))), ((m_peak) < 10 * 1024 ? ' ' : ((m_peak) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')),
      get_percent (m_times, total.m_times), loc->m_ggc ? "ggc" : "heap");

    free (location_string);
  }


  inline void
  dump_footer () const
  {
    fprintf (
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%s" "%" "53" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                         "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                         "%c" "%" "26" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                                   "l" "u" 
# 224 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                                   "%c" "\n", "Total",
      (uint64_t)(((m_allocated) < 10 * 1024 ? (m_allocated) : ((m_allocated) < 10 * (1024 * 1024) ? (m_allocated) / 1024 : (m_allocated) / (1024 * 1024)))), ((m_allocated) < 10 * 1024 ? ' ' : ((m_allocated) < 10 * (1024 * 1024) ? 'k' : 'M')), (uint64_t)(((m_times) < 10 * 1024 ? (m_times) : ((m_times) < 10 * (1024 * 1024) ? (m_times) / 1024 : (m_times) / (1024 * 1024)))), ((m_times) < 10 * 1024 ? ' ' : ((m_times) < 10 * (1024 * 1024) ? 'k' : 'M')));
  }


  static inline float
  get_percent (size_t nominator, size_t denominator)
  {
    return denominator == 0 ? 0.0f : nominator * 100.0 / denominator;
  }


  static inline void
  print_dash_line (size_t count = 140)
  {
    while (count--)
      fputc ('-', 
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                 stderr
# 240 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                       );
    fputc ('\n', 
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
                stderr
# 241 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                      );
  }


  static inline void
  dump_header (const char *name)
  {
    fprintf (
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
            stderr
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                  , "%-48s %11s%16s%10s%17s\n", name, "Leak", "Peak",
      "Times", "Type");
  }


  size_t m_allocated;

  size_t m_times;

  size_t m_peak;

  size_t m_instances;
};



template <class T>
class mem_usage_pair
{
public:
  mem_usage_pair (T *usage_, size_t allocated_): usage (usage_),
  allocated (allocated_) {}

  T *usage;
  size_t allocated;
};


template <class T>
class mem_alloc_description
{
public:
  struct mem_location_hash : nofree_ptr_hash <mem_location>
  {
    static hashval_t
    hash (value_type l)
    {
      inchash::hash hstate;

      hstate.add_ptr ((const void *)l->m_filename);
      hstate.add_ptr (l->m_function);
      hstate.add_int (l->m_line);

      return hstate.end ();
    }

    static bool
    equal (value_type l1, value_type l2)
    {
      return (l1->m_filename == l2->m_filename
       && l1->m_function == l2->m_function
       && l1->m_line == l2->m_line);
    }
  };


  typedef hash_map <mem_location_hash, T *> mem_map_t;
  typedef hash_map <const void *, mem_usage_pair<T> > reverse_mem_map_t;
  typedef hash_map <const void *, std::pair<T *, size_t> > reverse_object_map_t;
  typedef std::pair <mem_location *, T *> mem_list_t;


  mem_alloc_description ();


  ~mem_alloc_description ();


  bool contains_descriptor_for_instance (const void *ptr);


  T *get_descriptor_for_instance (const void *ptr);



  T *register_descriptor (const void *ptr, mem_location *location);





  T *register_descriptor (const void *ptr, mem_alloc_origin origin,
     bool ggc, const char *name, int line,
     const char *function);



  T *register_instance_overhead (size_t size, const void *ptr);




  void register_object_overhead (T *usage, size_t size, const void *ptr);




  T *release_instance_overhead (void *ptr, size_t size,
    bool remove_from_map = false);


  void release_object_overhead (void *ptr);





  void unregister_descriptor (void *ptr);


  T get_sum (mem_alloc_origin origin);





  mem_list_t *get_list (mem_alloc_origin origin, unsigned *length);



  void dump (mem_alloc_origin origin);


  reverse_object_map_t *m_reverse_object_map;

private:


  T *register_overhead (size_t size, mem_alloc_origin origin, const char *name,
   int line, const char *function, const void *ptr);


  mem_location m_location;


  mem_map_t *m_map;


  reverse_mem_map_t *m_reverse_map;
};



template <class T>
inline bool
mem_alloc_description<T>::contains_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr);
}



template <class T>
inline T*
mem_alloc_description<T>::get_descriptor_for_instance (const void *ptr)
{
  return m_reverse_map->get (ptr) ? (*m_reverse_map->get (ptr)).usage : nullptr;
}




template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_location *location)
{
  T *usage = nullptr;

  T **slot = m_map->get (location);
  if (slot)
    {
      delete location;
      usage = *slot;
      usage->m_instances++;
    }
  else
    {
      usage = new T ();
      m_map->put (location, usage);
    }

  if (!m_reverse_map->get (ptr))
    m_reverse_map->put (ptr, mem_usage_pair<T> (usage, 0));

  return usage;
}






template <class T>
inline T*
mem_alloc_description<T>::register_descriptor (const void *ptr,
            mem_alloc_origin origin,
            bool ggc,
            const char *filename,
            int line,
            const char *function)
{
  mem_location *l = new mem_location (origin, ggc, filename, line, function);
  return register_descriptor (ptr, l);
}




template <class T>
inline T*
mem_alloc_description<T>::register_instance_overhead (size_t size,
            const void *ptr)
{
  mem_usage_pair <T> *slot = m_reverse_map->get (ptr);
  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->register_overhead (size);

  return usage;
}





template <class T>
void
mem_alloc_description<T>::register_object_overhead (T *usage, size_t size,
          const void *ptr)
{


  m_reverse_object_map->put (ptr, std::pair<T *, size_t> (usage, size));
}




template <class T>
inline T*
mem_alloc_description<T>::register_overhead (size_t size,
          mem_alloc_origin origin,
          const char *filename,
          int line,
          const char *function,
          const void *ptr)
{
  T *usage = register_descriptor (ptr, origin, filename, line, function);
  usage->register_overhead (size);

  return usage;
}



template <class T>
inline T *
mem_alloc_description<T>::release_instance_overhead (void *ptr, size_t size,
           bool remove_from_map)
{
  mem_usage_pair<T> *slot = m_reverse_map->get (ptr);

  if (!slot)
    {

      return nullptr;
    }

  T *usage = (*slot).usage;
  usage->release_overhead (size);

  if (remove_from_map)
    m_reverse_map->remove (ptr);

  return usage;
}



template <class T>
inline void
mem_alloc_description<T>::release_object_overhead (void *ptr)
{
  std::pair <T *, size_t> *entry = m_reverse_object_map->get (ptr);
  entry->first->release_overhead (entry->second);
  m_reverse_object_map->remove (ptr);
}





template <class T>
inline void
mem_alloc_description<T>::unregister_descriptor (void *ptr)
{
  m_reverse_map->remove (ptr);
}



template <class T>
inline
mem_alloc_description<T>::mem_alloc_description ()
{
  m_map = new mem_map_t (13, false, false, false);
  m_reverse_map = new reverse_mem_map_t (13, false, false, false);
  m_reverse_object_map = new reverse_object_map_t (13, false, false, false);
}



template <class T>
inline
mem_alloc_description<T>::~mem_alloc_description ()
{
  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    {
      delete (*it).first;
      delete (*it).second;
    }

  delete m_map;
  delete m_reverse_map;
  delete m_reverse_object_map;
}






template <class T>
inline
typename mem_alloc_description<T>::mem_list_t *
mem_alloc_description<T>::get_list (mem_alloc_origin origin, unsigned *length)
{


  size_t element_size = sizeof (mem_list_t);
  mem_list_t *list = ((mem_list_t *) xcalloc ((m_map->elements ()), sizeof (mem_list_t)));
  unsigned i = 0;

  for (typename mem_map_t::iterator it = m_map->begin (); it != m_map->end ();
       ++it)
    if ((*it).first->m_origin == origin)
      list[i++] = std::pair<mem_location*, T*> (*it);

  gcc_qsort (list, i, element_size, T::compare);
  *length = i;

  return list;
}



template <class T>
inline T
mem_alloc_description<T>::get_sum (mem_alloc_origin origin)
{
  unsigned length;
  mem_list_t *list = get_list (origin, &length);
  T sum;

  for (unsigned i = 0; i < length; i++)
    sum = sum + *list[i].second;

  free ((void*) (list));

  return sum;
}




template <class T>
inline void
mem_alloc_description<T>::dump (mem_alloc_origin origin)
{
  unsigned length;

  fprintf (
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 636 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");

  mem_list_t *list = get_list (origin, &length);
  T total = get_sum (origin);

  T::print_dash_line ();
  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  for (int i = length - 1; i >= 0; i--)
    list[i].second->dump (list[i].first, total);
  T::print_dash_line ();

  T::dump_header (mem_location::get_origin_name (origin));
  T::print_dash_line ();
  total.dump_footer ();
  T::print_dash_line ();

  free ((void*) (list));

  fprintf (
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h" 3 4
          stderr
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/mem-stats.h"
                , "\n");
}
# 595 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h" 1
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-map.h"
const size_t default_hash_map_size = 13;
template<typename KeyId, typename Value,
  typename Traits
                                        >
class hash_map
{
  typedef typename Traits::key_type Key;
  struct hash_entry
  {
    Key m_key;
    Value m_value;

    typedef hash_entry value_type;
    typedef Key compare_type;

    static hashval_t hash (const hash_entry &e)
      {
        return Traits::hash (e.m_key);
      }

    static bool equal (const hash_entry &a, const Key &b)
        {
   return Traits::equal_keys (a.m_key, b);
        }

    static void remove (hash_entry &e) { Traits::remove (e); }

    static void mark_deleted (hash_entry &e) { Traits::mark_deleted (e); }

    static bool is_deleted (const hash_entry &e)
      {
        return Traits::is_deleted (e);
      }

    static const bool empty_zero_p = Traits::empty_zero_p;
    static void mark_empty (hash_entry &e) { Traits::mark_empty (e); }
    static bool is_empty (const hash_entry &e) { return Traits::is_empty (e); }

    static void ggc_mx (hash_entry &e)
      {
 gt_ggc_mx (e.m_key);
 gt_ggc_mx (e.m_value);
      }

    static void ggc_maybe_mx (hash_entry &e)
      {
 if (Traits::maybe_mx)
   ggc_mx (e);
      }

    static void pch_nx (hash_entry &e)
      {
 gt_pch_nx (e.m_key);
 gt_pch_nx (e.m_value);
      }

    static void pch_nx (hash_entry &e, gt_pointer_operator op, void *c)
      {
 pch_nx_helper (e.m_key, op, c);
 pch_nx_helper (e.m_value, op, c);
      }

    static int keep_cache_entry (hash_entry &e)
      {
 return ggc_marked_p (e.m_key);
      }

  private:
    template<typename T>
    static void
      pch_nx_helper (T &x, gt_pointer_operator op, void *cookie)
 {
   gt_pch_nx (&x, op, cookie);
 }

    static void
      pch_nx_helper (int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (unsigned int, gt_pointer_operator, void *)
 {
 }

    static void
      pch_nx_helper (bool, gt_pointer_operator, void *)
 {
 }

    template<typename T>
      static void
      pch_nx_helper (T *&x, gt_pointer_operator op, void *cookie)
 {
   op (&x, cookie);
 }
  };

public:
  explicit hash_map (size_t n = default_hash_map_size, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (n, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN )
  {
  }

  explicit hash_map (const hash_map &h, bool ggc = false,
       bool sanitize_eq_and_hash = true,
       bool gather_mem_stats = 0
       )
    : m_table (h.m_table, ggc, sanitize_eq_and_hash, gather_mem_stats,
        HASH_MAP_ORIGIN ) {}


  static hash_map *create_ggc (size_t size = default_hash_map_size,
          bool gather_mem_stats = 0
          )
    {
      hash_map *map = ggc_alloc<hash_map> ();
      new (map) hash_map (size, true, true, gather_mem_stats );
      return map;
    }





  bool put (const Key &k, const Value &v)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = hash_entry::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *) &e->m_value) Value (v);
 }
      else
 e->m_value = v;

      return !ins;
    }




  Value *get (const Key &k)
    {
      hash_entry &e = m_table.find_with_hash (k, Traits::hash (k));
      return Traits::is_empty (e) ? nullptr : &e.m_value;
    }





  Value &get_or_insert (const Key &k, bool *existed = nullptr)
    {
      hash_entry *e = m_table.find_slot_with_hash (k, Traits::hash (k),
         INSERT);
      bool ins = Traits::is_empty (*e);
      if (ins)
 {
   e->m_key = k;
   new ((void *)&e->m_value) Value ();
 }

      if (existed != nullptr)
 *existed = !ins;

      return e->m_value;
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       const Value &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f ((*iter).m_key, (*iter).m_value, a);
    }

  template<typename Arg, bool (*f)(const typename Traits::key_type &,
       Value *, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<hash_entry>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 if (!f ((*iter).m_key, &(*iter).m_value, a))
   break;
    }

  size_t elements () const { return m_table.elements (); }

  void empty () { m_table.empty(); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<hash_entry>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
    {
      ++m_iter;
      return *this;
    }




    class reference_pair {
    public:
      const Key &first;
      Value &second;

      reference_pair (const Key &key, Value &value) : first (key), second (value) {}

      template <typename K, typename V>
      operator std::pair<K, V> () const { return std::pair<K, V> (first, second); }
    };

    reference_pair operator* ()
    {
      hash_entry &e = *m_iter;
      return reference_pair (e.m_key, e.m_value);
    }

    bool
    operator != (const iterator &other) const
    {
      return m_iter != other.m_iter;
    }

  private:
    typename hash_table<hash_entry>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }

private:

  template<typename T, typename U, typename V> friend void gt_ggc_mx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *);
  template<typename T, typename U, typename V> friend void gt_pch_nx (hash_map<T, U, V> *, gt_pointer_operator, void *);
  template<typename T, typename U, typename V> friend void gt_cleare_cache (hash_map<T, U, V> *);

  hash_table<hash_entry> m_table;
};



template<typename K, typename V, typename H>
static inline void
gt_ggc_mx (hash_map<K, V, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_cleare_cache (hash_map<K, V, H> *h)
{
  if (h)
    gt_cleare_cache (&h->m_table);
}

template<typename K, typename V, typename H>
static inline void
gt_pch_nx (hash_map<K, V, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}

enum hm_alloc { hm_heap = false, hm_ggc = true };
template<bool ggc, typename K, typename V, typename H>
inline hash_map<K,V,H> *
hash_map_maybe_create (hash_map<K,V,H> *&h,
         size_t size = default_hash_map_size)
{
  if (!h)
    {
      if (ggc)
 h = hash_map<K,V,H>::create_ggc (size);
      else
 h = new hash_map<K,V,H> (size);
    }
  return h;
}


template<typename K, typename V, typename H>
inline V*
hash_map_safe_get (hash_map<K,V,H> *h, const K& k)
{
  return h ? h->get (k) : nullptr;
}


template<bool ggc, typename K, typename V, typename H>
inline V&
hash_map_safe_get_or_insert (hash_map<K,V,H> *&h, const K& k, bool *e = nullptr,
        size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->get_or_insert (k, e);
}


template<bool ggc, typename K, typename V, typename H>
inline bool
hash_map_safe_put (hash_map<K,V,H> *&h, const K& k, const V& v,
     size_t size = default_hash_map_size)
{
  return hash_map_maybe_create<ggc> (h, size)->put (k, v);
}
# 596 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h" 2

extern mem_alloc_description<mem_usage>& hash_table_usage (void);


extern void dump_hash_table_loc_statistics (void);

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (size_t size, bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (0), m_n_deleted (0), m_searches (0), m_collisions (0),
  m_ggc (ggc), m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  unsigned int size_prime_index;

  size_prime_index = hash_table_higher_prime_index (size);
  size = prime_tab[size_prime_index].prime;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
          , 0,0,0);

  if (Lazy)
    m_entries = nullptr;
  else
    m_entries = alloc_entries (size );
  m_size = size;
  m_size_prime_index = size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::hash_table (const hash_table &h,
           bool ggc,
           bool sanitize_eq_and_hash,
           bool gather_mem_stats
           __attribute__ ((__unused__)),
           mem_alloc_origin origin
           ) :
  m_n_elements (h.m_n_elements), m_n_deleted (h.m_n_deleted),
  m_searches (0), m_collisions (0), m_ggc (ggc),
  m_sanitize_eq_and_hash (sanitize_eq_and_hash)



{
  size_t size = h.m_size;

  if (m_gather_mem_stats)
    hash_table_usage ().register_descriptor (this, origin, ggc
       , 0,0,0);

  if (Lazy && h.m_entries == nullptr)
    m_entries = nullptr;
  else
    {
      value_type *nentries = alloc_entries (size );
      for (size_t i = 0; i < size; ++i)
 {
   value_type &entry = h.m_entries[i];
   if (is_deleted (entry))
     mark_deleted (nentries[i]);
   else if (!is_empty (entry))
     new ((void*) (nentries + i)) value_type (entry);
 }
      m_entries = nentries;
    }
  m_size = size;
  m_size_prime_index = h.m_size_prime_index;
}

template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
hash_table<Descriptor, Lazy, Allocator>::~hash_table ()
{
  if (!Lazy || m_entries)
    {
      for (size_t i = m_size - 1; i < m_size; i--)
 if (!is_empty (m_entries[i]) && !is_deleted (m_entries[i]))
   Descriptor::remove (m_entries[i]);

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);
      if (m_gather_mem_stats)
 hash_table_usage ().release_instance_overhead (this,
             sizeof (value_type)
             * m_size, true);
    }
  else if (m_gather_mem_stats)
    hash_table_usage ().unregister_descriptor (this);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::alloc_entries (size_t n ) const
{
  value_type *nentries;

  if (m_gather_mem_stats)
    hash_table_usage ().register_instance_overhead (sizeof (value_type) * n, this);

  if (!m_ggc)
    nentries = Allocator <value_type> ::data_alloc (n);
  else
    nentries = ::ggc_cleared_vec_alloc<value_type> (n );

  ((void)(!(nentries != nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 715, __FUNCTION__), 0 : 0));
  if (!Descriptor::empty_zero_p)
    for (size_t i = 0; i < n; i++)
      mark_empty (nentries[i]);

  return nentries;
}
# 730 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy,
    Allocator>::find_empty_slot_for_expand (hashval_t hash)
{
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  size_t size = m_size;
  value_type *slot = m_entries + index;
  hashval_t hash2;

  if (is_empty (*slot))
    return slot;
  ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 743, __FUNCTION__), 0 : 0));

  hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      index += hash2;
      if (index >= size)
        index -= size;

      slot = m_entries + index;
      if (is_empty (*slot))
        return slot;
      ((void)(!(!is_deleted (*slot)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 755, __FUNCTION__), 0 : 0));
    }
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline bool
hash_table<Descriptor, Lazy, Allocator>::too_empty_p (unsigned int elts)
{
  return elts * 8 < m_size && m_size > 32;
}
# 776 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::expand ()
{
  value_type *oentries = m_entries;
  unsigned int oindex = m_size_prime_index;
  size_t osize = size ();
  value_type *olimit = oentries + osize;
  size_t elts = elements ();



  unsigned int nindex;
  size_t nsize;
  if (elts * 2 > osize || too_empty_p (elts))
    {
      nindex = hash_table_higher_prime_index (elts * 2);
      nsize = prime_tab[nindex].prime;
    }
  else
    {
      nindex = oindex;
      nsize = osize;
    }

  value_type *nentries = alloc_entries (nsize);

  if (m_gather_mem_stats)
    hash_table_usage ().release_instance_overhead (this, sizeof (value_type)
          * osize);

  m_entries = nentries;
  m_size = nsize;
  m_size_prime_index = nindex;
  m_n_elements -= m_n_deleted;
  m_n_deleted = 0;

  value_type *p = oentries;
  do
    {
      value_type &x = *p;

      if (!is_empty (x) && !is_deleted (x))
        {
          value_type *q = find_empty_slot_for_expand (Descriptor::hash (x));
   new ((void*) q) value_type (x);
        }

      p++;
    }
  while (p < olimit);

  if (!m_ggc)
    Allocator <value_type> ::data_free (oentries);
  else
    ggc_free (oentries);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::empty_slow ()
{
  size_t size = m_size;
  size_t nsize = size;
  value_type *entries = m_entries;

  for (size_t i = size - 1; i < size; i--)
    if (!is_empty (entries[i]) && !is_deleted (entries[i]))
      Descriptor::remove (entries[i]);


  if (size > 1024*1024 / sizeof (value_type))
    nsize = 1024 / sizeof (value_type);
  else if (too_empty_p (m_n_elements))
    nsize = m_n_elements * 2;

  if (nsize != size)
    {
      unsigned int nindex = hash_table_higher_prime_index (nsize);

      nsize = prime_tab[nindex].prime;

      if (!m_ggc)
 Allocator <value_type> ::data_free (m_entries);
      else
 ggc_free (m_entries);

      m_entries = alloc_entries (nsize);
      m_size = nsize;
      m_size_prime_index = nindex;
    }
  else if (Descriptor::empty_zero_p)
    memset ((void *) entries, 0, size * sizeof (value_type));
  else
    for (size_t i = 0; i < size; i++)
      mark_empty (entries[i]);

  m_n_deleted = 0;
  m_n_elements = 0;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::clear_slot (value_type *slot)
{
  ((void)(!(!(slot < m_entries || slot >= m_entries + size () || is_empty (*slot) || is_deleted (*slot))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 890, __FUNCTION__), 0 : 0))
                                                      ;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type &
hash_table<Descriptor, Lazy, Allocator>
::find_with_hash (const compare_type &comparable, hashval_t hash)
{
  m_searches++;
  size_t size = m_size;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);

  if (Lazy && m_entries == nullptr)
    m_entries = alloc_entries (size);


  if (m_sanitize_eq_and_hash)
    verify (comparable, hash);


  value_type *entry = &m_entries[index];
  if (is_empty (*entry)
      || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
    return *entry;

  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
        index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry)
          || (!is_deleted (*entry) && Descriptor::equal (*entry, comparable)))
 return *entry;
    }
}
# 949 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
typename hash_table<Descriptor, Lazy, Allocator>::value_type *
hash_table<Descriptor, Lazy, Allocator>
::find_slot_with_hash (const compare_type &comparable, hashval_t hash,
         enum insert_option insert)
{
  if (Lazy && m_entries == nullptr)
    {
      if (insert == INSERT)
 m_entries = alloc_entries (m_size);
      else
 return nullptr;
    }
  if (insert == INSERT && m_size * 3 <= m_n_elements * 4)
    expand ();


  if (m_sanitize_eq_and_hash)
    verify (comparable, hash);


  m_searches++;
  value_type *first_deleted_slot = nullptr;
  hashval_t index = hash_table_mod1 (hash, m_size_prime_index);
  hashval_t hash2 = hash_table_mod2 (hash, m_size_prime_index);
  value_type *entry = &m_entries[index];
  size_t size = m_size;
  if (is_empty (*entry))
    goto empty_entry;
  else if (is_deleted (*entry))
    first_deleted_slot = &m_entries[index];
  else if (Descriptor::equal (*entry, comparable))
    return &m_entries[index];

  for (;;)
    {
      m_collisions++;
      index += hash2;
      if (index >= size)
 index -= size;

      entry = &m_entries[index];
      if (is_empty (*entry))
 goto empty_entry;
      else if (is_deleted (*entry))
 {
   if (!first_deleted_slot)
     first_deleted_slot = &m_entries[index];
 }
      else if (Descriptor::equal (*entry, comparable))
 return &m_entries[index];
    }

 empty_entry:
  if (insert == NO_INSERT)
    return nullptr;

  if (first_deleted_slot)
    {
      m_n_deleted--;
      mark_empty (*first_deleted_slot);
      return first_deleted_slot;
    }

  m_n_elements++;
  return &m_entries[index];
}




template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::verify (const compare_type &comparable, hashval_t hash)
{
  for (size_t i = 0; i < ((hash_table_sanitize_eq_limit) < (m_size) ? (hash_table_sanitize_eq_limit) : (m_size)); i++)
    {
      value_type *entry = &m_entries[i];
      if (!is_empty (*entry) && !is_deleted (*entry)
   && hash != Descriptor::hash (*entry)
   && Descriptor::equal (*entry, comparable))
 hashtab_chk_error ();
    }
}





template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>
::remove_elt_with_hash (const compare_type &comparable, hashval_t hash)
{
  value_type *slot = find_slot_with_hash (comparable, hash, NO_INSERT);
  if (slot == nullptr)
    return;

  Descriptor::remove (*slot);

  mark_deleted (*slot);
  m_n_deleted++;
}





template<typename Descriptor, bool Lazy,
   template<typename Type> class Allocator>
template<typename Argument,
  int (*Callback)
  (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
  Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse_noresize (Argument argument)
{
  if (Lazy && m_entries == nullptr)
    return;

  value_type *slot = m_entries;
  value_type *limit = slot + size ();

  do
    {
      value_type &x = *slot;

      if (!is_empty (x) && !is_deleted (x))
        if (! Callback (slot, argument))
          break;
    }
  while (++slot < limit);
}




template <typename Descriptor, bool Lazy,
   template <typename Type> class Allocator>
template <typename Argument,
   int (*Callback)
   (typename hash_table<Descriptor, Lazy, Allocator>::value_type *slot,
   Argument argument)>
void
hash_table<Descriptor, Lazy, Allocator>::traverse (Argument argument)
{
  if (too_empty_p (elements ()) && (!Lazy || m_entries))
    expand ();

  traverse_noresize <Argument, Callback> (argument);
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
void
hash_table<Descriptor, Lazy, Allocator>::iterator::slide ()
{
  for ( ; m_slot < m_limit; ++m_slot )
    {
      value_type &x = *m_slot;
      if (!is_empty (x) && !is_deleted (x))
        return;
    }
  m_slot = nullptr;
  m_limit = nullptr;
}



template<typename Descriptor, bool Lazy,
  template<typename Type> class Allocator>
inline typename hash_table<Descriptor, Lazy, Allocator>::iterator &
hash_table<Descriptor, Lazy, Allocator>::iterator::operator ++ ()
{
  ++m_slot;
  slide ();
  return *this;
}
# 1146 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h"
template<typename E>
static inline void
gt_ggc_mx (hash_table<E> *h)
{
  typedef hash_table<E> table;

  if (!((h->m_entries) != nullptr && ((void *) (h->m_entries)) != (void *) 1 && ! ggc_set_mark (h->m_entries)))
    return;

  for (size_t i = 0; i < h->m_size; i++)
    {
      if (table::is_empty (h->m_entries[i])
   || table::is_deleted (h->m_entries[i]))
 continue;



      E::ggc_maybe_mx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
hashtab_entry_note_pointers (void *obj, void *h, gt_pointer_operator op,
        void *cookie)
{
  hash_table<D> *map = static_cast<hash_table<D> *> (h);
  ((void)(!(map->m_entries == obj) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1173, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < map->m_size; i++)
    {
      typedef hash_table<D> table;
      if (table::is_empty (map->m_entries[i])
   || table::is_deleted (map->m_entries[i]))
 continue;

      D::pch_nx (map->m_entries[i], op, cookie);
    }
}

template<typename D>
static void
gt_pch_nx (hash_table<D> *h)
{
  bool success
    = gt_pch_note_object (h->m_entries, h, hashtab_entry_note_pointers<D>);
  ((void)(!(success) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/hash-table.h", 1191, __FUNCTION__), 0 : 0));
  for (size_t i = 0; i < h->m_size; i++)
    {
      if (hash_table<D>::is_empty (h->m_entries[i])
   || hash_table<D>::is_deleted (h->m_entries[i]))
 continue;

      D::pch_nx (h->m_entries[i]);
    }
}

template<typename D>
static inline void
gt_pch_nx (hash_table<D> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_entries, cookie);
}

template<typename H>
inline void
gt_cleare_cache (hash_table<H> *h)
{
  typedef hash_table<H> table;
  if (!h)
    return;

  for (typename table::iterator iter = h->begin (); iter != h->end (); ++iter)
    if (!table::is_empty (*iter) && !table::is_deleted (*iter))
      {
 int res = H::keep_cache_entry (*iter);
 if (res == 0)
   h->clear_slot (&*iter);
 else if (res != -1)
   H::ggc_mx (*iter);
      }
}
# 477 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename KeyId, bool Lazy = false,
  typename Traits = default_hash_traits<KeyId> >
class hash_set
{
public:
  typedef typename Traits::value_type Key;
  explicit hash_set (size_t n = 13, bool ggc = false )
    : m_table (n, ggc, true, 0, HASH_SET_ORIGIN ) {}



  static hash_set *
  create_ggc (size_t n)
    {
      hash_set *set = ggc_alloc<hash_set> ();
      new (set) hash_set (n, true);
      return set;
    }




  bool add (const Key &k)
    {
      Key *e = m_table.find_slot_with_hash (k, Traits::hash (k), INSERT);
      bool existed = !Traits::is_empty (*e);
      if (!existed)
 new (e) Key (k);

      return existed;
    }



  bool contains (const Key &k)
    {
      if (Lazy)
 return (m_table.find_slot_with_hash (k, Traits::hash (k), NO_INSERT)
  != nullptr);
      Key &e = m_table.find_with_hash (k, Traits::hash (k));
      return !Traits::is_empty (e);
    }

  void remove (const Key &k)
    {
      m_table.remove_elt_with_hash (k, Traits::hash (k));
    }




  template<typename Arg, bool (*f)(const typename Traits::value_type &, Arg)>
  void traverse (Arg a) const
    {
      for (typename hash_table<Traits, Lazy>::iterator iter = m_table.begin ();
    iter != m_table.end (); ++iter)
 f (*iter, a);
    }



  size_t elements () const { return m_table.elements (); }



  void empty () { m_table.empty (); }


  bool is_empty () const { return m_table.is_empty (); }

  class iterator
  {
  public:
    explicit iterator (const typename hash_table<Traits,
       Lazy>::iterator &iter) :
      m_iter (iter) {}

    iterator &operator++ ()
      {
 ++m_iter;
 return *this;
      }

    Key
    operator* ()
      {
 return *m_iter;
      }

    bool
    operator != (const iterator &other) const
      {
 return m_iter != other.m_iter;
      }

  private:
    typename hash_table<Traits, Lazy>::iterator m_iter;
  };



  iterator begin () const { return iterator (m_table.begin ()); }
  iterator end () const { return iterator (m_table.end ()); }


private:

  template<typename T, typename U>
  friend void gt_ggc_mx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *);
  template<typename T, typename U>
  friend void gt_pch_nx (hash_set<T, false, U> *, gt_pointer_operator, void *);

  hash_table<Traits, Lazy> m_table;
};
# 161 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename T>
void
debug_helper (hash_set<T> &ref)
{
  for (typename hash_set<T>::iterator it = ref.begin ();
       it != ref.end (); ++it)
    {
      debug_slim (*it);
      fputc ('\n', 
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h" 3 4
                  stderr
# 169 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
                        );
    }
}
# 191 "/home/giulianob/gcc_git_gnu/gcc/gcc/hash-set.h"
template<typename K, typename H>
static inline void
gt_ggc_mx (hash_set<K, false, H> *h)
{
  gt_ggc_mx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h)
{
  gt_pch_nx (&h->m_table);
}

template<typename K, typename H>
static inline void
gt_pch_nx (hash_set<K, false, H> *h, gt_pointer_operator op, void *cookie)
{
  op (&h->m_table.m_entries, cookie);
}
# 478 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h" 1
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int linenum_type;


typedef long long linenum_arith_t;



inline int compare (linenum_type lhs, linenum_type rhs)
{


  linenum_arith_t diff = (linenum_arith_t)lhs - (linenum_arith_t)rhs;
  if (diff)
    return diff > 0 ? 1 : -1;
  return 0;
}


enum lc_reason
{
  LC_ENTER = 0,
  LC_LEAVE,
  LC_RENAME,
  LC_RENAME_VERBATIM,
  LC_ENTER_MACRO,

  LC_HWM
};
# 291 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
typedef unsigned int location_t;




const unsigned int LINE_MAP_MAX_COLUMN_NUMBER = (1U << 12);




const location_t LINE_MAP_MAX_LOCATION_WITH_PACKED_RANGES = 0x50000000;




const location_t LINE_MAP_MAX_LOCATION_WITH_COLS = 0x60000000;


const location_t LINE_MAP_MAX_LOCATION = 0x70000000;
# 319 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct source_range
{
  location_t m_start;
  location_t m_finish;






  static source_range from_location (location_t loc)
  {
    source_range result;
    result.m_start = loc;
    result.m_finish = loc;
    return result;
  }


  static source_range from_locations (location_t start,
          location_t finish)
  {
    source_range result;
    result.m_start = start;
    result.m_finish = finish;
    return result;
  }
};


typedef void *(*line_map_realloc) (void *, size_t);



typedef size_t (*line_map_round_alloc_size_func) (size_t);
# 384 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map {
  location_t start_location;


};
# 402 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct line_map_ordinary : public line_map {





  enum lc_reason reason : 8;





  unsigned char sysp;



  unsigned int m_column_and_range_bits : 8;
# 433 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  unsigned int m_range_bits : 8;



  const char *to_file;
  linenum_type to_line;




  location_t included_from;


};



const location_t MAX_LOCATION_T = 0x7FFFFFFF;

struct cpp_hashnode;






struct line_map_macro : public line_map {



  unsigned int n_tokens;




  struct cpp_hashnode *
   


    macro;
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  location_t * macro_locations;






  location_t expansion;


};
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
inline bool
IS_ORDINARY_LOC (location_t loc)
{
  return loc < LINE_MAP_MAX_LOCATION;
}

inline bool
IS_ADHOC_LOC (location_t loc)
{
  return loc > MAX_LOCATION_T;
}

inline bool
IS_MACRO_LOC (location_t loc)
{
  return !IS_ORDINARY_LOC (loc) && !IS_ADHOC_LOC (loc);
}



inline bool
MAP_ORDINARY_P (const line_map *map)
{
  return IS_ORDINARY_LOC (map->start_location);
}



bool
linemap_macro_expansion_map_p (const line_map *);





inline line_map_ordinary *
linemap_check_ordinary (line_map *map)
{
  do { if (! (MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 604, __FUNCTION__); } while (0);
  return (line_map_ordinary *)map;
}





inline const line_map_ordinary *
linemap_check_ordinary (const line_map *map)
{
  do { if (! (MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 615, __FUNCTION__); } while (0);
  return (const line_map_ordinary *)map;
}




inline line_map_macro *linemap_check_macro (line_map *map)
{
  do { if (! (!MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 624, __FUNCTION__); } while (0);
  return (line_map_macro *)map;
}




inline const line_map_macro *
linemap_check_macro (const line_map *map)
{
  do { if (! (!MAP_ORDINARY_P (map))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 634, __FUNCTION__); } while (0);
  return (const line_map_macro *)map;
}



inline location_t
MAP_START_LOCATION (const line_map *map)
{
  return map->start_location;
}



inline linenum_type
ORDINARY_MAP_STARTING_LINE_NUMBER (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}






inline unsigned char
ORDINARY_MAP_IN_SYSTEM_HEADER_P (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}



inline const char *
ORDINARY_MAP_FILE_NAME (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}



inline cpp_hashnode *
MACRO_MAP_MACRO (const line_map_macro *macro_map)
{
  return macro_map->macro;
}




inline unsigned int
MACRO_MAP_NUM_MACRO_TOKENS (const line_map_macro *macro_map)
{
  return macro_map->n_tokens;
}




inline location_t *
MACRO_MAP_LOCATIONS (const line_map_macro *macro_map)
{
  return macro_map->macro_locations;
}



inline location_t
MACRO_MAP_EXPANSION_POINT_LOCATION (const line_map_macro *macro_map)
{
  return macro_map->expansion;
}
# 714 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct maps_info_ordinary {



  line_map_ordinary * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};

struct maps_info_macro {


  line_map_macro * maps;


  unsigned int allocated;



  unsigned int used;

  mutable unsigned int cache;
};



struct location_adhoc_data {
  location_t locus;
  source_range src_range;
  void * data;
};

struct htab;
# 765 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
struct location_adhoc_data_map {
  struct htab * htab;
  location_t curr_loc;
  unsigned int allocated;
  struct location_adhoc_data *data;
};


class line_maps {
public:

  ~line_maps ();

  maps_info_ordinary info_ordinary;

  maps_info_macro info_macro;


  unsigned int depth;


  bool trace_includes;


  location_t highest_location;


  location_t highest_line;



  unsigned int max_column_hint;


  line_map_realloc reallocator;



  line_map_round_alloc_size_func round_alloc_size;

  struct location_adhoc_data_map location_adhoc_data_map;



  location_t builtin_location;


  bool seen_line_directive;


  unsigned int default_range_bits;

  unsigned int num_optimized_ranges;
  unsigned int num_unoptimized_ranges;
};



inline unsigned int
LINEMAPS_ALLOCATED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int &
LINEMAPS_ALLOCATED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.allocated;
  else
    return set->info_ordinary.allocated;
}



inline unsigned int
LINEMAPS_USED (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}



inline unsigned int &
LINEMAPS_USED (line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.used;
  else
    return set->info_ordinary.used;
}




inline unsigned int &
LINEMAPS_CACHE (const line_maps *set, bool map_kind)
{
  if (map_kind)
    return set->info_macro.cache;
  else
    return set->info_ordinary.cache;
}


inline line_map *
LINEMAPS_MAP_AT (const line_maps *set, bool map_kind, int index)
{
  if (map_kind)
    return &set->info_macro.maps[index];
  else
    return &set->info_ordinary.maps[index];
}




inline line_map *
LINEMAPS_LAST_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_USED (set, map_kind) - 1);
}




inline line_map *
LINEMAPS_LAST_ALLOCATED_MAP (const line_maps *set, bool map_kind)
{
  return LINEMAPS_MAP_AT (set, map_kind,
     LINEMAPS_ALLOCATED (set, map_kind) - 1);
}



inline line_map_ordinary *
LINEMAPS_ORDINARY_MAPS (const line_maps *set)
{
  return set->info_ordinary.maps;
}


inline line_map_ordinary *
LINEMAPS_ORDINARY_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, false))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 919, __FUNCTION__); } while (0)
                                                        ;
  return (line_map_ordinary *)LINEMAPS_MAP_AT (set, false, index);
}



inline unsigned int
LINEMAPS_ORDINARY_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, false);
}


inline unsigned int
LINEMAPS_ORDINARY_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, false);
}



inline unsigned int &
LINEMAPS_ORDINARY_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_MAP (set, false);
}



inline line_map_ordinary *
LINEMAPS_LAST_ALLOCATED_ORDINARY_MAP (const line_maps *set)
{
  return (line_map_ordinary *)LINEMAPS_LAST_ALLOCATED_MAP (set, false);
}



inline line_map_macro *
LINEMAPS_MACRO_MAPS (const line_maps *set)
{
  return set->info_macro.maps;
}


inline line_map_macro *
LINEMAPS_MACRO_MAP_AT (const line_maps *set, int index)
{
  do { if (! (index >= 0 && (unsigned int)index < LINEMAPS_USED (set, true))) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 975, __FUNCTION__); } while (0)
                                                       ;
  return (line_map_macro *)LINEMAPS_MAP_AT (set, true, index);
}



inline unsigned int
LINEMAPS_MACRO_ALLOCATED (const line_maps *set)
{
  return LINEMAPS_ALLOCATED (set, true);
}


inline unsigned int
LINEMAPS_MACRO_USED (const line_maps *set)
{
  return LINEMAPS_USED (set, true);
}



inline unsigned int &
LINEMAPS_MACRO_CACHE (const line_maps *set)
{
  return LINEMAPS_CACHE (set, true);
}


inline line_map_macro *
LINEMAPS_LAST_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_MAP (set, true);
}



inline location_t
LINEMAPS_MACRO_LOWEST_LOCATION (const line_maps *set)
{
  return LINEMAPS_MACRO_USED (set)
         ? MAP_START_LOCATION (LINEMAPS_LAST_MACRO_MAP (set))
         : MAX_LOCATION_T + 1;
}


inline line_map_macro *
LINEMAPS_LAST_ALLOCATED_MACRO_MAP (const line_maps *set)
{
  return (line_map_macro *)LINEMAPS_LAST_ALLOCATED_MAP (set, true);
}

extern location_t get_combined_adhoc_loc (line_maps *, location_t,
       source_range, void *);
extern void *get_data_from_adhoc_loc (const line_maps *, location_t);
extern location_t get_location_from_adhoc_loc (const line_maps *,
            location_t);

extern source_range get_range_from_loc (line_maps *set, location_t loc);




bool
pure_location_p (line_maps *set, location_t loc);




extern location_t get_pure_location (line_maps *set, location_t loc);



inline location_t
COMBINE_LOCATION_DATA (class line_maps *set,
         location_t loc,
         source_range src_range,
         void *block)
{
  return get_combined_adhoc_loc (set, loc, src_range, block);
}

extern void rebuild_location_adhoc_htab (class line_maps *);





extern void linemap_init (class line_maps *set,
     location_t builtin_location);



extern void linemap_check_files_exited (class line_maps *);







extern location_t linemap_line_start
(class line_maps *set, linenum_type to_line, unsigned int max_column_hint);
# 1092 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
extern const line_map *linemap_add
  (class line_maps *, enum lc_reason, unsigned int sysp,
   const char *to_file, linenum_type to_line);







extern const line_map *linemap_lookup
  (const line_maps *, location_t);



bool linemap_tracks_macro_expansion_locs_p (class line_maps *);


const char* linemap_map_get_macro_name (const line_map_macro *);
# 1121 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
int linemap_location_in_system_header_p (class line_maps *,
      location_t);



bool linemap_location_from_macro_expansion_p (const line_maps *,
           location_t);



bool linemap_location_from_macro_definition_p (class line_maps *,
            location_t);






extern location_t linemap_macro_map_loc_unwind_toward_spelling
  (line_maps *set, const line_map_macro *macro_map, location_t location);




const location_t RESERVED_LOCATION_COUNT = 2;


inline linenum_type
SOURCE_LINE (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   >> ord_map->m_column_and_range_bits) + ord_map->to_line;
}


inline linenum_type
SOURCE_COLUMN (const line_map_ordinary *ord_map, location_t loc)
{
  return ((loc - ord_map->start_location)
   & ((1 << ord_map->m_column_and_range_bits) - 1)) >> ord_map->m_range_bits;
}


inline location_t
linemap_included_from (const line_map_ordinary *ord_map)
{
  return ord_map->included_from;
}


const line_map_ordinary *linemap_included_from_linemap
  (line_maps *set, const line_map_ordinary *map);



inline bool
MAIN_FILE_P (const line_map_ordinary *ord_map)
{
  return ord_map->included_from == 0;
}





extern location_t
linemap_position_for_column (class line_maps *, unsigned int);



location_t
linemap_position_for_line_and_column (line_maps *set,
          const line_map_ordinary *,
          linenum_type, unsigned int);




location_t
linemap_position_for_loc_and_offset (class line_maps *set,
         location_t loc,
         unsigned int offset);


inline const char *
LINEMAP_FILE (const line_map_ordinary *ord_map)
{
  return ord_map->to_file;
}


inline linenum_type
LINEMAP_LINE (const line_map_ordinary *ord_map)
{
  return ord_map->to_line;
}





inline unsigned char
LINEMAP_SYSP (const line_map_ordinary *ord_map)
{
  return ord_map->sysp;
}





int linemap_compare_locations (class line_maps *set,
          location_t pre,
          location_t post);




inline bool
linemap_location_before_p (class line_maps *set,
      location_t loc_a,
      location_t loc_b)
{
  return linemap_compare_locations (set, loc_a, loc_b) >= 0;
}

typedef struct
{

  const char *file;


  int line;

  int column;

  void *data;


  bool sysp;
} expanded_location;

class range_label;
# 1279 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
enum range_display_kind
{

  SHOW_RANGE_WITH_CARET,



  SHOW_RANGE_WITHOUT_CARET,





  SHOW_LINES_WITHOUT_RANGE
};





struct location_range
{
  location_t m_loc;

  enum range_display_kind m_range_display_kind;


  const range_label *m_label;
};
# 1320 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
template <typename T, int NUM_EMBEDDED>
class semi_embedded_vec
{
 public:
  semi_embedded_vec ();
  ~semi_embedded_vec ();

  unsigned int count () const { return m_num; }
  T& operator[] (int idx);
  const T& operator[] (int idx) const;

  void push (const T&);
  void truncate (int len);

 private:
  int m_num;
  T m_embedded[NUM_EMBEDDED];
  int m_alloc;
  T *m_extra;
};




template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::semi_embedded_vec ()
: m_num (0), m_alloc (0), m_extra (nullptr)
{
}



template <typename T, int NUM_EMBEDDED>
semi_embedded_vec<T, NUM_EMBEDDED>::~semi_embedded_vec ()
{
  free ((void*) (m_extra));
}



template <typename T, int NUM_EMBEDDED>
T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx)
{
  do { if (! (idx < m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1364, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != nullptr)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1369, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
const T&
semi_embedded_vec<T, NUM_EMBEDDED>::operator[] (int idx) const
{
  do { if (! (idx < m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1380, __FUNCTION__); } while (0);
  if (idx < NUM_EMBEDDED)
    return m_embedded[idx];
  else
    {
      do { if (! (m_extra != nullptr)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1385, __FUNCTION__); } while (0);
      return m_extra[idx - NUM_EMBEDDED];
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::push (const T& value)
{
  int idx = m_num++;
  if (idx < NUM_EMBEDDED)
    m_embedded[idx] = value;
  else
    {

      idx -= NUM_EMBEDDED;
      if (nullptr == m_extra)
 {
   do { if (! (m_alloc == 0)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1405, __FUNCTION__); } while (0);
   m_alloc = 16;
   m_extra = ((T *) xmalloc (sizeof (T) * (m_alloc)));
 }
      else if (idx >= m_alloc)
 {
   do { if (! (m_alloc > 0)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1411, __FUNCTION__); } while (0);
   m_alloc *= 2;
   m_extra = ((T *) xrealloc ((void *) (m_extra), sizeof (T) * (m_alloc)));
 }
      do { if (! (m_extra)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1415, __FUNCTION__); } while (0);
      do { if (! (idx < m_alloc)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1416, __FUNCTION__); } while (0);
      m_extra[idx] = value;
    }
}



template <typename T, int NUM_EMBEDDED>
void
semi_embedded_vec<T, NUM_EMBEDDED>::truncate (int len)
{
  do { if (! (len <= m_num)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h", 1427, __FUNCTION__); } while (0);
  m_num = len;
}

class fixit_hint;
class diagnostic_path;
# 1609 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class rich_location
{
 public:



  rich_location (line_maps *set, location_t loc,
   const range_label *label = nullptr);


  ~rich_location ();


  location_t get_loc () const { return get_loc (0); }
  location_t get_loc (unsigned int idx) const;

  void
  add_range (location_t loc,
      enum range_display_kind range_display_kind
        = SHOW_RANGE_WITHOUT_CARET,
      const range_label *label = nullptr);

  void
  set_range (unsigned int idx, location_t loc,
      enum range_display_kind range_display_kind);

  unsigned int get_num_locations () const { return m_ranges.count (); }

  const location_range *get_range (unsigned int idx) const;
  location_range *get_range (unsigned int idx);

  expanded_location get_expanded_location (unsigned int idx);

  void
  override_column (int column);







  void
  add_fixit_insert_before (const char *new_content);


  void
  add_fixit_insert_before (location_t where,
      const char *new_content);



  void
  add_fixit_insert_after (const char *new_content);


  void
  add_fixit_insert_after (location_t where,
     const char *new_content);




  void
  add_fixit_remove ();



  void
  add_fixit_remove (location_t where);


  void
  add_fixit_remove (source_range src_range);




  void
  add_fixit_replace (const char *new_content);



  void
  add_fixit_replace (location_t where,
       const char *new_content);



  void
  add_fixit_replace (source_range src_range,
       const char *new_content);

  unsigned int get_num_fixit_hints () const { return m_fixit_hints.count (); }
  fixit_hint *get_fixit_hint (int idx) const { return m_fixit_hints[idx]; }
  fixit_hint *get_last_fixit_hint () const;
  bool seen_impossible_fixit_p () const { return m_seen_impossible_fixit; }
# 1718 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
  void fixits_cannot_be_auto_applied ()
  {
    m_fixits_cannot_be_auto_applied = true;
  }

  bool fixits_can_be_auto_applied_p () const
  {
    return !m_fixits_cannot_be_auto_applied;
  }


  const diagnostic_path *get_path () const { return m_path; }
  void set_path (const diagnostic_path *path) { m_path = path; }

private:
  bool reject_impossible_fixit (location_t where);
  void stop_supporting_fixits ();
  void maybe_add_fixit (location_t start,
   location_t next_loc,
   const char *new_content);

public:
  static const int STATICALLY_ALLOCATED_RANGES = 3;

protected:
  line_maps *m_line_table;
  semi_embedded_vec <location_range, STATICALLY_ALLOCATED_RANGES> m_ranges;

  int m_column_override;

  bool m_have_expanded_location;
  expanded_location m_expanded_location;

  static const int MAX_STATIC_FIXIT_HINTS = 2;
  semi_embedded_vec <fixit_hint *, MAX_STATIC_FIXIT_HINTS> m_fixit_hints;

  bool m_seen_impossible_fixit;
  bool m_fixits_cannot_be_auto_applied;

  const diagnostic_path *m_path;
};





class label_text
{
public:
  label_text ()
  : m_buffer (nullptr), m_caller_owned (false)
  {}

  void maybe_free ()
  {
    if (m_caller_owned)
      free (m_buffer);
  }



  static label_text borrow (const char *buffer)
  {
    return label_text (const_cast <char *> (buffer), false);
  }


  static label_text take (char *buffer)
  {
    return label_text (buffer, true);
  }


  char *take_or_copy ()
  {
    if (m_caller_owned)
      return m_buffer;
    else
      return xstrdup (m_buffer);
  }

  char *m_buffer;
  bool m_caller_owned;

private:
  label_text (char *buffer, bool owned)
  : m_buffer (buffer), m_caller_owned (owned)
  {}
};
# 1823 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class range_label
{
 public:
  virtual ~range_label () {}




  virtual label_text get_text (unsigned range_idx) const = 0;
};
# 1848 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
class fixit_hint
{
 public:
  fixit_hint (location_t start,
       location_t next_loc,
       const char *new_content);
  ~fixit_hint () { free (m_bytes); }

  bool affects_line_p (const char *file, int line) const;
  location_t get_start_loc () const { return m_start; }
  location_t get_next_loc () const { return m_next_loc; }
  bool maybe_append (location_t start,
       location_t next_loc,
       const char *new_content);

  const char *get_string () const { return m_bytes; }
  size_t get_length () const { return m_len; }

  bool insertion_p () const { return m_start == m_next_loc; }

  bool ends_with_newline_p () const;

 private:




  location_t m_start;
  location_t m_next_loc;
  char *m_bytes;
  size_t m_len;
};





enum location_resolution_kind
{
  LRK_MACRO_EXPANSION_POINT,
  LRK_SPELLING_LOCATION,
  LRK_MACRO_DEFINITION_LOCATION
};
# 1940 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_resolve_location (class line_maps *,
         location_t loc,
         enum location_resolution_kind lrk,
         const line_map_ordinary **loc_map);
# 1952 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_toward_expansion (class line_maps *,
         location_t loc,
         const line_map **loc_map);
# 1970 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h"
location_t linemap_unwind_to_first_non_reserved_loc (class line_maps *,
           location_t loc,
           const line_map **map);





expanded_location linemap_expand_location (class line_maps *,
        const line_map *,
        location_t loc);



struct linemap_stats
{
  long num_ordinary_maps_allocated;
  long num_ordinary_maps_used;
  long ordinary_maps_allocated_size;
  long ordinary_maps_used_size;
  long num_expanded_macros;
  long num_macro_tokens;
  long num_macro_maps_used;
  long macro_maps_allocated_size;
  long macro_maps_used_size;
  long macro_maps_locations_size;
  long duplicated_macro_maps_locations_size;
  long adhoc_table_size;
  long adhoc_table_entries_used;
};





bool linemap_get_file_highest_location (class line_maps * set,
     const char *file_name,
     location_t *loc);



void linemap_get_statistics (line_maps *, struct linemap_stats *);



void linemap_dump_location (line_maps *, location_t, FILE *);




void linemap_dump (FILE *, line_maps *, unsigned, bool);




void line_table_dump (FILE *, line_maps *, unsigned int, unsigned int);



enum location_aspect
{
  LOCATION_ASPECT_CARET,
  LOCATION_ASPECT_START,
  LOCATION_ASPECT_FINISH
};







extern expanded_location
linemap_client_expand_location_to_spelling_point (location_t,
        enum location_aspect);
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h" 2

extern class line_maps *line_table;
extern class line_maps *saved_line_table;
# 37 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
static_assert ((((location_t) 1) < RESERVED_LOCATION_COUNT), "BUILTINS_LOCATION < RESERVED_LOCATION_COUNT");

extern bool is_location_from_builtin_token (location_t);
extern expanded_location expand_location (location_t);

extern int location_compute_display_column (expanded_location exploc,
         int tabstop);




class char_span
{
 public:
  char_span (const char *ptr, size_t n_elts) : m_ptr (ptr), m_n_elts (n_elts) {}


  operator bool() const { return m_ptr; }



  size_t length () const { return m_n_elts; }

  const char *get_buffer () const { return m_ptr; }

  char operator[] (int idx) const
  {
    ((void)(!(idx >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 64, __FUNCTION__), 0 : 0));
    ((void)(!((size_t)idx < m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 65, __FUNCTION__), 0 : 0));
    return m_ptr[idx];
  }

  char_span subspan (int offset, int n_elts) const
  {
    ((void)(!(offset >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 71, __FUNCTION__), 0 : 0));
    ((void)(!(offset < (int)m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 72, __FUNCTION__), 0 : 0));
    ((void)(!(n_elts >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 73, __FUNCTION__), 0 : 0));
    ((void)(!(offset + n_elts <= (int)m_n_elts) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/input.h", 74, __FUNCTION__), 0 : 0));
    return char_span (m_ptr + offset, n_elts);
  }

  char *xstrdup () const
  {
    return ::xstrndup (m_ptr, m_n_elts);
  }

 private:
  const char *m_ptr;
  size_t m_n_elts;
};

extern char_span location_get_source_line (const char *file_path, int line);

extern bool location_missing_trailing_newline (const char *file_path);
extern expanded_location
expand_location_to_spelling_point (location_t,
       enum location_aspect aspect
         = LOCATION_ASPECT_CARET);
extern location_t expansion_point_location_if_in_system_header (location_t);
extern location_t expansion_point_location (location_t);

extern location_t input_location;
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/input.h"
static inline int
in_system_header_at (location_t loc)
{
  return linemap_location_in_system_header_p (line_table, loc);
}




static inline bool
from_macro_expansion_at (location_t loc)
{
  return linemap_location_from_macro_expansion_p (line_table, loc);
}





static inline bool
from_macro_definition_at (location_t loc)
{
  return linemap_location_from_macro_definition_p (line_table, loc);
}

static inline location_t
get_pure_location (location_t loc)
{
  return get_pure_location (line_table, loc);
}



static inline location_t
get_start (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_start;
}



static inline location_t
get_finish (location_t loc)
{
  return get_range_from_loc (line_table, loc).m_finish;
}

extern location_t make_location (location_t caret,
     location_t start, location_t finish);
extern location_t make_location (location_t caret, source_range src_range);

void dump_line_table_statistics (void);

void dump_location_info (FILE *stream);

void diagnostics_file_cache_fini (void);

void diagnostics_file_cache_forcibly_evict_file (const char *file_path);

class string_concat
{
public:
  string_concat (int num, location_t *locs);

  int m_num;
  location_t * m_locs;
};

struct location_hash : int_hash <location_t, ((location_t) 0)> { };

class string_concat_db
{
 public:
  string_concat_db ();
  void record_string_concatenation (int num, location_t *locs);

  bool get_string_concatenation (location_t loc,
     int *out_num,
     location_t **out_locs);

 private:
  static location_t get_key_loc (location_t loc);




  friend void ::gt_ggc_mx_string_concat_db (void *x_p);
  friend void ::gt_pch_nx_string_concat_db (void *x_p);
  friend void ::gt_pch_p_16string_concat_db (void *this_obj, void *x_p,
          gt_pointer_operator op,
          void *cookie);

  hash_map <location_hash, string_concat *> *m_table;
};
# 479 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h" 1
# 150 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
struct is_a_helper
{
  template <typename U>
  static inline bool test (U *p);
  template <typename U>
  static inline T cast (U *p);
};
# 168 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T>
template <typename U>
inline T
is_a_helper <T>::cast (U *p)
{
  return reinterpret_cast <T> (p);
}
# 183 "/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h"
template <typename T, typename U>
inline bool
is_a (U *p)
{
  return is_a_helper<T>::test (p);
}




template <typename T, typename U>
inline T
as_a (U *p)
{
  ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 197, __FUNCTION__), 0 : 0));
  return is_a_helper <T>::cast (p);
}




template <typename T, typename U>
inline T
safe_as_a (U *p)
{
  if (p)
    {
      ((void)(!(is_a <T> (p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/is-a.h", 210, __FUNCTION__), 0 : 0));
      return is_a_helper <T>::cast (p);
    }
  else
    return nullptr;
}




template <typename T, typename U>
inline T
dyn_cast (U *p)
{
  if (is_a <T> (p))
    return is_a_helper <T>::cast (p);
  else
    return static_cast <T> (0);
}



template <typename T, typename U>
inline T
safe_dyn_cast (U *p)
{
  return p ? dyn_cast <T> (p) : 0;
}
# 480 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/memory-block.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/memory-block.h"
class memory_block_pool
{
public:

  static const size_t block_size = 64 * 1024;

  static const size_t freelist_size = 1024 * 1024 / block_size;

  memory_block_pool ();

  static inline void *allocate () __attribute__ ((__malloc__));
  static inline void release (void *);
  static void trim (int nblocks = freelist_size);
  void reduce_free_list (int);

private:

  static memory_block_pool instance;

  struct block_list
  {
    block_list *m_next;
  };


  block_list *m_blocks;
};


inline void *
memory_block_pool::allocate ()
{
  if (instance.m_blocks == nullptr)
    return ((char *) xmalloc (sizeof (char) * (block_size)));

  void *result = instance.m_blocks;
  instance.m_blocks = instance.m_blocks->m_next;
  ;
  return result;
}


inline void
memory_block_pool::release (void *uncast_block)
{
  block_list *block = new (uncast_block) block_list;
  block->m_next = instance.m_blocks;
  instance.m_blocks = block;

 


                             ;
}

extern void *mempool_obstack_chunk_alloc (size_t) __attribute__ ((__malloc__));
extern void mempool_obstack_chunk_free (void *);
# 481 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
struct function;
struct profile_count;
class sreal;



enum profile_quality {

  UNINITIALIZED_PROFILE,





  GUESSED_LOCAL,




  GUESSED_GLOBAL0,


  GUESSED_GLOBAL0_ADJUSTED,






  GUESSED,


  AFDO,




  ADJUSTED,



  PRECISE
};

extern const char *profile_quality_as_string (enum profile_quality);
extern bool parse_profile_quality (const char *value,
       profile_quality *quality);






bool slow_safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res);



inline bool
safe_scale_64bit (uint64_t a, uint64_t b, uint64_t c, uint64_t *res)
{

  uint64_t tmp;
  if (!__builtin_mul_overflow (a, b, &tmp)
      && !__builtin_add_overflow (tmp, c/2, &tmp))
    {
      *res = tmp / c;
      return true;
    }
  if (c == 1)
    {
      *res = (uint64_t) -1;
      return false;
    }
# 106 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  return slow_safe_scale_64bit (a, b, c, res);
}
# 146 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
class profile_probability
{
  static const int n_bits = 29;


  static const uint32_t max_probability = (uint32_t) 1 << (n_bits - 2);
  static const uint32_t uninitialized_probability
   = ((uint32_t) 1 << (n_bits - 1)) - 1;

  uint32_t m_val : 29;
  enum profile_quality m_quality : 3;

  friend struct profile_count;
public:
  profile_probability (): m_val (uninitialized_probability),
    m_quality (GUESSED)
  {}

  profile_probability (uint32_t val, profile_quality quality):
    m_val (val), m_quality (quality)
  {}


  static profile_probability never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = PRECISE;
      return ret;
    }

  static profile_probability guessed_never ()
    {
      profile_probability ret;
      ret.m_val = 0;
      ret.m_quality = GUESSED;
      return ret;
    }

  static profile_probability very_unlikely ()
    {

      profile_probability r = guessed_always ().apply_scale (1, 2000);
      r.m_val--;
      return r;
    }

  static profile_probability unlikely ()
    {

      profile_probability r = guessed_always ().apply_scale (1, 5);
      r.m_val--;
      return r;
    }

  static profile_probability even ()
    {
      return guessed_always ().apply_scale (1, 2);
    }

  static profile_probability very_likely ()
    {
      return always () - very_unlikely ();
    }

  static profile_probability likely ()
    {
      return always () - unlikely ();
    }

  static profile_probability guessed_always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = GUESSED;
      return ret;
    }

  static profile_probability always ()
    {
      profile_probability ret;
      ret.m_val = max_probability;
      ret.m_quality = PRECISE;
      return ret;
    }



  static profile_probability uninitialized ()
    {
      profile_probability c;
      c.m_val = uninitialized_probability;
      c.m_quality = GUESSED;
      return c;
    }


  bool initialized_p () const
    {
      return m_val != uninitialized_probability;
    }


  bool reliable_p () const
    {
      return m_quality >= ADJUSTED;
    }



  static profile_probability from_reg_br_prob_base (int v)
    {
      profile_probability ret;
      ((void)(!(v >= 0 && v <= 10000) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 259, __FUNCTION__), 0 : 0));
      ret.m_val = (((v * (uint64_t) max_probability) + (10000) / 2) / (10000));
      ret.m_quality = GUESSED;
      return ret;
    }


  profile_probability adjusted () const
    {
      profile_probability ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = ADJUSTED;
      return ret;
    }

  int to_reg_br_prob_base () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 277, __FUNCTION__), 0 : 0));
      return (((m_val * (uint64_t) 10000) + (max_probability) / 2) / (max_probability));
    }


  static profile_probability from_reg_br_prob_note (int v)
    {
      profile_probability ret;
      ret.m_val = ((unsigned int)v) / 8;
      ret.m_quality = (enum profile_quality)(v & 7);
      return ret;
    }

  int to_reg_br_prob_note () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 292, __FUNCTION__), 0 : 0));
      int ret = m_val * 8 + m_quality;
      ((void)(!(from_reg_br_prob_note (ret) == *this) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 294, __FUNCTION__), 0 : 0));
      return ret;
    }


  static profile_probability probability_in_gcov_type
     (gcov_type val1, gcov_type val2)
    {
      profile_probability ret;
      ((void)(!(val1 >= 0 && val2 > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 303, __FUNCTION__), 0 : 0));
      if (val1 > val2)
 ret.m_val = max_probability;
      else
 {
   uint64_t tmp;
   safe_scale_64bit (val1, max_probability, val2, &tmp);
   ((void)(!(tmp <= max_probability) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 310, __FUNCTION__), 0 : 0));
   ret.m_val = tmp;
 }
      ret.m_quality = PRECISE;
      return ret;
    }


  bool operator== (const profile_probability &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }

  profile_probability operator+ (const profile_probability &other) const
    {
      if (other == never ())
 return *this;
      if (*this == never ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();

      profile_probability ret;
      ret.m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_probability &operator+= (const profile_probability &other)
    {
      if (other == never ())
 return *this;
      if (*this == never ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = (((uint32_t)(m_val + other.m_val)) < (max_probability) ? ((uint32_t)(m_val + other.m_val)) : (max_probability));
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_probability operator- (const profile_probability &other) const
    {
      if (*this == never ()
   || other == never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_probability &operator-= (const profile_probability &other)
    {
      if (*this == never ()
   || other == never ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_probability operator* (const profile_probability &other) const
    {
      if (*this == never ()
   || other == never ())
 return never ();
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;
      ret.m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
      return ret;
    }

  profile_probability &operator*= (const profile_probability &other)
    {
      if (*this == never ()
   || other == never ())
 return *this = never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
   m_val = ((((uint64_t)m_val * other.m_val) + (max_probability) / 2) / (max_probability));
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
 }
      return *this;
    }

  profile_probability operator/ (const profile_probability &other) const
    {
      if (*this == never ())
 return never ();
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      profile_probability ret;

      if (m_val >= other.m_val)
 {
   ret.m_val = max_probability;
          ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (GUESSED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (GUESSED))
                  ;
   return ret;
 }
      else if (!m_val)
 ret.m_val = 0;
      else
 {
   ((void)(!(other.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 432, __FUNCTION__), 0 : 0));
   ret.m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
 }
      ret.m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
      return ret;
    }

  profile_probability &operator/= (const profile_probability &other)
    {
      if (*this == never ())
 return *this = never ();
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {


   if (m_val > other.m_val)
     {
       m_val = max_probability;
              m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (GUESSED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (GUESSED))
                  ;
       return *this;
     }
   else if (!m_val)
     ;
   else
     {
       ((void)(!(other.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 462, __FUNCTION__), 0 : 0));
       m_val = ((((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) < (max_probability) ? (((((uint64_t)m_val * max_probability) + (other.m_val) / 2) / (other.m_val))) : (max_probability))

                      ;
     }
   m_quality = ((((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) < (ADJUSTED) ? (((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality))) : (ADJUSTED));
 }
      return *this;
    }
# 487 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  profile_probability split (const profile_probability &cprob)
    {
      profile_probability ret = *this * cprob;





      if (!(*this == always ()))
        *this = (*this - ret) / ret.invert ();
      return ret;
    }

  gcov_type apply (gcov_type val) const
    {
      if (*this == uninitialized ())
 return val / 2;
      return (((val * m_val) + (max_probability) / 2) / (max_probability));
    }


  profile_probability invert () const
    {
      return always() - *this;
    }


  profile_probability guessed () const
    {
      profile_probability ret = *this;
      ret.m_quality = GUESSED;
      return ret;
    }


  profile_probability afdo () const
    {
      profile_probability ret = *this;
      ret.m_quality = AFDO;
      return ret;
    }


  profile_probability apply_scale (int64_t num, int64_t den) const
    {
      if (*this == never ())
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_probability ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_probability) ? (tmp) : (max_probability));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }
# 560 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  bool probably_reliable_p () const
    {
      if (m_quality >= ADJUSTED)
 return true;
      if (!initialized_p ())
 return false;
      return m_val < max_probability / 100
      || m_val > max_probability - max_probability / 100;
    }


  bool verify () const
    {
      ((void)(!(m_quality != UNINITIALIZED_PROFILE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 573, __FUNCTION__), 0 : 0));
      if (m_val == uninitialized_probability)
 return m_quality == GUESSED;
      else if (m_quality < GUESSED)
 return false;
      return m_val <= max_probability;
    }



  bool operator< (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val < other.m_val;
    }

  bool operator> (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }

  bool operator<= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val <= other.m_val;
    }

  bool operator>= (const profile_probability &other) const
    {
      return initialized_p () && other.initialized_p () && m_val >= other.m_val;
    }


  uint32_t value () const { return m_val; }


  enum profile_quality quality () const { return m_quality; }


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_probability other) const;


  bool differs_lot_from_p (profile_probability other) const;




  profile_probability combine_with_count (profile_count count1,
       profile_probability other,
       profile_count count2) const;


  sreal to_sreal () const;

  static profile_probability stream_in (class lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 690 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
struct profile_count
{
public:




  static const int n_bits = 61;
  static const uint64_t max_count = ((uint64_t) 1 << n_bits) - 2;
private:
  static const uint64_t uninitialized_count = ((uint64_t) 1 << n_bits) - 1;
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h"
  uint64_t m_val : n_bits;

  enum profile_quality m_quality : 3;
public:




  bool compatible_p (const profile_count other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return true;
      if (*this == zero ()
   || other == zero ())
 return true;


      if (ipa ().nonzero_p ()
   && !(other.ipa () == other))
 return false;
      if (other.ipa ().nonzero_p ()
   && !(ipa () == *this))
 return false;

      return ipa_p () == other.ipa_p ();
    }


  static profile_count zero ()
    {
      return from_gcov_type (0);
    }

  static profile_count adjusted_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = ADJUSTED;
      return c;
    }

  static profile_count guessed_zero ()
    {
      profile_count c;
      c.m_val = 0;
      c.m_quality = GUESSED;
      return c;
    }

  static profile_count one ()
    {
      return from_gcov_type (1);
    }



  static profile_count uninitialized ()
    {
      profile_count c;
      c.m_val = uninitialized_count;
      c.m_quality = GUESSED_LOCAL;
      return c;
    }


  gcov_type to_gcov_type () const
    {
      ((void)(!(initialized_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 778, __FUNCTION__), 0 : 0));
      return m_val;
    }


  bool initialized_p () const
    {
      return m_val != uninitialized_count;
    }


  bool reliable_p () const
    {
      return m_quality >= ADJUSTED;
    }


  bool ipa_p () const
    {
      return !initialized_p () || m_quality >= GUESSED_GLOBAL0;
    }


  bool precise_p () const
    {
      return m_quality == PRECISE;
    }


  uint32_t value () const { return m_val; }


  enum profile_quality quality () const { return m_quality; }





  bool ok_for_merging (profile_count other) const
    {
      if (m_quality < ADJUSTED
   || other.m_quality < ADJUSTED)
 return true;
      return !(other < *this);
    }



  profile_count merge (profile_count other) const
    {
      if (*this == other || !other.initialized_p ()
   || m_quality > other.m_quality)
 return *this;
      if (other.m_quality > m_quality
   || other > *this)
 return other;
      return *this;
    }


  bool operator== (const profile_count &other) const
    {
      return m_val == other.m_val && m_quality == other.m_quality;
    }

  profile_count operator+ (const profile_count &other) const
    {
      if (other == zero ())
 return *this;
      if (*this == zero ())
 return other;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();

      profile_count ret;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 853, __FUNCTION__), 0 : 0));
      ret.m_val = m_val + other.m_val;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_count &operator+= (const profile_count &other)
    {
      if (other == zero ())
 return *this;
      if (*this == zero ())
 {
   *this = other;
   return *this;
 }
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 872, __FUNCTION__), 0 : 0));
   m_val += other.m_val;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }

  profile_count operator- (const profile_count &other) const
    {
      if (*this == zero () || other == zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return uninitialized ();
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 885, __FUNCTION__), 0 : 0));
      profile_count ret;
      ret.m_val = m_val >= other.m_val ? m_val - other.m_val : 0;
      ret.m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
      return ret;
    }

  profile_count &operator-= (const profile_count &other)
    {
      if (*this == zero () || other == zero ())
 return *this;
      if (!initialized_p () || !other.initialized_p ())
 return *this = uninitialized ();
      else
 {
          ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 900, __FUNCTION__), 0 : 0));
   m_val = m_val >= other.m_val ? m_val - other.m_val: 0;
   m_quality = ((m_quality) < (other.m_quality) ? (m_quality) : (other.m_quality));
 }
      return *this;
    }


  bool verify () const
    {
      ((void)(!(m_quality != UNINITIALIZED_PROFILE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 910, __FUNCTION__), 0 : 0));
      return m_val != uninitialized_count || m_quality == GUESSED_LOCAL;
    }



  bool operator< (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return !(other == zero ());
      if (other == zero ())
 return false;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 924, __FUNCTION__), 0 : 0));
      return m_val < other.m_val;
    }

  bool operator> (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return false;
      if (other == zero ())
 return !(*this == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 936, __FUNCTION__), 0 : 0));
      return initialized_p () && other.initialized_p () && m_val > other.m_val;
    }

  bool operator< (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 942, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 943, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val < (uint64_t) other;
    }

  bool operator> (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 949, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 950, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val > (uint64_t) other;
    }

  bool operator<= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (*this == zero ())
 return true;
      if (other == zero ())
 return (*this == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 962, __FUNCTION__), 0 : 0));
      return m_val <= other.m_val;
    }

  bool operator>= (const profile_count &other) const
    {
      if (!initialized_p () || !other.initialized_p ())
 return false;
      if (other == zero ())
 return true;
      if (*this == zero ())
 return (other == zero ());
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 974, __FUNCTION__), 0 : 0));
      return m_val >= other.m_val;
    }

  bool operator<= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 980, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 981, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val <= (uint64_t) other;
    }

  bool operator>= (const gcov_type other) const
    {
      ((void)(!(ipa_p ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 987, __FUNCTION__), 0 : 0));
      ((void)(!(other >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 988, __FUNCTION__), 0 : 0));
      return ipa ().initialized_p () && ipa ().m_val >= (uint64_t) other;
    }




  bool nonzero_p () const
    {
      return initialized_p () && m_val != 0;
    }


  profile_count force_nonzero () const
    {
      if (!initialized_p ())
 return *this;
      profile_count ret = *this;
      if (ret.m_val == 0)
 {
   ret.m_val = 1;
          ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
 }
      return ret;
    }

  profile_count max (profile_count other) const
    {
      profile_count val = *this;


      if (ipa ().nonzero_p () || other.ipa ().nonzero_p ())
 {
   val = ipa ();
   other = other.ipa ();
 }
      if (!initialized_p ())
 return other;
      if (!other.initialized_p ())
 return *this;
      if (*this == zero ())
 return other;
      if (other == zero ())
 return *this;
      ((void)(!(compatible_p (other)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1032, __FUNCTION__), 0 : 0));
      if (val.m_val < other.m_val || (m_val == other.m_val
          && val.m_quality < other.m_quality))
 return other;
      return *this;
    }



  profile_count apply_probability (int prob) const
    {
      ((void)(!(prob >= 0 && prob <= 10000) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1043, __FUNCTION__), 0 : 0));
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      ret.m_val = (((m_val * prob) + (10000) / 2) / (10000));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }


  profile_count apply_probability (profile_probability prob) const
    {
      if (*this == zero ())
 return *this;
      if (prob == profile_probability::never ())
 return zero ();
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      uint64_t tmp;
      safe_scale_64bit (m_val, prob.m_val, profile_probability::max_probability,
   &tmp);
      ret.m_val = tmp;
      ret.m_quality = ((m_quality) < (prob.m_quality) ? (m_quality) : (prob.m_quality));
      return ret;
    }


  profile_count apply_scale (int64_t num, int64_t den) const
    {
      if (m_val == 0)
 return *this;
      if (!initialized_p ())
 return uninitialized ();
      profile_count ret;
      uint64_t tmp;

      ((void)(!(num >= 0 && den > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1082, __FUNCTION__), 0 : 0));
      safe_scale_64bit (m_val, num, den, &tmp);
      ret.m_val = ((tmp) < (max_count) ? (tmp) : (max_count));
      ret.m_quality = ((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED));
      return ret;
    }

  profile_count apply_scale (profile_count num, profile_count den) const
    {
      if (*this == zero ())
 return *this;
      if (num == zero ())
 return num;
      if (!initialized_p () || !num.initialized_p () || !den.initialized_p ())
 return uninitialized ();
      if (num == den)
 return *this;
      ((void)(!(den.m_val) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1099, __FUNCTION__), 0 : 0));

      profile_count ret;
      uint64_t val;
      safe_scale_64bit (m_val, num.m_val, den.m_val, &val);
      ret.m_val = ((val) < (max_count) ? (val) : (max_count));
      ret.m_quality = ((((((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) < (num.m_quality) ? (((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) : (num.m_quality))) < (den.m_quality) ? (((((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) < (num.m_quality) ? (((m_quality) < (ADJUSTED) ? (m_quality) : (ADJUSTED))) : (num.m_quality))) : (den.m_quality))
                                         ;


      if (num.ipa_p ())
 ret.m_quality = ((ret.m_quality) > (num == num.ipa () ? GUESSED : num.m_quality) ? (ret.m_quality) : (num == num.ipa () ? GUESSED : num.m_quality))
                                                    ;
      return ret;
    }


  profile_count guessed_local () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_LOCAL;
      return ret;
    }


  profile_count global0 () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_GLOBAL0;
      return ret;
    }



  profile_count global0adjusted () const
    {
      profile_count ret = *this;
      if (!initialized_p ())
 return *this;
      ret.m_quality = GUESSED_GLOBAL0_ADJUSTED;
      return ret;
    }


  profile_count guessed () const
    {
      profile_count ret = *this;
      ret.m_quality = ((ret.m_quality) < (GUESSED) ? (ret.m_quality) : (GUESSED));
      return ret;
    }



  profile_count ipa () const
    {
      if (m_quality > GUESSED_GLOBAL0_ADJUSTED)
 return *this;
      if (m_quality == GUESSED_GLOBAL0)
 return zero ();
      if (m_quality == GUESSED_GLOBAL0_ADJUSTED)
 return adjusted_zero ();
      return uninitialized ();
    }


  profile_count afdo () const
    {
      profile_count ret = *this;
      ret.m_quality = AFDO;
      return ret;
    }



  profile_probability probability_in (const profile_count overall) const
    {
      if (*this == zero ()
   && !(overall == zero ()))
 return profile_probability::never ();
      if (!initialized_p () || !overall.initialized_p ()
   || !overall.m_val)
 return profile_probability::uninitialized ();
      if (*this == overall && m_quality == PRECISE)
 return profile_probability::always ();
      profile_probability ret;
      ((void)(!(compatible_p (overall)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/profile-count.h", 1188, __FUNCTION__), 0 : 0));

      if (overall.m_val < m_val)
 {
   ret.m_val = profile_probability::max_probability;
   ret.m_quality = GUESSED;
   return ret;
 }
      else
 ret.m_val = (((m_val * profile_probability::max_probability) + (overall.m_val) / 2) / (overall.m_val))
                   ;
      ret.m_quality = ((((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (GUESSED) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (GUESSED))) < (ADJUSTED) ? (((((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) > (GUESSED) ? (((m_quality) < (overall.m_quality) ? (m_quality) : (overall.m_quality))) : (GUESSED))) : (ADJUSTED))
                       ;
      return ret;
    }

  int to_frequency (struct function *fun) const;
  int to_cgraph_frequency (profile_count entry_bb_count) const;
  sreal to_sreal_scale (profile_count in, bool *known = nullptr) const;


  void dump (FILE *f) const;


  void debug () const;


  bool differs_from_p (profile_count other) const;




  static void adjust_for_ipa_scaling (profile_count *num, profile_count *den);






  profile_count combine_with_ipa_count (profile_count ipa);


  profile_count combine_with_ipa_count_within
   (profile_count ipa, profile_count ipa2);




  static profile_count from_gcov_type (gcov_type v,
           profile_quality quality = PRECISE);


  static profile_count stream_in (class lto_input_block *);
  void stream_out (struct output_block *);
  void stream_out (struct lto_output_stream *);
};
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h" 2
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
enum tree_dump_index
{
  TDI_none,
  TDI_cgraph,
  TDI_inheritance,
  TDI_clones,
  TDI_original,
  TDI_gimple,
  TDI_nested,
  TDI_lto_stream_out,
  TDI_profile_report,

  TDI_lang_all,
  TDI_tree_all,
  TDI_rtl_all,
  TDI_ipa_all,

  TDI_end
};



enum dump_kind
{
  DK_none,
  DK_lang,
  DK_tree,
  DK_rtl,
  DK_ipa
};






enum dump_flag
{

  TDF_NONE = 0,


  TDF_ADDRESS = (1 << 0),


  TDF_SLIM = (1 << 1),


  TDF_RAW = (1 << 2),


  TDF_DETAILS = (1 << 3),


  TDF_STATS = (1 << 4),


  TDF_BLOCKS = (1 << 5),


  TDF_VOPS = (1 << 6),


  TDF_LINENO = (1 << 7),


  TDF_UID = (1 << 8),


  TDF_STMTADDR = (1 << 9),


  TDF_GRAPH = (1 << 10),



  TDF_MEMSYMS = (1 << 11),


  TDF_RHS_ONLY = (1 << 12),


  TDF_ASMNAME = (1 << 13),


  TDF_EH = (1 << 14),


  TDF_NOUID = (1 << 15),


  TDF_ALIAS = (1 << 16),


  TDF_ENUMERATE_LOCALS = (1 << 17),


  TDF_CSELIB = (1 << 18),


  TDF_SCEV = (1 << 19),


  TDF_GIMPLE = (1 << 20),


  TDF_FOLDING = (1 << 21),





  MSG_OPTIMIZED_LOCATIONS = (1 << 22),


  MSG_MISSED_OPTIMIZATION = (1 << 23),


  MSG_NOTE = (1 << 24),


  MSG_ALL_KINDS = (MSG_OPTIMIZED_LOCATIONS
     | MSG_MISSED_OPTIMIZATION
     | MSG_NOTE),
# 178 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
  MSG_PRIORITY_USER_FACING = (1 << 25),


  MSG_PRIORITY_INTERNALS = (1 << 26),





  MSG_PRIORITY_REEMITTED = (1 << 27),


  MSG_ALL_PRIORITIES = (MSG_PRIORITY_USER_FACING
   | MSG_PRIORITY_INTERNALS
   | MSG_PRIORITY_REEMITTED),


  TDF_COMPARE_DEBUG = (1 << 28),


  TDF_ERROR = (1 << 26),


  TDF_ALL_VALUES = (1 << 29) - 1
};



typedef enum dump_flag dump_flags_t;

static inline dump_flags_t
operator| (dump_flags_t lhs, dump_flags_t rhs)
{
  return (dump_flags_t)((int)lhs | (int)rhs);
}

static inline dump_flags_t
operator& (dump_flags_t lhs, dump_flags_t rhs)
{
  return (dump_flags_t)((int)lhs & (int)rhs);
}

static inline dump_flags_t
operator~ (dump_flags_t flags)
{
  return (dump_flags_t)~((int)flags);
}

static inline dump_flags_t &
operator|= (dump_flags_t &lhs, dump_flags_t rhs)
{
  lhs = (dump_flags_t)((int)lhs | (int)rhs);
  return lhs;
}

static inline dump_flags_t &
operator&= (dump_flags_t &lhs, dump_flags_t rhs)
{
  lhs = (dump_flags_t)((int)lhs & (int)rhs);
  return lhs;
}





enum optgroup_flag
{
  OPTGROUP_NONE = 0,


  OPTGROUP_IPA = (1 << 1),


  OPTGROUP_LOOP = (1 << 2),


  OPTGROUP_INLINE = (1 << 3),


  OPTGROUP_OMP = (1 << 4),


  OPTGROUP_VEC = (1 << 5),


  OPTGROUP_OTHER = (1 << 6),

  OPTGROUP_ALL = (OPTGROUP_IPA | OPTGROUP_LOOP | OPTGROUP_INLINE
    | OPTGROUP_OMP | OPTGROUP_VEC | OPTGROUP_OTHER)
};

typedef enum optgroup_flag optgroup_flags_t;

static inline optgroup_flags_t
operator| (optgroup_flags_t lhs, optgroup_flags_t rhs)
{
  return (optgroup_flags_t)((int)lhs | (int)rhs);
}

static inline optgroup_flags_t &
operator|= (optgroup_flags_t &lhs, optgroup_flags_t rhs)
{
  lhs = (optgroup_flags_t)((int)lhs | (int)rhs);
  return lhs;
}


struct dump_file_info
{

  const char *suffix;

  const char *swtch;

  const char *glob;

  const char *pfilename;

  const char *alt_filename;

  FILE *pstream;

  FILE *alt_stream;

  dump_kind dkind;

  dump_flags_t pflags;

  dump_flags_t alt_flags;

  optgroup_flags_t optgroup_flags;

  int pstate;

  int alt_state;

  int num;


  bool owns_strings;


  bool graph_dump_initialized;
};







class dump_user_location_t
{
 public:

  dump_user_location_t () : m_count (), m_loc (((location_t) 0)) {}


  dump_user_location_t (const gimple *stmt);


  dump_user_location_t (const rtx_insn *insn);



  static dump_user_location_t
  from_location_t (location_t loc)
  {
    return dump_user_location_t (profile_count (), loc);
  }



  static dump_user_location_t
  from_function_decl (tree fndecl);

  profile_count get_count () const { return m_count; }
  location_t get_location_t () const { return m_loc; }

 private:

  dump_user_location_t (profile_count count, location_t loc)
    : m_count (count), m_loc (loc)
  {}

  profile_count m_count;
  location_t m_loc;
};




class dump_impl_location_t
{
public:
  dump_impl_location_t (

   const char *file = __builtin_FILE (),
   int line = __builtin_LINE (),
   const char *function = __builtin_FUNCTION ()





  )
  : m_file (file), m_line (line), m_function (function)
  {}

  const char *m_file;
  int m_line;
  const char *m_function;
};
# 404 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
class dump_metadata_t
{
 public:
  dump_metadata_t (dump_flags_t dump_flags,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_dump_flags (dump_flags),
    m_impl_location (impl_location)
  {
  }

  dump_flags_t get_dump_flags () const { return m_dump_flags; }

  const dump_impl_location_t &
  get_impl_location () const { return m_impl_location; }

 private:
  dump_flags_t m_dump_flags;
  dump_impl_location_t m_impl_location;
};
# 436 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
class dump_location_t
{
 public:

  dump_location_t (const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_user_location (dump_user_location_t ()),
    m_impl_location (impl_location)
  {
  }


  dump_location_t (const gimple *stmt,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_user_location (dump_user_location_t (stmt)),
    m_impl_location (impl_location)
  {
  }


  dump_location_t (const rtx_insn *insn,
     const dump_impl_location_t &impl_location
     = dump_impl_location_t ())
  : m_user_location (dump_user_location_t (insn)),
    m_impl_location (impl_location)
  {
  }


  dump_location_t (const dump_user_location_t &user_location,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  : m_user_location (user_location),
    m_impl_location (impl_location)
  {
  }



  static dump_location_t
  from_location_t (location_t loc,
     const dump_impl_location_t &impl_location
       = dump_impl_location_t ())
  {
    return dump_location_t (dump_user_location_t::from_location_t (loc),
       impl_location);
  }

  const dump_user_location_t &
  get_user_location () const { return m_user_location; }

  const dump_impl_location_t &
  get_impl_location () const { return m_impl_location; }

  location_t get_location_t () const
  {
    return m_user_location.get_location_t ();
  }

  profile_count get_count () const { return m_user_location.get_count (); }

 private:
  dump_user_location_t m_user_location;
  dump_impl_location_t m_impl_location;
};


extern FILE *dump_begin (int, dump_flags_t *, int part=-1);
extern void dump_end (int, FILE *);
extern int opt_info_switch_p (const char *);
extern const char *dump_flag_name (int);
extern const kv_pair<optgroup_flags_t> optgroup_options[];
extern dump_flags_t
parse_dump_option (const char *, const char **);


extern FILE *dump_file;
extern dump_flags_t dump_flags;
extern const char *dump_file_name;

extern bool dumps_are_enabled;

extern void set_dump_file (FILE *new_dump_file);


static inline bool
dump_enabled_p (void)
{
  return dumps_are_enabled;
}
# 563 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
extern void dump_printf (const dump_metadata_t &, const char *, ...)
  __attribute__ ((__format__ (__gcc_dump_printf__, 2 ,3))) __attribute__ ((__nonnull__ (2)));

extern void dump_printf_loc (const dump_metadata_t &, const dump_user_location_t &,
        const char *, ...)
  __attribute__ ((__format__ (__gcc_dump_printf__, 3 ,0))) __attribute__ ((__nonnull__ (3)));
extern void dump_function (int phase, tree fn);
extern void dump_basic_block (dump_flags_t, basic_block, int);
extern void dump_generic_expr_loc (const dump_metadata_t &,
       const dump_user_location_t &,
       dump_flags_t, tree);
extern void dump_generic_expr (const dump_metadata_t &, dump_flags_t, tree);
extern void dump_gimple_stmt_loc (const dump_metadata_t &,
      const dump_user_location_t &,
      dump_flags_t, gimple *, int);
extern void dump_gimple_stmt (const dump_metadata_t &, dump_flags_t, gimple *, int);
extern void dump_gimple_expr_loc (const dump_metadata_t &,
      const dump_user_location_t &,
      dump_flags_t, gimple *, int);
extern void dump_gimple_expr (const dump_metadata_t &, dump_flags_t, gimple *, int);
extern void dump_symtab_node (const dump_metadata_t &, symtab_node *);

template<unsigned int N, typename C>
void dump_dec (const dump_metadata_t &, const poly_int<N, C> &);
extern void dump_dec (dump_flags_t, const poly_wide_int &, signop);
extern void dump_hex (dump_flags_t, const poly_wide_int &);

extern void dumpfile_ensure_any_optinfo_are_flushed ();




extern unsigned int get_dump_scope_depth ();
extern void dump_begin_scope (const char *name,
         const dump_user_location_t &user_location,
         const dump_impl_location_t &impl_location);
extern void dump_end_scope ();







class auto_dump_scope
{
 public:
  auto_dump_scope (const char *name,
     const dump_user_location_t &user_location,
     const dump_impl_location_t &impl_location
     = dump_impl_location_t ())
  {
    if (dump_enabled_p ())
      dump_begin_scope (name, user_location, impl_location);
  }
  ~auto_dump_scope ()
  {
    if (dump_enabled_p ())
      dump_end_scope ();
  }
};
# 640 "/home/giulianob/gcc_git_gnu/gcc/gcc/dumpfile.h"
extern void dump_function (int phase, tree fn);
extern void print_combine_total_stats (void);
extern bool enable_rtl_dump_file (void);


extern void dump_node (const_tree, dump_flags_t, FILE *);


extern void dump_combine_total_stats (FILE *);

extern void dump_bb (FILE *, basic_block, int, dump_flags_t);

class opt_pass;

namespace gcc {




class dump_manager
{
public:

  dump_manager ();
  ~dump_manager ();





  unsigned int
  dump_register (const char *suffix, const char *swtch, const char *glob,
   dump_kind dkind, optgroup_flags_t optgroup_flags,
   bool take_ownership);



  void
  register_dumps ();


  struct dump_file_info *
  get_dump_file_info (int phase) const;

  struct dump_file_info *
  get_dump_file_info_by_switch (const char *swtch) const;



  char *
  get_dump_file_name (int phase, int part = -1) const;

  char *
  get_dump_file_name (struct dump_file_info *dfi, int part = -1) const;

  void
  dump_switch_p (const char *arg);






  int
  dump_start (int phase, dump_flags_t *flag_ptr);



  void
  dump_finish (int phase);

  FILE *
  dump_begin (int phase, dump_flags_t *flag_ptr, int part);


  int
  dump_initialized_p (int phase) const;


  const char *
  dump_flag_name (int phase) const;

  void register_pass (opt_pass *pass);

private:

  int
  dump_phase_enabled_p (int phase) const;

  int
  dump_switch_p_1 (const char *arg, struct dump_file_info *dfi, bool doglob);

  int
  dump_enable_all (dump_kind dkind, dump_flags_t flags, const char *filename);

  int
  opt_info_enable_passes (optgroup_flags_t optgroup_flags, dump_flags_t flags,
     const char *filename);

  bool update_dfi_for_opt_info (dump_file_info *dfi) const;

private:


  int m_next_dump;
  struct dump_file_info *m_extra_dump_files;
  size_t m_extra_dump_files_in_use;
  size_t m_extra_dump_files_alloced;



  optgroup_flags_t m_optgroup_flags;
  dump_flags_t m_optinfo_flags;
  char *m_optinfo_filename;


  friend bool ::enable_rtl_dump_file (void);


  friend int ::opt_info_switch_p (const char *arg);

};

}
# 482 "/home/giulianob/gcc_git_gnu/gcc/gcc/coretypes.h" 2
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
# 1 "./tm.h" 1
# 22 "./tm.h"
# 1 "./options.h" 1





# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_info_type
{
  NO_DEBUG,
  DBX_DEBUG,
  DWARF2_DEBUG,
  XCOFF_DEBUG,
  VMS_DEBUG,
  VMS_AND_DWARF2_DEBUG

};

enum debug_info_levels
{
  DINFO_LEVEL_NONE,
  DINFO_LEVEL_TERSE,
  DINFO_LEVEL_NORMAL,
  DINFO_LEVEL_VERBOSE
};
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_info_usage
{
  DINFO_USAGE_DFN,
  DINFO_USAGE_DIR_USE,
  DINFO_USAGE_IND_USE,
  DINFO_USAGE_NUM_ENUMS
};
# 83 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum debug_struct_file
{
  DINFO_STRUCT_FILE_NONE,
  DINFO_STRUCT_FILE_BASE,

  DINFO_STRUCT_FILE_SYS,

  DINFO_STRUCT_FILE_ANY
};



enum dwarf_gnat_encodings
{
  DWARF_GNAT_ENCODINGS_ALL = 0,



  DWARF_GNAT_ENCODINGS_GDB = 1,


  DWARF_GNAT_ENCODINGS_MINIMAL = 2

};



enum ivar_visibility
{
  IVAR_VISIBILITY_PRIVATE,
  IVAR_VISIBILITY_PROTECTED,
  IVAR_VISIBILITY_PUBLIC,
  IVAR_VISIBILITY_PACKAGE
};


enum stack_reuse_level
{
  SR_NONE,
  SR_NAMED_VARS,
  SR_ALL
};


enum live_patching_level
{
  LIVE_PATCHING_NONE = 0,
  LIVE_PATCHING_INLINE_ONLY_STATIC,
  LIVE_PATCHING_INLINE_CLONE
};


enum reorder_blocks_algorithm
{
  REORDER_BLOCKS_ALGORITHM_SIMPLE,
  REORDER_BLOCKS_ALGORITHM_STC
};


enum ira_algorithm
{
  IRA_ALGORITHM_CB,
  IRA_ALGORITHM_PRIORITY
};


enum ira_region
{
  IRA_REGION_ONE,
  IRA_REGION_ALL,
  IRA_REGION_MIXED,



  IRA_REGION_AUTODETECT
};


enum excess_precision
{
  EXCESS_PRECISION_DEFAULT,
  EXCESS_PRECISION_FAST,
  EXCESS_PRECISION_STANDARD
};


enum permitted_flt_eval_methods
{
  PERMITTED_FLT_EVAL_METHODS_DEFAULT,
  PERMITTED_FLT_EVAL_METHODS_TS_18661,
  PERMITTED_FLT_EVAL_METHODS_C11
};
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/flag-types.h"
enum stack_check_type
{

  NO_STACK_CHECK = 0,



  GENERIC_STACK_CHECK,




  STATIC_BUILTIN_STACK_CHECK,



  FULL_BUILTIN_STACK_CHECK
};


enum callgraph_info_type
{

  NO_CALLGRAPH_INFO = 0,


  CALLGRAPH_INFO_NAKED = 1,


  CALLGRAPH_INFO_STACK_USAGE = 2,


  CALLGRAPH_INFO_DYNAMIC_ALLOC = 4
};


enum fp_contract_mode {
  FP_CONTRACT_OFF = 0,
  FP_CONTRACT_ON = 1,
  FP_CONTRACT_FAST = 2
};


enum scalar_storage_order_kind {
  SSO_NATIVE = 0,
  SSO_BIG_ENDIAN,
  SSO_LITTLE_ENDIAN
};


enum vect_cost_model {
  VECT_COST_MODEL_UNLIMITED = 0,
  VECT_COST_MODEL_CHEAP = 1,
  VECT_COST_MODEL_DYNAMIC = 2,
  VECT_COST_MODEL_DEFAULT = 3
};


enum sanitize_code {

  SANITIZE_ADDRESS = 1UL << 0,
  SANITIZE_USER_ADDRESS = 1UL << 1,
  SANITIZE_KERNEL_ADDRESS = 1UL << 2,

  SANITIZE_THREAD = 1UL << 3,

  SANITIZE_LEAK = 1UL << 4,

  SANITIZE_SHIFT_BASE = 1UL << 5,
  SANITIZE_SHIFT_EXPONENT = 1UL << 6,
  SANITIZE_DIVIDE = 1UL << 7,
  SANITIZE_UNREACHABLE = 1UL << 8,
  SANITIZE_VLA = 1UL << 9,
  SANITIZE_NULL = 1UL << 10,
  SANITIZE_RETURN = 1UL << 11,
  SANITIZE_SI_OVERFLOW = 1UL << 12,
  SANITIZE_BOOL = 1UL << 13,
  SANITIZE_ENUM = 1UL << 14,
  SANITIZE_FLOAT_DIVIDE = 1UL << 15,
  SANITIZE_FLOAT_CAST = 1UL << 16,
  SANITIZE_BOUNDS = 1UL << 17,
  SANITIZE_ALIGNMENT = 1UL << 18,
  SANITIZE_NONNULL_ATTRIBUTE = 1UL << 19,
  SANITIZE_RETURNS_NONNULL_ATTRIBUTE = 1UL << 20,
  SANITIZE_OBJECT_SIZE = 1UL << 21,
  SANITIZE_VPTR = 1UL << 22,
  SANITIZE_BOUNDS_STRICT = 1UL << 23,
  SANITIZE_POINTER_OVERFLOW = 1UL << 24,
  SANITIZE_BUILTIN = 1UL << 25,
  SANITIZE_POINTER_COMPARE = 1UL << 26,
  SANITIZE_POINTER_SUBTRACT = 1UL << 27,
  SANITIZE_SHIFT = SANITIZE_SHIFT_BASE | SANITIZE_SHIFT_EXPONENT,
  SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE
         | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN
         | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM
         | SANITIZE_BOUNDS | SANITIZE_ALIGNMENT
         | SANITIZE_NONNULL_ATTRIBUTE
         | SANITIZE_RETURNS_NONNULL_ATTRIBUTE
         | SANITIZE_OBJECT_SIZE | SANITIZE_VPTR
         | SANITIZE_POINTER_OVERFLOW | SANITIZE_BUILTIN,
  SANITIZE_UNDEFINED_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST
      | SANITIZE_BOUNDS_STRICT
};


enum incremental_link {
  INCREMENTAL_LINK_NONE,

  INCREMENTAL_LINK_NOLTO,

  INCREMENTAL_LINK_LTO
};


enum sanitize_coverage_code {

  SANITIZE_COV_TRACE_PC = 1 << 0,

  SANITIZE_COV_TRACE_CMP = 1 << 1
};


enum vtv_priority {
  VTV_NO_PRIORITY = 0,
  VTV_STANDARD_PRIORITY = 1,
  VTV_PREINIT_PRIORITY = 2
};


enum lto_partition_model {
  LTO_PARTITION_NONE = 0,
  LTO_PARTITION_ONE = 1,
  LTO_PARTITION_BALANCED = 2,
  LTO_PARTITION_1TO1 = 3,
  LTO_PARTITION_MAX = 4
};


enum lto_linker_output {
  LTO_LINKER_OUTPUT_UNKNOWN,
  LTO_LINKER_OUTPUT_REL,
  LTO_LINKER_OUTPUT_NOLTOREL,
  LTO_LINKER_OUTPUT_DYN,
  LTO_LINKER_OUTPUT_PIE,
  LTO_LINKER_OUTPUT_EXEC
};



enum gfc_init_local_real
{
  GFC_INIT_REAL_OFF = 0,
  GFC_INIT_REAL_ZERO,
  GFC_INIT_REAL_NAN,
  GFC_INIT_REAL_SNAN,
  GFC_INIT_REAL_INF,
  GFC_INIT_REAL_NEG_INF
};



enum gfc_fcoarray
{
  GFC_FCOARRAY_NONE = 0,
  GFC_FCOARRAY_SINGLE,
  GFC_FCOARRAY_LIB
};




enum gfc_convert
{
  GFC_FLAG_CONVERT_NATIVE = 0,
  GFC_FLAG_CONVERT_SWAP,
  GFC_FLAG_CONVERT_BIG,
  GFC_FLAG_CONVERT_LITTLE
};



enum cf_protection_level
{
  CF_NONE = 0,
  CF_BRANCH = 1 << 0,
  CF_RETURN = 1 << 1,
  CF_FULL = CF_BRANCH | CF_RETURN,
  CF_SET = 1 << 2,
  CF_CHECK = 1 << 3
};


enum parloops_schedule_type
{
  PARLOOPS_SCHEDULE_STATIC = 0,
  PARLOOPS_SCHEDULE_DYNAMIC,
  PARLOOPS_SCHEDULE_GUIDED,
  PARLOOPS_SCHEDULE_AUTO,
  PARLOOPS_SCHEDULE_RUNTIME
};
# 7 "./options.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h"
enum stringop_alg
{






# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/stringop.def" 1
# 20 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/stringop.def"

no_stringop,

libcall,

rep_prefix_1_byte,

rep_prefix_4_byte,

rep_prefix_8_byte,

loop_1_byte,

loop,

unrolled_loop,

vector_loop,
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386-opts.h" 2
last_alg



};


enum calling_abi
{
  SYSV_ABI = 0,
  MS_ABI = 1
};

enum fpmath_unit
{
  FPMATH_387 = 1,
  FPMATH_SSE = 2
};

enum tls_dialect
{
  TLS_DIALECT_GNU,
  TLS_DIALECT_GNU2,
  TLS_DIALECT_SUN
};

enum cmodel {
  CM_32,
  CM_SMALL,
  CM_KERNEL,
  CM_MEDIUM,
  CM_LARGE,
  CM_SMALL_PIC,
  CM_MEDIUM_PIC,
  CM_LARGE_PIC
};

enum pmode {
  PMODE_SI,
  PMODE_DI
};

enum ix86_align_data {
  ix86_align_data_type_compat,
  ix86_align_data_type_abi,
  ix86_align_data_type_cacheline
};

enum asm_dialect {
  ASM_ATT,
  ASM_INTEL
};

enum ix86_veclibabi {
  ix86_veclibabi_type_none,
  ix86_veclibabi_type_svml,
  ix86_veclibabi_type_acml
};

enum stack_protector_guard {
  SSP_TLS,
  SSP_GLOBAL
};

enum prefer_vector_width {
    PVW_NONE,
    PVW_AVX128,
    PVW_AVX256,
    PVW_AVX512
};






enum indirect_branch {
  indirect_branch_unset = 0,
  indirect_branch_keep,
  indirect_branch_thunk,
  indirect_branch_thunk_inline,
  indirect_branch_thunk_extern
};

enum instrument_return {
  instrument_return_none = 0,
  instrument_return_call,
  instrument_return_nop5
};
# 9 "./options.h" 2




struct gcc_options



{




  long x_ix86_stack_protector_guard_offset;





  addr_space_t x_ix86_stack_protector_guard_reg;





  int x_recip_mask;





  long x_function_entry_patch_area_size;





  long x_function_entry_patch_area_start;





  long x_ix86_isa_flags;





  long x_ix86_isa_flags2;





  long x_ix86_isa_flags2_explicit;





  long x_ix86_isa_flags_explicit;





  bool x_dump_base_name_prefixed;





  bool x_exit_after_options;





  bool x_flag_disable_hsa;





  bool x_flag_dump_all_passed;





  bool x_flag_opts_finished;





  bool x_flag_stack_usage_info;





  bool x_flag_warn_unused_result;





  bool x_in_lto_p;





  bool x_use_gnu_debug_info_extensions;





  char * x_help_enum_printed;





  char * x_help_printed;





  const char * x_aux_base_name;





  const char * x_flag_parallel_jobs;





  const char * x_main_input_basename;





  const char * x_main_input_filename;





  const char * x_split_outputs;





  enum debug_info_levels x_debug_info_level;





  enum debug_info_type x_write_symbols;





  enum debug_struct_file x_debug_struct_generic[DINFO_USAGE_NUM_ENUMS];





  enum debug_struct_file x_debug_struct_ordinary[DINFO_USAGE_NUM_ENUMS];





  enum dwarf_gnat_encodings x_gnat_encodings;





  enum incremental_link x_flag_incremental_link;





  enum stack_check_type x_flag_stack_check;





  int x_flag_complex_method;





  int x_flag_debug_asm;





  int x_flag_dump_rtl_in_asm;





  int x_flag_gen_aux_info;





  int x_flag_generate_lto;





  int x_flag_generate_offload;





  int x_flag_print_asm_name;





  int x_flag_shlib;





  int x_ix86_target_flags;





  int x_main_input_baselength;





  int x_optimize;





  int x_optimize_debug;





  int x_optimize_fast;





  int x_optimize_size;





  int x_recip_mask_explicit;





  int x_rtl_dump_and_exit;





  int x_target_flags;





  unsigned int x_flag_sanitize;





  unsigned int x_flag_sanitize_coverage;





  unsigned int x_flag_sanitize_recover;





  unsigned int x_help_columns;





  unsigned int x_initial_max_fld_align;





  void * x_flag_instrument_functions_exclude_files;





  void * x_flag_instrument_functions_exclude_functions;





  int x_help_flag;





  int x_no_sysroot_suffix;





  int x_param_align_loop_iterations;





  int x_param_align_threshold;





  int x_param_analyzer_bb_explosion_factor;





  int x_param_analyzer_max_enodes_for_full_dump;





  int x_param_analyzer_max_enodes_per_program_point;





  int x_param_analyzer_max_recursion_depth;





  int x_param_analyzer_max_svalue_depth;





  int x_param_analyzer_min_snodes_for_call_summary;





  int x_param_asan_globals;





  int x_param_asan_protect_allocas;





  int x_param_asan_instrument_reads;





  int x_param_asan_instrument_writes;





  int x_param_asan_instrumentation_with_call_threshold;





  int x_param_asan_memintrin;





  int x_param_asan_stack;





  int x_param_asan_use_after_return;





  int x_param_avg_loop_niter;





  int x_param_avoid_fma_max_bits;





  int x_param_balance_partitions;





  int x_param_builtin_expect_probability;





  int x_param_builtin_string_cmp_inline_length;





  int x_param_case_values_threshold;





  int x_param_comdat_sharing_probability;





  int x_param_cxx_max_namespaces_for_diagnostic_help;





  int x_param_dse_max_alias_queries_per_store;





  int x_param_dse_max_object_size;





  int x_param_early_inlining_insns;





  int x_param_fsm_maximum_phi_arguments;





  int x_param_fsm_scale_path_blocks;





  int x_param_fsm_scale_path_stmts;





  int x_param_gcse_after_reload_critical_fraction;





  int x_param_gcse_after_reload_partial_fraction;





  int x_param_gcse_cost_distance_ratio;





  int x_param_gcse_unrestricted_cost;





  int x_param_ggc_min_expand;





  int x_param_ggc_min_heapsize;





  int x_param_gimple_fe_computed_hot_bb_threshold;





  int x_param_graphite_allow_codegen_errors;





  int x_param_graphite_max_arrays_per_scop;





  int x_param_graphite_max_nb_scop_params;





  int x_param_hash_table_verification_limit;





  int x_param_hot_bb_count_fraction;





  int x_param_hot_bb_count_ws_permille;





  int x_param_hot_bb_frequency_fraction;





  int x_param_inline_heuristics_hint_percent;





  int x_param_inline_min_speedup;





  int x_param_inline_unit_growth;





  int x_param_integer_share_limit;





  int x_param_ipa_cp_eval_threshold;





  int x_param_ipa_cp_loop_hint_bonus;





  int x_param_ipa_cp_max_recursive_depth;





  int x_param_ipa_cp_min_recursive_probability;





  int x_param_ipa_cp_recursion_penalty;





  int x_param_ipa_cp_single_call_penalty;





  int x_param_ipa_cp_unit_growth;





  int x_param_ipa_cp_value_list_size;





  int x_param_ipa_max_aa_steps;





  int x_param_ipa_max_agg_items;





  int x_param_ipa_max_param_expr_ops;





  int x_param_ipa_max_switch_predicate_bounds;





  int x_param_ipa_sra_max_replacements;





  int x_param_ipa_sra_ptr_growth_factor;





  int x_param_ira_loop_reserved_regs;





  int x_param_ira_max_conflict_table_size;





  int x_param_ira_max_loops_num;





  int x_param_iv_always_prune_cand_set_bound;





  int x_param_iv_consider_all_candidates_bound;





  int x_param_iv_max_considered_uses;





  int x_param_jump_table_max_growth_ratio_for_size;





  int x_param_jump_table_max_growth_ratio_for_speed;





  int x_param_l1_cache_line_size;





  int x_param_l1_cache_size;





  int x_param_l2_cache_size;





  int x_param_large_function_growth;





  int x_param_large_function_insns;





  int x_param_stack_frame_growth;





  int x_param_large_stack_frame;





  int x_param_large_unit_insns;





  int x_param_lim_expensive;





  int x_param_logical_op_non_short_circuit;





  int x_param_loop_block_tile_size;





  int x_param_loop_interchange_max_num_stmts;





  int x_param_loop_interchange_stride_ratio;





  int x_param_loop_invariant_max_bbs_in_loop;





  int x_param_loop_max_datarefs_for_datadeps;





  int x_param_loop_versioning_max_inner_insns;





  int x_param_loop_versioning_max_outer_insns;





  int x_param_lra_inheritance_ebb_probability_cutoff;





  int x_param_lra_max_considered_reload_pseudos;





  int x_param_max_partition_size;





  int x_param_max_lto_streaming_parallelism;





  int x_param_min_partition_size;





  int x_param_lto_partitions;





  int x_param_max_average_unrolled_insns;





  int x_param_max_combine_insns;





  int x_param_max_unroll_iterations;





  int x_param_max_completely_peel_times;





  int x_param_max_completely_peeled_insns;





  int x_param_max_crossjump_edges;





  int x_param_max_cse_insns;





  int x_param_max_cse_path_length;





  int x_param_max_cselib_memory_locations;





  int x_param_max_debug_marker_count;





  int x_param_max_delay_slot_insn_search;





  int x_param_max_delay_slot_live_search;





  int x_param_max_dse_active_local_stores;





  int x_param_early_inliner_max_iterations;





  int x_param_max_fields_for_field_sensitive;





  int x_param_max_find_base_term_values;





  int x_param_max_fsm_thread_length;





  int x_param_max_fsm_thread_path_insns;





  int x_param_max_fsm_thread_paths;





  int x_param_max_gcse_insertion_ratio;





  int x_param_max_gcse_memory;





  int x_param_max_goto_duplication_insns;





  int x_param_max_grow_copy_bb_insns;





  int x_param_max_hoist_depth;





  int x_param_max_inline_insns_auto;





  int x_param_max_inline_insns_recursive_auto;





  int x_param_max_inline_insns_recursive;





  int x_param_max_inline_insns_single;





  int x_param_max_inline_insns_size;





  int x_param_max_inline_insns_small;





  int x_param_max_inline_recursive_depth_auto;





  int x_param_max_inline_recursive_depth;





  int x_param_max_isl_operations;





  int x_param_max_iterations_computation_cost;





  int x_param_max_iterations_to_track;





  int x_param_max_jump_thread_duplication_stmts;





  int x_param_max_last_value_rtl;





  int x_param_max_loop_header_insns;





  int x_param_max_modulo_backtrack_attempts;





  int x_param_max_partial_antic_length;





  int x_param_max_peel_branches;





  int x_param_max_peel_times;





  int x_param_max_peeled_insns;





  int x_param_max_pending_list_length;





  int x_param_max_pipeline_region_blocks;





  int x_param_max_pipeline_region_insns;





  int x_param_max_pow_sqrt_depth;





  int x_param_max_predicted_iterations;





  int x_param_max_reload_search_insns;





  int x_param_max_rtl_if_conversion_insns;





  int x_param_max_rtl_if_conversion_predictable_cost;





  int x_param_max_rtl_if_conversion_unpredictable_cost;





  int x_param_max_sched_extend_regions_iters;





  int x_param_max_sched_insn_conflict_delay;





  int x_param_max_sched_ready_insns;





  int x_param_max_sched_region_blocks;





  int x_param_max_sched_region_insns;





  int x_param_max_slsr_candidate_scan;





  int x_param_max_speculative_devirt_maydefs;





  int x_param_max_ssa_name_query_depth;





  int x_param_max_stores_to_merge;





  int x_param_max_stores_to_sink;





  int x_param_max_tail_merge_comparisons;





  int x_param_max_tail_merge_iterations;





  int x_param_max_tracked_strlens;





  int x_param_max_tree_if_conversion_phi_args;





  int x_param_max_unroll_times;





  int x_param_max_unrolled_insns;





  int x_param_max_unswitch_insns;





  int x_param_max_unswitch_level;





  int x_param_max_variable_expansions;





  int x_param_max_vartrack_expr_depth;





  int x_param_max_vartrack_reverse_op_size;





  int x_param_max_vartrack_size;





  int x_param_max_vrp_switch_assertions;





  int x_param_min_crossjump_insns;





  int x_param_min_inline_recursive_probability;





  int x_param_min_insn_to_prefetch_ratio;





  int x_param_min_loop_cond_split_prob;





  int x_param_min_nondebug_insn_uid;





  int x_param_min_size_for_stack_sharing;





  int x_param_min_spec_prob;





  int x_param_min_vect_loop_bound;





  int x_param_parloops_chunk_size;





  int x_param_parloops_min_per_thread;





  int x_param_parloops_schedule;





  int x_param_partial_inlining_entry_probability;





  int x_param_predictable_branch_outcome;





  int x_param_prefetch_dynamic_strides;





  int x_param_prefetch_latency;





  int x_param_prefetch_min_insn_to_mem_ratio;





  int x_param_prefetch_minimum_stride;





  int x_param_profile_func_internal_id;





  int x_param_promote_statics;





  int x_param_rpo_vn_max_loop_depth;





  int x_param_sccvn_max_alias_queries_per_access;





  int x_param_scev_max_expr_complexity;





  int x_param_scev_max_expr_size;





  int x_param_sched_autopref_queue_depth;





  int x_param_sched_mem_true_dep_cost;





  int x_param_sched_pressure_algorithm;





  int x_param_sched_spec_prob_cutoff;





  int x_param_sched_state_edge_prob_cutoff;





  int x_param_selsched_insns_to_rename;





  int x_param_selsched_max_lookahead;





  int x_param_selsched_max_sched_times;





  int x_param_simultaneous_prefetches;





  int x_param_sink_frequency_threshold;





  int x_param_slp_max_insns_in_bb;





  int x_param_sms_dfa_history;





  int x_param_sms_loop_average_count_threshold;





  int x_param_sms_max_ii_factor;





  int x_param_sms_min_sc;





  int x_param_sra_max_propagations;





  int x_param_sra_max_scalarization_size_size;





  int x_param_sra_max_scalarization_size_speed;





  int x_param_ssa_name_def_chain_limit;





  int x_param_ssp_buffer_size;





  int x_param_stack_clash_protection_guard_size;





  int x_param_stack_clash_protection_probe_interval;





  int x_param_store_merging_allow_unaligned;





  int x_param_store_merging_max_size;





  int x_param_switch_conversion_branch_ratio;





  int x_param_tm_max_aggregate_size;





  int x_param_tracer_dynamic_coverage_feedback;





  int x_param_tracer_dynamic_coverage;





  int x_param_tracer_max_code_growth;





  int x_param_tracer_min_branch_probability_feedback;





  int x_param_tracer_min_branch_probability;





  int x_param_tracer_min_branch_ratio;





  int x_param_tree_reassoc_width;





  int x_param_tsan_distinguish_volatile;





  int x_param_tsan_instrument_func_entry_exit;





  int x_param_uninit_control_dep_attempts;





  int x_param_uninlined_function_insns;





  int x_param_uninlined_function_time;





  int x_param_uninlined_function_thunk_insns;





  int x_param_uninlined_function_thunk_time;





  int x_param_unlikely_bb_count_fraction;





  int x_param_unroll_jam_max_unroll;





  int x_param_unroll_jam_min_percent;





  int x_param_use_after_scope_direct_emission_threshold;





  int x_param_use_canonical_types;





  int x_param_vect_epilogues_nomask;





  int x_param_vect_max_peeling_for_alignment;





  int x_param_vect_max_version_for_alias_checks;





  int x_param_vect_max_version_for_alignment_checks;





  int x_param_vect_partial_vector_usage;





  int x_flag_preprocess_only;





  int x_warn_abi;





  int x_warn_abi_tag;





  int x_warn_absolute_value;





  int x_warn_address;





  int x_warn_address_of_packed_member;





  int x_warn_aggregate_return;





  int x_warn_aggressive_loop_optimizations;





  int x_warn_aliasing;





  int x_warn_align_commons;





  int x_warn_aligned_new;





  long x_warn_alloc_size_limit;





  int x_warn_alloc_zero;





  int x_warn_alloca;





  long x_warn_alloca_limit;





  int x_warn_ampersand;





  int x_warn_analyzer_double_fclose;





  int x_warn_analyzer_double_free;





  int x_warn_analyzer_exposure_through_output_file;





  int x_warn_analyzer_file_leak;





  int x_warn_analyzer_free_of_non_heap;





  int x_warn_analyzer_malloc_leak;





  int x_warn_analyzer_null_argument;





  int x_warn_analyzer_null_dereference;





  int x_warn_analyzer_possible_null_argument;





  int x_warn_analyzer_possible_null_dereference;





  int x_warn_analyzer_stale_setjmp_buffer;





  int x_warn_analyzer_tainted_array_index;





  int x_warn_analyzer_too_complex;





  int x_warn_analyzer_unsafe_call_within_signal_handler;





  int x_warn_analyzer_use_after_free;





  int x_warn_analyzer_use_of_pointer_in_stale_stack_frame;





  int x_warn_arith_conv;





  int x_warn_array_bounds;





  int x_warn_array_temporaries;





  int x_warn_assign_intercept;





  int x_warn_attribute_alias;





  int x_warn_attribute_warning;





  int x_warn_attributes;





  int x_warn_bad_function_cast;





  int x_warn_bool_compare;





  int x_warn_bool_op;





  int x_warn_builtin_declaraion_mismatch;





  int x_cpp_warn_builtin_macro_redefined;





  int x_warn_cxx_compat;





  int x_warn_cxx11_compat;





  int x_warn_cxx14_compat;





  int x_warn_cxx17_compat;





  int x_warn_cxx20_compat;





  int x_warn_c_binding_type;





  int x_warn_c11_c2x_compat;





  int x_warn_c90_c99_compat;





  int x_warn_c99_c11_compat;





  int x_warn_cannot_profile;





  int x_warn_cast_align;





  int x_warn_cast_function_type;





  int x_warn_cast_qual;





  int x_warn_cast_result;





  int x_warn_catch_value;





  int x_warn_char_subscripts;





  int x_warn_character_truncation;





  int x_warn_class_conversion;





  int x_warn_class_memaccess;





  int x_warn_clobbered;





  int x_warn_comma_subscript;





  int x_cpp_warn_comment;





  int x_warn_compare_reals;





  int x_warn_conditionally_supported;





  int x_warn_conversion;





  int x_warn_conversion_extra;





  int x_warn_conversion_null;





  int x_warn_coverage_mismatch;





  int x_warn_cpp;





  int x_warn_ctor_dtor_privacy;





  int x_warn_dangling_else;





  int x_cpp_warn_date_time;





  int x_warn_declaration_after_statement;





  int x_warn_delete_incomplete;





  int x_warn_delnonvdtor;





  int x_warn_deprecated;





  int x_warn_deprecated_copy;





  int x_warn_deprecated_decl;





  int x_warn_designated_init;





  int x_warn_disabled_optimization;





  int x_warn_discarded_array_qualifiers;





  int x_warn_discarded_qualifiers;





  int x_warn_div_by_zero;





  int x_warn_do_subscript;





  int x_warn_double_promotion;





  int x_warn_duplicate_decl_specifier;





  int x_warn_duplicated_branches;





  int x_warn_duplicated_cond;





  int x_warn_ecpp;





  int x_warn_empty_body;





  int x_cpp_warn_endif_labels;





  int x_warn_enum_compare;





  int x_warn_enum_conversion;





  int x_warnings_are_errors;





  int x_cpp_warn_expansion_to_defined;





  int x_extra_warnings;





  int x_warn_extra_semi;





  int x_flag_fatal_errors;





  int x_warn_float_conversion;





  int x_warn_float_equal;





  int x_warn_format_contains_nul;





  int x_warn_format_diag;





  int x_warn_format_extra_args;





  int x_warn_format_nonliteral;





  int x_warn_format_overflow;





  int x_warn_format_security;





  int x_warn_format_signedness;





  int x_warn_format_trunc;





  int x_warn_format_y2k;





  int x_warn_format_zero_length;





  int x_warn_format;





  int x_warn_frame_address;





  long x_warn_frame_larger_than_size;





  int x_warn_free_nonheap_object;





  int x_flag_warn_frontend_loop_interchange;





  int x_warn_function_elimination;





  int x_warn_if_not_aligned;





  int x_warn_ignored_attributes;





  int x_warn_ignored_qualifiers;





  int x_warn_implicit;





  int x_warn_implicit_fallthrough;





  int x_warn_implicit_function_declaration;





  int x_warn_implicit_int;





  int x_warn_implicit_interface;





  int x_warn_implicit_procedure;





  int x_warn_inaccessible_base;





  int x_warn_incompatible_pointer_types;





  int x_warn_inh_var_ctor;





  int x_warn_init_list;





  int x_warn_init_self;





  int x_warn_inline;





  int x_warn_int_conversion;





  int x_warn_int_in_bool_context;





  int x_warn_int_to_pointer_cast;





  int x_warn_integer_division;





  int x_warn_intrinsic_shadow;





  int x_warn_intrinsics_std;





  int x_warn_invalid_memory_model;





  int x_warn_invalid_offsetof;





  int x_cpp_warn_invalid_pch;





  int x_warn_jump_misses_init;





  long x_warn_larger_than_size;





  int x_warn_line_truncation;





  int x_cpp_warn_literal_suffix;





  int x_warn_logical_not_paren;





  int x_warn_logical_op;





  int x_warn_long_long;





  int x_warn_lto_type_mismatch;





  int x_warn_main;





  int x_warn_maybe_uninitialized;





  int x_warn_memset_elt_size;





  int x_warn_memset_transposed_args;





  int x_warn_misleading_indentation;





  int x_warn_mismatched_tags;





  int x_warn_missing_attributes;





  int x_warn_missing_braces;





  int x_warn_missing_declarations;





  int x_warn_missing_field_initializers;





  int x_cpp_warn_missing_include_dirs;





  int x_warn_missing_parameter_type;





  int x_warn_missing_profile;





  int x_warn_missing_prototypes;





  int x_cpp_warn_multichar;





  int x_warn_multiple_inheritance;





  int x_warn_multistatement_macros;





  int x_warn_namespaces;





  int x_warn_narrowing;





  int x_warn_nested_externs;





  int x_warn_noexcept;





  int x_warn_noexcept_type;





  int x_warn_nontemplate_friend;





  int x_warn_nonvdtor;





  int x_warn_nonnull;





  int x_warn_nonnull_compare;





  int x_cpp_warn_normalize;





  int x_warn_null_dereference;





  int x_warn_odr_violations;





  int x_warn_old_style_cast;





  int x_warn_old_style_declaration;





  int x_warn_old_style_definition;





  int x_warn_openmp_simd;





  int x_warn_overflow;





  int x_warn_overlength_strings;





  int x_warn_overloaded_virtual;





  int x_warn_override_init;





  int x_warn_override_init_side_effects;





  int x_warn_overwrite_recursive;





  int x_warn_packed;





  int x_warn_packed_bitfield_compat;





  int x_warn_packed_not_aligned;





  int x_warn_padded;





  int x_warn_parentheses;





  int x_pedantic;





  int x_warn_pessimizing_move;





  int x_warn_placement_new;





  int x_warn_pmf2ptr;





  int x_warn_pointer_arith;





  int x_warn_pointer_compare;





  int x_warn_pointer_sign;





  int x_warn_pointer_to_int_cast;





  int x_warn_pragmas;





  int x_warn_prio_ctor_dtor;





  int x_warn_property_assign_default;





  int x_warn_protocol;





  int x_warn_psabi;





  int x_warn_real_q_constant;





  int x_warn_realloc_lhs;





  int x_warn_realloc_lhs_all;





  int x_warn_redundant_decls;





  int x_warn_redundant_move;





  int x_warn_redundant_tags;





  int x_warn_register;





  int x_warn_reorder;





  int x_warn_restrict;





  int x_warn_return_local_addr;





  int x_warn_return_type;





  int x_warn_scalar_storage_order;





  int x_warn_selector;





  int x_warn_sequence_point;





  int x_warn_shadow;





  int x_warn_shadow_ivar;





  int x_warn_shadow_compatible_local;





  int x_warn_shadow_local;





  int x_warn_shift_count_negative;





  int x_warn_shift_count_overflow;





  int x_warn_shift_negative_value;





  int x_warn_shift_overflow;





  int x_warn_sign_compare;





  int x_warn_sign_conversion;





  int x_warn_sign_promo;





  int x_warn_sized_deallocation;





  int x_warn_sizeof_array_argument;





  int x_warn_sizeof_pointer_div;





  int x_warn_sizeof_pointer_memaccess;





  int x_warn_stack_protect;





  long x_warn_stack_usage;





  int x_warn_strict_aliasing;





  int x_warn_strict_null_sentinel;





  int x_warn_strict_overflow;





  int x_warn_strict_prototypes;





  int x_warn_strict_selector_match;





  int x_warn_string_compare;





  int x_warn_stringop_overflow;





  int x_warn_stringop_truncation;





  int x_warn_subobject_linkage;





  int x_warn_suggest_attribute_cold;





  int x_warn_suggest_attribute_const;





  int x_warn_suggest_attribute_format;





  int x_warn_suggest_attribute_malloc;





  int x_warn_suggest_attribute_noreturn;





  int x_warn_suggest_attribute_pure;





  int x_warn_suggest_final_methods;





  int x_warn_suggest_final_types;





  int x_warn_override;





  int x_warn_surprising;





  int x_warn_switch;





  int x_warn_switch_bool;





  int x_warn_switch_default;





  int x_warn_switch_enum;





  int x_warn_switch_outside_range;





  int x_warn_switch_unreachable;





  int x_warn_sync_nand;





  int x_warn_synth;





  int x_warn_system_headers;





  int x_warn_tabs;





  int x_warn_target_lifetime;





  int x_warn_tautological_compare;





  int x_warn_templates;





  int x_warn_terminate;





  int x_warn_traditional;





  int x_warn_traditional_conversion;





  int x_warn_trampolines;





  int x_cpp_warn_trigraphs;





  int x_warn_type_limits;





  int x_warn_undeclared_selector;





  int x_cpp_warn_undef;





  int x_warn_undefined_do_loop;





  int x_warn_underflow;





  int x_warn_uninitialized;





  int x_warn_unknown_pragmas;





  int x_warn_unsuffixed_float_constants;





  int x_warn_unused;





  int x_warn_unused_but_set_parameter;





  int x_warn_unused_but_set_variable;





  int x_warn_unused_const_variable;





  int x_warn_unused_dummy_argument;





  int x_warn_unused_function;





  int x_warn_unused_label;





  int x_warn_unused_local_typedefs;





  int x_cpp_warn_unused_macros;





  int x_warn_unused_parameter;





  int x_warn_unused_result;





  int x_warn_unused_value;





  int x_warn_unused_variable;





  int x_warn_use_without_only;





  int x_warn_useless_cast;





  int x_warn_varargs;





  int x_cpp_warn_variadic_macros;





  int x_warn_vector_operation_performance;





  int x_warn_virtual_inheritance;





  int x_warn_virtual_move_assign;





  int x_warn_vla;





  long x_warn_vla_limit;





  int x_warn_volatile;





  int x_warn_volatile_register_var;





  int x_warn_write_strings;





  int x_warn_zero_as_null_pointer_constant;





  int x_warn_zero_length_bounds;





  int x_warn_zerotrip;





  const char *x_aux_info_file_name;





  int x_flag_dump_callgraph;





  int x_flag_lto_dump_defined;





  int x_flag_lto_dump_demangle;





  const char *x_flag_dump_body;





  const char *x_flag_dump_level;





  const char *x_dump_base_name;





  const char *x_dump_base_ext;





  const char *x_dump_dir_name;





  int x_flag_pic;





  int x_flag_pie;





  int x_flag_abi_compat_version;





  int x_flag_abi_version;





  int x_flag_access_control;





  const char *x_ada_specs_parent;





  int x_flag_aggressive_function_elimination;





  int x_flag_aggressive_loop_optimizations;





  int x_flag_align_commons;





  int x_flag_align_functions;





  const char *x_str_align_functions;





  int x_flag_align_jumps;





  const char *x_str_align_jumps;





  int x_flag_align_labels;





  const char *x_str_align_labels;





  int x_flag_align_loops;





  const char *x_str_align_loops;





  int x_aligned_new_threshold;





  int x_flag_all_intrinsics;





  int x_flag_allocation_dce;





  int x_flag_allow_argument_mismatch;





  int x_flag_allow_invalid_boz;





  int x_flag_allow_leading_underscore;





  int x_flag_allow_parameterless_variadic_functions;





  int x_flag_store_data_races;





  int x_flag_analyzer;





  int x_flag_analyzer_call_summaries;





  const char *x_flag_analyzer_checker;





  int x_flag_analyzer_fine_grained;





  int x_flag_analyzer_show_duplicate_count;





  int x_flag_analyzer_state_merge;





  int x_flag_analyzer_state_purge;





  int x_flag_analyzer_transitivity;





  int x_flag_analyzer_verbose_edges;





  int x_flag_analyzer_verbose_state_changes;





  int x_analyzer_verbosity;





  void *x_common_deferred_options;





  int x_flag_no_asm;





  int x_flag_assert;





  int x_flag_associative_math;





  int x_flag_assume_phsa;





  int x_flag_asynchronous_unwind_tables;





  int x_flag_auto_inc_dec;





  int x_flag_auto_profile;





  const char *x_auto_profile_file;





  int x_flag_automatic;





  int x_flag_backslash;





  int x_flag_backtrace;





  int x_flag_blas_matmul_limit;





  int x_flag_bounds_check;





  int x_flag_branch_on_count_reg;





  int x_flag_branch_probabilities;





  int x_flag_building_libgcc;





  int x_flag_building_libphobos_tests;





  int x_flag_no_builtin;





  int x_flag_c_prototypes;





  int x_flag_c_prototypes_external;





  int x_flag_caller_saves;





  int x_flag_callgraph_info;





  enum cf_protection_level x_flag_cf_protection;





  int x_flag_char8_t;





  int x_flag_check_new;





  int x_flag_checking;





  enum gfc_fcoarray x_flag_coarray;





  int x_flag_code_hoisting;





  int x_flag_combine_stack_adjustments;





  int x_flag_no_common;





  int x_flag_compare_debug;





  const char *x_flag_compare_debug_opt;





  int x_flag_compare_elim_after_reload;





  int x_flag_concepts;





  int x_concepts_diagnostics_max_depth;





  int x_flag_concepts_ts;





  int x_flag_conserve_stack;





  int x_constexpr_cache_depth;





  int x_max_constexpr_depth;





  int x_constexpr_loop_limit;





  long x_constexpr_ops_limit;





  enum gfc_convert x_flag_convert;





  int x_flag_coroutines;





  int x_flag_cprop_registers;





  int x_flag_cray_pointer;





  int x_flag_crossjumping;





  int x_flag_cse_follow_jumps;





  int x_flag_cx_fortran_rules;





  int x_flag_cx_limited_range;





  int x_flag_data_sections;





  int x_flag_dce;





  int x_flag_debug_types_section;





  int x_flag_dec;





  int x_flag_dec_blank_format_item;





  int x_flag_dec_char_conversions;





  int x_flag_dec_format_defaults;





  int x_flag_dec_include;





  int x_flag_dec_intrinsic_ints;





  int x_flag_dec_math;





  int x_flag_dec_static;





  int x_flag_dec_structure;





  int x_flag_declone_ctor_dtor;





  int x_flag_default_double;





  int x_flag_default_integer;





  int x_flag_default_real_10;





  int x_flag_default_real_16;





  int x_flag_default_real_8;





  int x_flag_defer_pop;





  int x_flag_delayed_branch;





  int x_flag_delete_dead_exceptions;





  int x_flag_delete_null_pointer_checks;





  int x_flag_devirtualize;





  int x_flag_ltrans_devirtualize;





  int x_flag_devirtualize_speculatively;





  int x_flag_diagnostics_show_color;





  int x_flag_diagnostics_generate_patch;





  int x_diagnostics_minimum_margin_width;





  int x_flag_diagnostics_parseable_fixits;





  int x_flag_diagnostics_path_format;





  int x_flag_diagnostics_show_caret;





  int x_flag_diagnostics_show_cwe;





  int x_flag_diagnostics_show_labels;





  int x_flag_diagnostics_show_line_numbers;





  int x_flag_diagnostics_show_option;





  int x_flag_diagnostics_show_path_depths;





  int x_flag_diagnostics_show_template_tree;





  int x_flag_diagnostics_show_urls;





  int x_flag_dollar_ok;





  int x_flag_dse;





  int x_flag_dump_ada_spec;





  int x_flag_dump_ada_spec_slim;





  int x_flag_dump_analyzer;





  int x_flag_dump_analyzer_callgraph;





  int x_flag_dump_analyzer_exploded_graph;





  int x_flag_dump_analyzer_exploded_nodes;





  int x_flag_dump_analyzer_exploded_nodes_2;





  int x_flag_dump_analyzer_exploded_nodes_3;





  int x_flag_dump_analyzer_state_purge;





  int x_flag_dump_analyzer_stderr;





  int x_flag_dump_analyzer_supergraph;





  const char *x_flag_dump_final_insns;





  int x_flag_dump_fortran_global;





  int x_flag_dump_fortran_optimized;





  int x_flag_dump_fortran_original;





  const char *x_flag_dump_go_spec;





  int x_flag_dump_locations;





  int x_flag_dump_noaddr;





  int x_flag_dump_passes;





  int x_flag_dump_scos;





  int x_flag_dump_unnumbered;





  int x_flag_dump_unnumbered_links;





  int x_flag_dwarf2_cfi_asm;





  int x_flag_early_inlining;





  int x_flag_elide_constructors;





  int x_flag_elide_type;





  int x_flag_debug_only_used_symbols;





  int x_flag_eliminate_unused_debug_types;





  int x_flag_emit_class_debug_always;





  int x_flag_enforce_eh_specs;





  int x_flag_exceptions;





  enum excess_precision x_flag_excess_precision;





  int x_flag_expensive_optimizations;





  int x_flag_ext_numeric_literals;





  int x_flag_extern_tls_init;





  int x_flag_external_blas;





  int x_flag_f2c;





  int x_flag_fat_lto_objects;





  int x_flag_finite_loops;





  int x_flag_finite_math_only;





  int x_flag_fixed_line_length;





  int x_flag_float_store;





  int x_flag_forward_propagate;





  enum fp_contract_mode x_flag_fp_contract_mode;





  int x_flag_fp_int_builtin_inexact;





  int x_flag_free_line_length;





  int x_flag_frontend_loop_interchange;





  int x_flag_frontend_optimize;





  int x_flag_no_function_cse;





  int x_flag_function_sections;





  int x_flag_gcse;





  int x_flag_gcse_after_reload;





  int x_flag_gcse_las;





  int x_flag_gcse_lm;





  int x_flag_gcse_sm;





  int x_flag_gimple;





  int x_flag_no_gnu_keywords;





  int x_flag_next_runtime;





  int x_flag_tm;





  int x_flag_gnu_unique;





  int x_flag_gnu89_inline;





  int x_go_check_divide_overflow;





  int x_go_check_divide_zero;





  int x_go_compiling_runtime;





  int x_go_debug_escape_level;





  const char *x_go_debug_escape_hash;





  int x_go_debug_optimization;





  int x_flag_graphite;





  int x_flag_graphite_identity;





  int x_flag_guess_branch_prob;





  int x_flag_hoist_adjacent_loads;





  int x_flag_no_ident;





  int x_flag_if_conversion;





  int x_flag_if_conversion2;





  int x_flag_implement_inlines;





  int x_flag_implicit_inline_templates;





  int x_flag_implicit_none;





  int x_flag_implicit_templates;





  int x_flag_indirect_inlining;





  int x_flag_inhibit_size_directive;





  int x_flag_init_derived;





  enum gfc_init_local_real x_flag_init_real;





  int x_flag_no_inline;





  int x_flag_inline_arg_packing;





  int x_flag_inline_atomics;





  int x_flag_inline_functions;





  int x_flag_inline_functions_called_once;





  int x_flag_inline_matmul_limit;





  int x_flag_inline_small_functions;





  int x_flag_instrument_function_entry_exit;





  int x_flag_integer4_kind;





  int x_flag_invariants;





  int x_flag_ipa_bit_cp;





  int x_flag_ipa_cp;





  int x_flag_ipa_cp_clone;





  int x_flag_ipa_icf;





  int x_flag_ipa_icf_functions;





  int x_flag_ipa_icf_variables;





  int x_flag_ipa_profile;





  int x_flag_ipa_pta;





  int x_flag_ipa_pure_const;





  int x_flag_ipa_ra;





  int x_flag_ipa_reference;





  int x_flag_ipa_reference_addressable;





  int x_flag_ipa_sra;





  int x_flag_ipa_stack_alignment;





  int x_flag_ipa_vrp;





  enum ira_algorithm x_flag_ira_algorithm;





  int x_flag_ira_hoist_pressure;





  int x_flag_ira_loop_pressure;





  enum ira_region x_flag_ira_region;





  int x_flag_ira_share_save_slots;





  int x_flag_ira_share_spill_slots;





  int x_flag_ira_verbose;





  int x_flag_isolate_erroneous_paths_attribute;





  int x_flag_isolate_erroneous_paths_dereference;





  enum ivar_visibility x_default_ivar_visibility;





  int x_flag_ivopts;





  int x_flag_jump_tables;





  int x_flag_keep_gc_roots_live;





  int x_flag_keep_inline_dllexport;





  int x_flag_keep_inline_functions;





  int x_flag_keep_static_consts;





  int x_flag_keep_static_functions;





  int x_flag_large_source_files;





  int x_flag_lax_vector_conversions;





  int x_flag_leading_underscore;





  int x_flag_lifetime_dse;





  int x_flag_limit_function_alignment;





  enum lto_linker_output x_flag_lto_linker_output;





  enum live_patching_level x_flag_live_patching;





  int x_flag_live_range_shrinkage;





  int x_flag_local_ivars;





  int x_flag_loop_interchange;





  int x_flag_loop_nest_optimize;





  int x_flag_loop_parallelize_all;





  int x_flag_unroll_jam;





  int x_flag_lra_remat;





  int x_flag_lto_compression_level;





  enum lto_partition_model x_flag_lto_partition;





  int x_flag_lto_report;





  int x_flag_lto_report_wpa;





  const char *x_flag_lto;





  int x_flag_ltrans;





  const char *x_ltrans_output_list;





  int x_flag_errno_math;





  int x_flag_max_array_constructor;





  int x_flag_max_errors;





  int x_flag_max_stack_var_size;





  int x_flag_max_subrecord_length;





  int x_mem_report;





  int x_mem_report_wpa;





  int x_flag_merge_constants;





  int x_flag_merge_debug_strings;





  int x_flag_module_private;





  int x_flag_moduleinfo;





  int x_flag_modulo_sched;





  int x_flag_modulo_sched_allow_regmoves;





  int x_flag_move_loop_invariants;





  int x_flag_ms_extensions;





  int x_flag_new_inheriting_ctors;





  int x_flag_new_ttp;





  int x_flag_nil_receivers;





  int x_flag_non_call_exceptions;





  int x_flag_no_nonansi_builtin;





  int x_flag_nothrow_opt;





  int x_flag_objc_abi;





  int x_flag_objc_call_cxx_cdtors;





  int x_flag_objc_direct_dispatch;





  int x_flag_objc_exceptions;





  int x_flag_objc_gc;





  int x_flag_objc_nilcheck;





  int x_flag_objc_sjlj_exceptions;





  int x_flag_objc1_only;





  enum offload_abi x_flag_offload_abi;





  int x_flag_omit_frame_pointer;





  int x_flag_openacc;





  const char *x_flag_openacc_dims;





  int x_flag_openmp;





  int x_flag_openmp_simd;





  int x_flag_opt_info;





  int x_flag_optimize_sibling_calls;





  int x_flag_optimize_strlen;





  int x_flag_pack_derived;





  int x_flag_pack_struct;





  int x_flag_pad_source;





  int x_flag_partial_inlining;





  int x_flag_pcc_struct_return;





  int x_flag_peel_loops;





  int x_flag_no_peephole;





  int x_flag_peephole2;





  int x_flag_permissive;





  enum permitted_flt_eval_methods x_flag_permitted_flt_eval_methods;





  int x_flag_plan9_extensions;





  int x_flag_plt;





  int x_post_ipa_mem_report;





  int x_flag_postconditions;





  const char *x_flag_pre_include;





  int x_pre_ipa_mem_report;





  int x_flag_preconditions;





  int x_flag_predictive_commoning;





  int x_flag_prefetch_loop_arrays;





  int x_flag_pretty_templates;





  int x_flag_printf_return_value;





  int x_profile_flag;





  int x_profile_abs_path_flag;





  int x_profile_arc_flag;





  int x_flag_profile_correction;





  const char *x_profile_data_prefix;





  const char *x_flag_profile_exclude_files;





  const char *x_flag_profile_filter_files;





  const char *x_profile_note_location;





  int x_flag_profile_partial_training;





  const char *x_profile_prefix_path;





  int x_flag_profile_reorder_functions;





  int x_profile_report;





  enum profile_reproducibility x_flag_profile_reproducible;





  enum profile_update x_flag_profile_update;





  int x_flag_profile_use;





  int x_flag_profile_values;





  int x_flag_protect_parens;





  int x_flag_range_check;





  int x_flag_real4_kind;





  int x_flag_real8_kind;





  int x_flag_realloc_lhs;





  int x_flag_reciprocal_math;





  int x_flag_record_gcc_switches;





  int x_flag_record_marker;





  int x_flag_recursive;





  int x_flag_ree;





  int x_flag_rename_registers;





  int x_flag_reorder_blocks;





  enum reorder_blocks_algorithm x_flag_reorder_blocks_algorithm;





  int x_flag_reorder_blocks_and_partition;





  int x_flag_reorder_functions;





  int x_flag_repack_arrays;





  int x_flag_replace_objc_classes;





  int x_flag_report_bug;





  int x_go_require_return_statement;





  int x_flag_rerun_cse_after_loop;





  int x_flag_resched_modulo_sched;





  int x_flag_rounding_math;





  int x_flag_rtti;





  int x_flag_sanitize_address_use_after_scope;





  int x_flag_sanitize_undefined_trap_on_error;





  int x_flag_save_optimization_record;





  int x_flag_sched_critical_path_heuristic;





  int x_flag_sched_dep_count_heuristic;





  int x_flag_sched_group_heuristic;





  int x_flag_schedule_interblock;





  int x_flag_sched_last_insn_heuristic;





  int x_flag_sched_pressure;





  int x_flag_sched_rank_heuristic;





  int x_flag_schedule_speculative;





  int x_flag_sched_spec_insn_heuristic;





  int x_flag_schedule_speculative_load;





  int x_flag_schedule_speculative_load_dangerous;





  int x_flag_sched_stalled_insns;





  int x_flag_sched_stalled_insns_dep;





  int x_sched_verbose_param;





  int x_flag_sched2_use_superblocks;





  int x_flag_schedule_fusion;





  int x_flag_schedule_insns;





  int x_flag_schedule_insns_after_reload;





  int x_flag_second_underscore;





  int x_flag_section_anchors;





  int x_flag_sel_sched_pipelining;





  int x_flag_sel_sched_pipelining_outer_loops;





  int x_flag_sel_sched_reschedule_pipelined;





  int x_flag_selective_scheduling;





  int x_flag_selective_scheduling2;





  const char *x_flag_self_test;





  int x_flag_semantic_interposition;





  int x_flag_short_enums;





  int x_flag_short_wchar;





  int x_flag_show_column;





  int x_flag_shrink_wrap;





  int x_flag_shrink_wrap_separate;





  int x_flag_sign_zero;





  int x_flag_signaling_nans;





  int x_flag_signed_bitfields;





  int x_flag_signed_char;





  int x_flag_signed_zeros;





  enum vect_cost_model x_flag_simd_cost_model;





  int x_flag_single_precision_constant;





  int x_flag_sized_deallocation;





  int x_flag_split_ivs_in_unroller;





  int x_flag_split_loops;





  int x_flag_split_paths;





  int x_flag_split_stack;





  int x_flag_split_wide_types;





  int x_flag_split_wide_types_early;





  int x_flag_ssa_backprop;





  int x_flag_ssa_phiopt;





  enum scalar_storage_order_kind x_default_sso;





  int x_flag_stack_arrays;





  int x_flag_stack_clash_protection;





  int x_flag_stack_protect;





  enum stack_reuse_level x_flag_stack_reuse;





  int x_flag_stack_usage;





  int x_flag_detailed_statistics;





  int x_flag_stdarg_opt;





  int x_flag_store_merging;





  int x_flag_strict_aliasing;





  int x_flag_strict_enums;





  int x_flag_strict_volatile_bitfields;





  int x_flag_strong_eval_order;





  int x_flag_switch_errors;





  int x_flag_sync_libcalls;





  int x_flag_syntax_only;





  int x_flag_tail_call_workaround;





  int x_template_backtrace_limit;





  int x_flag_test_coverage;





  int x_flag_test_forall_temp;





  int x_flag_thread_jumps;





  int x_flag_threadsafe_statics;





  int x_time_report;





  int x_time_report_details;





  enum tls_model x_flag_tls_default;





  int x_flag_toplevel_reorder;





  int x_flag_tracer;





  int x_flag_trampolines;





  int x_flag_trapping_math;





  int x_flag_trapv;





  int x_flag_tree_bit_ccp;





  int x_flag_tree_builtin_call_dce;





  int x_flag_tree_ccp;





  int x_flag_tree_ch;





  int x_flag_tree_coalesce_vars;





  int x_flag_tree_copy_prop;





  int x_flag_tree_cselim;





  int x_flag_tree_dce;





  int x_flag_tree_dom;





  int x_flag_tree_dse;





  int x_flag_tree_forwprop;





  int x_flag_tree_fre;





  int x_flag_tree_loop_distribute_patterns;





  int x_flag_tree_loop_distribution;





  int x_flag_tree_loop_if_convert;





  int x_flag_tree_loop_im;





  int x_flag_tree_loop_ivcanon;





  int x_flag_tree_loop_optimize;





  int x_flag_tree_loop_vectorize;





  int x_flag_tree_live_range_split;





  int x_flag_tree_parallelize_loops;





  int x_flag_tree_partial_pre;





  int x_flag_tree_phiprop;





  int x_flag_tree_pre;





  int x_flag_tree_pta;





  int x_flag_tree_reassoc;





  int x_flag_tree_scev_cprop;





  int x_flag_tree_sink;





  int x_flag_tree_slp_vectorize;





  int x_flag_tree_slsr;





  int x_flag_tree_sra;





  int x_flag_tree_switch_conversion;





  int x_flag_tree_tail_merge;





  int x_flag_tree_ter;





  int x_flag_tree_vrp;





  int x_flag_unconstrained_commons;





  int x_flag_underscoring;





  int x_flag_unit_at_a_time;





  int x_flag_unroll_all_loops;





  int x_flag_cunroll_grow_size;





  int x_flag_unroll_loops;





  int x_flag_unsafe_math_optimizations;





  int x_flag_unswitch_loops;





  int x_flag_unwind_tables;





  int x_flag_use_cxa_atexit;





  int x_flag_use_cxa_get_exception_ptr;





  int x_flag_use_linker_plugin;





  int x_flag_var_tracking;





  int x_flag_var_tracking_assignments;





  int x_flag_var_tracking_assignments_toggle;





  int x_flag_var_tracking_uninit;





  int x_flag_variable_expansion_in_unroller;





  enum vect_cost_model x_flag_vect_cost_model;





  int x_flag_verbose_asm;





  int x_flag_version_loops_for_strides;





  int x_flag_visibility_ms_compat;





  enum symbol_visibility x_default_visibility;





  int x_flag_value_profile_transformations;





  enum vtv_priority x_flag_vtable_verify;





  int x_flag_vtv_counts;





  int x_flag_vtv_debug;





  int x_flag_weak;





  int x_flag_web;





  int x_flag_whole_program;





  int x_flag_working_directory;





  const char *x_flag_wpa;





  int x_flag_wrapv;





  int x_flag_wrapv_pointer;





  int x_flag_zero_initialized_in_bss;





  int x_flag_zero_link;





  int x_dwarf2out_as_loc_support;





  int x_dwarf2out_as_locview_support;





  int x_debug_column_info;





  int x_flag_describe_dies;





  int x_dwarf_version;





  int x_flag_gen_declaration;





  int x_debug_generate_pub_sections;





  int x_flag_lto_gimple_stats;





  int x_debug_inline_points;





  int x_debug_internal_reset_location_views;





  int x_dwarf_record_gcc_switches;





  int x_dwarf_split_debug_info;





  int x_debug_nonbind_markers_p;





  int x_dwarf_strict;





  int x_flag_gtoggle;





  int x_debug_variable_location_views;





  int x_flag_lto_dump_tool_help;





  const char *x_imultiarch;





  const char *x_plugindir_string;





  int x_flag_lto_dump_list;





  enum calling_abi x_ix86_abi;





  enum pmode x_ix86_pmode;





  enum ix86_align_data x_ix86_align_data_type;





  int x_flag_android;





  const char *x_ix86_arch_string;





  enum asm_dialect x_ix86_asm_dialect;





  int x_linux_libc;





  int x_ix86_branch_cost;





  int x_flag_cet_switch;





  enum cmodel x_ix86_cmodel;





  int x_flag_dispatch_scheduler;





  int x_ix86_dump_tunes;





  int x_flag_fentry;





  const char *x_fentry_name;





  const char *x_fentry_section;





  int x_ix86_force_drap;





  int x_flag_force_indirect_call;





  enum fpmath_unit x_ix86_fpmath;





  enum indirect_branch x_ix86_function_return;





  int x_ix86_incoming_stack_boundary_arg;





  int x_ix86_indirect_branch_register;





  enum indirect_branch x_ix86_indirect_branch;





  enum instrument_return x_ix86_instrument_return;





  int x_ix86_section_threshold;





  int x_flag_manual_endbr;





  const char *x_ix86_tune_memcpy_strategy;





  const char *x_ix86_tune_memset_strategy;





  int x_ix86_tune_no_default;





  int x_flag_nop_mcount;





  enum prefer_vector_width x_prefer_vector_width_type;





  int x_ix86_preferred_stack_boundary_arg;





  const char *x_ix86_recip_name;





  int x_flag_record_mcount;





  int x_ix86_flag_record_return;





  int x_ix86_regparm;





  int x_flag_skip_rax_setup;





  int x_ix86_sse2avx;





  const char *x_ix86_stack_protector_guard_offset_str;





  const char *x_ix86_stack_protector_guard_reg_str;





  const char *x_ix86_stack_protector_guard_symbol_str;





  enum stack_protector_guard x_ix86_stack_protector_guard;





  int x_ix86_force_align_arg_pointer;





  enum stringop_alg x_ix86_stringop_alg;





  enum tls_dialect x_ix86_tls_dialect;





  const char *x_ix86_tune_ctrl_string;





  const char *x_ix86_tune_string;





  enum ix86_veclibabi x_ix86_veclibabi_type;





  int x_flag_lto_name_sort;





  const char *x_asm_file_name;





  int x_flag_lto_dump_objects;





  int x_pass_exit_codes;





  int x_flag_pedantic_errors;





  int x_use_pipes;





  const char *x_print_file_name;





  int x_print_multi_directory;





  int x_print_multi_lib;





  int x_print_multi_os_directory;





  int x_print_multiarch;





  const char *x_print_prog_name;





  int x_print_search_dirs;





  int x_print_sysroot;





  int x_print_sysroot_headers_suffix;





  int x_flag_lto_print_value;





  int x_quiet_flag;





  int x_flag_lto_reverse_sort;





  int x_flag_lto_size_sort;





  const char *x_flag_lto_dump_symbol;





  int x_report_times;





  int x_flag_lto_tree_stats;





  int x_flag_lto_dump_type_stats;





  int x_flag_undef;





  int x_verbose_flag;





  int x_version_flag;





  int x_inhibit_warnings;





  const char *x_wrapper_string;



  int x_VAR_malign_functions_;



  int x_VAR_malign_jumps_;



  int x_VAR_malign_loops_;



  int x_VAR_mmitigate_rop;



  int x_VAR_mmpx;



  int x_VAR_mpc32;



  int x_VAR_mpc64;



  int x_VAR_mpc80;



  int x_VAR_mpcommit;



  bool frontend_set_flag_associative_math;


  bool frontend_set_flag_cx_limited_range;


  bool frontend_set_flag_excess_precision;


  bool frontend_set_flag_finite_math_only;


  bool frontend_set_flag_errno_math;


  bool frontend_set_flag_reciprocal_math;


  bool frontend_set_flag_rounding_math;


  bool frontend_set_flag_signaling_nans;


  bool frontend_set_flag_signed_zeros;


  bool frontend_set_flag_trapping_math;


  bool frontend_set_flag_unsafe_math_optimizations;


};
extern struct gcc_options global_options;
extern const struct gcc_options global_options_init;
extern struct gcc_options global_options_set;







struct cl_optimization
{
  const char *x_str_align_functions;
  const char *x_str_align_jumps;
  const char *x_str_align_labels;
  const char *x_str_align_loops;
  int x_param_align_loop_iterations;
  int x_param_align_threshold;
  int x_param_asan_protect_allocas;
  int x_param_asan_instrument_reads;
  int x_param_asan_instrument_writes;
  int x_param_asan_instrumentation_with_call_threshold;
  int x_param_asan_memintrin;
  int x_param_asan_stack;
  int x_param_asan_use_after_return;
  int x_param_avg_loop_niter;
  int x_param_avoid_fma_max_bits;
  int x_param_builtin_expect_probability;
  int x_param_builtin_string_cmp_inline_length;
  int x_param_case_values_threshold;
  int x_param_comdat_sharing_probability;
  int x_param_dse_max_alias_queries_per_store;
  int x_param_dse_max_object_size;
  int x_param_early_inlining_insns;
  int x_param_fsm_maximum_phi_arguments;
  int x_param_fsm_scale_path_blocks;
  int x_param_fsm_scale_path_stmts;
  int x_param_gcse_after_reload_critical_fraction;
  int x_param_gcse_after_reload_partial_fraction;
  int x_param_gcse_cost_distance_ratio;
  int x_param_gcse_unrestricted_cost;
  int x_param_graphite_max_arrays_per_scop;
  int x_param_graphite_max_nb_scop_params;
  int x_param_inline_heuristics_hint_percent;
  int x_param_inline_min_speedup;
  int x_param_inline_unit_growth;
  int x_param_ipa_cp_eval_threshold;
  int x_param_ipa_cp_loop_hint_bonus;
  int x_param_ipa_cp_max_recursive_depth;
  int x_param_ipa_cp_min_recursive_probability;
  int x_param_ipa_cp_recursion_penalty;
  int x_param_ipa_cp_single_call_penalty;
  int x_param_ipa_cp_unit_growth;
  int x_param_ipa_cp_value_list_size;
  int x_param_ipa_max_aa_steps;
  int x_param_ipa_max_agg_items;
  int x_param_ipa_max_param_expr_ops;
  int x_param_ipa_max_switch_predicate_bounds;
  int x_param_ipa_sra_max_replacements;
  int x_param_ipa_sra_ptr_growth_factor;
  int x_param_ira_loop_reserved_regs;
  int x_param_ira_max_conflict_table_size;
  int x_param_ira_max_loops_num;
  int x_param_iv_always_prune_cand_set_bound;
  int x_param_iv_consider_all_candidates_bound;
  int x_param_iv_max_considered_uses;
  int x_param_jump_table_max_growth_ratio_for_size;
  int x_param_jump_table_max_growth_ratio_for_speed;
  int x_param_l1_cache_line_size;
  int x_param_l1_cache_size;
  int x_param_l2_cache_size;
  int x_param_large_function_growth;
  int x_param_large_function_insns;
  int x_param_stack_frame_growth;
  int x_param_large_stack_frame;
  int x_param_large_unit_insns;
  int x_param_lim_expensive;
  int x_param_loop_block_tile_size;
  int x_param_loop_interchange_max_num_stmts;
  int x_param_loop_interchange_stride_ratio;
  int x_param_loop_invariant_max_bbs_in_loop;
  int x_param_loop_max_datarefs_for_datadeps;
  int x_param_loop_versioning_max_inner_insns;
  int x_param_loop_versioning_max_outer_insns;
  int x_param_lra_inheritance_ebb_probability_cutoff;
  int x_param_lra_max_considered_reload_pseudos;
  int x_param_max_average_unrolled_insns;
  int x_param_max_combine_insns;
  int x_param_max_unroll_iterations;
  int x_param_max_completely_peel_times;
  int x_param_max_completely_peeled_insns;
  int x_param_max_crossjump_edges;
  int x_param_max_cse_insns;
  int x_param_max_cse_path_length;
  int x_param_max_cselib_memory_locations;
  int x_param_max_debug_marker_count;
  int x_param_max_delay_slot_insn_search;
  int x_param_max_delay_slot_live_search;
  int x_param_max_dse_active_local_stores;
  int x_param_early_inliner_max_iterations;
  int x_param_max_find_base_term_values;
  int x_param_max_fsm_thread_length;
  int x_param_max_fsm_thread_path_insns;
  int x_param_max_fsm_thread_paths;
  int x_param_max_gcse_insertion_ratio;
  int x_param_max_gcse_memory;
  int x_param_max_goto_duplication_insns;
  int x_param_max_grow_copy_bb_insns;
  int x_param_max_hoist_depth;
  int x_param_max_inline_insns_auto;
  int x_param_max_inline_insns_recursive_auto;
  int x_param_max_inline_insns_recursive;
  int x_param_max_inline_insns_single;
  int x_param_max_inline_insns_size;
  int x_param_max_inline_insns_small;
  int x_param_max_inline_recursive_depth_auto;
  int x_param_max_inline_recursive_depth;
  int x_param_max_isl_operations;
  int x_param_max_iterations_computation_cost;
  int x_param_max_iterations_to_track;
  int x_param_max_jump_thread_duplication_stmts;
  int x_param_max_last_value_rtl;
  int x_param_max_loop_header_insns;
  int x_param_max_modulo_backtrack_attempts;
  int x_param_max_partial_antic_length;
  int x_param_max_peel_branches;
  int x_param_max_peel_times;
  int x_param_max_peeled_insns;
  int x_param_max_pending_list_length;
  int x_param_max_pipeline_region_blocks;
  int x_param_max_pipeline_region_insns;
  int x_param_max_pow_sqrt_depth;
  int x_param_max_predicted_iterations;
  int x_param_max_reload_search_insns;
  int x_param_max_rtl_if_conversion_insns;
  int x_param_max_rtl_if_conversion_predictable_cost;
  int x_param_max_rtl_if_conversion_unpredictable_cost;
  int x_param_max_sched_extend_regions_iters;
  int x_param_max_sched_insn_conflict_delay;
  int x_param_max_sched_ready_insns;
  int x_param_max_sched_region_blocks;
  int x_param_max_sched_region_insns;
  int x_param_max_slsr_candidate_scan;
  int x_param_max_speculative_devirt_maydefs;
  int x_param_max_stores_to_merge;
  int x_param_max_stores_to_sink;
  int x_param_max_tail_merge_comparisons;
  int x_param_max_tail_merge_iterations;
  int x_param_max_tracked_strlens;
  int x_param_max_tree_if_conversion_phi_args;
  int x_param_max_unroll_times;
  int x_param_max_unrolled_insns;
  int x_param_max_unswitch_insns;
  int x_param_max_unswitch_level;
  int x_param_max_variable_expansions;
  int x_param_max_vartrack_expr_depth;
  int x_param_max_vartrack_reverse_op_size;
  int x_param_max_vartrack_size;
  int x_param_max_vrp_switch_assertions;
  int x_param_min_crossjump_insns;
  int x_param_min_inline_recursive_probability;
  int x_param_min_insn_to_prefetch_ratio;
  int x_param_min_loop_cond_split_prob;
  int x_param_min_size_for_stack_sharing;
  int x_param_min_spec_prob;
  int x_param_min_vect_loop_bound;
  int x_param_parloops_chunk_size;
  int x_param_parloops_min_per_thread;
  int x_param_parloops_schedule;
  int x_param_partial_inlining_entry_probability;
  int x_param_predictable_branch_outcome;
  int x_param_prefetch_dynamic_strides;
  int x_param_prefetch_latency;
  int x_param_prefetch_min_insn_to_mem_ratio;
  int x_param_prefetch_minimum_stride;
  int x_param_rpo_vn_max_loop_depth;
  int x_param_sccvn_max_alias_queries_per_access;
  int x_param_scev_max_expr_complexity;
  int x_param_scev_max_expr_size;
  int x_param_sched_autopref_queue_depth;
  int x_param_sched_mem_true_dep_cost;
  int x_param_sched_pressure_algorithm;
  int x_param_sched_spec_prob_cutoff;
  int x_param_sched_state_edge_prob_cutoff;
  int x_param_selsched_insns_to_rename;
  int x_param_selsched_max_lookahead;
  int x_param_selsched_max_sched_times;
  int x_param_simultaneous_prefetches;
  int x_param_sink_frequency_threshold;
  int x_param_slp_max_insns_in_bb;
  int x_param_sms_dfa_history;
  int x_param_sms_loop_average_count_threshold;
  int x_param_sms_max_ii_factor;
  int x_param_sms_min_sc;
  int x_param_sra_max_propagations;
  int x_param_sra_max_scalarization_size_size;
  int x_param_sra_max_scalarization_size_speed;
  int x_param_ssa_name_def_chain_limit;
  int x_param_ssp_buffer_size;
  int x_param_stack_clash_protection_guard_size;
  int x_param_stack_clash_protection_probe_interval;
  int x_param_store_merging_allow_unaligned;
  int x_param_store_merging_max_size;
  int x_param_switch_conversion_branch_ratio;
  int x_param_tm_max_aggregate_size;
  int x_param_tracer_dynamic_coverage_feedback;
  int x_param_tracer_dynamic_coverage;
  int x_param_tracer_max_code_growth;
  int x_param_tracer_min_branch_probability_feedback;
  int x_param_tracer_min_branch_probability;
  int x_param_tracer_min_branch_ratio;
  int x_param_tree_reassoc_width;
  int x_param_uninit_control_dep_attempts;
  int x_param_uninlined_function_insns;
  int x_param_uninlined_function_time;
  int x_param_uninlined_function_thunk_insns;
  int x_param_uninlined_function_thunk_time;
  int x_param_unlikely_bb_count_fraction;
  int x_param_unroll_jam_max_unroll;
  int x_param_unroll_jam_min_percent;
  int x_param_use_after_scope_direct_emission_threshold;
  int x_param_vect_epilogues_nomask;
  int x_param_vect_max_peeling_for_alignment;
  int x_param_vect_max_version_for_alias_checks;
  int x_param_vect_max_version_for_alignment_checks;
  int x_param_vect_partial_vector_usage;
  int x_flag_sched_stalled_insns;
  int x_flag_sched_stalled_insns_dep;
  int x_flag_tree_parallelize_loops;
  enum excess_precision x_flag_excess_precision;
  enum fp_contract_mode x_flag_fp_contract_mode;
  enum ira_algorithm x_flag_ira_algorithm;
  enum ira_region x_flag_ira_region;
  enum live_patching_level x_flag_live_patching;
  enum reorder_blocks_algorithm x_flag_reorder_blocks_algorithm;
  enum vect_cost_model x_flag_simd_cost_model;
  enum stack_reuse_level x_flag_stack_reuse;
  enum vect_cost_model x_flag_vect_cost_model;
  unsigned char x_optimize;
  unsigned char x_optimize_size;
  unsigned char x_optimize_debug;
  unsigned char x_optimize_fast;
  signed char x_warn_inline;
  signed char x_flag_aggressive_loop_optimizations;
  signed char x_flag_align_functions;
  signed char x_flag_align_jumps;
  signed char x_flag_align_labels;
  signed char x_flag_align_loops;
  signed char x_flag_allocation_dce;
  signed char x_flag_store_data_races;
  signed char x_flag_associative_math;
  signed char x_flag_assume_phsa;
  signed char x_flag_asynchronous_unwind_tables;
  signed char x_flag_auto_inc_dec;
  signed char x_flag_branch_on_count_reg;
  signed char x_flag_branch_probabilities;
  signed char x_flag_caller_saves;
  signed char x_flag_code_hoisting;
  signed char x_flag_combine_stack_adjustments;
  signed char x_flag_compare_elim_after_reload;
  signed char x_flag_conserve_stack;
  signed char x_flag_cprop_registers;
  signed char x_flag_crossjumping;
  signed char x_flag_cse_follow_jumps;
  signed char x_flag_cx_fortran_rules;
  signed char x_flag_cx_limited_range;
  signed char x_flag_dce;
  signed char x_flag_defer_pop;
  signed char x_flag_delayed_branch;
  signed char x_flag_delete_dead_exceptions;
  signed char x_flag_delete_null_pointer_checks;
  signed char x_flag_devirtualize;
  signed char x_flag_devirtualize_speculatively;
  signed char x_flag_dse;
  signed char x_flag_early_inlining;
  signed char x_flag_exceptions;
  signed char x_flag_expensive_optimizations;
  signed char x_flag_finite_loops;
  signed char x_flag_finite_math_only;
  signed char x_flag_float_store;
  signed char x_flag_forward_propagate;
  signed char x_flag_fp_int_builtin_inexact;
  signed char x_flag_no_function_cse;
  signed char x_flag_gcse;
  signed char x_flag_gcse_after_reload;
  signed char x_flag_gcse_las;
  signed char x_flag_gcse_lm;
  signed char x_flag_gcse_sm;
  signed char x_flag_graphite;
  signed char x_flag_graphite_identity;
  signed char x_flag_guess_branch_prob;
  signed char x_flag_hoist_adjacent_loads;
  signed char x_flag_if_conversion;
  signed char x_flag_if_conversion2;
  signed char x_flag_indirect_inlining;
  signed char x_flag_no_inline;
  signed char x_flag_inline_atomics;
  signed char x_flag_inline_functions;
  signed char x_flag_inline_functions_called_once;
  signed char x_flag_inline_small_functions;
  signed char x_flag_ipa_bit_cp;
  signed char x_flag_ipa_cp;
  signed char x_flag_ipa_cp_clone;
  signed char x_flag_ipa_icf;
  signed char x_flag_ipa_icf_functions;
  signed char x_flag_ipa_icf_variables;
  signed char x_flag_ipa_profile;
  signed char x_flag_ipa_pta;
  signed char x_flag_ipa_pure_const;
  signed char x_flag_ipa_ra;
  signed char x_flag_ipa_reference;
  signed char x_flag_ipa_reference_addressable;
  signed char x_flag_ipa_sra;
  signed char x_flag_ipa_stack_alignment;
  signed char x_flag_ipa_vrp;
  signed char x_flag_ira_hoist_pressure;
  signed char x_flag_ira_loop_pressure;
  signed char x_flag_ira_share_save_slots;
  signed char x_flag_ira_share_spill_slots;
  signed char x_flag_isolate_erroneous_paths_attribute;
  signed char x_flag_isolate_erroneous_paths_dereference;
  signed char x_flag_ivopts;
  signed char x_flag_jump_tables;
  signed char x_flag_keep_gc_roots_live;
  signed char x_flag_lifetime_dse;
  signed char x_flag_limit_function_alignment;
  signed char x_flag_live_range_shrinkage;
  signed char x_flag_loop_interchange;
  signed char x_flag_loop_nest_optimize;
  signed char x_flag_loop_parallelize_all;
  signed char x_flag_unroll_jam;
  signed char x_flag_lra_remat;
  signed char x_flag_errno_math;
  signed char x_flag_modulo_sched;
  signed char x_flag_modulo_sched_allow_regmoves;
  signed char x_flag_move_loop_invariants;
  signed char x_flag_non_call_exceptions;
  signed char x_flag_nothrow_opt;
  signed char x_flag_omit_frame_pointer;
  signed char x_flag_opt_info;
  signed char x_flag_optimize_sibling_calls;
  signed char x_flag_optimize_strlen;
  signed char x_flag_pack_struct;
  signed char x_flag_partial_inlining;
  signed char x_flag_peel_loops;
  signed char x_flag_no_peephole;
  signed char x_flag_peephole2;
  signed char x_flag_plt;
  signed char x_flag_predictive_commoning;
  signed char x_flag_prefetch_loop_arrays;
  signed char x_flag_printf_return_value;
  signed char x_flag_profile_partial_training;
  signed char x_flag_profile_reorder_functions;
  signed char x_flag_reciprocal_math;
  signed char x_flag_ree;
  signed char x_flag_pcc_struct_return;
  signed char x_flag_rename_registers;
  signed char x_flag_reorder_blocks;
  signed char x_flag_reorder_blocks_and_partition;
  signed char x_flag_reorder_functions;
  signed char x_flag_rerun_cse_after_loop;
  signed char x_flag_resched_modulo_sched;
  signed char x_flag_rounding_math;
  signed char x_flag_rtti;
  signed char x_flag_save_optimization_record;
  signed char x_flag_sched_critical_path_heuristic;
  signed char x_flag_sched_dep_count_heuristic;
  signed char x_flag_sched_group_heuristic;
  signed char x_flag_schedule_interblock;
  signed char x_flag_sched_last_insn_heuristic;
  signed char x_flag_sched_pressure;
  signed char x_flag_sched_rank_heuristic;
  signed char x_flag_schedule_speculative;
  signed char x_flag_sched_spec_insn_heuristic;
  signed char x_flag_schedule_speculative_load;
  signed char x_flag_schedule_speculative_load_dangerous;
  signed char x_flag_sched2_use_superblocks;
  signed char x_flag_schedule_fusion;
  signed char x_flag_schedule_insns;
  signed char x_flag_schedule_insns_after_reload;
  signed char x_flag_section_anchors;
  signed char x_flag_sel_sched_pipelining;
  signed char x_flag_sel_sched_pipelining_outer_loops;
  signed char x_flag_sel_sched_reschedule_pipelined;
  signed char x_flag_selective_scheduling;
  signed char x_flag_selective_scheduling2;
  signed char x_flag_short_enums;
  signed char x_flag_short_wchar;
  signed char x_flag_shrink_wrap;
  signed char x_flag_shrink_wrap_separate;
  signed char x_flag_signaling_nans;
  signed char x_flag_signed_zeros;
  signed char x_flag_single_precision_constant;
  signed char x_flag_split_ivs_in_unroller;
  signed char x_flag_split_loops;
  signed char x_flag_split_paths;
  signed char x_flag_split_wide_types;
  signed char x_flag_split_wide_types_early;
  signed char x_flag_ssa_backprop;
  signed char x_flag_ssa_phiopt;
  signed char x_flag_stack_clash_protection;
  signed char x_flag_stack_protect;
  signed char x_flag_stdarg_opt;
  signed char x_flag_store_merging;
  signed char x_flag_strict_aliasing;
  signed char x_flag_strict_enums;
  signed char x_flag_strict_volatile_bitfields;
  signed char x_flag_thread_jumps;
  signed char x_flag_threadsafe_statics;
  signed char x_flag_toplevel_reorder;
  signed char x_flag_tracer;
  signed char x_flag_trapping_math;
  signed char x_flag_trapv;
  signed char x_flag_tree_bit_ccp;
  signed char x_flag_tree_builtin_call_dce;
  signed char x_flag_tree_ccp;
  signed char x_flag_tree_ch;
  signed char x_flag_tree_coalesce_vars;
  signed char x_flag_tree_copy_prop;
  signed char x_flag_tree_cselim;
  signed char x_flag_tree_dce;
  signed char x_flag_tree_dom;
  signed char x_flag_tree_dse;
  signed char x_flag_tree_forwprop;
  signed char x_flag_tree_fre;
  signed char x_flag_tree_loop_distribute_patterns;
  signed char x_flag_tree_loop_distribution;
  signed char x_flag_tree_loop_if_convert;
  signed char x_flag_tree_loop_im;
  signed char x_flag_tree_loop_ivcanon;
  signed char x_flag_tree_loop_optimize;
  signed char x_flag_tree_loop_vectorize;
  signed char x_flag_tree_live_range_split;
  signed char x_flag_tree_partial_pre;
  signed char x_flag_tree_phiprop;
  signed char x_flag_tree_pre;
  signed char x_flag_tree_pta;
  signed char x_flag_tree_reassoc;
  signed char x_flag_tree_scev_cprop;
  signed char x_flag_tree_sink;
  signed char x_flag_tree_slp_vectorize;
  signed char x_flag_tree_slsr;
  signed char x_flag_tree_sra;
  signed char x_flag_tree_switch_conversion;
  signed char x_flag_tree_tail_merge;
  signed char x_flag_tree_ter;
  signed char x_flag_tree_vrp;
  signed char x_flag_unconstrained_commons;
  signed char x_flag_unroll_all_loops;
  signed char x_flag_cunroll_grow_size;
  signed char x_flag_unroll_loops;
  signed char x_flag_unsafe_math_optimizations;
  signed char x_flag_unswitch_loops;
  signed char x_flag_unwind_tables;
  signed char x_flag_var_tracking;
  signed char x_flag_var_tracking_assignments;
  signed char x_flag_var_tracking_assignments_toggle;
  signed char x_flag_var_tracking_uninit;
  signed char x_flag_variable_expansion_in_unroller;
  signed char x_flag_version_loops_for_strides;
  signed char x_flag_value_profile_transformations;
  signed char x_flag_web;
  signed char x_flag_wrapv;
  signed char x_flag_wrapv_pointer;
};


struct cl_target_option
{
  long x_ix86_isa_flags2_explicit;
  long x_ix86_isa_flags_explicit;
  const char *x_ix86_arch_string;
  const char *x_ix86_recip_name;
  const char *x_ix86_tune_ctrl_string;
  const char *x_ix86_tune_memcpy_strategy;
  const char *x_ix86_tune_memset_strategy;
  const char *x_ix86_tune_string;
  long x_ix86_stack_protector_guard_offset;
  addr_space_t x_ix86_stack_protector_guard_reg;
          int x_target_flags;
  long x_ix86_isa_flags;
  long x_ix86_isa_flags2;
  enum fpmath_unit x_ix86_fpmath;
          int x_ix86_target_flags;
  enum prefer_vector_width x_prefer_vector_width_type;
  enum asm_dialect x_ix86_asm_dialect;
  enum calling_abi x_ix86_abi;
  enum cmodel x_ix86_cmodel;
  enum ix86_veclibabi x_ix86_veclibabi_type;
  enum pmode x_ix86_pmode;
  enum stack_protector_guard x_ix86_stack_protector_guard;
  enum stringop_alg x_ix86_stringop_alg;
  enum tls_dialect x_ix86_tls_dialect;
  int x_ix86_branch_cost;
  int x_ix86_dump_tunes;
  int x_ix86_force_align_arg_pointer;
  int x_ix86_force_drap;
  int x_ix86_incoming_stack_boundary_arg;
  int x_ix86_preferred_stack_boundary_arg;
  int x_ix86_regparm;
  int x_ix86_section_threshold;
  int x_ix86_sse2avx;
  int x_ix86_tune_no_default;
  int x_recip_mask_explicit;
  int x_recip_mask;
  unsigned char arch;
  unsigned char arch_specified;
  unsigned char branch_cost;
  unsigned char prefetch_sse;
  unsigned char schedule;
  unsigned char tune;
  unsigned char tune_defaulted;
};



extern void cl_optimization_save (struct cl_optimization *, struct gcc_options *);


extern void cl_optimization_restore (struct gcc_options *, struct cl_optimization *);


extern void cl_optimization_print (FILE *, int, struct cl_optimization *);


extern void cl_optimization_print_diff (FILE *, int, cl_optimization *ptr1, cl_optimization *ptr2);


extern void cl_target_option_save (struct cl_target_option *, struct gcc_options *);


extern void cl_target_option_restore (struct gcc_options *, struct cl_target_option *);


extern void cl_target_option_print (FILE *, int, struct cl_target_option *);


extern void cl_target_option_print_diff (FILE *, int, cl_target_option *ptr1, cl_target_option *ptr2);


extern bool cl_target_option_eq (const struct cl_target_option *, const struct cl_target_option *);


extern void cl_target_option_free (struct cl_target_option *);


extern hashval_t cl_target_option_hash (const struct cl_target_option *);


extern hashval_t cl_optimization_hash (const struct cl_optimization *);


extern bool cl_optimization_option_eq (cl_optimization const *ptr1, cl_optimization const *ptr2);


extern void cl_optimization_option_free (cl_optimization *ptr1);


extern void cl_optimization_compare (gcc_options *ptr1, gcc_options *ptr2);



bool
common_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           const struct cl_decoded_option *decoded,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Ada_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
AdaSCIL_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
AdaWhy_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
BRIG_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
C_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
CXX_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
D_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Fortran_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
Go_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
LTO_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
LTODump_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
ObjC_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
bool
ObjCXX_handle_option_auto (struct gcc_options *opts,
                           struct gcc_options *opts_set,
                           size_t scode, const char *arg,
                           long value,
                           unsigned int lang_mask, int kind,
                           location_t loc,
                           const struct cl_option_handlers *handlers,
                           diagnostic_context *dc);
void cpp_handle_option_auto (const struct gcc_options * opts, size_t scode,
                             struct cpp_options * cpp_opts);
void init_global_opts_from_cpp(struct gcc_options * opts,
                               const struct cpp_options * cpp_opts);
# 8579 "./options.h"
enum opt_code
{
  OPT____ = 0,
# 8590 "./options.h"
  OPT__completion_ = 9,
# 8610 "./options.h"
  OPT__help = 29,
  OPT__help_ = 30,
# 8638 "./options.h"
  OPT__no_sysroot_suffix = 57,



  OPT__output_pch_ = 61,

  OPT__param_align_loop_iterations_ = 63,
  OPT__param_align_threshold_ = 64,
  OPT__param_analyzer_bb_explosion_factor_ = 65,
  OPT__param_analyzer_max_enodes_for_full_dump_ = 66,
  OPT__param_analyzer_max_enodes_per_program_point_ = 67,
  OPT__param_analyzer_max_recursion_depth_ = 68,
  OPT__param_analyzer_max_svalue_depth_ = 69,
  OPT__param_analyzer_min_snodes_for_call_summary_ = 70,
  OPT__param_asan_globals_ = 71,
  OPT__param_asan_instrument_allocas_ = 72,
  OPT__param_asan_instrument_reads_ = 73,
  OPT__param_asan_instrument_writes_ = 74,
  OPT__param_asan_instrumentation_with_call_threshold_ = 75,
  OPT__param_asan_memintrin_ = 76,
  OPT__param_asan_stack_ = 77,
  OPT__param_asan_use_after_return_ = 78,
  OPT__param_avg_loop_niter_ = 79,
  OPT__param_avoid_fma_max_bits_ = 80,
  OPT__param_balance_partitions_ = 81,
  OPT__param_builtin_expect_probability_ = 82,
  OPT__param_builtin_string_cmp_inline_length_ = 83,
  OPT__param_case_values_threshold_ = 84,
  OPT__param_comdat_sharing_probability_ = 85,
  OPT__param_cxx_max_namespaces_for_diagnostic_help_ = 86,
  OPT__param_dse_max_alias_queries_per_store_ = 87,
  OPT__param_dse_max_object_size_ = 88,
  OPT__param_early_inlining_insns_ = 89,
  OPT__param_fsm_maximum_phi_arguments_ = 90,
  OPT__param_fsm_scale_path_blocks_ = 91,
  OPT__param_fsm_scale_path_stmts_ = 92,
  OPT__param_gcse_after_reload_critical_fraction_ = 93,
  OPT__param_gcse_after_reload_partial_fraction_ = 94,
  OPT__param_gcse_cost_distance_ratio_ = 95,
  OPT__param_gcse_unrestricted_cost_ = 96,
  OPT__param_ggc_min_expand_ = 97,
  OPT__param_ggc_min_heapsize_ = 98,
  OPT__param_gimple_fe_computed_hot_bb_threshold_ = 99,
  OPT__param_graphite_allow_codegen_errors_ = 100,
  OPT__param_graphite_max_arrays_per_scop_ = 101,
  OPT__param_graphite_max_nb_scop_params_ = 102,
  OPT__param_hash_table_verification_limit_ = 103,
  OPT__param_hot_bb_count_fraction_ = 104,
  OPT__param_hot_bb_count_ws_permille_ = 105,
  OPT__param_hot_bb_frequency_fraction_ = 106,
  OPT__param_inline_heuristics_hint_percent_ = 107,
  OPT__param_inline_min_speedup_ = 108,
  OPT__param_inline_unit_growth_ = 109,
  OPT__param_integer_share_limit_ = 110,
  OPT__param_ipa_cp_eval_threshold_ = 111,
  OPT__param_ipa_cp_loop_hint_bonus_ = 112,
  OPT__param_ipa_cp_max_recursive_depth_ = 113,
  OPT__param_ipa_cp_min_recursive_probability_ = 114,
  OPT__param_ipa_cp_recursion_penalty_ = 115,
  OPT__param_ipa_cp_single_call_penalty_ = 116,
  OPT__param_ipa_cp_unit_growth_ = 117,
  OPT__param_ipa_cp_value_list_size_ = 118,
  OPT__param_ipa_max_aa_steps_ = 119,
  OPT__param_ipa_max_agg_items_ = 120,
  OPT__param_ipa_max_param_expr_ops_ = 121,
  OPT__param_ipa_max_switch_predicate_bounds_ = 122,
  OPT__param_ipa_sra_max_replacements_ = 123,
  OPT__param_ipa_sra_ptr_growth_factor_ = 124,
  OPT__param_ira_loop_reserved_regs_ = 125,
  OPT__param_ira_max_conflict_table_size_ = 126,
  OPT__param_ira_max_loops_num_ = 127,
  OPT__param_iv_always_prune_cand_set_bound_ = 128,
  OPT__param_iv_consider_all_candidates_bound_ = 129,
  OPT__param_iv_max_considered_uses_ = 130,
  OPT__param_jump_table_max_growth_ratio_for_size_ = 131,
  OPT__param_jump_table_max_growth_ratio_for_speed_ = 132,
  OPT__param_l1_cache_line_size_ = 133,
  OPT__param_l1_cache_size_ = 134,
  OPT__param_l2_cache_size_ = 135,
  OPT__param_large_function_growth_ = 136,
  OPT__param_large_function_insns_ = 137,
  OPT__param_large_stack_frame_growth_ = 138,
  OPT__param_large_stack_frame_ = 139,
  OPT__param_large_unit_insns_ = 140,
  OPT__param_lim_expensive_ = 141,
  OPT__param_logical_op_non_short_circuit_ = 142,
  OPT__param_loop_block_tile_size_ = 143,
  OPT__param_loop_interchange_max_num_stmts_ = 144,
  OPT__param_loop_interchange_stride_ratio_ = 145,
  OPT__param_loop_invariant_max_bbs_in_loop_ = 146,
  OPT__param_loop_max_datarefs_for_datadeps_ = 147,
  OPT__param_loop_versioning_max_inner_insns_ = 148,
  OPT__param_loop_versioning_max_outer_insns_ = 149,
  OPT__param_lra_inheritance_ebb_probability_cutoff_ = 150,
  OPT__param_lra_max_considered_reload_pseudos_ = 151,
  OPT__param_lto_max_partition_ = 152,
  OPT__param_lto_max_streaming_parallelism_ = 153,
  OPT__param_lto_min_partition_ = 154,
  OPT__param_lto_partitions_ = 155,
  OPT__param_max_average_unrolled_insns_ = 156,
  OPT__param_max_combine_insns_ = 157,
  OPT__param_max_completely_peel_loop_nest_depth_ = 158,
  OPT__param_max_completely_peel_times_ = 159,
  OPT__param_max_completely_peeled_insns_ = 160,
  OPT__param_max_crossjump_edges_ = 161,
  OPT__param_max_cse_insns_ = 162,
  OPT__param_max_cse_path_length_ = 163,
  OPT__param_max_cselib_memory_locations_ = 164,
  OPT__param_max_debug_marker_count_ = 165,
  OPT__param_max_delay_slot_insn_search_ = 166,
  OPT__param_max_delay_slot_live_search_ = 167,
  OPT__param_max_dse_active_local_stores_ = 168,
  OPT__param_max_early_inliner_iterations_ = 169,
  OPT__param_max_fields_for_field_sensitive_ = 170,
  OPT__param_max_find_base_term_values_ = 171,
  OPT__param_max_fsm_thread_length_ = 172,
  OPT__param_max_fsm_thread_path_insns_ = 173,
  OPT__param_max_fsm_thread_paths_ = 174,
  OPT__param_max_gcse_insertion_ratio_ = 175,
  OPT__param_max_gcse_memory_ = 176,
  OPT__param_max_goto_duplication_insns_ = 177,
  OPT__param_max_grow_copy_bb_insns_ = 178,
  OPT__param_max_hoist_depth_ = 179,
  OPT__param_max_inline_insns_auto_ = 180,
  OPT__param_max_inline_insns_recursive_auto_ = 181,
  OPT__param_max_inline_insns_recursive_ = 182,
  OPT__param_max_inline_insns_single_ = 183,
  OPT__param_max_inline_insns_size_ = 184,
  OPT__param_max_inline_insns_small_ = 185,
  OPT__param_max_inline_recursive_depth_auto_ = 186,
  OPT__param_max_inline_recursive_depth_ = 187,
  OPT__param_max_isl_operations_ = 188,
  OPT__param_max_iterations_computation_cost_ = 189,
  OPT__param_max_iterations_to_track_ = 190,
  OPT__param_max_jump_thread_duplication_stmts_ = 191,
  OPT__param_max_last_value_rtl_ = 192,
  OPT__param_max_loop_header_insns_ = 193,
  OPT__param_max_modulo_backtrack_attempts_ = 194,
  OPT__param_max_partial_antic_length_ = 195,
  OPT__param_max_peel_branches_ = 196,
  OPT__param_max_peel_times_ = 197,
  OPT__param_max_peeled_insns_ = 198,
  OPT__param_max_pending_list_length_ = 199,
  OPT__param_max_pipeline_region_blocks_ = 200,
  OPT__param_max_pipeline_region_insns_ = 201,
  OPT__param_max_pow_sqrt_depth_ = 202,
  OPT__param_max_predicted_iterations_ = 203,
  OPT__param_max_reload_search_insns_ = 204,
  OPT__param_max_rtl_if_conversion_insns_ = 205,
  OPT__param_max_rtl_if_conversion_predictable_cost_ = 206,
  OPT__param_max_rtl_if_conversion_unpredictable_cost_ = 207,
  OPT__param_max_sched_extend_regions_iters_ = 208,
  OPT__param_max_sched_insn_conflict_delay_ = 209,
  OPT__param_max_sched_ready_insns_ = 210,
  OPT__param_max_sched_region_blocks_ = 211,
  OPT__param_max_sched_region_insns_ = 212,
  OPT__param_max_slsr_cand_scan_ = 213,
  OPT__param_max_speculative_devirt_maydefs_ = 214,
  OPT__param_max_ssa_name_query_depth_ = 215,
  OPT__param_max_stores_to_merge_ = 216,
  OPT__param_max_stores_to_sink_ = 217,
  OPT__param_max_tail_merge_comparisons_ = 218,
  OPT__param_max_tail_merge_iterations_ = 219,
  OPT__param_max_tracked_strlens_ = 220,
  OPT__param_max_tree_if_conversion_phi_args_ = 221,
  OPT__param_max_unroll_times_ = 222,
  OPT__param_max_unrolled_insns_ = 223,
  OPT__param_max_unswitch_insns_ = 224,
  OPT__param_max_unswitch_level_ = 225,
  OPT__param_max_variable_expansions_in_unroller_ = 226,
  OPT__param_max_vartrack_expr_depth_ = 227,
  OPT__param_max_vartrack_reverse_op_size_ = 228,
  OPT__param_max_vartrack_size_ = 229,
  OPT__param_max_vrp_switch_assertions_ = 230,
  OPT__param_min_crossjump_insns_ = 231,
  OPT__param_min_inline_recursive_probability_ = 232,
  OPT__param_min_insn_to_prefetch_ratio_ = 233,
  OPT__param_min_loop_cond_split_prob_ = 234,
  OPT__param_min_nondebug_insn_uid_ = 235,
  OPT__param_min_size_for_stack_sharing_ = 236,
  OPT__param_min_spec_prob_ = 237,
  OPT__param_min_vect_loop_bound_ = 238,
  OPT__param_parloops_chunk_size_ = 239,
  OPT__param_parloops_min_per_thread_ = 240,
  OPT__param_parloops_schedule_ = 241,
  OPT__param_partial_inlining_entry_probability_ = 242,
  OPT__param_predictable_branch_outcome_ = 243,
  OPT__param_prefetch_dynamic_strides_ = 244,
  OPT__param_prefetch_latency_ = 245,
  OPT__param_prefetch_min_insn_to_mem_ratio_ = 246,
  OPT__param_prefetch_minimum_stride_ = 247,
  OPT__param_profile_func_internal_id_ = 248,
  OPT__param_promote_statics_ = 249,
  OPT__param_rpo_vn_max_loop_depth_ = 250,
  OPT__param_sccvn_max_alias_queries_per_access_ = 251,
  OPT__param_scev_max_expr_complexity_ = 252,
  OPT__param_scev_max_expr_size_ = 253,
  OPT__param_sched_autopref_queue_depth_ = 254,
  OPT__param_sched_mem_true_dep_cost_ = 255,
  OPT__param_sched_pressure_algorithm_ = 256,
  OPT__param_sched_spec_prob_cutoff_ = 257,
  OPT__param_sched_state_edge_prob_cutoff_ = 258,
  OPT__param_selsched_insns_to_rename_ = 259,
  OPT__param_selsched_max_lookahead_ = 260,
  OPT__param_selsched_max_sched_times_ = 261,
  OPT__param_simultaneous_prefetches_ = 262,
  OPT__param_sink_frequency_threshold_ = 263,
  OPT__param_slp_max_insns_in_bb_ = 264,
  OPT__param_sms_dfa_history_ = 265,
  OPT__param_sms_loop_average_count_threshold_ = 266,
  OPT__param_sms_max_ii_factor_ = 267,
  OPT__param_sms_min_sc_ = 268,
  OPT__param_sra_max_propagations_ = 269,
  OPT__param_sra_max_scalarization_size_Osize_ = 270,
  OPT__param_sra_max_scalarization_size_Ospeed_ = 271,
  OPT__param_ssa_name_def_chain_limit_ = 272,
  OPT__param_ssp_buffer_size_ = 273,
  OPT__param_stack_clash_protection_guard_size_ = 274,
  OPT__param_stack_clash_protection_probe_interval_ = 275,
  OPT__param_store_merging_allow_unaligned_ = 276,
  OPT__param_store_merging_max_size_ = 277,
  OPT__param_switch_conversion_max_branch_ratio_ = 278,
  OPT__param_tm_max_aggregate_size_ = 279,
  OPT__param_tracer_dynamic_coverage_feedback_ = 280,
  OPT__param_tracer_dynamic_coverage_ = 281,
  OPT__param_tracer_max_code_growth_ = 282,
  OPT__param_tracer_min_branch_probability_feedback_ = 283,
  OPT__param_tracer_min_branch_probability_ = 284,
  OPT__param_tracer_min_branch_ratio_ = 285,
  OPT__param_tree_reassoc_width_ = 286,
  OPT__param_tsan_distinguish_volatile_ = 287,
  OPT__param_tsan_instrument_func_entry_exit_ = 288,
  OPT__param_uninit_control_dep_attempts_ = 289,
  OPT__param_uninlined_function_insns_ = 290,
  OPT__param_uninlined_function_time_ = 291,
  OPT__param_uninlined_thunk_insns_ = 292,
  OPT__param_uninlined_thunk_time_ = 293,
  OPT__param_unlikely_bb_count_fraction_ = 294,
  OPT__param_unroll_jam_max_unroll_ = 295,
  OPT__param_unroll_jam_min_percent_ = 296,
  OPT__param_use_after_scope_direct_emission_threshold_ = 297,
  OPT__param_use_canonical_types_ = 298,
  OPT__param_vect_epilogues_nomask_ = 299,
  OPT__param_vect_max_peeling_for_alignment_ = 300,
  OPT__param_vect_max_version_for_alias_checks_ = 301,
  OPT__param_vect_max_version_for_alignment_checks_ = 302,
  OPT__param_vect_partial_vector_usage_ = 303,
# 8915 "./options.h"
  OPT__sysroot_ = 334,
  OPT__target_help = 335,
# 8926 "./options.h"
  OPT__version = 345,


  OPT_A = 348,
  OPT_B = 349,
  OPT_C = 350,
  OPT_CC = 351,
  OPT_D = 352,
  OPT_E = 353,
  OPT_F = 354,
  OPT_H = 355,
  OPT_Hd = 356,
  OPT_Hf = 357,
  OPT_I = 358,
  OPT_J = 359,
  OPT_L = 360,
  OPT_M = 361,
  OPT_MD = 362,
  OPT_MF = 363,
  OPT_MG = 364,
  OPT_MM = 365,
  OPT_MMD = 366,
  OPT_MP = 367,
  OPT_MQ = 368,
  OPT_MT = 369,
  OPT_N = 370,
  OPT_O = 371,
  OPT_Ofast = 372,
  OPT_Og = 373,
  OPT_Os = 374,
  OPT_P = 375,
  OPT_Q = 376,
  OPT_Qn = 377,
  OPT_Qy = 378,
  OPT_R = 379,
  OPT_S = 380,
  OPT_T = 381,
  OPT_Tbss = 382,
  OPT_Tbss_ = 383,
  OPT_Tdata = 384,
  OPT_Tdata_ = 385,
  OPT_Ttext = 386,
  OPT_Ttext_ = 387,
  OPT_U = 388,

  OPT_Wa_ = 390,
  OPT_Wabi = 391,
  OPT_Wabi_tag = 392,
  OPT_Wabi_ = 393,
  OPT_Wabsolute_value = 394,
  OPT_Waddress = 395,
  OPT_Waddress_of_packed_member = 396,
  OPT_Waggregate_return = 397,
  OPT_Waggressive_loop_optimizations = 398,
  OPT_Waliasing = 399,
  OPT_Walign_commons = 400,

  OPT_Waligned_new_ = 402,
  OPT_Wall = 403,
  OPT_Walloc_size_larger_than_ = 404,
  OPT_Walloc_zero = 405,
  OPT_Walloca = 406,
  OPT_Walloca_larger_than_ = 407,
  OPT_Wampersand = 408,
  OPT_Wanalyzer_double_fclose = 409,
  OPT_Wanalyzer_double_free = 410,
  OPT_Wanalyzer_exposure_through_output_file = 411,
  OPT_Wanalyzer_file_leak = 412,
  OPT_Wanalyzer_free_of_non_heap = 413,
  OPT_Wanalyzer_malloc_leak = 414,
  OPT_Wanalyzer_null_argument = 415,
  OPT_Wanalyzer_null_dereference = 416,
  OPT_Wanalyzer_possible_null_argument = 417,
  OPT_Wanalyzer_possible_null_dereference = 418,
  OPT_Wanalyzer_stale_setjmp_buffer = 419,
  OPT_Wanalyzer_tainted_array_index = 420,
  OPT_Wanalyzer_too_complex = 421,
  OPT_Wanalyzer_unsafe_call_within_signal_handler = 422,
  OPT_Wanalyzer_use_after_free = 423,
  OPT_Wanalyzer_use_of_pointer_in_stale_stack_frame = 424,
  OPT_Wargument_mismatch = 425,
  OPT_Warith_conversion = 426,
  OPT_Warray_bounds = 427,
  OPT_Warray_bounds_ = 428,
  OPT_Warray_temporaries = 429,
  OPT_Wassign_intercept = 430,

  OPT_Wattribute_alias_ = 432,
  OPT_Wattribute_warning = 433,
  OPT_Wattributes = 434,
  OPT_Wbad_function_cast = 435,
  OPT_Wbool_compare = 436,
  OPT_Wbool_operation = 437,
  OPT_Wbuiltin_declaration_mismatch = 438,
  OPT_Wbuiltin_macro_redefined = 439,
  OPT_Wc___compat = 440,

  OPT_Wc__11_compat = 442,
  OPT_Wc__14_compat = 443,
  OPT_Wc__17_compat = 444,

  OPT_Wc__20_compat = 446,

  OPT_Wc_binding_type = 448,
  OPT_Wc11_c2x_compat = 449,
  OPT_Wc90_c99_compat = 450,
  OPT_Wc99_c11_compat = 451,
  OPT_Wcannot_profile = 452,
  OPT_Wcast_align = 453,
  OPT_Wcast_align_strict = 454,
  OPT_Wcast_function_type = 455,
  OPT_Wcast_qual = 456,
  OPT_Wcast_result = 457,

  OPT_Wcatch_value_ = 459,
  OPT_Wchar_subscripts = 460,
  OPT_Wcharacter_truncation = 461,
  OPT_Wchkp = 462,
  OPT_Wclass_conversion = 463,
  OPT_Wclass_memaccess = 464,
  OPT_Wclobbered = 465,
  OPT_Wcomma_subscript = 466,
  OPT_Wcomment = 467,

  OPT_Wcompare_reals = 469,
  OPT_Wconditionally_supported = 470,
  OPT_Wconversion = 471,
  OPT_Wconversion_extra = 472,
  OPT_Wconversion_null = 473,
  OPT_Wcoverage_mismatch = 474,
  OPT_Wcpp = 475,
  OPT_Wctor_dtor_privacy = 476,
  OPT_Wdangling_else = 477,
  OPT_Wdate_time = 478,
  OPT_Wdeclaration_after_statement = 479,
  OPT_Wdelete_incomplete = 480,
  OPT_Wdelete_non_virtual_dtor = 481,
  OPT_Wdeprecated = 482,
  OPT_Wdeprecated_copy = 483,
  OPT_Wdeprecated_copy_dtor = 484,
  OPT_Wdeprecated_declarations = 485,
  OPT_Wdesignated_init = 486,
  OPT_Wdisabled_optimization = 487,
  OPT_Wdiscarded_array_qualifiers = 488,
  OPT_Wdiscarded_qualifiers = 489,
  OPT_Wdiv_by_zero = 490,
  OPT_Wdo_subscript = 491,
  OPT_Wdouble_promotion = 492,
  OPT_Wduplicate_decl_specifier = 493,
  OPT_Wduplicated_branches = 494,
  OPT_Wduplicated_cond = 495,
  OPT_Weffc__ = 496,
  OPT_Wempty_body = 497,
  OPT_Wendif_labels = 498,
  OPT_Wenum_compare = 499,
  OPT_Wenum_conversion = 500,
  OPT_Werror = 501,

  OPT_Werror_ = 503,
  OPT_Wexpansion_to_defined = 504,
  OPT_Wextra = 505,
  OPT_Wextra_semi = 506,
  OPT_Wfatal_errors = 507,
  OPT_Wfloat_conversion = 508,
  OPT_Wfloat_equal = 509,

  OPT_Wformat_contains_nul = 511,
  OPT_Wformat_diag = 512,
  OPT_Wformat_extra_args = 513,
  OPT_Wformat_nonliteral = 514,

  OPT_Wformat_overflow_ = 516,
  OPT_Wformat_security = 517,
  OPT_Wformat_signedness = 518,

  OPT_Wformat_truncation_ = 520,
  OPT_Wformat_y2k = 521,
  OPT_Wformat_zero_length = 522,
  OPT_Wformat_ = 523,
  OPT_Wframe_address = 524,
  OPT_Wframe_larger_than_ = 525,
  OPT_Wfree_nonheap_object = 526,
  OPT_Wfrontend_loop_interchange = 527,
  OPT_Wfunction_elimination = 528,

  OPT_Wif_not_aligned = 530,
  OPT_Wignored_attributes = 531,
  OPT_Wignored_qualifiers = 532,
  OPT_Wimplicit = 533,

  OPT_Wimplicit_fallthrough_ = 535,
  OPT_Wimplicit_function_declaration = 536,
  OPT_Wimplicit_int = 537,
  OPT_Wimplicit_interface = 538,
  OPT_Wimplicit_procedure = 539,

  OPT_Winaccessible_base = 541,
  OPT_Wincompatible_pointer_types = 542,
  OPT_Winherited_variadic_ctor = 543,
  OPT_Winit_list_lifetime = 544,
  OPT_Winit_self = 545,
  OPT_Winline = 546,
  OPT_Wint_conversion = 547,
  OPT_Wint_in_bool_context = 548,
  OPT_Wint_to_pointer_cast = 549,
  OPT_Winteger_division = 550,
  OPT_Wintrinsic_shadow = 551,
  OPT_Wintrinsics_std = 552,
  OPT_Winvalid_memory_model = 553,
  OPT_Winvalid_offsetof = 554,
  OPT_Winvalid_pch = 555,
  OPT_Wjump_misses_init = 556,
  OPT_Wl_ = 557,

  OPT_Wlarger_than_ = 559,
  OPT_Wline_truncation = 560,
  OPT_Wliteral_suffix = 561,
  OPT_Wlogical_not_parentheses = 562,
  OPT_Wlogical_op = 563,
  OPT_Wlong_long = 564,
  OPT_Wlto_type_mismatch = 565,
  OPT_Wmain = 566,
  OPT_Wmaybe_uninitialized = 567,
  OPT_Wmemset_elt_size = 568,
  OPT_Wmemset_transposed_args = 569,
  OPT_Wmisleading_indentation = 570,
  OPT_Wmismatched_tags = 571,
  OPT_Wmissing_attributes = 572,
  OPT_Wmissing_braces = 573,
  OPT_Wmissing_declarations = 574,
  OPT_Wmissing_field_initializers = 575,

  OPT_Wmissing_include_dirs = 577,

  OPT_Wmissing_parameter_type = 579,
  OPT_Wmissing_profile = 580,
  OPT_Wmissing_prototypes = 581,
  OPT_Wmudflap = 582,
  OPT_Wmultichar = 583,
  OPT_Wmultiple_inheritance = 584,
  OPT_Wmultistatement_macros = 585,
  OPT_Wnamespaces = 586,
  OPT_Wnarrowing = 587,
  OPT_Wnested_externs = 588,






  OPT_Wnoexcept = 595,
  OPT_Wnoexcept_type = 596,
  OPT_Wnon_template_friend = 597,
  OPT_Wnon_virtual_dtor = 598,
  OPT_Wnonnull = 599,
  OPT_Wnonnull_compare = 600,

  OPT_Wnormalized_ = 602,
  OPT_Wnull_dereference = 603,
  OPT_Wodr = 604,
  OPT_Wold_style_cast = 605,
  OPT_Wold_style_declaration = 606,
  OPT_Wold_style_definition = 607,
  OPT_Wopenmp_simd = 608,
  OPT_Woverflow = 609,
  OPT_Woverlength_strings = 610,
  OPT_Woverloaded_virtual = 611,
  OPT_Woverride_init = 612,
  OPT_Woverride_init_side_effects = 613,
  OPT_Woverwrite_recursive = 614,
  OPT_Wp_ = 615,
  OPT_Wpacked = 616,
  OPT_Wpacked_bitfield_compat = 617,
  OPT_Wpacked_not_aligned = 618,
  OPT_Wpadded = 619,
  OPT_Wparentheses = 620,
  OPT_Wpedantic = 621,
  OPT_Wpessimizing_move = 622,

  OPT_Wplacement_new_ = 624,
  OPT_Wpmf_conversions = 625,
  OPT_Wpointer_arith = 626,
  OPT_Wpointer_compare = 627,
  OPT_Wpointer_sign = 628,
  OPT_Wpointer_to_int_cast = 629,
  OPT_Wpragmas = 630,
  OPT_Wprio_ctor_dtor = 631,
  OPT_Wproperty_assign_default = 632,
  OPT_Wprotocol = 633,
  OPT_Wpsabi = 634,
  OPT_Wreal_q_constant = 635,
  OPT_Wrealloc_lhs = 636,
  OPT_Wrealloc_lhs_all = 637,
  OPT_Wredundant_decls = 638,
  OPT_Wredundant_move = 639,
  OPT_Wredundant_tags = 640,
  OPT_Wregister = 641,
  OPT_Wreorder = 642,
  OPT_Wrestrict = 643,
  OPT_Wreturn_local_addr = 644,
  OPT_Wreturn_type = 645,
  OPT_Wscalar_storage_order = 646,
  OPT_Wselector = 647,
  OPT_Wsequence_point = 648,
  OPT_Wshadow = 649,

  OPT_Wshadow_ivar = 651,

  OPT_Wshadow_compatible_local = 653,

  OPT_Wshadow_local = 655,
  OPT_Wshift_count_negative = 656,
  OPT_Wshift_count_overflow = 657,
  OPT_Wshift_negative_value = 658,

  OPT_Wshift_overflow_ = 660,
  OPT_Wsign_compare = 661,
  OPT_Wsign_conversion = 662,
  OPT_Wsign_promo = 663,
  OPT_Wsized_deallocation = 664,
  OPT_Wsizeof_array_argument = 665,
  OPT_Wsizeof_pointer_div = 666,
  OPT_Wsizeof_pointer_memaccess = 667,
  OPT_Wspeculative = 668,
  OPT_Wstack_protector = 669,
  OPT_Wstack_usage_ = 670,
  OPT_Wstrict_aliasing = 671,
  OPT_Wstrict_aliasing_ = 672,
  OPT_Wstrict_null_sentinel = 673,
  OPT_Wstrict_overflow = 674,
  OPT_Wstrict_overflow_ = 675,
  OPT_Wstrict_prototypes = 676,
  OPT_Wstrict_selector_match = 677,
  OPT_Wstring_compare = 678,

  OPT_Wstringop_overflow_ = 680,
  OPT_Wstringop_truncation = 681,
  OPT_Wsubobject_linkage = 682,
  OPT_Wsuggest_attribute_cold = 683,
  OPT_Wsuggest_attribute_const = 684,
  OPT_Wsuggest_attribute_format = 685,
  OPT_Wsuggest_attribute_malloc = 686,
  OPT_Wsuggest_attribute_noreturn = 687,
  OPT_Wsuggest_attribute_pure = 688,
  OPT_Wsuggest_final_methods = 689,
  OPT_Wsuggest_final_types = 690,
  OPT_Wsuggest_override = 691,
  OPT_Wsurprising = 692,
  OPT_Wswitch = 693,
  OPT_Wswitch_bool = 694,
  OPT_Wswitch_default = 695,
  OPT_Wswitch_enum = 696,
  OPT_Wswitch_outside_range = 697,
  OPT_Wswitch_unreachable = 698,
  OPT_Wsync_nand = 699,
  OPT_Wsynth = 700,
  OPT_Wsystem_headers = 701,
  OPT_Wtabs = 702,
  OPT_Wtarget_lifetime = 703,
  OPT_Wtautological_compare = 704,
  OPT_Wtemplates = 705,
  OPT_Wterminate = 706,
  OPT_Wtraditional = 707,
  OPT_Wtraditional_conversion = 708,
  OPT_Wtrampolines = 709,
  OPT_Wtrigraphs = 710,
  OPT_Wtype_limits = 711,
  OPT_Wundeclared_selector = 712,
  OPT_Wundef = 713,
  OPT_Wundefined_do_loop = 714,
  OPT_Wunderflow = 715,
  OPT_Wuninitialized = 716,
  OPT_Wunknown_pragmas = 717,


  OPT_Wunsuffixed_float_constants = 720,
  OPT_Wunused = 721,
  OPT_Wunused_but_set_parameter = 722,
  OPT_Wunused_but_set_variable = 723,

  OPT_Wunused_const_variable_ = 725,
  OPT_Wunused_dummy_argument = 726,
  OPT_Wunused_function = 727,
  OPT_Wunused_label = 728,
  OPT_Wunused_local_typedefs = 729,
  OPT_Wunused_macros = 730,
  OPT_Wunused_parameter = 731,
  OPT_Wunused_result = 732,
  OPT_Wunused_value = 733,
  OPT_Wunused_variable = 734,
  OPT_Wuse_without_only = 735,
  OPT_Wuseless_cast = 736,
  OPT_Wvarargs = 737,
  OPT_Wvariadic_macros = 738,
  OPT_Wvector_operation_performance = 739,
  OPT_Wvirtual_inheritance = 740,
  OPT_Wvirtual_move_assign = 741,
  OPT_Wvla = 742,
  OPT_Wvla_larger_than_ = 743,
  OPT_Wvolatile = 744,
  OPT_Wvolatile_register_var = 745,
  OPT_Wwrite_strings = 746,
  OPT_Wzero_as_null_pointer_constant = 747,
  OPT_Wzero_length_bounds = 748,
  OPT_Wzerotrip = 749,
  OPT_X = 750,
  OPT_Xassembler = 751,
  OPT_Xf = 752,
  OPT_Xlinker = 753,
  OPT_Xpreprocessor = 754,
  OPT_Z = 755,
  OPT_ansi = 756,
  OPT_aux_info = 757,

  OPT_c = 759,
  OPT_callgraph = 760,
  OPT_coverage = 761,
  OPT_cpp = 762,
  OPT_cpp_ = 763,
  OPT_d = 764,
  OPT_debuglib_ = 765,
  OPT_defaultlib_ = 766,
  OPT_defined_only = 767,
  OPT_demangle = 768,
  OPT_dstartfiles = 769,
  OPT_dump_body_ = 770,
  OPT_dump_level_ = 771,
  OPT_dumpbase = 772,
  OPT_dumpbase_ext = 773,
  OPT_dumpdir = 774,
  OPT_dumpfullversion = 775,
  OPT_dumpmachine = 776,
  OPT_dumpspecs = 777,
  OPT_dumpversion = 778,
  OPT_e = 779,
  OPT_export_dynamic = 780,
  OPT_fPIC = 781,
  OPT_fPIE = 782,
  OPT_fRTS_ = 783,
  OPT_fabi_compat_version_ = 784,
  OPT_fabi_version_ = 785,
  OPT_faccess_control = 786,
  OPT_fada_spec_parent_ = 787,
  OPT_faggressive_function_elimination = 788,
  OPT_faggressive_loop_optimizations = 789,
  OPT_falign_commons = 790,
  OPT_falign_functions = 791,
  OPT_falign_functions_ = 792,
  OPT_falign_jumps = 793,
  OPT_falign_jumps_ = 794,
  OPT_falign_labels = 795,
  OPT_falign_labels_ = 796,
  OPT_falign_loops = 797,
  OPT_falign_loops_ = 798,

  OPT_faligned_new_ = 800,
  OPT_fall_instantiations = 801,
  OPT_fall_intrinsics = 802,
  OPT_fall_virtual = 803,
  OPT_fallocation_dce = 804,
  OPT_fallow_argument_mismatch = 805,
  OPT_fallow_invalid_boz = 806,
  OPT_fallow_leading_underscore = 807,
  OPT_fallow_parameterless_variadic_functions = 808,
  OPT_fallow_store_data_races = 809,
  OPT_falt_external_templates = 810,
  OPT_fanalyzer = 811,
  OPT_fanalyzer_call_summaries = 812,
  OPT_fanalyzer_checker_ = 813,
  OPT_fanalyzer_fine_grained = 814,
  OPT_fanalyzer_show_duplicate_count = 815,
  OPT_fanalyzer_state_merge = 816,
  OPT_fanalyzer_state_purge = 817,
  OPT_fanalyzer_transitivity = 818,
  OPT_fanalyzer_verbose_edges = 819,
  OPT_fanalyzer_verbose_state_changes = 820,
  OPT_fanalyzer_verbosity_ = 821,




  OPT_fasan_shadow_offset_ = 826,
  OPT_fasm = 827,
  OPT_fassert = 828,
  OPT_fassociative_math = 829,
  OPT_fassume_phsa = 830,
  OPT_fasynchronous_unwind_tables = 831,
  OPT_fauto_inc_dec = 832,
  OPT_fauto_profile = 833,
  OPT_fauto_profile_ = 834,
  OPT_fautomatic = 835,
  OPT_fbackslash = 836,
  OPT_fbacktrace = 837,
  OPT_fblas_matmul_limit_ = 838,
  OPT_fbounds_check = 839,
  OPT_fbounds_check_ = 840,
  OPT_fbranch_count_reg = 841,
  OPT_fbranch_probabilities = 842,



  OPT_fbuilding_libgcc = 846,
  OPT_fbuilding_libphobos_tests = 847,
  OPT_fbuiltin = 848,
  OPT_fbuiltin_ = 849,
  OPT_fbuiltin_printf = 850,
  OPT_fc_prototypes = 851,
  OPT_fc_prototypes_external = 852,
  OPT_fcall_saved_ = 853,
  OPT_fcall_used_ = 854,
  OPT_fcaller_saves = 855,
  OPT_fcallgraph_info = 856,
  OPT_fcallgraph_info_ = 857,
  OPT_fcanonical_system_headers = 858,

  OPT_fcf_protection_ = 860,
  OPT_fchar8_t = 861,
  OPT_fcheck_array_temporaries = 862,

  OPT_fcheck_new = 864,
  OPT_fcheck_pointer_bounds = 865,
  OPT_fcheck_ = 866,
  OPT_fchecking = 867,
  OPT_fchecking_ = 868,
  OPT_fchkp_check_incomplete_type = 869,
  OPT_fchkp_check_read = 870,
  OPT_fchkp_check_write = 871,
  OPT_fchkp_first_field_has_own_bounds = 872,
  OPT_fchkp_flexible_struct_trailing_arrays = 873,
  OPT_fchkp_instrument_calls = 874,
  OPT_fchkp_instrument_marked_only = 875,
  OPT_fchkp_narrow_bounds = 876,
  OPT_fchkp_narrow_to_innermost_array = 877,
  OPT_fchkp_optimize = 878,
  OPT_fchkp_store_bounds = 879,
  OPT_fchkp_treat_zero_dynamic_size_as_infinite = 880,
  OPT_fchkp_use_fast_string_functions = 881,
  OPT_fchkp_use_nochk_string_functions = 882,
  OPT_fchkp_use_static_bounds = 883,
  OPT_fchkp_use_static_const_bounds = 884,
  OPT_fchkp_use_wrappers = 885,
  OPT_fchkp_zero_input_bounds_for_main = 886,

  OPT_fcoarray_ = 888,
  OPT_fcode_hoisting = 889,
  OPT_fcombine_stack_adjustments = 890,
  OPT_fcommon = 891,
  OPT_fcompare_debug = 892,
  OPT_fcompare_debug_second = 893,
  OPT_fcompare_debug_ = 894,
  OPT_fcompare_elim = 895,
  OPT_fconcepts = 896,
  OPT_fconcepts_diagnostics_depth_ = 897,
  OPT_fconcepts_ts = 898,
  OPT_fcond_mismatch = 899,

  OPT_fconserve_stack = 901,
  OPT_fconstant_string_class_ = 902,
  OPT_fconstexpr_cache_depth_ = 903,
  OPT_fconstexpr_depth_ = 904,
  OPT_fconstexpr_loop_limit_ = 905,
  OPT_fconstexpr_ops_limit_ = 906,
  OPT_fconvert_ = 907,
  OPT_fcoroutines = 908,
  OPT_fcprop_registers = 909,
  OPT_fcray_pointer = 910,
  OPT_fcrossjumping = 911,
  OPT_fcse_follow_jumps = 912,

  OPT_fcx_fortran_rules = 914,
  OPT_fcx_limited_range = 915,
  OPT_fd_lines_as_code = 916,
  OPT_fd_lines_as_comments = 917,
  OPT_fdata_sections = 918,
  OPT_fdbg_cnt_list = 919,
  OPT_fdbg_cnt_ = 920,
  OPT_fdce = 921,
  OPT_fdebug = 922,
  OPT_fdebug_cpp = 923,
  OPT_fdebug_prefix_map_ = 924,
  OPT_fdebug_types_section = 925,
  OPT_fdebug_ = 926,
  OPT_fdec = 927,
  OPT_fdec_blank_format_item = 928,
  OPT_fdec_char_conversions = 929,
  OPT_fdec_format_defaults = 930,
  OPT_fdec_include = 931,
  OPT_fdec_intrinsic_ints = 932,
  OPT_fdec_math = 933,
  OPT_fdec_static = 934,
  OPT_fdec_structure = 935,
  OPT_fdeclone_ctor_dtor = 936,

  OPT_fdefault_double_8 = 938,

  OPT_fdefault_integer_8 = 940,
  OPT_fdefault_real_10 = 941,
  OPT_fdefault_real_16 = 942,
  OPT_fdefault_real_8 = 943,
  OPT_fdefer_pop = 944,
  OPT_fdelayed_branch = 945,
  OPT_fdelete_dead_exceptions = 946,
  OPT_fdelete_null_pointer_checks = 947,
  OPT_fdevirtualize = 948,
  OPT_fdevirtualize_at_ltrans = 949,
  OPT_fdevirtualize_speculatively = 950,

  OPT_fdiagnostics_color_ = 952,
  OPT_fdiagnostics_column_origin_ = 953,
  OPT_fdiagnostics_column_unit_ = 954,
  OPT_fdiagnostics_format_ = 955,
  OPT_fdiagnostics_generate_patch = 956,
  OPT_fdiagnostics_minimum_margin_width_ = 957,
  OPT_fdiagnostics_parseable_fixits = 958,
  OPT_fdiagnostics_path_format_ = 959,
  OPT_fdiagnostics_plain_output = 960,
  OPT_fdiagnostics_show_caret = 961,
  OPT_fdiagnostics_show_cwe = 962,
  OPT_fdiagnostics_show_labels = 963,
  OPT_fdiagnostics_show_line_numbers = 964,
  OPT_fdiagnostics_show_location_ = 965,
  OPT_fdiagnostics_show_option = 966,
  OPT_fdiagnostics_show_path_depths = 967,
  OPT_fdiagnostics_show_template_tree = 968,
  OPT_fdiagnostics_urls_ = 969,
  OPT_fdirectives_only = 970,
  OPT_fdisable_ = 971,
  OPT_fdoc = 972,
  OPT_fdoc_dir_ = 973,
  OPT_fdoc_file_ = 974,
  OPT_fdoc_inc_ = 975,
  OPT_fdollar_ok = 976,
  OPT_fdollars_in_identifiers = 977,
  OPT_fdruntime = 978,
  OPT_fdse = 979,
  OPT_fdump_ = 980,
  OPT_fdump_ada_spec = 981,
  OPT_fdump_ada_spec_slim = 982,
  OPT_fdump_analyzer = 983,
  OPT_fdump_analyzer_callgraph = 984,
  OPT_fdump_analyzer_exploded_graph = 985,
  OPT_fdump_analyzer_exploded_nodes = 986,
  OPT_fdump_analyzer_exploded_nodes_2 = 987,
  OPT_fdump_analyzer_exploded_nodes_3 = 988,
  OPT_fdump_analyzer_state_purge = 989,
  OPT_fdump_analyzer_stderr = 990,
  OPT_fdump_analyzer_supergraph = 991,

  OPT_fdump_d_original = 993,
  OPT_fdump_final_insns = 994,
  OPT_fdump_final_insns_ = 995,
  OPT_fdump_fortran_global = 996,
  OPT_fdump_fortran_optimized = 997,
  OPT_fdump_fortran_original = 998,
  OPT_fdump_go_spec_ = 999,
  OPT_fdump_internal_locations = 1000,
  OPT_fdump_noaddr = 1001,

  OPT_fdump_passes = 1003,
  OPT_fdump_scos = 1004,
  OPT_fdump_unnumbered = 1005,
  OPT_fdump_unnumbered_links = 1006,
  OPT_fdwarf2_cfi_asm = 1007,
  OPT_fearly_inlining = 1008,
  OPT_felide_constructors = 1009,
  OPT_felide_type = 1010,

  OPT_feliminate_unused_debug_symbols = 1012,
  OPT_feliminate_unused_debug_types = 1013,
  OPT_femit_class_debug_always = 1014,
  OPT_femit_struct_debug_baseonly = 1015,
  OPT_femit_struct_debug_detailed_ = 1016,
  OPT_femit_struct_debug_reduced = 1017,
  OPT_fenable_ = 1018,
  OPT_fenforce_eh_specs = 1019,
  OPT_fenum_int_equiv = 1020,
  OPT_fexceptions = 1021,
  OPT_fexcess_precision_ = 1022,
  OPT_fexec_charset_ = 1023,
  OPT_fexpensive_optimizations = 1024,
  OPT_fext_numeric_literals = 1025,
  OPT_fextended_identifiers = 1026,
  OPT_fextern_tls_init = 1027,
  OPT_fexternal_blas = 1028,
  OPT_fexternal_templates = 1029,
  OPT_ff2c = 1030,
  OPT_ffast_math = 1031,
  OPT_ffat_lto_objects = 1032,
  OPT_ffile_prefix_map_ = 1033,
  OPT_ffinite_loops = 1034,
  OPT_ffinite_math_only = 1035,
  OPT_ffixed_ = 1036,
  OPT_ffixed_form = 1037,
  OPT_ffixed_line_length_ = 1038,
  OPT_ffixed_line_length_none = 1039,
  OPT_ffloat_store = 1040,
  OPT_ffor_scope = 1041,

  OPT_fforward_propagate = 1043,
  OPT_ffp_contract_ = 1044,
  OPT_ffp_int_builtin_inexact = 1045,
  OPT_ffpe_summary_ = 1046,
  OPT_ffpe_trap_ = 1047,
  OPT_ffree_form = 1048,
  OPT_ffree_line_length_ = 1049,
  OPT_ffree_line_length_none = 1050,
  OPT_ffreestanding = 1051,
  OPT_ffriend_injection = 1052,
  OPT_ffrontend_loop_interchange = 1053,
  OPT_ffrontend_optimize = 1054,
  OPT_ffunction_cse = 1055,
  OPT_ffunction_sections = 1056,
  OPT_fgcse = 1057,
  OPT_fgcse_after_reload = 1058,
  OPT_fgcse_las = 1059,
  OPT_fgcse_lm = 1060,
  OPT_fgcse_sm = 1061,
  OPT_fgimple = 1062,
  OPT_fgnat_encodings_ = 1063,
  OPT_fgnu_keywords = 1064,
  OPT_fgnu_runtime = 1065,
  OPT_fgnu_tm = 1066,
  OPT_fgnu_unique = 1067,
  OPT_fgnu89_inline = 1068,
  OPT_fgo_c_header_ = 1069,
  OPT_fgo_check_divide_overflow = 1070,
  OPT_fgo_check_divide_zero = 1071,
  OPT_fgo_compiling_runtime = 1072,
  OPT_fgo_debug_escape = 1073,
  OPT_fgo_debug_escape_hash_ = 1074,
  OPT_fgo_debug_optimization = 1075,
  OPT_fgo_dump_ = 1076,
  OPT_fgo_optimize_ = 1077,
  OPT_fgo_pkgpath_ = 1078,
  OPT_fgo_prefix_ = 1079,
  OPT_fgo_relative_import_path_ = 1080,
  OPT_fgraphite = 1081,
  OPT_fgraphite_identity = 1082,
  OPT_fguess_branch_probability = 1083,
  OPT_fguiding_decls = 1084,



  OPT_fhoist_adjacent_loads = 1088,
  OPT_fhonor_std = 1089,
  OPT_fhosted = 1090,
  OPT_fhuge_objects = 1091,
  OPT_fident = 1092,
  OPT_fif_conversion = 1093,
  OPT_fif_conversion2 = 1094,
  OPT_fignore_unknown_pragmas = 1095,
  OPT_fimplement_inlines = 1096,
  OPT_fimplicit_inline_templates = 1097,
  OPT_fimplicit_none = 1098,
  OPT_fimplicit_templates = 1099,
  OPT_findirect_inlining = 1100,
  OPT_finhibit_size_directive = 1101,
  OPT_finit_character_ = 1102,
  OPT_finit_derived = 1103,
  OPT_finit_integer_ = 1104,
  OPT_finit_local_zero = 1105,
  OPT_finit_logical_ = 1106,
  OPT_finit_real_ = 1107,
  OPT_finline = 1108,
  OPT_finline_arg_packing = 1109,
  OPT_finline_atomics = 1110,
  OPT_finline_functions = 1111,
  OPT_finline_functions_called_once = 1112,

  OPT_finline_limit_ = 1114,
  OPT_finline_matmul_limit_ = 1115,
  OPT_finline_small_functions = 1116,
  OPT_finput_charset_ = 1117,
  OPT_finstrument_functions = 1118,
  OPT_finstrument_functions_exclude_file_list_ = 1119,
  OPT_finstrument_functions_exclude_function_list_ = 1120,
  OPT_finteger_4_integer_8 = 1121,
  OPT_fintrinsic_modules_path = 1122,
  OPT_fintrinsic_modules_path_ = 1123,
  OPT_finvariants = 1124,
  OPT_fipa_bit_cp = 1125,
  OPT_fipa_cp = 1126,

  OPT_fipa_cp_clone = 1128,
  OPT_fipa_icf = 1129,
  OPT_fipa_icf_functions = 1130,
  OPT_fipa_icf_variables = 1131,

  OPT_fipa_profile = 1133,
  OPT_fipa_pta = 1134,
  OPT_fipa_pure_const = 1135,
  OPT_fipa_ra = 1136,
  OPT_fipa_reference = 1137,
  OPT_fipa_reference_addressable = 1138,
  OPT_fipa_sra = 1139,
  OPT_fipa_stack_alignment = 1140,

  OPT_fipa_vrp = 1142,
  OPT_fira_algorithm_ = 1143,
  OPT_fira_hoist_pressure = 1144,
  OPT_fira_loop_pressure = 1145,
  OPT_fira_region_ = 1146,
  OPT_fira_share_save_slots = 1147,
  OPT_fira_share_spill_slots = 1148,
  OPT_fira_verbose_ = 1149,
  OPT_fisolate_erroneous_paths_attribute = 1150,
  OPT_fisolate_erroneous_paths_dereference = 1151,
  OPT_fivar_visibility_ = 1152,
  OPT_fivopts = 1153,
  OPT_fjump_tables = 1154,
  OPT_fkeep_gc_roots_live = 1155,
  OPT_fkeep_inline_dllexport = 1156,
  OPT_fkeep_inline_functions = 1157,
  OPT_fkeep_static_consts = 1158,
  OPT_fkeep_static_functions = 1159,
  OPT_flabels_ok = 1160,
  OPT_flarge_source_files = 1161,
  OPT_flax_vector_conversions = 1162,
  OPT_fleading_underscore = 1163,
  OPT_flifetime_dse = 1164,
  OPT_flifetime_dse_ = 1165,
  OPT_flimit_function_alignment = 1166,
  OPT_flinker_output_ = 1167,

  OPT_flive_patching_ = 1169,
  OPT_flive_range_shrinkage = 1170,
  OPT_flocal_ivars = 1171,


  OPT_floop_interchange = 1174,
  OPT_floop_nest_optimize = 1175,

  OPT_floop_parallelize_all = 1177,

  OPT_floop_unroll_and_jam = 1179,
  OPT_flra_remat = 1180,
  OPT_flto = 1181,
  OPT_flto_compression_level_ = 1182,

  OPT_flto_partition_ = 1184,
  OPT_flto_report = 1185,
  OPT_flto_report_wpa = 1186,
  OPT_flto_ = 1187,
  OPT_fltrans = 1188,
  OPT_fltrans_output_list_ = 1189,
  OPT_fmacro_prefix_map_ = 1190,
  OPT_fmain = 1191,
  OPT_fmath_errno = 1192,
  OPT_fmax_array_constructor_ = 1193,
  OPT_fmax_errors_ = 1194,
  OPT_fmax_identifier_length_ = 1195,
  OPT_fmax_include_depth_ = 1196,
  OPT_fmax_stack_var_size_ = 1197,
  OPT_fmax_subrecord_length_ = 1198,
  OPT_fmem_report = 1199,
  OPT_fmem_report_wpa = 1200,
  OPT_fmerge_all_constants = 1201,
  OPT_fmerge_constants = 1202,
  OPT_fmerge_debug_strings = 1203,
  OPT_fmessage_length_ = 1204,
  OPT_fmodule_file_ = 1205,
  OPT_fmodule_private = 1206,
  OPT_fmoduleinfo = 1207,
  OPT_fmodulo_sched = 1208,
  OPT_fmodulo_sched_allow_regmoves = 1209,
  OPT_fmove_loop_invariants = 1210,
  OPT_fms_extensions = 1211,
  OPT_fmudflap = 1212,
  OPT_fmudflapir = 1213,
  OPT_fmudflapth = 1214,
  OPT_fname_mangling_version_ = 1215,
  OPT_fnew_abi = 1216,
  OPT_fnew_inheriting_ctors = 1217,
  OPT_fnew_ttp_matching = 1218,
  OPT_fnext_runtime = 1219,
  OPT_fnil_receivers = 1220,
  OPT_fnon_call_exceptions = 1221,
  OPT_fnonansi_builtins = 1222,
  OPT_fnonnull_objects = 1223,
  OPT_fnothrow_opt = 1224,
  OPT_fobjc_abi_version_ = 1225,
  OPT_fobjc_call_cxx_cdtors = 1226,
  OPT_fobjc_direct_dispatch = 1227,
  OPT_fobjc_exceptions = 1228,
  OPT_fobjc_gc = 1229,
  OPT_fobjc_nilcheck = 1230,
  OPT_fobjc_sjlj_exceptions = 1231,
  OPT_fobjc_std_objc1 = 1232,
  OPT_foffload_abi_ = 1233,
  OPT_foffload_ = 1234,
  OPT_fomit_frame_pointer = 1235,
  OPT_fonly_ = 1236,
  OPT_fopenacc = 1237,
  OPT_fopenacc_dim_ = 1238,
  OPT_fopenmp = 1239,
  OPT_fopenmp_simd = 1240,
  OPT_foperator_names = 1241,
  OPT_fopt_info = 1242,
  OPT_fopt_info_ = 1243,

  OPT_foptimize_sibling_calls = 1245,
  OPT_foptimize_strlen = 1246,

  OPT_fpack_derived = 1248,
  OPT_fpack_struct = 1249,
  OPT_fpack_struct_ = 1250,
  OPT_fpad_source = 1251,
  OPT_fparallel_jobs_ = 1252,
  OPT_fpartial_inlining = 1253,
  OPT_fpatchable_function_entry_ = 1254,
  OPT_fpcc_struct_return = 1255,
  OPT_fpch_deps = 1256,
  OPT_fpch_preprocess = 1257,
  OPT_fpeel_loops = 1258,
  OPT_fpeephole = 1259,
  OPT_fpeephole2 = 1260,
  OPT_fpermissive = 1261,
  OPT_fpermitted_flt_eval_methods_ = 1262,
  OPT_fpic = 1263,
  OPT_fpie = 1264,
  OPT_fplan9_extensions = 1265,
  OPT_fplt = 1266,
  OPT_fplugin_arg_ = 1267,
  OPT_fplugin_ = 1268,
  OPT_fpost_ipa_mem_report = 1269,
  OPT_fpostconditions = 1270,
  OPT_fpre_include_ = 1271,
  OPT_fpre_ipa_mem_report = 1272,
  OPT_fpreconditions = 1273,
  OPT_fpredictive_commoning = 1274,
  OPT_fprefetch_loop_arrays = 1275,
  OPT_fpreprocessed = 1276,
  OPT_fpretty_templates = 1277,
  OPT_fprintf_return_value = 1278,
  OPT_fprofile = 1279,
  OPT_fprofile_abs_path = 1280,
  OPT_fprofile_arcs = 1281,
  OPT_fprofile_correction = 1282,
  OPT_fprofile_dir_ = 1283,
  OPT_fprofile_exclude_files_ = 1284,
  OPT_fprofile_filter_files_ = 1285,
  OPT_fprofile_generate = 1286,
  OPT_fprofile_generate_ = 1287,
  OPT_fprofile_note_ = 1288,
  OPT_fprofile_partial_training = 1289,
  OPT_fprofile_prefix_path_ = 1290,
  OPT_fprofile_reorder_functions = 1291,
  OPT_fprofile_report = 1292,
  OPT_fprofile_reproducible = 1293,
  OPT_fprofile_update_ = 1294,
  OPT_fprofile_use = 1295,
  OPT_fprofile_use_ = 1296,
  OPT_fprofile_values = 1297,
  OPT_fprotect_parens = 1298,
  OPT_frandom_seed = 1299,
  OPT_frandom_seed_ = 1300,
  OPT_frange_check = 1301,
  OPT_freal_4_real_10 = 1302,
  OPT_freal_4_real_16 = 1303,
  OPT_freal_4_real_8 = 1304,
  OPT_freal_8_real_10 = 1305,
  OPT_freal_8_real_16 = 1306,
  OPT_freal_8_real_4 = 1307,
  OPT_frealloc_lhs = 1308,
  OPT_freciprocal_math = 1309,
  OPT_frecord_gcc_switches = 1310,
  OPT_frecord_marker_4 = 1311,
  OPT_frecord_marker_8 = 1312,
  OPT_frecursive = 1313,
  OPT_free = 1314,
  OPT_freg_struct_return = 1315,

  OPT_frelease = 1317,
  OPT_frename_registers = 1318,
  OPT_freorder_blocks = 1319,
  OPT_freorder_blocks_algorithm_ = 1320,
  OPT_freorder_blocks_and_partition = 1321,
  OPT_freorder_functions = 1322,
  OPT_frepack_arrays = 1323,
  OPT_freplace_objc_classes = 1324,
  OPT_frepo = 1325,
  OPT_freport_bug = 1326,
  OPT_frequire_return_statement = 1327,
  OPT_frerun_cse_after_loop = 1328,

  OPT_freschedule_modulo_scheduled_loops = 1330,
  OPT_fresolution_ = 1331,
  OPT_frounding_math = 1332,
  OPT_frtti = 1333,
  OPT_fsanitize_address_use_after_scope = 1334,
  OPT_fsanitize_coverage_ = 1335,
  OPT_fsanitize_recover = 1336,
  OPT_fsanitize_recover_ = 1337,
  OPT_fsanitize_sections_ = 1338,
  OPT_fsanitize_undefined_trap_on_error = 1339,
  OPT_fsanitize_ = 1340,
  OPT_fsave_optimization_record = 1341,
  OPT_fsched_critical_path_heuristic = 1342,
  OPT_fsched_dep_count_heuristic = 1343,
  OPT_fsched_group_heuristic = 1344,
  OPT_fsched_interblock = 1345,
  OPT_fsched_last_insn_heuristic = 1346,
  OPT_fsched_pressure = 1347,
  OPT_fsched_rank_heuristic = 1348,
  OPT_fsched_spec = 1349,
  OPT_fsched_spec_insn_heuristic = 1350,
  OPT_fsched_spec_load = 1351,
  OPT_fsched_spec_load_dangerous = 1352,
  OPT_fsched_stalled_insns = 1353,
  OPT_fsched_stalled_insns_dep = 1354,
  OPT_fsched_stalled_insns_dep_ = 1355,
  OPT_fsched_stalled_insns_ = 1356,
  OPT_fsched_verbose_ = 1357,
  OPT_fsched2_use_superblocks = 1358,

  OPT_fschedule_fusion = 1360,
  OPT_fschedule_insns = 1361,
  OPT_fschedule_insns2 = 1362,
  OPT_fsecond_underscore = 1363,
  OPT_fsection_anchors = 1364,

  OPT_fsel_sched_pipelining = 1366,
  OPT_fsel_sched_pipelining_outer_loops = 1367,
  OPT_fsel_sched_reschedule_pipelined = 1368,
  OPT_fselective_scheduling = 1369,
  OPT_fselective_scheduling2 = 1370,
  OPT_fself_test_ = 1371,
  OPT_fsemantic_interposition = 1372,
  OPT_fshort_enums = 1373,
  OPT_fshort_wchar = 1374,
  OPT_fshow_column = 1375,
  OPT_fshrink_wrap = 1376,
  OPT_fshrink_wrap_separate = 1377,
  OPT_fsign_zero = 1378,
  OPT_fsignaling_nans = 1379,
  OPT_fsigned_bitfields = 1380,
  OPT_fsigned_char = 1381,
  OPT_fsigned_zeros = 1382,
  OPT_fsimd_cost_model_ = 1383,
  OPT_fsingle_precision_constant = 1384,
  OPT_fsized_deallocation = 1385,
  OPT_fsplit_ivs_in_unroller = 1386,
  OPT_fsplit_loops = 1387,
  OPT_fsplit_outputs_ = 1388,
  OPT_fsplit_paths = 1389,
  OPT_fsplit_stack = 1390,
  OPT_fsplit_wide_types = 1391,
  OPT_fsplit_wide_types_early = 1392,
  OPT_fsquangle = 1393,
  OPT_fssa_backprop = 1394,
  OPT_fssa_phiopt = 1395,
  OPT_fsso_struct_ = 1396,
  OPT_fstack_arrays = 1397,

  OPT_fstack_check_ = 1399,
  OPT_fstack_clash_protection = 1400,
  OPT_fstack_limit = 1401,
  OPT_fstack_limit_register_ = 1402,
  OPT_fstack_limit_symbol_ = 1403,
  OPT_fstack_protector = 1404,
  OPT_fstack_protector_all = 1405,
  OPT_fstack_protector_explicit = 1406,
  OPT_fstack_protector_strong = 1407,
  OPT_fstack_reuse_ = 1408,
  OPT_fstack_usage = 1409,
  OPT_fstats = 1410,
  OPT_fstdarg_opt = 1411,
  OPT_fstore_merging = 1412,

  OPT_fstrict_aliasing = 1414,
  OPT_fstrict_enums = 1415,
  OPT_fstrict_overflow = 1416,
  OPT_fstrict_prototype = 1417,
  OPT_fstrict_volatile_bitfields = 1418,

  OPT_fstrong_eval_order_ = 1420,
  OPT_fswitch_errors = 1421,
  OPT_fsync_libcalls = 1422,
  OPT_fsyntax_only = 1423,
  OPT_ftabstop_ = 1424,

  OPT_ftail_call_workaround_ = 1426,

  OPT_ftemplate_backtrace_limit_ = 1428,

  OPT_ftemplate_depth_ = 1430,
  OPT_ftest_coverage = 1431,
  OPT_ftest_forall_temp = 1432,
  OPT_fthis_is_variable = 1433,
  OPT_fthread_jumps = 1434,
  OPT_fthreadsafe_statics = 1435,
  OPT_ftime_report = 1436,
  OPT_ftime_report_details = 1437,
  OPT_ftls_model_ = 1438,
  OPT_ftoplevel_reorder = 1439,
  OPT_ftracer = 1440,
  OPT_ftrack_macro_expansion = 1441,
  OPT_ftrack_macro_expansion_ = 1442,
  OPT_ftrampolines = 1443,
  OPT_ftransition_all = 1444,
  OPT_ftransition_checkimports = 1445,
  OPT_ftransition_complex = 1446,
  OPT_ftransition_dip1000 = 1447,
  OPT_ftransition_dip25 = 1448,
  OPT_ftransition_field = 1449,
  OPT_ftransition_import = 1450,
  OPT_ftransition_nogc = 1451,
  OPT_ftransition_tls = 1452,
  OPT_ftrapping_math = 1453,
  OPT_ftrapv = 1454,
  OPT_ftree_bit_ccp = 1455,
  OPT_ftree_builtin_call_dce = 1456,
  OPT_ftree_ccp = 1457,
  OPT_ftree_ch = 1458,

  OPT_ftree_coalesce_vars = 1460,
  OPT_ftree_copy_prop = 1461,

  OPT_ftree_cselim = 1463,
  OPT_ftree_dce = 1464,
  OPT_ftree_dominator_opts = 1465,
  OPT_ftree_dse = 1466,
  OPT_ftree_forwprop = 1467,
  OPT_ftree_fre = 1468,
  OPT_ftree_loop_distribute_patterns = 1469,
  OPT_ftree_loop_distribution = 1470,
  OPT_ftree_loop_if_convert = 1471,

  OPT_ftree_loop_im = 1473,
  OPT_ftree_loop_ivcanon = 1474,

  OPT_ftree_loop_optimize = 1476,
  OPT_ftree_loop_vectorize = 1477,
  OPT_ftree_lrs = 1478,
  OPT_ftree_parallelize_loops_ = 1479,
  OPT_ftree_partial_pre = 1480,
  OPT_ftree_phiprop = 1481,
  OPT_ftree_pre = 1482,
  OPT_ftree_pta = 1483,
  OPT_ftree_reassoc = 1484,

  OPT_ftree_scev_cprop = 1486,
  OPT_ftree_sink = 1487,
  OPT_ftree_slp_vectorize = 1488,
  OPT_ftree_slsr = 1489,
  OPT_ftree_sra = 1490,


  OPT_ftree_switch_conversion = 1493,
  OPT_ftree_tail_merge = 1494,
  OPT_ftree_ter = 1495,

  OPT_ftree_vectorize = 1497,

  OPT_ftree_vrp = 1499,
  OPT_funconstrained_commons = 1500,
  OPT_funderscoring = 1501,
  OPT_funit_at_a_time = 1502,
  OPT_funittest = 1503,
  OPT_funroll_all_loops = 1504,
  OPT_funroll_completely_grow_size = 1505,
  OPT_funroll_loops = 1506,

  OPT_funsafe_math_optimizations = 1508,
  OPT_funsigned_bitfields = 1509,
  OPT_funsigned_char = 1510,
  OPT_funswitch_loops = 1511,
  OPT_funwind_tables = 1512,
  OPT_fuse_cxa_atexit = 1513,
  OPT_fuse_cxa_get_exception_ptr = 1514,
  OPT_fuse_ld_bfd = 1515,
  OPT_fuse_ld_gold = 1516,
  OPT_fuse_ld_lld = 1517,
  OPT_fuse_linker_plugin = 1518,
  OPT_fvar_tracking = 1519,
  OPT_fvar_tracking_assignments = 1520,
  OPT_fvar_tracking_assignments_toggle = 1521,
  OPT_fvar_tracking_uninit = 1522,
  OPT_fvariable_expansion_in_unroller = 1523,

  OPT_fvect_cost_model_ = 1525,
  OPT_fverbose_asm = 1526,

  OPT_fversion_loops_for_strides = 1528,
  OPT_fversion_ = 1529,
  OPT_fvisibility_inlines_hidden = 1530,
  OPT_fvisibility_ms_compat = 1531,
  OPT_fvisibility_ = 1532,
  OPT_fvpt = 1533,
  OPT_fvtable_gc = 1534,
  OPT_fvtable_thunks = 1535,
  OPT_fvtable_verify_ = 1536,
  OPT_fvtv_counts = 1537,
  OPT_fvtv_debug = 1538,
  OPT_fweak = 1539,
  OPT_fweb = 1540,

  OPT_fwhole_program = 1542,
  OPT_fwide_exec_charset_ = 1543,
  OPT_fworking_directory = 1544,
  OPT_fwpa = 1545,
  OPT_fwpa_ = 1546,
  OPT_fwrapv = 1547,
  OPT_fwrapv_pointer = 1548,
  OPT_fxref = 1549,

  OPT_fzero_initialized_in_bss = 1551,
  OPT_fzero_link = 1552,
  OPT_g = 1553,
  OPT_gant = 1554,
  OPT_gas_loc_support = 1555,
  OPT_gas_locview_support = 1556,
  OPT_gcoff = 1557,
  OPT_gcoff1 = 1558,
  OPT_gcoff2 = 1559,
  OPT_gcoff3 = 1560,
  OPT_gcolumn_info = 1561,
  OPT_gdescribe_dies = 1562,
  OPT_gdwarf = 1563,
  OPT_gdwarf_ = 1564,
  OPT_gen_decls = 1565,
  OPT_ggdb = 1566,
  OPT_ggnu_pubnames = 1567,
  OPT_gimple_stats = 1568,
  OPT_ginline_points = 1569,
  OPT_ginternal_reset_location_views = 1570,
  OPT_gnat = 1571,
  OPT_gnatO = 1572,
  OPT_gno_ = 1573,
  OPT_gno_pubnames = 1574,
  OPT_gpubnames = 1575,
  OPT_grecord_gcc_switches = 1576,
  OPT_gsplit_dwarf = 1577,
  OPT_gstabs = 1578,
  OPT_gstabs_ = 1579,
  OPT_gstatement_frontiers = 1580,
  OPT_gstrict_dwarf = 1581,
  OPT_gtoggle = 1582,
  OPT_gvariable_location_views = 1583,
  OPT_gvariable_location_views_incompat5 = 1584,
  OPT_gvms = 1585,
  OPT_gxcoff = 1586,
  OPT_gxcoff_ = 1587,
  OPT_gz = 1588,
  OPT_gz_ = 1589,
  OPT_h = 1590,
  OPT_help = 1591,
  OPT_idirafter = 1592,
  OPT_imacros = 1593,
  OPT_imultiarch = 1594,
  OPT_imultilib = 1595,
  OPT_include = 1596,
  OPT_iplugindir_ = 1597,
  OPT_iprefix = 1598,
  OPT_iquote = 1599,
  OPT_isysroot = 1600,
  OPT_isystem = 1601,
  OPT_iwithprefix = 1602,
  OPT_iwithprefixbefore = 1603,
  OPT_k8 = 1604,
  OPT_l = 1605,
  OPT_lang_asm = 1606,
  OPT_list = 1607,
  OPT_m128bit_long_double = 1608,
  OPT_m16 = 1609,
  OPT_m32 = 1610,
  OPT_m3dnow = 1611,
  OPT_m3dnowa = 1612,
  OPT_m64 = 1613,
  OPT_m80387 = 1614,
  OPT_m8bit_idiv = 1615,
  OPT_m96bit_long_double = 1616,
  OPT_mabi_ = 1617,
  OPT_mabm = 1618,
  OPT_maccumulate_outgoing_args = 1619,
  OPT_maddress_mode_ = 1620,
  OPT_madx = 1621,
  OPT_maes = 1622,
  OPT_malign_data_ = 1623,
  OPT_malign_double = 1624,
  OPT_malign_functions_ = 1625,
  OPT_malign_jumps_ = 1626,
  OPT_malign_loops_ = 1627,
  OPT_malign_stringops = 1628,
  OPT_mandroid = 1629,
  OPT_march_ = 1630,
  OPT_masm_ = 1631,
  OPT_mavx = 1632,
  OPT_mavx2 = 1633,
  OPT_mavx256_split_unaligned_load = 1634,
  OPT_mavx256_split_unaligned_store = 1635,
  OPT_mavx5124fmaps = 1636,
  OPT_mavx5124vnniw = 1637,
  OPT_mavx512bf16 = 1638,
  OPT_mavx512bitalg = 1639,
  OPT_mavx512bw = 1640,
  OPT_mavx512cd = 1641,
  OPT_mavx512dq = 1642,
  OPT_mavx512er = 1643,
  OPT_mavx512f = 1644,
  OPT_mavx512ifma = 1645,
  OPT_mavx512pf = 1646,
  OPT_mavx512vbmi = 1647,
  OPT_mavx512vbmi2 = 1648,
  OPT_mavx512vl = 1649,
  OPT_mavx512vnni = 1650,
  OPT_mavx512vp2intersect = 1651,
  OPT_mavx512vpopcntdq = 1652,
  OPT_mbionic = 1653,
  OPT_mbmi = 1654,
  OPT_mbmi2 = 1655,
  OPT_mbranch_cost_ = 1656,
  OPT_mcall_ms2sysv_xlogues = 1657,
  OPT_mcet_switch = 1658,
  OPT_mcld = 1659,
  OPT_mcldemote = 1660,
  OPT_mclflushopt = 1661,
  OPT_mclwb = 1662,
  OPT_mclzero = 1663,
  OPT_mcmodel_ = 1664,

  OPT_mcrc32 = 1666,
  OPT_mcx16 = 1667,
  OPT_mdispatch_scheduler = 1668,
  OPT_mdump_tune_features = 1669,
  OPT_menqcmd = 1670,
  OPT_mf16c = 1671,
  OPT_mfancy_math_387 = 1672,
  OPT_mfentry = 1673,
  OPT_mfentry_name_ = 1674,
  OPT_mfentry_section_ = 1675,
  OPT_mfma = 1676,
  OPT_mfma4 = 1677,
  OPT_mforce_drap = 1678,
  OPT_mforce_indirect_call = 1679,
  OPT_mfp_ret_in_387 = 1680,
  OPT_mfpmath_ = 1681,
  OPT_mfsgsbase = 1682,
  OPT_mfunction_return_ = 1683,

  OPT_mfxsr = 1685,
  OPT_mgeneral_regs_only = 1686,
  OPT_mgfni = 1687,
  OPT_mglibc = 1688,
  OPT_mhard_float = 1689,
  OPT_mhle = 1690,
  OPT_miamcu = 1691,
  OPT_mieee_fp = 1692,
  OPT_mincoming_stack_boundary_ = 1693,
  OPT_mindirect_branch_register = 1694,
  OPT_mindirect_branch_ = 1695,
  OPT_minline_all_stringops = 1696,
  OPT_minline_stringops_dynamically = 1697,
  OPT_minstrument_return_ = 1698,

  OPT_mlarge_data_threshold_ = 1700,
  OPT_mlong_double_128 = 1701,
  OPT_mlong_double_64 = 1702,
  OPT_mlong_double_80 = 1703,
  OPT_mlwp = 1704,
  OPT_mlzcnt = 1705,
  OPT_mmanual_endbr = 1706,
  OPT_mmemcpy_strategy_ = 1707,
  OPT_mmemset_strategy_ = 1708,
  OPT_mmitigate_rop = 1709,
  OPT_mmmx = 1710,
  OPT_mmovbe = 1711,
  OPT_mmovdir64b = 1712,
  OPT_mmovdiri = 1713,
  OPT_mmpx = 1714,
  OPT_mms_bitfields = 1715,
  OPT_mmusl = 1716,
  OPT_mmwaitx = 1717,
  OPT_mno_align_stringops = 1718,
  OPT_mno_default = 1719,
  OPT_mno_fancy_math_387 = 1720,
  OPT_mno_push_args = 1721,
  OPT_mno_red_zone = 1722,
  OPT_mno_sse4 = 1723,
  OPT_mnop_mcount = 1724,
  OPT_momit_leaf_frame_pointer = 1725,
  OPT_mpc32 = 1726,
  OPT_mpc64 = 1727,
  OPT_mpc80 = 1728,
  OPT_mpclmul = 1729,
  OPT_mpcommit = 1730,
  OPT_mpconfig = 1731,
  OPT_mpku = 1732,
  OPT_mpopcnt = 1733,

  OPT_mprefer_vector_width_ = 1735,
  OPT_mpreferred_stack_boundary_ = 1736,
  OPT_mprefetchwt1 = 1737,
  OPT_mprfchw = 1738,
  OPT_mptwrite = 1739,
  OPT_mpush_args = 1740,
  OPT_mrdpid = 1741,
  OPT_mrdrnd = 1742,
  OPT_mrdseed = 1743,
  OPT_mrecip = 1744,
  OPT_mrecip_ = 1745,
  OPT_mrecord_mcount = 1746,
  OPT_mrecord_return = 1747,
  OPT_mred_zone = 1748,
  OPT_mregparm_ = 1749,
  OPT_mrtd = 1750,
  OPT_mrtm = 1751,
  OPT_msahf = 1752,
  OPT_mserialize = 1753,
  OPT_msgx = 1754,
  OPT_msha = 1755,
  OPT_mshstk = 1756,
  OPT_mskip_rax_setup = 1757,
  OPT_msoft_float = 1758,
  OPT_msse = 1759,
  OPT_msse2 = 1760,
  OPT_msse2avx = 1761,
  OPT_msse3 = 1762,
  OPT_msse4 = 1763,
  OPT_msse4_1 = 1764,
  OPT_msse4_2 = 1765,
  OPT_msse4a = 1766,

  OPT_msseregparm = 1768,
  OPT_mssse3 = 1769,
  OPT_mstack_arg_probe = 1770,
  OPT_mstack_protector_guard_offset_ = 1771,
  OPT_mstack_protector_guard_reg_ = 1772,
  OPT_mstack_protector_guard_symbol_ = 1773,
  OPT_mstack_protector_guard_ = 1774,
  OPT_mstackrealign = 1775,
  OPT_mstringop_strategy_ = 1776,
  OPT_mstv = 1777,
  OPT_mtbm = 1778,
  OPT_mtls_dialect_ = 1779,
  OPT_mtls_direct_seg_refs = 1780,
  OPT_mtsxldtrk = 1781,
  OPT_mtune_ctrl_ = 1782,
  OPT_mtune_ = 1783,
  OPT_muclibc = 1784,
  OPT_mvaes = 1785,
  OPT_mveclibabi_ = 1786,
  OPT_mvect8_ret_in_mem = 1787,
  OPT_mvpclmulqdq = 1788,
  OPT_mvzeroupper = 1789,
  OPT_mwaitpkg = 1790,
  OPT_mwbnoinvd = 1791,
  OPT_mx32 = 1792,
  OPT_mxop = 1793,
  OPT_mxsave = 1794,
  OPT_mxsavec = 1795,
  OPT_mxsaveopt = 1796,
  OPT_mxsaves = 1797,
  OPT_n = 1798,
  OPT_name_sort = 1799,
  OPT_no_canonical_prefixes = 1800,
  OPT_no_integrated_cpp = 1801,
  OPT_no_pie = 1802,
  OPT_nocpp = 1803,
  OPT_nodefaultlibs = 1804,
  OPT_nolibc = 1805,
  OPT_nophoboslib = 1806,
  OPT_nostartfiles = 1807,
  OPT_nostdinc = 1808,
  OPT_nostdinc__ = 1809,
  OPT_nostdlib = 1810,
  OPT_o = 1811,
  OPT_objects = 1812,
  OPT_p = 1813,
  OPT_pass_exit_codes = 1814,

  OPT_pedantic_errors = 1816,
  OPT_pg = 1817,
  OPT_pie = 1818,
  OPT_pipe = 1819,
  OPT_posix = 1820,
  OPT_print_file_name_ = 1821,
  OPT_print_libgcc_file_name = 1822,
  OPT_print_multi_directory = 1823,
  OPT_print_multi_lib = 1824,
  OPT_print_multi_os_directory = 1825,
  OPT_print_multiarch = 1826,
  OPT_print_objc_runtime_info = 1827,
  OPT_print_prog_name_ = 1828,
  OPT_print_search_dirs = 1829,
  OPT_print_sysroot = 1830,
  OPT_print_sysroot_headers_suffix = 1831,
  OPT_print_value = 1832,
  OPT_profile = 1833,
  OPT_pthread = 1834,
  OPT_quiet = 1835,
  OPT_r = 1836,
  OPT_rdynamic = 1837,
  OPT_remap = 1838,
  OPT_reverse_sort = 1839,
  OPT_s = 1840,
  OPT_save_temps = 1841,
  OPT_save_temps_ = 1842,
  OPT_shared = 1843,
  OPT_shared_libgcc = 1844,
  OPT_shared_libphobos = 1845,
  OPT_size_sort = 1846,

  OPT_specs_ = 1848,
  OPT_static = 1849,
  OPT_static_libasan = 1850,
  OPT_static_libgcc = 1851,
  OPT_static_libgfortran = 1852,
  OPT_static_libgo = 1853,
  OPT_static_liblsan = 1854,
  OPT_static_libmpx = 1855,
  OPT_static_libmpxwrappers = 1856,
  OPT_static_libphobos = 1857,
  OPT_static_libstdc__ = 1858,
  OPT_static_libtsan = 1859,
  OPT_static_libubsan = 1860,
  OPT_static_pie = 1861,


  OPT_std_c__11 = 1864,
  OPT_std_c__14 = 1865,
  OPT_std_c__17 = 1866,


  OPT_std_c__20 = 1869,

  OPT_std_c__98 = 1871,
  OPT_std_c11 = 1872,
  OPT_std_c17 = 1873,


  OPT_std_c2x = 1876,

  OPT_std_c90 = 1878,
  OPT_std_c99 = 1879,

  OPT_std_f2003 = 1881,
  OPT_std_f2008 = 1882,
  OPT_std_f2008ts = 1883,
  OPT_std_f2018 = 1884,
  OPT_std_f95 = 1885,
  OPT_std_gnu = 1886,


  OPT_std_gnu__11 = 1889,
  OPT_std_gnu__14 = 1890,
  OPT_std_gnu__17 = 1891,


  OPT_std_gnu__20 = 1894,

  OPT_std_gnu__98 = 1896,
  OPT_std_gnu11 = 1897,
  OPT_std_gnu17 = 1898,


  OPT_std_gnu2x = 1901,

  OPT_std_gnu90 = 1903,
  OPT_std_gnu99 = 1904,


  OPT_std_iso9899_199409 = 1907,





  OPT_std_legacy = 1913,
  OPT_symbol_ = 1914,
  OPT_symbolic = 1915,
  OPT_t = 1916,
  OPT_time = 1917,
  OPT_time_ = 1918,
  OPT_tno_android_cc = 1919,
  OPT_tno_android_ld = 1920,
  OPT_traditional = 1921,
  OPT_traditional_cpp = 1922,
  OPT_tree_stats = 1923,
  OPT_trigraphs = 1924,
  OPT_type_stats = 1925,
  OPT_u = 1926,
  OPT_undef = 1927,
  OPT_v = 1928,
  OPT_version = 1929,
  OPT_w = 1930,
  OPT_wrapper = 1931,
  OPT_x = 1932,
  OPT_z = 1933,
  N_OPTS,
  OPT_SPECIAL_unknown,
  OPT_SPECIAL_ignore,
  OPT_SPECIAL_warn_removed,
  OPT_SPECIAL_program_name,
  OPT_SPECIAL_input_file
};
# 23 "./tm.h" 2
# 1 "./insn-constants.h" 1
# 113 "./insn-constants.h"
enum unspec {
  UNSPEC_GOT = 0,
  UNSPEC_GOTOFF = 1,
  UNSPEC_GOTPCREL = 2,
  UNSPEC_GOTTPOFF = 3,
  UNSPEC_TPOFF = 4,
  UNSPEC_NTPOFF = 5,
  UNSPEC_DTPOFF = 6,
  UNSPEC_GOTNTPOFF = 7,
  UNSPEC_INDNTPOFF = 8,
  UNSPEC_PLTOFF = 9,
  UNSPEC_MACHOPIC_OFFSET = 10,
  UNSPEC_PCREL = 11,
  UNSPEC_SIZEOF = 12,
  UNSPEC_STACK_ALLOC = 13,
  UNSPEC_SET_GOT = 14,
  UNSPEC_SET_RIP = 15,
  UNSPEC_SET_GOT_OFFSET = 16,
  UNSPEC_MEMORY_BLOCKAGE = 17,
  UNSPEC_PROBE_STACK = 18,
  UNSPEC_TP = 19,
  UNSPEC_TLS_GD = 20,
  UNSPEC_TLS_LD_BASE = 21,
  UNSPEC_TLSDESC = 22,
  UNSPEC_TLS_IE_SUN = 23,
  UNSPEC_SCAS = 24,
  UNSPEC_FNSTSW = 25,
  UNSPEC_SAHF = 26,
  UNSPEC_NOTRAP = 27,
  UNSPEC_PARITY = 28,
  UNSPEC_FSTCW = 29,
  UNSPEC_REP = 30,
  UNSPEC_LD_MPIC = 31,
  UNSPEC_TRUNC_NOOP = 32,
  UNSPEC_DIV_ALREADY_SPLIT = 33,
  UNSPEC_PAUSE = 34,
  UNSPEC_LEA_ADDR = 35,
  UNSPEC_XBEGIN_ABORT = 36,
  UNSPEC_STOS = 37,
  UNSPEC_PEEPSIB = 38,
  UNSPEC_INSN_FALSE_DEP = 39,
  UNSPEC_SBB = 40,
  UNSPEC_FIX_NOTRUNC = 41,
  UNSPEC_MASKMOV = 42,
  UNSPEC_MOVMSK = 43,
  UNSPEC_RCP = 44,
  UNSPEC_RSQRT = 45,
  UNSPEC_PSADBW = 46,
  UNSPEC_COPYSIGN = 47,
  UNSPEC_XORSIGN = 48,
  UNSPEC_IEEE_MIN = 49,
  UNSPEC_IEEE_MAX = 50,
  UNSPEC_SIN = 51,
  UNSPEC_COS = 52,
  UNSPEC_FPATAN = 53,
  UNSPEC_FYL2X = 54,
  UNSPEC_FYL2XP1 = 55,
  UNSPEC_FRNDINT = 56,
  UNSPEC_FIST = 57,
  UNSPEC_F2XM1 = 58,
  UNSPEC_TAN = 59,
  UNSPEC_FXAM = 60,
  UNSPEC_FRNDINT_ROUNDEVEN = 61,
  UNSPEC_FRNDINT_FLOOR = 62,
  UNSPEC_FRNDINT_CEIL = 63,
  UNSPEC_FRNDINT_TRUNC = 64,
  UNSPEC_FIST_FLOOR = 65,
  UNSPEC_FIST_CEIL = 66,
  UNSPEC_SINCOS_COS = 67,
  UNSPEC_SINCOS_SIN = 68,
  UNSPEC_XTRACT_FRACT = 69,
  UNSPEC_XTRACT_EXP = 70,
  UNSPEC_FSCALE_FRACT = 71,
  UNSPEC_FSCALE_EXP = 72,
  UNSPEC_FPREM_F = 73,
  UNSPEC_FPREM_U = 74,
  UNSPEC_FPREM1_F = 75,
  UNSPEC_FPREM1_U = 76,
  UNSPEC_C2_FLAG = 77,
  UNSPEC_FXAM_MEM = 78,
  UNSPEC_SP_SET = 79,
  UNSPEC_SP_TEST = 80,
  UNSPEC_ROUND = 81,
  UNSPEC_CRC32 = 82,
  UNSPEC_LZCNT = 83,
  UNSPEC_TZCNT = 84,
  UNSPEC_BEXTR = 85,
  UNSPEC_PDEP = 86,
  UNSPEC_PEXT = 87,
  UNSPEC_INTERRUPT_RETURN = 88,
  UNSPEC_MOVNTQ = 89,
  UNSPEC_PFRCP = 90,
  UNSPEC_PFRCPIT1 = 91,
  UNSPEC_PFRCPIT2 = 92,
  UNSPEC_PFRSQRT = 93,
  UNSPEC_PFRSQIT1 = 94,
  UNSPEC_MOVNT = 95,
  UNSPEC_MOVDI_TO_SSE = 96,
  UNSPEC_LDDQU = 97,
  UNSPEC_PSHUFB = 98,
  UNSPEC_PSIGN = 99,
  UNSPEC_PALIGNR = 100,
  UNSPEC_EXTRQI = 101,
  UNSPEC_EXTRQ = 102,
  UNSPEC_INSERTQI = 103,
  UNSPEC_INSERTQ = 104,
  UNSPEC_BLENDV = 105,
  UNSPEC_INSERTPS = 106,
  UNSPEC_DP = 107,
  UNSPEC_MOVNTDQA = 108,
  UNSPEC_MPSADBW = 109,
  UNSPEC_PHMINPOSUW = 110,
  UNSPEC_PTEST = 111,
  UNSPEC_PCMPESTR = 112,
  UNSPEC_PCMPISTR = 113,
  UNSPEC_FMADDSUB = 114,
  UNSPEC_XOP_UNSIGNED_CMP = 115,
  UNSPEC_XOP_TRUEFALSE = 116,
  UNSPEC_XOP_PERMUTE = 117,
  UNSPEC_FRCZ = 118,
  UNSPEC_AESENC = 119,
  UNSPEC_AESENCLAST = 120,
  UNSPEC_AESDEC = 121,
  UNSPEC_AESDECLAST = 122,
  UNSPEC_AESIMC = 123,
  UNSPEC_AESKEYGENASSIST = 124,
  UNSPEC_PCLMUL = 125,
  UNSPEC_PCMP = 126,
  UNSPEC_VPERMIL = 127,
  UNSPEC_VPERMIL2 = 128,
  UNSPEC_VPERMIL2F128 = 129,
  UNSPEC_CAST = 130,
  UNSPEC_VTESTP = 131,
  UNSPEC_VCVTPH2PS = 132,
  UNSPEC_VCVTPS2PH = 133,
  UNSPEC_VPERMVAR = 134,
  UNSPEC_VPERMTI = 135,
  UNSPEC_GATHER = 136,
  UNSPEC_VSIBADDR = 137,
  UNSPEC_VPERMT2 = 138,
  UNSPEC_UNSIGNED_FIX_NOTRUNC = 139,
  UNSPEC_UNSIGNED_PCMP = 140,
  UNSPEC_TESTM = 141,
  UNSPEC_TESTNM = 142,
  UNSPEC_SCATTER = 143,
  UNSPEC_RCP14 = 144,
  UNSPEC_RSQRT14 = 145,
  UNSPEC_FIXUPIMM = 146,
  UNSPEC_SCALEF = 147,
  UNSPEC_VTERNLOG = 148,
  UNSPEC_GETEXP = 149,
  UNSPEC_GETMANT = 150,
  UNSPEC_ALIGN = 151,
  UNSPEC_CONFLICT = 152,
  UNSPEC_COMPRESS = 153,
  UNSPEC_COMPRESS_STORE = 154,
  UNSPEC_EXPAND = 155,
  UNSPEC_MASKED_EQ = 156,
  UNSPEC_MASKED_GT = 157,
  UNSPEC_MASKOP = 158,
  UNSPEC_KORTEST = 159,
  UNSPEC_KTEST = 160,
  UNSPEC_EMBEDDED_ROUNDING = 161,
  UNSPEC_GATHER_PREFETCH = 162,
  UNSPEC_SCATTER_PREFETCH = 163,
  UNSPEC_EXP2 = 164,
  UNSPEC_RCP28 = 165,
  UNSPEC_RSQRT28 = 166,
  UNSPEC_SHA1MSG1 = 167,
  UNSPEC_SHA1MSG2 = 168,
  UNSPEC_SHA1NEXTE = 169,
  UNSPEC_SHA1RNDS4 = 170,
  UNSPEC_SHA256MSG1 = 171,
  UNSPEC_SHA256MSG2 = 172,
  UNSPEC_SHA256RNDS2 = 173,
  UNSPEC_DBPSADBW = 174,
  UNSPEC_PMADDUBSW512 = 175,
  UNSPEC_PMADDWD512 = 176,
  UNSPEC_PSHUFHW = 177,
  UNSPEC_PSHUFLW = 178,
  UNSPEC_CVTINT2MASK = 179,
  UNSPEC_REDUCE = 180,
  UNSPEC_FPCLASS = 181,
  UNSPEC_RANGE = 182,
  UNSPEC_VPMADD52LUQ = 183,
  UNSPEC_VPMADD52HUQ = 184,
  UNSPEC_VPMULTISHIFT = 185,
  UNSPEC_VP4FMADD = 186,
  UNSPEC_VP4FNMADD = 187,
  UNSPEC_VP4DPWSSD = 188,
  UNSPEC_VP4DPWSSDS = 189,
  UNSPEC_GF2P8AFFINEINV = 190,
  UNSPEC_GF2P8AFFINE = 191,
  UNSPEC_GF2P8MUL = 192,
  UNSPEC_VPSHLD = 193,
  UNSPEC_VPSHRD = 194,
  UNSPEC_VPSHRDV = 195,
  UNSPEC_VPSHLDV = 196,
  UNSPEC_VPMADDUBSWACCD = 197,
  UNSPEC_VPMADDUBSWACCSSD = 198,
  UNSPEC_VPMADDWDACCD = 199,
  UNSPEC_VPMADDWDACCSSD = 200,
  UNSPEC_VAESDEC = 201,
  UNSPEC_VAESDECLAST = 202,
  UNSPEC_VAESENC = 203,
  UNSPEC_VAESENCLAST = 204,
  UNSPEC_VPCLMULQDQ = 205,
  UNSPEC_VPSHUFBIT = 206,
  UNSPEC_VP2INTERSECT = 207,
  UNSPEC_VCVTNE2PS2BF16 = 208,
  UNSPEC_VCVTNEPS2BF16 = 209,
  UNSPEC_VDPBF16PS = 210,
  UNSPEC_LFENCE = 211,
  UNSPEC_SFENCE = 212,
  UNSPEC_MFENCE = 213,
  UNSPEC_FILD_ATOMIC = 214,
  UNSPEC_FIST_ATOMIC = 215,
  UNSPEC_LDX_ATOMIC = 216,
  UNSPEC_STX_ATOMIC = 217,
  UNSPEC_LDA = 218,
  UNSPEC_STA = 219
};

extern const char *const unspec_strings[];

enum unspecv {
  UNSPECV_UD2 = 0,
  UNSPECV_BLOCKAGE = 1,
  UNSPECV_STACK_PROBE = 2,
  UNSPECV_PROBE_STACK_RANGE = 3,
  UNSPECV_ALIGN = 4,
  UNSPECV_PROLOGUE_USE = 5,
  UNSPECV_SPLIT_STACK_RETURN = 6,
  UNSPECV_CLD = 7,
  UNSPECV_NOPS = 8,
  UNSPECV_RDTSC = 9,
  UNSPECV_RDTSCP = 10,
  UNSPECV_RDPMC = 11,
  UNSPECV_LLWP_INTRINSIC = 12,
  UNSPECV_SLWP_INTRINSIC = 13,
  UNSPECV_LWPVAL_INTRINSIC = 14,
  UNSPECV_LWPINS_INTRINSIC = 15,
  UNSPECV_RDFSBASE = 16,
  UNSPECV_RDGSBASE = 17,
  UNSPECV_WRFSBASE = 18,
  UNSPECV_WRGSBASE = 19,
  UNSPECV_FXSAVE = 20,
  UNSPECV_FXRSTOR = 21,
  UNSPECV_FXSAVE64 = 22,
  UNSPECV_FXRSTOR64 = 23,
  UNSPECV_XSAVE = 24,
  UNSPECV_XRSTOR = 25,
  UNSPECV_XSAVE64 = 26,
  UNSPECV_XRSTOR64 = 27,
  UNSPECV_XSAVEOPT = 28,
  UNSPECV_XSAVEOPT64 = 29,
  UNSPECV_XSAVES = 30,
  UNSPECV_XRSTORS = 31,
  UNSPECV_XSAVES64 = 32,
  UNSPECV_XRSTORS64 = 33,
  UNSPECV_XSAVEC = 34,
  UNSPECV_XSAVEC64 = 35,
  UNSPECV_XGETBV = 36,
  UNSPECV_XSETBV = 37,
  UNSPECV_WBINVD = 38,
  UNSPECV_WBNOINVD = 39,
  UNSPECV_FNSTENV = 40,
  UNSPECV_FLDENV = 41,
  UNSPECV_FNSTSW = 42,
  UNSPECV_FNCLEX = 43,
  UNSPECV_RDRAND = 44,
  UNSPECV_RDSEED = 45,
  UNSPECV_XBEGIN = 46,
  UNSPECV_XEND = 47,
  UNSPECV_XABORT = 48,
  UNSPECV_XTEST = 49,
  UNSPECV_NLGR = 50,
  UNSPECV_CLWB = 51,
  UNSPECV_CLFLUSHOPT = 52,
  UNSPECV_MONITORX = 53,
  UNSPECV_MWAITX = 54,
  UNSPECV_CLZERO = 55,
  UNSPECV_PKU = 56,
  UNSPECV_RDPID = 57,
  UNSPECV_NOP_ENDBR = 58,
  UNSPECV_NOP_RDSSP = 59,
  UNSPECV_INCSSP = 60,
  UNSPECV_SAVEPREVSSP = 61,
  UNSPECV_RSTORSSP = 62,
  UNSPECV_WRSS = 63,
  UNSPECV_WRUSS = 64,
  UNSPECV_SETSSBSY = 65,
  UNSPECV_CLRSSBSY = 66,
  UNSPECV_MOVDIRI = 67,
  UNSPECV_MOVDIR64B = 68,
  UNSPECV_XSUSLDTRK = 69,
  UNSPECV_XRESLDTRK = 70,
  UNSPECV_UMWAIT = 71,
  UNSPECV_UMONITOR = 72,
  UNSPECV_TPAUSE = 73,
  UNSPECV_CLDEMOTE = 74,
  UNSPECV_SPECULATION_BARRIER = 75,
  UNSPECV_PTWRITE = 76,
  UNSPECV_ENQCMD = 77,
  UNSPECV_ENQCMDS = 78,
  UNSPECV_SERIALIZE = 79,
  UNSPECV_PATCHABLE_AREA = 80,
  UNSPECV_EMMS = 81,
  UNSPECV_FEMMS = 82,
  UNSPECV_LDMXCSR = 83,
  UNSPECV_STMXCSR = 84,
  UNSPECV_CLFLUSH = 85,
  UNSPECV_MONITOR = 86,
  UNSPECV_MWAIT = 87,
  UNSPECV_VZEROALL = 88,
  UNSPECV_VZEROUPPER = 89,
  UNSPECV_CMPXCHG = 90,
  UNSPECV_XCHG = 91,
  UNSPECV_LOCK = 92
};

extern const char *const unspecv_strings[];
# 24 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/vxworks-dummy.h" 1
# 25 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/biarch64.h" 1
# 26 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 1
# 216 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/vxworks-dummy.h" 1
# 217 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2
# 234 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
struct stringop_algs
{
  const enum stringop_alg unknown_size;
  const struct stringop_strategy {
    const int max;
    const enum stringop_alg alg;
    int noalign;
  } size [4];
};
# 252 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
struct processor_costs {


  struct
    {
      const int movzbl_load;
      const int int_load[3];


      const int int_store[3];

      const int fp_move;
      const int fp_load[3];

      const int fp_store[3];

      const int mmx_move;
      const int mmx_load[2];

      const int mmx_store[2];

      const int xmm_move;
      const int ymm_move;
      const int zmm_move;
      const int sse_load[5];

      const int sse_store[5];

      const int sse_to_integer;
      const int integer_to_sse;
    } hard_register;

  const int add;
  const int lea;
  const int shift_var;
  const int shift_const;
  const int mult_init[5];

  const int mult_bit;
  const int divide[5];

  int movsx;
  int movzx;
  const int large_insn;
  const int move_ratio;

  const int clear_ratio;

  const int int_load[3];


  const int int_store[3];

  const int sse_load[5];

  const int sse_store[5];

  const int sse_unaligned_load[5];
  const int sse_unaligned_store[5];
  const int xmm_move, ymm_move,
     zmm_move;
  const int sse_to_integer;
  const int gather_static, gather_per_elt;

  const int scatter_static, scatter_per_elt;

  const int l1_cache_size;
  const int l2_cache_size;
  const int prefetch_block;
  const int simultaneous_prefetches;

  const int branch_cost;
  const int fadd;
  const int fmul;
  const int fdiv;
  const int fabs;
  const int fchs;
  const int fsqrt;


  const int sse_op;
  const int addss;
  const int mulss;
  const int mulsd;
  const int fmass;
  const int fmasd;
  const int divss;
  const int divsd;
  const int sqrtss;
  const int sqrtsd;
  const int reassoc_int, reassoc_fp, reassoc_vec_int, reassoc_vec_fp;






  struct stringop_algs *memcpy, *memset;
  const int cond_taken_branch_cost;

  const int cond_not_taken_branch_cost;





  const char *const align_loop;
  const char *const align_jump;
  const char *const align_label;
  const char *const align_func;
};

extern const struct processor_costs *ix86_cost;
extern const struct processor_costs ix86_size_cost;
# 466 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum ix86_tune_indices {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def" 1
# 42 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_SCHEDULE,
# 51 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_REG_DEPENDENCY,
# 63 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY,







X86_TUNE_SSE_SPLIT_REGS,
# 82 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_FLAG_REG_STALL,




X86_TUNE_MOVX,







X86_TUNE_MEMORY_MISMATCH_STALL,






X86_TUNE_FUSE_CMP_AND_BRANCH_32,




X86_TUNE_FUSE_CMP_AND_BRANCH_64,






X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS,






X86_TUNE_FUSE_ALU_AND_BRANCH,
# 137 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_ACCUMULATE_OUTGOING_ARGS,





X86_TUNE_PROLOGUE_USING_MOVE,




X86_TUNE_EPILOGUE_USING_MOVE,



X86_TUNE_USE_LEAVE,





X86_TUNE_PUSH_MEMORY,





X86_TUNE_SINGLE_PUSH,




X86_TUNE_DOUBLE_PUSH,




X86_TUNE_SINGLE_POP,




X86_TUNE_DOUBLE_POP,







X86_TUNE_PAD_SHORT_FUNCTION,






X86_TUNE_PAD_RETURNS,




X86_TUNE_FOUR_JUMP_LIMIT,
# 211 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL,




X86_TUNE_LCP_STALL,



X86_TUNE_READ_MODIFY,







X86_TUNE_USE_INCDEC,






X86_TUNE_INTEGER_DFMODE_MOVES,






X86_TUNE_OPT_AGU,



X86_TUNE_AVOID_LEA_FOR_ADDR,






X86_TUNE_SLOW_IMUL_IMM32_MEM,





X86_TUNE_SLOW_IMUL_IMM8,




X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE,





X86_TUNE_SINGLE_STRINGOP,






X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES,




X86_TUNE_USE_SAHF,






X86_TUNE_USE_CLTD,




X86_TUNE_USE_BT,






X86_TUNE_AVOID_FALSE_DEP_FOR_BMI,






X86_TUNE_ADJUST_UNROLL,



X86_TUNE_ONE_IF_CONV_INSN,




X86_TUNE_AVOID_MFENCE,





X86_TUNE_EXPAND_ABS,
# 334 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_USE_HIMODE_FIOP,




X86_TUNE_USE_SIMODE_FIOP,





X86_TUNE_USE_FFREEP,


X86_TUNE_EXT_80387_CONSTANTS,
# 359 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_GENERAL_REGS_SSE_SPILL,




X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL,






X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL,






X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL,



X86_TUNE_SSE_TYPELESS_STORES,




X86_TUNE_SSE_LOAD0_BY_PXOR,
# 398 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_INTER_UNIT_MOVES_TO_VEC,





X86_TUNE_INTER_UNIT_MOVES_FROM_VEC,




X86_TUNE_INTER_UNIT_CONVERSIONS,




X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS,






X86_TUNE_USE_VECTOR_FP_CONVERTS,




X86_TUNE_USE_VECTOR_CONVERTS,


X86_TUNE_SLOW_PSHUFB,




X86_TUNE_AVOID_4BYTE_PREFIXES,



X86_TUNE_USE_GATHER,




X86_TUNE_AVOID_128FMA_CHAINS,



X86_TUNE_AVOID_256FMA_CHAINS,







X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL,




X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL,



X86_TUNE_AVX256_SPLIT_REGS,




X86_TUNE_AVX128_OPTIMAL,




X86_TUNE_AVX256_OPTIMAL,







X86_TUNE_DOUBLE_WITH_ADD,




X86_TUNE_ALWAYS_FANCY_MATH_387,






X86_TUNE_UNROLL_STRLEN,



X86_TUNE_SHIFT1,



X86_TUNE_ZERO_EXTEND_WITH_AND,




X86_TUNE_PROMOTE_HIMODE_IMUL,





X86_TUNE_FAST_PREFIX,




X86_TUNE_READ_MODIFY_WRITE,




X86_TUNE_MOVE_M1_VIA_OR,



X86_TUNE_NOT_UNPAIRABLE,
# 539 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_PARTIAL_REG_STALL,



X86_TUNE_PROMOTE_QIMODE,




X86_TUNE_PROMOTE_HI_REGS,



X86_TUNE_HIMODE_MATH,



X86_TUNE_SPLIT_LONG_MOVES,


X86_TUNE_USE_XCHGB,



X86_TUNE_USE_MOV0,




X86_TUNE_NOT_VECTORMODE,



X86_TUNE_AVOID_VECTOR_DECODE,
# 583 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-tune.def"
X86_TUNE_BRANCH_PREDICTION_HINTS,


X86_TUNE_QIMODE_MATH,




X86_TUNE_PROMOTE_QI_REGS,



X86_TUNE_EMIT_VZEROUPPER,
# 470 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2

X86_TUNE_LAST
};

extern unsigned char ix86_tune_features[X86_TUNE_LAST];
# 608 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum ix86_arch_indices {
  X86_ARCH_CMOV,
  X86_ARCH_CMPXCHG,
  X86_ARCH_CMPXCHG8B,
  X86_ARCH_XADD,
  X86_ARCH_BSWAP,

  X86_ARCH_LAST
};

extern unsigned char ix86_arch_features[X86_ARCH_LAST];
# 633 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern unsigned char x86_prefetch_sse;
# 663 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern tree x86_mfence;
# 729 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern const char *host_detect_local_cpu (int argc, const char **argv);
# 1388 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum reg_class
{
  NO_REGS,
  AREG, DREG, CREG, BREG, SIREG, DIREG,
  AD_REGS,
  CLOBBERED_REGS,
  Q_REGS,
  NON_Q_REGS,
  TLS_GOTBASE_REGS,
  INDEX_REGS,
  LEGACY_REGS,
  GENERAL_REGS,

  FP_TOP_REG, FP_SECOND_REG,
  FLOAT_REGS,
  SSE_FIRST_REG,
  NO_REX_SSE_REGS,
  SSE_REGS,
  ALL_SSE_REGS,
  MMX_REGS,
  FLOAT_SSE_REGS,
  FLOAT_INT_REGS,
  INT_SSE_REGS,
  FLOAT_INT_SSE_REGS,
  MASK_REGS,
  ALL_MASK_REGS,
  ALL_REGS,
  LIM_REG_CLASSES
};
# 1692 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
typedef struct ix86_args {
  int words;
  int nregs;
  int regno;
  int fastcall;

  int sse_words;
  int sse_nregs;
  int warn_avx512f;

  int warn_avx;
  int warn_sse;
  int warn_mmx;
  int warn_empty;

  int sse_regno;
  int mmx_words;
  int mmx_nregs;
  int mmx_regno;
  int maybe_vaarg;
  int caller;
  int float_in_sse;


  int stdarg;
  enum calling_abi call_abi;

  tree decl;
} CUMULATIVE_ARGS;
# 2151 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern int const dbx_register_map[76];
extern int const dbx64_register_map[76];
extern int const svr4_dbx_register_map[76];
# 2323 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum processor_type
{
  PROCESSOR_GENERIC = 0,
  PROCESSOR_I386,
  PROCESSOR_I486,
  PROCESSOR_PENTIUM,
  PROCESSOR_LAKEMONT,
  PROCESSOR_PENTIUMPRO,
  PROCESSOR_PENTIUM4,
  PROCESSOR_NOCONA,
  PROCESSOR_CORE2,
  PROCESSOR_NEHALEM,
  PROCESSOR_SANDYBRIDGE,
  PROCESSOR_HASWELL,
  PROCESSOR_BONNELL,
  PROCESSOR_SILVERMONT,
  PROCESSOR_GOLDMONT,
  PROCESSOR_GOLDMONT_PLUS,
  PROCESSOR_TREMONT,
  PROCESSOR_KNL,
  PROCESSOR_KNM,
  PROCESSOR_SKYLAKE,
  PROCESSOR_SKYLAKE_AVX512,
  PROCESSOR_CANNONLAKE,
  PROCESSOR_ICELAKE_CLIENT,
  PROCESSOR_ICELAKE_SERVER,
  PROCESSOR_CASCADELAKE,
  PROCESSOR_TIGERLAKE,
  PROCESSOR_COOPERLAKE,
  PROCESSOR_SAPPHIRERAPIDS,
  PROCESSOR_ALDERLAKE,
  PROCESSOR_INTEL,
  PROCESSOR_GEODE,
  PROCESSOR_K6,
  PROCESSOR_ATHLON,
  PROCESSOR_K8,
  PROCESSOR_AMDFAM10,
  PROCESSOR_BDVER1,
  PROCESSOR_BDVER2,
  PROCESSOR_BDVER3,
  PROCESSOR_BDVER4,
  PROCESSOR_BTVER1,
  PROCESSOR_BTVER2,
  PROCESSOR_ZNVER1,
  PROCESSOR_ZNVER2,
  PROCESSOR_max
};


extern const char *const processor_names[];

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-bitmask.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/wide-int-bitmask.h"
class wide_int_bitmask
{
public:
  inline wide_int_bitmask ();
  inline wide_int_bitmask (uint64_t l);
  inline wide_int_bitmask (uint64_t l, uint64_t h);
  inline wide_int_bitmask &operator &= (wide_int_bitmask);
  inline wide_int_bitmask &operator |= (wide_int_bitmask);
  inline wide_int_bitmask operator ~ () const;
  inline wide_int_bitmask operator & (wide_int_bitmask) const;
  inline wide_int_bitmask operator | (wide_int_bitmask) const;
  inline wide_int_bitmask operator >> (int);
  inline wide_int_bitmask operator << (int);
  inline bool operator == (wide_int_bitmask) const;
  inline bool operator != (wide_int_bitmask) const;
  uint64_t low, high;
};

inline
wide_int_bitmask::wide_int_bitmask ()
: low (0), high (0)
{
}

inline
wide_int_bitmask::wide_int_bitmask (uint64_t l)
: low (l), high (0)
{
}

inline
wide_int_bitmask::wide_int_bitmask (uint64_t l, uint64_t h)
: low (l), high (h)
{
}

inline wide_int_bitmask &
wide_int_bitmask::operator &= (wide_int_bitmask b)
{
  low &= b.low;
  high &= b.high;
  return *this;
}

inline wide_int_bitmask &
wide_int_bitmask::operator |= (wide_int_bitmask b)
{
  low |= b.low;
  high |= b.high;
  return *this;
}

inline wide_int_bitmask
wide_int_bitmask::operator ~ () const
{
  wide_int_bitmask ret (~low, ~high);
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator | (wide_int_bitmask b) const
{
  wide_int_bitmask ret (low | b.low, high | b.high);
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator & (wide_int_bitmask b) const
{
  wide_int_bitmask ret (low & b.low, high & b.high);
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator << (int amount)
{
  wide_int_bitmask ret;
  if (amount >= 64)
    {
      ret.low = 0;
      ret.high = low << (amount - 64);
    }
  else if (amount == 0)
    ret = *this;
  else
    {
      ret.low = low << amount;
      ret.high = (low >> (64 - amount)) | (high << amount);
    }
  return ret;
}

inline wide_int_bitmask
wide_int_bitmask::operator >> (int amount)
{
  wide_int_bitmask ret;
  if (amount >= 64)
    {
      ret.low = high >> (amount - 64);
      ret.high = 0;
    }
  else if (amount == 0)
    ret = *this;
  else
    {
      ret.low = (high << (64 - amount)) | (low >> amount);
      ret.high = high >> amount;
    }
  return ret;
}

inline bool
wide_int_bitmask::operator == (wide_int_bitmask b) const
{
  return low == b.low && high == b.high;
}

inline bool
wide_int_bitmask::operator != (wide_int_bitmask b) const
{
  return low != b.low || high != b.high;
}
# 2375 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2

const wide_int_bitmask PTA_3DNOW (1UL << 0);
const wide_int_bitmask PTA_3DNOW_A (1UL << 1);
const wide_int_bitmask PTA_64BIT (1UL << 2);
const wide_int_bitmask PTA_ABM (1UL << 3);
const wide_int_bitmask PTA_AES (1UL << 4);
const wide_int_bitmask PTA_AVX (1UL << 5);
const wide_int_bitmask PTA_BMI (1UL << 6);
const wide_int_bitmask PTA_CX16 (1UL << 7);
const wide_int_bitmask PTA_F16C (1UL << 8);
const wide_int_bitmask PTA_FMA (1UL << 9);
const wide_int_bitmask PTA_FMA4 (1UL << 10);
const wide_int_bitmask PTA_FSGSBASE (1UL << 11);
const wide_int_bitmask PTA_LWP (1UL << 12);
const wide_int_bitmask PTA_LZCNT (1UL << 13);
const wide_int_bitmask PTA_MMX (1UL << 14);
const wide_int_bitmask PTA_MOVBE (1UL << 15);
const wide_int_bitmask PTA_NO_SAHF (1UL << 16);
const wide_int_bitmask PTA_PCLMUL (1UL << 17);
const wide_int_bitmask PTA_POPCNT (1UL << 18);
const wide_int_bitmask PTA_PREFETCH_SSE (1UL << 19);
const wide_int_bitmask PTA_RDRND (1UL << 20);
const wide_int_bitmask PTA_SSE (1UL << 21);
const wide_int_bitmask PTA_SSE2 (1UL << 22);
const wide_int_bitmask PTA_SSE3 (1UL << 23);
const wide_int_bitmask PTA_SSE4_1 (1UL << 24);
const wide_int_bitmask PTA_SSE4_2 (1UL << 25);
const wide_int_bitmask PTA_SSE4A (1UL << 26);
const wide_int_bitmask PTA_SSSE3 (1UL << 27);
const wide_int_bitmask PTA_TBM (1UL << 28);
const wide_int_bitmask PTA_XOP (1UL << 29);
const wide_int_bitmask PTA_AVX2 (1UL << 30);
const wide_int_bitmask PTA_BMI2 (1UL << 31);
const wide_int_bitmask PTA_RTM (1UL << 32);
const wide_int_bitmask PTA_HLE (1UL << 33);
const wide_int_bitmask PTA_PRFCHW (1UL << 34);
const wide_int_bitmask PTA_RDSEED (1UL << 35);
const wide_int_bitmask PTA_ADX (1UL << 36);
const wide_int_bitmask PTA_FXSR (1UL << 37);
const wide_int_bitmask PTA_XSAVE (1UL << 38);
const wide_int_bitmask PTA_XSAVEOPT (1UL << 39);
const wide_int_bitmask PTA_AVX512F (1UL << 40);
const wide_int_bitmask PTA_AVX512ER (1UL << 41);
const wide_int_bitmask PTA_AVX512PF (1UL << 42);
const wide_int_bitmask PTA_AVX512CD (1UL << 43);

const wide_int_bitmask PTA_SHA (1UL << 45);
const wide_int_bitmask PTA_PREFETCHWT1 (1UL << 46);
const wide_int_bitmask PTA_CLFLUSHOPT (1UL << 47);
const wide_int_bitmask PTA_XSAVEC (1UL << 48);
const wide_int_bitmask PTA_XSAVES (1UL << 49);
const wide_int_bitmask PTA_AVX512DQ (1UL << 50);
const wide_int_bitmask PTA_AVX512BW (1UL << 51);
const wide_int_bitmask PTA_AVX512VL (1UL << 52);
const wide_int_bitmask PTA_AVX512IFMA (1UL << 53);
const wide_int_bitmask PTA_AVX512VBMI (1UL << 54);
const wide_int_bitmask PTA_CLWB (1UL << 55);
const wide_int_bitmask PTA_MWAITX (1UL << 56);
const wide_int_bitmask PTA_CLZERO (1UL << 57);
const wide_int_bitmask PTA_NO_80387 (1UL << 58);
const wide_int_bitmask PTA_PKU (1UL << 59);
const wide_int_bitmask PTA_AVX5124VNNIW (1UL << 60);
const wide_int_bitmask PTA_AVX5124FMAPS (1UL << 61);
const wide_int_bitmask PTA_AVX512VPOPCNTDQ (1UL << 62);
const wide_int_bitmask PTA_SGX (1UL << 63);
const wide_int_bitmask PTA_AVX512VNNI (0, 1UL);
const wide_int_bitmask PTA_GFNI (0, 1UL << 1);
const wide_int_bitmask PTA_VAES (0, 1UL << 2);
const wide_int_bitmask PTA_AVX512VBMI2 (0, 1UL << 3);
const wide_int_bitmask PTA_VPCLMULQDQ (0, 1UL << 4);
const wide_int_bitmask PTA_AVX512BITALG (0, 1UL << 5);
const wide_int_bitmask PTA_RDPID (0, 1UL << 6);
const wide_int_bitmask PTA_PCONFIG (0, 1UL << 7);
const wide_int_bitmask PTA_WBNOINVD (0, 1UL << 8);
const wide_int_bitmask PTA_AVX512VP2INTERSECT (0, 1UL << 9);
const wide_int_bitmask PTA_PTWRITE (0, 1UL << 10);
const wide_int_bitmask PTA_AVX512BF16 (0, 1UL << 11);
const wide_int_bitmask PTA_WAITPKG (0, 1UL << 12);
const wide_int_bitmask PTA_MOVDIRI(0, 1UL << 13);
const wide_int_bitmask PTA_MOVDIR64B(0, 1UL << 14);
const wide_int_bitmask PTA_ENQCMD (0, 1UL << 15);
const wide_int_bitmask PTA_CLDEMOTE (0, 1UL << 16);
const wide_int_bitmask PTA_SERIALIZE (0, 1UL << 17);
const wide_int_bitmask PTA_TSXLDTRK (0, 1UL << 18);

const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2
  | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;
const wide_int_bitmask PTA_NEHALEM = PTA_CORE2 | PTA_SSE4_1 | PTA_SSE4_2
  | PTA_POPCNT;
const wide_int_bitmask PTA_WESTMERE = PTA_NEHALEM | PTA_PCLMUL;
const wide_int_bitmask PTA_SANDYBRIDGE = PTA_WESTMERE | PTA_AVX | PTA_XSAVE
  | PTA_XSAVEOPT;
const wide_int_bitmask PTA_IVYBRIDGE = PTA_SANDYBRIDGE | PTA_FSGSBASE
  | PTA_RDRND | PTA_F16C;
const wide_int_bitmask PTA_HASWELL = PTA_IVYBRIDGE | PTA_AVX2 | PTA_BMI
  | PTA_BMI2 | PTA_LZCNT | PTA_FMA | PTA_MOVBE | PTA_HLE;
const wide_int_bitmask PTA_BROADWELL = PTA_HASWELL | PTA_ADX | PTA_PRFCHW
  | PTA_RDSEED;
const wide_int_bitmask PTA_SKYLAKE = PTA_BROADWELL | PTA_AES | PTA_CLFLUSHOPT
  | PTA_XSAVEC | PTA_XSAVES | PTA_SGX;
const wide_int_bitmask PTA_SKYLAKE_AVX512 = PTA_SKYLAKE | PTA_AVX512F
  | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU
  | PTA_CLWB;
const wide_int_bitmask PTA_CASCADELAKE = PTA_SKYLAKE_AVX512 | PTA_AVX512VNNI;
const wide_int_bitmask PTA_COOPERLAKE = PTA_CASCADELAKE | PTA_AVX512BF16;
const wide_int_bitmask PTA_CANNONLAKE = PTA_SKYLAKE | PTA_AVX512F
  | PTA_AVX512CD | PTA_AVX512VL | PTA_AVX512BW | PTA_AVX512DQ | PTA_PKU
  | PTA_AVX512VBMI | PTA_AVX512IFMA | PTA_SHA;
const wide_int_bitmask PTA_ICELAKE_CLIENT = PTA_CANNONLAKE | PTA_AVX512VNNI
  | PTA_GFNI | PTA_VAES | PTA_AVX512VBMI2 | PTA_VPCLMULQDQ | PTA_AVX512BITALG
  | PTA_RDPID | PTA_AVX512VPOPCNTDQ;
const wide_int_bitmask PTA_ICELAKE_SERVER = PTA_ICELAKE_CLIENT | PTA_PCONFIG
  | PTA_WBNOINVD | PTA_CLWB;
const wide_int_bitmask PTA_TIGERLAKE = PTA_ICELAKE_CLIENT | PTA_MOVDIRI
  | PTA_MOVDIR64B | PTA_CLWB | PTA_AVX512VP2INTERSECT;
const wide_int_bitmask PTA_SAPPHIRERAPIDS = PTA_COOPERLAKE | PTA_MOVDIRI
  | PTA_MOVDIR64B | PTA_AVX512VP2INTERSECT | PTA_ENQCMD | PTA_CLDEMOTE
  | PTA_PTWRITE | PTA_WAITPKG | PTA_SERIALIZE | PTA_TSXLDTRK;
const wide_int_bitmask PTA_ALDERLAKE = PTA_SKYLAKE | PTA_CLDEMOTE | PTA_PTWRITE
  | PTA_WAITPKG | PTA_SERIALIZE;
const wide_int_bitmask PTA_KNL = PTA_BROADWELL | PTA_AVX512PF | PTA_AVX512ER
  | PTA_AVX512F | PTA_AVX512CD;
const wide_int_bitmask PTA_BONNELL = PTA_CORE2 | PTA_MOVBE;
const wide_int_bitmask PTA_SILVERMONT = PTA_WESTMERE | PTA_MOVBE | PTA_RDRND;
const wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_AES | PTA_SHA | PTA_XSAVE
  | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT | PTA_XSAVEOPT
  | PTA_FSGSBASE;
const wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID
  | PTA_SGX | PTA_PTWRITE;
const wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB
  | PTA_GFNI;
const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW
  | PTA_AVX5124FMAPS | PTA_AVX512VPOPCNTDQ;



# 1 "./insn-attr-common.h" 1






enum attr_cpu {CPU_NONE, CPU_PENTIUM, CPU_PENTIUMPRO, CPU_GEODE, CPU_K6, CPU_ATHLON, CPU_K8, CPU_CORE2, CPU_NEHALEM, CPU_ATOM, CPU_SLM, CPU_GLM, CPU_HASWELL, CPU_GENERIC, CPU_AMDFAM10, CPU_BDVER1, CPU_BDVER2, CPU_BDVER3, CPU_BDVER4, CPU_BTVER2, CPU_ZNVER1, CPU_ZNVER2};
enum attr_type {TYPE_OTHER, TYPE_MULTI, TYPE_ALU, TYPE_ALU1, TYPE_NEGNOT, TYPE_IMOV, TYPE_IMOVX, TYPE_LEA, TYPE_INCDEC, TYPE_ISHIFT, TYPE_ISHIFTX, TYPE_ISHIFT1, TYPE_ROTATE, TYPE_ROTATEX, TYPE_ROTATE1, TYPE_IMUL, TYPE_IMULX, TYPE_IDIV, TYPE_ICMP, TYPE_TEST, TYPE_IBR, TYPE_SETCC, TYPE_ICMOV, TYPE_PUSH, TYPE_POP, TYPE_CALL, TYPE_CALLV, TYPE_LEAVE, TYPE_STR, TYPE_BITMANIP, TYPE_FMOV, TYPE_FOP, TYPE_FSGN, TYPE_FMUL, TYPE_FDIV, TYPE_FPSPC, TYPE_FCMOV, TYPE_FCMP, TYPE_FXCH, TYPE_FISTP, TYPE_FISTTP, TYPE_FRNDINT, TYPE_SSE, TYPE_SSEMOV, TYPE_SSEADD, TYPE_SSEADD1, TYPE_SSEIADD, TYPE_SSEIADD1, TYPE_SSEMUL, TYPE_SSEIMUL, TYPE_SSEDIV, TYPE_SSELOG, TYPE_SSELOG1, TYPE_SSEISHFT, TYPE_SSEISHFT1, TYPE_SSECMP, TYPE_SSECOMI, TYPE_SSECVT, TYPE_SSECVT1, TYPE_SSEICVT, TYPE_SSEINS, TYPE_SSESHUF, TYPE_SSESHUF1, TYPE_SSEMULADD, TYPE_SSE4ARG, TYPE_LWP, TYPE_MSKMOV, TYPE_MSKLOG, TYPE_MMX, TYPE_MMXMOV, TYPE_MMXADD, TYPE_MMXMUL, TYPE_MMXCMP, TYPE_MMXCVT, TYPE_MMXSHFT};
enum attr_mode {MODE_UNKNOWN, MODE_NONE, MODE_QI, MODE_HI, MODE_SI, MODE_DI, MODE_TI, MODE_OI, MODE_XI, MODE_SF, MODE_DF, MODE_XF, MODE_TF, MODE_V16SF, MODE_V8SF, MODE_V4DF, MODE_V4SF, MODE_V2DF, MODE_V2SF, MODE_V1DF, MODE_V8DF};
enum attr_unit {UNIT_INTEGER, UNIT_I387, UNIT_SSE, UNIT_MMX, UNIT_UNKNOWN};
enum attr_prefix {PREFIX_ORIG, PREFIX_VEX, PREFIX_MAYBE_VEX, PREFIX_EVEX, PREFIX_MAYBE_EVEX};
enum attr_memory {MEMORY_NONE, MEMORY_LOAD, MEMORY_STORE, MEMORY_BOTH, MEMORY_UNKNOWN};
enum attr_imm_disp {IMM_DISP_FALSE, IMM_DISP_TRUE, IMM_DISP_UNKNOWN};
enum attr_fp_int_src {FP_INT_SRC_FALSE, FP_INT_SRC_TRUE};
enum attr_i387_cw {I387_CW_ROUNDEVEN, I387_CW_FLOOR, I387_CW_CEIL, I387_CW_TRUNC, I387_CW_UNINITIALIZED, I387_CW_ANY};
enum attr_avx_partial_xmm_update {AVX_PARTIAL_XMM_UPDATE_FALSE, AVX_PARTIAL_XMM_UPDATE_TRUE};
enum attr_use_carry {USE_CARRY_0, USE_CARRY_1};
enum attr_movu {MOVU_0, MOVU_1};
enum attr_isa {ISA_BASE, ISA_X64, ISA_X64_SSE2, ISA_X64_SSE4, ISA_X64_SSE4_NOAVX, ISA_X64_AVX, ISA_NOX64, ISA_SSE_NOAVX, ISA_SSE2, ISA_SSE2_NOAVX, ISA_SSE3, ISA_SSE3_NOAVX, ISA_SSE4, ISA_SSE4_NOAVX, ISA_AVX, ISA_NOAVX, ISA_AVX2, ISA_NOAVX2, ISA_BMI, ISA_BMI2, ISA_FMA4, ISA_FMA, ISA_AVX512F, ISA_NOAVX512F, ISA_AVX512BW, ISA_NOAVX512BW, ISA_AVX512DQ, ISA_NOAVX512DQ, ISA_AVX512VL, ISA_NOAVX512VL, ISA_X64_AVX512DQ, ISA_X64_AVX512BW};
enum attr_mmx_isa {MMX_ISA_BASE, MMX_ISA_NATIVE, MMX_ISA_SSE, MMX_ISA_SSE_NOAVX, MMX_ISA_AVX};
enum attr_pent_prefix {PENT_PREFIX_FALSE, PENT_PREFIX_TRUE};
enum attr_pent_pair {PENT_PAIR_UV, PENT_PAIR_PU, PENT_PAIR_PV, PENT_PAIR_NP};
enum attr_athlon_decode {ATHLON_DECODE_DIRECT, ATHLON_DECODE_VECTOR, ATHLON_DECODE_DOUBLE};
enum attr_amdfam10_decode {AMDFAM10_DECODE_DIRECT, AMDFAM10_DECODE_VECTOR, AMDFAM10_DECODE_DOUBLE};
enum attr_bdver1_decode {BDVER1_DECODE_DIRECT, BDVER1_DECODE_VECTOR, BDVER1_DECODE_DOUBLE};
enum attr_btver2_decode {BTVER2_DECODE_DIRECT, BTVER2_DECODE_VECTOR, BTVER2_DECODE_DOUBLE};
enum attr_btver2_sse_attr {BTVER2_SSE_ATTR_OTHER, BTVER2_SSE_ATTR_RCP, BTVER2_SSE_ATTR_SQRT, BTVER2_SSE_ATTR_MAXMIN};
enum attr_znver1_decode {ZNVER1_DECODE_DIRECT, ZNVER1_DECODE_VECTOR, ZNVER1_DECODE_DOUBLE};
enum attr_atom_unit {ATOM_UNIT_SISHUF, ATOM_UNIT_SIMUL, ATOM_UNIT_JEU, ATOM_UNIT_COMPLEX, ATOM_UNIT_OTHER};
enum attr_atom_sse_attr {ATOM_SSE_ATTR_RCP, ATOM_SSE_ATTR_MOVDUP, ATOM_SSE_ATTR_LFENCE, ATOM_SSE_ATTR_FENCE, ATOM_SSE_ATTR_PREFETCH, ATOM_SSE_ATTR_SQRT, ATOM_SSE_ATTR_MXCSR, ATOM_SSE_ATTR_OTHER};
enum attr_i7_domain {I7_DOMAIN_INT, I7_DOMAIN_FLOAT, I7_DOMAIN_SIMD};
enum attr_hsw_domain {HSW_DOMAIN_INT, HSW_DOMAIN_FLOAT, HSW_DOMAIN_SIMD};
enum attr_unord_subst {UNORD_SUBST_NO, UNORD_SUBST_YES};
enum attr_mask {MASK_NO, MASK_YES};
enum attr_merge_mask {MERGE_MASK_NO, MERGE_MASK_YES};
enum attr_mask_scalar_merge {MASK_SCALAR_MERGE_NO, MASK_SCALAR_MERGE_YES};
enum attr_sd {SD_NO, SD_YES};
enum attr_round {ROUND_NO, ROUND_YES};
enum attr_round_saeonly {ROUND_SAEONLY_NO, ROUND_SAEONLY_YES};
enum attr_round_expand {ROUND_EXPAND_NO, ROUND_EXPAND_YES};
enum attr_round_saeonly_expand {ROUND_SAEONLY_EXPAND_NO, ROUND_SAEONLY_EXPAND_YES};
enum attr_mask_expand4 {MASK_EXPAND4_NO, MASK_EXPAND4_YES};
enum attr_mask_scalar {MASK_SCALAR_NO, MASK_SCALAR_YES};
enum attr_round_scalar {ROUND_SCALAR_NO, ROUND_SCALAR_YES};
enum attr_round_saeonly_scalar {ROUND_SAEONLY_SCALAR_NO, ROUND_SAEONLY_SCALAR_YES};
enum attr_maskz_half {MASKZ_HALF_NO, MASKZ_HALF_YES};
# 2512 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/common/config/i386/i386-cpuinfo.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/common/config/i386/i386-cpuinfo.h"
enum processor_vendor
{
  VENDOR_INTEL = 1,
  VENDOR_AMD,
  VENDOR_OTHER,
  VENDOR_CENTAUR,
  VENDOR_CYRIX,
  VENDOR_NSC,
  BUILTIN_VENDOR_MAX = VENDOR_OTHER,
  VENDOR_MAX
};



enum processor_types
{
  INTEL_BONNELL = 1,
  INTEL_CORE2,
  INTEL_COREI7,
  AMDFAM10H,
  AMDFAM15H,
  INTEL_SILVERMONT,
  INTEL_KNL,
  AMD_BTVER1,
  AMD_BTVER2,
  AMDFAM17H,
  INTEL_KNM,
  INTEL_GOLDMONT,
  INTEL_GOLDMONT_PLUS,
  INTEL_TREMONT,
  CPU_TYPE_MAX,
  BUILTIN_CPU_TYPE_MAX = CPU_TYPE_MAX
};

enum processor_subtypes
{
  INTEL_COREI7_NEHALEM = 1,
  INTEL_COREI7_WESTMERE,
  INTEL_COREI7_SANDYBRIDGE,
  AMDFAM10H_BARCELONA,
  AMDFAM10H_SHANGHAI,
  AMDFAM10H_ISTANBUL,
  AMDFAM15H_BDVER1,
  AMDFAM15H_BDVER2,
  AMDFAM15H_BDVER3,
  AMDFAM15H_BDVER4,
  AMDFAM17H_ZNVER1,
  INTEL_COREI7_IVYBRIDGE,
  INTEL_COREI7_HASWELL,
  INTEL_COREI7_BROADWELL,
  INTEL_COREI7_SKYLAKE,
  INTEL_COREI7_SKYLAKE_AVX512,
  INTEL_COREI7_CANNONLAKE,
  INTEL_COREI7_ICELAKE_CLIENT,
  INTEL_COREI7_ICELAKE_SERVER,
  AMDFAM17H_ZNVER2,
  INTEL_COREI7_CASCADELAKE,
  INTEL_COREI7_TIGERLAKE,
  INTEL_COREI7_COOPERLAKE,
  INTEL_COREI7_SAPPHIRERAPIDS,
  INTEL_COREI7_ALDERLAKE,
  CPU_SUBTYPE_MAX
};





enum feature_priority
{
  P_NONE = 0,
  P_MMX,
  P_SSE,
  P_SSE2,
  P_SSE3,
  P_SSSE3,
  P_PROC_SSSE3,
  P_SSE4_A,
  P_PROC_SSE4_A,
  P_SSE4_1,
  P_SSE4_2,
  P_PROC_SSE4_2,
  P_POPCNT,
  P_AES,
  P_PCLMUL,
  P_AVX,
  P_PROC_AVX,
  P_BMI,
  P_PROC_BMI,
  P_FMA4,
  P_XOP,
  P_PROC_XOP,
  P_FMA,
  P_PROC_FMA,
  P_BMI2,
  P_AVX2,
  P_PROC_AVX2,
  P_AVX512F,
  P_PROC_AVX512F,
  P_PROC_DYNAMIC
};



enum processor_features
{
  FEATURE_CMOV = 0,
  FEATURE_MMX,
  FEATURE_POPCNT,
  FEATURE_SSE,
  FEATURE_SSE2,
  FEATURE_SSE3,
  FEATURE_SSSE3,
  FEATURE_SSE4_1,
  FEATURE_SSE4_2,
  FEATURE_AVX,
  FEATURE_AVX2,
  FEATURE_SSE4_A,
  FEATURE_FMA4,
  FEATURE_XOP,
  FEATURE_FMA,
  FEATURE_AVX512F,
  FEATURE_BMI,
  FEATURE_BMI2,
  FEATURE_AES,
  FEATURE_PCLMUL,
  FEATURE_AVX512VL,
  FEATURE_AVX512BW,
  FEATURE_AVX512DQ,
  FEATURE_AVX512CD,
  FEATURE_AVX512ER,
  FEATURE_AVX512PF,
  FEATURE_AVX512VBMI,
  FEATURE_AVX512IFMA,
  FEATURE_AVX5124VNNIW,
  FEATURE_AVX5124FMAPS,
  FEATURE_AVX512VPOPCNTDQ,
  FEATURE_AVX512VBMI2,
  FEATURE_GFNI,
  FEATURE_VPCLMULQDQ,
  FEATURE_AVX512VNNI,
  FEATURE_AVX512BITALG,
  FEATURE_AVX512BF16,
  FEATURE_AVX512VP2INTERSECT,
  FEATURE_3DNOW,
  FEATURE_3DNOWP,
  FEATURE_ADX,
  FEATURE_ABM,
  FEATURE_CLDEMOTE,
  FEATURE_CLFLUSHOPT,
  FEATURE_CLWB,
  FEATURE_CLZERO,
  FEATURE_CMPXCHG16B,
  FEATURE_CMPXCHG8B,
  FEATURE_ENQCMD,
  FEATURE_F16C,
  FEATURE_FSGSBASE,
  FEATURE_FXSAVE,
  FEATURE_HLE,
  FEATURE_IBT,
  FEATURE_LAHF_LM,
  FEATURE_LM,
  FEATURE_LWP,
  FEATURE_LZCNT,
  FEATURE_MOVBE,
  FEATURE_MOVDIR64B,
  FEATURE_MOVDIRI,
  FEATURE_MWAITX,
  FEATURE_OSXSAVE,
  FEATURE_PCONFIG,
  FEATURE_PKU,
  FEATURE_PREFETCHWT1,
  FEATURE_PRFCHW,
  FEATURE_PTWRITE,
  FEATURE_RDPID,
  FEATURE_RDRND,
  FEATURE_RDSEED,
  FEATURE_RTM,
  FEATURE_SERIALIZE,
  FEATURE_SGX,
  FEATURE_SHA,
  FEATURE_SHSTK,
  FEATURE_TBM,
  FEATURE_TSXLDTRK,
  FEATURE_VAES,
  FEATURE_WAITPKG,
  FEATURE_WBNOINVD,
  FEATURE_XSAVE,
  FEATURE_XSAVEC,
  FEATURE_XSAVEOPT,
  FEATURE_XSAVES,
  CPU_FEATURE_MAX
};
# 2514 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h" 2

class pta
{
public:
  const char *const name;
  const enum processor_type processor;
  const enum attr_cpu schedule;
  const wide_int_bitmask flags;
  const int model;
  const enum feature_priority priority;
};

extern const pta processor_alias_table[];
extern int const pta_size;
extern unsigned int const num_arch_names;




extern enum processor_type ix86_tune;
extern enum processor_type ix86_arch;






extern unsigned int ix86_preferred_stack_boundary;
extern unsigned int ix86_incoming_stack_boundary;


extern enum reg_class const regclass_map[76];

enum ix86_fpcmp_strategy {
  IX86_FPCMP_SAHF,
  IX86_FPCMP_COMI,
  IX86_FPCMP_ARITH
};
# 2568 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
enum ix86_stack_slot
{
  SLOT_TEMP = 0,
  SLOT_CW_STORED,
  SLOT_CW_ROUNDEVEN,
  SLOT_CW_TRUNC,
  SLOT_CW_FLOOR,
  SLOT_CW_CEIL,
  SLOT_STV_TEMP,
  MAX_386_STACK_LOCALS
};

enum ix86_entity
{
  X86_DIRFLAG = 0,
  AVX_U128,
  I387_ROUNDEVEN,
  I387_TRUNC,
  I387_FLOOR,
  I387_CEIL,
  MAX_386_ENTITIES
};

enum x86_dirflag_state
{
  X86_DIRFLAG_RESET,
  X86_DIRFLAG_ANY
};

enum avx_u128_state
{
  AVX_U128_CLEAN,
  AVX_U128_DIRTY,
  AVX_U128_ANY
};
# 2681 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
struct ix86_frame
{
  int nsseregs;
  int nregs;
  int va_arg_size;
  int red_zone_size;
  int outgoing_arguments_size;


  long frame_pointer_offset;
  long hard_frame_pointer_offset;
  long stack_pointer_offset;
  long hfp_save_offset;
  long reg_save_offset;
  long stack_realign_allocate;
  long stack_realign_offset;
  long sse_reg_save_offset;



  bool save_regs_using_mov;



  bool expensive_p;
  int expensive_count;
};





struct machine_frame_state
{



  rtx cfa_reg;
  long cfa_offset;





  long sp_offset;
  long fp_offset;





  int red_zone_offset;





  unsigned int sp_valid : 1;
  unsigned int fp_valid : 1;
  unsigned int drap_valid : 1;




  unsigned int realigned : 1;






  unsigned int sp_realigned : 1;



  long sp_realigned_fp_last;





  long sp_realigned_offset;
};


struct seh_frame_state;

enum function_type
{
  TYPE_UNKNOWN = 0,
  TYPE_NORMAL,


  TYPE_INTERRUPT,



  TYPE_EXCEPTION
};

enum queued_insn_type
{
  TYPE_NONE = 0,
  TYPE_ENDBR,
  TYPE_PATCHABLE_AREA
};

struct machine_function {
  struct stack_local_entry *stack_locals;
  int varargs_gpr_size;
  int varargs_fpr_size;
  int optimize_mode_switching[MAX_386_ENTITIES];


  struct ix86_frame frame;






  rtx split_stack_varargs_pointer;



  enum calling_abi call_abi : 8;


  unsigned int accesses_prev_frame : 1;



  unsigned int use_fast_prologue_epilogue : 1;



  unsigned int pc_thunk_call_expanded : 1;
# 2828 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
  unsigned int tls_descriptor_call_expanded_p : 1;



  unsigned int static_chain_on_stack : 1;


  unsigned int no_drap_save_restore : 1;


  enum function_type func_type : 2;


  enum indirect_branch indirect_branch_type : 3;



  unsigned int has_local_indirect_jump : 1;


  enum indirect_branch function_return_type : 3;



  unsigned int no_caller_saved_registers : 1;






  unsigned int arg_reg_available : 1;



  unsigned int call_ms2sysv : 1;



  unsigned int call_ms2sysv_pad_in : 1;





  unsigned int call_ms2sysv_extra_regs:3;


  unsigned int outgoing_args_on_stack : 1;


  enum queued_insn_type insn_queued_at_entrance : 2;


  unsigned int function_label_emitted : 1;


  unsigned int stack_frame_required : 1;


  unsigned int max_used_stack_alignment;



  struct machine_frame_state fs;


  struct seh_frame_state * seh;
};

extern tree sysv_va_list_type_node;
extern tree ms_va_list_type_node;
# 2942 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern void debug_ready_dispatch (void);
extern void debug_dispatch_window (int);
# 2998 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/i386.h"
extern enum attr_cpu ix86_schedule;
# 27 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/unix.h" 1
# 28 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/att.h" 1
# 29 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/dbxelf.h" 1
# 30 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/elfos.h" 1
# 31 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/gnu-user.h" 1
# 32 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/glibc-stdint.h" 1
# 33 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/x86-64.h" 1
# 34 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/gnu-user-common.h" 1
# 35 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/gnu-user64.h" 1
# 36 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/linux.h" 1
# 37 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/linux-android.h" 1
# 38 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/linux-common.h" 1
# 71 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/linux-common.h"
extern void file_end_indicate_exec_stack_and_cet (void);
# 39 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/i386/linux64.h" 1
# 40 "./tm.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/config/initfini-array.h" 1
# 41 "./tm.h" 2


# 1 "./insn-flags.h" 1
# 7286 "./insn-flags.h"
extern rtx gen_x86_sahf_1 (rtx);
extern rtx gen_insvhi_1 (rtx, rtx);
extern rtx gen_insvsi_1 (rtx, rtx);
extern rtx gen_insvdi_1 (rtx, rtx);
extern rtx gen_zero_extendqidi2 (rtx, rtx);
extern rtx gen_zero_extendhidi2 (rtx, rtx);
extern rtx gen_zero_extendqisi2_and (rtx, rtx);
extern rtx gen_zero_extendhisi2_and (rtx, rtx);
extern rtx gen_zero_extendqihi2_and (rtx, rtx);
extern rtx gen_extendsidi2_1 (rtx, rtx);
extern rtx gen_extendqidi2 (rtx, rtx);
extern rtx gen_extendhidi2 (rtx, rtx);
extern rtx gen_extendhisi2 (rtx, rtx);
extern rtx gen_extendqisi2 (rtx, rtx);
extern rtx gen_extendqihi2 (rtx, rtx);
extern rtx gen_truncdfsf2 (rtx, rtx);
extern rtx gen_truncxfsf2 (rtx, rtx);
extern rtx gen_truncxfdf2 (rtx, rtx);
extern rtx gen_fixuns_truncsfdi2 (rtx, rtx);
extern rtx gen_fixuns_truncdfdi2 (rtx, rtx);
extern rtx gen_fixuns_truncsfsi2_avx512f (rtx, rtx);
extern rtx gen_fixuns_truncdfsi2_avx512f (rtx, rtx);
extern rtx gen_fix_truncsfsi_sse (rtx, rtx);
extern rtx gen_fix_truncsfdi_sse (rtx, rtx);
extern rtx gen_fix_truncdfsi_sse (rtx, rtx);
extern rtx gen_fix_truncdfdi_sse (rtx, rtx);
extern rtx gen_fix_trunchi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_truncsi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_truncdi_i387_fisttp (rtx, rtx);
extern rtx gen_fix_truncdi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_trunchi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncsi_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_fnstcw_1 (rtx);
extern rtx gen_floathisf2 (rtx, rtx);
extern rtx gen_floathidf2 (rtx, rtx);
extern rtx gen_floathixf2 (rtx, rtx);
extern rtx gen_floatsixf2 (rtx, rtx);
extern rtx gen_floatdixf2 (rtx, rtx);
extern rtx gen_floatdisf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_floatdidf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_floatdixf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_floatunssisf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_floatunssidf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_floatunssixf2_i387_with_xmm (rtx, rtx, rtx);
extern rtx gen_addsi_1_zext (rtx, rtx, rtx);
extern rtx gen_addvqi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_addvhi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_addvsi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_addvdi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_subvqi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_subvhi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_subvsi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_subvdi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_addqi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addhi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addsi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_adddi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addcarrysi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addcarrydi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subqi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subhi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subdi3_carry (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subsi3_carry_ccc (rtx, rtx, rtx);
extern rtx gen_subdi3_carry_ccc (rtx, rtx, rtx);
extern rtx gen_subsi3_carry_ccgz (rtx, rtx, rtx);
extern rtx gen_subdi3_carry_ccgz (rtx, rtx, rtx);
extern rtx gen_subborrowsi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subborrowdi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_divmoddi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmoddi4_1 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4_zext_1 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4_zext_1 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4_zext_2 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4_zext_2 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodhiqi3 (rtx, rtx, rtx);
extern rtx gen_udivmodhiqi3 (rtx, rtx, rtx);
extern rtx gen_copysignsf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysigndf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysigntf3_const (rtx, rtx, rtx, rtx);
extern rtx gen_copysignsf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_copysigndf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_copysigntf3_var (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorsignsf3_1 (rtx, rtx, rtx, rtx);
extern rtx gen_xorsigndf3_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_64_shld (rtx, rtx, rtx);
extern rtx gen_x86_shld (rtx, rtx, rtx);
extern rtx gen_x86_64_shrd (rtx, rtx, rtx);
extern rtx gen_x86_shrd (rtx, rtx, rtx);
extern rtx gen_ashrsi3_cvt (rtx, rtx, rtx);
extern rtx gen_ashrdi3_cvt (rtx, rtx, rtx);
extern rtx gen_ix86_rotldi3_doubleword (rtx, rtx, rtx);
extern rtx gen_ix86_rotlti3_doubleword (rtx, rtx, rtx);
extern rtx gen_ix86_rotrdi3_doubleword (rtx, rtx, rtx);
extern rtx gen_ix86_rotrti3_doubleword (rtx, rtx, rtx);
extern rtx gen_setcc_sf_sse (rtx, rtx, rtx, rtx);
extern rtx gen_setcc_df_sse (rtx, rtx, rtx, rtx);
extern rtx gen_jump (rtx);
extern rtx gen_blockage (void);
extern rtx gen_prologue_use (rtx);
extern rtx gen_simple_return_internal (void);
extern rtx gen_interrupt_return (void);
extern rtx gen_simple_return_internal_long (void);
extern rtx gen_simple_return_pop_internal (rtx);
extern rtx gen_nop (void);
extern rtx gen_nops (rtx);
extern rtx gen_pad (rtx);
extern rtx gen_set_got_rex64 (rtx);
extern rtx gen_set_rip_rex64 (rtx, rtx);
extern rtx gen_set_got_offset_rex64 (rtx, rtx);
extern rtx gen_eh_return_internal (void);
extern rtx gen_split_stack_return (rtx);
extern rtx gen_ffssi2_no_cmove (rtx, rtx);
extern rtx gen_ctzsi2 (rtx, rtx);
extern rtx gen_ctzdi2 (rtx, rtx);
extern rtx gen_bsr_rex64 (rtx, rtx);
extern rtx gen_bsr (rtx, rtx);
extern rtx gen_clzsi2_lzcnt (rtx, rtx);
extern rtx gen_clzdi2_lzcnt (rtx, rtx);
extern rtx gen_tzcnt_si (rtx, rtx);
extern rtx gen_lzcnt_si (rtx, rtx);
extern rtx gen_tzcnt_di (rtx, rtx);
extern rtx gen_lzcnt_di (rtx, rtx);
extern rtx gen_tzcnt_hi (rtx, rtx);
extern rtx gen_lzcnt_hi (rtx, rtx);
extern rtx gen_bmi_bextr_si (rtx, rtx, rtx);
extern rtx gen_bmi_bextr_di (rtx, rtx, rtx);
extern rtx gen_bmi2_pdep_si3 (rtx, rtx, rtx);
extern rtx gen_bmi2_pdep_di3 (rtx, rtx, rtx);
extern rtx gen_bmi2_pext_si3 (rtx, rtx, rtx);
extern rtx gen_bmi2_pext_di3 (rtx, rtx, rtx);
extern rtx gen_popcountsi2 (rtx, rtx);
extern rtx gen_popcountdi2 (rtx, rtx);
extern rtx gen_popcounthi2 (rtx, rtx);
extern rtx gen_bswaphi_lowpart (rtx);
extern rtx gen_parityhi2_cmp (rtx);
extern rtx gen_parityqi2_cmp (rtx);
static inline rtx gen_tls_initial_exec_64_sun (rtx, rtx);
static inline rtx
gen_tls_initial_exec_64_sun(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_truncxfsf2_i387_noop_unspec (rtx, rtx);
extern rtx gen_truncxfdf2_i387_noop_unspec (rtx, rtx);
extern rtx gen_sqrtxf2 (rtx, rtx);
extern rtx gen_x86_fnstsw_1 (rtx);
extern rtx gen_fpremxf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fprem1xf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_sinxf2 (rtx, rtx);
extern rtx gen_cosxf2 (rtx, rtx);
extern rtx gen_sincosxf3 (rtx, rtx, rtx);
extern rtx gen_fptanxf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_atan2xf3 (rtx, rtx, rtx);
extern rtx gen_fyl2xxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fyl2xp1xf3_i387 (rtx, rtx, rtx);
extern rtx gen_fxtractxf3_i387 (rtx, rtx, rtx);
extern rtx gen_fscalexf4_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_roundsf2 (rtx, rtx, rtx);
extern rtx gen_sse4_1_rounddf2 (rtx, rtx, rtx);
extern rtx gen_rintxf2 (rtx, rtx);
extern rtx gen_lrintxfdi2 (rtx, rtx);
extern rtx gen_lrintxfhi2 (rtx, rtx);
extern rtx gen_lrintxfsi2 (rtx, rtx);
extern rtx gen_frndintxf2_roundeven (rtx, rtx);
extern rtx gen_frndintxf2_floor (rtx, rtx);
extern rtx gen_frndintxf2_ceil (rtx, rtx);
extern rtx gen_frndintxf2_trunc (rtx, rtx);
extern rtx gen_frndintxf2_roundeven_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_floor_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_ceil_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_frndintxf2_trunc_i387 (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fistdi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fisthi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_floor (rtx, rtx, rtx, rtx);
extern rtx gen_fistsi2_ceil (rtx, rtx, rtx, rtx);
extern rtx gen_fxamsf2_i387 (rtx, rtx);
extern rtx gen_fxamdf2_i387 (rtx, rtx);
extern rtx gen_fxamxf2_i387 (rtx, rtx);
extern rtx gen_movmsk_df (rtx, rtx);
extern rtx gen_cld (void);
extern rtx gen_smaxsf3 (rtx, rtx, rtx);
extern rtx gen_sminsf3 (rtx, rtx, rtx);
extern rtx gen_smaxdf3 (rtx, rtx, rtx);
extern rtx gen_smindf3 (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_add_si (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_add_di (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_sub_si (rtx, rtx, rtx);
extern rtx gen_pro_epilogue_adjust_stack_sub_di (rtx, rtx, rtx);
extern rtx gen_allocate_stack_worker_probe_si (rtx, rtx);
extern rtx gen_allocate_stack_worker_probe_di (rtx, rtx);
extern rtx gen_probe_stack_1_si (rtx, rtx);
extern rtx gen_probe_stack_1_di (rtx, rtx);
extern rtx gen_adjust_stack_and_probe_si (rtx, rtx, rtx);
extern rtx gen_adjust_stack_and_probe_di (rtx, rtx, rtx);
extern rtx gen_probe_stack_range_si (rtx, rtx, rtx);
extern rtx gen_probe_stack_range_di (rtx, rtx, rtx);
extern rtx gen_trap (void);
extern rtx gen_ud2 (void);
extern rtx gen_stack_protect_set_1_si (rtx, rtx);
extern rtx gen_stack_protect_set_1_di (rtx, rtx);
extern rtx gen_stack_protect_test_1_si (rtx, rtx, rtx);
extern rtx gen_stack_protect_test_1_di (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32qi (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32hi (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32si (rtx, rtx, rtx);
extern rtx gen_sse4_2_crc32di (rtx, rtx, rtx);
extern rtx gen_rdpmc (rtx, rtx);
extern rtx gen_rdpmc_rex64 (rtx, rtx, rtx);
extern rtx gen_rdtsc (rtx);
extern rtx gen_rdtsc_rex64 (rtx, rtx);
extern rtx gen_rdtscp (rtx, rtx);
extern rtx gen_rdtscp_rex64 (rtx, rtx, rtx);
extern rtx gen_fxsave (rtx);
extern rtx gen_fxsave64 (rtx);
extern rtx gen_fxrstor (rtx);
extern rtx gen_fxrstor64 (rtx);
extern rtx gen_xsave (rtx, rtx);
extern rtx gen_xsaveopt (rtx, rtx);
extern rtx gen_xsavec (rtx, rtx);
extern rtx gen_xsaves (rtx, rtx);
extern rtx gen_xsave_rex64 (rtx, rtx, rtx);
extern rtx gen_xsaveopt_rex64 (rtx, rtx, rtx);
extern rtx gen_xsavec_rex64 (rtx, rtx, rtx);
extern rtx gen_xsaves_rex64 (rtx, rtx, rtx);
extern rtx gen_xsave64 (rtx, rtx, rtx);
extern rtx gen_xsaveopt64 (rtx, rtx, rtx);
extern rtx gen_xsavec64 (rtx, rtx, rtx);
extern rtx gen_xsaves64 (rtx, rtx, rtx);
extern rtx gen_xrstor (rtx, rtx);
extern rtx gen_xrstors (rtx, rtx);
extern rtx gen_xrstor_rex64 (rtx, rtx, rtx);
extern rtx gen_xrstors_rex64 (rtx, rtx, rtx);
extern rtx gen_xrstor64 (rtx, rtx, rtx);
extern rtx gen_xrstors64 (rtx, rtx, rtx);
extern rtx gen_xsetbv (rtx, rtx);
extern rtx gen_xsetbv_rex64 (rtx, rtx, rtx);
extern rtx gen_xgetbv (rtx, rtx);
extern rtx gen_xgetbv_rex64 (rtx, rtx, rtx);
extern rtx gen_fnstenv (rtx);
extern rtx gen_fldenv (rtx);
extern rtx gen_fnstsw (rtx);
extern rtx gen_fnclex (void);
extern rtx gen_lwp_llwpcbsi (rtx);
extern rtx gen_lwp_llwpcbdi (rtx);
extern rtx gen_lwp_slwpcbsi (rtx);
extern rtx gen_lwp_slwpcbdi (rtx);
extern rtx gen_lwp_lwpvalsi (rtx, rtx, rtx);
extern rtx gen_lwp_lwpvaldi (rtx, rtx, rtx);
extern rtx gen_lwp_lwpinssi (rtx, rtx, rtx);
extern rtx gen_lwp_lwpinsdi (rtx, rtx, rtx);
extern rtx gen_rdfsbasesi (rtx);
extern rtx gen_rdgsbasesi (rtx);
extern rtx gen_rdfsbasedi (rtx);
extern rtx gen_rdgsbasedi (rtx);
extern rtx gen_wrfsbasesi (rtx);
extern rtx gen_wrgsbasesi (rtx);
extern rtx gen_wrfsbasedi (rtx);
extern rtx gen_wrgsbasedi (rtx);
extern rtx gen_ptwritesi (rtx);
extern rtx gen_ptwritedi (rtx);
extern rtx gen_rdrandhi_1 (rtx);
extern rtx gen_rdrandsi_1 (rtx);
extern rtx gen_rdranddi_1 (rtx);
extern rtx gen_rdseedhi_1 (rtx);
extern rtx gen_rdseedsi_1 (rtx);
extern rtx gen_rdseeddi_1 (rtx);
extern rtx gen_rdsspsi (rtx, rtx);
extern rtx gen_rdsspdi (rtx, rtx);
extern rtx gen_incsspsi (rtx);
extern rtx gen_incsspdi (rtx);
extern rtx gen_saveprevssp (void);
extern rtx gen_rstorssp (rtx);
extern rtx gen_wrsssi (rtx, rtx);
extern rtx gen_wrssdi (rtx, rtx);
extern rtx gen_wrusssi (rtx, rtx);
extern rtx gen_wrussdi (rtx, rtx);
extern rtx gen_setssbsy (void);
extern rtx gen_clrssbsy (rtx);
extern rtx gen_nop_endbr (void);
extern rtx gen_xbegin_1 (rtx, rtx);
extern rtx gen_xend (void);
extern rtx gen_xabort (rtx);
extern rtx gen_xtest_1 (void);
extern rtx gen_clwb (rtx);
extern rtx gen_clflushopt (rtx);
extern rtx gen_mwaitx (rtx, rtx, rtx);
extern rtx gen_monitorx_si (rtx, rtx, rtx);
extern rtx gen_monitorx_di (rtx, rtx, rtx);
extern rtx gen_clzero_si (rtx);
extern rtx gen_clzero_di (rtx);
extern rtx gen_rdpid (rtx);
extern rtx gen_rdpid_rex64 (rtx);
extern rtx gen_wbinvd (void);
extern rtx gen_wbnoinvd (void);
extern rtx gen_movdirisi (rtx, rtx);
extern rtx gen_movdiridi (rtx, rtx);
extern rtx gen_movdir64b_si (rtx, rtx);
extern rtx gen_movdir64b_di (rtx, rtx);
extern rtx gen_xsusldtrk (void);
extern rtx gen_xresldtrk (void);
extern rtx gen_enqcmd_si (rtx, rtx);
extern rtx gen_enqcmds_si (rtx, rtx);
extern rtx gen_enqcmd_di (rtx, rtx);
extern rtx gen_enqcmds_di (rtx, rtx);
extern rtx gen_umwait (rtx, rtx);
extern rtx gen_umwait_rex64 (rtx, rtx, rtx);
extern rtx gen_umonitor_si (rtx);
extern rtx gen_umonitor_di (rtx);
extern rtx gen_tpause (rtx, rtx);
extern rtx gen_tpause_rex64 (rtx, rtx, rtx);
extern rtx gen_cldemote (rtx);
extern rtx gen_speculation_barrier (void);
extern rtx gen_serialize (void);
extern rtx gen_patchable_area (rtx, rtx);
extern rtx gen_sse_movntq (rtx, rtx);
extern rtx gen_mmx_ieee_maxv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_ieee_minv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rcpv2sf2 (rtx, rtx);
extern rtx gen_mmx_rcpit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_rcpit2v2sf3 (rtx, rtx, rtx);
extern rtx gen_sqrtv2sf2 (rtx, rtx);
extern rtx gen_mmx_rsqrtv2sf2 (rtx, rtx);
extern rtx gen_mmx_rsqit1v2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_hsubv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_gev2sf3 (rtx, rtx, rtx);
extern rtx gen_fmav2sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv2sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav2sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv2sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_mmx_fix_truncv2sfv2si2 (rtx, rtx);
extern rtx gen_fixuns_truncv2sfv2si2 (rtx, rtx);
extern rtx gen_mmx_floatv2siv2sf2 (rtx, rtx);
extern rtx gen_floatunsv2siv2sf2 (rtx, rtx);
extern rtx gen_mmx_pf2iw (rtx, rtx);
extern rtx gen_mmx_pi2fw (rtx, rtx);
extern rtx gen_mmx_pswapdv2sf2 (rtx, rtx);
extern rtx gen_mmx_ashrv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ashlv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_lshrv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_gtv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_andnotv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andnotv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andnotv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_packsswb (rtx, rtx, rtx);
extern rtx gen_mmx_packuswb (rtx, rtx, rtx);
extern rtx gen_mmx_packssdw (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklbw (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpcklwd (rtx, rtx, rtx);
extern rtx gen_mmx_punpckhdq (rtx, rtx, rtx);
extern rtx gen_mmx_punpckldq (rtx, rtx, rtx);
extern rtx gen_mmx_pshufw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pswapdv2si2 (rtx, rtx);
extern rtx gen_mmx_psadbw (rtx, rtx, rtx);
extern rtx gen_mmx_pmovmskb (rtx, rtx);
extern rtx gen_movv64qi_internal (rtx, rtx);
extern rtx gen_movv32qi_internal (rtx, rtx);
extern rtx gen_movv16qi_internal (rtx, rtx);
extern rtx gen_movv32hi_internal (rtx, rtx);
extern rtx gen_movv16hi_internal (rtx, rtx);
extern rtx gen_movv8hi_internal (rtx, rtx);
extern rtx gen_movv16si_internal (rtx, rtx);
extern rtx gen_movv8si_internal (rtx, rtx);
extern rtx gen_movv4si_internal (rtx, rtx);
extern rtx gen_movv8di_internal (rtx, rtx);
extern rtx gen_movv4di_internal (rtx, rtx);
extern rtx gen_movv2di_internal (rtx, rtx);
extern rtx gen_movv4ti_internal (rtx, rtx);
extern rtx gen_movv2ti_internal (rtx, rtx);
extern rtx gen_movv1ti_internal (rtx, rtx);
extern rtx gen_movv16sf_internal (rtx, rtx);
extern rtx gen_movv8sf_internal (rtx, rtx);
extern rtx gen_movv4sf_internal (rtx, rtx);
extern rtx gen_movv8df_internal (rtx, rtx);
extern rtx gen_movv4df_internal (rtx, rtx);
extern rtx gen_movv2df_internal (rtx, rtx);
extern rtx gen_avx512f_loadv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_loadv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_loadv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_loadv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_loadv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_loadv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_loadv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movsf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movdf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_storesf_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storedf_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storev16si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev8si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4si_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storev8di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev2di_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storev16sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev8sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_storev8df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev4df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev2df_mask (rtx, rtx, rtx);
extern rtx gen_avx512bw_storev64qi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev16qi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev32qi_mask (rtx, rtx, rtx);
extern rtx gen_avx512bw_storev32hi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev16hi_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_storev8hi_mask (rtx, rtx, rtx);
extern rtx gen_sse2_movq128 (rtx, rtx);
extern rtx gen_movdi_to_sse (rtx, rtx);
extern rtx gen_avx_lddqu256 (rtx, rtx);
extern rtx gen_sse3_lddqu (rtx, rtx);
extern rtx gen_sse2_movntisi (rtx, rtx);
extern rtx gen_sse2_movntidi (rtx, rtx);
extern rtx gen_avx512f_movntv16sf (rtx, rtx);
extern rtx gen_avx_movntv8sf (rtx, rtx);
extern rtx gen_sse_movntv4sf (rtx, rtx);
extern rtx gen_avx512f_movntv8df (rtx, rtx);
extern rtx gen_avx_movntv4df (rtx, rtx);
extern rtx gen_sse2_movntv2df (rtx, rtx);
extern rtx gen_avx512f_movntv8di (rtx, rtx);
extern rtx gen_avx_movntv4di (rtx, rtx);
extern rtx gen_sse2_movntv2di (rtx, rtx);
extern rtx gen_kandqi (rtx, rtx, rtx);
extern rtx gen_kiorqi (rtx, rtx, rtx);
extern rtx gen_kxorqi (rtx, rtx, rtx);
extern rtx gen_kandhi (rtx, rtx, rtx);
extern rtx gen_kiorhi (rtx, rtx, rtx);
extern rtx gen_kxorhi (rtx, rtx, rtx);
extern rtx gen_kandsi (rtx, rtx, rtx);
extern rtx gen_kiorsi (rtx, rtx, rtx);
extern rtx gen_kxorsi (rtx, rtx, rtx);
extern rtx gen_kanddi (rtx, rtx, rtx);
extern rtx gen_kiordi (rtx, rtx, rtx);
extern rtx gen_kxordi (rtx, rtx, rtx);
extern rtx gen_kandnqi (rtx, rtx, rtx);
extern rtx gen_kandnhi (rtx, rtx, rtx);
extern rtx gen_kandnsi (rtx, rtx, rtx);
extern rtx gen_kandndi (rtx, rtx, rtx);
extern rtx gen_kxnorqi (rtx, rtx, rtx);
extern rtx gen_kxnorhi (rtx, rtx, rtx);
extern rtx gen_kxnorsi (rtx, rtx, rtx);
extern rtx gen_kxnordi (rtx, rtx, rtx);
extern rtx gen_knotqi (rtx, rtx);
extern rtx gen_knothi (rtx, rtx);
extern rtx gen_knotsi (rtx, rtx);
extern rtx gen_knotdi (rtx, rtx);
extern rtx gen_kaddqi (rtx, rtx, rtx);
extern rtx gen_kaddhi (rtx, rtx, rtx);
extern rtx gen_kaddsi (rtx, rtx, rtx);
extern rtx gen_kadddi (rtx, rtx, rtx);
extern rtx gen_kashiftqi (rtx, rtx, rtx);
extern rtx gen_klshiftrtqi (rtx, rtx, rtx);
extern rtx gen_kashifthi (rtx, rtx, rtx);
extern rtx gen_klshiftrthi (rtx, rtx, rtx);
extern rtx gen_kashiftsi (rtx, rtx, rtx);
extern rtx gen_klshiftrtsi (rtx, rtx, rtx);
extern rtx gen_kashiftdi (rtx, rtx, rtx);
extern rtx gen_klshiftrtdi (rtx, rtx, rtx);
extern rtx gen_ktestqi (rtx, rtx);
extern rtx gen_ktesthi (rtx, rtx);
extern rtx gen_ktestsi (rtx, rtx);
extern rtx gen_ktestdi (rtx, rtx);
extern rtx gen_kortestqi (rtx, rtx);
extern rtx gen_kortesthi (rtx, rtx);
extern rtx gen_kortestsi (rtx, rtx);
extern rtx gen_kortestdi (rtx, rtx);
extern rtx gen_kunpckhi (rtx, rtx, rtx);
extern rtx gen_kunpcksi (rtx, rtx, rtx);
extern rtx gen_kunpckdi (rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmaddv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsubv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmaddv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsubv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmulv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmdivv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmulv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmdivv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3 (rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_divv8sf3 (rtx, rtx, rtx);
static inline rtx gen_avx_divv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_divv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx_divv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_divv4sf3 (rtx, rtx, rtx);
static inline rtx gen_sse_divv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sse_divv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_divv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sse_divv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse_divv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_divv8df3 (rtx, rtx, rtx);
extern rtx gen_avx512f_divv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_divv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_divv4df3 (rtx, rtx, rtx);
static inline rtx gen_avx_divv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_divv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx_divv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_divv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_divv2df3 (rtx, rtx, rtx);
static inline rtx gen_sse2_divv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sse2_divv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_divv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sse2_divv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse2_divv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_rcpv8sf2 (rtx, rtx);
extern rtx gen_sse_rcpv4sf2 (rtx, rtx);
extern rtx gen_sse_vmrcpv4sf2 (rtx, rtx, rtx);
extern rtx gen_rcp14v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rcp14v2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_srcp14v4sf (rtx, rtx, rtx);
extern rtx gen_srcp14v2df (rtx, rtx, rtx);
extern rtx gen_srcp14v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_srcp14v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2 (rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2_round (rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv16sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_sqrtv8sf2 (rtx, rtx);
static inline rtx gen_avx_sqrtv8sf2_round (rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv8sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_sqrtv8sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx_sqrtv8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv8sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_sqrtv4sf2 (rtx, rtx);
static inline rtx gen_sse_sqrtv4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_sse_sqrtv4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_sqrtv4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_sse_sqrtv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse_sqrtv4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_sqrtv8df2 (rtx, rtx);
extern rtx gen_avx512f_sqrtv8df2_round (rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sqrtv8df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_sqrtv4df2 (rtx, rtx);
static inline rtx gen_avx_sqrtv4df2_round (rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv4df2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_sqrtv4df2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx_sqrtv4df2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_sqrtv4df2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_sqrtv2df2 (rtx, rtx);
static inline rtx gen_sse2_sqrtv2df2_round (rtx, rtx, rtx);
static inline rtx
gen_sse2_sqrtv2df2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse2_sqrtv2df2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_sse2_sqrtv2df2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sse2_sqrtv2df2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_vmsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_sse_vmsqrtv4sf2_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsqrtv4sf2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsqrtv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsqrtv2df2_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_rsqrtv8sf2 (rtx, rtx);
extern rtx gen_sse_rsqrtv4sf2 (rtx, rtx);
extern rtx gen_rsqrt14v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14v4sf (rtx, rtx, rtx);
extern rtx gen_rsqrt14v2df (rtx, rtx, rtx);
extern rtx gen_rsqrt14_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rsqrt14_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmrsqrtv4sf2 (rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3 (rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3 (rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv8sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv8sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv4sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4sf3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv8df3 (rtx, rtx, rtx);
extern rtx gen_ieee_maxv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3 (rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_minv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ieee_maxv4df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv2df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_maxv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_maxv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_maxv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_maxv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv2df3 (rtx, rtx, rtx);
static inline rtx gen_ieee_minv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ieee_minv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_ieee_minv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ieee_minv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse_vmsmaxv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsmaxv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsmaxv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsmaxv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmsminv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsmaxv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmsminv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_addsubv4df3 (rtx, rtx, rtx);
extern rtx gen_sse3_addsubv2df3 (rtx, rtx, rtx);
extern rtx gen_avx_addsubv8sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_addsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_avx_haddv4df3 (rtx, rtx, rtx);
extern rtx gen_avx_hsubv4df3 (rtx, rtx, rtx);
extern rtx gen_sse3_hsubv2df3 (rtx, rtx, rtx);
extern rtx gen_avx_haddv8sf3 (rtx, rtx, rtx);
extern rtx gen_avx_hsubv8sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_haddv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse3_hsubv4sf3 (rtx, rtx, rtx);
extern rtx gen_reducepv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducepv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducesv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_reducesv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_reducesv2df (rtx, rtx, rtx, rtx);
extern rtx gen_reducesv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_cmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vmcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vmcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_maskcmpv8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_maskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_maskcmpv4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_maskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse_vmmaskcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_vmmaskcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16si3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8si3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8si3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8si3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv8si3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8si3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8si3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4si3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4si3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4si3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4si3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4si3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4si3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_cmpv8di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8di3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8di3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv4di3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4di3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4di3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4di3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4di3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4di3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2di3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2di3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2di3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2di3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2di3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2di3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_cmpv16sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16sf3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8sf3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8sf3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4sf3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4sf3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_cmpv8df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8df3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cmpv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv4df3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4df3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2df3 (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2df3_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_cmpv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_cmpv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_cmpv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512bw_cmpv64qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_cmpv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv32qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_cmpv32hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_cmpv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_cmpv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv64qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv32qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv32hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ucmpv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv16si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv8di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ucmpv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ucmpv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmcmpv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_comi (rtx, rtx);
extern rtx gen_sse_comi_round (rtx, rtx, rtx);
extern rtx gen_sse_ucomi (rtx, rtx);
extern rtx gen_sse_ucomi_round (rtx, rtx, rtx);
extern rtx gen_sse2_comi (rtx, rtx);
extern rtx gen_sse2_comi_round (rtx, rtx, rtx);
extern rtx gen_sse2_ucomi (rtx, rtx);
extern rtx gen_sse2_ucomi_round (rtx, rtx, rtx);
extern rtx gen_avx_andnotv8sf3 (rtx, rtx, rtx);
extern rtx gen_avx_andnotv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_andnotv4sf3 (rtx, rtx, rtx);
extern rtx gen_sse_andnotv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_andnotv4df3 (rtx, rtx, rtx);
extern rtx gen_avx_andnotv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2df3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16sf3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8df3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmadd_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmadd_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmadd_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmadd_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmadd_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmadd_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmadd_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmadd_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmadd_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmadd_v2df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmadd_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmadd_v2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmadd_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsub_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsub_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsub_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsub_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsub_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsub_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmsub_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v8sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmsub_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v4sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmsub_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v4df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fmsub_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fmsub_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fmsub_v2df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmadd_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmadd_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmadd_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmadd_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v2df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v8sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4sf_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmadd_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v4df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmadd_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmadd_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmadd_v2df_mask3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fnmsub_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fnmsub_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fnmsub_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fnmsub_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmsub_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmsub_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmsub_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512vl_fnmsub_v2df_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512vl_fnmsub_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512vl_fnmsub_v2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fnmsub_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmaddsub_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmaddsub_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmaddsub_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmaddsub_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmaddsub_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmaddsub_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmaddsub_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v8sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsubadd_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v4sf_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsubadd_v8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma_fmsubadd_v4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v4df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fma_fmsubadd_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_fma_fmsubadd_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fma_fmsubadd_v2df_maskz_1_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512f_fmsubadd_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v16sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v16sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v8sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsubadd_v8df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v4df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsubadd_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmsub_v4sf_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmsub_v4sf_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmsub_v2df_mask3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmsub_v2df_mask3_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_cvtpi2ps (rtx, rtx, rtx);
extern rtx gen_sse_cvtps2pi (rtx, rtx);
extern rtx gen_sse_cvttps2pi (rtx, rtx);
extern rtx gen_sse_cvtsi2ss (rtx, rtx, rtx);
extern rtx gen_sse_cvtsi2ss_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_cvtsi2ssq (rtx, rtx, rtx);
extern rtx gen_sse_cvtsi2ssq_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse_cvtss2si (rtx, rtx);
extern rtx gen_sse_cvtss2si_round (rtx, rtx, rtx);
extern rtx gen_sse_cvtss2siq (rtx, rtx);
extern rtx gen_sse_cvtss2siq_round (rtx, rtx, rtx);
extern rtx gen_sse_cvtss2si_2 (rtx, rtx);
extern rtx gen_sse_cvtss2siq_2 (rtx, rtx);
extern rtx gen_sse_cvttss2si (rtx, rtx);
extern rtx gen_sse_cvttss2si_round (rtx, rtx, rtx);
extern rtx gen_sse_cvttss2siq (rtx, rtx);
extern rtx gen_sse_cvttss2siq_round (rtx, rtx, rtx);
extern rtx gen_cvtusi2ss32 (rtx, rtx, rtx);
extern rtx gen_cvtusi2ss32_round (rtx, rtx, rtx, rtx);
extern rtx gen_cvtusi2sd32 (rtx, rtx, rtx);
static inline rtx gen_cvtusi2sd32_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_cvtusi2sd32_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_cvtusi2ss64 (rtx, rtx, rtx);
extern rtx gen_cvtusi2ss64_round (rtx, rtx, rtx, rtx);
extern rtx gen_cvtusi2sd64 (rtx, rtx, rtx);
extern rtx gen_cvtusi2sd64_round (rtx, rtx, rtx, rtx);
extern rtx gen_floatv16siv16sf2 (rtx, rtx);
extern rtx gen_floatv16siv16sf2_round (rtx, rtx, rtx);
extern rtx gen_floatv16siv16sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv16siv16sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv8siv8sf2 (rtx, rtx);
static inline rtx gen_floatv8siv8sf2_round (rtx, rtx, rtx);
static inline rtx
gen_floatv8siv8sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv8siv8sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_floatv8siv8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_floatv8siv8sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv4siv4sf2 (rtx, rtx);
static inline rtx gen_floatv4siv4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_floatv4siv4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv4siv4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_floatv4siv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_floatv4siv4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufloatv16siv16sf2 (rtx, rtx);
extern rtx gen_ufloatv16siv16sf2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv16siv16sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv16siv16sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8siv8sf2 (rtx, rtx);
extern rtx gen_ufloatv8siv8sf2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv8siv8sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv8siv8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4sf2 (rtx, rtx);
extern rtx gen_ufloatv4siv4sf2_round (rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_fix_notruncv8sfv8si (rtx, rtx);
extern rtx gen_avx_fix_notruncv8sfv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_fix_notruncv4sfv4si (rtx, rtx);
extern rtx gen_sse2_fix_notruncv4sfv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si (rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si_round (rtx, rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fix_notruncv16sfv16si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ufix_notruncv16sfv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ufix_notruncv16sfv16si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv8sfv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv8sfv8si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv4sfv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ufix_notruncv4sfv4si_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2qqv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2qqv8di_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2qqv4di_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_cvtps2qqv4di_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_cvtps2qqv4di_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_cvtps2qqv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2uqqv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2uqqv8di_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_cvtps2uqqv4di_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_cvtps2uqqv4di_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_cvtps2uqqv4di_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_cvtps2uqqv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2 (rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv16sfv16si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2 (rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2_round (rtx, rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv16sfv16si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8sfv8si2 (rtx, rtx);
extern rtx gen_fix_truncv8sfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4sfv4si2 (rtx, rtx);
extern rtx gen_fix_truncv4sfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtpi2pd (rtx, rtx);
extern rtx gen_floatunsv2siv2df2 (rtx, rtx);
extern rtx gen_sse2_cvtpd2pi (rtx, rtx);
extern rtx gen_sse2_cvttpd2pi (rtx, rtx);
extern rtx gen_fixuns_truncv2dfv2si2 (rtx, rtx);
extern rtx gen_sse2_cvtsi2sd (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsi2sdq (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsi2sdq_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtss2usi (rtx, rtx);
extern rtx gen_avx512f_vcvtss2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtss2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvtss2usiq_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttss2usi (rtx, rtx);
extern rtx gen_avx512f_vcvttss2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttss2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvttss2usiq_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usi (rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvtsd2usiq_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usi (rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usi_round (rtx, rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usiq (rtx, rtx);
extern rtx gen_avx512f_vcvttsd2usiq_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2si (rtx, rtx);
extern rtx gen_sse2_cvtsd2si_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2siq (rtx, rtx);
extern rtx gen_sse2_cvtsd2siq_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2si_2 (rtx, rtx);
extern rtx gen_sse2_cvtsd2siq_2 (rtx, rtx);
extern rtx gen_sse2_cvttsd2si (rtx, rtx);
extern rtx gen_sse2_cvttsd2si_round (rtx, rtx, rtx);
extern rtx gen_sse2_cvttsd2siq (rtx, rtx);
extern rtx gen_sse2_cvttsd2siq_round (rtx, rtx, rtx);
extern rtx gen_floatv8siv8df2 (rtx, rtx);
extern rtx gen_floatv8siv8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv4siv4df2 (rtx, rtx);
extern rtx gen_floatv4siv4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8df2 (rtx, rtx);
extern rtx gen_floatv8div8df2_round (rtx, rtx, rtx);
extern rtx gen_floatv8div8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv8div8df2 (rtx, rtx);
extern rtx gen_floatunsv8div8df2_round (rtx, rtx, rtx);
extern rtx gen_floatunsv8div8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv8div8df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv4div4df2 (rtx, rtx);
extern rtx gen_floatv4div4df2_round (rtx, rtx, rtx);
extern rtx gen_floatv4div4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv4div4df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv4div4df2 (rtx, rtx);
extern rtx gen_floatunsv4div4df2_round (rtx, rtx, rtx);
extern rtx gen_floatunsv4div4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv4div4df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv2div2df2 (rtx, rtx);
extern rtx gen_floatv2div2df2_round (rtx, rtx, rtx);
extern rtx gen_floatv2div2df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv2div2df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv2div2df2 (rtx, rtx);
extern rtx gen_floatunsv2div2df2_round (rtx, rtx, rtx);
extern rtx gen_floatunsv2div2df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv2div2df2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8sf2 (rtx, rtx);
extern rtx gen_floatv8div8sf2_round (rtx, rtx, rtx);
extern rtx gen_floatv8div8sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatv8div8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv8div8sf2 (rtx, rtx);
extern rtx gen_floatunsv8div8sf2_round (rtx, rtx, rtx);
extern rtx gen_floatunsv8div8sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv8div8sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_floatv4div4sf2 (rtx, rtx);
static inline rtx gen_floatv4div4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_floatv4div4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatv4div4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_floatv4div4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_floatv4div4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatunsv4div4sf2 (rtx, rtx);
static inline rtx gen_floatunsv4div4sf2_round (rtx, rtx, rtx);
static inline rtx
gen_floatunsv4div4sf2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_floatunsv4div4sf2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_floatunsv4div4sf2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_floatunsv4div4sf2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufloatv8siv8df2 (rtx, rtx);
extern rtx gen_ufloatv8siv8df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv4siv4df2 (rtx, rtx);
extern rtx gen_ufloatv4siv4df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufloatv2siv2df2 (rtx, rtx);
extern rtx gen_ufloatv2siv2df2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtdq2pd512_2 (rtx, rtx);
extern rtx gen_avx_cvtdq2pd256_2 (rtx, rtx);
extern rtx gen_sse2_cvtdq2pd (rtx, rtx);
extern rtx gen_sse2_cvtdq2pd_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512 (rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512_round (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2dq512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cvtpd2dq256 (rtx, rtx);
extern rtx gen_avx_cvtpd2dq256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtpd2dq (rtx, rtx);
extern rtx gen_sse2_cvtpd2dq_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2 (rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2_round (rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2 (rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2_round (rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv2dfv2si2 (rtx, rtx);
extern rtx gen_ufix_notruncv2dfv2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2 (rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8si2 (rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8si2_round (rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8si2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv2dfv2si2 (rtx, rtx);
extern rtx gen_ufix_truncv2dfv2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4dfv4si2 (rtx, rtx);
extern rtx gen_fix_truncv4dfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv4dfv4si2 (rtx, rtx);
extern rtx gen_ufix_truncv4dfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2 (rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8di2 (rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4dfv4di2 (rtx, rtx);
static inline rtx gen_fix_truncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_truncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fixuns_truncv4dfv4di2 (rtx, rtx);
static inline rtx gen_fixuns_truncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fixuns_truncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fixuns_truncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fixuns_truncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fixuns_truncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv2dfv2di2 (rtx, rtx);
static inline rtx gen_fix_truncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_truncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_truncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_truncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fixuns_truncv2dfv2di2 (rtx, rtx);
static inline rtx gen_fixuns_truncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_fixuns_truncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fixuns_truncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fixuns_truncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fixuns_truncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv8dfv8di2 (rtx, rtx);
extern rtx gen_fix_notruncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fix_notruncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_notruncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_notruncv4dfv4di2 (rtx, rtx);
static inline rtx gen_fix_notruncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_notruncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv2dfv2di2 (rtx, rtx);
static inline rtx gen_fix_notruncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_notruncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_notruncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_notruncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv8dfv8di2 (rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8di2_round (rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv8dfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ufix_notruncv4dfv4di2 (rtx, rtx);
static inline rtx gen_ufix_notruncv4dfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv4dfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv4dfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufix_notruncv4dfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv4dfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv2dfv2di2 (rtx, rtx);
static inline rtx gen_ufix_notruncv2dfv2di2_round (rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv2dfv2di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_ufix_notruncv2dfv2di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_ufix_notruncv2dfv2di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_ufix_notruncv2dfv2di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv8sfv8di2 (rtx, rtx);
extern rtx gen_fix_truncv8sfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fix_truncv8sfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv8sfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8sfv8di2 (rtx, rtx);
extern rtx gen_fixuns_truncv8sfv8di2_round (rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8sfv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_fixuns_truncv8sfv8di2_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fix_truncv4sfv4di2 (rtx, rtx);
static inline rtx gen_fix_truncv4sfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4sfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fix_truncv4sfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fix_truncv4sfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fix_truncv4sfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fixuns_truncv4sfv4di2 (rtx, rtx);
static inline rtx gen_fixuns_truncv4sfv4di2_round (rtx, rtx, rtx);
static inline rtx
gen_fixuns_truncv4sfv4di2_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_fixuns_truncv4sfv4di2_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_fixuns_truncv4sfv4di2_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_fixuns_truncv4sfv4di2_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_fix_truncv2sfv2di2 (rtx, rtx);
extern rtx gen_avx512dq_fix_truncv2sfv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fixuns_truncv2sfv2di2 (rtx, rtx);
extern rtx gen_avx512dq_fixuns_truncv2sfv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv8sfv8si2 (rtx, rtx);
extern rtx gen_ufix_truncv8sfv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ufix_truncv4sfv4si2 (rtx, rtx);
extern rtx gen_ufix_truncv4sfv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvttpd2dq (rtx, rtx);
extern rtx gen_sse2_cvttpd2dq_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2ss (rtx, rtx, rtx);
extern rtx gen_sse2_cvtsd2ss_round (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_cvtss2sd (rtx, rtx, rtx);
extern rtx gen_sse2_cvtss2sd_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2ps512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtpd2ps512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cvtpd2ps256 (rtx, rtx);
extern rtx gen_avx_cvtpd2ps256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_truncv2dfv2sf2 (rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512 (rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512_round (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtps2pd512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_cvtps2pd256 (rtx, rtx);
static inline rtx gen_avx_cvtps2pd256_round (rtx, rtx, rtx);
static inline rtx
gen_avx_cvtps2pd256_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx_cvtps2pd256_mask (rtx, rtx, rtx, rtx);
static inline rtx gen_avx_cvtps2pd256_mask_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx_cvtps2pd256_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_vec_unpacks_lo_v16sf (rtx, rtx);
extern rtx gen_avx512bw_cvtb2maskv64qi (rtx, rtx);
extern rtx gen_avx512vl_cvtb2maskv16qi (rtx, rtx);
extern rtx gen_avx512vl_cvtb2maskv32qi (rtx, rtx);
extern rtx gen_avx512bw_cvtw2maskv32hi (rtx, rtx);
extern rtx gen_avx512vl_cvtw2maskv16hi (rtx, rtx);
extern rtx gen_avx512vl_cvtw2maskv8hi (rtx, rtx);
extern rtx gen_avx512f_cvtd2maskv16si (rtx, rtx);
extern rtx gen_avx512vl_cvtd2maskv8si (rtx, rtx);
extern rtx gen_avx512vl_cvtd2maskv4si (rtx, rtx);
extern rtx gen_avx512f_cvtq2maskv8di (rtx, rtx);
extern rtx gen_avx512vl_cvtq2maskv4di (rtx, rtx);
extern rtx gen_avx512vl_cvtq2maskv2di (rtx, rtx);
extern rtx gen_sse2_cvtps2pd (rtx, rtx);
extern rtx gen_sse2_cvtps2pd_mask (rtx, rtx, rtx, rtx);
extern rtx gen_extendv2sfv2df2 (rtx, rtx);
extern rtx gen_sse_movhlps (rtx, rtx, rtx);
extern rtx gen_sse_movlhps (rtx, rtx, rtx);
extern rtx gen_avx512f_unpckhps512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpckhps256 (rtx, rtx, rtx);
extern rtx gen_avx_unpckhps256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4sf (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_unpcklps512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpcklps256 (rtx, rtx, rtx);
extern rtx gen_avx_unpcklps256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_unpcklps128_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4sf (rtx, rtx, rtx);
extern rtx gen_avx_movshdup256 (rtx, rtx);
extern rtx gen_avx_movshdup256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse3_movshdup (rtx, rtx);
extern rtx gen_sse3_movshdup_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movshdup512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_movsldup256 (rtx, rtx);
extern rtx gen_avx_movsldup256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse3_movsldup (rtx, rtx);
extern rtx gen_sse3_movsldup_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movsldup512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufps256_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufps256_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_v4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_v4si (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_v4sf (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_storehps (rtx, rtx);
extern rtx gen_sse_loadhps (rtx, rtx, rtx);
extern rtx gen_sse_storelps (rtx, rtx);
extern rtx gen_sse_loadlps (rtx, rtx, rtx);
extern rtx gen_sse_movss (rtx, rtx, rtx);
extern rtx gen_avx2_vec_dupv8sf (rtx, rtx);
extern rtx gen_avx2_vec_dupv4sf (rtx, rtx);
extern rtx gen_avx2_vec_dupv8sf_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16sf_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8df_1 (rtx, rtx);
extern rtx gen_vec_setv4si_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv4sf_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv8si_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv8sf_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv16si_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv16sf_0 (rtx, rtx, rtx);
extern rtx gen_sse4_1_insertps (rtx, rtx, rtx, rtx);
extern rtx gen_vec_setv2df_0 (rtx, rtx, rtx);
extern rtx gen_avx512dq_vextractf64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextracti64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextractf32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextracti32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8df (rtx, rtx);
extern rtx gen_vec_extract_lo_v8di (rtx, rtx);
extern rtx gen_vec_extract_hi_v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8df (rtx, rtx);
extern rtx gen_vec_extract_hi_v8di (rtx, rtx);
extern rtx gen_vec_extract_hi_v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v16sf (rtx, rtx);
extern rtx gen_vec_extract_hi_v16si (rtx, rtx);
extern rtx gen_vec_extract_lo_v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v16sf (rtx, rtx);
extern rtx gen_vec_extract_lo_v16si (rtx, rtx);
extern rtx gen_vec_extract_lo_v4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v4di (rtx, rtx);
extern rtx gen_vec_extract_lo_v4df (rtx, rtx);
extern rtx gen_vec_extract_hi_v4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v4di (rtx, rtx);
extern rtx gen_vec_extract_hi_v4df (rtx, rtx);
extern rtx gen_vec_extract_lo_v8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_lo_v8si (rtx, rtx);
extern rtx gen_vec_extract_lo_v8sf (rtx, rtx);
extern rtx gen_vec_extract_hi_v8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_extract_hi_v8si (rtx, rtx);
extern rtx gen_vec_extract_hi_v8sf (rtx, rtx);
extern rtx gen_vec_extract_lo_v32hi (rtx, rtx);
extern rtx gen_vec_extract_hi_v32hi (rtx, rtx);
extern rtx gen_vec_extract_lo_v16hi (rtx, rtx);
extern rtx gen_vec_extract_hi_v16hi (rtx, rtx);
extern rtx gen_vec_extract_lo_v64qi (rtx, rtx);
extern rtx gen_vec_extract_hi_v64qi (rtx, rtx);
extern rtx gen_vec_extract_lo_v32qi (rtx, rtx);
extern rtx gen_vec_extract_hi_v32qi (rtx, rtx);
extern rtx gen_avx512f_unpckhpd512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpckhpd256 (rtx, rtx, rtx);
extern rtx gen_avx_unpckhpd256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_unpckhpd128_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_unpcklpd128_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf (rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmscalefv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scalefv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df (rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scalefv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv16sf (rtx, rtx);
extern rtx gen_avx512f_getexpv16sf_round (rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf (rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv8sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf (rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv8df (rtx, rtx);
extern rtx gen_avx512f_getexpv8df_round (rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getexpv8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4df (rtx, rtx);
extern rtx gen_avx512vl_getexpv4df_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv4df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv2df (rtx, rtx);
extern rtx gen_avx512vl_getexpv2df_round (rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getexpv2df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf (rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sgetexpv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_alignv16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_alignv8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_alignv2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz_1_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df (rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df (rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rndscalev2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rndscalev2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufps512_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufps512_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufpd512_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufpd512_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_v2df_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv4di (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_highv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv2di (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv4di (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_lowv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv2di (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_v2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_v2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_storehpd (rtx, rtx);
extern rtx gen_sse2_storelpd (rtx, rtx);
extern rtx gen_sse2_loadhpd (rtx, rtx, rtx);
extern rtx gen_sse2_loadlpd (rtx, rtx, rtx);
extern rtx gen_sse2_movsd (rtx, rtx, rtx);
extern rtx gen_vec_dupv2df (rtx, rtx);
extern rtx gen_vec_dupv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_concatv2df (rtx, rtx, rtx);
extern rtx gen_vec_setv8df_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv4df_0 (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ss_truncatev32hiv32qi2 (rtx, rtx);
extern rtx gen_avx512bw_truncatev32hiv32qi2 (rtx, rtx);
extern rtx gen_avx512bw_us_truncatev32hiv32qi2 (rtx, rtx);
extern rtx gen_avx512bw_ss_truncatev32hiv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_truncatev32hiv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_us_truncatev32hiv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev16hiv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev16hiv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev16hiv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8hiv8qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8hiv8qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8hiv8qi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8hiv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8hiv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8hiv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8hiv8qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8hiv8qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8hiv8qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4hi2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4siv4hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4siv4hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4siv4hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2hi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2si2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2si2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2si2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev2div2si2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev2div2si2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev2div2si2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div16qi2 (rtx, rtx);
extern rtx gen_avx512f_truncatev8div16qi2 (rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div16qi2 (rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div16qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div16qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div16qi2_mask_store_2 (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v16hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v8hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddwd512v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512dq_mulv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv16hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv8si3 (rtx, rtx, rtx);
extern rtx gen_ashrv4si3 (rtx, rtx, rtx);
extern rtx gen_ashrv32hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv4di3 (rtx, rtx, rtx);
extern rtx gen_ashrv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv16si3 (rtx, rtx, rtx);
extern rtx gen_ashrv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashrv8di3 (rtx, rtx, rtx);
extern rtx gen_ashrv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv16hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv16hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv8hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv8hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv8si3 (rtx, rtx, rtx);
extern rtx gen_lshrv8si3 (rtx, rtx, rtx);
extern rtx gen_ashlv4si3 (rtx, rtx, rtx);
extern rtx gen_lshrv4si3 (rtx, rtx, rtx);
extern rtx gen_ashlv4di3 (rtx, rtx, rtx);
extern rtx gen_lshrv4di3 (rtx, rtx, rtx);
extern rtx gen_ashlv2di3 (rtx, rtx, rtx);
extern rtx gen_lshrv2di3 (rtx, rtx, rtx);
extern rtx gen_ashlv32hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv32hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv16si3 (rtx, rtx, rtx);
extern rtx gen_ashlv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv16si3 (rtx, rtx, rtx);
extern rtx gen_lshrv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ashlv8di3 (rtx, rtx, rtx);
extern rtx gen_ashlv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_lshrv8di3 (rtx, rtx, rtx);
extern rtx gen_lshrv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlv4ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrv4ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlv2ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrv2ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlv1ti3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrv1ti3 (rtx, rtx, rtx);
extern rtx gen_avx2_ashlv2ti3 (rtx, rtx, rtx);
extern rtx gen_avx2_lshrv2ti3 (rtx, rtx, rtx);
extern rtx gen_sse2_ashlv1ti3 (rtx, rtx, rtx);
extern rtx gen_sse2_lshrv1ti3 (rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rolvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rorvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rolv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rolv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_rorv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv8si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4si (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rolv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rolv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_rorv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_rorv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rolv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv2di (rtx, rtx, rtx);
extern rtx gen_avx512vl_rorv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3_1 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3_1 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3_1 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_gtv2di3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv8si3 (rtx, rtx, rtx);
extern rtx gen_avx2_gtv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_gtv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_gtv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gtv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_gtv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_gtv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_gtv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_gtv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_gtv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_gtv4si3 (rtx, rtx, rtx);
extern rtx gen_one_cmplv16si2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_one_cmplv8di2_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_one_cmplv64qi2_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_one_cmplv64qi2_mask(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
static inline rtx gen_one_cmplv32qi2_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_one_cmplv32qi2_mask(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
static inline rtx gen_one_cmplv16qi2_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_one_cmplv16qi2_mask(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
static inline rtx gen_one_cmplv32hi2_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_one_cmplv32hi2_mask(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
static inline rtx gen_one_cmplv16hi2_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_one_cmplv16hi2_mask(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
static inline rtx gen_one_cmplv8hi2_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_one_cmplv8hi2_mask(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_one_cmplv8si2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_one_cmplv4si2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_one_cmplv4di2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_one_cmplv2di2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testmv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testmv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testmv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testmv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testmv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testmv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_testnmv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_testnmv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_testnmv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packsswb (rtx, rtx, rtx);
extern rtx gen_avx512bw_packsswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packsswb (rtx, rtx, rtx);
extern rtx gen_avx2_packsswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_packsswb (rtx, rtx, rtx);
extern rtx gen_sse2_packsswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packssdw (rtx, rtx, rtx);
extern rtx gen_avx512bw_packssdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packssdw (rtx, rtx, rtx);
extern rtx gen_avx2_packssdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_packssdw (rtx, rtx, rtx);
extern rtx gen_sse2_packssdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packuswb (rtx, rtx, rtx);
extern rtx gen_avx512bw_packuswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packuswb (rtx, rtx, rtx);
extern rtx gen_avx2_packuswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_packuswb (rtx, rtx, rtx);
extern rtx gen_sse2_packuswb_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv64qi (rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv32qi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv16qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_lowv64qi (rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_lowv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv32qi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv16qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_highv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv16hi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_interleave_lowv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv16hi (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv8si (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_highv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_highv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv8si (rtx, rtx, rtx);
extern rtx gen_avx2_interleave_lowv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_interleave_lowv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pinsrb (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pinsrd (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pinsrq (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinsertf64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinserti64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinsertf32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinserti32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16sf (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16si (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16sf (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16si (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8df (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8di (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8df (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8di (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_i64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_f64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f64x2_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i64x2_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i64x2_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_i32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_i32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_f32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_f32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i32x4_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i32x4_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_pshufd_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_pshufd_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufd_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufd_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufd_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufd_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pshuflwv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshuflw_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshuflw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pshufhwv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufhw_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufhw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_loadld (rtx, rtx, rtx);
extern rtx gen_vec_concatv2di (rtx, rtx, rtx);
extern rtx gen_vec_setv8di_0 (rtx, rtx, rtx);
extern rtx gen_vec_setv4di_0 (rtx, rtx, rtx);
extern rtx gen_avx512f_psadbw (rtx, rtx, rtx);
extern rtx gen_avx2_psadbw (rtx, rtx, rtx);
extern rtx gen_sse2_psadbw (rtx, rtx, rtx);
extern rtx gen_avx_movmskps256 (rtx, rtx);
extern rtx gen_sse_movmskps (rtx, rtx);
extern rtx gen_avx_movmskpd256 (rtx, rtx);
extern rtx gen_sse2_movmskpd (rtx, rtx);
extern rtx gen_avx2_pmovmskb (rtx, rtx);
extern rtx gen_sse2_pmovmskb (rtx, rtx);
extern rtx gen_sse_ldmxcsr (rtx);
extern rtx gen_sse_stmxcsr (rtx);
extern rtx gen_sse2_clflush (rtx);
extern rtx gen_sse3_mwait (rtx, rtx);
extern rtx gen_sse3_monitor_si (rtx, rtx, rtx);
extern rtx gen_sse3_monitor_di (rtx, rtx, rtx);
extern rtx gen_avx2_phaddwv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phaddswv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phsubwv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phsubswv16hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddwv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddswv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubwv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubswv8hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddwv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phaddswv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubwv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubswv4hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_phadddv8si3 (rtx, rtx, rtx);
extern rtx gen_avx2_phsubdv8si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phadddv4si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubdv4si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phadddv2si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_phsubdv2si3 (rtx, rtx, rtx);
extern rtx gen_avx2_pmaddubsw256 (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v8hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v16hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_pmaddubsw512v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_umulhrswv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_umulhrswv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pmaddubsw128 (rtx, rtx, rtx);
extern rtx gen_ssse3_pmaddubsw (rtx, rtx, rtx);
extern rtx gen_avx512bw_pshufbv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_pshufbv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufbv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_pshufbv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pshufbv16qi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_pshufbv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pshufbv8qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_psignv32qi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_psignv16hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_psignv8si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv4si3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv8qi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_psignv2si3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_palignrv64qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_palignrv32qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_palignrv16qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_palignrv4ti (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_palignrv2ti (rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_palignrti (rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_palignrdi (rtx, rtx, rtx, rtx);
extern rtx gen_absv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv64qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv16qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv32qi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv32hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_absv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_absv8qi2 (rtx, rtx);
extern rtx gen_ssse3_absv4hi2 (rtx, rtx);
extern rtx gen_ssse3_absv2si2 (rtx, rtx);
extern rtx gen_absv8qi2 (rtx, rtx);
extern rtx gen_absv4hi2 (rtx, rtx);
extern rtx gen_absv2si2 (rtx, rtx);
extern rtx gen_sse4a_movntsf (rtx, rtx);
extern rtx gen_sse4a_movntdf (rtx, rtx);
extern rtx gen_sse4a_vmmovntv4sf (rtx, rtx);
extern rtx gen_sse4a_vmmovntv2df (rtx, rtx);
extern rtx gen_sse4a_extrqi (rtx, rtx, rtx, rtx);
extern rtx gen_sse4a_extrq (rtx, rtx, rtx);
extern rtx gen_sse4a_insertqi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4a_insertq (rtx, rtx, rtx);
extern rtx gen_avx_blendps256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendps (rtx, rtx, rtx, rtx);
extern rtx gen_avx_blendpd256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendpd (rtx, rtx, rtx, rtx);
extern rtx gen_avx_blendvps256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendvps (rtx, rtx, rtx, rtx);
extern rtx gen_avx_blendvpd256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendvpd (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendvss (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_blendvsd (rtx, rtx, rtx, rtx);
extern rtx gen_avx_dpps256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_dpps (rtx, rtx, rtx, rtx);
extern rtx gen_avx_dppd256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_dppd (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_movntdqa (rtx, rtx);
extern rtx gen_avx2_movntdqa (rtx, rtx);
extern rtx gen_sse4_1_movntdqa (rtx, rtx);
extern rtx gen_avx2_mpsadbw (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_mpsadbw (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_packusdw (rtx, rtx, rtx);
extern rtx gen_avx512bw_packusdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_packusdw (rtx, rtx, rtx);
extern rtx gen_avx2_packusdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_packusdw (rtx, rtx, rtx);
extern rtx gen_sse4_1_packusdw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pblendvb (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pblendvb (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_pblendw (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pblenddv8si (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pblenddv4si (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_phminposuw (rtx, rtx);
extern rtx gen_avx2_sign_extendv16qiv16hi2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv16qiv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv16qiv16hi2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv16qiv16hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_sign_extendv32qiv32hi2 (rtx, rtx);
extern rtx gen_avx512bw_sign_extendv32qiv32hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_zero_extendv32qiv32hi2 (rtx, rtx);
extern rtx gen_avx512bw_zero_extendv32qiv32hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv8qiv8hi2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv8qiv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv8qiv8hi2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv8qiv8hi2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv16qiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv16qiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv8qiv8si2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv8qiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv8qiv8si2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv8qiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4qiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4qiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4qiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4qiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv16hiv16si2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv16hiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv16hiv16si2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv16hiv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv8hiv8si2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv8hiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv8hiv8si2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv8hiv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4hiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv4hiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4hiv4si2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv4hiv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv8qiv8di2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv8qiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv8qiv8di2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv8qiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv4qiv4di2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv4qiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv4qiv4di2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv4qiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2qiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2qiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2qiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2qiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv8hiv8di2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv8hiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv8hiv8di2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv8hiv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv4hiv4di2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv4hiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv4hiv4di2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv4hiv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2hiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2hiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2hiv2di2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2hiv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sign_extendv8siv8di2 (rtx, rtx);
extern rtx gen_avx512f_sign_extendv8siv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_zero_extendv8siv8di2 (rtx, rtx);
extern rtx gen_avx512f_zero_extendv8siv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sign_extendv4siv4di2 (rtx, rtx);
extern rtx gen_avx2_sign_extendv4siv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_zero_extendv4siv4di2 (rtx, rtx);
extern rtx gen_avx2_zero_extendv4siv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2siv2di2 (rtx, rtx);
extern rtx gen_sse4_1_sign_extendv2siv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2siv2di2 (rtx, rtx);
extern rtx gen_sse4_1_zero_extendv2siv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vtestps256 (rtx, rtx);
extern rtx gen_avx_vtestps (rtx, rtx);
extern rtx gen_avx_vtestpd256 (rtx, rtx);
extern rtx gen_avx_vtestpd (rtx, rtx);
extern rtx gen_sse4_1_ptestv16qi (rtx, rtx);
extern rtx gen_sse4_1_ptestv8hi (rtx, rtx);
extern rtx gen_sse4_1_ptestv4si (rtx, rtx);
extern rtx gen_sse4_1_ptestv2di (rtx, rtx);
extern rtx gen_sse4_1_ptestv4sf (rtx, rtx);
extern rtx gen_sse4_1_ptestv2df (rtx, rtx);
extern rtx gen_avx_ptestv32qi (rtx, rtx);
extern rtx gen_avx_ptestv16hi (rtx, rtx);
extern rtx gen_avx_ptestv8si (rtx, rtx);
extern rtx gen_avx_ptestv4di (rtx, rtx);
extern rtx gen_avx_ptestv8sf (rtx, rtx);
extern rtx gen_avx_ptestv4df (rtx, rtx);
extern rtx gen_ptesttf2 (rtx, rtx);
extern rtx gen_avx_roundps256 (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundps (rtx, rtx, rtx);
extern rtx gen_avx_roundpd256 (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundpd (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundss (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_roundsd (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestr (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestri (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestrm (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpestr_cconly (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistr (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistri (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistrm (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_2_pcmpistr_cconly (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v16sf (rtx, rtx);
extern rtx gen_avx512er_exp2v16sf_round (rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v8df (rtx, rtx);
extern rtx gen_avx512er_exp2v8df_round (rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_exp2v8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rcp28v8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v4sf (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v2df (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrcp28v2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v16sf_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_rsqrt28v8df_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v4sf (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v2df (rtx, rtx, rtx);
extern rtx gen_avx512er_vmrsqrt28v2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsww (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssww (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsdd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssdd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsdql (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssdql (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsdqh (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacssdqh (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmacsswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmadcswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pmadcsswd (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v32qi256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v16hi256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8si256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4di256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v8sf256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v4df256 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcmov_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_xop_phaddbw (rtx, rtx);
extern rtx gen_xop_phaddubw (rtx, rtx);
extern rtx gen_xop_phaddbd (rtx, rtx);
extern rtx gen_xop_phaddubd (rtx, rtx);
extern rtx gen_xop_phaddbq (rtx, rtx);
extern rtx gen_xop_phaddubq (rtx, rtx);
extern rtx gen_xop_phaddwd (rtx, rtx);
extern rtx gen_xop_phadduwd (rtx, rtx);
extern rtx gen_xop_phaddwq (rtx, rtx);
extern rtx gen_xop_phadduwq (rtx, rtx);
extern rtx gen_xop_phadddq (rtx, rtx);
extern rtx gen_xop_phaddudq (rtx, rtx);
extern rtx gen_xop_phsubbw (rtx, rtx);
extern rtx gen_xop_phsubwd (rtx, rtx);
extern rtx gen_xop_phsubdq (rtx, rtx);
extern rtx gen_xop_pperm (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pperm_pack_v2di_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pperm_pack_v4si_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pperm_pack_v8hi_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_xop_rotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotlv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_rotlv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_rotrv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_vrotlv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_shav16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_shav8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_shav4si3 (rtx, rtx, rtx);
extern rtx gen_xop_shav2di3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv16qi3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv8hi3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv4si3 (rtx, rtx, rtx);
extern rtx gen_xop_shlv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_frczsf2 (rtx, rtx);
extern rtx gen_xop_frczdf2 (rtx, rtx);
extern rtx gen_xop_frczv4sf2 (rtx, rtx);
extern rtx gen_xop_frczv2df2 (rtx, rtx);
extern rtx gen_xop_frczv8sf2 (rtx, rtx);
extern rtx gen_xop_frczv4df2 (rtx, rtx);
extern rtx gen_xop_maskcmpv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmpv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmpv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmpv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_unsv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_maskcmp_uns2v2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_pcom_tfv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v8sf3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v4sf3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v4df3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xop_vpermil2v2df3 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_aesenc (rtx, rtx, rtx);
extern rtx gen_aesenclast (rtx, rtx, rtx);
extern rtx gen_aesdec (rtx, rtx, rtx);
extern rtx gen_aesdeclast (rtx, rtx, rtx);
extern rtx gen_aesimc (rtx, rtx);
extern rtx gen_aeskeygenassist (rtx, rtx, rtx);
extern rtx gen_pclmulqdq (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pbroadcastv16si (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8di (rtx, rtx);
extern rtx gen_avx2_pbroadcastv64qi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv32qi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv16qi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv32hi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv16hi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8hi (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8si (rtx, rtx);
extern rtx gen_avx2_pbroadcastv4si (rtx, rtx);
extern rtx gen_avx2_pbroadcastv4di (rtx, rtx);
extern rtx gen_avx2_pbroadcastv2di (rtx, rtx);
extern rtx gen_avx2_pbroadcastv32qi_1 (rtx, rtx);
extern rtx gen_avx2_pbroadcastv16hi_1 (rtx, rtx);
extern rtx gen_avx2_pbroadcastv8si_1 (rtx, rtx);
extern rtx gen_avx2_pbroadcastv4di_1 (rtx, rtx);
extern rtx gen_avx2_permvarv8si (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permvarv8sf (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_permvarv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4di (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4df (rtx, rtx, rtx);
extern rtx gen_avx2_permvarv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv64qi (rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv32qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_permvarv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_permvarv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4di_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4di_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4df_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4df_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di_1 (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di_1_mask (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv2ti (rtx, rtx, rtx, rtx);
extern rtx gen_avx2_vec_dupv4df (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16si_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8di_1 (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv32hi_1 (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv64qi_1 (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16si (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8si (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4si (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dupv8di (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4di (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2di (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dupv16sf (rtx, rtx);
extern rtx gen_avx512f_vec_dupv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8sf (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4sf (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dupv8df (rtx, rtx);
extern rtx gen_avx512f_vec_dupv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4df (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2df (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dupv64qi (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16qi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv32qi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dupv32hi (rtx, rtx);
extern rtx gen_avx512bw_vec_dupv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16hi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8hi (rtx, rtx);
extern rtx gen_avx512vl_vec_dupv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_broadcastv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dup_gprv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vec_dup_gprv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vec_dup_gprv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vec_dup_gprv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vec_dupv4sf (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v32qi (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v16hi (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v8si (rtx, rtx);
extern rtx gen_avx2_vbroadcasti128_v4di (rtx, rtx);
extern rtx gen_vec_dupv8si (rtx, rtx);
extern rtx gen_vec_dupv8sf (rtx, rtx);
extern rtx gen_vec_dupv4di (rtx, rtx);
extern rtx gen_vec_dupv4df (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v32qi (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v16hi (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v8si (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v4di (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v8sf (rtx, rtx);
extern rtx gen_avx_vbroadcastf128_v4df (rtx, rtx);
extern rtx gen_avx512dq_broadcastv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_broadcastv8si_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_broadcastv8sf_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv16sf_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv16si_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8di_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv8df_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv4di_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_broadcastv4df_mask_1 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512cd_maskb_vec_dupv8di (rtx, rtx);
extern rtx gen_avx512cd_maskb_vec_dupv4di (rtx, rtx);
extern rtx gen_avx512cd_maskb_vec_dupv2di (rtx, rtx);
extern rtx gen_avx512cd_maskw_vec_dupv16si (rtx, rtx);
extern rtx gen_avx512cd_maskw_vec_dupv8si (rtx, rtx);
extern rtx gen_avx512cd_maskw_vec_dupv4si (rtx, rtx);
extern rtx gen_avx512f_vpermilvarv16sf3 (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilvarv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv8sf3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4sf3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilvarv8df3 (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilvarv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4df3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv2df3 (rtx, rtx, rtx);
extern rtx gen_avx_vpermilvarv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4di (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4df (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4di (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4df (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8si (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8sf (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8si (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8sf (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_set_lo_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_set_hi_v32qi (rtx, rtx, rtx);
extern rtx gen_avx_maskloadps (rtx, rtx, rtx);
extern rtx gen_avx_maskloadpd (rtx, rtx, rtx);
extern rtx gen_avx_maskloadps256 (rtx, rtx, rtx);
extern rtx gen_avx_maskloadpd256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadd (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadq (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadd256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskloadq256 (rtx, rtx, rtx);
extern rtx gen_avx_maskstoreps (rtx, rtx, rtx);
extern rtx gen_avx_maskstorepd (rtx, rtx, rtx);
extern rtx gen_avx_maskstoreps256 (rtx, rtx, rtx);
extern rtx gen_avx_maskstorepd256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskstored (rtx, rtx, rtx);
extern rtx gen_avx2_maskstoreq (rtx, rtx, rtx);
extern rtx gen_avx2_maskstored256 (rtx, rtx, rtx);
extern rtx gen_avx2_maskstoreq256 (rtx, rtx, rtx);
extern rtx gen_avx_si256_si (rtx, rtx);
extern rtx gen_avx_ps256_ps (rtx, rtx);
extern rtx gen_avx_pd256_pd (rtx, rtx);
extern rtx gen_avx2_ashrvv4si (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv8si (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv2di (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv4di (rtx, rtx, rtx);
extern rtx gen_avx2_ashrvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_ashrvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashrvv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ashrvv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashrvv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv8si (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv8si (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4si (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4si (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_ashlvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_lshrvv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4di (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4di (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv2di (rtx, rtx, rtx);
extern rtx gen_avx2_ashlvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv2di (rtx, rtx, rtx);
extern rtx gen_avx2_lshrvv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv8hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_ashlvv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv16hi (rtx, rtx, rtx);
extern rtx gen_avx512vl_lshrvv16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlvv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_ashlvv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrvv32hi (rtx, rtx, rtx);
extern rtx gen_avx512bw_lshrvv32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv32qi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv16hi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8si (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv4di (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8sf (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv4df (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv64qi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv32hi (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv16si (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8di (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv16sf (rtx, rtx, rtx);
extern rtx gen_avx_vec_concatv8df (rtx, rtx, rtx);
extern rtx gen_vcvtph2ps (rtx, rtx);
extern rtx gen_vcvtph2ps_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vcvtph2ps256 (rtx, rtx);
extern rtx gen_vcvtph2ps256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtph2ps512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtph2ps512_mask_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcvtps2ph256 (rtx, rtx, rtx);
extern rtx gen_vcvtps2ph256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vcvtps2ph512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_compressv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_compressv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev16si_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev16sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev8di_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_compressstorev8df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev8si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev8sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4df_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4si_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev4sf_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev2di_mask (rtx, rtx, rtx);
extern rtx gen_avx512vl_compressstorev2df_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev64qi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev16qi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev32qi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev32hi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev16hi_mask (rtx, rtx, rtx);
extern rtx gen_compressstorev8hi_mask (rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_expandv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8sf (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv8sf_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv8sf_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv8sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv8sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv4sf (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4sf_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4sf_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4sf_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv8df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangepv4df (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4df_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4df_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv4df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv4df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv2df (rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv2df_round (rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv2df_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangepv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_avx512dq_rangepv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_avx512dq_rangepv2df_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)), rtx g __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_avx512dq_rangesv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_rangesv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv16sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8df (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv8df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4df (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv4df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv2df (rtx, rtx, rtx);
extern rtx gen_avx512dq_fpclassv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vmfpclassv4sf (rtx, rtx, rtx);
extern rtx gen_avx512dq_vmfpclassv4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vmfpclassv2df (rtx, rtx, rtx);
extern rtx gen_avx512dq_vmfpclassv2df_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv16sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv8sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_getmantv8df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv4df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df (rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df_round (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_getmantv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv4sf_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vgetmantv2df_mask_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_dbpsadbwv8hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_dbpsadbwv16hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_dbpsadbwv32hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_clzv16si2 (rtx, rtx);
extern rtx gen_clzv16si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv8si2 (rtx, rtx);
extern rtx gen_clzv8si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv4si2 (rtx, rtx);
extern rtx gen_clzv4si2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv8di2 (rtx, rtx);
extern rtx gen_clzv8di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv4di2 (rtx, rtx);
extern rtx gen_clzv4di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_clzv2di2 (rtx, rtx);
extern rtx gen_clzv2di2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_conflictv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sha1msg1 (rtx, rtx, rtx);
extern rtx gen_sha1msg2 (rtx, rtx, rtx);
extern rtx gen_sha1nexte (rtx, rtx, rtx);
extern rtx gen_sha1rnds4 (rtx, rtx, rtx, rtx);
extern rtx gen_sha256msg1 (rtx, rtx, rtx);
extern rtx gen_sha256msg2 (rtx, rtx, rtx);
extern rtx gen_sha256rnds2 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_si512_si (rtx, rtx);
extern rtx gen_avx512f_ps512_ps (rtx, rtx);
extern rtx gen_avx512f_pd512_pd (rtx, rtx);
extern rtx gen_avx512f_si512_256si (rtx, rtx);
extern rtx gen_avx512f_ps512_256ps (rtx, rtx);
extern rtx gen_avx512f_pd512_256pd (rtx, rtx);
extern rtx gen_vpamdd52luqv8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv64qi (rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv16qi (rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv32qi (rtx, rtx, rtx);
extern rtx gen_vpmultishiftqbv32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddps (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddps_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddps_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddss (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddss_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fmaddss_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddps (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddps_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddps_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddss (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddss_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124fmaddps_4fnmaddss_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssd (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssd_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssd_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssds (rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssds_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx5124vnniw_vp4dpwssds_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv16si (rtx, rtx);
extern rtx gen_vpopcountv16si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv8si (rtx, rtx);
extern rtx gen_vpopcountv8si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv4si (rtx, rtx);
extern rtx gen_vpopcountv4si_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv8di (rtx, rtx);
extern rtx gen_vpopcountv8di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv4di (rtx, rtx);
extern rtx gen_vpopcountv4di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv2di (rtx, rtx);
extern rtx gen_vpopcountv2di_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv64qi (rtx, rtx);
extern rtx gen_vpopcountv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv16qi (rtx, rtx);
extern rtx gen_vpopcountv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv32qi (rtx, rtx);
extern rtx gen_vpopcountv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv32hi (rtx, rtx);
extern rtx gen_vpopcountv32hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv16hi (rtx, rtx);
extern rtx gen_vpopcountv16hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vpopcountv8hi (rtx, rtx);
extern rtx gen_vpopcountv8hi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v64qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v64qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v32qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineinvqb_v16qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v64qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v64qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v32qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8affineqb_v16qi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v64qi (rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v64qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v32qi (rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v32qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v16qi (rtx, rtx, rtx);
extern rtx gen_vgf2p8mulb_v16qi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v32hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v16hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v8hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrd_v2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v32hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v16hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v8hi_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v4si_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshld_v2di_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v32hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si (rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vaesdec_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesdec_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesdec_v64qi (rtx, rtx, rtx);
extern rtx gen_vaesdeclast_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesdeclast_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesdeclast_v64qi (rtx, rtx, rtx);
extern rtx gen_vaesenc_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesenc_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesenc_v64qi (rtx, rtx, rtx);
extern rtx gen_vaesenclast_v32qi (rtx, rtx, rtx);
extern rtx gen_vaesenclast_v16qi (rtx, rtx, rtx);
extern rtx gen_vaesenclast_v64qi (rtx, rtx, rtx);
extern rtx gen_vpclmulqdq_v8di (rtx, rtx, rtx, rtx);
extern rtx gen_vpclmulqdq_v4di (rtx, rtx, rtx, rtx);
extern rtx gen_vpclmulqdq_v2di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv64qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv64qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv32qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv32qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv16qi (rtx, rtx, rtx);
extern rtx gen_avx512vl_vpshufbitqmbv16qi_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vp2intersect_2intersectv8di (rtx, rtx, rtx);
extern rtx gen_avx512vp2intersect_2intersectv4di (rtx, rtx, rtx);
extern rtx gen_avx512vp2intersect_2intersectv2di (rtx, rtx, rtx);
extern rtx gen_avx512vp2intersect_2intersectv8si (rtx, rtx, rtx);
extern rtx gen_avx512vp2intersect_2intersectv4si (rtx, rtx, rtx);
extern rtx gen_avx512vp2intersect_2intersectv16si (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v32hi (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v32hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v16hi (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v16hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v8hi (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v8hi_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v16sf (rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v16sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v8sf (rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v8sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v4sf (rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v4sf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v16sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v8sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v4sf_maskz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mfence_sse2 (rtx);
extern rtx gen_mfence_nosse (rtx);
extern rtx gen_atomic_loaddi_fpu (rtx, rtx, rtx);
extern rtx gen_atomic_storeqi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storehi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storesi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storedi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_storedi_fpu (rtx, rtx, rtx);
extern rtx gen_loaddi_via_fpu (rtx, rtx);
extern rtx gen_storedi_via_fpu (rtx, rtx);
extern rtx gen_loaddi_via_sse (rtx, rtx);
extern rtx gen_storedi_via_sse (rtx, rtx);
extern rtx gen_atomic_compare_and_swapdi_doubleword (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapti_doubleword (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapqi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swaphi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapsi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapdi_1 (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_addqi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_addhi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_addsi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_fetch_adddi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangeqi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangehi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangesi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_exchangedi (rtx, rtx, rtx, rtx);
extern rtx gen_atomic_addqi (rtx, rtx, rtx);
extern rtx gen_atomic_addhi (rtx, rtx, rtx);
extern rtx gen_atomic_addsi (rtx, rtx, rtx);
extern rtx gen_atomic_adddi (rtx, rtx, rtx);
extern rtx gen_atomic_subqi (rtx, rtx, rtx);
extern rtx gen_atomic_subhi (rtx, rtx, rtx);
extern rtx gen_atomic_subsi (rtx, rtx, rtx);
extern rtx gen_atomic_subdi (rtx, rtx, rtx);
extern rtx gen_atomic_andqi (rtx, rtx, rtx);
extern rtx gen_atomic_orqi (rtx, rtx, rtx);
extern rtx gen_atomic_xorqi (rtx, rtx, rtx);
extern rtx gen_atomic_andhi (rtx, rtx, rtx);
extern rtx gen_atomic_orhi (rtx, rtx, rtx);
extern rtx gen_atomic_xorhi (rtx, rtx, rtx);
extern rtx gen_atomic_andsi (rtx, rtx, rtx);
extern rtx gen_atomic_orsi (rtx, rtx, rtx);
extern rtx gen_atomic_xorsi (rtx, rtx, rtx);
extern rtx gen_atomic_anddi (rtx, rtx, rtx);
extern rtx gen_atomic_ordi (rtx, rtx, rtx);
extern rtx gen_atomic_xordi (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_sethi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setsi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setdi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementhi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementsi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementdi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resethi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetsi_1 (rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetdi_1 (rtx, rtx, rtx);
extern rtx gen_cbranchqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchti4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoreqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstorehi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoresi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoredi4 (rtx, rtx, rtx, rtx);
extern rtx gen_cmpsi_1 (rtx, rtx);
extern rtx gen_cmpdi_1 (rtx, rtx);
extern rtx gen_cmpqi_ext_3 (rtx, rtx);
extern rtx gen_cbranchxf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstorexf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchsf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchdf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoresf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstoredf4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchcc4 (rtx, rtx, rtx, rtx);
extern rtx gen_cstorecc4 (rtx, rtx, rtx, rtx);
extern rtx gen_reload_noff_store (rtx, rtx, rtx);
extern rtx gen_reload_noff_load (rtx, rtx, rtx);
extern rtx gen_movxi (rtx, rtx);
extern rtx gen_movoi (rtx, rtx);
extern rtx gen_movti (rtx, rtx);
extern rtx gen_movcdi (rtx, rtx);
extern rtx gen_movqi (rtx, rtx);
extern rtx gen_movhi (rtx, rtx);
extern rtx gen_movsi (rtx, rtx);
extern rtx gen_movdi (rtx, rtx);
extern rtx gen_movstrictqi (rtx, rtx);
extern rtx gen_movstricthi (rtx, rtx);
extern rtx gen_extvhi (rtx, rtx, rtx, rtx);
extern rtx gen_extvsi (rtx, rtx, rtx, rtx);
extern rtx gen_extzvhi (rtx, rtx, rtx, rtx);
extern rtx gen_extzvsi (rtx, rtx, rtx, rtx);
extern rtx gen_extzvdi (rtx, rtx, rtx, rtx);
extern rtx gen_insvhi (rtx, rtx, rtx, rtx);
extern rtx gen_insvsi (rtx, rtx, rtx, rtx);
extern rtx gen_insvdi (rtx, rtx, rtx, rtx);
extern rtx gen_movtf (rtx, rtx);
extern rtx gen_movsf (rtx, rtx);
extern rtx gen_movdf (rtx, rtx);
extern rtx gen_movxf (rtx, rtx);
extern rtx gen_zero_extendsidi2 (rtx, rtx);
extern rtx gen_zero_extendqisi2 (rtx, rtx);
extern rtx gen_zero_extendhisi2 (rtx, rtx);
extern rtx gen_zero_extendqihi2 (rtx, rtx);
extern rtx gen_extendsidi2 (rtx, rtx);
extern rtx gen_extendsfdf2 (rtx, rtx);
extern rtx gen_extendsfxf2 (rtx, rtx);
extern rtx gen_extenddfxf2 (rtx, rtx);
extern rtx gen_fix_truncxfdi2 (rtx, rtx);
extern rtx gen_fix_truncsfdi2 (rtx, rtx);
extern rtx gen_fix_truncdfdi2 (rtx, rtx);
extern rtx gen_fix_truncxfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfsi2 (rtx, rtx);
extern rtx gen_fix_truncdfsi2 (rtx, rtx);
extern rtx gen_fix_truncsfhi2 (rtx, rtx);
extern rtx gen_fix_truncdfhi2 (rtx, rtx);
extern rtx gen_fix_truncxfhi2 (rtx, rtx);
extern rtx gen_fixuns_truncsfsi2 (rtx, rtx);
extern rtx gen_fixuns_truncdfsi2 (rtx, rtx);
extern rtx gen_fixuns_truncsfhi2 (rtx, rtx);
extern rtx gen_fixuns_truncdfhi2 (rtx, rtx);
extern rtx gen_floatsisf2 (rtx, rtx);
extern rtx gen_floatdisf2 (rtx, rtx);
extern rtx gen_floatsidf2 (rtx, rtx);
extern rtx gen_floatdidf2 (rtx, rtx);
extern rtx gen_floatunsqisf2 (rtx, rtx);
extern rtx gen_floatunshisf2 (rtx, rtx);
extern rtx gen_floatunsqidf2 (rtx, rtx);
extern rtx gen_floatunshidf2 (rtx, rtx);
extern rtx gen_floatunssisf2 (rtx, rtx);
extern rtx gen_floatunssidf2 (rtx, rtx);
extern rtx gen_floatunssixf2 (rtx, rtx);
extern rtx gen_floatunsdisf2 (rtx, rtx);
extern rtx gen_floatunsdidf2 (rtx, rtx);
extern rtx gen_addqi3 (rtx, rtx, rtx);
extern rtx gen_addhi3 (rtx, rtx, rtx);
extern rtx gen_addsi3 (rtx, rtx, rtx);
extern rtx gen_adddi3 (rtx, rtx, rtx);
extern rtx gen_addti3 (rtx, rtx, rtx);
extern rtx gen_addqi_ext_1 (rtx, rtx, rtx);
extern rtx gen_addvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addvti4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_uaddvti4 (rtx, rtx, rtx, rtx);
extern rtx gen_subqi3 (rtx, rtx, rtx);
extern rtx gen_subhi3 (rtx, rtx, rtx);
extern rtx gen_subsi3 (rtx, rtx, rtx);
extern rtx gen_subdi3 (rtx, rtx, rtx);
extern rtx gen_subti3 (rtx, rtx, rtx);
extern rtx gen_subvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_subvti4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_usubvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_addcarrysi_0 (rtx, rtx, rtx);
extern rtx gen_addcarrydi_0 (rtx, rtx, rtx);
extern rtx gen_subborrowsi_0 (rtx, rtx, rtx);
extern rtx gen_subborrowdi_0 (rtx, rtx, rtx);
extern rtx gen_addqi3_cconly_overflow (rtx, rtx);
extern rtx gen_addxf3 (rtx, rtx, rtx);
extern rtx gen_subxf3 (rtx, rtx, rtx);
extern rtx gen_addsf3 (rtx, rtx, rtx);
extern rtx gen_subsf3 (rtx, rtx, rtx);
extern rtx gen_adddf3 (rtx, rtx, rtx);
extern rtx gen_subdf3 (rtx, rtx, rtx);
extern rtx gen_mulhi3 (rtx, rtx, rtx);
extern rtx gen_mulsi3 (rtx, rtx, rtx);
extern rtx gen_muldi3 (rtx, rtx, rtx);
extern rtx gen_mulqi3 (rtx, rtx, rtx);
extern rtx gen_mulvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvdi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_umulvqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_mulsidi3 (rtx, rtx, rtx);
extern rtx gen_umulsidi3 (rtx, rtx, rtx);
extern rtx gen_mulditi3 (rtx, rtx, rtx);
extern rtx gen_umulditi3 (rtx, rtx, rtx);
extern rtx gen_mulqihi3 (rtx, rtx, rtx);
extern rtx gen_umulqihi3 (rtx, rtx, rtx);
extern rtx gen_smulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulsi3_highpart (rtx, rtx, rtx);
extern rtx gen_smuldi3_highpart (rtx, rtx, rtx);
extern rtx gen_umuldi3_highpart (rtx, rtx, rtx);
extern rtx gen_mulxf3 (rtx, rtx, rtx);
extern rtx gen_mulsf3 (rtx, rtx, rtx);
extern rtx gen_muldf3 (rtx, rtx, rtx);
extern rtx gen_divxf3 (rtx, rtx, rtx);
extern rtx gen_divsf3 (rtx, rtx, rtx);
extern rtx gen_divdf3 (rtx, rtx, rtx);
extern rtx gen_divmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodhi4 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodsi4 (rtx, rtx, rtx, rtx);
extern rtx gen_divmoddi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmoddi4 (rtx, rtx, rtx, rtx);
extern rtx gen_divmodqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_udivmodqi4 (rtx, rtx, rtx, rtx);
extern rtx gen_testsi_ccno_1 (rtx, rtx);
extern rtx gen_testdi_ccno_1 (rtx, rtx);
extern rtx gen_testqi_ccz_1 (rtx, rtx);
extern rtx gen_testqi_ext_1_ccno (rtx, rtx);
extern rtx gen_andqi3 (rtx, rtx, rtx);
extern rtx gen_andhi3 (rtx, rtx, rtx);
extern rtx gen_andsi3 (rtx, rtx, rtx);
extern rtx gen_anddi3 (rtx, rtx, rtx);
extern rtx gen_andqi_ext_1 (rtx, rtx, rtx);
extern rtx gen_iorqi3 (rtx, rtx, rtx);
extern rtx gen_xorqi3 (rtx, rtx, rtx);
extern rtx gen_iorhi3 (rtx, rtx, rtx);
extern rtx gen_xorhi3 (rtx, rtx, rtx);
extern rtx gen_iorsi3 (rtx, rtx, rtx);
extern rtx gen_xorsi3 (rtx, rtx, rtx);
extern rtx gen_iordi3 (rtx, rtx, rtx);
extern rtx gen_xordi3 (rtx, rtx, rtx);
extern rtx gen_xorqi_ext_1_cc (rtx, rtx, rtx);
extern rtx gen_negqi2 (rtx, rtx);
extern rtx gen_neghi2 (rtx, rtx);
extern rtx gen_negsi2 (rtx, rtx);
extern rtx gen_negdi2 (rtx, rtx);
extern rtx gen_negti2 (rtx, rtx);
extern rtx gen_negvqi3 (rtx, rtx, rtx);
extern rtx gen_negvhi3 (rtx, rtx, rtx);
extern rtx gen_negvsi3 (rtx, rtx, rtx);
extern rtx gen_negvdi3 (rtx, rtx, rtx);
extern rtx gen_abssi2 (rtx, rtx);
extern rtx gen_absdi2 (rtx, rtx);
extern rtx gen_abstf2 (rtx, rtx);
extern rtx gen_negtf2 (rtx, rtx);
extern rtx gen_abssf2 (rtx, rtx);
extern rtx gen_negsf2 (rtx, rtx);
extern rtx gen_absdf2 (rtx, rtx);
extern rtx gen_negdf2 (rtx, rtx);
extern rtx gen_absxf2 (rtx, rtx);
extern rtx gen_negxf2 (rtx, rtx);
extern rtx gen_copysignsf3 (rtx, rtx, rtx);
extern rtx gen_copysigndf3 (rtx, rtx, rtx);
extern rtx gen_copysigntf3 (rtx, rtx, rtx);
extern rtx gen_xorsignsf3 (rtx, rtx, rtx);
extern rtx gen_xorsigndf3 (rtx, rtx, rtx);
extern rtx gen_one_cmplqi2 (rtx, rtx);
extern rtx gen_one_cmplhi2 (rtx, rtx);
extern rtx gen_one_cmplsi2 (rtx, rtx);
extern rtx gen_one_cmpldi2 (rtx, rtx);
extern rtx gen_ashlqi3 (rtx, rtx, rtx);
extern rtx gen_ashlhi3 (rtx, rtx, rtx);
extern rtx gen_ashlsi3 (rtx, rtx, rtx);
extern rtx gen_ashldi3 (rtx, rtx, rtx);
extern rtx gen_ashlti3 (rtx, rtx, rtx);
extern rtx gen_x86_shiftsi_adj_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_shiftdi_adj_1 (rtx, rtx, rtx, rtx);
extern rtx gen_x86_shiftsi_adj_2 (rtx, rtx, rtx);
extern rtx gen_x86_shiftdi_adj_2 (rtx, rtx, rtx);
extern rtx gen_lshrqi3 (rtx, rtx, rtx);
extern rtx gen_ashrqi3 (rtx, rtx, rtx);
extern rtx gen_lshrhi3 (rtx, rtx, rtx);
extern rtx gen_ashrhi3 (rtx, rtx, rtx);
extern rtx gen_lshrsi3 (rtx, rtx, rtx);
extern rtx gen_ashrsi3 (rtx, rtx, rtx);
extern rtx gen_lshrdi3 (rtx, rtx, rtx);
extern rtx gen_ashrdi3 (rtx, rtx, rtx);
extern rtx gen_lshrti3 (rtx, rtx, rtx);
extern rtx gen_ashrti3 (rtx, rtx, rtx);
extern rtx gen_x86_shiftsi_adj_3 (rtx, rtx, rtx);
extern rtx gen_x86_shiftdi_adj_3 (rtx, rtx, rtx);
extern rtx gen_rotlti3 (rtx, rtx, rtx);
extern rtx gen_rotrti3 (rtx, rtx, rtx);
extern rtx gen_rotldi3 (rtx, rtx, rtx);
extern rtx gen_rotrdi3 (rtx, rtx, rtx);
extern rtx gen_rotlqi3 (rtx, rtx, rtx);
extern rtx gen_rotrqi3 (rtx, rtx, rtx);
extern rtx gen_rotlhi3 (rtx, rtx, rtx);
extern rtx gen_rotrhi3 (rtx, rtx, rtx);
extern rtx gen_rotlsi3 (rtx, rtx, rtx);
extern rtx gen_rotrsi3 (rtx, rtx, rtx);
extern rtx gen_indirect_jump (rtx);
extern rtx gen_tablejump (rtx, rtx);
extern rtx gen_call (rtx, rtx, rtx);
extern rtx gen_sibcall (rtx, rtx, rtx);
extern rtx gen_call_pop (rtx, rtx, rtx, rtx);
extern rtx gen_call_value (rtx, rtx, rtx, rtx);
extern rtx gen_sibcall_value (rtx, rtx, rtx, rtx);
extern rtx gen_call_value_pop (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_untyped_call (rtx, rtx, rtx);
extern rtx gen_memory_blockage (void);
extern rtx gen_return (void);
extern rtx gen_simple_return (void);
extern rtx gen_simple_return_indirect_internal (rtx);
extern rtx gen_prologue (void);
extern rtx gen_set_got (rtx);
extern rtx gen_set_got_labelled (rtx, rtx);
extern rtx gen_epilogue (void);
extern rtx gen_sibcall_epilogue (void);
extern rtx gen_eh_return (rtx);
extern rtx gen_leave_si (void);
extern rtx gen_leave_di (void);
extern rtx gen_split_stack_prologue (void);
extern rtx gen_split_stack_space_check (rtx, rtx);
extern rtx gen_ffssi2 (rtx, rtx);
extern rtx gen_ffsdi2 (rtx, rtx);
extern rtx gen_clzsi2 (rtx, rtx);
extern rtx gen_clzdi2 (rtx, rtx);
extern rtx gen_bmi2_bzhi_si3 (rtx, rtx, rtx);
extern rtx gen_bmi2_bzhi_di3 (rtx, rtx, rtx);
extern rtx gen_tbm_bextri_si (rtx, rtx, rtx, rtx);
extern rtx gen_tbm_bextri_di (rtx, rtx, rtx, rtx);
extern rtx gen_bswapdi2 (rtx, rtx);
extern rtx gen_bswapsi2 (rtx, rtx);
extern rtx gen_bswaphi2 (rtx, rtx);
extern rtx gen_paritydi2 (rtx, rtx);
extern rtx gen_paritysi2 (rtx, rtx);
extern rtx gen_parityhi2 (rtx, rtx);
extern rtx gen_parityqi2 (rtx, rtx);
extern rtx gen_tls_global_dynamic_32 (rtx, rtx, rtx, rtx);
extern rtx gen_tls_global_dynamic_64_si (rtx, rtx, rtx);
extern rtx gen_tls_global_dynamic_64_di (rtx, rtx, rtx);
extern rtx gen_tls_local_dynamic_base_32 (rtx, rtx, rtx);
extern rtx gen_tls_local_dynamic_base_64_si (rtx, rtx);
extern rtx gen_tls_local_dynamic_base_64_di (rtx, rtx);
extern rtx gen_tls_dynamic_gnu2_32 (rtx, rtx, rtx);
extern rtx gen_tls_dynamic_gnu2_64_si (rtx, rtx);
extern rtx gen_tls_dynamic_gnu2_64_di (rtx, rtx);
extern rtx gen_rsqrtsf2 (rtx, rtx);
extern rtx gen_sqrtsf2 (rtx, rtx);
extern rtx gen_sqrtdf2 (rtx, rtx);
extern rtx gen_hypotsf3 (rtx, rtx, rtx);
extern rtx gen_hypotdf3 (rtx, rtx, rtx);
extern rtx gen_fmodxf3 (rtx, rtx, rtx);
extern rtx gen_fmodsf3 (rtx, rtx, rtx);
extern rtx gen_fmoddf3 (rtx, rtx, rtx);
extern rtx gen_remainderxf3 (rtx, rtx, rtx);
extern rtx gen_remaindersf3 (rtx, rtx, rtx);
extern rtx gen_remainderdf3 (rtx, rtx, rtx);
extern rtx gen_sinsf2 (rtx, rtx);
extern rtx gen_cossf2 (rtx, rtx);
extern rtx gen_sindf2 (rtx, rtx);
extern rtx gen_cosdf2 (rtx, rtx);
extern rtx gen_sincossf3 (rtx, rtx, rtx);
extern rtx gen_sincosdf3 (rtx, rtx, rtx);
extern rtx gen_tanxf2 (rtx, rtx);
extern rtx gen_tansf2 (rtx, rtx);
extern rtx gen_tandf2 (rtx, rtx);
extern rtx gen_atan2sf3 (rtx, rtx, rtx);
extern rtx gen_atan2df3 (rtx, rtx, rtx);
extern rtx gen_atanxf2 (rtx, rtx);
extern rtx gen_atansf2 (rtx, rtx);
extern rtx gen_atandf2 (rtx, rtx);
extern rtx gen_asinxf2 (rtx, rtx);
extern rtx gen_asinsf2 (rtx, rtx);
extern rtx gen_asindf2 (rtx, rtx);
extern rtx gen_acosxf2 (rtx, rtx);
extern rtx gen_acossf2 (rtx, rtx);
extern rtx gen_acosdf2 (rtx, rtx);
extern rtx gen_sinhxf2 (rtx, rtx);
extern rtx gen_sinhsf2 (rtx, rtx);
extern rtx gen_sinhdf2 (rtx, rtx);
extern rtx gen_coshxf2 (rtx, rtx);
extern rtx gen_coshsf2 (rtx, rtx);
extern rtx gen_coshdf2 (rtx, rtx);
extern rtx gen_tanhxf2 (rtx, rtx);
extern rtx gen_tanhsf2 (rtx, rtx);
extern rtx gen_tanhdf2 (rtx, rtx);
extern rtx gen_asinhxf2 (rtx, rtx);
extern rtx gen_asinhsf2 (rtx, rtx);
extern rtx gen_asinhdf2 (rtx, rtx);
extern rtx gen_acoshxf2 (rtx, rtx);
extern rtx gen_acoshsf2 (rtx, rtx);
extern rtx gen_acoshdf2 (rtx, rtx);
extern rtx gen_atanhxf2 (rtx, rtx);
extern rtx gen_atanhsf2 (rtx, rtx);
extern rtx gen_atanhdf2 (rtx, rtx);
extern rtx gen_logxf2 (rtx, rtx);
extern rtx gen_logsf2 (rtx, rtx);
extern rtx gen_logdf2 (rtx, rtx);
extern rtx gen_log10xf2 (rtx, rtx);
extern rtx gen_log10sf2 (rtx, rtx);
extern rtx gen_log10df2 (rtx, rtx);
extern rtx gen_log2xf2 (rtx, rtx);
extern rtx gen_log2sf2 (rtx, rtx);
extern rtx gen_log2df2 (rtx, rtx);
extern rtx gen_log1pxf2 (rtx, rtx);
extern rtx gen_log1psf2 (rtx, rtx);
extern rtx gen_log1pdf2 (rtx, rtx);
extern rtx gen_logbxf2 (rtx, rtx);
extern rtx gen_logbsf2 (rtx, rtx);
extern rtx gen_logbdf2 (rtx, rtx);
extern rtx gen_ilogbxf2 (rtx, rtx);
extern rtx gen_ilogbsf2 (rtx, rtx);
extern rtx gen_ilogbdf2 (rtx, rtx);
extern rtx gen_expNcorexf3 (rtx, rtx, rtx);
extern rtx gen_expxf2 (rtx, rtx);
extern rtx gen_expsf2 (rtx, rtx);
extern rtx gen_expdf2 (rtx, rtx);
extern rtx gen_exp10xf2 (rtx, rtx);
extern rtx gen_exp10sf2 (rtx, rtx);
extern rtx gen_exp10df2 (rtx, rtx);
extern rtx gen_exp2xf2 (rtx, rtx);
extern rtx gen_exp2sf2 (rtx, rtx);
extern rtx gen_exp2df2 (rtx, rtx);
extern rtx gen_expm1xf2 (rtx, rtx);
extern rtx gen_expm1sf2 (rtx, rtx);
extern rtx gen_expm1df2 (rtx, rtx);
extern rtx gen_ldexpxf3 (rtx, rtx, rtx);
extern rtx gen_ldexpsf3 (rtx, rtx, rtx);
extern rtx gen_ldexpdf3 (rtx, rtx, rtx);
extern rtx gen_scalbxf3 (rtx, rtx, rtx);
extern rtx gen_scalbsf3 (rtx, rtx, rtx);
extern rtx gen_scalbdf3 (rtx, rtx, rtx);
extern rtx gen_significandxf2 (rtx, rtx);
extern rtx gen_significandsf2 (rtx, rtx);
extern rtx gen_significanddf2 (rtx, rtx);
extern rtx gen_rintsf2 (rtx, rtx);
extern rtx gen_rintdf2 (rtx, rtx);
extern rtx gen_nearbyintxf2 (rtx, rtx);
extern rtx gen_nearbyintsf2 (rtx, rtx);
extern rtx gen_nearbyintdf2 (rtx, rtx);
extern rtx gen_roundsf2 (rtx, rtx);
extern rtx gen_rounddf2 (rtx, rtx);
extern rtx gen_roundxf2 (rtx, rtx);
extern rtx gen_lrintsfsi2 (rtx, rtx);
extern rtx gen_lrintsfdi2 (rtx, rtx);
extern rtx gen_lrintdfsi2 (rtx, rtx);
extern rtx gen_lrintdfdi2 (rtx, rtx);
extern rtx gen_lroundsfhi2 (rtx, rtx);
extern rtx gen_lrounddfhi2 (rtx, rtx);
extern rtx gen_lroundxfhi2 (rtx, rtx);
extern rtx gen_lroundsfsi2 (rtx, rtx);
extern rtx gen_lrounddfsi2 (rtx, rtx);
extern rtx gen_lroundxfsi2 (rtx, rtx);
extern rtx gen_lroundsfdi2 (rtx, rtx);
extern rtx gen_lrounddfdi2 (rtx, rtx);
extern rtx gen_lroundxfdi2 (rtx, rtx);
extern rtx gen_roundevenxf2 (rtx, rtx);
extern rtx gen_floorxf2 (rtx, rtx);
extern rtx gen_ceilxf2 (rtx, rtx);
extern rtx gen_btruncxf2 (rtx, rtx);
extern rtx gen_roundevensf2 (rtx, rtx);
extern rtx gen_floorsf2 (rtx, rtx);
extern rtx gen_ceilsf2 (rtx, rtx);
extern rtx gen_btruncsf2 (rtx, rtx);
extern rtx gen_roundevendf2 (rtx, rtx);
extern rtx gen_floordf2 (rtx, rtx);
extern rtx gen_ceildf2 (rtx, rtx);
extern rtx gen_btruncdf2 (rtx, rtx);
extern rtx gen_lfloorxfhi2 (rtx, rtx);
extern rtx gen_lceilxfhi2 (rtx, rtx);
extern rtx gen_lfloorxfsi2 (rtx, rtx);
extern rtx gen_lceilxfsi2 (rtx, rtx);
extern rtx gen_lfloorxfdi2 (rtx, rtx);
extern rtx gen_lceilxfdi2 (rtx, rtx);
extern rtx gen_lfloorsfsi2 (rtx, rtx);
extern rtx gen_lceilsfsi2 (rtx, rtx);
extern rtx gen_lfloorsfdi2 (rtx, rtx);
extern rtx gen_lceilsfdi2 (rtx, rtx);
extern rtx gen_lfloordfsi2 (rtx, rtx);
extern rtx gen_lceildfsi2 (rtx, rtx);
extern rtx gen_lfloordfdi2 (rtx, rtx);
extern rtx gen_lceildfdi2 (rtx, rtx);
extern rtx gen_signbittf2 (rtx, rtx);
extern rtx gen_signbitxf2 (rtx, rtx);
extern rtx gen_signbitdf2 (rtx, rtx);
extern rtx gen_signbitsf2 (rtx, rtx);
extern rtx gen_cpymemsi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cpymemdi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strmov (rtx, rtx, rtx, rtx);
extern rtx gen_strmov_singleop (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rep_mov (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_setmemsi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_setmemdi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strset (rtx, rtx, rtx);
extern rtx gen_strset_singleop (rtx, rtx, rtx, rtx);
extern rtx gen_rep_stos (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrnsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpintqi (rtx);
extern rtx gen_cmpstrnqi_nz_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_cmpstrnqi_1 (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_strlensi (rtx, rtx, rtx, rtx);
extern rtx gen_strlendi (rtx, rtx, rtx, rtx);
extern rtx gen_strlenqi_1 (rtx, rtx, rtx);
extern rtx gen_movqicc (rtx, rtx, rtx, rtx);
extern rtx gen_movhicc (rtx, rtx, rtx, rtx);
extern rtx gen_movsicc (rtx, rtx, rtx, rtx);
extern rtx gen_movdicc (rtx, rtx, rtx, rtx);
extern rtx gen_x86_movsicc_0_m1 (rtx, rtx, rtx);
extern rtx gen_x86_movdicc_0_m1 (rtx, rtx, rtx);
extern rtx gen_movsfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movdfcc (rtx, rtx, rtx, rtx);
extern rtx gen_movxfcc (rtx, rtx, rtx, rtx);
extern rtx gen_addqicc (rtx, rtx, rtx, rtx);
extern rtx gen_addhicc (rtx, rtx, rtx, rtx);
extern rtx gen_addsicc (rtx, rtx, rtx, rtx);
extern rtx gen_adddicc (rtx, rtx, rtx, rtx);
extern rtx gen_smaxhi3 (rtx, rtx, rtx);
extern rtx gen_sminhi3 (rtx, rtx, rtx);
extern rtx gen_umaxhi3 (rtx, rtx, rtx);
extern rtx gen_uminhi3 (rtx, rtx, rtx);
extern rtx gen_smaxsi3 (rtx, rtx, rtx);
extern rtx gen_sminsi3 (rtx, rtx, rtx);
extern rtx gen_umaxsi3 (rtx, rtx, rtx);
extern rtx gen_uminsi3 (rtx, rtx, rtx);
extern rtx gen_smaxdi3 (rtx, rtx, rtx);
extern rtx gen_smindi3 (rtx, rtx, rtx);
extern rtx gen_umaxdi3 (rtx, rtx, rtx);
extern rtx gen_umindi3 (rtx, rtx, rtx);
extern rtx gen_allocate_stack (rtx, rtx);
extern rtx gen_probe_stack (rtx);
extern rtx gen_builtin_setjmp_receiver (rtx);
extern rtx gen_save_stack_nonlocal (rtx, rtx);
extern rtx gen_restore_stack_nonlocal (rtx, rtx);
extern rtx gen_prefetch (rtx, rtx, rtx);
extern rtx gen_stack_protect_set (rtx, rtx);
extern rtx gen_stack_protect_test (rtx, rtx, rtx);
extern rtx gen_pause (void);
extern rtx gen_xbegin (rtx);
extern rtx gen_xtest (rtx);
extern rtx gen_rdpkru (rtx);
extern rtx gen_wrpkru (rtx);
extern rtx gen_movv8qi (rtx, rtx);
extern rtx gen_movv4hi (rtx, rtx);
extern rtx gen_movv2si (rtx, rtx);
extern rtx gen_movv1di (rtx, rtx);
extern rtx gen_movv2sf (rtx, rtx);
extern rtx gen_movmisalignv8qi (rtx, rtx);
extern rtx gen_movmisalignv4hi (rtx, rtx);
extern rtx gen_movmisalignv2si (rtx, rtx);
extern rtx gen_movmisalignv1di (rtx, rtx);
extern rtx gen_movmisalignv2sf (rtx, rtx);
extern rtx gen_absv2sf2 (rtx, rtx);
extern rtx gen_negv2sf2 (rtx, rtx);
extern rtx gen_mmx_addv2sf3 (rtx, rtx, rtx);
extern rtx gen_addv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_subrv2sf3 (rtx, rtx, rtx);
extern rtx gen_subv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_mulv2sf3 (rtx, rtx, rtx);
extern rtx gen_mulv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_smaxv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_sminv2sf3 (rtx, rtx, rtx);
extern rtx gen_smaxv2sf3 (rtx, rtx, rtx);
extern rtx gen_sminv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_haddv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_haddsubv2sf3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv2sf3 (rtx, rtx, rtx);
extern rtx gen_copysignv2sf3 (rtx, rtx, rtx);
extern rtx gen_xorsignv2sf3 (rtx, rtx, rtx);
extern rtx gen_signbitv2sf2 (rtx, rtx);
extern rtx gen_fix_truncv2sfv2si2 (rtx, rtx);
extern rtx gen_floatv2siv2sf2 (rtx, rtx);
extern rtx gen_vec_setv2sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv2sfsf (rtx, rtx, rtx);
extern rtx gen_vec_initv2sfsf (rtx, rtx);
extern rtx gen_mmx_addv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_addv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_subv1di3 (rtx, rtx, rtx);
extern rtx gen_addv8qi3 (rtx, rtx, rtx);
extern rtx gen_subv8qi3 (rtx, rtx, rtx);
extern rtx gen_addv4hi3 (rtx, rtx, rtx);
extern rtx gen_subv4hi3 (rtx, rtx, rtx);
extern rtx gen_addv2si3 (rtx, rtx, rtx);
extern rtx gen_subv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_ssaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_usaddv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sssubv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ussubv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ssaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_usaddv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sssubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_ussubv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_mulv4hi3 (rtx, rtx, rtx);
extern rtx gen_mulv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_smulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_umulv4hi3_highpart (rtx, rtx, rtx);
extern rtx gen_mmx_pmaddwd (rtx, rtx, rtx);
extern rtx gen_mmx_pmulhrwv4hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_umulv1siv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_smaxv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_sminv4hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv4hi3 (rtx, rtx, rtx);
extern rtx gen_sminv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_umaxv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uminv8qi3 (rtx, rtx, rtx);
extern rtx gen_umaxv8qi3 (rtx, rtx, rtx);
extern rtx gen_uminv8qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashrv2si3 (rtx, rtx, rtx);
extern rtx gen_ashlv4hi3 (rtx, rtx, rtx);
extern rtx gen_lshrv4hi3 (rtx, rtx, rtx);
extern rtx gen_ashlv2si3 (rtx, rtx, rtx);
extern rtx gen_lshrv2si3 (rtx, rtx, rtx);
extern rtx gen_ashlv1di3 (rtx, rtx, rtx);
extern rtx gen_lshrv1di3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_eqv2si3 (rtx, rtx, rtx);
extern rtx gen_one_cmplv8qi2 (rtx, rtx);
extern rtx gen_one_cmplv4hi2 (rtx, rtx);
extern rtx gen_one_cmplv2si2 (rtx, rtx);
extern rtx gen_mmx_andv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv4hi3 (rtx, rtx, rtx);
extern rtx gen_mmx_andv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_iorv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_xorv2si3 (rtx, rtx, rtx);
extern rtx gen_andv8qi3 (rtx, rtx, rtx);
extern rtx gen_iorv8qi3 (rtx, rtx, rtx);
extern rtx gen_xorv8qi3 (rtx, rtx, rtx);
extern rtx gen_andv4hi3 (rtx, rtx, rtx);
extern rtx gen_iorv4hi3 (rtx, rtx, rtx);
extern rtx gen_xorv4hi3 (rtx, rtx, rtx);
extern rtx gen_andv2si3 (rtx, rtx, rtx);
extern rtx gen_iorv2si3 (rtx, rtx, rtx);
extern rtx gen_xorv2si3 (rtx, rtx, rtx);
extern rtx gen_mmx_pinsrw (rtx, rtx, rtx, rtx);
extern rtx gen_mmx_pshufw (rtx, rtx, rtx);
extern rtx gen_vec_setv2si (rtx, rtx, rtx);
extern rtx gen_vec_extractv2sisi (rtx, rtx, rtx);
extern rtx gen_vec_initv2sisi (rtx, rtx);
extern rtx gen_vec_setv4hi (rtx, rtx, rtx);
extern rtx gen_vec_extractv4hihi (rtx, rtx, rtx);
extern rtx gen_vec_initv4hihi (rtx, rtx);
extern rtx gen_vec_setv8qi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8qiqi (rtx, rtx, rtx);
extern rtx gen_vec_initv8qiqi (rtx, rtx);
extern rtx gen_mmx_uavgv8qi3 (rtx, rtx, rtx);
extern rtx gen_mmx_uavgv4hi3 (rtx, rtx, rtx);
extern rtx gen_uavgv8qi3_ceil (rtx, rtx, rtx);
extern rtx gen_uavgv4hi3_ceil (rtx, rtx, rtx);
extern rtx gen_reduc_plus_scal_v8qi (rtx, rtx);
extern rtx gen_usadv8qi (rtx, rtx, rtx, rtx);
extern rtx gen_mmx_maskmovq (rtx, rtx, rtx);
extern rtx gen_mmx_emms (void);
extern rtx gen_mmx_femms (void);
extern rtx gen_movv64qi (rtx, rtx);
extern rtx gen_movv32qi (rtx, rtx);
extern rtx gen_movv16qi (rtx, rtx);
extern rtx gen_movv32hi (rtx, rtx);
extern rtx gen_movv16hi (rtx, rtx);
extern rtx gen_movv8hi (rtx, rtx);
extern rtx gen_movv16si (rtx, rtx);
extern rtx gen_movv8si (rtx, rtx);
extern rtx gen_movv4si (rtx, rtx);
extern rtx gen_movv8di (rtx, rtx);
extern rtx gen_movv4di (rtx, rtx);
extern rtx gen_movv2di (rtx, rtx);
extern rtx gen_movv4ti (rtx, rtx);
extern rtx gen_movv2ti (rtx, rtx);
extern rtx gen_movv1ti (rtx, rtx);
extern rtx gen_movv16sf (rtx, rtx);
extern rtx gen_movv8sf (rtx, rtx);
extern rtx gen_movv4sf (rtx, rtx);
extern rtx gen_movv8df (rtx, rtx);
extern rtx gen_movv4df (rtx, rtx);
extern rtx gen_movv2df (rtx, rtx);
extern rtx gen_avx512f_loadsf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_loaddf_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv16si (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv8si (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4si (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv8di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv2di (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv16sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv8sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_blendmv8df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv4df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_blendmv64qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_blendmv32hi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_blendmv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_movmisalignv64qi (rtx, rtx);
extern rtx gen_movmisalignv32qi (rtx, rtx);
extern rtx gen_movmisalignv16qi (rtx, rtx);
extern rtx gen_movmisalignv32hi (rtx, rtx);
extern rtx gen_movmisalignv16hi (rtx, rtx);
extern rtx gen_movmisalignv8hi (rtx, rtx);
extern rtx gen_movmisalignv16si (rtx, rtx);
extern rtx gen_movmisalignv8si (rtx, rtx);
extern rtx gen_movmisalignv4si (rtx, rtx);
extern rtx gen_movmisalignv8di (rtx, rtx);
extern rtx gen_movmisalignv4di (rtx, rtx);
extern rtx gen_movmisalignv2di (rtx, rtx);
extern rtx gen_movmisalignv4ti (rtx, rtx);
extern rtx gen_movmisalignv2ti (rtx, rtx);
extern rtx gen_movmisalignv1ti (rtx, rtx);
extern rtx gen_movmisalignv16sf (rtx, rtx);
extern rtx gen_movmisalignv8sf (rtx, rtx);
extern rtx gen_movmisalignv4sf (rtx, rtx);
extern rtx gen_movmisalignv8df (rtx, rtx);
extern rtx gen_movmisalignv4df (rtx, rtx);
extern rtx gen_movmisalignv2df (rtx, rtx);
extern rtx gen_storentdi (rtx, rtx);
extern rtx gen_storentsi (rtx, rtx);
extern rtx gen_storentsf (rtx, rtx);
extern rtx gen_storentdf (rtx, rtx);
extern rtx gen_storentv8di (rtx, rtx);
extern rtx gen_storentv4di (rtx, rtx);
extern rtx gen_storentv2di (rtx, rtx);
extern rtx gen_storentv16sf (rtx, rtx);
extern rtx gen_storentv8sf (rtx, rtx);
extern rtx gen_storentv4sf (rtx, rtx);
extern rtx gen_storentv8df (rtx, rtx);
extern rtx gen_storentv4df (rtx, rtx);
extern rtx gen_storentv2df (rtx, rtx);
extern rtx gen_kmovb (rtx, rtx);
extern rtx gen_kmovw (rtx, rtx);
extern rtx gen_kmovd (rtx, rtx);
extern rtx gen_kmovq (rtx, rtx);
extern rtx gen_absv16sf2 (rtx, rtx);
extern rtx gen_negv16sf2 (rtx, rtx);
extern rtx gen_absv8sf2 (rtx, rtx);
extern rtx gen_negv8sf2 (rtx, rtx);
extern rtx gen_absv4sf2 (rtx, rtx);
extern rtx gen_negv4sf2 (rtx, rtx);
extern rtx gen_absv8df2 (rtx, rtx);
extern rtx gen_negv8df2 (rtx, rtx);
extern rtx gen_absv4df2 (rtx, rtx);
extern rtx gen_negv4df2 (rtx, rtx);
extern rtx gen_absv2df2 (rtx, rtx);
extern rtx gen_negv2df2 (rtx, rtx);
extern rtx gen_addv16sf3 (rtx, rtx, rtx);
extern rtx gen_addv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_addv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16sf3 (rtx, rtx, rtx);
extern rtx gen_subv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_subv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8sf3 (rtx, rtx, rtx);
static inline rtx gen_addv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv8sf3 (rtx, rtx, rtx);
static inline rtx gen_subv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv4sf3 (rtx, rtx, rtx);
static inline rtx gen_addv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4sf3 (rtx, rtx, rtx);
static inline rtx gen_subv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv8df3 (rtx, rtx, rtx);
extern rtx gen_addv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_addv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8df3 (rtx, rtx, rtx);
extern rtx gen_subv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_subv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv4df3 (rtx, rtx, rtx);
static inline rtx gen_addv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4df3 (rtx, rtx, rtx);
static inline rtx gen_subv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv2df3 (rtx, rtx, rtx);
static inline rtx gen_addv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_addv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_addv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_addv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_addv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv2df3 (rtx, rtx, rtx);
static inline rtx gen_subv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_subv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_subv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_subv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_subv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv16sf3 (rtx, rtx, rtx);
extern rtx gen_mulv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_mulv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8sf3 (rtx, rtx, rtx);
static inline rtx gen_mulv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv4sf3 (rtx, rtx, rtx);
static inline rtx gen_mulv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv8df3 (rtx, rtx, rtx);
extern rtx gen_mulv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_mulv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv4df3 (rtx, rtx, rtx);
static inline rtx gen_mulv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv2df3 (rtx, rtx, rtx);
static inline rtx gen_mulv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_mulv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_mulv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_mulv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_divv8df3 (rtx, rtx, rtx);
extern rtx gen_divv4df3 (rtx, rtx, rtx);
extern rtx gen_divv2df3 (rtx, rtx, rtx);
extern rtx gen_divv16sf3 (rtx, rtx, rtx);
extern rtx gen_divv8sf3 (rtx, rtx, rtx);
extern rtx gen_divv4sf3 (rtx, rtx, rtx);
extern rtx gen_sqrtv8df2 (rtx, rtx);
extern rtx gen_sqrtv4df2 (rtx, rtx);
extern rtx gen_sqrtv2df2 (rtx, rtx);
extern rtx gen_sqrtv16sf2 (rtx, rtx);
extern rtx gen_sqrtv8sf2 (rtx, rtx);
extern rtx gen_sqrtv4sf2 (rtx, rtx);
extern rtx gen_rsqrtv16sf2 (rtx, rtx);
extern rtx gen_rsqrtv8sf2 (rtx, rtx);
extern rtx gen_rsqrtv4sf2 (rtx, rtx);
extern rtx gen_smaxv16sf3 (rtx, rtx, rtx);
extern rtx gen_smaxv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16sf3 (rtx, rtx, rtx);
extern rtx gen_sminv16sf3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sminv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8sf3 (rtx, rtx, rtx);
static inline rtx gen_smaxv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv8sf3 (rtx, rtx, rtx);
static inline rtx gen_sminv8sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv8sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv8sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv8sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv4sf3 (rtx, rtx, rtx);
static inline rtx gen_smaxv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4sf3 (rtx, rtx, rtx);
static inline rtx gen_sminv4sf3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4sf3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv4sf3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4sf3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv8df3 (rtx, rtx, rtx);
extern rtx gen_smaxv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8df3 (rtx, rtx, rtx);
extern rtx gen_sminv8df3_round (rtx, rtx, rtx, rtx);
extern rtx gen_sminv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv4df3 (rtx, rtx, rtx);
static inline rtx gen_smaxv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4df3 (rtx, rtx, rtx);
static inline rtx gen_sminv4df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv4df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv4df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv4df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv2df3 (rtx, rtx, rtx);
static inline rtx gen_smaxv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_smaxv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_smaxv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_smaxv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv2df3 (rtx, rtx, rtx);
static inline rtx gen_sminv2df3_round (rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv2df3_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sminv2df3_mask (rtx, rtx, rtx, rtx, rtx);
static inline rtx gen_sminv2df3_mask_round (rtx, rtx, rtx, rtx, rtx, rtx);
static inline rtx
gen_sminv2df3_mask_round(rtx a __attribute__ ((__unused__)), rtx b __attribute__ ((__unused__)), rtx c __attribute__ ((__unused__)), rtx d __attribute__ ((__unused__)), rtx e __attribute__ ((__unused__)), rtx f __attribute__ ((__unused__)))
{
  return 0;
}
extern rtx gen_sse3_haddv2df3 (rtx, rtx, rtx);
extern rtx gen_reduc_plus_scal_v2df (rtx, rtx);
extern rtx gen_reduc_plus_scal_v4sf (rtx, rtx);
extern rtx gen_reduc_plus_scal_v16qi (rtx, rtx);
extern rtx gen_reduc_plus_scal_v4df (rtx, rtx);
extern rtx gen_reduc_plus_scal_v8sf (rtx, rtx);
extern rtx gen_reduc_plus_scal_v8df (rtx, rtx);
extern rtx gen_reduc_plus_scal_v16sf (rtx, rtx);
extern rtx gen_reduc_plus_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_plus_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v4sf (rtx, rtx);
extern rtx gen_reduc_smin_scal_v4sf (rtx, rtx);
extern rtx gen_reduc_smax_scal_v2df (rtx, rtx);
extern rtx gen_reduc_smin_scal_v2df (rtx, rtx);
extern rtx gen_reduc_smax_scal_v4si (rtx, rtx);
extern rtx gen_reduc_smin_scal_v4si (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8hi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8hi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v16qi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v16qi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v2di (rtx, rtx);
extern rtx gen_reduc_smin_scal_v2di (rtx, rtx);
extern rtx gen_reduc_smax_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8si (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8si (rtx, rtx);
extern rtx gen_reduc_smax_scal_v4di (rtx, rtx);
extern rtx gen_reduc_smin_scal_v4di (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8sf (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8sf (rtx, rtx);
extern rtx gen_reduc_smax_scal_v4df (rtx, rtx);
extern rtx gen_reduc_smin_scal_v4df (rtx, rtx);
extern rtx gen_reduc_smax_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_smin_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_smax_scal_v16si (rtx, rtx);
extern rtx gen_reduc_smin_scal_v16si (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8di (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8di (rtx, rtx);
extern rtx gen_reduc_smax_scal_v16sf (rtx, rtx);
extern rtx gen_reduc_smin_scal_v16sf (rtx, rtx);
extern rtx gen_reduc_smax_scal_v8df (rtx, rtx);
extern rtx gen_reduc_smin_scal_v8df (rtx, rtx);
extern rtx gen_reduc_umax_scal_v16si (rtx, rtx);
extern rtx gen_reduc_umin_scal_v16si (rtx, rtx);
extern rtx gen_reduc_umax_scal_v8di (rtx, rtx);
extern rtx gen_reduc_umin_scal_v8di (rtx, rtx);
extern rtx gen_reduc_umax_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v32hi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v64qi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v32qi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_umin_scal_v16hi (rtx, rtx);
extern rtx gen_reduc_umax_scal_v8si (rtx, rtx);
extern rtx gen_reduc_umin_scal_v8si (rtx, rtx);
extern rtx gen_reduc_umax_scal_v4di (rtx, rtx);
extern rtx gen_reduc_umin_scal_v4di (rtx, rtx);
extern rtx gen_reduc_umin_scal_v8hi (rtx, rtx);
extern rtx gen_vec_cmpv16sihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16sfhi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv64qidi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16qihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv32qisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv32hisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16hihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8hiqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv32qiv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16hiv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8siv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4div4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv16qiv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8hiv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4siv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv8sfv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4dfv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv4sfv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpv2dfv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16sihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv2diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv64qidi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16qihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv32qisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv32hisi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16hihi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8hiqi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv32qiv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16hiv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8siv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4div4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv16qiv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv8hiv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv4siv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpuv2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_cmpeqv2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16sihi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4siqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2diqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16sfhi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4sfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2dfqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v64qidi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16qihi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v32qisi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v32hisi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16hihi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8hiqi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v32qiv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16hiv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8siv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4div4di (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v16qiv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8hiv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4siv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2div2di (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v8sfv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4dfv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v4sfv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vcond_mask_v2dfv2di (rtx, rtx, rtx, rtx);
extern rtx gen_andv8sf3 (rtx, rtx, rtx);
extern rtx gen_andv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8sf3 (rtx, rtx, rtx);
extern rtx gen_iorv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8sf3 (rtx, rtx, rtx);
extern rtx gen_xorv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4sf3 (rtx, rtx, rtx);
extern rtx gen_andv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4sf3 (rtx, rtx, rtx);
extern rtx gen_iorv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4sf3 (rtx, rtx, rtx);
extern rtx gen_xorv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv4df3 (rtx, rtx, rtx);
extern rtx gen_andv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv4df3 (rtx, rtx, rtx);
extern rtx gen_iorv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv4df3 (rtx, rtx, rtx);
extern rtx gen_xorv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv2df3 (rtx, rtx, rtx);
extern rtx gen_andv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv2df3 (rtx, rtx, rtx);
extern rtx gen_iorv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv2df3 (rtx, rtx, rtx);
extern rtx gen_xorv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv16sf3 (rtx, rtx, rtx);
extern rtx gen_andv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv16sf3 (rtx, rtx, rtx);
extern rtx gen_iorv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv16sf3 (rtx, rtx, rtx);
extern rtx gen_xorv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv8df3 (rtx, rtx, rtx);
extern rtx gen_andv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_iorv8df3 (rtx, rtx, rtx);
extern rtx gen_iorv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_xorv8df3 (rtx, rtx, rtx);
extern rtx gen_xorv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_copysignv16sf3 (rtx, rtx, rtx);
extern rtx gen_copysignv8sf3 (rtx, rtx, rtx);
extern rtx gen_copysignv4sf3 (rtx, rtx, rtx);
extern rtx gen_copysignv8df3 (rtx, rtx, rtx);
extern rtx gen_copysignv4df3 (rtx, rtx, rtx);
extern rtx gen_copysignv2df3 (rtx, rtx, rtx);
extern rtx gen_xorsignv16sf3 (rtx, rtx, rtx);
extern rtx gen_xorsignv8sf3 (rtx, rtx, rtx);
extern rtx gen_xorsignv4sf3 (rtx, rtx, rtx);
extern rtx gen_xorsignv8df3 (rtx, rtx, rtx);
extern rtx gen_xorsignv4df3 (rtx, rtx, rtx);
extern rtx gen_xorsignv2df3 (rtx, rtx, rtx);
extern rtx gen_signbitv16sf2 (rtx, rtx);
extern rtx gen_signbitv8sf2 (rtx, rtx);
extern rtx gen_signbitv4sf2 (rtx, rtx);
extern rtx gen_andtf3 (rtx, rtx, rtx);
extern rtx gen_iortf3 (rtx, rtx, rtx);
extern rtx gen_xortf3 (rtx, rtx, rtx);
extern rtx gen_fmasf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmadf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmav8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmssf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsdf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fmsv8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmasf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmadf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmav8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmssf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsdf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv4sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv2df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv8sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv4df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv16sf4 (rtx, rtx, rtx, rtx);
extern rtx gen_fnmsv8df4 (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v4df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmadd_v8df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_v4df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fmsub_v8df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_v4df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmadd_v8df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_v4df (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_fnmsub_v8df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmadd_v8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmadd_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmsub_v8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmsub_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v8df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmadd_v8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmadd_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fnmsub_v8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fnmsub_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v16sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v8df (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v4df (rtx, rtx, rtx, rtx);
extern rtx gen_fmaddsub_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fmaddsub_v8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fmaddsub_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmadd_v2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmsub_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmsub_v4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmsub_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfmsub_v2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmadd_v4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmadd_v2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmsub_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmsub_v4sf_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmsub_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_fmai_vmfnmsub_v2df_round (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vmfmadd_v2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_vmfmadd_v4sf (rtx, rtx, rtx, rtx);
extern rtx gen_fma4i_vmfmadd_v2df (rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv16siv16sf2 (rtx, rtx);
extern rtx gen_floatunsv8siv8sf2 (rtx, rtx);
extern rtx gen_floatunsv4siv4sf2 (rtx, rtx);
extern rtx gen_fixuns_truncv16sfv16si2 (rtx, rtx);
extern rtx gen_fixuns_truncv8sfv8si2 (rtx, rtx);
extern rtx gen_fixuns_truncv4sfv4si2 (rtx, rtx);
extern rtx gen_floatv2siv2df2 (rtx, rtx);
extern rtx gen_fix_truncv2dfv2si2 (rtx, rtx);
extern rtx gen_avx512dq_floatv2div2sf2 (rtx, rtx);
extern rtx gen_avx512dq_floatunsv2div2sf2 (rtx, rtx);
extern rtx gen_floatv2div2sf2 (rtx, rtx);
extern rtx gen_floatunsv2div2sf2 (rtx, rtx);
extern rtx gen_vec_packs_float_v8di (rtx, rtx, rtx);
extern rtx gen_vec_packu_float_v8di (rtx, rtx, rtx);
extern rtx gen_vec_packs_float_v4di (rtx, rtx, rtx);
extern rtx gen_vec_packu_float_v4di (rtx, rtx, rtx);
extern rtx gen_vec_packs_float_v2di (rtx, rtx, rtx);
extern rtx gen_vec_packu_float_v2di (rtx, rtx, rtx);
extern rtx gen_floatv2div2sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_floatunsv2div2sf2_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_cvtpd2dq256_2 (rtx, rtx);
extern rtx gen_fix_truncv2sfv2di2 (rtx, rtx);
extern rtx gen_fixuns_truncv2sfv2di2 (rtx, rtx);
extern rtx gen_vec_unpack_sfix_trunc_lo_v16sf (rtx, rtx);
extern rtx gen_vec_unpack_ufix_trunc_lo_v16sf (rtx, rtx);
extern rtx gen_vec_unpack_sfix_trunc_lo_v8sf (rtx, rtx);
extern rtx gen_vec_unpack_ufix_trunc_lo_v8sf (rtx, rtx);
extern rtx gen_vec_unpack_sfix_trunc_lo_v4sf (rtx, rtx);
extern rtx gen_vec_unpack_ufix_trunc_lo_v4sf (rtx, rtx);
extern rtx gen_vec_unpack_sfix_trunc_hi_v16sf (rtx, rtx);
extern rtx gen_vec_unpack_ufix_trunc_hi_v16sf (rtx, rtx);
extern rtx gen_vec_unpack_sfix_trunc_hi_v8sf (rtx, rtx);
extern rtx gen_vec_unpack_ufix_trunc_hi_v8sf (rtx, rtx);
extern rtx gen_vec_unpack_sfix_trunc_hi_v4sf (rtx, rtx);
extern rtx gen_vec_unpack_ufix_trunc_hi_v4sf (rtx, rtx);
extern rtx gen_avx_cvttpd2dq256_2 (rtx, rtx);
extern rtx gen_sse2_cvtpd2ps (rtx, rtx);
extern rtx gen_sse2_cvtpd2ps_mask (rtx, rtx, rtx, rtx);
extern rtx gen_truncv8dfv8sf2 (rtx, rtx);
extern rtx gen_truncv4dfv4sf2 (rtx, rtx);
extern rtx gen_extendv8sfv8df2 (rtx, rtx);
extern rtx gen_extendv4sfv4df2 (rtx, rtx);
extern rtx gen_avx512bw_cvtmask2bv64qi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2bv16qi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2bv32qi (rtx, rtx);
extern rtx gen_avx512bw_cvtmask2wv32hi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2wv16hi (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2wv8hi (rtx, rtx);
extern rtx gen_avx512f_cvtmask2dv16si (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2dv8si (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2dv4si (rtx, rtx);
extern rtx gen_avx512f_cvtmask2qv8di (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2qv4di (rtx, rtx);
extern rtx gen_avx512vl_cvtmask2qv2di (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v4sf (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v8sf (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16sf (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v4sf (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v8sf (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_float_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacks_float_lo_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_float_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_float_lo_v16si (rtx, rtx);
extern rtx gen_vec_pack_trunc_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v2df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_trunc_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_trunc_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_trunc_v2df (rtx, rtx, rtx);
extern rtx gen_vec_pack_ufix_trunc_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_ufix_trunc_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_ufix_trunc_v2df (rtx, rtx, rtx);
extern rtx gen_avx512f_vec_pack_sfix_v8df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_v4df (rtx, rtx, rtx);
extern rtx gen_vec_pack_sfix_v2df (rtx, rtx, rtx);
extern rtx gen_sse_movhlps_exp (rtx, rtx, rtx);
extern rtx gen_sse_movlhps_exp (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8sf (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8sf (rtx, rtx, rtx);
extern rtx gen_avx_shufps256 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufps256_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps (rtx, rtx, rtx, rtx);
extern rtx gen_sse_shufps_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse_loadhps_exp (rtx, rtx, rtx);
extern rtx gen_sse_loadlps_exp (rtx, rtx, rtx);
extern rtx gen_vec_setv64qi (rtx, rtx, rtx);
extern rtx gen_vec_setv32qi (rtx, rtx, rtx);
extern rtx gen_vec_setv16qi (rtx, rtx, rtx);
extern rtx gen_vec_setv32hi (rtx, rtx, rtx);
extern rtx gen_vec_setv16hi (rtx, rtx, rtx);
extern rtx gen_vec_setv8hi (rtx, rtx, rtx);
extern rtx gen_vec_setv16si (rtx, rtx, rtx);
extern rtx gen_vec_setv8si (rtx, rtx, rtx);
extern rtx gen_vec_setv4si (rtx, rtx, rtx);
extern rtx gen_vec_setv8di (rtx, rtx, rtx);
extern rtx gen_vec_setv4di (rtx, rtx, rtx);
extern rtx gen_vec_setv2di (rtx, rtx, rtx);
extern rtx gen_vec_setv16sf (rtx, rtx, rtx);
extern rtx gen_vec_setv8sf (rtx, rtx, rtx);
extern rtx gen_vec_setv4sf (rtx, rtx, rtx);
extern rtx gen_vec_setv8df (rtx, rtx, rtx);
extern rtx gen_vec_setv4df (rtx, rtx, rtx);
extern rtx gen_vec_setv2df (rtx, rtx, rtx);
extern rtx gen_avx512dq_vextractf64x2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextracti64x2_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextractf32x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextracti32x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextractf32x8_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vextracti32x8_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextractf64x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vextracti64x4_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vextractf128v4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v32qi (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v16hi (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v8si (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v4di (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v8sf (rtx, rtx, rtx);
extern rtx gen_avx_vextractf128v4df (rtx, rtx, rtx);
extern rtx gen_vec_extractv64qiqi (rtx, rtx, rtx);
extern rtx gen_vec_extractv32qiqi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16qiqi (rtx, rtx, rtx);
extern rtx gen_vec_extractv32hihi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16hihi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8hihi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16sisi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8sisi (rtx, rtx, rtx);
extern rtx gen_vec_extractv4sisi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8didi (rtx, rtx, rtx);
extern rtx gen_vec_extractv4didi (rtx, rtx, rtx);
extern rtx gen_vec_extractv2didi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16sfsf (rtx, rtx, rtx);
extern rtx gen_vec_extractv8sfsf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4sfsf (rtx, rtx, rtx);
extern rtx gen_vec_extractv8dfdf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4dfdf (rtx, rtx, rtx);
extern rtx gen_vec_extractv2dfdf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4titi (rtx, rtx, rtx);
extern rtx gen_vec_extractv2titi (rtx, rtx, rtx);
extern rtx gen_vec_extractv32qiv16qi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16hiv8hi (rtx, rtx, rtx);
extern rtx gen_vec_extractv8siv4si (rtx, rtx, rtx);
extern rtx gen_vec_extractv4div2di (rtx, rtx, rtx);
extern rtx gen_vec_extractv8sfv4sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv4dfv2df (rtx, rtx, rtx);
extern rtx gen_vec_extractv64qiv32qi (rtx, rtx, rtx);
extern rtx gen_vec_extractv32hiv16hi (rtx, rtx, rtx);
extern rtx gen_vec_extractv16siv8si (rtx, rtx, rtx);
extern rtx gen_vec_extractv8div4di (rtx, rtx, rtx);
extern rtx gen_vec_extractv16sfv8sf (rtx, rtx, rtx);
extern rtx gen_vec_extractv8dfv4df (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4df (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_movddup512 (rtx, rtx);
extern rtx gen_avx512f_movddup512_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_unpcklpd512 (rtx, rtx, rtx);
extern rtx gen_avx512f_unpcklpd512_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_movddup256 (rtx, rtx);
extern rtx gen_avx_movddup256_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx_unpcklpd256 (rtx, rtx, rtx);
extern rtx gen_avx_unpcklpd256_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4df (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv2df (rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv16si_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv8si_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4si_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vternlogv8di_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv4di_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vternlogv2di_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufps512_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv16sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv8sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_fixupimmv8df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv4df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_fixupimmv2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv4sf_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_sfixupimmv2df_maskz_round (rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shufpd512_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_shufpd256_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_shufpd_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_loadhpd_exp (rtx, rtx, rtx);
extern rtx gen_sse2_loadlpd_exp (rtx, rtx, rtx);
extern rtx gen_truncv16siv16qi2 (rtx, rtx);
extern rtx gen_truncv16siv16hi2 (rtx, rtx);
extern rtx gen_truncv8div8si2 (rtx, rtx);
extern rtx gen_truncv8div8hi2 (rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev16siv16hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev16siv16hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev16siv16hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_ss_truncatev8div8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_truncatev8div8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512f_us_truncatev8div8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_truncv32hiv32qi2 (rtx, rtx);
extern rtx gen_avx512bw_ss_truncatev32hiv32qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512bw_truncatev32hiv32qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512bw_us_truncatev32hiv32qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_truncv4div4si2 (rtx, rtx);
extern rtx gen_truncv8siv8hi2 (rtx, rtx);
extern rtx gen_truncv16hiv16qi2 (rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev4div4si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev4div4si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev4div4si2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev8siv8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev8siv8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev8siv8hi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_ss_truncatev16hiv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_truncatev16hiv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_avx512vl_us_truncatev16hiv16qi2_mask_store (rtx, rtx, rtx);
extern rtx gen_truncv4div4qi2 (rtx, rtx);
extern rtx gen_truncv2div2qi2 (rtx, rtx);
extern rtx gen_truncv8siv8qi2 (rtx, rtx);
extern rtx gen_truncv4siv4qi2 (rtx, rtx);
extern rtx gen_truncv8hiv8qi2 (rtx, rtx);
extern rtx gen_truncv4diV4HI2 (rtx, rtx);
extern rtx gen_truncv2diV2HI2 (rtx, rtx);
extern rtx gen_truncv4siV4HI2 (rtx, rtx);
extern rtx gen_truncv2div2si2 (rtx, rtx);
extern rtx gen_truncv8div8qi2 (rtx, rtx);
extern rtx gen_negv64qi2 (rtx, rtx);
extern rtx gen_negv32qi2 (rtx, rtx);
extern rtx gen_negv16qi2 (rtx, rtx);
extern rtx gen_negv32hi2 (rtx, rtx);
extern rtx gen_negv16hi2 (rtx, rtx);
extern rtx gen_negv8hi2 (rtx, rtx);
extern rtx gen_negv16si2 (rtx, rtx);
extern rtx gen_negv8si2 (rtx, rtx);
extern rtx gen_negv4si2 (rtx, rtx);
extern rtx gen_negv8di2 (rtx, rtx);
extern rtx gen_negv4di2 (rtx, rtx);
extern rtx gen_negv2di2 (rtx, rtx);
extern rtx gen_addv64qi3 (rtx, rtx, rtx);
extern rtx gen_subv64qi3 (rtx, rtx, rtx);
extern rtx gen_addv32qi3 (rtx, rtx, rtx);
extern rtx gen_subv32qi3 (rtx, rtx, rtx);
extern rtx gen_addv16qi3 (rtx, rtx, rtx);
extern rtx gen_subv16qi3 (rtx, rtx, rtx);
extern rtx gen_addv32hi3 (rtx, rtx, rtx);
extern rtx gen_subv32hi3 (rtx, rtx, rtx);
extern rtx gen_addv16hi3 (rtx, rtx, rtx);
extern rtx gen_subv16hi3 (rtx, rtx, rtx);
extern rtx gen_addv8hi3 (rtx, rtx, rtx);
extern rtx gen_subv8hi3 (rtx, rtx, rtx);
extern rtx gen_addv16si3 (rtx, rtx, rtx);
extern rtx gen_subv16si3 (rtx, rtx, rtx);
extern rtx gen_addv8si3 (rtx, rtx, rtx);
extern rtx gen_subv8si3 (rtx, rtx, rtx);
extern rtx gen_addv4si3 (rtx, rtx, rtx);
extern rtx gen_subv4si3 (rtx, rtx, rtx);
extern rtx gen_addv8di3 (rtx, rtx, rtx);
extern rtx gen_subv8di3 (rtx, rtx, rtx);
extern rtx gen_addv4di3 (rtx, rtx, rtx);
extern rtx gen_subv4di3 (rtx, rtx, rtx);
extern rtx gen_addv2di3 (rtx, rtx, rtx);
extern rtx gen_subv2di3 (rtx, rtx, rtx);
extern rtx gen_addv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_addv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_subv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_usaddv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_usaddv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sssubv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_sssubv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ussubv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ussubv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_usaddv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_usaddv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_sssubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_sssubv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ussubv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ussubv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ssaddv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_usaddv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_sssubv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_ussubv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ssaddv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_usaddv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_usaddv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_sssubv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_sssubv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_ussubv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_ussubv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ssaddv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_usaddv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_usaddv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_sssubv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_sssubv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_ussubv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_ussubv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8qi3 (rtx, rtx, rtx);
extern rtx gen_mulv64qi3 (rtx, rtx, rtx);
extern rtx gen_mulv32qi3 (rtx, rtx, rtx);
extern rtx gen_mulv16qi3 (rtx, rtx, rtx);
extern rtx gen_mulv32hi3 (rtx, rtx, rtx);
extern rtx gen_mulv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv16hi3 (rtx, rtx, rtx);
extern rtx gen_mulv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8hi3 (rtx, rtx, rtx);
extern rtx gen_mulv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smulv32hi3_highpart (rtx, rtx, rtx);
extern rtx gen_smulv32hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umulv32hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv32hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smulv16hi3_highpart (rtx, rtx, rtx);
extern rtx gen_smulv16hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umulv16hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv16hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_smulv8hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umulv8hi3_highpart (rtx, rtx, rtx);
extern rtx gen_umulv8hi3_highpart_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_even_v4si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v16si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v8si_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_mulv2siv2di3 (rtx, rtx, rtx);
extern rtx gen_sse4_1_mulv2siv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pmaddwd (rtx, rtx, rtx);
extern rtx gen_sse2_pmaddwd (rtx, rtx, rtx);
extern rtx gen_mulv16si3 (rtx, rtx, rtx);
extern rtx gen_mulv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8si3 (rtx, rtx, rtx);
extern rtx gen_mulv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv4si3 (rtx, rtx, rtx);
extern rtx gen_mulv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_mulv8di3 (rtx, rtx, rtx);
extern rtx gen_mulv4di3 (rtx, rtx, rtx);
extern rtx gen_mulv2di3 (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_hi_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_hi_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v32qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_lo_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_lo_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_even_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_odd_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_odd_v16si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_odd_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_odd_v8si (rtx, rtx, rtx);
extern rtx gen_vec_widen_smult_odd_v4si (rtx, rtx, rtx);
extern rtx gen_vec_widen_umult_odd_v4si (rtx, rtx, rtx);
extern rtx gen_sdot_prodv32hi (rtx, rtx, rtx, rtx);
extern rtx gen_sdot_prodv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_sdot_prodv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_sdot_prodv4si (rtx, rtx, rtx, rtx);
extern rtx gen_uavgv64qi3_ceil (rtx, rtx, rtx);
extern rtx gen_uavgv32qi3_ceil (rtx, rtx, rtx);
extern rtx gen_uavgv16qi3_ceil (rtx, rtx, rtx);
extern rtx gen_uavgv32hi3_ceil (rtx, rtx, rtx);
extern rtx gen_uavgv16hi3_ceil (rtx, rtx, rtx);
extern rtx gen_uavgv8hi3_ceil (rtx, rtx, rtx);
extern rtx gen_usadv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_usadv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_usadv64qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_shl_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_shl_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_shl_v4si (rtx, rtx, rtx);
extern rtx gen_vec_shl_v2di (rtx, rtx, rtx);
extern rtx gen_vec_shl_v4sf (rtx, rtx, rtx);
extern rtx gen_vec_shl_v2df (rtx, rtx, rtx);
extern rtx gen_vec_shr_v16qi (rtx, rtx, rtx);
extern rtx gen_vec_shr_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_shr_v4si (rtx, rtx, rtx);
extern rtx gen_vec_shr_v2di (rtx, rtx, rtx);
extern rtx gen_vec_shr_v4sf (rtx, rtx, rtx);
extern rtx gen_vec_shr_v2df (rtx, rtx, rtx);
extern rtx gen_smaxv32qi3 (rtx, rtx, rtx);
extern rtx gen_sminv32qi3 (rtx, rtx, rtx);
extern rtx gen_umaxv32qi3 (rtx, rtx, rtx);
extern rtx gen_uminv32qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv16hi3 (rtx, rtx, rtx);
extern rtx gen_sminv16hi3 (rtx, rtx, rtx);
extern rtx gen_umaxv16hi3 (rtx, rtx, rtx);
extern rtx gen_uminv16hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv8si3 (rtx, rtx, rtx);
extern rtx gen_sminv8si3 (rtx, rtx, rtx);
extern rtx gen_umaxv8si3 (rtx, rtx, rtx);
extern rtx gen_uminv8si3 (rtx, rtx, rtx);
extern rtx gen_smaxv64qi3 (rtx, rtx, rtx);
extern rtx gen_sminv64qi3 (rtx, rtx, rtx);
extern rtx gen_umaxv64qi3 (rtx, rtx, rtx);
extern rtx gen_uminv64qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv32hi3 (rtx, rtx, rtx);
extern rtx gen_sminv32hi3 (rtx, rtx, rtx);
extern rtx gen_umaxv32hi3 (rtx, rtx, rtx);
extern rtx gen_uminv32hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv16si3 (rtx, rtx, rtx);
extern rtx gen_sminv16si3 (rtx, rtx, rtx);
extern rtx gen_umaxv16si3 (rtx, rtx, rtx);
extern rtx gen_uminv16si3 (rtx, rtx, rtx);
extern rtx gen_smaxv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sminv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_umaxv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_uminv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_smaxv8di3 (rtx, rtx, rtx);
extern rtx gen_sminv8di3 (rtx, rtx, rtx);
extern rtx gen_umaxv8di3 (rtx, rtx, rtx);
extern rtx gen_uminv8di3 (rtx, rtx, rtx);
extern rtx gen_smaxv4di3 (rtx, rtx, rtx);
extern rtx gen_sminv4di3 (rtx, rtx, rtx);
extern rtx gen_umaxv4di3 (rtx, rtx, rtx);
extern rtx gen_uminv4di3 (rtx, rtx, rtx);
extern rtx gen_smaxv2di3 (rtx, rtx, rtx);
extern rtx gen_sminv2di3 (rtx, rtx, rtx);
extern rtx gen_umaxv2di3 (rtx, rtx, rtx);
extern rtx gen_uminv2di3 (rtx, rtx, rtx);
extern rtx gen_smaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_sminv16qi3 (rtx, rtx, rtx);
extern rtx gen_smaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_sminv8hi3 (rtx, rtx, rtx);
extern rtx gen_smaxv4si3 (rtx, rtx, rtx);
extern rtx gen_sminv4si3 (rtx, rtx, rtx);
extern rtx gen_umaxv16qi3 (rtx, rtx, rtx);
extern rtx gen_uminv16qi3 (rtx, rtx, rtx);
extern rtx gen_umaxv8hi3 (rtx, rtx, rtx);
extern rtx gen_uminv8hi3 (rtx, rtx, rtx);
extern rtx gen_umaxv4si3 (rtx, rtx, rtx);
extern rtx gen_uminv4si3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv8si3 (rtx, rtx, rtx);
extern rtx gen_avx2_eqv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv64qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv32qi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_eqv32hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv16hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8hi3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv16si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv8si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4si3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_eqv8di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv4di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_eqv2di3_mask (rtx, rtx, rtx, rtx);
extern rtx gen_sse2_eqv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_eqv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_eqv4si3 (rtx, rtx, rtx);
extern rtx gen_sse4_1_eqv2di3 (rtx, rtx, rtx);
extern rtx gen_vcondv64qiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv64qiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32hiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16siv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8div64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16sfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8dfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv32qiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16hiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8siv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4div4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8sfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4dfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv16qiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv8hiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4siv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv4sfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2div2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondv2dfv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv32hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv64qiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32hiv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16siv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8div64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16sfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8dfv64qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv32qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv16hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv32qiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16hiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8siv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4div4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8sfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4dfv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16qiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8hiv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4siv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4sfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv16qi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16qiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8hiv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4siv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4sfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv8hi (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv16qiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv8hiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4siv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv4sfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2div2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vconduv2dfv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondeqv2div2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcondeqv2dfv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv2di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4sf (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv2df (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv32qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8sf (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv4df (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16sf (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8df (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv16si (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv8di (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv32hi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_permv64qi (rtx, rtx, rtx, rtx);
extern rtx gen_one_cmplv16si2 (rtx, rtx);
extern rtx gen_one_cmplv8di2 (rtx, rtx);
extern rtx gen_one_cmplv64qi2 (rtx, rtx);
extern rtx gen_one_cmplv32qi2 (rtx, rtx);
extern rtx gen_one_cmplv16qi2 (rtx, rtx);
extern rtx gen_one_cmplv32hi2 (rtx, rtx);
extern rtx gen_one_cmplv16hi2 (rtx, rtx);
extern rtx gen_one_cmplv8hi2 (rtx, rtx);
extern rtx gen_one_cmplv8si2 (rtx, rtx);
extern rtx gen_one_cmplv4si2 (rtx, rtx);
extern rtx gen_one_cmplv4di2 (rtx, rtx);
extern rtx gen_one_cmplv2di2 (rtx, rtx);
extern rtx gen_avx512bw_andnotv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv32qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv16qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_andnotv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv16hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16si3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv8si3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv4si3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8di3 (rtx, rtx, rtx);
extern rtx gen_avx2_andnotv4di3 (rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2di3 (rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_andnotv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_andnotv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_andnotv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_andnotv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_andnotv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_andv16si3 (rtx, rtx, rtx);
extern rtx gen_iorv16si3 (rtx, rtx, rtx);
extern rtx gen_xorv16si3 (rtx, rtx, rtx);
extern rtx gen_andv8di3 (rtx, rtx, rtx);
extern rtx gen_iorv8di3 (rtx, rtx, rtx);
extern rtx gen_xorv8di3 (rtx, rtx, rtx);
extern rtx gen_andv64qi3 (rtx, rtx, rtx);
extern rtx gen_iorv64qi3 (rtx, rtx, rtx);
extern rtx gen_xorv64qi3 (rtx, rtx, rtx);
extern rtx gen_andv32qi3 (rtx, rtx, rtx);
extern rtx gen_iorv32qi3 (rtx, rtx, rtx);
extern rtx gen_xorv32qi3 (rtx, rtx, rtx);
extern rtx gen_andv16qi3 (rtx, rtx, rtx);
extern rtx gen_iorv16qi3 (rtx, rtx, rtx);
extern rtx gen_xorv16qi3 (rtx, rtx, rtx);
extern rtx gen_andv32hi3 (rtx, rtx, rtx);
extern rtx gen_iorv32hi3 (rtx, rtx, rtx);
extern rtx gen_xorv32hi3 (rtx, rtx, rtx);
extern rtx gen_andv16hi3 (rtx, rtx, rtx);
extern rtx gen_iorv16hi3 (rtx, rtx, rtx);
extern rtx gen_xorv16hi3 (rtx, rtx, rtx);
extern rtx gen_andv8hi3 (rtx, rtx, rtx);
extern rtx gen_iorv8hi3 (rtx, rtx, rtx);
extern rtx gen_xorv8hi3 (rtx, rtx, rtx);
extern rtx gen_andv8si3 (rtx, rtx, rtx);
extern rtx gen_iorv8si3 (rtx, rtx, rtx);
extern rtx gen_xorv8si3 (rtx, rtx, rtx);
extern rtx gen_andv4si3 (rtx, rtx, rtx);
extern rtx gen_iorv4si3 (rtx, rtx, rtx);
extern rtx gen_xorv4si3 (rtx, rtx, rtx);
extern rtx gen_andv4di3 (rtx, rtx, rtx);
extern rtx gen_iorv4di3 (rtx, rtx, rtx);
extern rtx gen_xorv4di3 (rtx, rtx, rtx);
extern rtx gen_andv2di3 (rtx, rtx, rtx);
extern rtx gen_iorv2di3 (rtx, rtx, rtx);
extern rtx gen_xorv2di3 (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v32hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v16hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v8hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v16si (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v8si (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v4si (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v8di (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v4di (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_v2di (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_qi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_hi (rtx, rtx, rtx);
extern rtx gen_vec_pack_trunc_si (rtx, rtx, rtx);
extern rtx gen_vec_pack_sbool_trunc_qi (rtx, rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv32qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv16hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv8si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_highv4di (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv32qi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv16hi (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv8si (rtx, rtx, rtx);
extern rtx gen_vec_interleave_lowv4di (rtx, rtx, rtx);
extern rtx gen_avx512dq_vinsertf64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinserti64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinsertf32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinserti32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinsertf32x8_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_vinserti32x8_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinsertf64x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vinserti64x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_i64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512dq_shuf_f64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i64x2_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_i32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_shuf_f32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_f32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_shuf_i32x4_mask (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_pshufdv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufdv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshufdv3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufd_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufd (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshuflwv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pshuflwv3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshuflw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshuflw (rtx, rtx, rtx);
extern rtx gen_avx2_pshufhwv3 (rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufhwv3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_pshufhw_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_pshufhw (rtx, rtx, rtx);
extern rtx gen_sse2_loadd (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v64qi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v32qi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v16qi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v16si (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v64qi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v32qi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16qi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v64qi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v32qi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v16qi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_lo_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_sbool_lo_qi (rtx, rtx, rtx);
extern rtx gen_vec_unpacks_lo_hi (rtx, rtx);
extern rtx gen_vec_unpacks_lo_si (rtx, rtx);
extern rtx gen_vec_unpacks_lo_di (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v64qi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v32qi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v16qi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v32hi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v16hi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v8hi (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v16si (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v8si (rtx, rtx);
extern rtx gen_vec_unpacku_hi_v4si (rtx, rtx);
extern rtx gen_vec_unpacks_sbool_hi_qi (rtx, rtx, rtx);
extern rtx gen_vec_unpacks_hi_hi (rtx, rtx);
extern rtx gen_vec_unpacks_hi_si (rtx, rtx);
extern rtx gen_vec_unpacks_hi_di (rtx, rtx);
extern rtx gen_avx512bw_uavgv64qi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_uavgv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_uavgv32qi3 (rtx, rtx, rtx);
extern rtx gen_avx2_uavgv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_uavgv16qi3 (rtx, rtx, rtx);
extern rtx gen_sse2_uavgv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_uavgv32hi3 (rtx, rtx, rtx);
extern rtx gen_avx512bw_uavgv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_uavgv16hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_uavgv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_uavgv8hi3 (rtx, rtx, rtx);
extern rtx gen_sse2_uavgv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_maskmovdqu (rtx, rtx, rtx);
extern rtx gen_ssse3_pmulhrswv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_pmulhrswv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_ssse3_pmulhrswv8hi3 (rtx, rtx, rtx);
extern rtx gen_avx2_pmulhrswv16hi3 (rtx, rtx, rtx);
extern rtx gen_smulhrsv32hi3 (rtx, rtx, rtx);
extern rtx gen_smulhrsv16hi3 (rtx, rtx, rtx);
extern rtx gen_smulhrsv8hi3 (rtx, rtx, rtx);
extern rtx gen_smulhrsv4hi3 (rtx, rtx, rtx);
extern rtx gen_ssse3_pmulhrswv4hi3 (rtx, rtx, rtx);
extern rtx gen_absv64qi2 (rtx, rtx);
extern rtx gen_absv32qi2 (rtx, rtx);
extern rtx gen_absv16qi2 (rtx, rtx);
extern rtx gen_absv32hi2 (rtx, rtx);
extern rtx gen_absv16hi2 (rtx, rtx);
extern rtx gen_absv8hi2 (rtx, rtx);
extern rtx gen_absv16si2 (rtx, rtx);
extern rtx gen_absv8si2 (rtx, rtx);
extern rtx gen_absv4si2 (rtx, rtx);
extern rtx gen_absv8di2 (rtx, rtx);
extern rtx gen_absv4di2 (rtx, rtx);
extern rtx gen_absv2di2 (rtx, rtx);
extern rtx gen_avx2_pblendw (rtx, rtx, rtx, rtx);
extern rtx gen_sign_extendv16qiv16hi2 (rtx, rtx);
extern rtx gen_zero_extendv16qiv16hi2 (rtx, rtx);
extern rtx gen_sign_extendv32qiv32hi2 (rtx, rtx);
extern rtx gen_zero_extendv32qiv32hi2 (rtx, rtx);
extern rtx gen_sign_extendv8qiv8hi2 (rtx, rtx);
extern rtx gen_zero_extendv8qiv8hi2 (rtx, rtx);
extern rtx gen_sign_extendv16qiv16si2 (rtx, rtx);
extern rtx gen_zero_extendv16qiv16si2 (rtx, rtx);
extern rtx gen_sign_extendv8qiv8si2 (rtx, rtx);
extern rtx gen_zero_extendv8qiv8si2 (rtx, rtx);
extern rtx gen_sign_extendv4qiv4si2 (rtx, rtx);
extern rtx gen_zero_extendv4qiv4si2 (rtx, rtx);
extern rtx gen_sign_extendv16hiv16si2 (rtx, rtx);
extern rtx gen_zero_extendv16hiv16si2 (rtx, rtx);
extern rtx gen_sign_extendv8hiv8si2 (rtx, rtx);
extern rtx gen_zero_extendv8hiv8si2 (rtx, rtx);
extern rtx gen_sign_extendv4hiv4si2 (rtx, rtx);
extern rtx gen_zero_extendv4hiv4si2 (rtx, rtx);
extern rtx gen_sign_extendv8qiv8di2 (rtx, rtx);
extern rtx gen_zero_extendv8qiv8di2 (rtx, rtx);
extern rtx gen_sign_extendv4qiv4di2 (rtx, rtx);
extern rtx gen_zero_extendv4qiv4di2 (rtx, rtx);
extern rtx gen_sign_extendv2qiv2di2 (rtx, rtx);
extern rtx gen_zero_extendv2qiv2di2 (rtx, rtx);
extern rtx gen_sign_extendv8hiv8di2 (rtx, rtx);
extern rtx gen_zero_extendv8hiv8di2 (rtx, rtx);
extern rtx gen_sign_extendv4hiv4di2 (rtx, rtx);
extern rtx gen_zero_extendv4hiv4di2 (rtx, rtx);
extern rtx gen_sign_extendv2hiv2di2 (rtx, rtx);
extern rtx gen_zero_extendv2hiv2di2 (rtx, rtx);
extern rtx gen_sign_extendv8siv8di2 (rtx, rtx);
extern rtx gen_zero_extendv8siv8di2 (rtx, rtx);
extern rtx gen_sign_extendv4siv4di2 (rtx, rtx);
extern rtx gen_zero_extendv4siv4di2 (rtx, rtx);
extern rtx gen_sign_extendv2siv2di2 (rtx, rtx);
extern rtx gen_zero_extendv2siv2di2 (rtx, rtx);
extern rtx gen_nearbyintv16sf2 (rtx, rtx);
extern rtx gen_nearbyintv8sf2 (rtx, rtx);
extern rtx gen_nearbyintv4sf2 (rtx, rtx);
extern rtx gen_nearbyintv8df2 (rtx, rtx);
extern rtx gen_nearbyintv4df2 (rtx, rtx);
extern rtx gen_nearbyintv2df2 (rtx, rtx);
extern rtx gen_rintv16sf2 (rtx, rtx);
extern rtx gen_rintv8sf2 (rtx, rtx);
extern rtx gen_rintv4sf2 (rtx, rtx);
extern rtx gen_rintv8df2 (rtx, rtx);
extern rtx gen_rintv4df2 (rtx, rtx);
extern rtx gen_rintv2df2 (rtx, rtx);
extern rtx gen_avx_roundps_sfix256 (rtx, rtx, rtx);
extern rtx gen_sse4_1_roundps_sfix (rtx, rtx, rtx);
extern rtx gen_avx512f_roundps512 (rtx, rtx, rtx);
extern rtx gen_avx512f_roundpd512 (rtx, rtx, rtx);
extern rtx gen_avx512f_roundps512_sfix (rtx, rtx, rtx);
extern rtx gen_avx512f_roundpd_vec_pack_sfix512 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_roundpd_vec_pack_sfix256 (rtx, rtx, rtx, rtx);
extern rtx gen_sse4_1_roundpd_vec_pack_sfix (rtx, rtx, rtx, rtx);
extern rtx gen_roundv16sf2 (rtx, rtx);
extern rtx gen_roundv8sf2 (rtx, rtx);
extern rtx gen_roundv4sf2 (rtx, rtx);
extern rtx gen_roundv8df2 (rtx, rtx);
extern rtx gen_roundv4df2 (rtx, rtx);
extern rtx gen_roundv2df2 (rtx, rtx);
extern rtx gen_roundv16sf2_sfix (rtx, rtx);
extern rtx gen_roundv8sf2_sfix (rtx, rtx);
extern rtx gen_roundv4sf2_sfix (rtx, rtx);
extern rtx gen_roundv8df2_vec_pack_sfix (rtx, rtx, rtx);
extern rtx gen_roundv4df2_vec_pack_sfix (rtx, rtx, rtx);
extern rtx gen_roundv2df2_vec_pack_sfix (rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv16sisf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv8disf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv8sidf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_gatherpfv8didf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv16sisf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv8disf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv8sidf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512pf_scatterpfv8didf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_rotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_rotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_rotlv4si3 (rtx, rtx, rtx);
extern rtx gen_rotlv2di3 (rtx, rtx, rtx);
extern rtx gen_rotrv16qi3 (rtx, rtx, rtx);
extern rtx gen_rotrv8hi3 (rtx, rtx, rtx);
extern rtx gen_rotrv4si3 (rtx, rtx, rtx);
extern rtx gen_rotrv2di3 (rtx, rtx, rtx);
extern rtx gen_vrotrv16qi3 (rtx, rtx, rtx);
extern rtx gen_vrotrv8hi3 (rtx, rtx, rtx);
extern rtx gen_vrotrv4si3 (rtx, rtx, rtx);
extern rtx gen_vrotrv2di3 (rtx, rtx, rtx);
extern rtx gen_vrotlv16qi3 (rtx, rtx, rtx);
extern rtx gen_vrotlv8hi3 (rtx, rtx, rtx);
extern rtx gen_vrotlv4si3 (rtx, rtx, rtx);
extern rtx gen_vrotlv2di3 (rtx, rtx, rtx);
extern rtx gen_vlshrv16qi3 (rtx, rtx, rtx);
extern rtx gen_vlshrv8hi3 (rtx, rtx, rtx);
extern rtx gen_vlshrv4si3 (rtx, rtx, rtx);
extern rtx gen_vlshrv2di3 (rtx, rtx, rtx);
extern rtx gen_vlshrv16si3 (rtx, rtx, rtx);
extern rtx gen_vlshrv8di3 (rtx, rtx, rtx);
extern rtx gen_vlshrv8si3 (rtx, rtx, rtx);
extern rtx gen_vlshrv4di3 (rtx, rtx, rtx);
extern rtx gen_vashrv8hi3 (rtx, rtx, rtx);
extern rtx gen_vashrv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vashrv16qi3 (rtx, rtx, rtx);
extern rtx gen_vashrv2di3 (rtx, rtx, rtx);
extern rtx gen_vashrv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vashrv4si3 (rtx, rtx, rtx);
extern rtx gen_vashrv16si3 (rtx, rtx, rtx);
extern rtx gen_vashrv8si3 (rtx, rtx, rtx);
extern rtx gen_vashlv16qi3 (rtx, rtx, rtx);
extern rtx gen_vashlv8hi3 (rtx, rtx, rtx);
extern rtx gen_vashlv4si3 (rtx, rtx, rtx);
extern rtx gen_vashlv2di3 (rtx, rtx, rtx);
extern rtx gen_vashlv16si3 (rtx, rtx, rtx);
extern rtx gen_vashlv8di3 (rtx, rtx, rtx);
extern rtx gen_vashlv8si3 (rtx, rtx, rtx);
extern rtx gen_vashlv4di3 (rtx, rtx, rtx);
extern rtx gen_ashlv64qi3 (rtx, rtx, rtx);
extern rtx gen_lshrv64qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv64qi3 (rtx, rtx, rtx);
extern rtx gen_ashlv32qi3 (rtx, rtx, rtx);
extern rtx gen_lshrv32qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv32qi3 (rtx, rtx, rtx);
extern rtx gen_ashlv16qi3 (rtx, rtx, rtx);
extern rtx gen_lshrv16qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv16qi3 (rtx, rtx, rtx);
extern rtx gen_ashrv2di3 (rtx, rtx, rtx);
extern rtx gen_xop_vmfrczv4sf2 (rtx, rtx);
extern rtx gen_xop_vmfrczv2df2 (rtx, rtx);
extern rtx gen_avx_vzeroall (void);
extern rtx gen_avx_vzeroupper (void);
extern rtx gen_avx512f_vpermilv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4df (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv2df (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv2df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilv16sf (rtx, rtx, rtx);
extern rtx gen_avx512f_vpermilv16sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv8sf (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv8sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4sf (rtx, rtx, rtx);
extern rtx gen_avx_vpermilv4sf_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_permv4di (rtx, rtx, rtx);
extern rtx gen_avx2_permv4df (rtx, rtx, rtx);
extern rtx gen_avx512vl_permv4di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_permv4df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df (rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di (rtx, rtx, rtx);
extern rtx gen_avx512f_permv8df_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_permv8di_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv16si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv16sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv8di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermi2varv8df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv8si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv8sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4si3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv4sf3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv2di3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv2df3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermi2varv32hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv16hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv8hi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermi2varv64qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv32qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermi2varv16qi3_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16si3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv16sf3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8di3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_vpermt2varv8df3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8si3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8sf3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4di3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4df3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4si3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv4sf3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2di3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv2df3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv32hi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16hi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv8hi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512bw_vpermt2varv64qi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv32qi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vpermt2varv16qi3_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vperm2f128v8si3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vperm2f128v8sf3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vperm2f128v4df3 (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_vinsertv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v32qi (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v16hi (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v8si (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v4di (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v8sf (rtx, rtx, rtx, rtx);
extern rtx gen_avx_vinsertf128v4df (rtx, rtx, rtx, rtx);
extern rtx gen_maskloadv4sfv4si (rtx, rtx, rtx);
extern rtx gen_maskloadv2dfv2di (rtx, rtx, rtx);
extern rtx gen_maskloadv8sfv8si (rtx, rtx, rtx);
extern rtx gen_maskloadv4dfv4di (rtx, rtx, rtx);
extern rtx gen_maskloadv4siv4si (rtx, rtx, rtx);
extern rtx gen_maskloadv2div2di (rtx, rtx, rtx);
extern rtx gen_maskloadv8siv8si (rtx, rtx, rtx);
extern rtx gen_maskloadv4div4di (rtx, rtx, rtx);
extern rtx gen_maskloadv16sihi (rtx, rtx, rtx);
extern rtx gen_maskloadv8siqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4siqi (rtx, rtx, rtx);
extern rtx gen_maskloadv8diqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4diqi (rtx, rtx, rtx);
extern rtx gen_maskloadv2diqi (rtx, rtx, rtx);
extern rtx gen_maskloadv16sfhi (rtx, rtx, rtx);
extern rtx gen_maskloadv8sfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4sfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv8dfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv4dfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv2dfqi (rtx, rtx, rtx);
extern rtx gen_maskloadv64qidi (rtx, rtx, rtx);
extern rtx gen_maskloadv16qihi (rtx, rtx, rtx);
extern rtx gen_maskloadv32qisi (rtx, rtx, rtx);
extern rtx gen_maskloadv32hisi (rtx, rtx, rtx);
extern rtx gen_maskloadv16hihi (rtx, rtx, rtx);
extern rtx gen_maskloadv8hiqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4sfv4si (rtx, rtx, rtx);
extern rtx gen_maskstorev2dfv2di (rtx, rtx, rtx);
extern rtx gen_maskstorev8sfv8si (rtx, rtx, rtx);
extern rtx gen_maskstorev4dfv4di (rtx, rtx, rtx);
extern rtx gen_maskstorev4siv4si (rtx, rtx, rtx);
extern rtx gen_maskstorev2div2di (rtx, rtx, rtx);
extern rtx gen_maskstorev8siv8si (rtx, rtx, rtx);
extern rtx gen_maskstorev4div4di (rtx, rtx, rtx);
extern rtx gen_maskstorev16sihi (rtx, rtx, rtx);
extern rtx gen_maskstorev8siqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4siqi (rtx, rtx, rtx);
extern rtx gen_maskstorev8diqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4diqi (rtx, rtx, rtx);
extern rtx gen_maskstorev2diqi (rtx, rtx, rtx);
extern rtx gen_maskstorev16sfhi (rtx, rtx, rtx);
extern rtx gen_maskstorev8sfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4sfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev8dfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev4dfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev2dfqi (rtx, rtx, rtx);
extern rtx gen_maskstorev64qidi (rtx, rtx, rtx);
extern rtx gen_maskstorev16qihi (rtx, rtx, rtx);
extern rtx gen_maskstorev32qisi (rtx, rtx, rtx);
extern rtx gen_maskstorev32hisi (rtx, rtx, rtx);
extern rtx gen_maskstorev16hihi (rtx, rtx, rtx);
extern rtx gen_maskstorev8hiqi (rtx, rtx, rtx);
extern rtx gen_cbranchv4si4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchv2di4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchv8si4 (rtx, rtx, rtx, rtx);
extern rtx gen_cbranchv4di4 (rtx, rtx, rtx, rtx);
extern rtx gen_vec_initv64qiqi (rtx, rtx);
extern rtx gen_vec_initv32qiqi (rtx, rtx);
extern rtx gen_vec_initv16qiqi (rtx, rtx);
extern rtx gen_vec_initv32hihi (rtx, rtx);
extern rtx gen_vec_initv16hihi (rtx, rtx);
extern rtx gen_vec_initv8hihi (rtx, rtx);
extern rtx gen_vec_initv16sisi (rtx, rtx);
extern rtx gen_vec_initv8sisi (rtx, rtx);
extern rtx gen_vec_initv4sisi (rtx, rtx);
extern rtx gen_vec_initv8didi (rtx, rtx);
extern rtx gen_vec_initv4didi (rtx, rtx);
extern rtx gen_vec_initv2didi (rtx, rtx);
extern rtx gen_vec_initv16sfsf (rtx, rtx);
extern rtx gen_vec_initv8sfsf (rtx, rtx);
extern rtx gen_vec_initv4sfsf (rtx, rtx);
extern rtx gen_vec_initv8dfdf (rtx, rtx);
extern rtx gen_vec_initv4dfdf (rtx, rtx);
extern rtx gen_vec_initv2dfdf (rtx, rtx);
extern rtx gen_vec_initv4titi (rtx, rtx);
extern rtx gen_vec_initv2titi (rtx, rtx);
extern rtx gen_vec_initv64qiv32qi (rtx, rtx);
extern rtx gen_vec_initv32qiv16qi (rtx, rtx);
extern rtx gen_vec_initv16qiv8qi (rtx, rtx);
extern rtx gen_vec_initv32hiv16hi (rtx, rtx);
extern rtx gen_vec_initv16hiv8hi (rtx, rtx);
extern rtx gen_vec_initv8hiv4hi (rtx, rtx);
extern rtx gen_vec_initv16siv8si (rtx, rtx);
extern rtx gen_vec_initv8siv4si (rtx, rtx);
extern rtx gen_vec_initv4siv2si (rtx, rtx);
extern rtx gen_vec_initv8div4di (rtx, rtx);
extern rtx gen_vec_initv4div2di (rtx, rtx);
extern rtx gen_vec_initv16sfv8sf (rtx, rtx);
extern rtx gen_vec_initv8sfv4sf (rtx, rtx);
extern rtx gen_vec_initv4sfv2sf (rtx, rtx);
extern rtx gen_vec_initv8dfv4df (rtx, rtx);
extern rtx gen_vec_initv4dfv2df (rtx, rtx);
extern rtx gen_vec_initv4tiv2ti (rtx, rtx);
extern rtx gen_vcvtps2ph_mask (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vcvtps2ph (rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gathersiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx2_gatherdiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gathersiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gathersiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv16si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv16sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv8di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_gatherdiv8df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv8si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv8sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4si (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv4sf (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv2di (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_gatherdiv2df (rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv16si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv16sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv8di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scattersiv8df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scattersiv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv16si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv16sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv8di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_scatterdiv8df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv8si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv8sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4si (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv4sf (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv2di (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_scatterdiv2df (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16si_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv16sf_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8di_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_expandv8df_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8si_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv8sf_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4di_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4df_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4si_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv4sf_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2di_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512vl_expandv2df_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv64qi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16qi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32qi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv32hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv16hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_expandv8hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52huqv2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpamdd52luqv2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_movv64sf (rtx, rtx);
extern rtx gen_movv64si (rtx, rtx);
extern rtx gen_vpshrdv_v32hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v16hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v8hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshrdv_v2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v32hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v16hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v8hi_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpshldv_v2di_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusd_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpbusds_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssd_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v16si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v8si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_vpdpwssds_v4si_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v32hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v16hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtne2ps2bf16_v8hi_maskz (rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v16sf_maskz (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v8sf_maskz (rtx, rtx, rtx);
extern rtx gen_avx512f_cvtneps2bf16_v4sf_maskz (rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v16sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v8sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_avx512f_dpbf16ps_v4sf_maskz (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_sse2_lfence (void);
extern rtx gen_sse_sfence (void);
extern rtx gen_sse2_mfence (void);
extern rtx gen_mem_thread_fence (rtx);
extern rtx gen_atomic_loadqi (rtx, rtx, rtx);
extern rtx gen_atomic_loadhi (rtx, rtx, rtx);
extern rtx gen_atomic_loadsi (rtx, rtx, rtx);
extern rtx gen_atomic_loaddi (rtx, rtx, rtx);
extern rtx gen_atomic_storeqi (rtx, rtx, rtx);
extern rtx gen_atomic_storehi (rtx, rtx, rtx);
extern rtx gen_atomic_storesi (rtx, rtx, rtx);
extern rtx gen_atomic_storedi (rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapqi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swaphi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapsi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapdi (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_compare_and_swapti (rtx, rtx, rtx, rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_sethi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_setdi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementhi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_complementdi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resethi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetsi (rtx, rtx, rtx, rtx, rtx);
extern rtx gen_atomic_bit_test_and_resetdi (rtx, rtx, rtx, rtx, rtx);
# 44 "./tm.h" 2


# 1 "./insn-modes.h" 1
# 47 "./tm.h" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/defaults.h" 1
# 1473 "/home/giulianob/gcc_git_gnu/gcc/gcc/defaults.h"
typedef uint8_t target_unit;
# 49 "./tm.h" 2
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/array-traits.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/array-traits.h"
template<typename T, T zero = T (0)>
struct scalar_array_traits
{
  typedef T element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = 1;
  static const T *base (const T &x) { return &x; }
  static size_t size (const T &) { return 1; }
};

template<typename T>
struct array_traits : scalar_array_traits<T> {};


template<typename T, size_t N>
struct array_traits<T[N]>
{
  typedef T element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = N;
  static const T *base (const T (&x)[N]) { return x; }
  static size_t size (const T (&)[N]) { return N; }
};
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h" 2
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
typedef unsigned long HARD_REG_ELT_TYPE;
# 56 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
struct HARD_REG_SET
{
  HARD_REG_SET
  operator~ () const
  {
    HARD_REG_SET res;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      res.elts[i] = ~elts[i];
    return res;
  }

  HARD_REG_SET
  operator& (const HARD_REG_SET &other) const
  {
    HARD_REG_SET res;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      res.elts[i] = elts[i] & other.elts[i];
    return res;
  }

  HARD_REG_SET &
  operator&= (const HARD_REG_SET &other)
  {
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      elts[i] &= other.elts[i];
    return *this;
  }

  HARD_REG_SET
  operator| (const HARD_REG_SET &other) const
  {
    HARD_REG_SET res;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      res.elts[i] = elts[i] | other.elts[i];
    return res;
  }

  HARD_REG_SET &
  operator|= (const HARD_REG_SET &other)
  {
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      elts[i] |= other.elts[i];
    return *this;
  }

  bool
  operator== (const HARD_REG_SET &other) const
  {
    HARD_REG_ELT_TYPE bad = 0;
    for (unsigned int i = 0; i < (sizeof (elts) / sizeof ((elts)[0])); ++i)
      bad |= (elts[i] ^ other.elts[i]);
    return bad == 0;
  }

  bool
  operator!= (const HARD_REG_SET &other) const
  {
    return !operator== (other);
  }

  HARD_REG_ELT_TYPE elts[((76 + (8 * 8) - 1) / (8 * 8))];
};
typedef const HARD_REG_SET &const_hard_reg_set;

template<>
struct array_traits<HARD_REG_SET>
{
  typedef HARD_REG_ELT_TYPE element_type;
  static const bool has_constant_size = true;
  static const size_t constant_size = ((76 + (8 * 8) - 1) / (8 * 8));
  static const element_type *base (const HARD_REG_SET &x) { return x.elts; }
  static size_t size (const HARD_REG_SET &) { return ((76 + (8 * 8) - 1) / (8 * 8)); }
};






struct hard_reg_set_container
{
  HARD_REG_SET set;
};
# 196 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
inline void
SET_HARD_REG_BIT (HARD_REG_SET &set, unsigned int bit)
{
  set.elts[bit / ((unsigned) (8 * 8))]
    |= ((HARD_REG_ELT_TYPE) (1)) << (bit % ((unsigned) (8 * 8)));
}

inline void
CLEAR_HARD_REG_BIT (HARD_REG_SET &set, unsigned int bit)
{
  set.elts[bit / ((unsigned) (8 * 8))]
    &= ~(((HARD_REG_ELT_TYPE) (1)) << (bit % ((unsigned) (8 * 8))));
}

inline bool
TEST_HARD_REG_BIT (const_hard_reg_set set, unsigned int bit)
{
  return (set.elts[bit / ((unsigned) (8 * 8))]
   & (((HARD_REG_ELT_TYPE) (1)) << (bit % ((unsigned) (8 * 8)))));
}

inline void
CLEAR_HARD_REG_SET (HARD_REG_SET &set)
{
  for (unsigned int i = 0; i < (sizeof (set.elts) / sizeof ((set.elts)[0])); ++i)
    set.elts[i] = 0;
}

inline void
SET_HARD_REG_SET (HARD_REG_SET &set)
{
  for (unsigned int i = 0; i < (sizeof (set.elts) / sizeof ((set.elts)[0])); ++i)
    set.elts[i] = -1;
}

static inline bool
hard_reg_set_subset_p (const_hard_reg_set x, const_hard_reg_set y)
{
  HARD_REG_ELT_TYPE bad = 0;
  for (unsigned int i = 0; i < (sizeof (x.elts) / sizeof ((x.elts)[0])); ++i)
    bad |= (x.elts[i] & ~y.elts[i]);
  return bad == 0;
}

static inline bool
hard_reg_set_intersect_p (const_hard_reg_set x, const_hard_reg_set y)
{
  HARD_REG_ELT_TYPE good = 0;
  for (unsigned int i = 0; i < (sizeof (x.elts) / sizeof ((x.elts)[0])); ++i)
    good |= (x.elts[i] & y.elts[i]);
  return good != 0;
}

static inline bool
hard_reg_set_empty_p (const_hard_reg_set x)
{
  HARD_REG_ELT_TYPE bad = 0;
  for (unsigned int i = 0; i < (sizeof (x.elts) / sizeof ((x.elts)[0])); ++i)
    bad |= x.elts[i];
  return bad == 0;
}




struct hard_reg_set_iterator
{

  const HARD_REG_ELT_TYPE *pelt;


  unsigned short length;


  unsigned short word_no;




  HARD_REG_ELT_TYPE bits;
};





static inline void
hard_reg_set_iter_init (hard_reg_set_iterator *iter, const_hard_reg_set set,
                        unsigned min, unsigned *regno)
{

  iter->pelt = set.elts;
  iter->length = ((76 + (8 * 8) - 1) / (8 * 8));




  iter->word_no = min / ((unsigned) (8 * 8));
  if (iter->word_no < iter->length)
    {
      iter->bits = iter->pelt[iter->word_no];
      iter->bits >>= min % ((unsigned) (8 * 8));


      min += !iter->bits;
    }
  *regno = min;
}

static inline bool
hard_reg_set_iter_set (hard_reg_set_iterator *iter, unsigned *regno)
{
  while (1)
    {

      if (iter->word_no >= iter->length)
        return false;

      if (iter->bits)
        {

          while (!(iter->bits & 1))
            {
              iter->bits >>= 1;
              *regno += 1;
            }
          return (*regno < 76);
        }


      *regno = (*regno + ((unsigned) (8 * 8)) - 1);
      *regno -= *regno % ((unsigned) (8 * 8));


      while (++iter->word_no < iter->length)
        {
          iter->bits = iter->pelt[iter->word_no];
          if (iter->bits)
            break;
          *regno += ((unsigned) (8 * 8));
        }
    }
}

static inline void
hard_reg_set_iter_next (hard_reg_set_iterator *iter, unsigned *regno)
{
  iter->bits >>= 1;
  *regno += 1;
}
# 360 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
extern char global_regs[76];

class simplifiable_subreg;
class subreg_shape;

struct simplifiable_subregs_hasher : nofree_ptr_hash <simplifiable_subreg>
{
  typedef const subreg_shape *compare_type;

  static inline hashval_t hash (const simplifiable_subreg *);
  static inline bool equal (const simplifiable_subreg *, const subreg_shape *);
};

struct target_hard_regs {
  void finalize ();


  HARD_REG_SET x_accessible_reg_set;



  HARD_REG_SET x_operand_reg_set;





  char x_fixed_regs[76];


  HARD_REG_SET x_fixed_reg_set;





  char x_call_used_regs[76];
# 406 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
  HARD_REG_SET x_savable_regs;





  HARD_REG_SET x_fixed_nonglobal_reg_set;







  HARD_REG_SET x_regs_invalidated_by_call;


  int x_reg_alloc_order[76];


  int x_inv_reg_alloc_order[76];


  HARD_REG_SET x_reg_class_contents[((int) LIM_REG_CLASSES)];



  bool x_class_only_fixed_regs[((int) LIM_REG_CLASSES)];


  unsigned int x_reg_class_size[((int) LIM_REG_CLASSES)];


  enum reg_class x_reg_class_subclasses[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



  enum reg_class x_reg_class_subunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];



  enum reg_class x_reg_class_superunion[((int) LIM_REG_CLASSES)][((int) LIM_REG_CLASSES)];


  const char *x_reg_names[76];



  hash_table <simplifiable_subregs_hasher> *x_simplifiable_subregs;
};

extern struct target_hard_regs default_target_hard_regs;

extern struct target_hard_regs *this_target_hard_regs;
# 507 "/home/giulianob/gcc_git_gnu/gcc/gcc/hard-reg-set.h"
extern const char * reg_class_names[];
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
struct sequence_stack {

  rtx_insn *first;
  rtx_insn *last;
  struct sequence_stack *next;
};

struct emit_status {
  void ensure_regno_capacity ();



  int x_reg_rtx_no;


  int x_first_label_num;
# 56 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
  struct sequence_stack seq;



  int x_cur_insn_uid;



  int x_cur_debug_insn_uid;





  int regno_pointer_align_length;




  unsigned char * regno_pointer_align;
};
# 87 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
extern rtx * regno_reg_rtx;






struct expr_status {


  poly_int64_pod x_pending_stack_adjust;
# 114 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
  int x_inhibit_defer_pop;





  poly_int64_pod x_stack_pointer_delta;




  rtx x_saveregs_value;


  rtx x_apply_args_value;


  vec<rtx_insn *, va_gc> *x_forced_labels;
};

typedef struct call_site_record_d *call_site_record;


struct rtl_eh {
  rtx ehr_stackadj;
  rtx ehr_handler;
  rtx_code_label *ehr_label;

  rtx sjlj_fc;
  rtx_insn *sjlj_exit_after;

  vec<uchar, va_gc> *action_record_data;

  vec<call_site_record, va_gc> *call_site_record_v[2];
};
# 157 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
struct gimple_df;
struct call_site_record_d;
struct dw_fde_node;

struct varasm_status {

  struct rtx_constant_pool *pool;



  unsigned int deferred_constants;
};



struct function_subsections {




  const char *hot_section_label;
  const char *cold_section_label;
  const char *hot_section_end_label;
  const char *cold_section_end_label;
};




class frame_space
{
public:
  class frame_space *next;

  poly_int64 start;
  poly_int64 length;
};


struct callinfo_callee
{
  location_t location;
  tree decl;
};


struct callinfo_dalloc
{
  location_t location;
  char const *name;
};

class stack_usage
{
public:

  long static_stack_size;



  long dynamic_stack_size;




  poly_int64 pushed_stack_size;



  unsigned int has_unbounded_dynamic_stack_size : 1;


  vec<callinfo_callee, va_gc> *callees;



  vec<callinfo_dalloc, va_gc> *dallocs;
};
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
struct function {
  struct eh_status *eh;


  struct control_flow_graph *cfg;


  gimple_seq gimple_body;


  struct gimple_df *gimple_df;


  struct loops *x_current_loops;


  char *pass_startwith;


  class stack_usage *su;


  htab_t value_histograms;




  tree decl;



  tree static_chain_decl;




  tree nonlocal_goto_save_area;


  vec<tree, va_gc> *local_decls;




  struct machine_function * machine;


  struct language_function * language;


  hash_set<tree> * used_types_hash;




  struct dw_fde_node *fde;


  int last_stmt_uid;





  int debug_marker_count;


  int funcdef_no;


  location_t function_start_locus;


  location_t function_end_locus;


  unsigned int curr_properties;
  unsigned int last_verified;




  const char * cannot_be_copied_reason;


  unsigned short last_clique;






  unsigned int va_list_gpr_size : 8;



  unsigned int va_list_fpr_size : 8;


  unsigned int calls_setjmp : 1;



  unsigned int calls_alloca : 1;


  unsigned int calls_eh_return : 1;



  unsigned int has_nonlocal_label : 1;



  unsigned int has_forced_label_in_static : 1;




  unsigned int cannot_be_copied_set : 1;


  unsigned int stdarg : 1;

  unsigned int after_inlining : 1;
  unsigned int always_inline_functions_inlined : 1;



  unsigned int can_throw_non_call_exceptions : 1;



  unsigned int can_delete_dead_exceptions : 1;






  unsigned int returns_struct : 1;



  unsigned int returns_pcc_struct : 1;



  unsigned int has_local_explicit_reg_vars : 1;





  unsigned int is_thunk : 1;



  unsigned int has_force_vectorize_loops : 1;



  unsigned int has_simduid_loops : 1;


  unsigned int tail_call_marked : 1;


  unsigned int has_unroll : 1;



  unsigned int debug_nonbind_markers : 1;


  unsigned int coroutine_component : 1;


  unsigned int has_omp_target : 1;
};



void add_local_decl (struct function *fun, tree d);





void record_final_call (tree callee, location_t location);


void record_dynamic_alloc (tree decl_or_exp);







extern struct function *cfun;







extern int virtuals_instantiated;


extern int trampolines_created;

struct types_used_by_vars_entry {
  tree type;
  tree var_decl;
};

struct used_type_hasher : ggc_ptr_hash<types_used_by_vars_entry>
{
  static hashval_t hash (types_used_by_vars_entry *);
  static bool equal (types_used_by_vars_entry *, types_used_by_vars_entry *);
};






extern hash_table<used_type_hasher> *types_used_by_vars_hash;

void types_used_by_var_decl_insert (tree type, tree var_decl);



extern vec<tree, va_gc> *types_used_by_cur_var_decl;




inline struct loops *
loops_for_fn (struct function *fn)
{
  return fn->x_current_loops;
}



inline void
set_loops_for_fn (struct function *fn, struct loops *loops)
{
  ((void)(!(fn->x_current_loops == nullptr || loops == nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/function.h", 499, __FUNCTION__), 0 : 0));
  fn->x_current_loops = loops;
}
# 513 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
extern struct machine_function * (*init_machine_status) (void);






struct args_size
{
  poly_int64_pod constant;
  tree var;
};



struct locate_and_pad_arg_data
{



  struct args_size size;

  struct args_size offset;


  struct args_size slot_offset;


  struct args_size alignment_pad;

  pad_direction where_pad;

  unsigned int boundary;
};
# 597 "/home/giulianob/gcc_git_gnu/gcc/gcc/function.h"
enum stack_clash_probes {
  NO_PROBE_NO_FRAME,
  NO_PROBE_SMALL_FRAME,
  PROBE_INLINE,
  PROBE_LOOP
};

extern void dump_stack_clash_frame_info (enum stack_clash_probes, bool);


extern void push_function_context (void);
extern void pop_function_context (void);


extern void free_after_parsing (struct function *);
extern void free_after_compilation (struct function *);




extern poly_int64 get_frame_size (void);




extern bool frame_offset_overflow (poly_int64, tree);

extern unsigned int spill_slot_alignment (machine_mode);

extern rtx assign_stack_local_1 (machine_mode, poly_int64, int, int);
extern rtx assign_stack_local (machine_mode, poly_int64, int);
extern rtx assign_stack_temp_for_type (machine_mode, poly_int64, tree);
extern rtx assign_stack_temp (machine_mode, poly_int64);
extern rtx assign_temp (tree, int, int);
extern void update_temp_slot_address (rtx, rtx);
extern void preserve_temp_slots (rtx);
extern void free_temp_slots (void);
extern void push_temp_slots (void);
extern void pop_temp_slots (void);
extern void init_temp_slots (void);
extern rtx get_hard_reg_initial_reg (rtx);
extern rtx get_hard_reg_initial_val (machine_mode, unsigned int);
extern rtx has_hard_reg_initial_val (machine_mode, unsigned int);


extern unsigned int emit_initial_value_sets (void);

extern bool initial_value_entry (int i, rtx *, rtx *);
extern void instantiate_decl_rtl (rtx x);
extern int aggregate_value_p (const_tree, const_tree);
extern bool use_register_for_decl (const_tree);
extern gimple_seq gimplify_parameters (gimple_seq *);
extern void locate_and_pad_parm (machine_mode, tree, int, int, int,
     tree, struct args_size *,
     struct locate_and_pad_arg_data *);
extern void generate_setjmp_warnings (void);



extern void reorder_blocks (void);
extern void clear_block_marks (tree);
extern tree blocks_nreverse (tree);
extern tree block_chainon (tree, tree);


extern void number_blocks (tree);


extern void set_cfun (struct function *new_cfun, bool force = false);
extern void push_cfun (struct function *new_cfun);
extern void pop_cfun (void);

extern int get_next_funcdef_no (void);
extern int get_last_funcdef_no (void);
extern void allocate_struct_function (tree, bool);
extern void push_struct_function (tree fndecl);
extern void push_dummy_function (bool);
extern void pop_dummy_function (void);
extern void init_dummy_function_start (void);
extern void init_function_start (tree);
extern void stack_protect_epilogue (void);
extern void expand_function_start (tree);
extern void expand_dummy_function_end (void);

extern void thread_prologue_and_epilogue_insns (void);
extern void diddle_return_value (void (*)(rtx, void*), void*);
extern void clobber_return_register (void);
extern void expand_function_end (void);
extern rtx get_arg_pointer_save_area (void);
extern void maybe_copy_prologue_epilogue_insn (rtx, rtx);
extern int prologue_contains (const rtx_insn *);
extern int epilogue_contains (const rtx_insn *);
extern int prologue_epilogue_contains (const rtx_insn *);
extern void record_prologue_seq (rtx_insn *);
extern void record_epilogue_seq (rtx_insn *);
extern void emit_return_into_block (bool simple_p, basic_block bb);
extern void set_return_jump_label (rtx_insn *);
extern bool active_insn_between (rtx_insn *head, rtx_insn *tail);
extern vec<edge> convert_jumps_to_returns (basic_block last_bb, bool simple_p,
        vec<edge> unconverted);
extern basic_block emit_return_for_exit (edge exit_fallthru_edge,
      bool simple_p);
extern void reposition_prologue_and_epilogue_notes (void);


extern const char *fndecl_name (tree);
extern const char *function_name (struct function *);
extern const char *current_function_name (void);

extern void used_types_insert (tree);
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 2
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h"
extern "C" {
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h"
typedef uintptr_t splay_tree_key;
typedef uintptr_t splay_tree_value;


typedef struct splay_tree_node_s *splay_tree_node;



typedef int (*splay_tree_compare_fn) (splay_tree_key, splay_tree_key);
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/splay-tree.h"
typedef void (*splay_tree_delete_key_fn) (splay_tree_key);





typedef void (*splay_tree_delete_value_fn) (splay_tree_value);


typedef int (*splay_tree_foreach_fn) (splay_tree_node, void*);





typedef void *(*splay_tree_allocate_fn) (int, void *);





typedef void (*splay_tree_deallocate_fn) (void *, void *);


struct splay_tree_node_s {

  splay_tree_key key;


  splay_tree_value value;


  splay_tree_node left;
  splay_tree_node right;
};


struct splay_tree_s {

  splay_tree_node root;


  splay_tree_compare_fn comp;


  splay_tree_delete_key_fn delete_key;


  splay_tree_delete_value_fn delete_value;


  splay_tree_allocate_fn allocate;


  splay_tree_deallocate_fn deallocate;


  void *allocate_data;
};

typedef struct splay_tree_s *splay_tree;

extern splay_tree splay_tree_new (splay_tree_compare_fn,
      splay_tree_delete_key_fn,
      splay_tree_delete_value_fn);
extern splay_tree splay_tree_new_with_allocator (splay_tree_compare_fn,
       splay_tree_delete_key_fn,
       splay_tree_delete_value_fn,
       splay_tree_allocate_fn,
       splay_tree_deallocate_fn,
       void *);
extern splay_tree splay_tree_new_typed_alloc (splay_tree_compare_fn,
           splay_tree_delete_key_fn,
           splay_tree_delete_value_fn,
           splay_tree_allocate_fn,
           splay_tree_allocate_fn,
           splay_tree_deallocate_fn,
           void *);
extern void splay_tree_delete (splay_tree);
extern splay_tree_node splay_tree_insert (splay_tree,
       splay_tree_key,
       splay_tree_value);
extern void splay_tree_remove (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_lookup (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_predecessor (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_successor (splay_tree, splay_tree_key);
extern splay_tree_node splay_tree_max (splay_tree);
extern splay_tree_node splay_tree_min (splay_tree);
extern int splay_tree_foreach (splay_tree, splay_tree_foreach_fn, void*);
extern int splay_tree_compare_ints (splay_tree_key, splay_tree_key);
extern int splay_tree_compare_pointers (splay_tree_key, splay_tree_key);
extern int splay_tree_compare_strings (splay_tree_key, splay_tree_key);
extern void splay_tree_delete_pointers (splay_tree_value);


}
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/symtab.h" 1
# 21 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/symtab.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 1
# 111 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 112 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 2
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
extern "C" {


struct _obstack_chunk
{
  char *limit;
  struct _obstack_chunk *prev;
  char contents[4];
};

struct obstack
{
  size_t chunk_size;
  struct _obstack_chunk *chunk;
  char *object_base;
  char *next_free;
  char *chunk_limit;
  union
  {
    size_t i;
    void *p;
  } temp;
  size_t alignment_mask;


  union
  {
    void *(*plain) (size_t);
    void *(*extra) (void *, size_t);
  } chunkfun;
  union
  {
    void (*plain) (void *);
    void (*extra) (void *, void *);
  } freefun;

  void *extra_arg;
  unsigned use_extra_arg : 1;
  unsigned maybe_empty_object : 1;



  unsigned alloc_failed : 1;


};



extern void _obstack_newchunk (struct obstack *, size_t);
extern void _obstack_free (struct obstack *, void *);
extern int _obstack_begin (struct obstack *,
                           size_t, size_t,
                           void *(*) (size_t), void (*) (void *));
extern int _obstack_begin_1 (struct obstack *,
                             size_t, size_t,
                             void *(*) (void *, size_t),
                             void (*) (void *, void *), void *);
extern size_t _obstack_memory_used (struct obstack *)
  
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h" 3 4
 __attribute__ ((__pure__))
# 212 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
                   ;






extern void (*obstack_alloc_failed_handler) (void);


extern int obstack_exit_failure;
# 532 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/obstack.h"
}
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/symtab.h" 2







typedef struct ht_identifier ht_identifier;
typedef struct ht_identifier *ht_identifier_ptr;
struct ht_identifier {
  const unsigned char *str;
  unsigned int len;
  unsigned int hash_value;
};




typedef struct ht cpp_hash_table;
typedef struct ht_identifier *hashnode;

enum ht_lookup_option {HT_NO_INSERT = 0, HT_ALLOC};


struct ht
{

  struct obstack stack;

  hashnode *entries;

  hashnode (*alloc_node) (cpp_hash_table *);


  void * (*alloc_subobject) (size_t);

  unsigned int nslots;
  unsigned int nelements;


  struct cpp_reader *pfile;


  unsigned int searches;
  unsigned int collisions;


  bool entries_owned;
};


extern cpp_hash_table *ht_create (unsigned int order);


extern void ht_destroy (cpp_hash_table *);

extern hashnode ht_lookup (cpp_hash_table *, const unsigned char *,
      size_t, enum ht_lookup_option);
extern hashnode ht_lookup_with_hash (cpp_hash_table *, const unsigned char *,
                                     size_t, unsigned int,
                                     enum ht_lookup_option);






typedef int (*ht_cb) (struct cpp_reader *, hashnode, const void *);
extern void ht_forall (cpp_hash_table *, ht_cb, const void *);



extern void ht_purge (cpp_hash_table *, ht_cb, const void *);


extern void ht_load (cpp_hash_table *ht, hashnode *entries,
       unsigned int nslots, unsigned int nelements, bool own);


extern void ht_dump_statistics (cpp_hash_table *);
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/line-map.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h" 2

typedef struct cpp_reader cpp_reader;
typedef struct cpp_buffer cpp_buffer;
typedef struct cpp_options cpp_options;
typedef struct cpp_token cpp_token;
typedef struct cpp_string cpp_string;
typedef struct cpp_hashnode cpp_hashnode;
typedef struct cpp_macro cpp_macro;
typedef struct cpp_callbacks cpp_callbacks;
typedef struct cpp_dir cpp_dir;

struct _cpp_file;
# 153 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
enum cpp_ttype
{
  CPP_EQ, CPP_NOT, CPP_GREATER, CPP_LESS, CPP_PLUS, CPP_MINUS, CPP_MULT, CPP_DIV, CPP_MOD, CPP_AND, CPP_OR, CPP_XOR, CPP_RSHIFT, CPP_LSHIFT, CPP_COMPL, CPP_AND_AND, CPP_OR_OR, CPP_QUERY, CPP_COLON, CPP_COMMA, CPP_OPEN_PAREN, CPP_CLOSE_PAREN, CPP_EOF, CPP_EQ_EQ, CPP_NOT_EQ, CPP_GREATER_EQ, CPP_LESS_EQ, CPP_SPACESHIP, CPP_PLUS_EQ, CPP_MINUS_EQ, CPP_MULT_EQ, CPP_DIV_EQ, CPP_MOD_EQ, CPP_AND_EQ, CPP_OR_EQ, CPP_XOR_EQ, CPP_RSHIFT_EQ, CPP_LSHIFT_EQ, CPP_HASH, CPP_PASTE, CPP_OPEN_SQUARE, CPP_CLOSE_SQUARE, CPP_OPEN_BRACE, CPP_CLOSE_BRACE, CPP_SEMICOLON, CPP_ELLIPSIS, CPP_PLUS_PLUS, CPP_MINUS_MINUS, CPP_DEREF, CPP_DOT, CPP_SCOPE, CPP_DEREF_STAR, CPP_DOT_STAR, CPP_ATSIGN, CPP_NAME, CPP_AT_NAME, CPP_NUMBER, CPP_CHAR, CPP_WCHAR, CPP_CHAR16, CPP_CHAR32, CPP_UTF8CHAR, CPP_OTHER, CPP_STRING, CPP_WSTRING, CPP_STRING16, CPP_STRING32, CPP_UTF8STRING, CPP_OBJC_STRING, CPP_HEADER_NAME, CPP_CHAR_USERDEF, CPP_WCHAR_USERDEF, CPP_CHAR16_USERDEF, CPP_CHAR32_USERDEF, CPP_UTF8CHAR_USERDEF, CPP_STRING_USERDEF, CPP_WSTRING_USERDEF, CPP_STRING16_USERDEF, CPP_STRING32_USERDEF, CPP_UTF8STRING_USERDEF, CPP_COMMENT, CPP_MACRO_ARG, CPP_PRAGMA, CPP_PRAGMA_EOL, CPP_PADDING,
  N_TTYPES,


  CPP_KEYWORD,


  CPP_LAST_EQ = CPP_LSHIFT,
  CPP_FIRST_DIGRAPH = CPP_HASH,
  CPP_LAST_PUNCTUATOR= CPP_ATSIGN,
  CPP_LAST_CPP_OP = CPP_LESS_EQ
};




enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11, CLK_GNUC17, CLK_GNUC2X,
      CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11, CLK_STDC17,
      CLK_STDC2X,
      CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,
      CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17,
      CLK_GNUCXX20, CLK_CXX20, CLK_ASM};


struct cpp_string {
  unsigned int len;
  const unsigned char *text;
};
# 203 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
enum cpp_token_fld_kind {
  CPP_TOKEN_FLD_NODE,
  CPP_TOKEN_FLD_SOURCE,
  CPP_TOKEN_FLD_STR,
  CPP_TOKEN_FLD_ARG_NO,
  CPP_TOKEN_FLD_TOKEN_NO,
  CPP_TOKEN_FLD_PRAGMA,
  CPP_TOKEN_FLD_NONE
};


struct cpp_macro_arg {

  unsigned int arg_no;

  cpp_hashnode *
   


       spelling;
};


struct cpp_identifier {

  cpp_hashnode *
   


       node;

  cpp_hashnode *
   


       spelling;
};



struct cpp_token {


  location_t src_loc;

  enum cpp_ttype type : 8;
  unsigned short flags;

  union cpp_token_u
  {

    struct cpp_identifier node;


    cpp_token * source;


    struct cpp_string str;


    struct cpp_macro_arg macro_arg;



    unsigned int token_no;


    unsigned int pragma;
  } val;
};


extern enum cpp_token_fld_kind cpp_token_val_index (const cpp_token *tok);
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
typedef unsigned int cppchar_t;
typedef int cppchar_signed_t;


enum cpp_deps_style { DEPS_NONE = 0, DEPS_USER, DEPS_SYSTEM };


enum cpp_normalize_level {

  normalized_KC = 0,

  normalized_C,


  normalized_identifier_C,

  normalized_none
};



struct cpp_options
{

  enum c_lang lang;


  unsigned char cplusplus;


  unsigned char cplusplus_comments;




  unsigned char objc;


  unsigned char discard_comments;



  unsigned char discard_comments_in_macro_exp;


  unsigned char trigraphs;


  unsigned char digraphs;


  unsigned char extended_numbers;


  unsigned char uliterals;


  unsigned char utf8_char_literals;



  unsigned char rliterals;


  unsigned char print_include_names;


  unsigned char cpp_warn_deprecated;


  unsigned char warn_comments;


  unsigned char warn_date_time;



  unsigned char warn_missing_include_dirs;


  unsigned char warn_trigraphs;


  unsigned char warn_multichar;



  unsigned char cpp_warn_traditional;


  unsigned char cpp_warn_long_long;


  unsigned char warn_endif_labels;



  unsigned char warn_num_sign_change;



  unsigned char warn_variadic_macros;



  unsigned char warn_builtin_macro_redefined;


  unsigned char cpp_warn_implicit_fallthrough;



  unsigned char remap;


  unsigned char dollars_in_ident;


  unsigned char extended_identifiers;



  unsigned char warn_dollars;


  unsigned char warn_undef;



  unsigned char warn_expansion_to_defined;


  unsigned char warn_unused_macros;


  unsigned char c99;


  unsigned char std;


  unsigned char cpp_pedantic;



  unsigned char preprocessed;



  unsigned char debug;







  unsigned char track_macro_expansion;


  unsigned char operator_names;


  unsigned char warn_cxx_operator_names;


  unsigned char traditional;


  unsigned char user_literals;



  unsigned char warn_literal_suffix;



  unsigned char ext_numeric_literals;



  unsigned char c11_identifiers;


  unsigned char binary_constants;


  unsigned char digit_separators;


  unsigned char dfp_constants;


  unsigned char va_opt;


  unsigned char scope;


  const char *narrow_charset;


  const char *wide_charset;


  const char *input_charset;



  int warn_normalize;


  bool warn_invalid_pch;


  bool restore_pch_deps;


  signed char cpp_warn_c90_c99_compat;


  signed char cpp_warn_c11_c2x_compat;


  bool cpp_warn_cxx11_compat;


  struct
  {

    enum cpp_deps_style style;


    bool missing_files;



    bool phony_targets;


    bool ignore_main_file;



    bool need_preprocessor_output;
  } deps;





  size_t precision, char_precision, int_precision, wchar_precision;


  bool unsigned_char, unsigned_wchar;



  bool bytes_big_endian;


  unsigned char stdc_0_in_system_headers;


  bool directives_only;


  bool canonical_system_headers;


  unsigned int max_include_depth;
};





enum cpp_diagnostic_level {

  CPP_DL_WARNING = 0,

  CPP_DL_WARNING_SYSHDR,

  CPP_DL_PEDWARN,

  CPP_DL_ERROR,


  CPP_DL_ICE,

  CPP_DL_NOTE,

  CPP_DL_FATAL
};




enum cpp_warning_reason {
  CPP_W_NONE = 0,
  CPP_W_DEPRECATED,
  CPP_W_COMMENTS,
  CPP_W_MISSING_INCLUDE_DIRS,
  CPP_W_TRIGRAPHS,
  CPP_W_MULTICHAR,
  CPP_W_TRADITIONAL,
  CPP_W_LONG_LONG,
  CPP_W_ENDIF_LABELS,
  CPP_W_NUM_SIGN_CHANGE,
  CPP_W_VARIADIC_MACROS,
  CPP_W_BUILTIN_MACRO_REDEFINED,
  CPP_W_DOLLARS,
  CPP_W_UNDEF,
  CPP_W_UNUSED_MACROS,
  CPP_W_CXX_OPERATOR_NAMES,
  CPP_W_NORMALIZE,
  CPP_W_INVALID_PCH,
  CPP_W_WARNING_DIRECTIVE,
  CPP_W_LITERAL_SUFFIX,
  CPP_W_DATE_TIME,
  CPP_W_PEDANTIC,
  CPP_W_C90_C99_COMPAT,
  CPP_W_C11_C2X_COMPAT,
  CPP_W_CXX11_COMPAT,
  CPP_W_EXPANSION_TO_DEFINED
};







typedef const char *(*missing_header_cb)(cpp_reader *, const char *header, cpp_dir **);


struct cpp_callbacks
{

  void (*line_change) (cpp_reader *, const cpp_token *, int);





  void (*file_change) (cpp_reader *, const line_map_ordinary *);

  void (*dir_change) (cpp_reader *, const char *);
  void (*include) (cpp_reader *, location_t, const unsigned char *,
     const char *, int, const cpp_token **);
  void (*define) (cpp_reader *, location_t, cpp_hashnode *);
  void (*undef) (cpp_reader *, location_t, cpp_hashnode *);
  void (*ident) (cpp_reader *, location_t, const cpp_string *);
  void (*def_pragma) (cpp_reader *, location_t);
  int (*valid_pch) (cpp_reader *, const char *, int);
  void (*read_pch) (cpp_reader *, const char *, int, const char *);
  missing_header_cb missing_header;



  cpp_hashnode * (*macro_to_expand) (cpp_reader *, const cpp_token *);



  bool (*diagnostic) (cpp_reader *,
        enum cpp_diagnostic_level,
        enum cpp_warning_reason,
        rich_location *,
        const char *, va_list *)
       __attribute__ ((__format__ (__printf__, 5, 0))) __attribute__ ((__nonnull__ (5)));



  void (*used_define) (cpp_reader *, location_t, cpp_hashnode *);
  void (*used_undef) (cpp_reader *, location_t, cpp_hashnode *);


  void (*before_define) (cpp_reader *);


  void (*used) (cpp_reader *, location_t, cpp_hashnode *);


  int (*has_attribute) (cpp_reader *);


  int (*has_builtin) (cpp_reader *);


  void (*user_lazy_macro) (cpp_reader *, cpp_macro *, unsigned);


  time_t (*get_source_date_epoch) (cpp_reader *);


  const char *(*get_suggestion) (cpp_reader *, const char *, const char *const *);







  void (*comment) (cpp_reader *, location_t, const unsigned char *,
     size_t);



  const char *(*remap_filename) (const char*);
};
# 710 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
struct cpp_dir
{

  struct cpp_dir *next;


  char *name;
  unsigned int len;



  unsigned char sysp;


  bool user_supplied_p;



  char *canonical_name;



  const char **name_map;





  char *(*construct) (const char *header, cpp_dir *dir);



  ino_t ino;
  dev_t dev;
};


enum cpp_macro_kind {
  cmk_macro,
  cmk_assert,
  cmk_traditional
};



struct cpp_macro {
  union cpp_parm_u
  {



    cpp_hashnode **



                            params;


    cpp_macro * next;
  } parm;


  location_t line;



  unsigned int count;


  unsigned short paramc;


  unsigned char lazy;


  unsigned kind : 2;


  unsigned int fun_like : 1;


  unsigned int variadic : 1;


  unsigned int syshdr : 1;


  unsigned int used : 1;




  unsigned int extra_tokens : 1;



  union cpp_exp_u
  {

    cpp_token tokens[1];




    const unsigned char * text;
  } exp;
};
# 836 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
enum node_type
{
  NT_VOID = 0,
  NT_MACRO_ARG,
  NT_USER_MACRO,
  NT_BUILTIN_MACRO,
  NT_MACRO_MASK = NT_USER_MACRO
};



enum cpp_builtin_type
{
  BT_SPECLINE = 0,
  BT_DATE,
  BT_FILE,
  BT_BASE_FILE,
  BT_INCLUDE_LEVEL,
  BT_TIME,
  BT_STDC,
  BT_PRAGMA,
  BT_TIMESTAMP,
  BT_COUNTER,
  BT_HAS_ATTRIBUTE,
  BT_HAS_BUILTIN,
  BT_HAS_INCLUDE,
  BT_HAS_INCLUDE_NEXT
};
# 874 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
union _cpp_hashnode_value {

  cpp_macro * answers;

  cpp_macro * macro;

  enum cpp_builtin_type builtin;

  unsigned short arg_index;
};

struct cpp_hashnode {
  struct ht_identifier ident;
  unsigned int is_directive : 1;
  unsigned int directive_index : 7;


  unsigned char rid_code;
  enum node_type type : 2;
  unsigned int flags : 8;



  union _cpp_hashnode_value value;
};





class cpp_string_location_reader {
 public:
  cpp_string_location_reader (location_t src_loc,
         line_maps *line_table);

  source_range get_next ();

 private:
  location_t m_loc;
  int m_offset_per_column;
};







class cpp_substring_ranges
{
 public:
  cpp_substring_ranges ();
  ~cpp_substring_ranges ();

  int get_num_ranges () const { return m_num_ranges; }
  source_range get_range (int idx) const
  {
    do { if (! (idx < m_num_ranges)) fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h", 931, __FUNCTION__); } while (0);
    return m_ranges[idx];
  }

  void add_range (source_range range);
  void add_n_ranges (int num, cpp_string_location_reader &loc_reader);

 private:
  source_range *m_ranges;
  int m_num_ranges;
  int m_alloc_ranges;
};







extern cpp_reader *cpp_create_reader (enum c_lang, struct ht *,
          class line_maps *);



extern void cpp_set_line_map (cpp_reader *, class line_maps *);



extern void cpp_set_lang (cpp_reader *, enum c_lang);


extern void cpp_set_include_chains (cpp_reader *, cpp_dir *, cpp_dir *, int);






extern cpp_options *cpp_get_options (cpp_reader *) __attribute__ ((__pure__));
extern cpp_callbacks *cpp_get_callbacks (cpp_reader *) __attribute__ ((__pure__));
extern void cpp_set_callbacks (cpp_reader *, cpp_callbacks *);
extern class mkdeps *cpp_get_deps (cpp_reader *) __attribute__ ((__pure__));






extern const char *cpp_read_main_file (cpp_reader *, const char *,
           bool injecting = false);



extern void cpp_init_special_builtins (cpp_reader *);


extern void cpp_init_builtins (cpp_reader *, int);



extern void cpp_post_options (cpp_reader *);


extern void cpp_init_iconv (cpp_reader *);




extern void cpp_finish (cpp_reader *, FILE *deps_stream);



extern void cpp_destroy (cpp_reader *);

extern unsigned int cpp_token_len (const cpp_token *);
extern unsigned char *cpp_token_as_text (cpp_reader *, const cpp_token *);
extern unsigned char *cpp_spell_token (cpp_reader *, const cpp_token *,
           unsigned char *, bool);
extern void cpp_register_pragma (cpp_reader *, const char *, const char *,
     void (*) (cpp_reader *), bool);
extern void cpp_register_deferred_pragma (cpp_reader *, const char *,
       const char *, unsigned, bool, bool);
extern int cpp_avoid_paste (cpp_reader *, const cpp_token *,
       const cpp_token *);
extern const cpp_token *cpp_get_token (cpp_reader *);
extern const cpp_token *cpp_get_token_with_location (cpp_reader *,
           location_t *);
inline bool cpp_user_macro_p (const cpp_hashnode *node)
{
  return node->type == NT_USER_MACRO;
}
inline bool cpp_builtin_macro_p (const cpp_hashnode *node)
{
  return node->type == NT_BUILTIN_MACRO;
}
inline bool cpp_macro_p (const cpp_hashnode *node)
{
  return node->type & NT_MACRO_MASK;
}


inline bool cpp_fun_like_macro_p (cpp_hashnode *node)
{
  return cpp_user_macro_p (node) && node->value.macro->fun_like;
}

extern const unsigned char *cpp_macro_definition (cpp_reader *,
        cpp_hashnode *);
inline location_t cpp_macro_definition_location (cpp_hashnode *node)
{
  return node->value.macro->line;
}
extern void _cpp_backup_tokens (cpp_reader *, unsigned int);
extern const cpp_token *cpp_peek_token (cpp_reader *, int);


extern cppchar_t cpp_interpret_charconst (cpp_reader *, const cpp_token *,
       unsigned int *, int *);

extern bool cpp_interpret_string (cpp_reader *,
      const cpp_string *, size_t,
      cpp_string *, enum cpp_ttype);
extern const char *cpp_interpret_string_ranges (cpp_reader *pfile,
      const cpp_string *from,
      cpp_string_location_reader *,
      size_t count,
      cpp_substring_ranges *out,
      enum cpp_ttype type);
extern bool cpp_interpret_string_notranslate (cpp_reader *,
           const cpp_string *, size_t,
           cpp_string *, enum cpp_ttype);


extern cppchar_t cpp_host_to_exec_charset (cpp_reader *, cppchar_t);



extern void cpp_define (cpp_reader *, const char *);
extern void cpp_define_formatted (cpp_reader *pfile,
      const char *fmt, ...) __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void cpp_assert (cpp_reader *, const char *);
extern void cpp_undef (cpp_reader *, const char *);
extern void cpp_unassert (cpp_reader *, const char *);


extern void cpp_define_lazily (cpp_reader *, cpp_hashnode *node, unsigned N);


extern void cpp_undef_all (cpp_reader *);

extern cpp_buffer *cpp_push_buffer (cpp_reader *, const unsigned char *,
        size_t, int);
extern int cpp_defined (cpp_reader *, const unsigned char *, int);






typedef uint64_t cpp_num_part;
typedef struct cpp_num cpp_num;
struct cpp_num
{
  cpp_num_part high;
  cpp_num_part low;
  bool unsignedp;
  bool overflow;
};
# 1147 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/cpplib.h"
extern unsigned cpp_classify_number (cpp_reader *, const cpp_token *,
         const char **, location_t);


extern unsigned int cpp_interpret_float_suffix (cpp_reader *, const char *,
      size_t);


extern unsigned int cpp_interpret_int_suffix (cpp_reader *, const char *,
           size_t);


extern cpp_num cpp_interpret_integer (cpp_reader *, const cpp_token *,
          unsigned int);



cpp_num cpp_num_sign_extend (cpp_num, size_t);


extern bool cpp_error (cpp_reader *, enum cpp_diagnostic_level,
         const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool cpp_warning (cpp_reader *, enum cpp_warning_reason,
    const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool cpp_pedwarning (cpp_reader *, enum cpp_warning_reason,
       const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool cpp_warning_syshdr (cpp_reader *, enum cpp_warning_reason reason,
    const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__nonnull__ (3)));



extern bool cpp_errno (cpp_reader *, enum cpp_diagnostic_level,
         const char *msgid);


extern bool cpp_errno_filename (cpp_reader *, enum cpp_diagnostic_level,
    const char *filename, location_t loc);




extern bool cpp_error_with_line (cpp_reader *, enum cpp_diagnostic_level,
     location_t, unsigned,
     const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool cpp_warning_with_line (cpp_reader *, enum cpp_warning_reason,
       location_t, unsigned,
       const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool cpp_pedwarning_with_line (cpp_reader *, enum cpp_warning_reason,
          location_t, unsigned,
          const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool cpp_warning_with_line_syshdr (cpp_reader *, enum cpp_warning_reason,
       location_t, unsigned,
       const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 5, 6))) __attribute__ ((__nonnull__ (5)));

extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level,
     location_t src_loc, const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 4, 5))) __attribute__ ((__nonnull__ (4)));

extern bool cpp_error_at (cpp_reader * pfile, enum cpp_diagnostic_level,
     rich_location *richloc, const char *msgid, ...)
  __attribute__ ((__format__ (__printf__, 4, 5))) __attribute__ ((__nonnull__ (4)));


extern int cpp_ideq (const cpp_token *, const char *);
extern void cpp_output_line (cpp_reader *, FILE *);
extern unsigned char *cpp_output_line_to_string (cpp_reader *,
       const unsigned char *);
extern void cpp_output_token (const cpp_token *, FILE *);
extern const char *cpp_type2name (enum cpp_ttype, unsigned char flags);





extern cppchar_t cpp_parse_escape (cpp_reader *, const unsigned char ** pstr,
       const unsigned char *limit, int wide);




typedef struct
{

  char *comment;


  location_t sloc;
} cpp_comment;



typedef struct
{

  cpp_comment *entries;


  int count;


  int allocated;
} cpp_comment_table;



extern cpp_comment_table *cpp_get_comments (cpp_reader *);





extern cpp_hashnode *cpp_lookup (cpp_reader *, const unsigned char *,
     unsigned int);

typedef int (*cpp_cb) (cpp_reader *, cpp_hashnode *, void *);
extern void cpp_forall_identifiers (cpp_reader *, cpp_cb, void *);


extern void cpp_scan_nooutput (cpp_reader *);
extern int cpp_sys_macro_p (cpp_reader *);
extern unsigned char *cpp_quote_string (unsigned char *, const unsigned char *,
     unsigned int);


extern bool cpp_included (cpp_reader *, const char *);
extern bool cpp_included_before (cpp_reader *, const char *, location_t);
extern void cpp_make_system_header (cpp_reader *, int, int);
extern bool cpp_push_include (cpp_reader *, const char *);
extern bool cpp_push_default_include (cpp_reader *, const char *);
extern void cpp_change_file (cpp_reader *, enum lc_reason, const char *);
extern const char *cpp_get_path (struct _cpp_file *);
extern cpp_dir *cpp_get_dir (struct _cpp_file *);
extern cpp_buffer *cpp_get_buffer (cpp_reader *);
extern struct _cpp_file *cpp_get_file (cpp_buffer *);
extern cpp_buffer *cpp_get_prev (cpp_buffer *);
extern void cpp_clear_file_cache (cpp_reader *);


struct save_macro_data;
extern int cpp_save_state (cpp_reader *, FILE *);
extern int cpp_write_pch_deps (cpp_reader *, FILE *);
extern int cpp_write_pch_state (cpp_reader *, FILE *);
extern int cpp_valid_state (cpp_reader *, const char *, int);
extern void cpp_prepare_state (cpp_reader *, struct save_macro_data **);
extern int cpp_read_state (cpp_reader *, const char *, FILE *,
      struct save_macro_data *);


extern void cpp_force_token_locations (cpp_reader *, location_t);
extern void cpp_stop_forcing_token_locations (cpp_reader *);
enum CPP_DO_task
{
  CPP_DO_print,
  CPP_DO_location,
  CPP_DO_token
};

extern void cpp_directive_only_process (cpp_reader *pfile,
     void *data,
     void (*cb) (cpp_reader *,
          CPP_DO_task,
          void *data, ...));


extern enum cpp_ttype cpp_userdef_string_remove_type
  (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_string_add_type
  (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_char_remove_type
  (enum cpp_ttype type);
extern enum cpp_ttype cpp_userdef_char_add_type
  (enum cpp_ttype type);
extern bool cpp_userdef_string_p
  (enum cpp_ttype type);
extern bool cpp_userdef_char_p
  (enum cpp_ttype type);
extern const char * cpp_get_userdef_suffix
  (const cpp_token *);





class cpp_display_width_computation {
 public:
  cpp_display_width_computation (const char *data, int data_length,
     int tabstop);
  const char *next_byte () const { return m_next; }
  int bytes_processed () const { return m_next - m_begin; }
  int bytes_left () const { return m_bytes_left; }
  bool done () const { return !bytes_left (); }
  int display_cols_processed () const { return m_display_cols; }

  int process_next_codepoint ();
  int advance_display_cols (int n);

 private:
  const char *const m_begin;
  const char *m_next;
  size_t m_bytes_left;
  const int m_tabstop;
  int m_display_cols;
};




int cpp_byte_column_to_display_column (const char *data, int data_length,
           int column, int tabstop);
inline int cpp_display_width (const char *data, int data_length,
         int tabstop)
{
  return cpp_byte_column_to_display_column (data, data_length, data_length,
         tabstop);
}
int cpp_display_column_to_byte_column (const char *data, int data_length,
           int display_col, int tabstop);
int cpp_wcwidth (cppchar_t c);
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/alias.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/alias.h"
extern alias_set_type new_alias_set (void);
extern alias_set_type get_alias_set (tree);
extern alias_set_type get_deref_alias_set (tree);
extern alias_set_type get_varargs_alias_set (void);
extern alias_set_type get_frame_alias_set (void);
extern tree component_uses_parent_alias_set_from (const_tree);
extern bool ends_tbaa_access_path_p (const_tree);
extern bool alias_set_subset_of (alias_set_type, alias_set_type);
extern void record_alias_subset (alias_set_type, alias_set_type);
extern void record_component_aliases (tree);
extern int alias_sets_conflict_p (alias_set_type, alias_set_type);
extern int alias_sets_must_conflict_p (alias_set_type, alias_set_type);
extern int objects_must_conflict_p (tree, tree);
extern int nonoverlapping_memrefs_p (const_rtx, const_rtx, bool);
extern void dump_alias_stats_in_alias_c (FILE *s);
tree reference_alias_ptr_type (tree);
bool alias_ptr_types_compatible_p (tree, tree);
int compare_base_decls (tree, tree);
bool refs_same_for_tbaa_p (tree, tree);
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../libcpp/include/symtab.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 2
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
struct function;
struct real_value;
struct fixed_value;
struct ptr_info_def;
struct range_info_def;
struct die_struct;
# 134 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
enum tree_code {
# 1 "./all-tree.def" 1
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def" 1
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ERROR_MARK,





IDENTIFIER_NODE,






TREE_LIST,


TREE_VEC,
# 75 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BLOCK,
# 122 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OFFSET_TYPE,
# 135 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ENUMERAL_TYPE,



BOOLEAN_TYPE,





INTEGER_TYPE,



REAL_TYPE,
# 158 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
POINTER_TYPE,



REFERENCE_TYPE,


NULLPTR_TYPE,




FIXED_POINT_TYPE,
# 179 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COMPLEX_TYPE,




VECTOR_TYPE,
# 200 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ARRAY_TYPE,
# 210 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
RECORD_TYPE,





UNION_TYPE,





QUAL_UNION_TYPE,






VOID_TYPE,
# 239 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
FUNCTION_TYPE,






METHOD_TYPE,





LANG_TYPE,





VOID_CST,
# 278 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
INTEGER_CST,


POLY_INT_CST,


REAL_CST,


FIXED_CST,



COMPLEX_CST,


VECTOR_CST,


STRING_CST,
# 357 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
FUNCTION_DECL,
LABEL_DECL,




FIELD_DECL,
VAR_DECL,
CONST_DECL,
PARM_DECL,
TYPE_DECL,
RESULT_DECL,



DEBUG_EXPR_DECL,


DEBUG_BEGIN_STMT,



NAMESPACE_DECL,
# 390 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
IMPORTED_DECL,
# 400 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
NAMELIST_DECL,



TRANSLATION_UNIT_DECL,
# 417 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COMPONENT_REF,
# 427 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BIT_FIELD_REF,






ARRAY_REF,




ARRAY_RANGE_REF,



REALPART_EXPR,
IMAGPART_EXPR,
# 456 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VIEW_CONVERT_EXPR,


INDIRECT_REF,
# 468 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OBJ_TYPE_REF,
# 487 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
CONSTRUCTOR,
# 497 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COMPOUND_EXPR,


MODIFY_EXPR,




INIT_EXPR,







TARGET_EXPR,
# 527 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
COND_EXPR,


VEC_DUPLICATE_EXPR,
# 540 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_SERIES_EXPR,
# 552 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_COND_EXPR,
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_PERM_EXPR,
# 589 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BIND_EXPR,







CALL_EXPR,






WITH_CLEANUP_EXPR,
# 621 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
CLEANUP_POINT_EXPR,
# 673 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
PLACEHOLDER_EXPR,


PLUS_EXPR,
MINUS_EXPR,
MULT_EXPR,



POINTER_PLUS_EXPR,







POINTER_DIFF_EXPR,



MULT_HIGHPART_EXPR,


TRUNC_DIV_EXPR,


CEIL_DIV_EXPR,


FLOOR_DIV_EXPR,


ROUND_DIV_EXPR,




TRUNC_MOD_EXPR,


CEIL_MOD_EXPR,


FLOOR_MOD_EXPR,


ROUND_MOD_EXPR,


RDIV_EXPR,



EXACT_DIV_EXPR,


FIX_TRUNC_EXPR,


FLOAT_EXPR,


NEGATE_EXPR,




MIN_EXPR,
MAX_EXPR,





ABS_EXPR,




ABSU_EXPR,
# 768 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
LSHIFT_EXPR,
RSHIFT_EXPR,
LROTATE_EXPR,
RROTATE_EXPR,


BIT_IOR_EXPR,
BIT_XOR_EXPR,
BIT_AND_EXPR,
BIT_NOT_EXPR,
# 788 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
TRUTH_ANDIF_EXPR,
TRUTH_ORIF_EXPR,
TRUTH_AND_EXPR,
TRUTH_OR_EXPR,
TRUTH_XOR_EXPR,
TRUTH_NOT_EXPR,
# 807 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
LT_EXPR,
LE_EXPR,
GT_EXPR,
GE_EXPR,
LTGT_EXPR,
EQ_EXPR,
NE_EXPR,


UNORDERED_EXPR,
ORDERED_EXPR,


UNLT_EXPR,
UNLE_EXPR,
UNGT_EXPR,
UNGE_EXPR,
UNEQ_EXPR,

RANGE_EXPR,



PAREN_EXPR,




CONVERT_EXPR,



ADDR_SPACE_CONVERT_EXPR,




FIXED_CONVERT_EXPR,


NOP_EXPR,


NON_LVALUE_EXPR,






COMPOUND_LITERAL_EXPR,




SAVE_EXPR,



ADDR_EXPR,



FDESC_EXPR,
# 885 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
BIT_INSERT_EXPR,



COMPLEX_EXPR,


CONJ_EXPR,




PREDECREMENT_EXPR,
PREINCREMENT_EXPR,
POSTDECREMENT_EXPR,
POSTINCREMENT_EXPR,


VA_ARG_EXPR,






TRY_CATCH_EXPR,




TRY_FINALLY_EXPR,






EH_ELSE_EXPR,





DECL_EXPR,




LABEL_EXPR,



GOTO_EXPR,






RETURN_EXPR,



EXIT_EXPR,




LOOP_EXPR,
# 965 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
SWITCH_EXPR,
# 977 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
CASE_LABEL_EXPR,






ASM_EXPR,




SSA_NAME,



CATCH_EXPR,




EH_FILTER_EXPR,



SCEV_KNOWN,



SCEV_NOT_KNOWN,



POLYNOMIAL_CHREC,



STATEMENT_LIST,
# 1033 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
ASSERT_EXPR,



TREE_BINFO,






WITH_SIZE_EXPR,
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
REALIGN_LOAD_EXPR,
# 1071 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
TARGET_MEM_REF,
# 1081 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
MEM_REF,
# 1090 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OACC_PARALLEL,





OACC_KERNELS,





OACC_SERIAL,





OACC_DATA,





OACC_HOST_DATA,





OMP_PARALLEL,





OMP_TASK,
# 1152 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OMP_FOR,



OMP_SIMD,



OMP_DISTRIBUTE,



OMP_TASKLOOP,



OMP_LOOP,



OACC_LOOP,




OMP_TEAMS,




OMP_TARGET_DATA,




OMP_TARGET,




OMP_SECTIONS,




OMP_ORDERED,





OMP_CRITICAL,




OMP_SINGLE,




OMP_TASKGROUP,




OMP_SCAN,



OMP_SECTION,



OMP_MASTER,




OACC_CACHE,



OACC_DECLARE,



OACC_ENTER_DATA,



OACC_EXIT_DATA,



OACC_UPDATE,



OMP_TARGET_UPDATE,



OMP_TARGET_ENTER_DATA,



OMP_TARGET_EXIT_DATA,
# 1270 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OMP_ATOMIC,




OMP_ATOMIC_READ,
# 1285 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
OMP_ATOMIC_CAPTURE_OLD,
OMP_ATOMIC_CAPTURE_NEW,


OMP_CLAUSE,



TRANSACTION_EXPR,
# 1304 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
DOT_PROD_EXPR,
# 1313 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
WIDEN_SUM_EXPR,
# 1329 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
SAD_EXPR,






WIDEN_MULT_EXPR,
# 1345 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
WIDEN_MULT_PLUS_EXPR,


WIDEN_MULT_MINUS_EXPR,
# 1361 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
WIDEN_LSHIFT_EXPR,






VEC_WIDEN_MULT_HI_EXPR,
VEC_WIDEN_MULT_LO_EXPR,


VEC_WIDEN_MULT_EVEN_EXPR,
VEC_WIDEN_MULT_ODD_EXPR,





VEC_UNPACK_HI_EXPR,
VEC_UNPACK_LO_EXPR,





VEC_UNPACK_FLOAT_HI_EXPR,
VEC_UNPACK_FLOAT_LO_EXPR,





VEC_UNPACK_FIX_TRUNC_HI_EXPR,

VEC_UNPACK_FIX_TRUNC_LO_EXPR,






VEC_PACK_TRUNC_EXPR,
VEC_PACK_SAT_EXPR,





VEC_PACK_FIX_TRUNC_EXPR,





VEC_PACK_FLOAT_EXPR,
# 1424 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.def"
VEC_WIDEN_LSHIFT_HI_EXPR,
VEC_WIDEN_LSHIFT_LO_EXPR,






PREDICT_EXPR,


OPTIMIZATION_NODE,


TARGET_OPTION_NODE,





ANNOTATE_EXPR,
# 2 "./all-tree.def" 2
LAST_AND_UNUSED_TREE_CODE,
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.def" 1
# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.def"
C_MAYBE_CONST_EXPR,






EXCESS_PRECISION_EXPR,





USERDEF_LITERAL,



SIZEOF_EXPR,
# 4 "./all-tree.def" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/ada/gcc-interface/ada-tree.def" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/ada/gcc-interface/ada-tree.def"
UNCONSTRAINED_ARRAY_TYPE,





UNCONSTRAINED_ARRAY_REF,




NULL_EXPR,



PLUS_NOMOD_EXPR,



MINUS_NOMOD_EXPR,




POWER_EXPR,




ATTR_ADDR_EXPR,
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/ada/gcc-interface/ada-tree.def"
STMT_STMT,





LOOP_STMT,





EXIT_STMT,
# 5 "./all-tree.def" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def" 1
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
OFFSET_REF,




PTRMEM_CST,





NEW_EXPR,
VEC_NEW_EXPR,




DELETE_EXPR,
VEC_DELETE_EXPR,




SCOPE_REF,




MEMBER_REF,



TYPE_EXPR,






AGGR_INIT_EXPR,




VEC_INIT_EXPR,



THROW_EXPR,



EMPTY_CLASS_EXPR,
# 107 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
BASELINK,
# 124 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
TEMPLATE_DECL,
# 159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
TEMPLATE_PARM_INDEX,







TEMPLATE_TEMPLATE_PARM,
# 176 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
TEMPLATE_TYPE_PARM,





TYPENAME_TYPE,



TYPEOF_TYPE,





BOUND_TEMPLATE_TEMPLATE_PARM,







UNBOUND_CLASS_TEMPLATE,






USING_DECL,


USING_STMT,





DEFERRED_PARSE,







DEFERRED_NOEXCEPT,






TEMPLATE_ID_EXPR,


OVERLOAD,
# 246 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
PSEUDO_DTOR_EXPR,



MODOP_EXPR,
CAST_EXPR,
REINTERPRET_CAST_EXPR,
CONST_CAST_EXPR,
STATIC_CAST_EXPR,
DYNAMIC_CAST_EXPR,
IMPLICIT_CONV_EXPR,
DOTSTAR_EXPR,
TYPEID_EXPR,
NOEXCEPT_EXPR,
SPACESHIP_EXPR,
# 271 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
NON_DEPENDENT_EXPR,



CTOR_INITIALIZER,

TRY_BLOCK,

EH_SPEC_BLOCK,





HANDLER,




MUST_NOT_THROW_EXPR,




CLEANUP_STMT,





IF_STMT,



FOR_STMT,





RANGE_FOR_STMT,



WHILE_STMT,



DO_STMT,


BREAK_STMT,


CONTINUE_STMT,




SWITCH_STMT,



EXPR_STMT,

TAG_DEFN,


OFFSETOF_EXPR,




ADDRESSOF_EXPR,


ARROW_EXPR,



ALIGNOF_EXPR,



AT_ENCODE_EXPR,




STMT_EXPR,



UNARY_PLUS_EXPR,







STATIC_ASSERT,
# 391 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
TYPE_ARGUMENT_PACK,
# 400 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
NONTYPE_ARGUMENT_PACK,
# 423 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
TYPE_PACK_EXPANSION,






EXPR_PACK_EXPANSION,
# 442 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
ARGUMENT_PACK_SELECT,
# 458 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
UNARY_LEFT_FOLD_EXPR,
UNARY_RIGHT_FOLD_EXPR,
BINARY_LEFT_FOLD_EXPR,
BINARY_RIGHT_FOLD_EXPR,





TRAIT_EXPR,
# 477 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
LAMBDA_EXPR,
# 486 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
DECLTYPE_TYPE,



UNDERLYING_TYPE,



BASES,
# 504 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
TEMPLATE_INFO,




OMP_DEPOBJ,






CONCEPT_DECL,


CONSTRAINT_INFO,





WILDCARD_DECL,





REQUIRES_EXPR,


SIMPLE_REQ,


TYPE_REQ,





COMPOUND_REQ,


NESTED_REQ,
# 560 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
ATOMIC_CONSTR,







CONJ_CONSTR,
DISJ_CONSTR,







CHECK_CONSTR,
# 588 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.def"
CO_AWAIT_EXPR,





CO_YIELD_EXPR,






CO_RETURN_EXPR,
# 6 "./all-tree.def" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/d/d-tree.def" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/d/d-tree.def"
UNSIGNED_RSHIFT_EXPR,


FLOAT_MOD_EXPR,


FUNCFRAME_INFO,
# 7 "./all-tree.def" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/objc/objc-tree.def" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/objc/objc-tree.def"
CLASS_INTERFACE_TYPE,
CLASS_IMPLEMENTATION_TYPE,

CATEGORY_INTERFACE_TYPE,
CATEGORY_IMPLEMENTATION_TYPE,

PROTOCOL_INTERFACE_TYPE,


KEYWORD_DECL,
INSTANCE_METHOD_DECL,
CLASS_METHOD_DECL,
PROPERTY_DECL,


MESSAGE_SEND_EXPR,
CLASS_REFERENCE_EXPR,
# 70 "/home/giulianob/gcc_git_gnu/gcc/gcc/objc/objc-tree.def"
PROPERTY_REF,
# 8 "./all-tree.def" 2
# 136 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 2
MAX_TREE_CODES
};
# 152 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
enum built_in_class {
  NOT_BUILT_IN = 0,
  BUILT_IN_FRONTEND,
  BUILT_IN_MD,
  BUILT_IN_NORMAL
};
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
enum built_in_function {
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 1
# 282 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
BUILT_IN_NONE,


BUILT_IN_ACOS,
BUILT_IN_ACOSF,
BUILT_IN_ACOSH,
BUILT_IN_ACOSHF,
BUILT_IN_ACOSHL,
BUILT_IN_ACOSL,
BUILT_IN_ALIGNED_ALLOC,
BUILT_IN_ASIN,
BUILT_IN_ASINF,
BUILT_IN_ASINH,
BUILT_IN_ASINHF,
BUILT_IN_ASINHL,
BUILT_IN_ASINL,
BUILT_IN_ATAN,
BUILT_IN_ATAN2,
BUILT_IN_ATAN2F,
BUILT_IN_ATAN2L,
BUILT_IN_ATANF,
BUILT_IN_ATANH,
BUILT_IN_ATANHF,
BUILT_IN_ATANHL,
BUILT_IN_ATANL,
BUILT_IN_CBRT,
BUILT_IN_CBRTF,
BUILT_IN_CBRTL,
BUILT_IN_CEIL,
BUILT_IN_CEILF,
BUILT_IN_CEILL,

BUILT_IN_CEILF16, BUILT_IN_CEILF32, BUILT_IN_CEILF64, BUILT_IN_CEILF128, BUILT_IN_CEILF32X, BUILT_IN_CEILF64X, BUILT_IN_CEILF128X,

BUILT_IN_COPYSIGN,
BUILT_IN_COPYSIGNF,
BUILT_IN_COPYSIGNL,

BUILT_IN_COPYSIGNF16, BUILT_IN_COPYSIGNF32, BUILT_IN_COPYSIGNF64, BUILT_IN_COPYSIGNF128, BUILT_IN_COPYSIGNF32X, BUILT_IN_COPYSIGNF64X, BUILT_IN_COPYSIGNF128X,

BUILT_IN_COS,
BUILT_IN_COSF,
BUILT_IN_COSH,
BUILT_IN_COSHF,
BUILT_IN_COSHL,
BUILT_IN_COSL,
BUILT_IN_DREM,
BUILT_IN_DREMF,
BUILT_IN_DREML,
BUILT_IN_ERF,
BUILT_IN_ERFC,
BUILT_IN_ERFCF,
BUILT_IN_ERFCL,
BUILT_IN_ERFF,
BUILT_IN_ERFL,
BUILT_IN_EXP,
BUILT_IN_EXP10,
BUILT_IN_EXP10F,
BUILT_IN_EXP10L,
BUILT_IN_EXP2,
BUILT_IN_EXP2F,
BUILT_IN_EXP2L,
BUILT_IN_EXPF,
BUILT_IN_EXPL,
BUILT_IN_EXPM1,
BUILT_IN_EXPM1F,
BUILT_IN_EXPM1L,
BUILT_IN_FABS,
BUILT_IN_FABSF,
BUILT_IN_FABSL,

BUILT_IN_FABSF16, BUILT_IN_FABSF32, BUILT_IN_FABSF64, BUILT_IN_FABSF128, BUILT_IN_FABSF32X, BUILT_IN_FABSF64X, BUILT_IN_FABSF128X,

BUILT_IN_FABSD32,
BUILT_IN_FABSD64,
BUILT_IN_FABSD128,
BUILT_IN_FDIM,
BUILT_IN_FDIMF,
BUILT_IN_FDIML,
BUILT_IN_FECLEAREXCEPT,
BUILT_IN_FEGETENV,
BUILT_IN_FEGETEXCEPTFLAG,
BUILT_IN_FEGETROUND,
BUILT_IN_FEHOLDEXCEPT,
BUILT_IN_FERAISEEXCEPT,
BUILT_IN_FESETENV,
BUILT_IN_FESETEXCEPTFLAG,
BUILT_IN_FESETROUND,
BUILT_IN_FETESTEXCEPT,
BUILT_IN_FEUPDATEENV,
BUILT_IN_FLOOR,
BUILT_IN_FLOORF,
BUILT_IN_FLOORL,

BUILT_IN_FLOORF16, BUILT_IN_FLOORF32, BUILT_IN_FLOORF64, BUILT_IN_FLOORF128, BUILT_IN_FLOORF32X, BUILT_IN_FLOORF64X, BUILT_IN_FLOORF128X,

BUILT_IN_FMA,
BUILT_IN_FMAF,
BUILT_IN_FMAL,

BUILT_IN_FMAF16, BUILT_IN_FMAF32, BUILT_IN_FMAF64, BUILT_IN_FMAF128, BUILT_IN_FMAF32X, BUILT_IN_FMAF64X, BUILT_IN_FMAF128X,

BUILT_IN_FMAX,
BUILT_IN_FMAXF,
BUILT_IN_FMAXL,

BUILT_IN_FMAXF16, BUILT_IN_FMAXF32, BUILT_IN_FMAXF64, BUILT_IN_FMAXF128, BUILT_IN_FMAXF32X, BUILT_IN_FMAXF64X, BUILT_IN_FMAXF128X,

BUILT_IN_FMIN,
BUILT_IN_FMINF,
BUILT_IN_FMINL,

BUILT_IN_FMINF16, BUILT_IN_FMINF32, BUILT_IN_FMINF64, BUILT_IN_FMINF128, BUILT_IN_FMINF32X, BUILT_IN_FMINF64X, BUILT_IN_FMINF128X,

BUILT_IN_FMOD,
BUILT_IN_FMODF,
BUILT_IN_FMODL,
BUILT_IN_FREXP,
BUILT_IN_FREXPF,
BUILT_IN_FREXPL,
BUILT_IN_GAMMA,
BUILT_IN_GAMMAF,
BUILT_IN_GAMMAL,
BUILT_IN_GAMMA_R,
BUILT_IN_GAMMAF_R,
BUILT_IN_GAMMAL_R,
BUILT_IN_HUGE_VAL,
BUILT_IN_HUGE_VALF,
BUILT_IN_HUGE_VALL,

BUILT_IN_HUGE_VALF16, BUILT_IN_HUGE_VALF32, BUILT_IN_HUGE_VALF64, BUILT_IN_HUGE_VALF128, BUILT_IN_HUGE_VALF32X, BUILT_IN_HUGE_VALF64X, BUILT_IN_HUGE_VALF128X,
BUILT_IN_HYPOT,
BUILT_IN_HYPOTF,
BUILT_IN_HYPOTL,
BUILT_IN_ICEIL,
BUILT_IN_ICEILF,
BUILT_IN_ICEILL,
BUILT_IN_IFLOOR,
BUILT_IN_IFLOORF,
BUILT_IN_IFLOORL,
BUILT_IN_ILOGB,
BUILT_IN_ILOGBF,
BUILT_IN_ILOGBL,
BUILT_IN_INF,
BUILT_IN_INFF,
BUILT_IN_INFL,
BUILT_IN_INFF16, BUILT_IN_INFF32, BUILT_IN_INFF64, BUILT_IN_INFF128, BUILT_IN_INFF32X, BUILT_IN_INFF64X, BUILT_IN_INFF128X,

BUILT_IN_INFD32,
BUILT_IN_INFD64,
BUILT_IN_INFD128,
BUILT_IN_IRINT,
BUILT_IN_IRINTF,
BUILT_IN_IRINTL,
BUILT_IN_IROUND,
BUILT_IN_IROUNDF,
BUILT_IN_IROUNDL,
BUILT_IN_J0,
BUILT_IN_J0F,
BUILT_IN_J0L,
BUILT_IN_J1,
BUILT_IN_J1F,
BUILT_IN_J1L,
BUILT_IN_JN,
BUILT_IN_JNF,
BUILT_IN_JNL,
BUILT_IN_LCEIL,
BUILT_IN_LCEILF,
BUILT_IN_LCEILL,
BUILT_IN_LDEXP,
BUILT_IN_LDEXPF,
BUILT_IN_LDEXPL,
BUILT_IN_LFLOOR,
BUILT_IN_LFLOORF,
BUILT_IN_LFLOORL,
BUILT_IN_LGAMMA,
BUILT_IN_LGAMMAF,
BUILT_IN_LGAMMAL,
BUILT_IN_LGAMMA_R,
BUILT_IN_LGAMMAF_R,
BUILT_IN_LGAMMAL_R,
BUILT_IN_LLCEIL,
BUILT_IN_LLCEILF,
BUILT_IN_LLCEILL,
BUILT_IN_LLFLOOR,
BUILT_IN_LLFLOORF,
BUILT_IN_LLFLOORL,
BUILT_IN_LLRINT,
BUILT_IN_LLRINTF,
BUILT_IN_LLRINTL,
BUILT_IN_LLROUND,
BUILT_IN_LLROUNDF,
BUILT_IN_LLROUNDL,
BUILT_IN_LOG,
BUILT_IN_LOG10,
BUILT_IN_LOG10F,
BUILT_IN_LOG10L,
BUILT_IN_LOG1P,
BUILT_IN_LOG1PF,
BUILT_IN_LOG1PL,
BUILT_IN_LOG2,
BUILT_IN_LOG2F,
BUILT_IN_LOG2L,
BUILT_IN_LOGB,
BUILT_IN_LOGBF,
BUILT_IN_LOGBL,
BUILT_IN_LOGF,
BUILT_IN_LOGL,
BUILT_IN_LRINT,
BUILT_IN_LRINTF,
BUILT_IN_LRINTL,
BUILT_IN_LROUND,
BUILT_IN_LROUNDF,
BUILT_IN_LROUNDL,
BUILT_IN_MODF,
BUILT_IN_MODFF,
BUILT_IN_MODFL,
BUILT_IN_NAN,
BUILT_IN_NANF,
BUILT_IN_NANL,

BUILT_IN_NANF16, BUILT_IN_NANF32, BUILT_IN_NANF64, BUILT_IN_NANF128, BUILT_IN_NANF32X, BUILT_IN_NANF64X, BUILT_IN_NANF128X,
BUILT_IN_NAND32,
BUILT_IN_NAND64,
BUILT_IN_NAND128,
BUILT_IN_NANS,
BUILT_IN_NANSF,
BUILT_IN_NANSL,
BUILT_IN_NANSF16, BUILT_IN_NANSF32, BUILT_IN_NANSF64, BUILT_IN_NANSF128, BUILT_IN_NANSF32X, BUILT_IN_NANSF64X, BUILT_IN_NANSF128X,

BUILT_IN_NEARBYINT,
BUILT_IN_NEARBYINTF,
BUILT_IN_NEARBYINTL,

BUILT_IN_NEARBYINTF16, BUILT_IN_NEARBYINTF32, BUILT_IN_NEARBYINTF64, BUILT_IN_NEARBYINTF128, BUILT_IN_NEARBYINTF32X, BUILT_IN_NEARBYINTF64X, BUILT_IN_NEARBYINTF128X,

BUILT_IN_NEXTAFTER,
BUILT_IN_NEXTAFTERF,
BUILT_IN_NEXTAFTERL,
BUILT_IN_NEXTTOWARD,
BUILT_IN_NEXTTOWARDF,
BUILT_IN_NEXTTOWARDL,
BUILT_IN_POW,
BUILT_IN_POW10,
BUILT_IN_POW10F,
BUILT_IN_POW10L,
BUILT_IN_POWF,
BUILT_IN_POWI,
BUILT_IN_POWIF,
BUILT_IN_POWIL,
BUILT_IN_POWL,
BUILT_IN_REMAINDER,
BUILT_IN_REMAINDERF,
BUILT_IN_REMAINDERL,
BUILT_IN_REMQUO,
BUILT_IN_REMQUOF,
BUILT_IN_REMQUOL,
BUILT_IN_RINT,
BUILT_IN_RINTF,
BUILT_IN_RINTL,

BUILT_IN_RINTF16, BUILT_IN_RINTF32, BUILT_IN_RINTF64, BUILT_IN_RINTF128, BUILT_IN_RINTF32X, BUILT_IN_RINTF64X, BUILT_IN_RINTF128X,

BUILT_IN_ROUNDEVEN,
BUILT_IN_ROUNDEVENF,
BUILT_IN_ROUNDEVENL,
BUILT_IN_ROUND,
BUILT_IN_ROUNDF,
BUILT_IN_ROUNDL,

BUILT_IN_ROUNDF16, BUILT_IN_ROUNDF32, BUILT_IN_ROUNDF64, BUILT_IN_ROUNDF128, BUILT_IN_ROUNDF32X, BUILT_IN_ROUNDF64X, BUILT_IN_ROUNDF128X,


BUILT_IN_ROUNDEVENF16, BUILT_IN_ROUNDEVENF32, BUILT_IN_ROUNDEVENF64, BUILT_IN_ROUNDEVENF128, BUILT_IN_ROUNDEVENF32X, BUILT_IN_ROUNDEVENF64X, BUILT_IN_ROUNDEVENF128X,

BUILT_IN_SCALB,
BUILT_IN_SCALBF,
BUILT_IN_SCALBL,
BUILT_IN_SCALBLN,
BUILT_IN_SCALBLNF,
BUILT_IN_SCALBLNL,
BUILT_IN_SCALBN,
BUILT_IN_SCALBNF,
BUILT_IN_SCALBNL,
BUILT_IN_SIGNBIT,
BUILT_IN_SIGNBITF,
BUILT_IN_SIGNBITL,
BUILT_IN_SIGNBITD32,
BUILT_IN_SIGNBITD64,
BUILT_IN_SIGNBITD128,
BUILT_IN_SIGNIFICAND,
BUILT_IN_SIGNIFICANDF,
BUILT_IN_SIGNIFICANDL,
BUILT_IN_SIN,
BUILT_IN_SINCOS,
BUILT_IN_SINCOSF,
BUILT_IN_SINCOSL,
BUILT_IN_SINF,
BUILT_IN_SINH,
BUILT_IN_SINHF,
BUILT_IN_SINHL,
BUILT_IN_SINL,
BUILT_IN_SQRT,
BUILT_IN_SQRTF,
BUILT_IN_SQRTL,

BUILT_IN_SQRTF16, BUILT_IN_SQRTF32, BUILT_IN_SQRTF64, BUILT_IN_SQRTF128, BUILT_IN_SQRTF32X, BUILT_IN_SQRTF64X, BUILT_IN_SQRTF128X,

BUILT_IN_TAN,
BUILT_IN_TANF,
BUILT_IN_TANH,
BUILT_IN_TANHF,
BUILT_IN_TANHL,
BUILT_IN_TANL,
BUILT_IN_TGAMMA,
BUILT_IN_TGAMMAF,
BUILT_IN_TGAMMAL,
BUILT_IN_TRUNC,
BUILT_IN_TRUNCF,
BUILT_IN_TRUNCL,

BUILT_IN_TRUNCF16, BUILT_IN_TRUNCF32, BUILT_IN_TRUNCF64, BUILT_IN_TRUNCF128, BUILT_IN_TRUNCF32X, BUILT_IN_TRUNCF64X, BUILT_IN_TRUNCF128X,

BUILT_IN_Y0,
BUILT_IN_Y0F,
BUILT_IN_Y0L,
BUILT_IN_Y1,
BUILT_IN_Y1F,
BUILT_IN_Y1L,
BUILT_IN_YN,
BUILT_IN_YNF,
BUILT_IN_YNL,


BUILT_IN_CABS,
BUILT_IN_CABSF,
BUILT_IN_CABSL,
BUILT_IN_CACOS,
BUILT_IN_CACOSF,
BUILT_IN_CACOSH,
BUILT_IN_CACOSHF,
BUILT_IN_CACOSHL,
BUILT_IN_CACOSL,
BUILT_IN_CARG,
BUILT_IN_CARGF,
BUILT_IN_CARGL,
BUILT_IN_CASIN,
BUILT_IN_CASINF,
BUILT_IN_CASINH,
BUILT_IN_CASINHF,
BUILT_IN_CASINHL,
BUILT_IN_CASINL,
BUILT_IN_CATAN,
BUILT_IN_CATANF,
BUILT_IN_CATANH,
BUILT_IN_CATANHF,
BUILT_IN_CATANHL,
BUILT_IN_CATANL,
BUILT_IN_CCOS,
BUILT_IN_CCOSF,
BUILT_IN_CCOSH,
BUILT_IN_CCOSHF,
BUILT_IN_CCOSHL,
BUILT_IN_CCOSL,
BUILT_IN_CEXP,
BUILT_IN_CEXPF,
BUILT_IN_CEXPL,
BUILT_IN_CEXPI,
BUILT_IN_CEXPIF,
BUILT_IN_CEXPIL,
BUILT_IN_CIMAG,
BUILT_IN_CIMAGF,
BUILT_IN_CIMAGL,
BUILT_IN_CLOG,
BUILT_IN_CLOGF,
BUILT_IN_CLOGL,
BUILT_IN_CLOG10,
BUILT_IN_CLOG10F,
BUILT_IN_CLOG10L,
BUILT_IN_CONJ,
BUILT_IN_CONJF,
BUILT_IN_CONJL,
BUILT_IN_CPOW,
BUILT_IN_CPOWF,
BUILT_IN_CPOWL,
BUILT_IN_CPROJ,
BUILT_IN_CPROJF,
BUILT_IN_CPROJL,
BUILT_IN_CREAL,
BUILT_IN_CREALF,
BUILT_IN_CREALL,
BUILT_IN_CSIN,
BUILT_IN_CSINF,
BUILT_IN_CSINH,
BUILT_IN_CSINHF,
BUILT_IN_CSINHL,
BUILT_IN_CSINL,
BUILT_IN_CSQRT,
BUILT_IN_CSQRTF,
BUILT_IN_CSQRTL,
BUILT_IN_CTAN,
BUILT_IN_CTANF,
BUILT_IN_CTANH,
BUILT_IN_CTANHF,
BUILT_IN_CTANHL,
BUILT_IN_CTANL,


BUILT_IN_BCMP,
BUILT_IN_BCOPY,
BUILT_IN_BZERO,
BUILT_IN_INDEX,
BUILT_IN_MEMCHR,
BUILT_IN_MEMCMP,
BUILT_IN_MEMCPY,
BUILT_IN_MEMMOVE,
BUILT_IN_MEMPCPY,
BUILT_IN_MEMSET,
BUILT_IN_RINDEX,
BUILT_IN_STPCPY,
BUILT_IN_STPNCPY,
BUILT_IN_STRCASECMP,
BUILT_IN_STRCAT,
BUILT_IN_STRCHR,
BUILT_IN_STRCMP,
BUILT_IN_STRCPY,
BUILT_IN_STRCSPN,
BUILT_IN_STRDUP,
BUILT_IN_STRNDUP,
BUILT_IN_STRLEN,
BUILT_IN_STRNCASECMP,
BUILT_IN_STRNCAT,
BUILT_IN_STRNCMP,
BUILT_IN_STRNCPY,
BUILT_IN_STRNLEN,
BUILT_IN_STRPBRK,
BUILT_IN_STRRCHR,
BUILT_IN_STRSPN,
BUILT_IN_STRSTR,


BUILT_IN_FPRINTF,
BUILT_IN_FPRINTF_UNLOCKED,
BUILT_IN_PUTC,
BUILT_IN_PUTC_UNLOCKED,
BUILT_IN_FPUTC,
BUILT_IN_FPUTC_UNLOCKED,
BUILT_IN_FPUTS,
BUILT_IN_FPUTS_UNLOCKED,
BUILT_IN_FSCANF,
BUILT_IN_FWRITE,
BUILT_IN_FWRITE_UNLOCKED,
BUILT_IN_PRINTF,
BUILT_IN_PRINTF_UNLOCKED,
BUILT_IN_PUTCHAR,
BUILT_IN_PUTCHAR_UNLOCKED,
BUILT_IN_PUTS,
BUILT_IN_PUTS_UNLOCKED,
BUILT_IN_SCANF,
BUILT_IN_SNPRINTF,

BUILT_IN_SPRINTF,
BUILT_IN_SSCANF,
BUILT_IN_VFPRINTF,
BUILT_IN_VFSCANF,
BUILT_IN_VPRINTF,
BUILT_IN_VSCANF,
BUILT_IN_VSNPRINTF,
BUILT_IN_VSPRINTF,
BUILT_IN_VSSCANF,


BUILT_IN_ISALNUM,
BUILT_IN_ISALPHA,
BUILT_IN_ISASCII,
BUILT_IN_ISBLANK,
BUILT_IN_ISCNTRL,
BUILT_IN_ISDIGIT,
BUILT_IN_ISGRAPH,
BUILT_IN_ISLOWER,
BUILT_IN_ISPRINT,
BUILT_IN_ISPUNCT,
BUILT_IN_ISSPACE,
BUILT_IN_ISUPPER,
BUILT_IN_ISXDIGIT,
BUILT_IN_TOASCII,
BUILT_IN_TOLOWER,
BUILT_IN_TOUPPER,


BUILT_IN_ISWALNUM,
BUILT_IN_ISWALPHA,
BUILT_IN_ISWBLANK,
BUILT_IN_ISWCNTRL,
BUILT_IN_ISWDIGIT,
BUILT_IN_ISWGRAPH,
BUILT_IN_ISWLOWER,
BUILT_IN_ISWPRINT,
BUILT_IN_ISWPUNCT,
BUILT_IN_ISWSPACE,
BUILT_IN_ISWUPPER,
BUILT_IN_ISWXDIGIT,
BUILT_IN_TOWLOWER,
BUILT_IN_TOWUPPER,


BUILT_IN_ADD_OVERFLOW,
BUILT_IN_SUB_OVERFLOW,
BUILT_IN_MUL_OVERFLOW,
BUILT_IN_ADD_OVERFLOW_P,
BUILT_IN_SUB_OVERFLOW_P,
BUILT_IN_MUL_OVERFLOW_P,

BUILT_IN_SADD_OVERFLOW,
BUILT_IN_SADDL_OVERFLOW,
BUILT_IN_SADDLL_OVERFLOW,
BUILT_IN_SSUB_OVERFLOW,
BUILT_IN_SSUBL_OVERFLOW,
BUILT_IN_SSUBLL_OVERFLOW,
BUILT_IN_SMUL_OVERFLOW,
BUILT_IN_SMULL_OVERFLOW,
BUILT_IN_SMULLL_OVERFLOW,
BUILT_IN_UADD_OVERFLOW,
BUILT_IN_UADDL_OVERFLOW,
BUILT_IN_UADDLL_OVERFLOW,
BUILT_IN_USUB_OVERFLOW,
BUILT_IN_USUBL_OVERFLOW,
BUILT_IN_USUBLL_OVERFLOW,
BUILT_IN_UMUL_OVERFLOW,
BUILT_IN_UMULL_OVERFLOW,
BUILT_IN_UMULLL_OVERFLOW,


BUILT_IN_ABORT,
BUILT_IN_ABS,
BUILT_IN_AGGREGATE_INCOMING_ADDRESS,
BUILT_IN_ALLOCA,
BUILT_IN_APPLY,
BUILT_IN_APPLY_ARGS,
BUILT_IN_BSWAP16,
BUILT_IN_BSWAP32,
BUILT_IN_BSWAP64,
BUILT_IN_BSWAP128,

BUILT_IN_CLEAR_CACHE,

BUILT_IN_CALLOC,
BUILT_IN_CLASSIFY_TYPE,
BUILT_IN_CLZ,
BUILT_IN_CLZIMAX,
BUILT_IN_CLZL,
BUILT_IN_CLZLL,
BUILT_IN_CONSTANT_P,
BUILT_IN_CTZ,
BUILT_IN_CTZIMAX,
BUILT_IN_CTZL,
BUILT_IN_CTZLL,
BUILT_IN_CLRSB,
BUILT_IN_CLRSBIMAX,
BUILT_IN_CLRSBL,
BUILT_IN_CLRSBLL,
BUILT_IN_DCGETTEXT,
BUILT_IN_DGETTEXT,
BUILT_IN_DWARF_CFA,
BUILT_IN_DWARF_SP_COLUMN,
BUILT_IN_EH_RETURN,
BUILT_IN_EH_RETURN_DATA_REGNO,
BUILT_IN_EXECL,
BUILT_IN_EXECLP,
BUILT_IN_EXECLE,
BUILT_IN_EXECV,
BUILT_IN_EXECVP,
BUILT_IN_EXECVE,
BUILT_IN_EXIT,
BUILT_IN_EXPECT,
BUILT_IN_EXPECT_WITH_PROBABILITY,
BUILT_IN_ASSUME_ALIGNED,
BUILT_IN_EXTEND_POINTER,
BUILT_IN_EXTRACT_RETURN_ADDR,
BUILT_IN_FFS,
BUILT_IN_FFSIMAX,
BUILT_IN_FFSL,
BUILT_IN_FFSLL,
BUILT_IN_FORK,
BUILT_IN_FRAME_ADDRESS,

BUILT_IN_FREE,
BUILT_IN_FROB_RETURN_ADDR,
BUILT_IN_GETTEXT,
BUILT_IN_IMAXABS,
BUILT_IN_INIT_DWARF_REG_SIZES,
BUILT_IN_FINITE,
BUILT_IN_FINITEF,
BUILT_IN_FINITEL,
BUILT_IN_FINITED32,
BUILT_IN_FINITED64,
BUILT_IN_FINITED128,
BUILT_IN_FPCLASSIFY,
BUILT_IN_ISFINITE,
BUILT_IN_ISINF_SIGN,
BUILT_IN_ISINF,
BUILT_IN_ISINFF,
BUILT_IN_ISINFL,
BUILT_IN_ISINFD32,
BUILT_IN_ISINFD64,
BUILT_IN_ISINFD128,
BUILT_IN_ISNAN,
BUILT_IN_ISNANF,
BUILT_IN_ISNANL,
BUILT_IN_ISNAND32,
BUILT_IN_ISNAND64,
BUILT_IN_ISNAND128,
BUILT_IN_ISNORMAL,
BUILT_IN_ISGREATER,
BUILT_IN_ISGREATEREQUAL,
BUILT_IN_ISLESS,
BUILT_IN_ISLESSEQUAL,
BUILT_IN_ISLESSGREATER,
BUILT_IN_ISUNORDERED,
BUILT_IN_LABS,
BUILT_IN_LLABS,
BUILT_IN_LONGJMP,

BUILT_IN_MALLOC,
BUILT_IN_NEXT_ARG,
BUILT_IN_PARITY,
BUILT_IN_PARITYIMAX,
BUILT_IN_PARITYL,
BUILT_IN_PARITYLL,
BUILT_IN_POPCOUNT,
BUILT_IN_POPCOUNTIMAX,
BUILT_IN_POPCOUNTL,
BUILT_IN_POPCOUNTLL,
BUILT_IN_POSIX_MEMALIGN,
BUILT_IN_PREFETCH,
BUILT_IN_REALLOC,
BUILT_IN_RETURN,
BUILT_IN_RETURN_ADDRESS,
BUILT_IN_SAVEREGS,
BUILT_IN_SETJMP,
BUILT_IN_STRFMON,
BUILT_IN_STRFTIME,
BUILT_IN_TRAP,
BUILT_IN_UNREACHABLE,
BUILT_IN_UNWIND_INIT,
BUILT_IN_UPDATE_SETJMP_BUF,
BUILT_IN_VA_COPY,
BUILT_IN_VA_END,
BUILT_IN_VA_START,
BUILT_IN_VA_ARG_PACK,
BUILT_IN_VA_ARG_PACK_LEN,
BUILT_IN__EXIT,
BUILT_IN__EXIT2,


BUILT_IN_INIT_TRAMPOLINE,
BUILT_IN_INIT_HEAP_TRAMPOLINE,
BUILT_IN_ADJUST_TRAMPOLINE,
BUILT_IN_INIT_DESCRIPTOR,
BUILT_IN_ADJUST_DESCRIPTOR,
BUILT_IN_NONLOCAL_GOTO,


BUILT_IN_SETJMP_SETUP,
BUILT_IN_SETJMP_RECEIVER,


BUILT_IN_STACK_SAVE,
BUILT_IN_STACK_RESTORE,
BUILT_IN_ALLOCA_WITH_ALIGN,
BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX,



BUILT_IN_MEMCMP_EQ,



BUILT_IN_STRCMP_EQ,
BUILT_IN_STRNCMP_EQ,


BUILT_IN_OBJECT_SIZE,
BUILT_IN_MEMCPY_CHK,
BUILT_IN_MEMMOVE_CHK,
BUILT_IN_MEMPCPY_CHK,
BUILT_IN_MEMSET_CHK,
BUILT_IN_STPCPY_CHK,
BUILT_IN_STPNCPY_CHK,
BUILT_IN_STRCAT_CHK,
BUILT_IN_STRCPY_CHK,
BUILT_IN_STRNCAT_CHK,
BUILT_IN_STRNCPY_CHK,
BUILT_IN_SNPRINTF_CHK,
BUILT_IN_SPRINTF_CHK,
BUILT_IN_VSNPRINTF_CHK,
BUILT_IN_VSPRINTF_CHK,
BUILT_IN_FPRINTF_CHK,
BUILT_IN_PRINTF_CHK,
BUILT_IN_VFPRINTF_CHK,
BUILT_IN_VPRINTF_CHK,


BUILT_IN_PROFILE_FUNC_ENTER,

BUILT_IN_PROFILE_FUNC_EXIT,



BUILT_IN_THREAD_POINTER,




BUILT_IN_SET_THREAD_POINTER,





BUILT_IN_EMUTLS_GET_ADDRESS,




BUILT_IN_EMUTLS_REGISTER_COMMON,
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
BUILT_IN_SPECULATION_SAFE_VALUE_N,


BUILT_IN_SPECULATION_SAFE_VALUE_PTR,


BUILT_IN_SPECULATION_SAFE_VALUE_1,

BUILT_IN_SPECULATION_SAFE_VALUE_2,

BUILT_IN_SPECULATION_SAFE_VALUE_4,

BUILT_IN_SPECULATION_SAFE_VALUE_8,

BUILT_IN_SPECULATION_SAFE_VALUE_16,




BUILT_IN_UNWIND_RESUME,
BUILT_IN_CXA_END_CLEANUP,
BUILT_IN_EH_POINTER,
BUILT_IN_EH_FILTER,
BUILT_IN_EH_COPY_VALUES,


BUILT_IN_FILE,
BUILT_IN_FUNCTION,
BUILT_IN_LINE,


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def"
BUILT_IN_SYNC_FETCH_AND_ADD_N,

BUILT_IN_SYNC_FETCH_AND_ADD_1,

BUILT_IN_SYNC_FETCH_AND_ADD_2,

BUILT_IN_SYNC_FETCH_AND_ADD_4,

BUILT_IN_SYNC_FETCH_AND_ADD_8,

BUILT_IN_SYNC_FETCH_AND_ADD_16,


BUILT_IN_SYNC_FETCH_AND_SUB_N,

BUILT_IN_SYNC_FETCH_AND_SUB_1,

BUILT_IN_SYNC_FETCH_AND_SUB_2,

BUILT_IN_SYNC_FETCH_AND_SUB_4,

BUILT_IN_SYNC_FETCH_AND_SUB_8,

BUILT_IN_SYNC_FETCH_AND_SUB_16,


BUILT_IN_SYNC_FETCH_AND_OR_N,

BUILT_IN_SYNC_FETCH_AND_OR_1,

BUILT_IN_SYNC_FETCH_AND_OR_2,

BUILT_IN_SYNC_FETCH_AND_OR_4,

BUILT_IN_SYNC_FETCH_AND_OR_8,

BUILT_IN_SYNC_FETCH_AND_OR_16,


BUILT_IN_SYNC_FETCH_AND_AND_N,

BUILT_IN_SYNC_FETCH_AND_AND_1,

BUILT_IN_SYNC_FETCH_AND_AND_2,

BUILT_IN_SYNC_FETCH_AND_AND_4,

BUILT_IN_SYNC_FETCH_AND_AND_8,

BUILT_IN_SYNC_FETCH_AND_AND_16,


BUILT_IN_SYNC_FETCH_AND_XOR_N,

BUILT_IN_SYNC_FETCH_AND_XOR_1,

BUILT_IN_SYNC_FETCH_AND_XOR_2,

BUILT_IN_SYNC_FETCH_AND_XOR_4,

BUILT_IN_SYNC_FETCH_AND_XOR_8,

BUILT_IN_SYNC_FETCH_AND_XOR_16,


BUILT_IN_SYNC_FETCH_AND_NAND_N,

BUILT_IN_SYNC_FETCH_AND_NAND_1,

BUILT_IN_SYNC_FETCH_AND_NAND_2,

BUILT_IN_SYNC_FETCH_AND_NAND_4,

BUILT_IN_SYNC_FETCH_AND_NAND_8,

BUILT_IN_SYNC_FETCH_AND_NAND_16,


BUILT_IN_SYNC_ADD_AND_FETCH_N,

BUILT_IN_SYNC_ADD_AND_FETCH_1,

BUILT_IN_SYNC_ADD_AND_FETCH_2,

BUILT_IN_SYNC_ADD_AND_FETCH_4,

BUILT_IN_SYNC_ADD_AND_FETCH_8,

BUILT_IN_SYNC_ADD_AND_FETCH_16,


BUILT_IN_SYNC_SUB_AND_FETCH_N,

BUILT_IN_SYNC_SUB_AND_FETCH_1,

BUILT_IN_SYNC_SUB_AND_FETCH_2,

BUILT_IN_SYNC_SUB_AND_FETCH_4,

BUILT_IN_SYNC_SUB_AND_FETCH_8,

BUILT_IN_SYNC_SUB_AND_FETCH_16,


BUILT_IN_SYNC_OR_AND_FETCH_N,

BUILT_IN_SYNC_OR_AND_FETCH_1,

BUILT_IN_SYNC_OR_AND_FETCH_2,

BUILT_IN_SYNC_OR_AND_FETCH_4,

BUILT_IN_SYNC_OR_AND_FETCH_8,

BUILT_IN_SYNC_OR_AND_FETCH_16,


BUILT_IN_SYNC_AND_AND_FETCH_N,

BUILT_IN_SYNC_AND_AND_FETCH_1,

BUILT_IN_SYNC_AND_AND_FETCH_2,

BUILT_IN_SYNC_AND_AND_FETCH_4,

BUILT_IN_SYNC_AND_AND_FETCH_8,

BUILT_IN_SYNC_AND_AND_FETCH_16,


BUILT_IN_SYNC_XOR_AND_FETCH_N,

BUILT_IN_SYNC_XOR_AND_FETCH_1,

BUILT_IN_SYNC_XOR_AND_FETCH_2,

BUILT_IN_SYNC_XOR_AND_FETCH_4,

BUILT_IN_SYNC_XOR_AND_FETCH_8,

BUILT_IN_SYNC_XOR_AND_FETCH_16,


BUILT_IN_SYNC_NAND_AND_FETCH_N,

BUILT_IN_SYNC_NAND_AND_FETCH_1,

BUILT_IN_SYNC_NAND_AND_FETCH_2,

BUILT_IN_SYNC_NAND_AND_FETCH_4,

BUILT_IN_SYNC_NAND_AND_FETCH_8,

BUILT_IN_SYNC_NAND_AND_FETCH_16,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8,


BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16,



BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8,


BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16,



BUILT_IN_SYNC_LOCK_TEST_AND_SET_N,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_1,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_2,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_4,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_8,


BUILT_IN_SYNC_LOCK_TEST_AND_SET_16,



BUILT_IN_SYNC_LOCK_RELEASE_N,

BUILT_IN_SYNC_LOCK_RELEASE_1,

BUILT_IN_SYNC_LOCK_RELEASE_2,

BUILT_IN_SYNC_LOCK_RELEASE_4,

BUILT_IN_SYNC_LOCK_RELEASE_8,

BUILT_IN_SYNC_LOCK_RELEASE_16,


BUILT_IN_SYNC_SYNCHRONIZE,




BUILT_IN_ATOMIC_TEST_AND_SET,


BUILT_IN_ATOMIC_CLEAR,


BUILT_IN_ATOMIC_EXCHANGE,


BUILT_IN_ATOMIC_EXCHANGE_N,


BUILT_IN_ATOMIC_EXCHANGE_1,


BUILT_IN_ATOMIC_EXCHANGE_2,


BUILT_IN_ATOMIC_EXCHANGE_4,


BUILT_IN_ATOMIC_EXCHANGE_8,


BUILT_IN_ATOMIC_EXCHANGE_16,



BUILT_IN_ATOMIC_LOAD,



BUILT_IN_ATOMIC_LOAD_N,


BUILT_IN_ATOMIC_LOAD_1,


BUILT_IN_ATOMIC_LOAD_2,


BUILT_IN_ATOMIC_LOAD_4,


BUILT_IN_ATOMIC_LOAD_8,


BUILT_IN_ATOMIC_LOAD_16,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N,


BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8,



BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16,




BUILT_IN_ATOMIC_STORE,


BUILT_IN_ATOMIC_STORE_N,


BUILT_IN_ATOMIC_STORE_1,


BUILT_IN_ATOMIC_STORE_2,


BUILT_IN_ATOMIC_STORE_4,


BUILT_IN_ATOMIC_STORE_8,


BUILT_IN_ATOMIC_STORE_16,



BUILT_IN_ATOMIC_ADD_FETCH_N,


BUILT_IN_ATOMIC_ADD_FETCH_1,


BUILT_IN_ATOMIC_ADD_FETCH_2,


BUILT_IN_ATOMIC_ADD_FETCH_4,


BUILT_IN_ATOMIC_ADD_FETCH_8,


BUILT_IN_ATOMIC_ADD_FETCH_16,



BUILT_IN_ATOMIC_SUB_FETCH_N,


BUILT_IN_ATOMIC_SUB_FETCH_1,


BUILT_IN_ATOMIC_SUB_FETCH_2,


BUILT_IN_ATOMIC_SUB_FETCH_4,


BUILT_IN_ATOMIC_SUB_FETCH_8,


BUILT_IN_ATOMIC_SUB_FETCH_16,



BUILT_IN_ATOMIC_AND_FETCH_N,


BUILT_IN_ATOMIC_AND_FETCH_1,


BUILT_IN_ATOMIC_AND_FETCH_2,


BUILT_IN_ATOMIC_AND_FETCH_4,


BUILT_IN_ATOMIC_AND_FETCH_8,


BUILT_IN_ATOMIC_AND_FETCH_16,



BUILT_IN_ATOMIC_NAND_FETCH_N,


BUILT_IN_ATOMIC_NAND_FETCH_1,


BUILT_IN_ATOMIC_NAND_FETCH_2,


BUILT_IN_ATOMIC_NAND_FETCH_4,


BUILT_IN_ATOMIC_NAND_FETCH_8,


BUILT_IN_ATOMIC_NAND_FETCH_16,



BUILT_IN_ATOMIC_XOR_FETCH_N,


BUILT_IN_ATOMIC_XOR_FETCH_1,


BUILT_IN_ATOMIC_XOR_FETCH_2,


BUILT_IN_ATOMIC_XOR_FETCH_4,


BUILT_IN_ATOMIC_XOR_FETCH_8,


BUILT_IN_ATOMIC_XOR_FETCH_16,



BUILT_IN_ATOMIC_OR_FETCH_N,


BUILT_IN_ATOMIC_OR_FETCH_1,


BUILT_IN_ATOMIC_OR_FETCH_2,


BUILT_IN_ATOMIC_OR_FETCH_4,


BUILT_IN_ATOMIC_OR_FETCH_8,


BUILT_IN_ATOMIC_OR_FETCH_16,



BUILT_IN_ATOMIC_FETCH_ADD_N,


BUILT_IN_ATOMIC_FETCH_ADD_1,


BUILT_IN_ATOMIC_FETCH_ADD_2,


BUILT_IN_ATOMIC_FETCH_ADD_4,


BUILT_IN_ATOMIC_FETCH_ADD_8,


BUILT_IN_ATOMIC_FETCH_ADD_16,



BUILT_IN_ATOMIC_FETCH_SUB_N,


BUILT_IN_ATOMIC_FETCH_SUB_1,


BUILT_IN_ATOMIC_FETCH_SUB_2,


BUILT_IN_ATOMIC_FETCH_SUB_4,


BUILT_IN_ATOMIC_FETCH_SUB_8,


BUILT_IN_ATOMIC_FETCH_SUB_16,



BUILT_IN_ATOMIC_FETCH_AND_N,


BUILT_IN_ATOMIC_FETCH_AND_1,


BUILT_IN_ATOMIC_FETCH_AND_2,


BUILT_IN_ATOMIC_FETCH_AND_4,


BUILT_IN_ATOMIC_FETCH_AND_8,


BUILT_IN_ATOMIC_FETCH_AND_16,



BUILT_IN_ATOMIC_FETCH_NAND_N,


BUILT_IN_ATOMIC_FETCH_NAND_1,


BUILT_IN_ATOMIC_FETCH_NAND_2,


BUILT_IN_ATOMIC_FETCH_NAND_4,


BUILT_IN_ATOMIC_FETCH_NAND_8,


BUILT_IN_ATOMIC_FETCH_NAND_16,



BUILT_IN_ATOMIC_FETCH_XOR_N,


BUILT_IN_ATOMIC_FETCH_XOR_1,


BUILT_IN_ATOMIC_FETCH_XOR_2,


BUILT_IN_ATOMIC_FETCH_XOR_4,


BUILT_IN_ATOMIC_FETCH_XOR_8,


BUILT_IN_ATOMIC_FETCH_XOR_16,




BUILT_IN_ATOMIC_FETCH_OR_N,


BUILT_IN_ATOMIC_FETCH_OR_1,


BUILT_IN_ATOMIC_FETCH_OR_2,


BUILT_IN_ATOMIC_FETCH_OR_4,


BUILT_IN_ATOMIC_FETCH_OR_8,


BUILT_IN_ATOMIC_FETCH_OR_16,



BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE,



BUILT_IN_ATOMIC_IS_LOCK_FREE,




BUILT_IN_ATOMIC_THREAD_FENCE,



BUILT_IN_ATOMIC_SIGNAL_FENCE,






BUILT_IN_ATOMIC_FERAISEEXCEPT,
# 1049 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def"
BUILT_IN_ACC_GET_DEVICE_TYPE,

BUILT_IN_GOACC_DATA_START,

BUILT_IN_GOACC_DATA_END,

BUILT_IN_GOACC_ENTER_EXIT_DATA,


BUILT_IN_GOACC_PARALLEL,


BUILT_IN_GOACC_UPDATE,


BUILT_IN_GOACC_WAIT,



BUILT_IN_ACC_ON_DEVICE,


BUILT_IN_GOACC_PARLEVEL_ID,

BUILT_IN_GOACC_PARLEVEL_SIZE,


BUILT_IN_OMP_GET_THREAD_NUM,

BUILT_IN_OMP_GET_NUM_THREADS,

BUILT_IN_OMP_GET_TEAM_NUM,

BUILT_IN_OMP_GET_NUM_TEAMS,


BUILT_IN_GOMP_ATOMIC_START,

BUILT_IN_GOMP_ATOMIC_END,

BUILT_IN_GOMP_BARRIER,

BUILT_IN_GOMP_BARRIER_CANCEL,

BUILT_IN_GOMP_TASKWAIT,

BUILT_IN_GOMP_TASKWAIT_DEPEND,

BUILT_IN_GOMP_TASKYIELD,

BUILT_IN_GOMP_TASKGROUP_START,

BUILT_IN_GOMP_TASKGROUP_END,

BUILT_IN_GOMP_CANCEL,

BUILT_IN_GOMP_CANCELLATION_POINT,

BUILT_IN_GOMP_CRITICAL_START,

BUILT_IN_GOMP_CRITICAL_END,

BUILT_IN_GOMP_CRITICAL_NAME_START,


BUILT_IN_GOMP_CRITICAL_NAME_END,





BUILT_IN_GOMP_LOOP_STATIC_START,



BUILT_IN_GOMP_LOOP_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_GUIDED_START,



BUILT_IN_GOMP_LOOP_RUNTIME_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START,



BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START,



BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START,



BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START,



BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START,



BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START,



BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START,



BUILT_IN_GOMP_LOOP_START,



BUILT_IN_GOMP_LOOP_ORDERED_START,



BUILT_IN_GOMP_LOOP_DOACROSS_START,



BUILT_IN_GOMP_LOOP_STATIC_NEXT,

BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT,

BUILT_IN_GOMP_LOOP_GUIDED_NEXT,

BUILT_IN_GOMP_LOOP_RUNTIME_NEXT,

BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START,



BUILT_IN_GOMP_LOOP_ULL_START,



BUILT_IN_GOMP_LOOP_ULL_ORDERED_START,



BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START,



BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT,


BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT,





BUILT_IN_GOMP_PARALLEL_LOOP_STATIC,



BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC,



BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED,



BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED,



BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME,



BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME,



BUILT_IN_GOMP_LOOP_END,

BUILT_IN_GOMP_LOOP_END_CANCEL,

BUILT_IN_GOMP_LOOP_END_NOWAIT,

BUILT_IN_GOMP_ORDERED_START,

BUILT_IN_GOMP_ORDERED_END,

BUILT_IN_GOMP_DOACROSS_POST,

BUILT_IN_GOMP_DOACROSS_WAIT,

BUILT_IN_GOMP_DOACROSS_ULL_POST,

BUILT_IN_GOMP_DOACROSS_ULL_WAIT,

BUILT_IN_GOMP_PARALLEL,

BUILT_IN_GOMP_PARALLEL_REDUCTIONS,


BUILT_IN_GOMP_TASK,


BUILT_IN_GOMP_TASKLOOP,


BUILT_IN_GOMP_TASKLOOP_ULL,


BUILT_IN_GOMP_SECTIONS_START,

BUILT_IN_GOMP_SECTIONS2_START,

BUILT_IN_GOMP_SECTIONS_NEXT,

BUILT_IN_GOMP_PARALLEL_SECTIONS,


BUILT_IN_GOMP_SECTIONS_END,

BUILT_IN_GOMP_SECTIONS_END_CANCEL,


BUILT_IN_GOMP_SECTIONS_END_NOWAIT,


BUILT_IN_GOMP_SINGLE_START,

BUILT_IN_GOMP_SINGLE_COPY_START,

BUILT_IN_GOMP_SINGLE_COPY_END,

BUILT_IN_GOMP_OFFLOAD_REGISTER,

BUILT_IN_GOMP_OFFLOAD_UNREGISTER,


BUILT_IN_GOMP_TARGET,


BUILT_IN_GOMP_TARGET_DATA,

BUILT_IN_GOMP_TARGET_END_DATA,

BUILT_IN_GOMP_TARGET_UPDATE,


BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA,


BUILT_IN_GOMP_TEAMS,

BUILT_IN_GOMP_TEAMS_REG,

BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER,


BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER,


BUILT_IN_GOMP_TASK_REDUCTION_REMAP,


BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER,


BUILT_IN_GOACC_DECLARE,
# 1052 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def" 1
BUILT_IN_TM_START,


BUILT_IN_TM_COMMIT,

BUILT_IN_TM_COMMIT_EH,

BUILT_IN_TM_ABORT,

BUILT_IN_TM_IRREVOCABLE,


BUILT_IN_TM_MEMCPY,

BUILT_IN_TM_MEMCPY_RNWT,

BUILT_IN_TM_MEMCPY_RTWN,

BUILT_IN_TM_MEMMOVE,

BUILT_IN_TM_MEMSET,


BUILT_IN_TM_GETTMCLONE_IRR,

BUILT_IN_TM_GETTMCLONE_SAFE,



BUILT_IN_TM_MALLOC,

BUILT_IN_TM_CALLOC,

BUILT_IN_TM_FREE,



BUILT_IN_TM_LOG_1,

BUILT_IN_TM_LOG_2,

BUILT_IN_TM_LOG_4,

BUILT_IN_TM_LOG_8,

BUILT_IN_TM_LOG_FLOAT,

BUILT_IN_TM_LOG_DOUBLE,

BUILT_IN_TM_LOG_LDOUBLE,

BUILT_IN_TM_LOG,



BUILT_IN_TM_LOG_M64,
BUILT_IN_TM_LOG_M128,
BUILT_IN_TM_LOG_M256,
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
BUILT_IN_TM_STORE_1,

BUILT_IN_TM_STORE_WAR_1,

BUILT_IN_TM_STORE_WAW_1,


BUILT_IN_TM_STORE_2,

BUILT_IN_TM_STORE_WAR_2,

BUILT_IN_TM_STORE_WAW_2,


BUILT_IN_TM_STORE_4,

BUILT_IN_TM_STORE_WAR_4,

BUILT_IN_TM_STORE_WAW_4,


BUILT_IN_TM_STORE_8,

BUILT_IN_TM_STORE_WAR_8,

BUILT_IN_TM_STORE_WAW_8,


BUILT_IN_TM_STORE_FLOAT,

BUILT_IN_TM_STORE_WAR_FLOAT,

BUILT_IN_TM_STORE_WAW_FLOAT,


BUILT_IN_TM_STORE_DOUBLE,

BUILT_IN_TM_STORE_WAR_DOUBLE,

BUILT_IN_TM_STORE_WAW_DOUBLE,



BUILT_IN_TM_STORE_M64,
BUILT_IN_TM_STORE_WAR_M64,
BUILT_IN_TM_STORE_WAW_M64,
BUILT_IN_TM_STORE_M128,
BUILT_IN_TM_STORE_WAR_M128,
BUILT_IN_TM_STORE_WAW_M128,
BUILT_IN_TM_STORE_M256,
BUILT_IN_TM_STORE_WAR_M256,
BUILT_IN_TM_STORE_WAW_M256,

BUILT_IN_TM_STORE_LDOUBLE,

BUILT_IN_TM_STORE_WAR_LDOUBLE,

BUILT_IN_TM_STORE_WAW_LDOUBLE,
# 133 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
BUILT_IN_TM_LOAD_1,

BUILT_IN_TM_LOAD_RAR_1,

BUILT_IN_TM_LOAD_RAW_1,

BUILT_IN_TM_LOAD_RFW_1,


BUILT_IN_TM_LOAD_2,

BUILT_IN_TM_LOAD_RAR_2,

BUILT_IN_TM_LOAD_RAW_2,

BUILT_IN_TM_LOAD_RFW_2,


BUILT_IN_TM_LOAD_4,

BUILT_IN_TM_LOAD_RAR_4,

BUILT_IN_TM_LOAD_RAW_4,

BUILT_IN_TM_LOAD_RFW_4,


BUILT_IN_TM_LOAD_8,

BUILT_IN_TM_LOAD_RAR_8,

BUILT_IN_TM_LOAD_RAW_8,

BUILT_IN_TM_LOAD_RFW_8,


BUILT_IN_TM_LOAD_FLOAT,

BUILT_IN_TM_LOAD_RAR_FLOAT,

BUILT_IN_TM_LOAD_RAW_FLOAT,

BUILT_IN_TM_LOAD_RFW_FLOAT,


BUILT_IN_TM_LOAD_DOUBLE,

BUILT_IN_TM_LOAD_RAR_DOUBLE,

BUILT_IN_TM_LOAD_RAW_DOUBLE,

BUILT_IN_TM_LOAD_RFW_DOUBLE,



BUILT_IN_TM_LOAD_M64,
BUILT_IN_TM_LOAD_RAR_M64,
BUILT_IN_TM_LOAD_RAW_M64,
BUILT_IN_TM_LOAD_RFW_M64,
BUILT_IN_TM_LOAD_M128,
BUILT_IN_TM_LOAD_RAR_M128,
BUILT_IN_TM_LOAD_RAW_M128,
BUILT_IN_TM_LOAD_RFW_M128,
BUILT_IN_TM_LOAD_M256,
BUILT_IN_TM_LOAD_RAR_M256,
BUILT_IN_TM_LOAD_RAW_M256,
BUILT_IN_TM_LOAD_RFW_M256,

BUILT_IN_TM_LOAD_LDOUBLE,

BUILT_IN_TM_LOAD_RAR_LDOUBLE,

BUILT_IN_TM_LOAD_RAW_LDOUBLE,

BUILT_IN_TM_LOAD_RFW_LDOUBLE,
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def"
BEGIN_SANITIZER_BUILTINS,


BUILT_IN_ASAN_INIT,

BUILT_IN_ASAN_VERSION_MISMATCH_CHECK,




BUILT_IN_ASAN_REPORT_LOAD1,

BUILT_IN_ASAN_REPORT_LOAD2,

BUILT_IN_ASAN_REPORT_LOAD4,

BUILT_IN_ASAN_REPORT_LOAD8,

BUILT_IN_ASAN_REPORT_LOAD16,

BUILT_IN_ASAN_REPORT_LOAD_N,


BUILT_IN_ASAN_REPORT_STORE1,

BUILT_IN_ASAN_REPORT_STORE2,

BUILT_IN_ASAN_REPORT_STORE4,

BUILT_IN_ASAN_REPORT_STORE8,

BUILT_IN_ASAN_REPORT_STORE16,

BUILT_IN_ASAN_REPORT_STORE_N,


BUILT_IN_ASAN_REPORT_LOAD1_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD2_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD4_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD8_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD16_NOABORT,


BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT,



BUILT_IN_ASAN_REPORT_STORE1_NOABORT,


BUILT_IN_ASAN_REPORT_STORE2_NOABORT,


BUILT_IN_ASAN_REPORT_STORE4_NOABORT,


BUILT_IN_ASAN_REPORT_STORE8_NOABORT,


BUILT_IN_ASAN_REPORT_STORE16_NOABORT,


BUILT_IN_ASAN_REPORT_STORE_N_NOABORT,



BUILT_IN_ASAN_LOAD1,

BUILT_IN_ASAN_LOAD2,

BUILT_IN_ASAN_LOAD4,

BUILT_IN_ASAN_LOAD8,

BUILT_IN_ASAN_LOAD16,

BUILT_IN_ASAN_LOADN,

BUILT_IN_ASAN_STORE1,

BUILT_IN_ASAN_STORE2,

BUILT_IN_ASAN_STORE4,

BUILT_IN_ASAN_STORE8,

BUILT_IN_ASAN_STORE16,

BUILT_IN_ASAN_STOREN,

BUILT_IN_ASAN_LOAD1_NOABORT,

BUILT_IN_ASAN_LOAD2_NOABORT,

BUILT_IN_ASAN_LOAD4_NOABORT,

BUILT_IN_ASAN_LOAD8_NOABORT,

BUILT_IN_ASAN_LOAD16_NOABORT,

BUILT_IN_ASAN_LOADN_NOABORT,

BUILT_IN_ASAN_STORE1_NOABORT,

BUILT_IN_ASAN_STORE2_NOABORT,

BUILT_IN_ASAN_STORE4_NOABORT,

BUILT_IN_ASAN_STORE8_NOABORT,

BUILT_IN_ASAN_STORE16_NOABORT,

BUILT_IN_ASAN_STOREN_NOABORT,

BUILT_IN_ASAN_REGISTER_GLOBALS,


BUILT_IN_ASAN_UNREGISTER_GLOBALS,


BUILT_IN_ASAN_HANDLE_NO_RETURN,


BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT,


BUILT_IN_ASAN_AFTER_DYNAMIC_INIT,


BUILT_IN_ASAN_POISON_STACK_MEMORY,


BUILT_IN_ASAN_UNPOISON_STACK_MEMORY,


BUILT_IN_ASAN_ALLOCA_POISON,

BUILT_IN_ASAN_ALLOCAS_UNPOISON,

BUILT_IN_ASAN_POINTER_COMPARE,

BUILT_IN_ASAN_POINTER_SUBTRACT,



BUILT_IN_TSAN_INIT,

BUILT_IN_TSAN_FUNC_ENTRY,

BUILT_IN_TSAN_FUNC_EXIT,

BUILT_IN_TSAN_VPTR_UPDATE,

BUILT_IN_TSAN_READ1,

BUILT_IN_TSAN_READ2,

BUILT_IN_TSAN_READ4,

BUILT_IN_TSAN_READ8,

BUILT_IN_TSAN_READ16,

BUILT_IN_TSAN_WRITE1,

BUILT_IN_TSAN_WRITE2,

BUILT_IN_TSAN_WRITE4,

BUILT_IN_TSAN_WRITE8,

BUILT_IN_TSAN_WRITE16,

BUILT_IN_TSAN_READ_RANGE,

BUILT_IN_TSAN_WRITE_RANGE,


BUILT_IN_TSAN_VOLATILE_READ1,

BUILT_IN_TSAN_VOLATILE_READ2,

BUILT_IN_TSAN_VOLATILE_READ4,

BUILT_IN_TSAN_VOLATILE_READ8,

BUILT_IN_TSAN_VOLATILE_READ16,

BUILT_IN_TSAN_VOLATILE_WRITE1,

BUILT_IN_TSAN_VOLATILE_WRITE2,

BUILT_IN_TSAN_VOLATILE_WRITE4,

BUILT_IN_TSAN_VOLATILE_WRITE8,

BUILT_IN_TSAN_VOLATILE_WRITE16,


BUILT_IN_TSAN_ATOMIC8_LOAD,


BUILT_IN_TSAN_ATOMIC16_LOAD,


BUILT_IN_TSAN_ATOMIC32_LOAD,


BUILT_IN_TSAN_ATOMIC64_LOAD,


BUILT_IN_TSAN_ATOMIC128_LOAD,



BUILT_IN_TSAN_ATOMIC8_STORE,


BUILT_IN_TSAN_ATOMIC16_STORE,


BUILT_IN_TSAN_ATOMIC32_STORE,


BUILT_IN_TSAN_ATOMIC64_STORE,


BUILT_IN_TSAN_ATOMIC128_STORE,



BUILT_IN_TSAN_ATOMIC8_EXCHANGE,


BUILT_IN_TSAN_ATOMIC16_EXCHANGE,


BUILT_IN_TSAN_ATOMIC32_EXCHANGE,


BUILT_IN_TSAN_ATOMIC64_EXCHANGE,


BUILT_IN_TSAN_ATOMIC128_EXCHANGE,



BUILT_IN_TSAN_ATOMIC8_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC16_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC32_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC64_FETCH_ADD,


BUILT_IN_TSAN_ATOMIC128_FETCH_ADD,



BUILT_IN_TSAN_ATOMIC8_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC16_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC32_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC64_FETCH_SUB,


BUILT_IN_TSAN_ATOMIC128_FETCH_SUB,



BUILT_IN_TSAN_ATOMIC8_FETCH_AND,


BUILT_IN_TSAN_ATOMIC16_FETCH_AND,


BUILT_IN_TSAN_ATOMIC32_FETCH_AND,


BUILT_IN_TSAN_ATOMIC64_FETCH_AND,


BUILT_IN_TSAN_ATOMIC128_FETCH_AND,



BUILT_IN_TSAN_ATOMIC8_FETCH_OR,


BUILT_IN_TSAN_ATOMIC16_FETCH_OR,


BUILT_IN_TSAN_ATOMIC32_FETCH_OR,


BUILT_IN_TSAN_ATOMIC64_FETCH_OR,


BUILT_IN_TSAN_ATOMIC128_FETCH_OR,



BUILT_IN_TSAN_ATOMIC8_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC16_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC32_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC64_FETCH_XOR,


BUILT_IN_TSAN_ATOMIC128_FETCH_XOR,



BUILT_IN_TSAN_ATOMIC8_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC16_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC32_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC64_FETCH_NAND,


BUILT_IN_TSAN_ATOMIC128_FETCH_NAND,



BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG,



BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG,




BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK,



BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK,




BUILT_IN_TSAN_ATOMIC_THREAD_FENCE,


BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE,




BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS,



BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE,



BUILT_IN_UBSAN_HANDLE_MISSING_RETURN,



BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE,



BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1,



BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE,



BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT,



BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT,



BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT,



BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT,



BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW,



BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT,



BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS,



BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT,



BUILT_IN_UBSAN_HANDLE_NONNULL_ARG,



BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT,



BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1,



BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT,



BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN,



BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT,



BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS,



BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT,





BUILT_IN_SANITIZER_COV_TRACE_PC,


BUILT_IN_SANITIZER_COV_TRACE_CMP1,


BUILT_IN_SANITIZER_COV_TRACE_CMP2,


BUILT_IN_SANITIZER_COV_TRACE_CMP4,


BUILT_IN_SANITIZER_COV_TRACE_CMP8,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4,


BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8,


BUILT_IN_SANITIZER_COV_TRACE_CMPF,


BUILT_IN_SANITIZER_COV_TRACE_CMPD,


BUILT_IN_SANITIZER_COV_TRACE_SWITCH,




END_SANITIZER_BUILTINS,
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def"
BEGIN_COROUTINE_BUILTINS,




BUILT_IN_CORO_PROMISE,



BUILT_IN_CORO_RESUME,


BUILT_IN_CORO_DESTROY,


BUILT_IN_CORO_DONE,



END_COROUTINE_BUILTINS,
# 1061 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 1103 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def" 1
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
BUILT_IN_HSAIL_WORKITEMABSID,



BUILT_IN_HSAIL_GRIDSIZE,



BUILT_IN_HSAIL_WORKITEMFLATABSID_U32,




BUILT_IN_HSAIL_WORKITEMFLATABSID_U64,




BUILT_IN_HSAIL_WORKITEMFLATID,



BUILT_IN_HSAIL_WORKITEMID,



BUILT_IN_HSAIL_WORKGROUPID,



BUILT_IN_HSAIL_CURRENTWORKITEMFLATID,




BUILT_IN_HSAIL_WORKITEMABSID_U64,



BUILT_IN_HSAIL_PACKETID,



BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64,




BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32,




BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE,




BUILT_IN_HSAIL_WORKGROUPSIZE,




BUILT_IN_HSAIL_DIM,



BUILT_IN_HSAIL_GRIDGROUPS,



BUILT_IN_HSAIL_BITEXTRACT_S32,



BUILT_IN_HSAIL_BITEXTRACT_U32,



BUILT_IN_HSAIL_BITEXTRACT_S64,



BUILT_IN_HSAIL_BITEXTRACT_U64,



BUILT_IN_HSAIL_BITINSERT_U32,



BUILT_IN_HSAIL_BITINSERT_U64,




BUILT_IN_HSAIL_BITMASK_B32,



BUILT_IN_HSAIL_BITMASK_B64,



BUILT_IN_HSAIL_BITREV_B32,



BUILT_IN_HSAIL_BITREV_B64,



BUILT_IN_HSAIL_BITSELECT_B32,



BUILT_IN_HSAIL_BITSELECT_U64,



BUILT_IN_HSAIL_FIRSTBIT_U32,



BUILT_IN_HSAIL_FIRSTBIT_S32,



BUILT_IN_HSAIL_FIRSTBIT_U64,



BUILT_IN_HSAIL_FIRSTBIT_S64,



BUILT_IN_HSAIL_LASTBIT_U32,



BUILT_IN_HSAIL_LASTBIT_U64,



BUILT_IN_HSAIL_BORROW_U32,



BUILT_IN_HSAIL_BORROW_U64,



BUILT_IN_HSAIL_CARRY_U32,



BUILT_IN_HSAIL_CARRY_U64,



BUILT_IN_HSAIL_REM_S32,



BUILT_IN_HSAIL_REM_S64,



BUILT_IN_HSAIL_MIN_F32,



BUILT_IN_HSAIL_MAX_F32,



BUILT_IN_HSAIL_MIN_F64,



BUILT_IN_HSAIL_MAX_F64,



BUILT_IN_HSAIL_CLASS_F32,



BUILT_IN_HSAIL_CLASS_F64,



BUILT_IN_HSAIL_CLASS_F32_F16,



BUILT_IN_HSAIL_FRACT_F32,



BUILT_IN_HSAIL_FRACT_F64,



BUILT_IN_HSAIL_BARRIER,



BUILT_IN_HSAIL_INITFBAR,



BUILT_IN_HSAIL_JOINFBAR,



BUILT_IN_HSAIL_WAITFBAR,



BUILT_IN_HSAIL_ARRIVEFBAR,



BUILT_IN_HSAIL_LEAVEFBAR,



BUILT_IN_HSAIL_RELEASEFBAR,



BUILT_IN_HSAIL_BITALIGN,



BUILT_IN_HSAIL_BYTEALIGN,



BUILT_IN_HSAIL_LERP,



BUILT_IN_HSAIL_PACKCVT,




BUILT_IN_HSAIL_UNPACKCVT,



BUILT_IN_HSAIL_SAD_U16X2,



BUILT_IN_HSAIL_SAD_U32,



BUILT_IN_HSAIL_SAD_U8X4,



BUILT_IN_HSAIL_SADHI_U8X4,




BUILT_IN_HSAIL_CLOCK,



BUILT_IN_HSAIL_CUID,



BUILT_IN_HSAIL_MAXCUID,



BUILT_IN_HSAIL_DEBUGTRAP,



BUILT_IN_HSAIL_GROUPBASEPTR,



BUILT_IN_HSAIL_KERNARGBASEPTR_U64,




BUILT_IN_HSAIL_KERNARGBASEPTR_U32,




BUILT_IN_HSAIL_ALLOCA,



BUILT_IN_HSAIL_LDQUEUEWRITEINDEX,




BUILT_IN_HSAIL_LDQUEUEREADINDEX,




BUILT_IN_HSAIL_STQUEUEWRITEINDEX,




BUILT_IN_HSAIL_STQUEUEREADINDEX,




BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX,




BUILT_IN_HSAIL_CASQUEUEWRITEINDEX,




BUILT_IN_HSAIL_SEGMENTP_GLOBAL,




BUILT_IN_HSAIL_SEGMENTP_GROUP,




BUILT_IN_HSAIL_SEGMENTP_PRIVATE,
# 392 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
BUILT_IN_HSAIL_ATOMIC_MIN_S32,



BUILT_IN_HSAIL_ATOMIC_MIN_S64,



BUILT_IN_HSAIL_ATOMIC_MIN_U32,



BUILT_IN_HSAIL_ATOMIC_MIN_U64,



BUILT_IN_HSAIL_ATOMIC_MAX_S32,



BUILT_IN_HSAIL_ATOMIC_MAX_S64,



BUILT_IN_HSAIL_ATOMIC_MAX_U32,



BUILT_IN_HSAIL_ATOMIC_MAX_U64,



BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32,




BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64,




BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32,




BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64,
# 449 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
BUILT_IN_HSAIL_SAT_ADD_U64,



BUILT_IN_HSAIL_SAT_ADD_S64,



BUILT_IN_HSAIL_SAT_ADD_U32,



BUILT_IN_HSAIL_SAT_ADD_S32,



BUILT_IN_HSAIL_SAT_ADD_U16,



BUILT_IN_HSAIL_SAT_ADD_S16,



BUILT_IN_HSAIL_SAT_ADD_U8,



BUILT_IN_HSAIL_SAT_ADD_S8,



BUILT_IN_HSAIL_SAT_SUB_U64,



BUILT_IN_HSAIL_SAT_SUB_S64,



BUILT_IN_HSAIL_SAT_SUB_U32,



BUILT_IN_HSAIL_SAT_SUB_S32,



BUILT_IN_HSAIL_SAT_SUB_U16,



BUILT_IN_HSAIL_SAT_SUB_S16,



BUILT_IN_HSAIL_SAT_SUB_U8,



BUILT_IN_HSAIL_SAT_SUB_S8,



BUILT_IN_HSAIL_SAT_MUL_U64,



BUILT_IN_HSAIL_SAT_MUL_S64,



BUILT_IN_HSAIL_SAT_MUL_U32,



BUILT_IN_HSAIL_SAT_MUL_S32,



BUILT_IN_HSAIL_SAT_MUL_U16,



BUILT_IN_HSAIL_SAT_MUL_S16,



BUILT_IN_HSAIL_SAT_MUL_U8,



BUILT_IN_HSAIL_SAT_MUL_S8,







BUILT_IN_HSAIL_FTZ_F32_F16,


BUILT_IN_HSAIL_FTZ_F32,


BUILT_IN_HSAIL_FTZ_F64,


BUILT_IN_HSAIL_PUSH_FRAME,


BUILT_IN_HSAIL_POP_FRAME,


BUILT_IN_HSAIL_SETWORKITEMID,


BUILT_IN_HSAIL_LAUNCH_WG_FUNC,



BUILT_IN_HSAIL_LAUNCH_KERNEL,



BUILT_IN_HSAIL_F32_TO_F16,


BUILT_IN_HSAIL_F16_TO_F32,







BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64,




BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64,





BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64,
# 1104 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 168 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 2


  BUILT_IN_COMPLEX_MUL_MIN,
  BUILT_IN_COMPLEX_MUL_MAX
    = BUILT_IN_COMPLEX_MUL_MIN
      + MAX_MODE_COMPLEX_FLOAT
      - MIN_MODE_COMPLEX_FLOAT,

  BUILT_IN_COMPLEX_DIV_MIN,
  BUILT_IN_COMPLEX_DIV_MAX
    = BUILT_IN_COMPLEX_DIV_MIN
      + MAX_MODE_COMPLEX_FLOAT
      - MIN_MODE_COMPLEX_FLOAT,


  END_BUILTINS
};


enum internal_fn {

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def" 1
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def"
IFN_MASK_LOAD,
IFN_LOAD_LANES,
IFN_MASK_LOAD_LANES,


IFN_GATHER_LOAD,
IFN_MASK_GATHER_LOAD,


IFN_LEN_LOAD,

IFN_SCATTER_STORE,
IFN_MASK_SCATTER_STORE,


IFN_MASK_STORE,
IFN_STORE_LANES,
IFN_MASK_STORE_LANES,


IFN_VCOND,
IFN_VCONDU,
IFN_VCONDEQ,
IFN_VCOND_MASK,

IFN_LEN_STORE,

IFN_WHILE_ULT,
IFN_CHECK_RAW_PTRS,

IFN_CHECK_WAR_PTRS,


IFN_VEC_SHL_INSERT,


IFN_DIV_POW2,

IFN_FMS,
IFN_FNMA,
IFN_FNMS,

IFN_AVG_FLOOR,

IFN_AVG_CEIL,


IFN_MULHS,

IFN_MULHRS,


IFN_COND_ADD,
IFN_COND_SUB,
IFN_COND_MUL,
IFN_COND_DIV,

IFN_COND_MOD,

IFN_COND_RDIV,
IFN_COND_MIN,

IFN_COND_MAX,

IFN_COND_AND,

IFN_COND_IOR,

IFN_COND_XOR,

IFN_COND_SHL,

IFN_COND_SHR,


IFN_COND_FMA,
IFN_COND_FMS,
IFN_COND_FNMA,
IFN_COND_FNMS,

IFN_RSQRT,

IFN_REDUC_PLUS,

IFN_REDUC_MAX,

IFN_REDUC_MIN,

IFN_REDUC_AND,

IFN_REDUC_IOR,

IFN_REDUC_XOR,



IFN_EXTRACT_LAST,



IFN_FOLD_EXTRACT_LAST,


IFN_FOLD_LEFT_PLUS,


IFN_MASK_FOLD_LEFT_PLUS,



IFN_ACOS,
IFN_ACOSH,
IFN_ASIN,
IFN_ASINH,
IFN_ATAN,
IFN_ATANH,
IFN_COS,
IFN_COSH,
IFN_EXP,
IFN_EXP10,
IFN_EXP2,
IFN_EXPM1,
IFN_LOG,
IFN_LOG10,
IFN_LOG1P,
IFN_LOG2,
IFN_LOGB,
IFN_SIGNBIT,
IFN_SIGNIFICAND,
IFN_SIN,
IFN_SINH,
IFN_SQRT,
IFN_TAN,
IFN_TANH,


IFN_CEIL,
IFN_FLOOR,
IFN_NEARBYINT,
IFN_RINT,
IFN_ROUND,
IFN_ROUNDEVEN,
IFN_TRUNC,


IFN_ATAN2,
IFN_COPYSIGN,
IFN_FMOD,
IFN_HYPOT,
IFN_POW,
IFN_REMAINDER,
IFN_SCALB,
IFN_FMIN,
IFN_FMAX,
IFN_XORSIGN,


IFN_LDEXP,


IFN_FMA,


IFN_CLRSB,
IFN_CLZ,
IFN_CTZ,
IFN_FFS,
IFN_PARITY,
IFN_POPCOUNT,

IFN_GOMP_USE_SIMT,
IFN_GOMP_SIMT_ENTER,
IFN_GOMP_SIMT_ENTER_ALLOC,
IFN_GOMP_SIMT_EXIT,
IFN_GOMP_SIMT_LANE,
IFN_GOMP_SIMT_VF,
IFN_GOMP_SIMT_LAST_LANE,
IFN_GOMP_SIMT_ORDERED_PRED,
IFN_GOMP_SIMT_VOTE_ANY,
IFN_GOMP_SIMT_XCHG_BFLY,
IFN_GOMP_SIMT_XCHG_IDX,
IFN_GOMP_SIMD_LANE,
IFN_GOMP_SIMD_VF,
IFN_GOMP_SIMD_LAST_LANE,
IFN_GOMP_SIMD_ORDERED_START,
IFN_GOMP_SIMD_ORDERED_END,
IFN_LOOP_VECTORIZED,
IFN_LOOP_DIST_ALIAS,
IFN_ANNOTATE,
IFN_UBSAN_NULL,
IFN_UBSAN_BOUNDS,
IFN_UBSAN_VPTR,
IFN_UBSAN_CHECK_ADD,
IFN_UBSAN_CHECK_SUB,
IFN_UBSAN_CHECK_MUL,
IFN_UBSAN_PTR,
IFN_UBSAN_OBJECT_SIZE,
IFN_ABNORMAL_DISPATCHER,
IFN_BUILTIN_EXPECT,
IFN_ASAN_CHECK,
IFN_ASAN_MARK,
IFN_ASAN_POISON,
IFN_ASAN_POISON_USE,
IFN_ADD_OVERFLOW,
IFN_SUB_OVERFLOW,
IFN_MUL_OVERFLOW,
IFN_TSAN_FUNC_EXIT,
IFN_VA_ARG,
IFN_VEC_CONVERT,





IFN_UNIQUE,
IFN_PHI,







IFN_GOACC_DIM_SIZE,
IFN_GOACC_DIM_POS,


IFN_GOACC_LOOP,


IFN_GOACC_REDUCTION,



IFN_GOACC_TILE,



IFN_SET_EDOM,




IFN_ATOMIC_BIT_TEST_AND_SET,
IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT,
IFN_ATOMIC_BIT_TEST_AND_RESET,
IFN_ATOMIC_COMPARE_EXCHANGE,


IFN_FALLTHROUGH,


IFN_LAUNDER,


IFN_DIVMOD,


IFN_CO_ACTOR,
IFN_CO_YIELD,
IFN_CO_SUSPN,
IFN_CO_FRAME,


IFN_NOP,
# 190 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 2
  IFN_LAST
};






enum combined_fn {


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 1
# 282 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
CFN_BUILT_IN_NONE = int (BUILT_IN_NONE),


CFN_BUILT_IN_ACOS = int (BUILT_IN_ACOS),
CFN_BUILT_IN_ACOSF = int (BUILT_IN_ACOSF),
CFN_BUILT_IN_ACOSH = int (BUILT_IN_ACOSH),
CFN_BUILT_IN_ACOSHF = int (BUILT_IN_ACOSHF),
CFN_BUILT_IN_ACOSHL = int (BUILT_IN_ACOSHL),
CFN_BUILT_IN_ACOSL = int (BUILT_IN_ACOSL),
CFN_BUILT_IN_ALIGNED_ALLOC = int (BUILT_IN_ALIGNED_ALLOC),
CFN_BUILT_IN_ASIN = int (BUILT_IN_ASIN),
CFN_BUILT_IN_ASINF = int (BUILT_IN_ASINF),
CFN_BUILT_IN_ASINH = int (BUILT_IN_ASINH),
CFN_BUILT_IN_ASINHF = int (BUILT_IN_ASINHF),
CFN_BUILT_IN_ASINHL = int (BUILT_IN_ASINHL),
CFN_BUILT_IN_ASINL = int (BUILT_IN_ASINL),
CFN_BUILT_IN_ATAN = int (BUILT_IN_ATAN),
CFN_BUILT_IN_ATAN2 = int (BUILT_IN_ATAN2),
CFN_BUILT_IN_ATAN2F = int (BUILT_IN_ATAN2F),
CFN_BUILT_IN_ATAN2L = int (BUILT_IN_ATAN2L),
CFN_BUILT_IN_ATANF = int (BUILT_IN_ATANF),
CFN_BUILT_IN_ATANH = int (BUILT_IN_ATANH),
CFN_BUILT_IN_ATANHF = int (BUILT_IN_ATANHF),
CFN_BUILT_IN_ATANHL = int (BUILT_IN_ATANHL),
CFN_BUILT_IN_ATANL = int (BUILT_IN_ATANL),
CFN_BUILT_IN_CBRT = int (BUILT_IN_CBRT),
CFN_BUILT_IN_CBRTF = int (BUILT_IN_CBRTF),
CFN_BUILT_IN_CBRTL = int (BUILT_IN_CBRTL),
CFN_BUILT_IN_CEIL = int (BUILT_IN_CEIL),
CFN_BUILT_IN_CEILF = int (BUILT_IN_CEILF),
CFN_BUILT_IN_CEILL = int (BUILT_IN_CEILL),

CFN_BUILT_IN_CEILF16 = int (BUILT_IN_CEILF16), CFN_BUILT_IN_CEILF32 = int (BUILT_IN_CEILF32), CFN_BUILT_IN_CEILF64 = int (BUILT_IN_CEILF64), CFN_BUILT_IN_CEILF128 = int (BUILT_IN_CEILF128), CFN_BUILT_IN_CEILF32X = int (BUILT_IN_CEILF32X), CFN_BUILT_IN_CEILF64X = int (BUILT_IN_CEILF64X), CFN_BUILT_IN_CEILF128X = int (BUILT_IN_CEILF128X),

CFN_BUILT_IN_COPYSIGN = int (BUILT_IN_COPYSIGN),
CFN_BUILT_IN_COPYSIGNF = int (BUILT_IN_COPYSIGNF),
CFN_BUILT_IN_COPYSIGNL = int (BUILT_IN_COPYSIGNL),

CFN_BUILT_IN_COPYSIGNF16 = int (BUILT_IN_COPYSIGNF16), CFN_BUILT_IN_COPYSIGNF32 = int (BUILT_IN_COPYSIGNF32), CFN_BUILT_IN_COPYSIGNF64 = int (BUILT_IN_COPYSIGNF64), CFN_BUILT_IN_COPYSIGNF128 = int (BUILT_IN_COPYSIGNF128), CFN_BUILT_IN_COPYSIGNF32X = int (BUILT_IN_COPYSIGNF32X), CFN_BUILT_IN_COPYSIGNF64X = int (BUILT_IN_COPYSIGNF64X), CFN_BUILT_IN_COPYSIGNF128X = int (BUILT_IN_COPYSIGNF128X),

CFN_BUILT_IN_COS = int (BUILT_IN_COS),
CFN_BUILT_IN_COSF = int (BUILT_IN_COSF),
CFN_BUILT_IN_COSH = int (BUILT_IN_COSH),
CFN_BUILT_IN_COSHF = int (BUILT_IN_COSHF),
CFN_BUILT_IN_COSHL = int (BUILT_IN_COSHL),
CFN_BUILT_IN_COSL = int (BUILT_IN_COSL),
CFN_BUILT_IN_DREM = int (BUILT_IN_DREM),
CFN_BUILT_IN_DREMF = int (BUILT_IN_DREMF),
CFN_BUILT_IN_DREML = int (BUILT_IN_DREML),
CFN_BUILT_IN_ERF = int (BUILT_IN_ERF),
CFN_BUILT_IN_ERFC = int (BUILT_IN_ERFC),
CFN_BUILT_IN_ERFCF = int (BUILT_IN_ERFCF),
CFN_BUILT_IN_ERFCL = int (BUILT_IN_ERFCL),
CFN_BUILT_IN_ERFF = int (BUILT_IN_ERFF),
CFN_BUILT_IN_ERFL = int (BUILT_IN_ERFL),
CFN_BUILT_IN_EXP = int (BUILT_IN_EXP),
CFN_BUILT_IN_EXP10 = int (BUILT_IN_EXP10),
CFN_BUILT_IN_EXP10F = int (BUILT_IN_EXP10F),
CFN_BUILT_IN_EXP10L = int (BUILT_IN_EXP10L),
CFN_BUILT_IN_EXP2 = int (BUILT_IN_EXP2),
CFN_BUILT_IN_EXP2F = int (BUILT_IN_EXP2F),
CFN_BUILT_IN_EXP2L = int (BUILT_IN_EXP2L),
CFN_BUILT_IN_EXPF = int (BUILT_IN_EXPF),
CFN_BUILT_IN_EXPL = int (BUILT_IN_EXPL),
CFN_BUILT_IN_EXPM1 = int (BUILT_IN_EXPM1),
CFN_BUILT_IN_EXPM1F = int (BUILT_IN_EXPM1F),
CFN_BUILT_IN_EXPM1L = int (BUILT_IN_EXPM1L),
CFN_BUILT_IN_FABS = int (BUILT_IN_FABS),
CFN_BUILT_IN_FABSF = int (BUILT_IN_FABSF),
CFN_BUILT_IN_FABSL = int (BUILT_IN_FABSL),

CFN_BUILT_IN_FABSF16 = int (BUILT_IN_FABSF16), CFN_BUILT_IN_FABSF32 = int (BUILT_IN_FABSF32), CFN_BUILT_IN_FABSF64 = int (BUILT_IN_FABSF64), CFN_BUILT_IN_FABSF128 = int (BUILT_IN_FABSF128), CFN_BUILT_IN_FABSF32X = int (BUILT_IN_FABSF32X), CFN_BUILT_IN_FABSF64X = int (BUILT_IN_FABSF64X), CFN_BUILT_IN_FABSF128X = int (BUILT_IN_FABSF128X),

CFN_BUILT_IN_FABSD32 = int (BUILT_IN_FABSD32),
CFN_BUILT_IN_FABSD64 = int (BUILT_IN_FABSD64),
CFN_BUILT_IN_FABSD128 = int (BUILT_IN_FABSD128),
CFN_BUILT_IN_FDIM = int (BUILT_IN_FDIM),
CFN_BUILT_IN_FDIMF = int (BUILT_IN_FDIMF),
CFN_BUILT_IN_FDIML = int (BUILT_IN_FDIML),
CFN_BUILT_IN_FECLEAREXCEPT = int (BUILT_IN_FECLEAREXCEPT),
CFN_BUILT_IN_FEGETENV = int (BUILT_IN_FEGETENV),
CFN_BUILT_IN_FEGETEXCEPTFLAG = int (BUILT_IN_FEGETEXCEPTFLAG),
CFN_BUILT_IN_FEGETROUND = int (BUILT_IN_FEGETROUND),
CFN_BUILT_IN_FEHOLDEXCEPT = int (BUILT_IN_FEHOLDEXCEPT),
CFN_BUILT_IN_FERAISEEXCEPT = int (BUILT_IN_FERAISEEXCEPT),
CFN_BUILT_IN_FESETENV = int (BUILT_IN_FESETENV),
CFN_BUILT_IN_FESETEXCEPTFLAG = int (BUILT_IN_FESETEXCEPTFLAG),
CFN_BUILT_IN_FESETROUND = int (BUILT_IN_FESETROUND),
CFN_BUILT_IN_FETESTEXCEPT = int (BUILT_IN_FETESTEXCEPT),
CFN_BUILT_IN_FEUPDATEENV = int (BUILT_IN_FEUPDATEENV),
CFN_BUILT_IN_FLOOR = int (BUILT_IN_FLOOR),
CFN_BUILT_IN_FLOORF = int (BUILT_IN_FLOORF),
CFN_BUILT_IN_FLOORL = int (BUILT_IN_FLOORL),

CFN_BUILT_IN_FLOORF16 = int (BUILT_IN_FLOORF16), CFN_BUILT_IN_FLOORF32 = int (BUILT_IN_FLOORF32), CFN_BUILT_IN_FLOORF64 = int (BUILT_IN_FLOORF64), CFN_BUILT_IN_FLOORF128 = int (BUILT_IN_FLOORF128), CFN_BUILT_IN_FLOORF32X = int (BUILT_IN_FLOORF32X), CFN_BUILT_IN_FLOORF64X = int (BUILT_IN_FLOORF64X), CFN_BUILT_IN_FLOORF128X = int (BUILT_IN_FLOORF128X),

CFN_BUILT_IN_FMA = int (BUILT_IN_FMA),
CFN_BUILT_IN_FMAF = int (BUILT_IN_FMAF),
CFN_BUILT_IN_FMAL = int (BUILT_IN_FMAL),

CFN_BUILT_IN_FMAF16 = int (BUILT_IN_FMAF16), CFN_BUILT_IN_FMAF32 = int (BUILT_IN_FMAF32), CFN_BUILT_IN_FMAF64 = int (BUILT_IN_FMAF64), CFN_BUILT_IN_FMAF128 = int (BUILT_IN_FMAF128), CFN_BUILT_IN_FMAF32X = int (BUILT_IN_FMAF32X), CFN_BUILT_IN_FMAF64X = int (BUILT_IN_FMAF64X), CFN_BUILT_IN_FMAF128X = int (BUILT_IN_FMAF128X),

CFN_BUILT_IN_FMAX = int (BUILT_IN_FMAX),
CFN_BUILT_IN_FMAXF = int (BUILT_IN_FMAXF),
CFN_BUILT_IN_FMAXL = int (BUILT_IN_FMAXL),

CFN_BUILT_IN_FMAXF16 = int (BUILT_IN_FMAXF16), CFN_BUILT_IN_FMAXF32 = int (BUILT_IN_FMAXF32), CFN_BUILT_IN_FMAXF64 = int (BUILT_IN_FMAXF64), CFN_BUILT_IN_FMAXF128 = int (BUILT_IN_FMAXF128), CFN_BUILT_IN_FMAXF32X = int (BUILT_IN_FMAXF32X), CFN_BUILT_IN_FMAXF64X = int (BUILT_IN_FMAXF64X), CFN_BUILT_IN_FMAXF128X = int (BUILT_IN_FMAXF128X),

CFN_BUILT_IN_FMIN = int (BUILT_IN_FMIN),
CFN_BUILT_IN_FMINF = int (BUILT_IN_FMINF),
CFN_BUILT_IN_FMINL = int (BUILT_IN_FMINL),

CFN_BUILT_IN_FMINF16 = int (BUILT_IN_FMINF16), CFN_BUILT_IN_FMINF32 = int (BUILT_IN_FMINF32), CFN_BUILT_IN_FMINF64 = int (BUILT_IN_FMINF64), CFN_BUILT_IN_FMINF128 = int (BUILT_IN_FMINF128), CFN_BUILT_IN_FMINF32X = int (BUILT_IN_FMINF32X), CFN_BUILT_IN_FMINF64X = int (BUILT_IN_FMINF64X), CFN_BUILT_IN_FMINF128X = int (BUILT_IN_FMINF128X),

CFN_BUILT_IN_FMOD = int (BUILT_IN_FMOD),
CFN_BUILT_IN_FMODF = int (BUILT_IN_FMODF),
CFN_BUILT_IN_FMODL = int (BUILT_IN_FMODL),
CFN_BUILT_IN_FREXP = int (BUILT_IN_FREXP),
CFN_BUILT_IN_FREXPF = int (BUILT_IN_FREXPF),
CFN_BUILT_IN_FREXPL = int (BUILT_IN_FREXPL),
CFN_BUILT_IN_GAMMA = int (BUILT_IN_GAMMA),
CFN_BUILT_IN_GAMMAF = int (BUILT_IN_GAMMAF),
CFN_BUILT_IN_GAMMAL = int (BUILT_IN_GAMMAL),
CFN_BUILT_IN_GAMMA_R = int (BUILT_IN_GAMMA_R),
CFN_BUILT_IN_GAMMAF_R = int (BUILT_IN_GAMMAF_R),
CFN_BUILT_IN_GAMMAL_R = int (BUILT_IN_GAMMAL_R),
CFN_BUILT_IN_HUGE_VAL = int (BUILT_IN_HUGE_VAL),
CFN_BUILT_IN_HUGE_VALF = int (BUILT_IN_HUGE_VALF),
CFN_BUILT_IN_HUGE_VALL = int (BUILT_IN_HUGE_VALL),

CFN_BUILT_IN_HUGE_VALF16 = int (BUILT_IN_HUGE_VALF16), CFN_BUILT_IN_HUGE_VALF32 = int (BUILT_IN_HUGE_VALF32), CFN_BUILT_IN_HUGE_VALF64 = int (BUILT_IN_HUGE_VALF64), CFN_BUILT_IN_HUGE_VALF128 = int (BUILT_IN_HUGE_VALF128), CFN_BUILT_IN_HUGE_VALF32X = int (BUILT_IN_HUGE_VALF32X), CFN_BUILT_IN_HUGE_VALF64X = int (BUILT_IN_HUGE_VALF64X), CFN_BUILT_IN_HUGE_VALF128X = int (BUILT_IN_HUGE_VALF128X),
CFN_BUILT_IN_HYPOT = int (BUILT_IN_HYPOT),
CFN_BUILT_IN_HYPOTF = int (BUILT_IN_HYPOTF),
CFN_BUILT_IN_HYPOTL = int (BUILT_IN_HYPOTL),
CFN_BUILT_IN_ICEIL = int (BUILT_IN_ICEIL),
CFN_BUILT_IN_ICEILF = int (BUILT_IN_ICEILF),
CFN_BUILT_IN_ICEILL = int (BUILT_IN_ICEILL),
CFN_BUILT_IN_IFLOOR = int (BUILT_IN_IFLOOR),
CFN_BUILT_IN_IFLOORF = int (BUILT_IN_IFLOORF),
CFN_BUILT_IN_IFLOORL = int (BUILT_IN_IFLOORL),
CFN_BUILT_IN_ILOGB = int (BUILT_IN_ILOGB),
CFN_BUILT_IN_ILOGBF = int (BUILT_IN_ILOGBF),
CFN_BUILT_IN_ILOGBL = int (BUILT_IN_ILOGBL),
CFN_BUILT_IN_INF = int (BUILT_IN_INF),
CFN_BUILT_IN_INFF = int (BUILT_IN_INFF),
CFN_BUILT_IN_INFL = int (BUILT_IN_INFL),
CFN_BUILT_IN_INFF16 = int (BUILT_IN_INFF16), CFN_BUILT_IN_INFF32 = int (BUILT_IN_INFF32), CFN_BUILT_IN_INFF64 = int (BUILT_IN_INFF64), CFN_BUILT_IN_INFF128 = int (BUILT_IN_INFF128), CFN_BUILT_IN_INFF32X = int (BUILT_IN_INFF32X), CFN_BUILT_IN_INFF64X = int (BUILT_IN_INFF64X), CFN_BUILT_IN_INFF128X = int (BUILT_IN_INFF128X),

CFN_BUILT_IN_INFD32 = int (BUILT_IN_INFD32),
CFN_BUILT_IN_INFD64 = int (BUILT_IN_INFD64),
CFN_BUILT_IN_INFD128 = int (BUILT_IN_INFD128),
CFN_BUILT_IN_IRINT = int (BUILT_IN_IRINT),
CFN_BUILT_IN_IRINTF = int (BUILT_IN_IRINTF),
CFN_BUILT_IN_IRINTL = int (BUILT_IN_IRINTL),
CFN_BUILT_IN_IROUND = int (BUILT_IN_IROUND),
CFN_BUILT_IN_IROUNDF = int (BUILT_IN_IROUNDF),
CFN_BUILT_IN_IROUNDL = int (BUILT_IN_IROUNDL),
CFN_BUILT_IN_J0 = int (BUILT_IN_J0),
CFN_BUILT_IN_J0F = int (BUILT_IN_J0F),
CFN_BUILT_IN_J0L = int (BUILT_IN_J0L),
CFN_BUILT_IN_J1 = int (BUILT_IN_J1),
CFN_BUILT_IN_J1F = int (BUILT_IN_J1F),
CFN_BUILT_IN_J1L = int (BUILT_IN_J1L),
CFN_BUILT_IN_JN = int (BUILT_IN_JN),
CFN_BUILT_IN_JNF = int (BUILT_IN_JNF),
CFN_BUILT_IN_JNL = int (BUILT_IN_JNL),
CFN_BUILT_IN_LCEIL = int (BUILT_IN_LCEIL),
CFN_BUILT_IN_LCEILF = int (BUILT_IN_LCEILF),
CFN_BUILT_IN_LCEILL = int (BUILT_IN_LCEILL),
CFN_BUILT_IN_LDEXP = int (BUILT_IN_LDEXP),
CFN_BUILT_IN_LDEXPF = int (BUILT_IN_LDEXPF),
CFN_BUILT_IN_LDEXPL = int (BUILT_IN_LDEXPL),
CFN_BUILT_IN_LFLOOR = int (BUILT_IN_LFLOOR),
CFN_BUILT_IN_LFLOORF = int (BUILT_IN_LFLOORF),
CFN_BUILT_IN_LFLOORL = int (BUILT_IN_LFLOORL),
CFN_BUILT_IN_LGAMMA = int (BUILT_IN_LGAMMA),
CFN_BUILT_IN_LGAMMAF = int (BUILT_IN_LGAMMAF),
CFN_BUILT_IN_LGAMMAL = int (BUILT_IN_LGAMMAL),
CFN_BUILT_IN_LGAMMA_R = int (BUILT_IN_LGAMMA_R),
CFN_BUILT_IN_LGAMMAF_R = int (BUILT_IN_LGAMMAF_R),
CFN_BUILT_IN_LGAMMAL_R = int (BUILT_IN_LGAMMAL_R),
CFN_BUILT_IN_LLCEIL = int (BUILT_IN_LLCEIL),
CFN_BUILT_IN_LLCEILF = int (BUILT_IN_LLCEILF),
CFN_BUILT_IN_LLCEILL = int (BUILT_IN_LLCEILL),
CFN_BUILT_IN_LLFLOOR = int (BUILT_IN_LLFLOOR),
CFN_BUILT_IN_LLFLOORF = int (BUILT_IN_LLFLOORF),
CFN_BUILT_IN_LLFLOORL = int (BUILT_IN_LLFLOORL),
CFN_BUILT_IN_LLRINT = int (BUILT_IN_LLRINT),
CFN_BUILT_IN_LLRINTF = int (BUILT_IN_LLRINTF),
CFN_BUILT_IN_LLRINTL = int (BUILT_IN_LLRINTL),
CFN_BUILT_IN_LLROUND = int (BUILT_IN_LLROUND),
CFN_BUILT_IN_LLROUNDF = int (BUILT_IN_LLROUNDF),
CFN_BUILT_IN_LLROUNDL = int (BUILT_IN_LLROUNDL),
CFN_BUILT_IN_LOG = int (BUILT_IN_LOG),
CFN_BUILT_IN_LOG10 = int (BUILT_IN_LOG10),
CFN_BUILT_IN_LOG10F = int (BUILT_IN_LOG10F),
CFN_BUILT_IN_LOG10L = int (BUILT_IN_LOG10L),
CFN_BUILT_IN_LOG1P = int (BUILT_IN_LOG1P),
CFN_BUILT_IN_LOG1PF = int (BUILT_IN_LOG1PF),
CFN_BUILT_IN_LOG1PL = int (BUILT_IN_LOG1PL),
CFN_BUILT_IN_LOG2 = int (BUILT_IN_LOG2),
CFN_BUILT_IN_LOG2F = int (BUILT_IN_LOG2F),
CFN_BUILT_IN_LOG2L = int (BUILT_IN_LOG2L),
CFN_BUILT_IN_LOGB = int (BUILT_IN_LOGB),
CFN_BUILT_IN_LOGBF = int (BUILT_IN_LOGBF),
CFN_BUILT_IN_LOGBL = int (BUILT_IN_LOGBL),
CFN_BUILT_IN_LOGF = int (BUILT_IN_LOGF),
CFN_BUILT_IN_LOGL = int (BUILT_IN_LOGL),
CFN_BUILT_IN_LRINT = int (BUILT_IN_LRINT),
CFN_BUILT_IN_LRINTF = int (BUILT_IN_LRINTF),
CFN_BUILT_IN_LRINTL = int (BUILT_IN_LRINTL),
CFN_BUILT_IN_LROUND = int (BUILT_IN_LROUND),
CFN_BUILT_IN_LROUNDF = int (BUILT_IN_LROUNDF),
CFN_BUILT_IN_LROUNDL = int (BUILT_IN_LROUNDL),
CFN_BUILT_IN_MODF = int (BUILT_IN_MODF),
CFN_BUILT_IN_MODFF = int (BUILT_IN_MODFF),
CFN_BUILT_IN_MODFL = int (BUILT_IN_MODFL),
CFN_BUILT_IN_NAN = int (BUILT_IN_NAN),
CFN_BUILT_IN_NANF = int (BUILT_IN_NANF),
CFN_BUILT_IN_NANL = int (BUILT_IN_NANL),

CFN_BUILT_IN_NANF16 = int (BUILT_IN_NANF16), CFN_BUILT_IN_NANF32 = int (BUILT_IN_NANF32), CFN_BUILT_IN_NANF64 = int (BUILT_IN_NANF64), CFN_BUILT_IN_NANF128 = int (BUILT_IN_NANF128), CFN_BUILT_IN_NANF32X = int (BUILT_IN_NANF32X), CFN_BUILT_IN_NANF64X = int (BUILT_IN_NANF64X), CFN_BUILT_IN_NANF128X = int (BUILT_IN_NANF128X),
CFN_BUILT_IN_NAND32 = int (BUILT_IN_NAND32),
CFN_BUILT_IN_NAND64 = int (BUILT_IN_NAND64),
CFN_BUILT_IN_NAND128 = int (BUILT_IN_NAND128),
CFN_BUILT_IN_NANS = int (BUILT_IN_NANS),
CFN_BUILT_IN_NANSF = int (BUILT_IN_NANSF),
CFN_BUILT_IN_NANSL = int (BUILT_IN_NANSL),
CFN_BUILT_IN_NANSF16 = int (BUILT_IN_NANSF16), CFN_BUILT_IN_NANSF32 = int (BUILT_IN_NANSF32), CFN_BUILT_IN_NANSF64 = int (BUILT_IN_NANSF64), CFN_BUILT_IN_NANSF128 = int (BUILT_IN_NANSF128), CFN_BUILT_IN_NANSF32X = int (BUILT_IN_NANSF32X), CFN_BUILT_IN_NANSF64X = int (BUILT_IN_NANSF64X), CFN_BUILT_IN_NANSF128X = int (BUILT_IN_NANSF128X),

CFN_BUILT_IN_NEARBYINT = int (BUILT_IN_NEARBYINT),
CFN_BUILT_IN_NEARBYINTF = int (BUILT_IN_NEARBYINTF),
CFN_BUILT_IN_NEARBYINTL = int (BUILT_IN_NEARBYINTL),

CFN_BUILT_IN_NEARBYINTF16 = int (BUILT_IN_NEARBYINTF16), CFN_BUILT_IN_NEARBYINTF32 = int (BUILT_IN_NEARBYINTF32), CFN_BUILT_IN_NEARBYINTF64 = int (BUILT_IN_NEARBYINTF64), CFN_BUILT_IN_NEARBYINTF128 = int (BUILT_IN_NEARBYINTF128), CFN_BUILT_IN_NEARBYINTF32X = int (BUILT_IN_NEARBYINTF32X), CFN_BUILT_IN_NEARBYINTF64X = int (BUILT_IN_NEARBYINTF64X), CFN_BUILT_IN_NEARBYINTF128X = int (BUILT_IN_NEARBYINTF128X),

CFN_BUILT_IN_NEXTAFTER = int (BUILT_IN_NEXTAFTER),
CFN_BUILT_IN_NEXTAFTERF = int (BUILT_IN_NEXTAFTERF),
CFN_BUILT_IN_NEXTAFTERL = int (BUILT_IN_NEXTAFTERL),
CFN_BUILT_IN_NEXTTOWARD = int (BUILT_IN_NEXTTOWARD),
CFN_BUILT_IN_NEXTTOWARDF = int (BUILT_IN_NEXTTOWARDF),
CFN_BUILT_IN_NEXTTOWARDL = int (BUILT_IN_NEXTTOWARDL),
CFN_BUILT_IN_POW = int (BUILT_IN_POW),
CFN_BUILT_IN_POW10 = int (BUILT_IN_POW10),
CFN_BUILT_IN_POW10F = int (BUILT_IN_POW10F),
CFN_BUILT_IN_POW10L = int (BUILT_IN_POW10L),
CFN_BUILT_IN_POWF = int (BUILT_IN_POWF),
CFN_BUILT_IN_POWI = int (BUILT_IN_POWI),
CFN_BUILT_IN_POWIF = int (BUILT_IN_POWIF),
CFN_BUILT_IN_POWIL = int (BUILT_IN_POWIL),
CFN_BUILT_IN_POWL = int (BUILT_IN_POWL),
CFN_BUILT_IN_REMAINDER = int (BUILT_IN_REMAINDER),
CFN_BUILT_IN_REMAINDERF = int (BUILT_IN_REMAINDERF),
CFN_BUILT_IN_REMAINDERL = int (BUILT_IN_REMAINDERL),
CFN_BUILT_IN_REMQUO = int (BUILT_IN_REMQUO),
CFN_BUILT_IN_REMQUOF = int (BUILT_IN_REMQUOF),
CFN_BUILT_IN_REMQUOL = int (BUILT_IN_REMQUOL),
CFN_BUILT_IN_RINT = int (BUILT_IN_RINT),
CFN_BUILT_IN_RINTF = int (BUILT_IN_RINTF),
CFN_BUILT_IN_RINTL = int (BUILT_IN_RINTL),

CFN_BUILT_IN_RINTF16 = int (BUILT_IN_RINTF16), CFN_BUILT_IN_RINTF32 = int (BUILT_IN_RINTF32), CFN_BUILT_IN_RINTF64 = int (BUILT_IN_RINTF64), CFN_BUILT_IN_RINTF128 = int (BUILT_IN_RINTF128), CFN_BUILT_IN_RINTF32X = int (BUILT_IN_RINTF32X), CFN_BUILT_IN_RINTF64X = int (BUILT_IN_RINTF64X), CFN_BUILT_IN_RINTF128X = int (BUILT_IN_RINTF128X),

CFN_BUILT_IN_ROUNDEVEN = int (BUILT_IN_ROUNDEVEN),
CFN_BUILT_IN_ROUNDEVENF = int (BUILT_IN_ROUNDEVENF),
CFN_BUILT_IN_ROUNDEVENL = int (BUILT_IN_ROUNDEVENL),
CFN_BUILT_IN_ROUND = int (BUILT_IN_ROUND),
CFN_BUILT_IN_ROUNDF = int (BUILT_IN_ROUNDF),
CFN_BUILT_IN_ROUNDL = int (BUILT_IN_ROUNDL),

CFN_BUILT_IN_ROUNDF16 = int (BUILT_IN_ROUNDF16), CFN_BUILT_IN_ROUNDF32 = int (BUILT_IN_ROUNDF32), CFN_BUILT_IN_ROUNDF64 = int (BUILT_IN_ROUNDF64), CFN_BUILT_IN_ROUNDF128 = int (BUILT_IN_ROUNDF128), CFN_BUILT_IN_ROUNDF32X = int (BUILT_IN_ROUNDF32X), CFN_BUILT_IN_ROUNDF64X = int (BUILT_IN_ROUNDF64X), CFN_BUILT_IN_ROUNDF128X = int (BUILT_IN_ROUNDF128X),


CFN_BUILT_IN_ROUNDEVENF16 = int (BUILT_IN_ROUNDEVENF16), CFN_BUILT_IN_ROUNDEVENF32 = int (BUILT_IN_ROUNDEVENF32), CFN_BUILT_IN_ROUNDEVENF64 = int (BUILT_IN_ROUNDEVENF64), CFN_BUILT_IN_ROUNDEVENF128 = int (BUILT_IN_ROUNDEVENF128), CFN_BUILT_IN_ROUNDEVENF32X = int (BUILT_IN_ROUNDEVENF32X), CFN_BUILT_IN_ROUNDEVENF64X = int (BUILT_IN_ROUNDEVENF64X), CFN_BUILT_IN_ROUNDEVENF128X = int (BUILT_IN_ROUNDEVENF128X),

CFN_BUILT_IN_SCALB = int (BUILT_IN_SCALB),
CFN_BUILT_IN_SCALBF = int (BUILT_IN_SCALBF),
CFN_BUILT_IN_SCALBL = int (BUILT_IN_SCALBL),
CFN_BUILT_IN_SCALBLN = int (BUILT_IN_SCALBLN),
CFN_BUILT_IN_SCALBLNF = int (BUILT_IN_SCALBLNF),
CFN_BUILT_IN_SCALBLNL = int (BUILT_IN_SCALBLNL),
CFN_BUILT_IN_SCALBN = int (BUILT_IN_SCALBN),
CFN_BUILT_IN_SCALBNF = int (BUILT_IN_SCALBNF),
CFN_BUILT_IN_SCALBNL = int (BUILT_IN_SCALBNL),
CFN_BUILT_IN_SIGNBIT = int (BUILT_IN_SIGNBIT),
CFN_BUILT_IN_SIGNBITF = int (BUILT_IN_SIGNBITF),
CFN_BUILT_IN_SIGNBITL = int (BUILT_IN_SIGNBITL),
CFN_BUILT_IN_SIGNBITD32 = int (BUILT_IN_SIGNBITD32),
CFN_BUILT_IN_SIGNBITD64 = int (BUILT_IN_SIGNBITD64),
CFN_BUILT_IN_SIGNBITD128 = int (BUILT_IN_SIGNBITD128),
CFN_BUILT_IN_SIGNIFICAND = int (BUILT_IN_SIGNIFICAND),
CFN_BUILT_IN_SIGNIFICANDF = int (BUILT_IN_SIGNIFICANDF),
CFN_BUILT_IN_SIGNIFICANDL = int (BUILT_IN_SIGNIFICANDL),
CFN_BUILT_IN_SIN = int (BUILT_IN_SIN),
CFN_BUILT_IN_SINCOS = int (BUILT_IN_SINCOS),
CFN_BUILT_IN_SINCOSF = int (BUILT_IN_SINCOSF),
CFN_BUILT_IN_SINCOSL = int (BUILT_IN_SINCOSL),
CFN_BUILT_IN_SINF = int (BUILT_IN_SINF),
CFN_BUILT_IN_SINH = int (BUILT_IN_SINH),
CFN_BUILT_IN_SINHF = int (BUILT_IN_SINHF),
CFN_BUILT_IN_SINHL = int (BUILT_IN_SINHL),
CFN_BUILT_IN_SINL = int (BUILT_IN_SINL),
CFN_BUILT_IN_SQRT = int (BUILT_IN_SQRT),
CFN_BUILT_IN_SQRTF = int (BUILT_IN_SQRTF),
CFN_BUILT_IN_SQRTL = int (BUILT_IN_SQRTL),

CFN_BUILT_IN_SQRTF16 = int (BUILT_IN_SQRTF16), CFN_BUILT_IN_SQRTF32 = int (BUILT_IN_SQRTF32), CFN_BUILT_IN_SQRTF64 = int (BUILT_IN_SQRTF64), CFN_BUILT_IN_SQRTF128 = int (BUILT_IN_SQRTF128), CFN_BUILT_IN_SQRTF32X = int (BUILT_IN_SQRTF32X), CFN_BUILT_IN_SQRTF64X = int (BUILT_IN_SQRTF64X), CFN_BUILT_IN_SQRTF128X = int (BUILT_IN_SQRTF128X),

CFN_BUILT_IN_TAN = int (BUILT_IN_TAN),
CFN_BUILT_IN_TANF = int (BUILT_IN_TANF),
CFN_BUILT_IN_TANH = int (BUILT_IN_TANH),
CFN_BUILT_IN_TANHF = int (BUILT_IN_TANHF),
CFN_BUILT_IN_TANHL = int (BUILT_IN_TANHL),
CFN_BUILT_IN_TANL = int (BUILT_IN_TANL),
CFN_BUILT_IN_TGAMMA = int (BUILT_IN_TGAMMA),
CFN_BUILT_IN_TGAMMAF = int (BUILT_IN_TGAMMAF),
CFN_BUILT_IN_TGAMMAL = int (BUILT_IN_TGAMMAL),
CFN_BUILT_IN_TRUNC = int (BUILT_IN_TRUNC),
CFN_BUILT_IN_TRUNCF = int (BUILT_IN_TRUNCF),
CFN_BUILT_IN_TRUNCL = int (BUILT_IN_TRUNCL),

CFN_BUILT_IN_TRUNCF16 = int (BUILT_IN_TRUNCF16), CFN_BUILT_IN_TRUNCF32 = int (BUILT_IN_TRUNCF32), CFN_BUILT_IN_TRUNCF64 = int (BUILT_IN_TRUNCF64), CFN_BUILT_IN_TRUNCF128 = int (BUILT_IN_TRUNCF128), CFN_BUILT_IN_TRUNCF32X = int (BUILT_IN_TRUNCF32X), CFN_BUILT_IN_TRUNCF64X = int (BUILT_IN_TRUNCF64X), CFN_BUILT_IN_TRUNCF128X = int (BUILT_IN_TRUNCF128X),

CFN_BUILT_IN_Y0 = int (BUILT_IN_Y0),
CFN_BUILT_IN_Y0F = int (BUILT_IN_Y0F),
CFN_BUILT_IN_Y0L = int (BUILT_IN_Y0L),
CFN_BUILT_IN_Y1 = int (BUILT_IN_Y1),
CFN_BUILT_IN_Y1F = int (BUILT_IN_Y1F),
CFN_BUILT_IN_Y1L = int (BUILT_IN_Y1L),
CFN_BUILT_IN_YN = int (BUILT_IN_YN),
CFN_BUILT_IN_YNF = int (BUILT_IN_YNF),
CFN_BUILT_IN_YNL = int (BUILT_IN_YNL),


CFN_BUILT_IN_CABS = int (BUILT_IN_CABS),
CFN_BUILT_IN_CABSF = int (BUILT_IN_CABSF),
CFN_BUILT_IN_CABSL = int (BUILT_IN_CABSL),
CFN_BUILT_IN_CACOS = int (BUILT_IN_CACOS),
CFN_BUILT_IN_CACOSF = int (BUILT_IN_CACOSF),
CFN_BUILT_IN_CACOSH = int (BUILT_IN_CACOSH),
CFN_BUILT_IN_CACOSHF = int (BUILT_IN_CACOSHF),
CFN_BUILT_IN_CACOSHL = int (BUILT_IN_CACOSHL),
CFN_BUILT_IN_CACOSL = int (BUILT_IN_CACOSL),
CFN_BUILT_IN_CARG = int (BUILT_IN_CARG),
CFN_BUILT_IN_CARGF = int (BUILT_IN_CARGF),
CFN_BUILT_IN_CARGL = int (BUILT_IN_CARGL),
CFN_BUILT_IN_CASIN = int (BUILT_IN_CASIN),
CFN_BUILT_IN_CASINF = int (BUILT_IN_CASINF),
CFN_BUILT_IN_CASINH = int (BUILT_IN_CASINH),
CFN_BUILT_IN_CASINHF = int (BUILT_IN_CASINHF),
CFN_BUILT_IN_CASINHL = int (BUILT_IN_CASINHL),
CFN_BUILT_IN_CASINL = int (BUILT_IN_CASINL),
CFN_BUILT_IN_CATAN = int (BUILT_IN_CATAN),
CFN_BUILT_IN_CATANF = int (BUILT_IN_CATANF),
CFN_BUILT_IN_CATANH = int (BUILT_IN_CATANH),
CFN_BUILT_IN_CATANHF = int (BUILT_IN_CATANHF),
CFN_BUILT_IN_CATANHL = int (BUILT_IN_CATANHL),
CFN_BUILT_IN_CATANL = int (BUILT_IN_CATANL),
CFN_BUILT_IN_CCOS = int (BUILT_IN_CCOS),
CFN_BUILT_IN_CCOSF = int (BUILT_IN_CCOSF),
CFN_BUILT_IN_CCOSH = int (BUILT_IN_CCOSH),
CFN_BUILT_IN_CCOSHF = int (BUILT_IN_CCOSHF),
CFN_BUILT_IN_CCOSHL = int (BUILT_IN_CCOSHL),
CFN_BUILT_IN_CCOSL = int (BUILT_IN_CCOSL),
CFN_BUILT_IN_CEXP = int (BUILT_IN_CEXP),
CFN_BUILT_IN_CEXPF = int (BUILT_IN_CEXPF),
CFN_BUILT_IN_CEXPL = int (BUILT_IN_CEXPL),
CFN_BUILT_IN_CEXPI = int (BUILT_IN_CEXPI),
CFN_BUILT_IN_CEXPIF = int (BUILT_IN_CEXPIF),
CFN_BUILT_IN_CEXPIL = int (BUILT_IN_CEXPIL),
CFN_BUILT_IN_CIMAG = int (BUILT_IN_CIMAG),
CFN_BUILT_IN_CIMAGF = int (BUILT_IN_CIMAGF),
CFN_BUILT_IN_CIMAGL = int (BUILT_IN_CIMAGL),
CFN_BUILT_IN_CLOG = int (BUILT_IN_CLOG),
CFN_BUILT_IN_CLOGF = int (BUILT_IN_CLOGF),
CFN_BUILT_IN_CLOGL = int (BUILT_IN_CLOGL),
CFN_BUILT_IN_CLOG10 = int (BUILT_IN_CLOG10),
CFN_BUILT_IN_CLOG10F = int (BUILT_IN_CLOG10F),
CFN_BUILT_IN_CLOG10L = int (BUILT_IN_CLOG10L),
CFN_BUILT_IN_CONJ = int (BUILT_IN_CONJ),
CFN_BUILT_IN_CONJF = int (BUILT_IN_CONJF),
CFN_BUILT_IN_CONJL = int (BUILT_IN_CONJL),
CFN_BUILT_IN_CPOW = int (BUILT_IN_CPOW),
CFN_BUILT_IN_CPOWF = int (BUILT_IN_CPOWF),
CFN_BUILT_IN_CPOWL = int (BUILT_IN_CPOWL),
CFN_BUILT_IN_CPROJ = int (BUILT_IN_CPROJ),
CFN_BUILT_IN_CPROJF = int (BUILT_IN_CPROJF),
CFN_BUILT_IN_CPROJL = int (BUILT_IN_CPROJL),
CFN_BUILT_IN_CREAL = int (BUILT_IN_CREAL),
CFN_BUILT_IN_CREALF = int (BUILT_IN_CREALF),
CFN_BUILT_IN_CREALL = int (BUILT_IN_CREALL),
CFN_BUILT_IN_CSIN = int (BUILT_IN_CSIN),
CFN_BUILT_IN_CSINF = int (BUILT_IN_CSINF),
CFN_BUILT_IN_CSINH = int (BUILT_IN_CSINH),
CFN_BUILT_IN_CSINHF = int (BUILT_IN_CSINHF),
CFN_BUILT_IN_CSINHL = int (BUILT_IN_CSINHL),
CFN_BUILT_IN_CSINL = int (BUILT_IN_CSINL),
CFN_BUILT_IN_CSQRT = int (BUILT_IN_CSQRT),
CFN_BUILT_IN_CSQRTF = int (BUILT_IN_CSQRTF),
CFN_BUILT_IN_CSQRTL = int (BUILT_IN_CSQRTL),
CFN_BUILT_IN_CTAN = int (BUILT_IN_CTAN),
CFN_BUILT_IN_CTANF = int (BUILT_IN_CTANF),
CFN_BUILT_IN_CTANH = int (BUILT_IN_CTANH),
CFN_BUILT_IN_CTANHF = int (BUILT_IN_CTANHF),
CFN_BUILT_IN_CTANHL = int (BUILT_IN_CTANHL),
CFN_BUILT_IN_CTANL = int (BUILT_IN_CTANL),


CFN_BUILT_IN_BCMP = int (BUILT_IN_BCMP),
CFN_BUILT_IN_BCOPY = int (BUILT_IN_BCOPY),
CFN_BUILT_IN_BZERO = int (BUILT_IN_BZERO),
CFN_BUILT_IN_INDEX = int (BUILT_IN_INDEX),
CFN_BUILT_IN_MEMCHR = int (BUILT_IN_MEMCHR),
CFN_BUILT_IN_MEMCMP = int (BUILT_IN_MEMCMP),
CFN_BUILT_IN_MEMCPY = int (BUILT_IN_MEMCPY),
CFN_BUILT_IN_MEMMOVE = int (BUILT_IN_MEMMOVE),
CFN_BUILT_IN_MEMPCPY = int (BUILT_IN_MEMPCPY),
CFN_BUILT_IN_MEMSET = int (BUILT_IN_MEMSET),
CFN_BUILT_IN_RINDEX = int (BUILT_IN_RINDEX),
CFN_BUILT_IN_STPCPY = int (BUILT_IN_STPCPY),
CFN_BUILT_IN_STPNCPY = int (BUILT_IN_STPNCPY),
CFN_BUILT_IN_STRCASECMP = int (BUILT_IN_STRCASECMP),
CFN_BUILT_IN_STRCAT = int (BUILT_IN_STRCAT),
CFN_BUILT_IN_STRCHR = int (BUILT_IN_STRCHR),
CFN_BUILT_IN_STRCMP = int (BUILT_IN_STRCMP),
CFN_BUILT_IN_STRCPY = int (BUILT_IN_STRCPY),
CFN_BUILT_IN_STRCSPN = int (BUILT_IN_STRCSPN),
CFN_BUILT_IN_STRDUP = int (BUILT_IN_STRDUP),
CFN_BUILT_IN_STRNDUP = int (BUILT_IN_STRNDUP),
CFN_BUILT_IN_STRLEN = int (BUILT_IN_STRLEN),
CFN_BUILT_IN_STRNCASECMP = int (BUILT_IN_STRNCASECMP),
CFN_BUILT_IN_STRNCAT = int (BUILT_IN_STRNCAT),
CFN_BUILT_IN_STRNCMP = int (BUILT_IN_STRNCMP),
CFN_BUILT_IN_STRNCPY = int (BUILT_IN_STRNCPY),
CFN_BUILT_IN_STRNLEN = int (BUILT_IN_STRNLEN),
CFN_BUILT_IN_STRPBRK = int (BUILT_IN_STRPBRK),
CFN_BUILT_IN_STRRCHR = int (BUILT_IN_STRRCHR),
CFN_BUILT_IN_STRSPN = int (BUILT_IN_STRSPN),
CFN_BUILT_IN_STRSTR = int (BUILT_IN_STRSTR),


CFN_BUILT_IN_FPRINTF = int (BUILT_IN_FPRINTF),
CFN_BUILT_IN_FPRINTF_UNLOCKED = int (BUILT_IN_FPRINTF_UNLOCKED),
CFN_BUILT_IN_PUTC = int (BUILT_IN_PUTC),
CFN_BUILT_IN_PUTC_UNLOCKED = int (BUILT_IN_PUTC_UNLOCKED),
CFN_BUILT_IN_FPUTC = int (BUILT_IN_FPUTC),
CFN_BUILT_IN_FPUTC_UNLOCKED = int (BUILT_IN_FPUTC_UNLOCKED),
CFN_BUILT_IN_FPUTS = int (BUILT_IN_FPUTS),
CFN_BUILT_IN_FPUTS_UNLOCKED = int (BUILT_IN_FPUTS_UNLOCKED),
CFN_BUILT_IN_FSCANF = int (BUILT_IN_FSCANF),
CFN_BUILT_IN_FWRITE = int (BUILT_IN_FWRITE),
CFN_BUILT_IN_FWRITE_UNLOCKED = int (BUILT_IN_FWRITE_UNLOCKED),
CFN_BUILT_IN_PRINTF = int (BUILT_IN_PRINTF),
CFN_BUILT_IN_PRINTF_UNLOCKED = int (BUILT_IN_PRINTF_UNLOCKED),
CFN_BUILT_IN_PUTCHAR = int (BUILT_IN_PUTCHAR),
CFN_BUILT_IN_PUTCHAR_UNLOCKED = int (BUILT_IN_PUTCHAR_UNLOCKED),
CFN_BUILT_IN_PUTS = int (BUILT_IN_PUTS),
CFN_BUILT_IN_PUTS_UNLOCKED = int (BUILT_IN_PUTS_UNLOCKED),
CFN_BUILT_IN_SCANF = int (BUILT_IN_SCANF),
CFN_BUILT_IN_SNPRINTF = int (BUILT_IN_SNPRINTF),

CFN_BUILT_IN_SPRINTF = int (BUILT_IN_SPRINTF),
CFN_BUILT_IN_SSCANF = int (BUILT_IN_SSCANF),
CFN_BUILT_IN_VFPRINTF = int (BUILT_IN_VFPRINTF),
CFN_BUILT_IN_VFSCANF = int (BUILT_IN_VFSCANF),
CFN_BUILT_IN_VPRINTF = int (BUILT_IN_VPRINTF),
CFN_BUILT_IN_VSCANF = int (BUILT_IN_VSCANF),
CFN_BUILT_IN_VSNPRINTF = int (BUILT_IN_VSNPRINTF),
CFN_BUILT_IN_VSPRINTF = int (BUILT_IN_VSPRINTF),
CFN_BUILT_IN_VSSCANF = int (BUILT_IN_VSSCANF),


CFN_BUILT_IN_ISALNUM = int (BUILT_IN_ISALNUM),
CFN_BUILT_IN_ISALPHA = int (BUILT_IN_ISALPHA),
CFN_BUILT_IN_ISASCII = int (BUILT_IN_ISASCII),
CFN_BUILT_IN_ISBLANK = int (BUILT_IN_ISBLANK),
CFN_BUILT_IN_ISCNTRL = int (BUILT_IN_ISCNTRL),
CFN_BUILT_IN_ISDIGIT = int (BUILT_IN_ISDIGIT),
CFN_BUILT_IN_ISGRAPH = int (BUILT_IN_ISGRAPH),
CFN_BUILT_IN_ISLOWER = int (BUILT_IN_ISLOWER),
CFN_BUILT_IN_ISPRINT = int (BUILT_IN_ISPRINT),
CFN_BUILT_IN_ISPUNCT = int (BUILT_IN_ISPUNCT),
CFN_BUILT_IN_ISSPACE = int (BUILT_IN_ISSPACE),
CFN_BUILT_IN_ISUPPER = int (BUILT_IN_ISUPPER),
CFN_BUILT_IN_ISXDIGIT = int (BUILT_IN_ISXDIGIT),
CFN_BUILT_IN_TOASCII = int (BUILT_IN_TOASCII),
CFN_BUILT_IN_TOLOWER = int (BUILT_IN_TOLOWER),
CFN_BUILT_IN_TOUPPER = int (BUILT_IN_TOUPPER),


CFN_BUILT_IN_ISWALNUM = int (BUILT_IN_ISWALNUM),
CFN_BUILT_IN_ISWALPHA = int (BUILT_IN_ISWALPHA),
CFN_BUILT_IN_ISWBLANK = int (BUILT_IN_ISWBLANK),
CFN_BUILT_IN_ISWCNTRL = int (BUILT_IN_ISWCNTRL),
CFN_BUILT_IN_ISWDIGIT = int (BUILT_IN_ISWDIGIT),
CFN_BUILT_IN_ISWGRAPH = int (BUILT_IN_ISWGRAPH),
CFN_BUILT_IN_ISWLOWER = int (BUILT_IN_ISWLOWER),
CFN_BUILT_IN_ISWPRINT = int (BUILT_IN_ISWPRINT),
CFN_BUILT_IN_ISWPUNCT = int (BUILT_IN_ISWPUNCT),
CFN_BUILT_IN_ISWSPACE = int (BUILT_IN_ISWSPACE),
CFN_BUILT_IN_ISWUPPER = int (BUILT_IN_ISWUPPER),
CFN_BUILT_IN_ISWXDIGIT = int (BUILT_IN_ISWXDIGIT),
CFN_BUILT_IN_TOWLOWER = int (BUILT_IN_TOWLOWER),
CFN_BUILT_IN_TOWUPPER = int (BUILT_IN_TOWUPPER),


CFN_BUILT_IN_ADD_OVERFLOW = int (BUILT_IN_ADD_OVERFLOW),
CFN_BUILT_IN_SUB_OVERFLOW = int (BUILT_IN_SUB_OVERFLOW),
CFN_BUILT_IN_MUL_OVERFLOW = int (BUILT_IN_MUL_OVERFLOW),
CFN_BUILT_IN_ADD_OVERFLOW_P = int (BUILT_IN_ADD_OVERFLOW_P),
CFN_BUILT_IN_SUB_OVERFLOW_P = int (BUILT_IN_SUB_OVERFLOW_P),
CFN_BUILT_IN_MUL_OVERFLOW_P = int (BUILT_IN_MUL_OVERFLOW_P),

CFN_BUILT_IN_SADD_OVERFLOW = int (BUILT_IN_SADD_OVERFLOW),
CFN_BUILT_IN_SADDL_OVERFLOW = int (BUILT_IN_SADDL_OVERFLOW),
CFN_BUILT_IN_SADDLL_OVERFLOW = int (BUILT_IN_SADDLL_OVERFLOW),
CFN_BUILT_IN_SSUB_OVERFLOW = int (BUILT_IN_SSUB_OVERFLOW),
CFN_BUILT_IN_SSUBL_OVERFLOW = int (BUILT_IN_SSUBL_OVERFLOW),
CFN_BUILT_IN_SSUBLL_OVERFLOW = int (BUILT_IN_SSUBLL_OVERFLOW),
CFN_BUILT_IN_SMUL_OVERFLOW = int (BUILT_IN_SMUL_OVERFLOW),
CFN_BUILT_IN_SMULL_OVERFLOW = int (BUILT_IN_SMULL_OVERFLOW),
CFN_BUILT_IN_SMULLL_OVERFLOW = int (BUILT_IN_SMULLL_OVERFLOW),
CFN_BUILT_IN_UADD_OVERFLOW = int (BUILT_IN_UADD_OVERFLOW),
CFN_BUILT_IN_UADDL_OVERFLOW = int (BUILT_IN_UADDL_OVERFLOW),
CFN_BUILT_IN_UADDLL_OVERFLOW = int (BUILT_IN_UADDLL_OVERFLOW),
CFN_BUILT_IN_USUB_OVERFLOW = int (BUILT_IN_USUB_OVERFLOW),
CFN_BUILT_IN_USUBL_OVERFLOW = int (BUILT_IN_USUBL_OVERFLOW),
CFN_BUILT_IN_USUBLL_OVERFLOW = int (BUILT_IN_USUBLL_OVERFLOW),
CFN_BUILT_IN_UMUL_OVERFLOW = int (BUILT_IN_UMUL_OVERFLOW),
CFN_BUILT_IN_UMULL_OVERFLOW = int (BUILT_IN_UMULL_OVERFLOW),
CFN_BUILT_IN_UMULLL_OVERFLOW = int (BUILT_IN_UMULLL_OVERFLOW),


CFN_BUILT_IN_ABORT = int (BUILT_IN_ABORT),
CFN_BUILT_IN_ABS = int (BUILT_IN_ABS),
CFN_BUILT_IN_AGGREGATE_INCOMING_ADDRESS = int (BUILT_IN_AGGREGATE_INCOMING_ADDRESS),
CFN_BUILT_IN_ALLOCA = int (BUILT_IN_ALLOCA),
CFN_BUILT_IN_APPLY = int (BUILT_IN_APPLY),
CFN_BUILT_IN_APPLY_ARGS = int (BUILT_IN_APPLY_ARGS),
CFN_BUILT_IN_BSWAP16 = int (BUILT_IN_BSWAP16),
CFN_BUILT_IN_BSWAP32 = int (BUILT_IN_BSWAP32),
CFN_BUILT_IN_BSWAP64 = int (BUILT_IN_BSWAP64),
CFN_BUILT_IN_BSWAP128 = int (BUILT_IN_BSWAP128),

CFN_BUILT_IN_CLEAR_CACHE = int (BUILT_IN_CLEAR_CACHE),

CFN_BUILT_IN_CALLOC = int (BUILT_IN_CALLOC),
CFN_BUILT_IN_CLASSIFY_TYPE = int (BUILT_IN_CLASSIFY_TYPE),
CFN_BUILT_IN_CLZ = int (BUILT_IN_CLZ),
CFN_BUILT_IN_CLZIMAX = int (BUILT_IN_CLZIMAX),
CFN_BUILT_IN_CLZL = int (BUILT_IN_CLZL),
CFN_BUILT_IN_CLZLL = int (BUILT_IN_CLZLL),
CFN_BUILT_IN_CONSTANT_P = int (BUILT_IN_CONSTANT_P),
CFN_BUILT_IN_CTZ = int (BUILT_IN_CTZ),
CFN_BUILT_IN_CTZIMAX = int (BUILT_IN_CTZIMAX),
CFN_BUILT_IN_CTZL = int (BUILT_IN_CTZL),
CFN_BUILT_IN_CTZLL = int (BUILT_IN_CTZLL),
CFN_BUILT_IN_CLRSB = int (BUILT_IN_CLRSB),
CFN_BUILT_IN_CLRSBIMAX = int (BUILT_IN_CLRSBIMAX),
CFN_BUILT_IN_CLRSBL = int (BUILT_IN_CLRSBL),
CFN_BUILT_IN_CLRSBLL = int (BUILT_IN_CLRSBLL),
CFN_BUILT_IN_DCGETTEXT = int (BUILT_IN_DCGETTEXT),
CFN_BUILT_IN_DGETTEXT = int (BUILT_IN_DGETTEXT),
CFN_BUILT_IN_DWARF_CFA = int (BUILT_IN_DWARF_CFA),
CFN_BUILT_IN_DWARF_SP_COLUMN = int (BUILT_IN_DWARF_SP_COLUMN),
CFN_BUILT_IN_EH_RETURN = int (BUILT_IN_EH_RETURN),
CFN_BUILT_IN_EH_RETURN_DATA_REGNO = int (BUILT_IN_EH_RETURN_DATA_REGNO),
CFN_BUILT_IN_EXECL = int (BUILT_IN_EXECL),
CFN_BUILT_IN_EXECLP = int (BUILT_IN_EXECLP),
CFN_BUILT_IN_EXECLE = int (BUILT_IN_EXECLE),
CFN_BUILT_IN_EXECV = int (BUILT_IN_EXECV),
CFN_BUILT_IN_EXECVP = int (BUILT_IN_EXECVP),
CFN_BUILT_IN_EXECVE = int (BUILT_IN_EXECVE),
CFN_BUILT_IN_EXIT = int (BUILT_IN_EXIT),
CFN_BUILT_IN_EXPECT = int (BUILT_IN_EXPECT),
CFN_BUILT_IN_EXPECT_WITH_PROBABILITY = int (BUILT_IN_EXPECT_WITH_PROBABILITY),
CFN_BUILT_IN_ASSUME_ALIGNED = int (BUILT_IN_ASSUME_ALIGNED),
CFN_BUILT_IN_EXTEND_POINTER = int (BUILT_IN_EXTEND_POINTER),
CFN_BUILT_IN_EXTRACT_RETURN_ADDR = int (BUILT_IN_EXTRACT_RETURN_ADDR),
CFN_BUILT_IN_FFS = int (BUILT_IN_FFS),
CFN_BUILT_IN_FFSIMAX = int (BUILT_IN_FFSIMAX),
CFN_BUILT_IN_FFSL = int (BUILT_IN_FFSL),
CFN_BUILT_IN_FFSLL = int (BUILT_IN_FFSLL),
CFN_BUILT_IN_FORK = int (BUILT_IN_FORK),
CFN_BUILT_IN_FRAME_ADDRESS = int (BUILT_IN_FRAME_ADDRESS),

CFN_BUILT_IN_FREE = int (BUILT_IN_FREE),
CFN_BUILT_IN_FROB_RETURN_ADDR = int (BUILT_IN_FROB_RETURN_ADDR),
CFN_BUILT_IN_GETTEXT = int (BUILT_IN_GETTEXT),
CFN_BUILT_IN_IMAXABS = int (BUILT_IN_IMAXABS),
CFN_BUILT_IN_INIT_DWARF_REG_SIZES = int (BUILT_IN_INIT_DWARF_REG_SIZES),
CFN_BUILT_IN_FINITE = int (BUILT_IN_FINITE),
CFN_BUILT_IN_FINITEF = int (BUILT_IN_FINITEF),
CFN_BUILT_IN_FINITEL = int (BUILT_IN_FINITEL),
CFN_BUILT_IN_FINITED32 = int (BUILT_IN_FINITED32),
CFN_BUILT_IN_FINITED64 = int (BUILT_IN_FINITED64),
CFN_BUILT_IN_FINITED128 = int (BUILT_IN_FINITED128),
CFN_BUILT_IN_FPCLASSIFY = int (BUILT_IN_FPCLASSIFY),
CFN_BUILT_IN_ISFINITE = int (BUILT_IN_ISFINITE),
CFN_BUILT_IN_ISINF_SIGN = int (BUILT_IN_ISINF_SIGN),
CFN_BUILT_IN_ISINF = int (BUILT_IN_ISINF),
CFN_BUILT_IN_ISINFF = int (BUILT_IN_ISINFF),
CFN_BUILT_IN_ISINFL = int (BUILT_IN_ISINFL),
CFN_BUILT_IN_ISINFD32 = int (BUILT_IN_ISINFD32),
CFN_BUILT_IN_ISINFD64 = int (BUILT_IN_ISINFD64),
CFN_BUILT_IN_ISINFD128 = int (BUILT_IN_ISINFD128),
CFN_BUILT_IN_ISNAN = int (BUILT_IN_ISNAN),
CFN_BUILT_IN_ISNANF = int (BUILT_IN_ISNANF),
CFN_BUILT_IN_ISNANL = int (BUILT_IN_ISNANL),
CFN_BUILT_IN_ISNAND32 = int (BUILT_IN_ISNAND32),
CFN_BUILT_IN_ISNAND64 = int (BUILT_IN_ISNAND64),
CFN_BUILT_IN_ISNAND128 = int (BUILT_IN_ISNAND128),
CFN_BUILT_IN_ISNORMAL = int (BUILT_IN_ISNORMAL),
CFN_BUILT_IN_ISGREATER = int (BUILT_IN_ISGREATER),
CFN_BUILT_IN_ISGREATEREQUAL = int (BUILT_IN_ISGREATEREQUAL),
CFN_BUILT_IN_ISLESS = int (BUILT_IN_ISLESS),
CFN_BUILT_IN_ISLESSEQUAL = int (BUILT_IN_ISLESSEQUAL),
CFN_BUILT_IN_ISLESSGREATER = int (BUILT_IN_ISLESSGREATER),
CFN_BUILT_IN_ISUNORDERED = int (BUILT_IN_ISUNORDERED),
CFN_BUILT_IN_LABS = int (BUILT_IN_LABS),
CFN_BUILT_IN_LLABS = int (BUILT_IN_LLABS),
CFN_BUILT_IN_LONGJMP = int (BUILT_IN_LONGJMP),

CFN_BUILT_IN_MALLOC = int (BUILT_IN_MALLOC),
CFN_BUILT_IN_NEXT_ARG = int (BUILT_IN_NEXT_ARG),
CFN_BUILT_IN_PARITY = int (BUILT_IN_PARITY),
CFN_BUILT_IN_PARITYIMAX = int (BUILT_IN_PARITYIMAX),
CFN_BUILT_IN_PARITYL = int (BUILT_IN_PARITYL),
CFN_BUILT_IN_PARITYLL = int (BUILT_IN_PARITYLL),
CFN_BUILT_IN_POPCOUNT = int (BUILT_IN_POPCOUNT),
CFN_BUILT_IN_POPCOUNTIMAX = int (BUILT_IN_POPCOUNTIMAX),
CFN_BUILT_IN_POPCOUNTL = int (BUILT_IN_POPCOUNTL),
CFN_BUILT_IN_POPCOUNTLL = int (BUILT_IN_POPCOUNTLL),
CFN_BUILT_IN_POSIX_MEMALIGN = int (BUILT_IN_POSIX_MEMALIGN),
CFN_BUILT_IN_PREFETCH = int (BUILT_IN_PREFETCH),
CFN_BUILT_IN_REALLOC = int (BUILT_IN_REALLOC),
CFN_BUILT_IN_RETURN = int (BUILT_IN_RETURN),
CFN_BUILT_IN_RETURN_ADDRESS = int (BUILT_IN_RETURN_ADDRESS),
CFN_BUILT_IN_SAVEREGS = int (BUILT_IN_SAVEREGS),
CFN_BUILT_IN_SETJMP = int (BUILT_IN_SETJMP),
CFN_BUILT_IN_STRFMON = int (BUILT_IN_STRFMON),
CFN_BUILT_IN_STRFTIME = int (BUILT_IN_STRFTIME),
CFN_BUILT_IN_TRAP = int (BUILT_IN_TRAP),
CFN_BUILT_IN_UNREACHABLE = int (BUILT_IN_UNREACHABLE),
CFN_BUILT_IN_UNWIND_INIT = int (BUILT_IN_UNWIND_INIT),
CFN_BUILT_IN_UPDATE_SETJMP_BUF = int (BUILT_IN_UPDATE_SETJMP_BUF),
CFN_BUILT_IN_VA_COPY = int (BUILT_IN_VA_COPY),
CFN_BUILT_IN_VA_END = int (BUILT_IN_VA_END),
CFN_BUILT_IN_VA_START = int (BUILT_IN_VA_START),
CFN_BUILT_IN_VA_ARG_PACK = int (BUILT_IN_VA_ARG_PACK),
CFN_BUILT_IN_VA_ARG_PACK_LEN = int (BUILT_IN_VA_ARG_PACK_LEN),
CFN_BUILT_IN__EXIT = int (BUILT_IN__EXIT),
CFN_BUILT_IN__EXIT2 = int (BUILT_IN__EXIT2),


CFN_BUILT_IN_INIT_TRAMPOLINE = int (BUILT_IN_INIT_TRAMPOLINE),
CFN_BUILT_IN_INIT_HEAP_TRAMPOLINE = int (BUILT_IN_INIT_HEAP_TRAMPOLINE),
CFN_BUILT_IN_ADJUST_TRAMPOLINE = int (BUILT_IN_ADJUST_TRAMPOLINE),
CFN_BUILT_IN_INIT_DESCRIPTOR = int (BUILT_IN_INIT_DESCRIPTOR),
CFN_BUILT_IN_ADJUST_DESCRIPTOR = int (BUILT_IN_ADJUST_DESCRIPTOR),
CFN_BUILT_IN_NONLOCAL_GOTO = int (BUILT_IN_NONLOCAL_GOTO),


CFN_BUILT_IN_SETJMP_SETUP = int (BUILT_IN_SETJMP_SETUP),
CFN_BUILT_IN_SETJMP_RECEIVER = int (BUILT_IN_SETJMP_RECEIVER),


CFN_BUILT_IN_STACK_SAVE = int (BUILT_IN_STACK_SAVE),
CFN_BUILT_IN_STACK_RESTORE = int (BUILT_IN_STACK_RESTORE),
CFN_BUILT_IN_ALLOCA_WITH_ALIGN = int (BUILT_IN_ALLOCA_WITH_ALIGN),
CFN_BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX = int (BUILT_IN_ALLOCA_WITH_ALIGN_AND_MAX),



CFN_BUILT_IN_MEMCMP_EQ = int (BUILT_IN_MEMCMP_EQ),



CFN_BUILT_IN_STRCMP_EQ = int (BUILT_IN_STRCMP_EQ),
CFN_BUILT_IN_STRNCMP_EQ = int (BUILT_IN_STRNCMP_EQ),


CFN_BUILT_IN_OBJECT_SIZE = int (BUILT_IN_OBJECT_SIZE),
CFN_BUILT_IN_MEMCPY_CHK = int (BUILT_IN_MEMCPY_CHK),
CFN_BUILT_IN_MEMMOVE_CHK = int (BUILT_IN_MEMMOVE_CHK),
CFN_BUILT_IN_MEMPCPY_CHK = int (BUILT_IN_MEMPCPY_CHK),
CFN_BUILT_IN_MEMSET_CHK = int (BUILT_IN_MEMSET_CHK),
CFN_BUILT_IN_STPCPY_CHK = int (BUILT_IN_STPCPY_CHK),
CFN_BUILT_IN_STPNCPY_CHK = int (BUILT_IN_STPNCPY_CHK),
CFN_BUILT_IN_STRCAT_CHK = int (BUILT_IN_STRCAT_CHK),
CFN_BUILT_IN_STRCPY_CHK = int (BUILT_IN_STRCPY_CHK),
CFN_BUILT_IN_STRNCAT_CHK = int (BUILT_IN_STRNCAT_CHK),
CFN_BUILT_IN_STRNCPY_CHK = int (BUILT_IN_STRNCPY_CHK),
CFN_BUILT_IN_SNPRINTF_CHK = int (BUILT_IN_SNPRINTF_CHK),
CFN_BUILT_IN_SPRINTF_CHK = int (BUILT_IN_SPRINTF_CHK),
CFN_BUILT_IN_VSNPRINTF_CHK = int (BUILT_IN_VSNPRINTF_CHK),
CFN_BUILT_IN_VSPRINTF_CHK = int (BUILT_IN_VSPRINTF_CHK),
CFN_BUILT_IN_FPRINTF_CHK = int (BUILT_IN_FPRINTF_CHK),
CFN_BUILT_IN_PRINTF_CHK = int (BUILT_IN_PRINTF_CHK),
CFN_BUILT_IN_VFPRINTF_CHK = int (BUILT_IN_VFPRINTF_CHK),
CFN_BUILT_IN_VPRINTF_CHK = int (BUILT_IN_VPRINTF_CHK),


CFN_BUILT_IN_PROFILE_FUNC_ENTER = int (BUILT_IN_PROFILE_FUNC_ENTER),

CFN_BUILT_IN_PROFILE_FUNC_EXIT = int (BUILT_IN_PROFILE_FUNC_EXIT),



CFN_BUILT_IN_THREAD_POINTER = int (BUILT_IN_THREAD_POINTER),




CFN_BUILT_IN_SET_THREAD_POINTER = int (BUILT_IN_SET_THREAD_POINTER),





CFN_BUILT_IN_EMUTLS_GET_ADDRESS = int (BUILT_IN_EMUTLS_GET_ADDRESS),




CFN_BUILT_IN_EMUTLS_REGISTER_COMMON = int (BUILT_IN_EMUTLS_REGISTER_COMMON),
# 1017 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
CFN_BUILT_IN_SPECULATION_SAFE_VALUE_N = int (BUILT_IN_SPECULATION_SAFE_VALUE_N),


CFN_BUILT_IN_SPECULATION_SAFE_VALUE_PTR = int (BUILT_IN_SPECULATION_SAFE_VALUE_PTR),


CFN_BUILT_IN_SPECULATION_SAFE_VALUE_1 = int (BUILT_IN_SPECULATION_SAFE_VALUE_1),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_2 = int (BUILT_IN_SPECULATION_SAFE_VALUE_2),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_4 = int (BUILT_IN_SPECULATION_SAFE_VALUE_4),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_8 = int (BUILT_IN_SPECULATION_SAFE_VALUE_8),

CFN_BUILT_IN_SPECULATION_SAFE_VALUE_16 = int (BUILT_IN_SPECULATION_SAFE_VALUE_16),




CFN_BUILT_IN_UNWIND_RESUME = int (BUILT_IN_UNWIND_RESUME),
CFN_BUILT_IN_CXA_END_CLEANUP = int (BUILT_IN_CXA_END_CLEANUP),
CFN_BUILT_IN_EH_POINTER = int (BUILT_IN_EH_POINTER),
CFN_BUILT_IN_EH_FILTER = int (BUILT_IN_EH_FILTER),
CFN_BUILT_IN_EH_COPY_VALUES = int (BUILT_IN_EH_COPY_VALUES),


CFN_BUILT_IN_FILE = int (BUILT_IN_FILE),
CFN_BUILT_IN_FUNCTION = int (BUILT_IN_FUNCTION),
CFN_BUILT_IN_LINE = int (BUILT_IN_LINE),


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sync-builtins.def"
CFN_BUILT_IN_SYNC_FETCH_AND_ADD_N = int (BUILT_IN_SYNC_FETCH_AND_ADD_N),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_1 = int (BUILT_IN_SYNC_FETCH_AND_ADD_1),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_2 = int (BUILT_IN_SYNC_FETCH_AND_ADD_2),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_4 = int (BUILT_IN_SYNC_FETCH_AND_ADD_4),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_8 = int (BUILT_IN_SYNC_FETCH_AND_ADD_8),

CFN_BUILT_IN_SYNC_FETCH_AND_ADD_16 = int (BUILT_IN_SYNC_FETCH_AND_ADD_16),


CFN_BUILT_IN_SYNC_FETCH_AND_SUB_N = int (BUILT_IN_SYNC_FETCH_AND_SUB_N),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_1 = int (BUILT_IN_SYNC_FETCH_AND_SUB_1),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_2 = int (BUILT_IN_SYNC_FETCH_AND_SUB_2),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_4 = int (BUILT_IN_SYNC_FETCH_AND_SUB_4),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_8 = int (BUILT_IN_SYNC_FETCH_AND_SUB_8),

CFN_BUILT_IN_SYNC_FETCH_AND_SUB_16 = int (BUILT_IN_SYNC_FETCH_AND_SUB_16),


CFN_BUILT_IN_SYNC_FETCH_AND_OR_N = int (BUILT_IN_SYNC_FETCH_AND_OR_N),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_1 = int (BUILT_IN_SYNC_FETCH_AND_OR_1),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_2 = int (BUILT_IN_SYNC_FETCH_AND_OR_2),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_4 = int (BUILT_IN_SYNC_FETCH_AND_OR_4),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_8 = int (BUILT_IN_SYNC_FETCH_AND_OR_8),

CFN_BUILT_IN_SYNC_FETCH_AND_OR_16 = int (BUILT_IN_SYNC_FETCH_AND_OR_16),


CFN_BUILT_IN_SYNC_FETCH_AND_AND_N = int (BUILT_IN_SYNC_FETCH_AND_AND_N),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_1 = int (BUILT_IN_SYNC_FETCH_AND_AND_1),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_2 = int (BUILT_IN_SYNC_FETCH_AND_AND_2),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_4 = int (BUILT_IN_SYNC_FETCH_AND_AND_4),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_8 = int (BUILT_IN_SYNC_FETCH_AND_AND_8),

CFN_BUILT_IN_SYNC_FETCH_AND_AND_16 = int (BUILT_IN_SYNC_FETCH_AND_AND_16),


CFN_BUILT_IN_SYNC_FETCH_AND_XOR_N = int (BUILT_IN_SYNC_FETCH_AND_XOR_N),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_1 = int (BUILT_IN_SYNC_FETCH_AND_XOR_1),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_2 = int (BUILT_IN_SYNC_FETCH_AND_XOR_2),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_4 = int (BUILT_IN_SYNC_FETCH_AND_XOR_4),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_8 = int (BUILT_IN_SYNC_FETCH_AND_XOR_8),

CFN_BUILT_IN_SYNC_FETCH_AND_XOR_16 = int (BUILT_IN_SYNC_FETCH_AND_XOR_16),


CFN_BUILT_IN_SYNC_FETCH_AND_NAND_N = int (BUILT_IN_SYNC_FETCH_AND_NAND_N),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_1 = int (BUILT_IN_SYNC_FETCH_AND_NAND_1),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_2 = int (BUILT_IN_SYNC_FETCH_AND_NAND_2),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_4 = int (BUILT_IN_SYNC_FETCH_AND_NAND_4),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_8 = int (BUILT_IN_SYNC_FETCH_AND_NAND_8),

CFN_BUILT_IN_SYNC_FETCH_AND_NAND_16 = int (BUILT_IN_SYNC_FETCH_AND_NAND_16),


CFN_BUILT_IN_SYNC_ADD_AND_FETCH_N = int (BUILT_IN_SYNC_ADD_AND_FETCH_N),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_1 = int (BUILT_IN_SYNC_ADD_AND_FETCH_1),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_2 = int (BUILT_IN_SYNC_ADD_AND_FETCH_2),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_4 = int (BUILT_IN_SYNC_ADD_AND_FETCH_4),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_8 = int (BUILT_IN_SYNC_ADD_AND_FETCH_8),

CFN_BUILT_IN_SYNC_ADD_AND_FETCH_16 = int (BUILT_IN_SYNC_ADD_AND_FETCH_16),


CFN_BUILT_IN_SYNC_SUB_AND_FETCH_N = int (BUILT_IN_SYNC_SUB_AND_FETCH_N),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_1 = int (BUILT_IN_SYNC_SUB_AND_FETCH_1),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_2 = int (BUILT_IN_SYNC_SUB_AND_FETCH_2),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_4 = int (BUILT_IN_SYNC_SUB_AND_FETCH_4),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_8 = int (BUILT_IN_SYNC_SUB_AND_FETCH_8),

CFN_BUILT_IN_SYNC_SUB_AND_FETCH_16 = int (BUILT_IN_SYNC_SUB_AND_FETCH_16),


CFN_BUILT_IN_SYNC_OR_AND_FETCH_N = int (BUILT_IN_SYNC_OR_AND_FETCH_N),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_1 = int (BUILT_IN_SYNC_OR_AND_FETCH_1),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_2 = int (BUILT_IN_SYNC_OR_AND_FETCH_2),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_4 = int (BUILT_IN_SYNC_OR_AND_FETCH_4),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_8 = int (BUILT_IN_SYNC_OR_AND_FETCH_8),

CFN_BUILT_IN_SYNC_OR_AND_FETCH_16 = int (BUILT_IN_SYNC_OR_AND_FETCH_16),


CFN_BUILT_IN_SYNC_AND_AND_FETCH_N = int (BUILT_IN_SYNC_AND_AND_FETCH_N),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_1 = int (BUILT_IN_SYNC_AND_AND_FETCH_1),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_2 = int (BUILT_IN_SYNC_AND_AND_FETCH_2),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_4 = int (BUILT_IN_SYNC_AND_AND_FETCH_4),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_8 = int (BUILT_IN_SYNC_AND_AND_FETCH_8),

CFN_BUILT_IN_SYNC_AND_AND_FETCH_16 = int (BUILT_IN_SYNC_AND_AND_FETCH_16),


CFN_BUILT_IN_SYNC_XOR_AND_FETCH_N = int (BUILT_IN_SYNC_XOR_AND_FETCH_N),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_1 = int (BUILT_IN_SYNC_XOR_AND_FETCH_1),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_2 = int (BUILT_IN_SYNC_XOR_AND_FETCH_2),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_4 = int (BUILT_IN_SYNC_XOR_AND_FETCH_4),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_8 = int (BUILT_IN_SYNC_XOR_AND_FETCH_8),

CFN_BUILT_IN_SYNC_XOR_AND_FETCH_16 = int (BUILT_IN_SYNC_XOR_AND_FETCH_16),


CFN_BUILT_IN_SYNC_NAND_AND_FETCH_N = int (BUILT_IN_SYNC_NAND_AND_FETCH_N),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_1 = int (BUILT_IN_SYNC_NAND_AND_FETCH_1),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_2 = int (BUILT_IN_SYNC_NAND_AND_FETCH_2),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_4 = int (BUILT_IN_SYNC_NAND_AND_FETCH_4),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_8 = int (BUILT_IN_SYNC_NAND_AND_FETCH_8),

CFN_BUILT_IN_SYNC_NAND_AND_FETCH_16 = int (BUILT_IN_SYNC_NAND_AND_FETCH_16),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_N),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_1),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_2),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_4),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_8),


CFN_BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16 = int (BUILT_IN_SYNC_BOOL_COMPARE_AND_SWAP_16),



CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_N),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_1),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_2),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_4),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_8),


CFN_BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16 = int (BUILT_IN_SYNC_VAL_COMPARE_AND_SWAP_16),



CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_N = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_N),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_1 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_1),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_2 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_2),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_4 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_4),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_8 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_8),


CFN_BUILT_IN_SYNC_LOCK_TEST_AND_SET_16 = int (BUILT_IN_SYNC_LOCK_TEST_AND_SET_16),



CFN_BUILT_IN_SYNC_LOCK_RELEASE_N = int (BUILT_IN_SYNC_LOCK_RELEASE_N),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_1 = int (BUILT_IN_SYNC_LOCK_RELEASE_1),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_2 = int (BUILT_IN_SYNC_LOCK_RELEASE_2),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_4 = int (BUILT_IN_SYNC_LOCK_RELEASE_4),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_8 = int (BUILT_IN_SYNC_LOCK_RELEASE_8),

CFN_BUILT_IN_SYNC_LOCK_RELEASE_16 = int (BUILT_IN_SYNC_LOCK_RELEASE_16),


CFN_BUILT_IN_SYNC_SYNCHRONIZE = int (BUILT_IN_SYNC_SYNCHRONIZE),




CFN_BUILT_IN_ATOMIC_TEST_AND_SET = int (BUILT_IN_ATOMIC_TEST_AND_SET),


CFN_BUILT_IN_ATOMIC_CLEAR = int (BUILT_IN_ATOMIC_CLEAR),


CFN_BUILT_IN_ATOMIC_EXCHANGE = int (BUILT_IN_ATOMIC_EXCHANGE),


CFN_BUILT_IN_ATOMIC_EXCHANGE_N = int (BUILT_IN_ATOMIC_EXCHANGE_N),


CFN_BUILT_IN_ATOMIC_EXCHANGE_1 = int (BUILT_IN_ATOMIC_EXCHANGE_1),


CFN_BUILT_IN_ATOMIC_EXCHANGE_2 = int (BUILT_IN_ATOMIC_EXCHANGE_2),


CFN_BUILT_IN_ATOMIC_EXCHANGE_4 = int (BUILT_IN_ATOMIC_EXCHANGE_4),


CFN_BUILT_IN_ATOMIC_EXCHANGE_8 = int (BUILT_IN_ATOMIC_EXCHANGE_8),


CFN_BUILT_IN_ATOMIC_EXCHANGE_16 = int (BUILT_IN_ATOMIC_EXCHANGE_16),



CFN_BUILT_IN_ATOMIC_LOAD = int (BUILT_IN_ATOMIC_LOAD),



CFN_BUILT_IN_ATOMIC_LOAD_N = int (BUILT_IN_ATOMIC_LOAD_N),


CFN_BUILT_IN_ATOMIC_LOAD_1 = int (BUILT_IN_ATOMIC_LOAD_1),


CFN_BUILT_IN_ATOMIC_LOAD_2 = int (BUILT_IN_ATOMIC_LOAD_2),


CFN_BUILT_IN_ATOMIC_LOAD_4 = int (BUILT_IN_ATOMIC_LOAD_4),


CFN_BUILT_IN_ATOMIC_LOAD_8 = int (BUILT_IN_ATOMIC_LOAD_8),


CFN_BUILT_IN_ATOMIC_LOAD_16 = int (BUILT_IN_ATOMIC_LOAD_16),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_N),


CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_1),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_2),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_4),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_8),



CFN_BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16 = int (BUILT_IN_ATOMIC_COMPARE_EXCHANGE_16),




CFN_BUILT_IN_ATOMIC_STORE = int (BUILT_IN_ATOMIC_STORE),


CFN_BUILT_IN_ATOMIC_STORE_N = int (BUILT_IN_ATOMIC_STORE_N),


CFN_BUILT_IN_ATOMIC_STORE_1 = int (BUILT_IN_ATOMIC_STORE_1),


CFN_BUILT_IN_ATOMIC_STORE_2 = int (BUILT_IN_ATOMIC_STORE_2),


CFN_BUILT_IN_ATOMIC_STORE_4 = int (BUILT_IN_ATOMIC_STORE_4),


CFN_BUILT_IN_ATOMIC_STORE_8 = int (BUILT_IN_ATOMIC_STORE_8),


CFN_BUILT_IN_ATOMIC_STORE_16 = int (BUILT_IN_ATOMIC_STORE_16),



CFN_BUILT_IN_ATOMIC_ADD_FETCH_N = int (BUILT_IN_ATOMIC_ADD_FETCH_N),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_1 = int (BUILT_IN_ATOMIC_ADD_FETCH_1),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_2 = int (BUILT_IN_ATOMIC_ADD_FETCH_2),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_4 = int (BUILT_IN_ATOMIC_ADD_FETCH_4),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_8 = int (BUILT_IN_ATOMIC_ADD_FETCH_8),


CFN_BUILT_IN_ATOMIC_ADD_FETCH_16 = int (BUILT_IN_ATOMIC_ADD_FETCH_16),



CFN_BUILT_IN_ATOMIC_SUB_FETCH_N = int (BUILT_IN_ATOMIC_SUB_FETCH_N),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_1 = int (BUILT_IN_ATOMIC_SUB_FETCH_1),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_2 = int (BUILT_IN_ATOMIC_SUB_FETCH_2),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_4 = int (BUILT_IN_ATOMIC_SUB_FETCH_4),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_8 = int (BUILT_IN_ATOMIC_SUB_FETCH_8),


CFN_BUILT_IN_ATOMIC_SUB_FETCH_16 = int (BUILT_IN_ATOMIC_SUB_FETCH_16),



CFN_BUILT_IN_ATOMIC_AND_FETCH_N = int (BUILT_IN_ATOMIC_AND_FETCH_N),


CFN_BUILT_IN_ATOMIC_AND_FETCH_1 = int (BUILT_IN_ATOMIC_AND_FETCH_1),


CFN_BUILT_IN_ATOMIC_AND_FETCH_2 = int (BUILT_IN_ATOMIC_AND_FETCH_2),


CFN_BUILT_IN_ATOMIC_AND_FETCH_4 = int (BUILT_IN_ATOMIC_AND_FETCH_4),


CFN_BUILT_IN_ATOMIC_AND_FETCH_8 = int (BUILT_IN_ATOMIC_AND_FETCH_8),


CFN_BUILT_IN_ATOMIC_AND_FETCH_16 = int (BUILT_IN_ATOMIC_AND_FETCH_16),



CFN_BUILT_IN_ATOMIC_NAND_FETCH_N = int (BUILT_IN_ATOMIC_NAND_FETCH_N),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_1 = int (BUILT_IN_ATOMIC_NAND_FETCH_1),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_2 = int (BUILT_IN_ATOMIC_NAND_FETCH_2),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_4 = int (BUILT_IN_ATOMIC_NAND_FETCH_4),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_8 = int (BUILT_IN_ATOMIC_NAND_FETCH_8),


CFN_BUILT_IN_ATOMIC_NAND_FETCH_16 = int (BUILT_IN_ATOMIC_NAND_FETCH_16),



CFN_BUILT_IN_ATOMIC_XOR_FETCH_N = int (BUILT_IN_ATOMIC_XOR_FETCH_N),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_1 = int (BUILT_IN_ATOMIC_XOR_FETCH_1),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_2 = int (BUILT_IN_ATOMIC_XOR_FETCH_2),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_4 = int (BUILT_IN_ATOMIC_XOR_FETCH_4),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_8 = int (BUILT_IN_ATOMIC_XOR_FETCH_8),


CFN_BUILT_IN_ATOMIC_XOR_FETCH_16 = int (BUILT_IN_ATOMIC_XOR_FETCH_16),



CFN_BUILT_IN_ATOMIC_OR_FETCH_N = int (BUILT_IN_ATOMIC_OR_FETCH_N),


CFN_BUILT_IN_ATOMIC_OR_FETCH_1 = int (BUILT_IN_ATOMIC_OR_FETCH_1),


CFN_BUILT_IN_ATOMIC_OR_FETCH_2 = int (BUILT_IN_ATOMIC_OR_FETCH_2),


CFN_BUILT_IN_ATOMIC_OR_FETCH_4 = int (BUILT_IN_ATOMIC_OR_FETCH_4),


CFN_BUILT_IN_ATOMIC_OR_FETCH_8 = int (BUILT_IN_ATOMIC_OR_FETCH_8),


CFN_BUILT_IN_ATOMIC_OR_FETCH_16 = int (BUILT_IN_ATOMIC_OR_FETCH_16),



CFN_BUILT_IN_ATOMIC_FETCH_ADD_N = int (BUILT_IN_ATOMIC_FETCH_ADD_N),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_1 = int (BUILT_IN_ATOMIC_FETCH_ADD_1),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_2 = int (BUILT_IN_ATOMIC_FETCH_ADD_2),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_4 = int (BUILT_IN_ATOMIC_FETCH_ADD_4),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_8 = int (BUILT_IN_ATOMIC_FETCH_ADD_8),


CFN_BUILT_IN_ATOMIC_FETCH_ADD_16 = int (BUILT_IN_ATOMIC_FETCH_ADD_16),



CFN_BUILT_IN_ATOMIC_FETCH_SUB_N = int (BUILT_IN_ATOMIC_FETCH_SUB_N),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_1 = int (BUILT_IN_ATOMIC_FETCH_SUB_1),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_2 = int (BUILT_IN_ATOMIC_FETCH_SUB_2),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_4 = int (BUILT_IN_ATOMIC_FETCH_SUB_4),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_8 = int (BUILT_IN_ATOMIC_FETCH_SUB_8),


CFN_BUILT_IN_ATOMIC_FETCH_SUB_16 = int (BUILT_IN_ATOMIC_FETCH_SUB_16),



CFN_BUILT_IN_ATOMIC_FETCH_AND_N = int (BUILT_IN_ATOMIC_FETCH_AND_N),


CFN_BUILT_IN_ATOMIC_FETCH_AND_1 = int (BUILT_IN_ATOMIC_FETCH_AND_1),


CFN_BUILT_IN_ATOMIC_FETCH_AND_2 = int (BUILT_IN_ATOMIC_FETCH_AND_2),


CFN_BUILT_IN_ATOMIC_FETCH_AND_4 = int (BUILT_IN_ATOMIC_FETCH_AND_4),


CFN_BUILT_IN_ATOMIC_FETCH_AND_8 = int (BUILT_IN_ATOMIC_FETCH_AND_8),


CFN_BUILT_IN_ATOMIC_FETCH_AND_16 = int (BUILT_IN_ATOMIC_FETCH_AND_16),



CFN_BUILT_IN_ATOMIC_FETCH_NAND_N = int (BUILT_IN_ATOMIC_FETCH_NAND_N),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_1 = int (BUILT_IN_ATOMIC_FETCH_NAND_1),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_2 = int (BUILT_IN_ATOMIC_FETCH_NAND_2),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_4 = int (BUILT_IN_ATOMIC_FETCH_NAND_4),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_8 = int (BUILT_IN_ATOMIC_FETCH_NAND_8),


CFN_BUILT_IN_ATOMIC_FETCH_NAND_16 = int (BUILT_IN_ATOMIC_FETCH_NAND_16),



CFN_BUILT_IN_ATOMIC_FETCH_XOR_N = int (BUILT_IN_ATOMIC_FETCH_XOR_N),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_1 = int (BUILT_IN_ATOMIC_FETCH_XOR_1),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_2 = int (BUILT_IN_ATOMIC_FETCH_XOR_2),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_4 = int (BUILT_IN_ATOMIC_FETCH_XOR_4),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_8 = int (BUILT_IN_ATOMIC_FETCH_XOR_8),


CFN_BUILT_IN_ATOMIC_FETCH_XOR_16 = int (BUILT_IN_ATOMIC_FETCH_XOR_16),




CFN_BUILT_IN_ATOMIC_FETCH_OR_N = int (BUILT_IN_ATOMIC_FETCH_OR_N),


CFN_BUILT_IN_ATOMIC_FETCH_OR_1 = int (BUILT_IN_ATOMIC_FETCH_OR_1),


CFN_BUILT_IN_ATOMIC_FETCH_OR_2 = int (BUILT_IN_ATOMIC_FETCH_OR_2),


CFN_BUILT_IN_ATOMIC_FETCH_OR_4 = int (BUILT_IN_ATOMIC_FETCH_OR_4),


CFN_BUILT_IN_ATOMIC_FETCH_OR_8 = int (BUILT_IN_ATOMIC_FETCH_OR_8),


CFN_BUILT_IN_ATOMIC_FETCH_OR_16 = int (BUILT_IN_ATOMIC_FETCH_OR_16),



CFN_BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE = int (BUILT_IN_ATOMIC_ALWAYS_LOCK_FREE),



CFN_BUILT_IN_ATOMIC_IS_LOCK_FREE = int (BUILT_IN_ATOMIC_IS_LOCK_FREE),




CFN_BUILT_IN_ATOMIC_THREAD_FENCE = int (BUILT_IN_ATOMIC_THREAD_FENCE),



CFN_BUILT_IN_ATOMIC_SIGNAL_FENCE = int (BUILT_IN_ATOMIC_SIGNAL_FENCE),






CFN_BUILT_IN_ATOMIC_FERAISEEXCEPT = int (BUILT_IN_ATOMIC_FERAISEEXCEPT),
# 1049 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-builtins.def"
CFN_BUILT_IN_ACC_GET_DEVICE_TYPE = int (BUILT_IN_ACC_GET_DEVICE_TYPE),

CFN_BUILT_IN_GOACC_DATA_START = int (BUILT_IN_GOACC_DATA_START),

CFN_BUILT_IN_GOACC_DATA_END = int (BUILT_IN_GOACC_DATA_END),

CFN_BUILT_IN_GOACC_ENTER_EXIT_DATA = int (BUILT_IN_GOACC_ENTER_EXIT_DATA),


CFN_BUILT_IN_GOACC_PARALLEL = int (BUILT_IN_GOACC_PARALLEL),


CFN_BUILT_IN_GOACC_UPDATE = int (BUILT_IN_GOACC_UPDATE),


CFN_BUILT_IN_GOACC_WAIT = int (BUILT_IN_GOACC_WAIT),



CFN_BUILT_IN_ACC_ON_DEVICE = int (BUILT_IN_ACC_ON_DEVICE),


CFN_BUILT_IN_GOACC_PARLEVEL_ID = int (BUILT_IN_GOACC_PARLEVEL_ID),

CFN_BUILT_IN_GOACC_PARLEVEL_SIZE = int (BUILT_IN_GOACC_PARLEVEL_SIZE),


CFN_BUILT_IN_OMP_GET_THREAD_NUM = int (BUILT_IN_OMP_GET_THREAD_NUM),

CFN_BUILT_IN_OMP_GET_NUM_THREADS = int (BUILT_IN_OMP_GET_NUM_THREADS),

CFN_BUILT_IN_OMP_GET_TEAM_NUM = int (BUILT_IN_OMP_GET_TEAM_NUM),

CFN_BUILT_IN_OMP_GET_NUM_TEAMS = int (BUILT_IN_OMP_GET_NUM_TEAMS),


CFN_BUILT_IN_GOMP_ATOMIC_START = int (BUILT_IN_GOMP_ATOMIC_START),

CFN_BUILT_IN_GOMP_ATOMIC_END = int (BUILT_IN_GOMP_ATOMIC_END),

CFN_BUILT_IN_GOMP_BARRIER = int (BUILT_IN_GOMP_BARRIER),

CFN_BUILT_IN_GOMP_BARRIER_CANCEL = int (BUILT_IN_GOMP_BARRIER_CANCEL),

CFN_BUILT_IN_GOMP_TASKWAIT = int (BUILT_IN_GOMP_TASKWAIT),

CFN_BUILT_IN_GOMP_TASKWAIT_DEPEND = int (BUILT_IN_GOMP_TASKWAIT_DEPEND),

CFN_BUILT_IN_GOMP_TASKYIELD = int (BUILT_IN_GOMP_TASKYIELD),

CFN_BUILT_IN_GOMP_TASKGROUP_START = int (BUILT_IN_GOMP_TASKGROUP_START),

CFN_BUILT_IN_GOMP_TASKGROUP_END = int (BUILT_IN_GOMP_TASKGROUP_END),

CFN_BUILT_IN_GOMP_CANCEL = int (BUILT_IN_GOMP_CANCEL),

CFN_BUILT_IN_GOMP_CANCELLATION_POINT = int (BUILT_IN_GOMP_CANCELLATION_POINT),

CFN_BUILT_IN_GOMP_CRITICAL_START = int (BUILT_IN_GOMP_CRITICAL_START),

CFN_BUILT_IN_GOMP_CRITICAL_END = int (BUILT_IN_GOMP_CRITICAL_END),

CFN_BUILT_IN_GOMP_CRITICAL_NAME_START = int (BUILT_IN_GOMP_CRITICAL_NAME_START),


CFN_BUILT_IN_GOMP_CRITICAL_NAME_END = int (BUILT_IN_GOMP_CRITICAL_NAME_END),





CFN_BUILT_IN_GOMP_LOOP_STATIC_START = int (BUILT_IN_GOMP_LOOP_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_GUIDED_START = int (BUILT_IN_GOMP_LOOP_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START = int (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_START = int (BUILT_IN_GOMP_LOOP_START),



CFN_BUILT_IN_GOMP_LOOP_ORDERED_START = int (BUILT_IN_GOMP_LOOP_ORDERED_START),



CFN_BUILT_IN_GOMP_LOOP_DOACROSS_START = int (BUILT_IN_GOMP_LOOP_DOACROSS_START),



CFN_BUILT_IN_GOMP_LOOP_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_STATIC_NEXT),

CFN_BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT),

CFN_BUILT_IN_GOMP_LOOP_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_GUIDED_NEXT),

CFN_BUILT_IN_GOMP_LOOP_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_RUNTIME_NEXT),

CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_MAYBE_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_STATIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_DYNAMIC_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_GUIDED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_RUNTIME_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_START = int (BUILT_IN_GOMP_LOOP_ULL_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_START = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START = int (BUILT_IN_GOMP_LOOP_ULL_DOACROSS_START),



CFN_BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_MAYBE_NONMONOTONIC_RUNTIME_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT),


CFN_BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT = int (BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT),





CFN_BUILT_IN_GOMP_PARALLEL_LOOP_STATIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_STATIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED = int (BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME = int (BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_DYNAMIC),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_GUIDED),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME = int (BUILT_IN_GOMP_PARALLEL_LOOP_NONMONOTONIC_RUNTIME),



CFN_BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME = int (BUILT_IN_GOMP_PARALLEL_LOOP_MAYBE_NONMONOTONIC_RUNTIME),



CFN_BUILT_IN_GOMP_LOOP_END = int (BUILT_IN_GOMP_LOOP_END),

CFN_BUILT_IN_GOMP_LOOP_END_CANCEL = int (BUILT_IN_GOMP_LOOP_END_CANCEL),

CFN_BUILT_IN_GOMP_LOOP_END_NOWAIT = int (BUILT_IN_GOMP_LOOP_END_NOWAIT),

CFN_BUILT_IN_GOMP_ORDERED_START = int (BUILT_IN_GOMP_ORDERED_START),

CFN_BUILT_IN_GOMP_ORDERED_END = int (BUILT_IN_GOMP_ORDERED_END),

CFN_BUILT_IN_GOMP_DOACROSS_POST = int (BUILT_IN_GOMP_DOACROSS_POST),

CFN_BUILT_IN_GOMP_DOACROSS_WAIT = int (BUILT_IN_GOMP_DOACROSS_WAIT),

CFN_BUILT_IN_GOMP_DOACROSS_ULL_POST = int (BUILT_IN_GOMP_DOACROSS_ULL_POST),

CFN_BUILT_IN_GOMP_DOACROSS_ULL_WAIT = int (BUILT_IN_GOMP_DOACROSS_ULL_WAIT),

CFN_BUILT_IN_GOMP_PARALLEL = int (BUILT_IN_GOMP_PARALLEL),

CFN_BUILT_IN_GOMP_PARALLEL_REDUCTIONS = int (BUILT_IN_GOMP_PARALLEL_REDUCTIONS),


CFN_BUILT_IN_GOMP_TASK = int (BUILT_IN_GOMP_TASK),


CFN_BUILT_IN_GOMP_TASKLOOP = int (BUILT_IN_GOMP_TASKLOOP),


CFN_BUILT_IN_GOMP_TASKLOOP_ULL = int (BUILT_IN_GOMP_TASKLOOP_ULL),


CFN_BUILT_IN_GOMP_SECTIONS_START = int (BUILT_IN_GOMP_SECTIONS_START),

CFN_BUILT_IN_GOMP_SECTIONS2_START = int (BUILT_IN_GOMP_SECTIONS2_START),

CFN_BUILT_IN_GOMP_SECTIONS_NEXT = int (BUILT_IN_GOMP_SECTIONS_NEXT),

CFN_BUILT_IN_GOMP_PARALLEL_SECTIONS = int (BUILT_IN_GOMP_PARALLEL_SECTIONS),


CFN_BUILT_IN_GOMP_SECTIONS_END = int (BUILT_IN_GOMP_SECTIONS_END),

CFN_BUILT_IN_GOMP_SECTIONS_END_CANCEL = int (BUILT_IN_GOMP_SECTIONS_END_CANCEL),


CFN_BUILT_IN_GOMP_SECTIONS_END_NOWAIT = int (BUILT_IN_GOMP_SECTIONS_END_NOWAIT),


CFN_BUILT_IN_GOMP_SINGLE_START = int (BUILT_IN_GOMP_SINGLE_START),

CFN_BUILT_IN_GOMP_SINGLE_COPY_START = int (BUILT_IN_GOMP_SINGLE_COPY_START),

CFN_BUILT_IN_GOMP_SINGLE_COPY_END = int (BUILT_IN_GOMP_SINGLE_COPY_END),

CFN_BUILT_IN_GOMP_OFFLOAD_REGISTER = int (BUILT_IN_GOMP_OFFLOAD_REGISTER),

CFN_BUILT_IN_GOMP_OFFLOAD_UNREGISTER = int (BUILT_IN_GOMP_OFFLOAD_UNREGISTER),


CFN_BUILT_IN_GOMP_TARGET = int (BUILT_IN_GOMP_TARGET),


CFN_BUILT_IN_GOMP_TARGET_DATA = int (BUILT_IN_GOMP_TARGET_DATA),

CFN_BUILT_IN_GOMP_TARGET_END_DATA = int (BUILT_IN_GOMP_TARGET_END_DATA),

CFN_BUILT_IN_GOMP_TARGET_UPDATE = int (BUILT_IN_GOMP_TARGET_UPDATE),


CFN_BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA = int (BUILT_IN_GOMP_TARGET_ENTER_EXIT_DATA),


CFN_BUILT_IN_GOMP_TEAMS = int (BUILT_IN_GOMP_TEAMS),

CFN_BUILT_IN_GOMP_TEAMS_REG = int (BUILT_IN_GOMP_TEAMS_REG),

CFN_BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER = int (BUILT_IN_GOMP_TASKGROUP_REDUCTION_REGISTER),


CFN_BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER = int (BUILT_IN_GOMP_TASKGROUP_REDUCTION_UNREGISTER),


CFN_BUILT_IN_GOMP_TASK_REDUCTION_REMAP = int (BUILT_IN_GOMP_TASK_REDUCTION_REMAP),


CFN_BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER = int (BUILT_IN_GOMP_WORKSHARE_TASK_REDUCTION_UNREGISTER),


CFN_BUILT_IN_GOACC_DECLARE = int (BUILT_IN_GOACC_DECLARE),
# 1052 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def" 1
CFN_BUILT_IN_TM_START = int (BUILT_IN_TM_START),


CFN_BUILT_IN_TM_COMMIT = int (BUILT_IN_TM_COMMIT),

CFN_BUILT_IN_TM_COMMIT_EH = int (BUILT_IN_TM_COMMIT_EH),

CFN_BUILT_IN_TM_ABORT = int (BUILT_IN_TM_ABORT),

CFN_BUILT_IN_TM_IRREVOCABLE = int (BUILT_IN_TM_IRREVOCABLE),


CFN_BUILT_IN_TM_MEMCPY = int (BUILT_IN_TM_MEMCPY),

CFN_BUILT_IN_TM_MEMCPY_RNWT = int (BUILT_IN_TM_MEMCPY_RNWT),

CFN_BUILT_IN_TM_MEMCPY_RTWN = int (BUILT_IN_TM_MEMCPY_RTWN),

CFN_BUILT_IN_TM_MEMMOVE = int (BUILT_IN_TM_MEMMOVE),

CFN_BUILT_IN_TM_MEMSET = int (BUILT_IN_TM_MEMSET),


CFN_BUILT_IN_TM_GETTMCLONE_IRR = int (BUILT_IN_TM_GETTMCLONE_IRR),

CFN_BUILT_IN_TM_GETTMCLONE_SAFE = int (BUILT_IN_TM_GETTMCLONE_SAFE),



CFN_BUILT_IN_TM_MALLOC = int (BUILT_IN_TM_MALLOC),

CFN_BUILT_IN_TM_CALLOC = int (BUILT_IN_TM_CALLOC),

CFN_BUILT_IN_TM_FREE = int (BUILT_IN_TM_FREE),



CFN_BUILT_IN_TM_LOG_1 = int (BUILT_IN_TM_LOG_1),

CFN_BUILT_IN_TM_LOG_2 = int (BUILT_IN_TM_LOG_2),

CFN_BUILT_IN_TM_LOG_4 = int (BUILT_IN_TM_LOG_4),

CFN_BUILT_IN_TM_LOG_8 = int (BUILT_IN_TM_LOG_8),

CFN_BUILT_IN_TM_LOG_FLOAT = int (BUILT_IN_TM_LOG_FLOAT),

CFN_BUILT_IN_TM_LOG_DOUBLE = int (BUILT_IN_TM_LOG_DOUBLE),

CFN_BUILT_IN_TM_LOG_LDOUBLE = int (BUILT_IN_TM_LOG_LDOUBLE),

CFN_BUILT_IN_TM_LOG = int (BUILT_IN_TM_LOG),



CFN_BUILT_IN_TM_LOG_M64 = int (BUILT_IN_TM_LOG_M64),
CFN_BUILT_IN_TM_LOG_M128 = int (BUILT_IN_TM_LOG_M128),
CFN_BUILT_IN_TM_LOG_M256 = int (BUILT_IN_TM_LOG_M256),
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
CFN_BUILT_IN_TM_STORE_1 = int (BUILT_IN_TM_STORE_1),

CFN_BUILT_IN_TM_STORE_WAR_1 = int (BUILT_IN_TM_STORE_WAR_1),

CFN_BUILT_IN_TM_STORE_WAW_1 = int (BUILT_IN_TM_STORE_WAW_1),


CFN_BUILT_IN_TM_STORE_2 = int (BUILT_IN_TM_STORE_2),

CFN_BUILT_IN_TM_STORE_WAR_2 = int (BUILT_IN_TM_STORE_WAR_2),

CFN_BUILT_IN_TM_STORE_WAW_2 = int (BUILT_IN_TM_STORE_WAW_2),


CFN_BUILT_IN_TM_STORE_4 = int (BUILT_IN_TM_STORE_4),

CFN_BUILT_IN_TM_STORE_WAR_4 = int (BUILT_IN_TM_STORE_WAR_4),

CFN_BUILT_IN_TM_STORE_WAW_4 = int (BUILT_IN_TM_STORE_WAW_4),


CFN_BUILT_IN_TM_STORE_8 = int (BUILT_IN_TM_STORE_8),

CFN_BUILT_IN_TM_STORE_WAR_8 = int (BUILT_IN_TM_STORE_WAR_8),

CFN_BUILT_IN_TM_STORE_WAW_8 = int (BUILT_IN_TM_STORE_WAW_8),


CFN_BUILT_IN_TM_STORE_FLOAT = int (BUILT_IN_TM_STORE_FLOAT),

CFN_BUILT_IN_TM_STORE_WAR_FLOAT = int (BUILT_IN_TM_STORE_WAR_FLOAT),

CFN_BUILT_IN_TM_STORE_WAW_FLOAT = int (BUILT_IN_TM_STORE_WAW_FLOAT),


CFN_BUILT_IN_TM_STORE_DOUBLE = int (BUILT_IN_TM_STORE_DOUBLE),

CFN_BUILT_IN_TM_STORE_WAR_DOUBLE = int (BUILT_IN_TM_STORE_WAR_DOUBLE),

CFN_BUILT_IN_TM_STORE_WAW_DOUBLE = int (BUILT_IN_TM_STORE_WAW_DOUBLE),



CFN_BUILT_IN_TM_STORE_M64 = int (BUILT_IN_TM_STORE_M64),
CFN_BUILT_IN_TM_STORE_WAR_M64 = int (BUILT_IN_TM_STORE_WAR_M64),
CFN_BUILT_IN_TM_STORE_WAW_M64 = int (BUILT_IN_TM_STORE_WAW_M64),
CFN_BUILT_IN_TM_STORE_M128 = int (BUILT_IN_TM_STORE_M128),
CFN_BUILT_IN_TM_STORE_WAR_M128 = int (BUILT_IN_TM_STORE_WAR_M128),
CFN_BUILT_IN_TM_STORE_WAW_M128 = int (BUILT_IN_TM_STORE_WAW_M128),
CFN_BUILT_IN_TM_STORE_M256 = int (BUILT_IN_TM_STORE_M256),
CFN_BUILT_IN_TM_STORE_WAR_M256 = int (BUILT_IN_TM_STORE_WAR_M256),
CFN_BUILT_IN_TM_STORE_WAW_M256 = int (BUILT_IN_TM_STORE_WAW_M256),

CFN_BUILT_IN_TM_STORE_LDOUBLE = int (BUILT_IN_TM_STORE_LDOUBLE),

CFN_BUILT_IN_TM_STORE_WAR_LDOUBLE = int (BUILT_IN_TM_STORE_WAR_LDOUBLE),

CFN_BUILT_IN_TM_STORE_WAW_LDOUBLE = int (BUILT_IN_TM_STORE_WAW_LDOUBLE),
# 133 "/home/giulianob/gcc_git_gnu/gcc/gcc/gtm-builtins.def"
CFN_BUILT_IN_TM_LOAD_1 = int (BUILT_IN_TM_LOAD_1),

CFN_BUILT_IN_TM_LOAD_RAR_1 = int (BUILT_IN_TM_LOAD_RAR_1),

CFN_BUILT_IN_TM_LOAD_RAW_1 = int (BUILT_IN_TM_LOAD_RAW_1),

CFN_BUILT_IN_TM_LOAD_RFW_1 = int (BUILT_IN_TM_LOAD_RFW_1),


CFN_BUILT_IN_TM_LOAD_2 = int (BUILT_IN_TM_LOAD_2),

CFN_BUILT_IN_TM_LOAD_RAR_2 = int (BUILT_IN_TM_LOAD_RAR_2),

CFN_BUILT_IN_TM_LOAD_RAW_2 = int (BUILT_IN_TM_LOAD_RAW_2),

CFN_BUILT_IN_TM_LOAD_RFW_2 = int (BUILT_IN_TM_LOAD_RFW_2),


CFN_BUILT_IN_TM_LOAD_4 = int (BUILT_IN_TM_LOAD_4),

CFN_BUILT_IN_TM_LOAD_RAR_4 = int (BUILT_IN_TM_LOAD_RAR_4),

CFN_BUILT_IN_TM_LOAD_RAW_4 = int (BUILT_IN_TM_LOAD_RAW_4),

CFN_BUILT_IN_TM_LOAD_RFW_4 = int (BUILT_IN_TM_LOAD_RFW_4),


CFN_BUILT_IN_TM_LOAD_8 = int (BUILT_IN_TM_LOAD_8),

CFN_BUILT_IN_TM_LOAD_RAR_8 = int (BUILT_IN_TM_LOAD_RAR_8),

CFN_BUILT_IN_TM_LOAD_RAW_8 = int (BUILT_IN_TM_LOAD_RAW_8),

CFN_BUILT_IN_TM_LOAD_RFW_8 = int (BUILT_IN_TM_LOAD_RFW_8),


CFN_BUILT_IN_TM_LOAD_FLOAT = int (BUILT_IN_TM_LOAD_FLOAT),

CFN_BUILT_IN_TM_LOAD_RAR_FLOAT = int (BUILT_IN_TM_LOAD_RAR_FLOAT),

CFN_BUILT_IN_TM_LOAD_RAW_FLOAT = int (BUILT_IN_TM_LOAD_RAW_FLOAT),

CFN_BUILT_IN_TM_LOAD_RFW_FLOAT = int (BUILT_IN_TM_LOAD_RFW_FLOAT),


CFN_BUILT_IN_TM_LOAD_DOUBLE = int (BUILT_IN_TM_LOAD_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RAR_DOUBLE = int (BUILT_IN_TM_LOAD_RAR_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RAW_DOUBLE = int (BUILT_IN_TM_LOAD_RAW_DOUBLE),

CFN_BUILT_IN_TM_LOAD_RFW_DOUBLE = int (BUILT_IN_TM_LOAD_RFW_DOUBLE),



CFN_BUILT_IN_TM_LOAD_M64 = int (BUILT_IN_TM_LOAD_M64),
CFN_BUILT_IN_TM_LOAD_RAR_M64 = int (BUILT_IN_TM_LOAD_RAR_M64),
CFN_BUILT_IN_TM_LOAD_RAW_M64 = int (BUILT_IN_TM_LOAD_RAW_M64),
CFN_BUILT_IN_TM_LOAD_RFW_M64 = int (BUILT_IN_TM_LOAD_RFW_M64),
CFN_BUILT_IN_TM_LOAD_M128 = int (BUILT_IN_TM_LOAD_M128),
CFN_BUILT_IN_TM_LOAD_RAR_M128 = int (BUILT_IN_TM_LOAD_RAR_M128),
CFN_BUILT_IN_TM_LOAD_RAW_M128 = int (BUILT_IN_TM_LOAD_RAW_M128),
CFN_BUILT_IN_TM_LOAD_RFW_M128 = int (BUILT_IN_TM_LOAD_RFW_M128),
CFN_BUILT_IN_TM_LOAD_M256 = int (BUILT_IN_TM_LOAD_M256),
CFN_BUILT_IN_TM_LOAD_RAR_M256 = int (BUILT_IN_TM_LOAD_RAR_M256),
CFN_BUILT_IN_TM_LOAD_RAW_M256 = int (BUILT_IN_TM_LOAD_RAW_M256),
CFN_BUILT_IN_TM_LOAD_RFW_M256 = int (BUILT_IN_TM_LOAD_RFW_M256),

CFN_BUILT_IN_TM_LOAD_LDOUBLE = int (BUILT_IN_TM_LOAD_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RAR_LDOUBLE = int (BUILT_IN_TM_LOAD_RAR_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RAW_LDOUBLE = int (BUILT_IN_TM_LOAD_RAW_LDOUBLE),

CFN_BUILT_IN_TM_LOAD_RFW_LDOUBLE = int (BUILT_IN_TM_LOAD_RFW_LDOUBLE),
# 1055 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/sanitizer.def"
CFN_BEGIN_SANITIZER_BUILTINS = int (BEGIN_SANITIZER_BUILTINS),


CFN_BUILT_IN_ASAN_INIT = int (BUILT_IN_ASAN_INIT),

CFN_BUILT_IN_ASAN_VERSION_MISMATCH_CHECK = int (BUILT_IN_ASAN_VERSION_MISMATCH_CHECK),




CFN_BUILT_IN_ASAN_REPORT_LOAD1 = int (BUILT_IN_ASAN_REPORT_LOAD1),

CFN_BUILT_IN_ASAN_REPORT_LOAD2 = int (BUILT_IN_ASAN_REPORT_LOAD2),

CFN_BUILT_IN_ASAN_REPORT_LOAD4 = int (BUILT_IN_ASAN_REPORT_LOAD4),

CFN_BUILT_IN_ASAN_REPORT_LOAD8 = int (BUILT_IN_ASAN_REPORT_LOAD8),

CFN_BUILT_IN_ASAN_REPORT_LOAD16 = int (BUILT_IN_ASAN_REPORT_LOAD16),

CFN_BUILT_IN_ASAN_REPORT_LOAD_N = int (BUILT_IN_ASAN_REPORT_LOAD_N),


CFN_BUILT_IN_ASAN_REPORT_STORE1 = int (BUILT_IN_ASAN_REPORT_STORE1),

CFN_BUILT_IN_ASAN_REPORT_STORE2 = int (BUILT_IN_ASAN_REPORT_STORE2),

CFN_BUILT_IN_ASAN_REPORT_STORE4 = int (BUILT_IN_ASAN_REPORT_STORE4),

CFN_BUILT_IN_ASAN_REPORT_STORE8 = int (BUILT_IN_ASAN_REPORT_STORE8),

CFN_BUILT_IN_ASAN_REPORT_STORE16 = int (BUILT_IN_ASAN_REPORT_STORE16),

CFN_BUILT_IN_ASAN_REPORT_STORE_N = int (BUILT_IN_ASAN_REPORT_STORE_N),


CFN_BUILT_IN_ASAN_REPORT_LOAD1_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD1_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD2_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD2_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD4_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD4_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD8_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD8_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD16_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD16_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT = int (BUILT_IN_ASAN_REPORT_LOAD_N_NOABORT),



CFN_BUILT_IN_ASAN_REPORT_STORE1_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE1_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE2_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE2_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE4_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE4_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE8_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE8_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE16_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE16_NOABORT),


CFN_BUILT_IN_ASAN_REPORT_STORE_N_NOABORT = int (BUILT_IN_ASAN_REPORT_STORE_N_NOABORT),



CFN_BUILT_IN_ASAN_LOAD1 = int (BUILT_IN_ASAN_LOAD1),

CFN_BUILT_IN_ASAN_LOAD2 = int (BUILT_IN_ASAN_LOAD2),

CFN_BUILT_IN_ASAN_LOAD4 = int (BUILT_IN_ASAN_LOAD4),

CFN_BUILT_IN_ASAN_LOAD8 = int (BUILT_IN_ASAN_LOAD8),

CFN_BUILT_IN_ASAN_LOAD16 = int (BUILT_IN_ASAN_LOAD16),

CFN_BUILT_IN_ASAN_LOADN = int (BUILT_IN_ASAN_LOADN),

CFN_BUILT_IN_ASAN_STORE1 = int (BUILT_IN_ASAN_STORE1),

CFN_BUILT_IN_ASAN_STORE2 = int (BUILT_IN_ASAN_STORE2),

CFN_BUILT_IN_ASAN_STORE4 = int (BUILT_IN_ASAN_STORE4),

CFN_BUILT_IN_ASAN_STORE8 = int (BUILT_IN_ASAN_STORE8),

CFN_BUILT_IN_ASAN_STORE16 = int (BUILT_IN_ASAN_STORE16),

CFN_BUILT_IN_ASAN_STOREN = int (BUILT_IN_ASAN_STOREN),

CFN_BUILT_IN_ASAN_LOAD1_NOABORT = int (BUILT_IN_ASAN_LOAD1_NOABORT),

CFN_BUILT_IN_ASAN_LOAD2_NOABORT = int (BUILT_IN_ASAN_LOAD2_NOABORT),

CFN_BUILT_IN_ASAN_LOAD4_NOABORT = int (BUILT_IN_ASAN_LOAD4_NOABORT),

CFN_BUILT_IN_ASAN_LOAD8_NOABORT = int (BUILT_IN_ASAN_LOAD8_NOABORT),

CFN_BUILT_IN_ASAN_LOAD16_NOABORT = int (BUILT_IN_ASAN_LOAD16_NOABORT),

CFN_BUILT_IN_ASAN_LOADN_NOABORT = int (BUILT_IN_ASAN_LOADN_NOABORT),

CFN_BUILT_IN_ASAN_STORE1_NOABORT = int (BUILT_IN_ASAN_STORE1_NOABORT),

CFN_BUILT_IN_ASAN_STORE2_NOABORT = int (BUILT_IN_ASAN_STORE2_NOABORT),

CFN_BUILT_IN_ASAN_STORE4_NOABORT = int (BUILT_IN_ASAN_STORE4_NOABORT),

CFN_BUILT_IN_ASAN_STORE8_NOABORT = int (BUILT_IN_ASAN_STORE8_NOABORT),

CFN_BUILT_IN_ASAN_STORE16_NOABORT = int (BUILT_IN_ASAN_STORE16_NOABORT),

CFN_BUILT_IN_ASAN_STOREN_NOABORT = int (BUILT_IN_ASAN_STOREN_NOABORT),

CFN_BUILT_IN_ASAN_REGISTER_GLOBALS = int (BUILT_IN_ASAN_REGISTER_GLOBALS),


CFN_BUILT_IN_ASAN_UNREGISTER_GLOBALS = int (BUILT_IN_ASAN_UNREGISTER_GLOBALS),


CFN_BUILT_IN_ASAN_HANDLE_NO_RETURN = int (BUILT_IN_ASAN_HANDLE_NO_RETURN),


CFN_BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT = int (BUILT_IN_ASAN_BEFORE_DYNAMIC_INIT),


CFN_BUILT_IN_ASAN_AFTER_DYNAMIC_INIT = int (BUILT_IN_ASAN_AFTER_DYNAMIC_INIT),


CFN_BUILT_IN_ASAN_POISON_STACK_MEMORY = int (BUILT_IN_ASAN_POISON_STACK_MEMORY),


CFN_BUILT_IN_ASAN_UNPOISON_STACK_MEMORY = int (BUILT_IN_ASAN_UNPOISON_STACK_MEMORY),


CFN_BUILT_IN_ASAN_ALLOCA_POISON = int (BUILT_IN_ASAN_ALLOCA_POISON),

CFN_BUILT_IN_ASAN_ALLOCAS_UNPOISON = int (BUILT_IN_ASAN_ALLOCAS_UNPOISON),

CFN_BUILT_IN_ASAN_POINTER_COMPARE = int (BUILT_IN_ASAN_POINTER_COMPARE),

CFN_BUILT_IN_ASAN_POINTER_SUBTRACT = int (BUILT_IN_ASAN_POINTER_SUBTRACT),



CFN_BUILT_IN_TSAN_INIT = int (BUILT_IN_TSAN_INIT),

CFN_BUILT_IN_TSAN_FUNC_ENTRY = int (BUILT_IN_TSAN_FUNC_ENTRY),

CFN_BUILT_IN_TSAN_FUNC_EXIT = int (BUILT_IN_TSAN_FUNC_EXIT),

CFN_BUILT_IN_TSAN_VPTR_UPDATE = int (BUILT_IN_TSAN_VPTR_UPDATE),

CFN_BUILT_IN_TSAN_READ1 = int (BUILT_IN_TSAN_READ1),

CFN_BUILT_IN_TSAN_READ2 = int (BUILT_IN_TSAN_READ2),

CFN_BUILT_IN_TSAN_READ4 = int (BUILT_IN_TSAN_READ4),

CFN_BUILT_IN_TSAN_READ8 = int (BUILT_IN_TSAN_READ8),

CFN_BUILT_IN_TSAN_READ16 = int (BUILT_IN_TSAN_READ16),

CFN_BUILT_IN_TSAN_WRITE1 = int (BUILT_IN_TSAN_WRITE1),

CFN_BUILT_IN_TSAN_WRITE2 = int (BUILT_IN_TSAN_WRITE2),

CFN_BUILT_IN_TSAN_WRITE4 = int (BUILT_IN_TSAN_WRITE4),

CFN_BUILT_IN_TSAN_WRITE8 = int (BUILT_IN_TSAN_WRITE8),

CFN_BUILT_IN_TSAN_WRITE16 = int (BUILT_IN_TSAN_WRITE16),

CFN_BUILT_IN_TSAN_READ_RANGE = int (BUILT_IN_TSAN_READ_RANGE),

CFN_BUILT_IN_TSAN_WRITE_RANGE = int (BUILT_IN_TSAN_WRITE_RANGE),


CFN_BUILT_IN_TSAN_VOLATILE_READ1 = int (BUILT_IN_TSAN_VOLATILE_READ1),

CFN_BUILT_IN_TSAN_VOLATILE_READ2 = int (BUILT_IN_TSAN_VOLATILE_READ2),

CFN_BUILT_IN_TSAN_VOLATILE_READ4 = int (BUILT_IN_TSAN_VOLATILE_READ4),

CFN_BUILT_IN_TSAN_VOLATILE_READ8 = int (BUILT_IN_TSAN_VOLATILE_READ8),

CFN_BUILT_IN_TSAN_VOLATILE_READ16 = int (BUILT_IN_TSAN_VOLATILE_READ16),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE1 = int (BUILT_IN_TSAN_VOLATILE_WRITE1),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE2 = int (BUILT_IN_TSAN_VOLATILE_WRITE2),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE4 = int (BUILT_IN_TSAN_VOLATILE_WRITE4),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE8 = int (BUILT_IN_TSAN_VOLATILE_WRITE8),

CFN_BUILT_IN_TSAN_VOLATILE_WRITE16 = int (BUILT_IN_TSAN_VOLATILE_WRITE16),


CFN_BUILT_IN_TSAN_ATOMIC8_LOAD = int (BUILT_IN_TSAN_ATOMIC8_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC16_LOAD = int (BUILT_IN_TSAN_ATOMIC16_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC32_LOAD = int (BUILT_IN_TSAN_ATOMIC32_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC64_LOAD = int (BUILT_IN_TSAN_ATOMIC64_LOAD),


CFN_BUILT_IN_TSAN_ATOMIC128_LOAD = int (BUILT_IN_TSAN_ATOMIC128_LOAD),



CFN_BUILT_IN_TSAN_ATOMIC8_STORE = int (BUILT_IN_TSAN_ATOMIC8_STORE),


CFN_BUILT_IN_TSAN_ATOMIC16_STORE = int (BUILT_IN_TSAN_ATOMIC16_STORE),


CFN_BUILT_IN_TSAN_ATOMIC32_STORE = int (BUILT_IN_TSAN_ATOMIC32_STORE),


CFN_BUILT_IN_TSAN_ATOMIC64_STORE = int (BUILT_IN_TSAN_ATOMIC64_STORE),


CFN_BUILT_IN_TSAN_ATOMIC128_STORE = int (BUILT_IN_TSAN_ATOMIC128_STORE),



CFN_BUILT_IN_TSAN_ATOMIC8_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC8_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC16_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC16_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC32_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC32_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC64_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC64_EXCHANGE),


CFN_BUILT_IN_TSAN_ATOMIC128_EXCHANGE = int (BUILT_IN_TSAN_ATOMIC128_EXCHANGE),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC8_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC16_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC32_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC64_FETCH_ADD),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_ADD = int (BUILT_IN_TSAN_ATOMIC128_FETCH_ADD),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC8_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC16_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC32_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC64_FETCH_SUB),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_SUB = int (BUILT_IN_TSAN_ATOMIC128_FETCH_SUB),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC8_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC16_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC32_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC64_FETCH_AND),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_AND = int (BUILT_IN_TSAN_ATOMIC128_FETCH_AND),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC8_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC16_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC32_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC64_FETCH_OR),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_OR = int (BUILT_IN_TSAN_ATOMIC128_FETCH_OR),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC8_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC16_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC32_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC64_FETCH_XOR),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_XOR = int (BUILT_IN_TSAN_ATOMIC128_FETCH_XOR),



CFN_BUILT_IN_TSAN_ATOMIC8_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC8_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC16_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC16_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC32_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC32_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC64_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC64_FETCH_NAND),


CFN_BUILT_IN_TSAN_ATOMIC128_FETCH_NAND = int (BUILT_IN_TSAN_ATOMIC128_FETCH_NAND),



CFN_BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_STRONG),



CFN_BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG = int (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_STRONG),




CFN_BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC8_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC16_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC32_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC64_COMPARE_EXCHANGE_WEAK),



CFN_BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK = int (BUILT_IN_TSAN_ATOMIC128_COMPARE_EXCHANGE_WEAK),




CFN_BUILT_IN_TSAN_ATOMIC_THREAD_FENCE = int (BUILT_IN_TSAN_ATOMIC_THREAD_FENCE),


CFN_BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE = int (BUILT_IN_TSAN_ATOMIC_SIGNAL_FENCE),




CFN_BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS = int (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS),



CFN_BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE = int (BUILT_IN_UBSAN_HANDLE_BUILTIN_UNREACHABLE),



CFN_BUILT_IN_UBSAN_HANDLE_MISSING_RETURN = int (BUILT_IN_UBSAN_HANDLE_MISSING_RETURN),



CFN_BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE = int (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE),



CFN_BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1 = int (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1),



CFN_BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE = int (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE),



CFN_BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_DIVREM_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT = int (BUILT_IN_UBSAN_HANDLE_SHIFT_OUT_OF_BOUNDS_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT = int (BUILT_IN_UBSAN_HANDLE_VLA_BOUND_NOT_POSITIVE_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT = int (BUILT_IN_UBSAN_HANDLE_TYPE_MISMATCH_V1_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_NEGATE_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT = int (BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_POINTER_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW = int (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW),



CFN_BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT = int (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS = int (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS),



CFN_BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT = int (BUILT_IN_UBSAN_HANDLE_OUT_OF_BOUNDS_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_ARG = int (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT = int (BUILT_IN_UBSAN_HANDLE_NONNULL_ARG_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1 = int (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1),



CFN_BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT = int (BUILT_IN_UBSAN_HANDLE_NONNULL_RETURN_V1_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN = int (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN),



CFN_BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT = int (BUILT_IN_UBSAN_HANDLE_INVALID_BUILTIN_ABORT),



CFN_BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS = int (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS),



CFN_BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT = int (BUILT_IN_UBSAN_HANDLE_DYNAMIC_TYPE_CACHE_MISS_ABORT),





CFN_BUILT_IN_SANITIZER_COV_TRACE_PC = int (BUILT_IN_SANITIZER_COV_TRACE_PC),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP1 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP1),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP2 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP2),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP4 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP4),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMP8 = int (BUILT_IN_SANITIZER_COV_TRACE_CMP8),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP1),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP2),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP4),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8 = int (BUILT_IN_SANITIZER_COV_TRACE_CONST_CMP8),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMPF = int (BUILT_IN_SANITIZER_COV_TRACE_CMPF),


CFN_BUILT_IN_SANITIZER_COV_TRACE_CMPD = int (BUILT_IN_SANITIZER_COV_TRACE_CMPD),


CFN_BUILT_IN_SANITIZER_COV_TRACE_SWITCH = int (BUILT_IN_SANITIZER_COV_TRACE_SWITCH),




CFN_END_SANITIZER_BUILTINS = int (END_SANITIZER_BUILTINS),
# 1058 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/coroutine-builtins.def"
CFN_BEGIN_COROUTINE_BUILTINS = int (BEGIN_COROUTINE_BUILTINS),




CFN_BUILT_IN_CORO_PROMISE = int (BUILT_IN_CORO_PROMISE),



CFN_BUILT_IN_CORO_RESUME = int (BUILT_IN_CORO_RESUME),


CFN_BUILT_IN_CORO_DESTROY = int (BUILT_IN_CORO_DESTROY),


CFN_BUILT_IN_CORO_DONE = int (BUILT_IN_CORO_DONE),



CFN_END_COROUTINE_BUILTINS = int (END_COROUTINE_BUILTINS),
# 1061 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 1103 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def" 1
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_WORKITEMABSID = int (BUILT_IN_HSAIL_WORKITEMABSID),



CFN_BUILT_IN_HSAIL_GRIDSIZE = int (BUILT_IN_HSAIL_GRIDSIZE),



CFN_BUILT_IN_HSAIL_WORKITEMFLATABSID_U32 = int (BUILT_IN_HSAIL_WORKITEMFLATABSID_U32),




CFN_BUILT_IN_HSAIL_WORKITEMFLATABSID_U64 = int (BUILT_IN_HSAIL_WORKITEMFLATABSID_U64),




CFN_BUILT_IN_HSAIL_WORKITEMFLATID = int (BUILT_IN_HSAIL_WORKITEMFLATID),



CFN_BUILT_IN_HSAIL_WORKITEMID = int (BUILT_IN_HSAIL_WORKITEMID),



CFN_BUILT_IN_HSAIL_WORKGROUPID = int (BUILT_IN_HSAIL_WORKGROUPID),



CFN_BUILT_IN_HSAIL_CURRENTWORKITEMFLATID = int (BUILT_IN_HSAIL_CURRENTWORKITEMFLATID),




CFN_BUILT_IN_HSAIL_WORKITEMABSID_U64 = int (BUILT_IN_HSAIL_WORKITEMABSID_U64),



CFN_BUILT_IN_HSAIL_PACKETID = int (BUILT_IN_HSAIL_PACKETID),



CFN_BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64 = int (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG64),




CFN_BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32 = int (BUILT_IN_HSAIL_PACKETCOMPLETIONSIG_SIG32),




CFN_BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE = int (BUILT_IN_HSAIL_CURRENTWORKGROUPSIZE),




CFN_BUILT_IN_HSAIL_WORKGROUPSIZE = int (BUILT_IN_HSAIL_WORKGROUPSIZE),




CFN_BUILT_IN_HSAIL_DIM = int (BUILT_IN_HSAIL_DIM),



CFN_BUILT_IN_HSAIL_GRIDGROUPS = int (BUILT_IN_HSAIL_GRIDGROUPS),



CFN_BUILT_IN_HSAIL_BITEXTRACT_S32 = int (BUILT_IN_HSAIL_BITEXTRACT_S32),



CFN_BUILT_IN_HSAIL_BITEXTRACT_U32 = int (BUILT_IN_HSAIL_BITEXTRACT_U32),



CFN_BUILT_IN_HSAIL_BITEXTRACT_S64 = int (BUILT_IN_HSAIL_BITEXTRACT_S64),



CFN_BUILT_IN_HSAIL_BITEXTRACT_U64 = int (BUILT_IN_HSAIL_BITEXTRACT_U64),



CFN_BUILT_IN_HSAIL_BITINSERT_U32 = int (BUILT_IN_HSAIL_BITINSERT_U32),



CFN_BUILT_IN_HSAIL_BITINSERT_U64 = int (BUILT_IN_HSAIL_BITINSERT_U64),




CFN_BUILT_IN_HSAIL_BITMASK_B32 = int (BUILT_IN_HSAIL_BITMASK_B32),



CFN_BUILT_IN_HSAIL_BITMASK_B64 = int (BUILT_IN_HSAIL_BITMASK_B64),



CFN_BUILT_IN_HSAIL_BITREV_B32 = int (BUILT_IN_HSAIL_BITREV_B32),



CFN_BUILT_IN_HSAIL_BITREV_B64 = int (BUILT_IN_HSAIL_BITREV_B64),



CFN_BUILT_IN_HSAIL_BITSELECT_B32 = int (BUILT_IN_HSAIL_BITSELECT_B32),



CFN_BUILT_IN_HSAIL_BITSELECT_U64 = int (BUILT_IN_HSAIL_BITSELECT_U64),



CFN_BUILT_IN_HSAIL_FIRSTBIT_U32 = int (BUILT_IN_HSAIL_FIRSTBIT_U32),



CFN_BUILT_IN_HSAIL_FIRSTBIT_S32 = int (BUILT_IN_HSAIL_FIRSTBIT_S32),



CFN_BUILT_IN_HSAIL_FIRSTBIT_U64 = int (BUILT_IN_HSAIL_FIRSTBIT_U64),



CFN_BUILT_IN_HSAIL_FIRSTBIT_S64 = int (BUILT_IN_HSAIL_FIRSTBIT_S64),



CFN_BUILT_IN_HSAIL_LASTBIT_U32 = int (BUILT_IN_HSAIL_LASTBIT_U32),



CFN_BUILT_IN_HSAIL_LASTBIT_U64 = int (BUILT_IN_HSAIL_LASTBIT_U64),



CFN_BUILT_IN_HSAIL_BORROW_U32 = int (BUILT_IN_HSAIL_BORROW_U32),



CFN_BUILT_IN_HSAIL_BORROW_U64 = int (BUILT_IN_HSAIL_BORROW_U64),



CFN_BUILT_IN_HSAIL_CARRY_U32 = int (BUILT_IN_HSAIL_CARRY_U32),



CFN_BUILT_IN_HSAIL_CARRY_U64 = int (BUILT_IN_HSAIL_CARRY_U64),



CFN_BUILT_IN_HSAIL_REM_S32 = int (BUILT_IN_HSAIL_REM_S32),



CFN_BUILT_IN_HSAIL_REM_S64 = int (BUILT_IN_HSAIL_REM_S64),



CFN_BUILT_IN_HSAIL_MIN_F32 = int (BUILT_IN_HSAIL_MIN_F32),



CFN_BUILT_IN_HSAIL_MAX_F32 = int (BUILT_IN_HSAIL_MAX_F32),



CFN_BUILT_IN_HSAIL_MIN_F64 = int (BUILT_IN_HSAIL_MIN_F64),



CFN_BUILT_IN_HSAIL_MAX_F64 = int (BUILT_IN_HSAIL_MAX_F64),



CFN_BUILT_IN_HSAIL_CLASS_F32 = int (BUILT_IN_HSAIL_CLASS_F32),



CFN_BUILT_IN_HSAIL_CLASS_F64 = int (BUILT_IN_HSAIL_CLASS_F64),



CFN_BUILT_IN_HSAIL_CLASS_F32_F16 = int (BUILT_IN_HSAIL_CLASS_F32_F16),



CFN_BUILT_IN_HSAIL_FRACT_F32 = int (BUILT_IN_HSAIL_FRACT_F32),



CFN_BUILT_IN_HSAIL_FRACT_F64 = int (BUILT_IN_HSAIL_FRACT_F64),



CFN_BUILT_IN_HSAIL_BARRIER = int (BUILT_IN_HSAIL_BARRIER),



CFN_BUILT_IN_HSAIL_INITFBAR = int (BUILT_IN_HSAIL_INITFBAR),



CFN_BUILT_IN_HSAIL_JOINFBAR = int (BUILT_IN_HSAIL_JOINFBAR),



CFN_BUILT_IN_HSAIL_WAITFBAR = int (BUILT_IN_HSAIL_WAITFBAR),



CFN_BUILT_IN_HSAIL_ARRIVEFBAR = int (BUILT_IN_HSAIL_ARRIVEFBAR),



CFN_BUILT_IN_HSAIL_LEAVEFBAR = int (BUILT_IN_HSAIL_LEAVEFBAR),



CFN_BUILT_IN_HSAIL_RELEASEFBAR = int (BUILT_IN_HSAIL_RELEASEFBAR),



CFN_BUILT_IN_HSAIL_BITALIGN = int (BUILT_IN_HSAIL_BITALIGN),



CFN_BUILT_IN_HSAIL_BYTEALIGN = int (BUILT_IN_HSAIL_BYTEALIGN),



CFN_BUILT_IN_HSAIL_LERP = int (BUILT_IN_HSAIL_LERP),



CFN_BUILT_IN_HSAIL_PACKCVT = int (BUILT_IN_HSAIL_PACKCVT),




CFN_BUILT_IN_HSAIL_UNPACKCVT = int (BUILT_IN_HSAIL_UNPACKCVT),



CFN_BUILT_IN_HSAIL_SAD_U16X2 = int (BUILT_IN_HSAIL_SAD_U16X2),



CFN_BUILT_IN_HSAIL_SAD_U32 = int (BUILT_IN_HSAIL_SAD_U32),



CFN_BUILT_IN_HSAIL_SAD_U8X4 = int (BUILT_IN_HSAIL_SAD_U8X4),



CFN_BUILT_IN_HSAIL_SADHI_U8X4 = int (BUILT_IN_HSAIL_SADHI_U8X4),




CFN_BUILT_IN_HSAIL_CLOCK = int (BUILT_IN_HSAIL_CLOCK),



CFN_BUILT_IN_HSAIL_CUID = int (BUILT_IN_HSAIL_CUID),



CFN_BUILT_IN_HSAIL_MAXCUID = int (BUILT_IN_HSAIL_MAXCUID),



CFN_BUILT_IN_HSAIL_DEBUGTRAP = int (BUILT_IN_HSAIL_DEBUGTRAP),



CFN_BUILT_IN_HSAIL_GROUPBASEPTR = int (BUILT_IN_HSAIL_GROUPBASEPTR),



CFN_BUILT_IN_HSAIL_KERNARGBASEPTR_U64 = int (BUILT_IN_HSAIL_KERNARGBASEPTR_U64),




CFN_BUILT_IN_HSAIL_KERNARGBASEPTR_U32 = int (BUILT_IN_HSAIL_KERNARGBASEPTR_U32),




CFN_BUILT_IN_HSAIL_ALLOCA = int (BUILT_IN_HSAIL_ALLOCA),



CFN_BUILT_IN_HSAIL_LDQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_LDQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_LDQUEUEREADINDEX = int (BUILT_IN_HSAIL_LDQUEUEREADINDEX),




CFN_BUILT_IN_HSAIL_STQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_STQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_STQUEUEREADINDEX = int (BUILT_IN_HSAIL_STQUEUEREADINDEX),




CFN_BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_ADDQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_CASQUEUEWRITEINDEX = int (BUILT_IN_HSAIL_CASQUEUEWRITEINDEX),




CFN_BUILT_IN_HSAIL_SEGMENTP_GLOBAL = int (BUILT_IN_HSAIL_SEGMENTP_GLOBAL),




CFN_BUILT_IN_HSAIL_SEGMENTP_GROUP = int (BUILT_IN_HSAIL_SEGMENTP_GROUP),




CFN_BUILT_IN_HSAIL_SEGMENTP_PRIVATE = int (BUILT_IN_HSAIL_SEGMENTP_PRIVATE),
# 392 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_ATOMIC_MIN_S32 = int (BUILT_IN_HSAIL_ATOMIC_MIN_S32),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_S64 = int (BUILT_IN_HSAIL_ATOMIC_MIN_S64),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_U32 = int (BUILT_IN_HSAIL_ATOMIC_MIN_U32),



CFN_BUILT_IN_HSAIL_ATOMIC_MIN_U64 = int (BUILT_IN_HSAIL_ATOMIC_MIN_U64),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_S32 = int (BUILT_IN_HSAIL_ATOMIC_MAX_S32),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_S64 = int (BUILT_IN_HSAIL_ATOMIC_MAX_S64),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_U32 = int (BUILT_IN_HSAIL_ATOMIC_MAX_U32),



CFN_BUILT_IN_HSAIL_ATOMIC_MAX_U64 = int (BUILT_IN_HSAIL_ATOMIC_MAX_U64),



CFN_BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32 = int (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U32),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64 = int (BUILT_IN_HSAIL_ATOMIC_WRAPDEC_U64),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32 = int (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U32),




CFN_BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64 = int (BUILT_IN_HSAIL_ATOMIC_WRAPINC_U64),
# 449 "/home/giulianob/gcc_git_gnu/gcc/gcc/brig-builtins.def"
CFN_BUILT_IN_HSAIL_SAT_ADD_U64 = int (BUILT_IN_HSAIL_SAT_ADD_U64),



CFN_BUILT_IN_HSAIL_SAT_ADD_S64 = int (BUILT_IN_HSAIL_SAT_ADD_S64),



CFN_BUILT_IN_HSAIL_SAT_ADD_U32 = int (BUILT_IN_HSAIL_SAT_ADD_U32),



CFN_BUILT_IN_HSAIL_SAT_ADD_S32 = int (BUILT_IN_HSAIL_SAT_ADD_S32),



CFN_BUILT_IN_HSAIL_SAT_ADD_U16 = int (BUILT_IN_HSAIL_SAT_ADD_U16),



CFN_BUILT_IN_HSAIL_SAT_ADD_S16 = int (BUILT_IN_HSAIL_SAT_ADD_S16),



CFN_BUILT_IN_HSAIL_SAT_ADD_U8 = int (BUILT_IN_HSAIL_SAT_ADD_U8),



CFN_BUILT_IN_HSAIL_SAT_ADD_S8 = int (BUILT_IN_HSAIL_SAT_ADD_S8),



CFN_BUILT_IN_HSAIL_SAT_SUB_U64 = int (BUILT_IN_HSAIL_SAT_SUB_U64),



CFN_BUILT_IN_HSAIL_SAT_SUB_S64 = int (BUILT_IN_HSAIL_SAT_SUB_S64),



CFN_BUILT_IN_HSAIL_SAT_SUB_U32 = int (BUILT_IN_HSAIL_SAT_SUB_U32),



CFN_BUILT_IN_HSAIL_SAT_SUB_S32 = int (BUILT_IN_HSAIL_SAT_SUB_S32),



CFN_BUILT_IN_HSAIL_SAT_SUB_U16 = int (BUILT_IN_HSAIL_SAT_SUB_U16),



CFN_BUILT_IN_HSAIL_SAT_SUB_S16 = int (BUILT_IN_HSAIL_SAT_SUB_S16),



CFN_BUILT_IN_HSAIL_SAT_SUB_U8 = int (BUILT_IN_HSAIL_SAT_SUB_U8),



CFN_BUILT_IN_HSAIL_SAT_SUB_S8 = int (BUILT_IN_HSAIL_SAT_SUB_S8),



CFN_BUILT_IN_HSAIL_SAT_MUL_U64 = int (BUILT_IN_HSAIL_SAT_MUL_U64),



CFN_BUILT_IN_HSAIL_SAT_MUL_S64 = int (BUILT_IN_HSAIL_SAT_MUL_S64),



CFN_BUILT_IN_HSAIL_SAT_MUL_U32 = int (BUILT_IN_HSAIL_SAT_MUL_U32),



CFN_BUILT_IN_HSAIL_SAT_MUL_S32 = int (BUILT_IN_HSAIL_SAT_MUL_S32),



CFN_BUILT_IN_HSAIL_SAT_MUL_U16 = int (BUILT_IN_HSAIL_SAT_MUL_U16),



CFN_BUILT_IN_HSAIL_SAT_MUL_S16 = int (BUILT_IN_HSAIL_SAT_MUL_S16),



CFN_BUILT_IN_HSAIL_SAT_MUL_U8 = int (BUILT_IN_HSAIL_SAT_MUL_U8),



CFN_BUILT_IN_HSAIL_SAT_MUL_S8 = int (BUILT_IN_HSAIL_SAT_MUL_S8),







CFN_BUILT_IN_HSAIL_FTZ_F32_F16 = int (BUILT_IN_HSAIL_FTZ_F32_F16),


CFN_BUILT_IN_HSAIL_FTZ_F32 = int (BUILT_IN_HSAIL_FTZ_F32),


CFN_BUILT_IN_HSAIL_FTZ_F64 = int (BUILT_IN_HSAIL_FTZ_F64),


CFN_BUILT_IN_HSAIL_PUSH_FRAME = int (BUILT_IN_HSAIL_PUSH_FRAME),


CFN_BUILT_IN_HSAIL_POP_FRAME = int (BUILT_IN_HSAIL_POP_FRAME),


CFN_BUILT_IN_HSAIL_SETWORKITEMID = int (BUILT_IN_HSAIL_SETWORKITEMID),


CFN_BUILT_IN_HSAIL_LAUNCH_WG_FUNC = int (BUILT_IN_HSAIL_LAUNCH_WG_FUNC),



CFN_BUILT_IN_HSAIL_LAUNCH_KERNEL = int (BUILT_IN_HSAIL_LAUNCH_KERNEL),



CFN_BUILT_IN_HSAIL_F32_TO_F16 = int (BUILT_IN_HSAIL_F32_TO_F16),


CFN_BUILT_IN_HSAIL_F16_TO_F32 = int (BUILT_IN_HSAIL_F16_TO_F32),







CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F32),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F32),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U8_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S8_F64),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U16_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S16_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U32_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S32_F64),




CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_U64_F64),





CFN_BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64 = int (BUILT_IN_HSAIL_CVT_ZEROI_SAT_S64_F64),
# 1104 "/home/giulianob/gcc_git_gnu/gcc/gcc/builtins.def" 2
# 202 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 2




# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def" 1
# 123 "/home/giulianob/gcc_git_gnu/gcc/gcc/internal-fn.def"
CFN_MASK_LOAD = int (END_BUILTINS) + int (IFN_MASK_LOAD),
CFN_LOAD_LANES = int (END_BUILTINS) + int (IFN_LOAD_LANES),
CFN_MASK_LOAD_LANES = int (END_BUILTINS) + int (IFN_MASK_LOAD_LANES),


CFN_GATHER_LOAD = int (END_BUILTINS) + int (IFN_GATHER_LOAD),
CFN_MASK_GATHER_LOAD = int (END_BUILTINS) + int (IFN_MASK_GATHER_LOAD),


CFN_LEN_LOAD = int (END_BUILTINS) + int (IFN_LEN_LOAD),

CFN_SCATTER_STORE = int (END_BUILTINS) + int (IFN_SCATTER_STORE),
CFN_MASK_SCATTER_STORE = int (END_BUILTINS) + int (IFN_MASK_SCATTER_STORE),


CFN_MASK_STORE = int (END_BUILTINS) + int (IFN_MASK_STORE),
CFN_STORE_LANES = int (END_BUILTINS) + int (IFN_STORE_LANES),
CFN_MASK_STORE_LANES = int (END_BUILTINS) + int (IFN_MASK_STORE_LANES),


CFN_VCOND = int (END_BUILTINS) + int (IFN_VCOND),
CFN_VCONDU = int (END_BUILTINS) + int (IFN_VCONDU),
CFN_VCONDEQ = int (END_BUILTINS) + int (IFN_VCONDEQ),
CFN_VCOND_MASK = int (END_BUILTINS) + int (IFN_VCOND_MASK),

CFN_LEN_STORE = int (END_BUILTINS) + int (IFN_LEN_STORE),

CFN_WHILE_ULT = int (END_BUILTINS) + int (IFN_WHILE_ULT),
CFN_CHECK_RAW_PTRS = int (END_BUILTINS) + int (IFN_CHECK_RAW_PTRS),

CFN_CHECK_WAR_PTRS = int (END_BUILTINS) + int (IFN_CHECK_WAR_PTRS),


CFN_VEC_SHL_INSERT = int (END_BUILTINS) + int (IFN_VEC_SHL_INSERT),


CFN_DIV_POW2 = int (END_BUILTINS) + int (IFN_DIV_POW2),

CFN_FMS = int (END_BUILTINS) + int (IFN_FMS),
CFN_FNMA = int (END_BUILTINS) + int (IFN_FNMA),
CFN_FNMS = int (END_BUILTINS) + int (IFN_FNMS),

CFN_AVG_FLOOR = int (END_BUILTINS) + int (IFN_AVG_FLOOR),

CFN_AVG_CEIL = int (END_BUILTINS) + int (IFN_AVG_CEIL),


CFN_MULHS = int (END_BUILTINS) + int (IFN_MULHS),

CFN_MULHRS = int (END_BUILTINS) + int (IFN_MULHRS),


CFN_COND_ADD = int (END_BUILTINS) + int (IFN_COND_ADD),
CFN_COND_SUB = int (END_BUILTINS) + int (IFN_COND_SUB),
CFN_COND_MUL = int (END_BUILTINS) + int (IFN_COND_MUL),
CFN_COND_DIV = int (END_BUILTINS) + int (IFN_COND_DIV),

CFN_COND_MOD = int (END_BUILTINS) + int (IFN_COND_MOD),

CFN_COND_RDIV = int (END_BUILTINS) + int (IFN_COND_RDIV),
CFN_COND_MIN = int (END_BUILTINS) + int (IFN_COND_MIN),

CFN_COND_MAX = int (END_BUILTINS) + int (IFN_COND_MAX),

CFN_COND_AND = int (END_BUILTINS) + int (IFN_COND_AND),

CFN_COND_IOR = int (END_BUILTINS) + int (IFN_COND_IOR),

CFN_COND_XOR = int (END_BUILTINS) + int (IFN_COND_XOR),

CFN_COND_SHL = int (END_BUILTINS) + int (IFN_COND_SHL),

CFN_COND_SHR = int (END_BUILTINS) + int (IFN_COND_SHR),


CFN_COND_FMA = int (END_BUILTINS) + int (IFN_COND_FMA),
CFN_COND_FMS = int (END_BUILTINS) + int (IFN_COND_FMS),
CFN_COND_FNMA = int (END_BUILTINS) + int (IFN_COND_FNMA),
CFN_COND_FNMS = int (END_BUILTINS) + int (IFN_COND_FNMS),

CFN_RSQRT = int (END_BUILTINS) + int (IFN_RSQRT),

CFN_REDUC_PLUS = int (END_BUILTINS) + int (IFN_REDUC_PLUS),

CFN_REDUC_MAX = int (END_BUILTINS) + int (IFN_REDUC_MAX),

CFN_REDUC_MIN = int (END_BUILTINS) + int (IFN_REDUC_MIN),

CFN_REDUC_AND = int (END_BUILTINS) + int (IFN_REDUC_AND),

CFN_REDUC_IOR = int (END_BUILTINS) + int (IFN_REDUC_IOR),

CFN_REDUC_XOR = int (END_BUILTINS) + int (IFN_REDUC_XOR),



CFN_EXTRACT_LAST = int (END_BUILTINS) + int (IFN_EXTRACT_LAST),



CFN_FOLD_EXTRACT_LAST = int (END_BUILTINS) + int (IFN_FOLD_EXTRACT_LAST),


CFN_FOLD_LEFT_PLUS = int (END_BUILTINS) + int (IFN_FOLD_LEFT_PLUS),


CFN_MASK_FOLD_LEFT_PLUS = int (END_BUILTINS) + int (IFN_MASK_FOLD_LEFT_PLUS),



CFN_ACOS = int (END_BUILTINS) + int (IFN_ACOS),
CFN_ACOSH = int (END_BUILTINS) + int (IFN_ACOSH),
CFN_ASIN = int (END_BUILTINS) + int (IFN_ASIN),
CFN_ASINH = int (END_BUILTINS) + int (IFN_ASINH),
CFN_ATAN = int (END_BUILTINS) + int (IFN_ATAN),
CFN_ATANH = int (END_BUILTINS) + int (IFN_ATANH),
CFN_COS = int (END_BUILTINS) + int (IFN_COS),
CFN_COSH = int (END_BUILTINS) + int (IFN_COSH),
CFN_EXP = int (END_BUILTINS) + int (IFN_EXP),
CFN_EXP10 = int (END_BUILTINS) + int (IFN_EXP10),
CFN_EXP2 = int (END_BUILTINS) + int (IFN_EXP2),
CFN_EXPM1 = int (END_BUILTINS) + int (IFN_EXPM1),
CFN_LOG = int (END_BUILTINS) + int (IFN_LOG),
CFN_LOG10 = int (END_BUILTINS) + int (IFN_LOG10),
CFN_LOG1P = int (END_BUILTINS) + int (IFN_LOG1P),
CFN_LOG2 = int (END_BUILTINS) + int (IFN_LOG2),
CFN_LOGB = int (END_BUILTINS) + int (IFN_LOGB),
CFN_SIGNBIT = int (END_BUILTINS) + int (IFN_SIGNBIT),
CFN_SIGNIFICAND = int (END_BUILTINS) + int (IFN_SIGNIFICAND),
CFN_SIN = int (END_BUILTINS) + int (IFN_SIN),
CFN_SINH = int (END_BUILTINS) + int (IFN_SINH),
CFN_SQRT = int (END_BUILTINS) + int (IFN_SQRT),
CFN_TAN = int (END_BUILTINS) + int (IFN_TAN),
CFN_TANH = int (END_BUILTINS) + int (IFN_TANH),


CFN_CEIL = int (END_BUILTINS) + int (IFN_CEIL),
CFN_FLOOR = int (END_BUILTINS) + int (IFN_FLOOR),
CFN_NEARBYINT = int (END_BUILTINS) + int (IFN_NEARBYINT),
CFN_RINT = int (END_BUILTINS) + int (IFN_RINT),
CFN_ROUND = int (END_BUILTINS) + int (IFN_ROUND),
CFN_ROUNDEVEN = int (END_BUILTINS) + int (IFN_ROUNDEVEN),
CFN_TRUNC = int (END_BUILTINS) + int (IFN_TRUNC),


CFN_ATAN2 = int (END_BUILTINS) + int (IFN_ATAN2),
CFN_COPYSIGN = int (END_BUILTINS) + int (IFN_COPYSIGN),
CFN_FMOD = int (END_BUILTINS) + int (IFN_FMOD),
CFN_HYPOT = int (END_BUILTINS) + int (IFN_HYPOT),
CFN_POW = int (END_BUILTINS) + int (IFN_POW),
CFN_REMAINDER = int (END_BUILTINS) + int (IFN_REMAINDER),
CFN_SCALB = int (END_BUILTINS) + int (IFN_SCALB),
CFN_FMIN = int (END_BUILTINS) + int (IFN_FMIN),
CFN_FMAX = int (END_BUILTINS) + int (IFN_FMAX),
CFN_XORSIGN = int (END_BUILTINS) + int (IFN_XORSIGN),


CFN_LDEXP = int (END_BUILTINS) + int (IFN_LDEXP),


CFN_FMA = int (END_BUILTINS) + int (IFN_FMA),


CFN_CLRSB = int (END_BUILTINS) + int (IFN_CLRSB),
CFN_CLZ = int (END_BUILTINS) + int (IFN_CLZ),
CFN_CTZ = int (END_BUILTINS) + int (IFN_CTZ),
CFN_FFS = int (END_BUILTINS) + int (IFN_FFS),
CFN_PARITY = int (END_BUILTINS) + int (IFN_PARITY),
CFN_POPCOUNT = int (END_BUILTINS) + int (IFN_POPCOUNT),

CFN_GOMP_USE_SIMT = int (END_BUILTINS) + int (IFN_GOMP_USE_SIMT),
CFN_GOMP_SIMT_ENTER = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ENTER),
CFN_GOMP_SIMT_ENTER_ALLOC = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ENTER_ALLOC),
CFN_GOMP_SIMT_EXIT = int (END_BUILTINS) + int (IFN_GOMP_SIMT_EXIT),
CFN_GOMP_SIMT_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMT_LANE),
CFN_GOMP_SIMT_VF = int (END_BUILTINS) + int (IFN_GOMP_SIMT_VF),
CFN_GOMP_SIMT_LAST_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMT_LAST_LANE),
CFN_GOMP_SIMT_ORDERED_PRED = int (END_BUILTINS) + int (IFN_GOMP_SIMT_ORDERED_PRED),
CFN_GOMP_SIMT_VOTE_ANY = int (END_BUILTINS) + int (IFN_GOMP_SIMT_VOTE_ANY),
CFN_GOMP_SIMT_XCHG_BFLY = int (END_BUILTINS) + int (IFN_GOMP_SIMT_XCHG_BFLY),
CFN_GOMP_SIMT_XCHG_IDX = int (END_BUILTINS) + int (IFN_GOMP_SIMT_XCHG_IDX),
CFN_GOMP_SIMD_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMD_LANE),
CFN_GOMP_SIMD_VF = int (END_BUILTINS) + int (IFN_GOMP_SIMD_VF),
CFN_GOMP_SIMD_LAST_LANE = int (END_BUILTINS) + int (IFN_GOMP_SIMD_LAST_LANE),
CFN_GOMP_SIMD_ORDERED_START = int (END_BUILTINS) + int (IFN_GOMP_SIMD_ORDERED_START),
CFN_GOMP_SIMD_ORDERED_END = int (END_BUILTINS) + int (IFN_GOMP_SIMD_ORDERED_END),
CFN_LOOP_VECTORIZED = int (END_BUILTINS) + int (IFN_LOOP_VECTORIZED),
CFN_LOOP_DIST_ALIAS = int (END_BUILTINS) + int (IFN_LOOP_DIST_ALIAS),
CFN_ANNOTATE = int (END_BUILTINS) + int (IFN_ANNOTATE),
CFN_UBSAN_NULL = int (END_BUILTINS) + int (IFN_UBSAN_NULL),
CFN_UBSAN_BOUNDS = int (END_BUILTINS) + int (IFN_UBSAN_BOUNDS),
CFN_UBSAN_VPTR = int (END_BUILTINS) + int (IFN_UBSAN_VPTR),
CFN_UBSAN_CHECK_ADD = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_ADD),
CFN_UBSAN_CHECK_SUB = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_SUB),
CFN_UBSAN_CHECK_MUL = int (END_BUILTINS) + int (IFN_UBSAN_CHECK_MUL),
CFN_UBSAN_PTR = int (END_BUILTINS) + int (IFN_UBSAN_PTR),
CFN_UBSAN_OBJECT_SIZE = int (END_BUILTINS) + int (IFN_UBSAN_OBJECT_SIZE),
CFN_ABNORMAL_DISPATCHER = int (END_BUILTINS) + int (IFN_ABNORMAL_DISPATCHER),
CFN_BUILTIN_EXPECT = int (END_BUILTINS) + int (IFN_BUILTIN_EXPECT),
CFN_ASAN_CHECK = int (END_BUILTINS) + int (IFN_ASAN_CHECK),
CFN_ASAN_MARK = int (END_BUILTINS) + int (IFN_ASAN_MARK),
CFN_ASAN_POISON = int (END_BUILTINS) + int (IFN_ASAN_POISON),
CFN_ASAN_POISON_USE = int (END_BUILTINS) + int (IFN_ASAN_POISON_USE),
CFN_ADD_OVERFLOW = int (END_BUILTINS) + int (IFN_ADD_OVERFLOW),
CFN_SUB_OVERFLOW = int (END_BUILTINS) + int (IFN_SUB_OVERFLOW),
CFN_MUL_OVERFLOW = int (END_BUILTINS) + int (IFN_MUL_OVERFLOW),
CFN_TSAN_FUNC_EXIT = int (END_BUILTINS) + int (IFN_TSAN_FUNC_EXIT),
CFN_VA_ARG = int (END_BUILTINS) + int (IFN_VA_ARG),
CFN_VEC_CONVERT = int (END_BUILTINS) + int (IFN_VEC_CONVERT),





CFN_UNIQUE = int (END_BUILTINS) + int (IFN_UNIQUE),
CFN_PHI = int (END_BUILTINS) + int (IFN_PHI),







CFN_GOACC_DIM_SIZE = int (END_BUILTINS) + int (IFN_GOACC_DIM_SIZE),
CFN_GOACC_DIM_POS = int (END_BUILTINS) + int (IFN_GOACC_DIM_POS),


CFN_GOACC_LOOP = int (END_BUILTINS) + int (IFN_GOACC_LOOP),


CFN_GOACC_REDUCTION = int (END_BUILTINS) + int (IFN_GOACC_REDUCTION),



CFN_GOACC_TILE = int (END_BUILTINS) + int (IFN_GOACC_TILE),



CFN_SET_EDOM = int (END_BUILTINS) + int (IFN_SET_EDOM),




CFN_ATOMIC_BIT_TEST_AND_SET = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_SET),
CFN_ATOMIC_BIT_TEST_AND_COMPLEMENT = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT),
CFN_ATOMIC_BIT_TEST_AND_RESET = int (END_BUILTINS) + int (IFN_ATOMIC_BIT_TEST_AND_RESET),
CFN_ATOMIC_COMPARE_EXCHANGE = int (END_BUILTINS) + int (IFN_ATOMIC_COMPARE_EXCHANGE),


CFN_FALLTHROUGH = int (END_BUILTINS) + int (IFN_FALLTHROUGH),


CFN_LAUNDER = int (END_BUILTINS) + int (IFN_LAUNDER),


CFN_DIVMOD = int (END_BUILTINS) + int (IFN_DIVMOD),


CFN_CO_ACTOR = int (END_BUILTINS) + int (IFN_CO_ACTOR),
CFN_CO_YIELD = int (END_BUILTINS) + int (IFN_CO_YIELD),
CFN_CO_SUSPN = int (END_BUILTINS) + int (IFN_CO_SUSPN),
CFN_CO_FRAME = int (END_BUILTINS) + int (IFN_CO_FRAME),


CFN_NOP = int (END_BUILTINS) + int (IFN_NOP),
# 207 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 2

  CFN_LAST
};



enum tree_code_class {
  tcc_exceptional,
  tcc_constant,

  tcc_type,
  tcc_declaration,
  tcc_reference,
  tcc_comparison,
  tcc_unary,
  tcc_binary,
  tcc_statement,

  tcc_vl_exp,

  tcc_expression
};



enum omp_clause_code {


  OMP_CLAUSE_ERROR = 0,


  OMP_CLAUSE_PRIVATE,


  OMP_CLAUSE_SHARED,


  OMP_CLAUSE_FIRSTPRIVATE,


  OMP_CLAUSE_LASTPRIVATE,
# 259 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
  OMP_CLAUSE_REDUCTION,


  OMP_CLAUSE_TASK_REDUCTION,


  OMP_CLAUSE_IN_REDUCTION,


  OMP_CLAUSE_COPYIN,


  OMP_CLAUSE_COPYPRIVATE,


  OMP_CLAUSE_LINEAR,


  OMP_CLAUSE_ALIGNED,


  OMP_CLAUSE_DEPEND,


  OMP_CLAUSE_NONTEMPORAL,


  OMP_CLAUSE_UNIFORM,



  OMP_CLAUSE_TO_DECLARE,


  OMP_CLAUSE_LINK,


  OMP_CLAUSE_FROM,


  OMP_CLAUSE_TO,







  OMP_CLAUSE_MAP,



  OMP_CLAUSE_USE_DEVICE_PTR,


  OMP_CLAUSE_USE_DEVICE_ADDR,


  OMP_CLAUSE_IS_DEVICE_PTR,


  OMP_CLAUSE_INCLUSIVE,


  OMP_CLAUSE_EXCLUSIVE,



  OMP_CLAUSE__CACHE_,







  OMP_CLAUSE_GANG,


  OMP_CLAUSE_ASYNC,


  OMP_CLAUSE_WAIT,


  OMP_CLAUSE_AUTO,


  OMP_CLAUSE_SEQ,


  OMP_CLAUSE__LOOPTEMP_,


  OMP_CLAUSE__REDUCTEMP_,


  OMP_CLAUSE__CONDTEMP_,


  OMP_CLAUSE__SCANTEMP_,


  OMP_CLAUSE_IF,


  OMP_CLAUSE_NUM_THREADS,


  OMP_CLAUSE_SCHEDULE,


  OMP_CLAUSE_NOWAIT,


  OMP_CLAUSE_ORDERED,


  OMP_CLAUSE_DEFAULT,


  OMP_CLAUSE_COLLAPSE,


  OMP_CLAUSE_UNTIED,


  OMP_CLAUSE_FINAL,


  OMP_CLAUSE_MERGEABLE,


  OMP_CLAUSE_DEVICE,


  OMP_CLAUSE_DIST_SCHEDULE,


  OMP_CLAUSE_INBRANCH,


  OMP_CLAUSE_NOTINBRANCH,


  OMP_CLAUSE_NUM_TEAMS,


  OMP_CLAUSE_THREAD_LIMIT,


  OMP_CLAUSE_PROC_BIND,


  OMP_CLAUSE_SAFELEN,


  OMP_CLAUSE_SIMDLEN,


  OMP_CLAUSE_DEVICE_TYPE,


  OMP_CLAUSE_FOR,


  OMP_CLAUSE_PARALLEL,


  OMP_CLAUSE_SECTIONS,


  OMP_CLAUSE_TASKGROUP,


  OMP_CLAUSE_PRIORITY,


  OMP_CLAUSE_GRAINSIZE,


  OMP_CLAUSE_NUM_TASKS,


  OMP_CLAUSE_NOGROUP,


  OMP_CLAUSE_THREADS,


  OMP_CLAUSE_SIMD,


  OMP_CLAUSE_HINT,


  OMP_CLAUSE_DEFAULTMAP,


  OMP_CLAUSE_ORDER,


  OMP_CLAUSE_BIND,


  OMP_CLAUSE__SIMDUID_,



  OMP_CLAUSE__SIMT_,


  OMP_CLAUSE_INDEPENDENT,


  OMP_CLAUSE_WORKER,


  OMP_CLAUSE_VECTOR,


  OMP_CLAUSE_NUM_GANGS,


  OMP_CLAUSE_NUM_WORKERS,


  OMP_CLAUSE_VECTOR_LENGTH,


  OMP_CLAUSE_TILE,


  OMP_CLAUSE_IF_PRESENT,


  OMP_CLAUSE_FINALIZE
};



enum tree_node_structure_enum {
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/treestruct.def" 1
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/treestruct.def"
TS_BASE,
TS_TYPED,
TS_COMMON,
TS_INT_CST,
TS_POLY_INT_CST,
TS_REAL_CST,
TS_FIXED_CST,
TS_VECTOR,
TS_STRING,
TS_COMPLEX,
TS_IDENTIFIER,
TS_DECL_MINIMAL,
TS_DECL_COMMON,
TS_DECL_WRTL,
TS_DECL_NON_COMMON,
TS_DECL_WITH_VIS,
TS_FIELD_DECL,
TS_VAR_DECL,
TS_PARM_DECL,
TS_LABEL_DECL,
TS_RESULT_DECL,
TS_CONST_DECL,
TS_TYPE_DECL,
TS_FUNCTION_DECL,
TS_TRANSLATION_UNIT_DECL,
TS_TYPE_COMMON,
TS_TYPE_WITH_LANG_SPECIFIC,
TS_TYPE_NON_COMMON,
TS_LIST,
TS_VEC,
TS_EXP,
TS_SSA_NAME,
TS_BLOCK,
TS_BINFO,
TS_STATEMENT_LIST,
TS_CONSTRUCTOR,
TS_OMP_CLAUSE,
TS_OPTIMIZATION,
TS_TARGET_OPTION,
# 502 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h" 2
  LAST_TS_ENUM
};


enum omp_clause_schedule_kind {
  OMP_CLAUSE_SCHEDULE_STATIC,
  OMP_CLAUSE_SCHEDULE_DYNAMIC,
  OMP_CLAUSE_SCHEDULE_GUIDED,
  OMP_CLAUSE_SCHEDULE_AUTO,
  OMP_CLAUSE_SCHEDULE_RUNTIME,
  OMP_CLAUSE_SCHEDULE_MASK = (1 << 3) - 1,
  OMP_CLAUSE_SCHEDULE_MONOTONIC = (1 << 3),
  OMP_CLAUSE_SCHEDULE_NONMONOTONIC = (1 << 4),
  OMP_CLAUSE_SCHEDULE_LAST = 2 * OMP_CLAUSE_SCHEDULE_NONMONOTONIC - 1
};

enum omp_clause_default_kind {
  OMP_CLAUSE_DEFAULT_UNSPECIFIED,
  OMP_CLAUSE_DEFAULT_SHARED,
  OMP_CLAUSE_DEFAULT_NONE,
  OMP_CLAUSE_DEFAULT_PRIVATE,
  OMP_CLAUSE_DEFAULT_FIRSTPRIVATE,
  OMP_CLAUSE_DEFAULT_PRESENT,
  OMP_CLAUSE_DEFAULT_LAST
};

enum omp_clause_defaultmap_kind {
  OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED,
  OMP_CLAUSE_DEFAULTMAP_CATEGORY_SCALAR,
  OMP_CLAUSE_DEFAULTMAP_CATEGORY_AGGREGATE,
  OMP_CLAUSE_DEFAULTMAP_CATEGORY_ALLOCATABLE,
  OMP_CLAUSE_DEFAULTMAP_CATEGORY_POINTER,
  OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK = 7,
  OMP_CLAUSE_DEFAULTMAP_ALLOC = 1 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1),
  OMP_CLAUSE_DEFAULTMAP_TO = 2 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1),
  OMP_CLAUSE_DEFAULTMAP_FROM = 3 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1),
  OMP_CLAUSE_DEFAULTMAP_TOFROM = 4 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1),
  OMP_CLAUSE_DEFAULTMAP_FIRSTPRIVATE
    = 5 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1),
  OMP_CLAUSE_DEFAULTMAP_NONE = 6 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1),
  OMP_CLAUSE_DEFAULTMAP_DEFAULT
    = 7 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1),
  OMP_CLAUSE_DEFAULTMAP_MASK = 7 * (OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK + 1)
};

enum omp_clause_bind_kind {
  OMP_CLAUSE_BIND_TEAMS,
  OMP_CLAUSE_BIND_PARALLEL,
  OMP_CLAUSE_BIND_THREAD
};



enum omp_memory_order {
  OMP_MEMORY_ORDER_UNSPECIFIED,
  OMP_MEMORY_ORDER_RELAXED,
  OMP_MEMORY_ORDER_ACQUIRE,
  OMP_MEMORY_ORDER_RELEASE,
  OMP_MEMORY_ORDER_ACQ_REL,
  OMP_MEMORY_ORDER_SEQ_CST
};




enum cv_qualifier {
  TYPE_UNQUALIFIED = 0x0,
  TYPE_QUAL_CONST = 0x1,
  TYPE_QUAL_VOLATILE = 0x2,
  TYPE_QUAL_RESTRICT = 0x4,
  TYPE_QUAL_ATOMIC = 0x8
};


enum tree_index {
  TI_ERROR_MARK,
  TI_INTQI_TYPE,
  TI_INTHI_TYPE,
  TI_INTSI_TYPE,
  TI_INTDI_TYPE,
  TI_INTTI_TYPE,

  TI_UINTQI_TYPE,
  TI_UINTHI_TYPE,
  TI_UINTSI_TYPE,
  TI_UINTDI_TYPE,
  TI_UINTTI_TYPE,

  TI_ATOMICQI_TYPE,
  TI_ATOMICHI_TYPE,
  TI_ATOMICSI_TYPE,
  TI_ATOMICDI_TYPE,
  TI_ATOMICTI_TYPE,

  TI_UINT16_TYPE,
  TI_UINT32_TYPE,
  TI_UINT64_TYPE,
  TI_UINT128_TYPE,

  TI_VOID,

  TI_INTEGER_ZERO,
  TI_INTEGER_ONE,
  TI_INTEGER_THREE,
  TI_INTEGER_MINUS_ONE,
  TI_NULL_POINTER,

  TI_SIZE_ZERO,
  TI_SIZE_ONE,

  TI_BITSIZE_ZERO,
  TI_BITSIZE_ONE,
  TI_BITSIZE_UNIT,

  TI_PUBLIC,
  TI_PROTECTED,
  TI_PRIVATE,

  TI_BOOLEAN_FALSE,
  TI_BOOLEAN_TRUE,

  TI_FLOAT_TYPE,
  TI_DOUBLE_TYPE,
  TI_LONG_DOUBLE_TYPE,







  TI_FLOAT16_TYPE,
  TI_FLOATN_TYPE_FIRST = TI_FLOAT16_TYPE,
  TI_FLOATN_NX_TYPE_FIRST = TI_FLOAT16_TYPE,
  TI_FLOAT32_TYPE,
  TI_FLOAT64_TYPE,
  TI_FLOAT128_TYPE,
  TI_FLOATN_TYPE_LAST = TI_FLOAT128_TYPE,

  TI_FLOAT32X_TYPE,
  TI_FLOATNX_TYPE_FIRST = TI_FLOAT32X_TYPE,
  TI_FLOAT64X_TYPE,
  TI_FLOAT128X_TYPE,
  TI_FLOATNX_TYPE_LAST = TI_FLOAT128X_TYPE,
  TI_FLOATN_NX_TYPE_LAST = TI_FLOAT128X_TYPE,
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
  TI_COMPLEX_INTEGER_TYPE,
  TI_COMPLEX_FLOAT_TYPE,
  TI_COMPLEX_DOUBLE_TYPE,
  TI_COMPLEX_LONG_DOUBLE_TYPE,

  TI_COMPLEX_FLOAT16_TYPE,
  TI_COMPLEX_FLOATN_NX_TYPE_FIRST = TI_COMPLEX_FLOAT16_TYPE,
  TI_COMPLEX_FLOAT32_TYPE,
  TI_COMPLEX_FLOAT64_TYPE,
  TI_COMPLEX_FLOAT128_TYPE,
  TI_COMPLEX_FLOAT32X_TYPE,
  TI_COMPLEX_FLOAT64X_TYPE,
  TI_COMPLEX_FLOAT128X_TYPE,

  TI_FLOAT_PTR_TYPE,
  TI_DOUBLE_PTR_TYPE,
  TI_LONG_DOUBLE_PTR_TYPE,
  TI_INTEGER_PTR_TYPE,

  TI_VOID_TYPE,
  TI_PTR_TYPE,
  TI_CONST_PTR_TYPE,
  TI_SIZE_TYPE,
  TI_PID_TYPE,
  TI_PTRDIFF_TYPE,
  TI_VA_LIST_TYPE,
  TI_VA_LIST_GPR_COUNTER_FIELD,
  TI_VA_LIST_FPR_COUNTER_FIELD,
  TI_BOOLEAN_TYPE,
  TI_FILEPTR_TYPE,
  TI_CONST_TM_PTR_TYPE,
  TI_FENV_T_PTR_TYPE,
  TI_CONST_FENV_T_PTR_TYPE,
  TI_FEXCEPT_T_PTR_TYPE,
  TI_CONST_FEXCEPT_T_PTR_TYPE,
  TI_POINTER_SIZED_TYPE,

  TI_DFLOAT32_TYPE,
  TI_DFLOAT64_TYPE,
  TI_DFLOAT128_TYPE,

  TI_VOID_LIST_NODE,

  TI_MAIN_IDENTIFIER,

  TI_SAT_SFRACT_TYPE,
  TI_SAT_FRACT_TYPE,
  TI_SAT_LFRACT_TYPE,
  TI_SAT_LLFRACT_TYPE,
  TI_SAT_USFRACT_TYPE,
  TI_SAT_UFRACT_TYPE,
  TI_SAT_ULFRACT_TYPE,
  TI_SAT_ULLFRACT_TYPE,
  TI_SFRACT_TYPE,
  TI_FRACT_TYPE,
  TI_LFRACT_TYPE,
  TI_LLFRACT_TYPE,
  TI_USFRACT_TYPE,
  TI_UFRACT_TYPE,
  TI_ULFRACT_TYPE,
  TI_ULLFRACT_TYPE,
  TI_SAT_SACCUM_TYPE,
  TI_SAT_ACCUM_TYPE,
  TI_SAT_LACCUM_TYPE,
  TI_SAT_LLACCUM_TYPE,
  TI_SAT_USACCUM_TYPE,
  TI_SAT_UACCUM_TYPE,
  TI_SAT_ULACCUM_TYPE,
  TI_SAT_ULLACCUM_TYPE,
  TI_SACCUM_TYPE,
  TI_ACCUM_TYPE,
  TI_LACCUM_TYPE,
  TI_LLACCUM_TYPE,
  TI_USACCUM_TYPE,
  TI_UACCUM_TYPE,
  TI_ULACCUM_TYPE,
  TI_ULLACCUM_TYPE,
  TI_QQ_TYPE,
  TI_HQ_TYPE,
  TI_SQ_TYPE,
  TI_DQ_TYPE,
  TI_TQ_TYPE,
  TI_UQQ_TYPE,
  TI_UHQ_TYPE,
  TI_USQ_TYPE,
  TI_UDQ_TYPE,
  TI_UTQ_TYPE,
  TI_SAT_QQ_TYPE,
  TI_SAT_HQ_TYPE,
  TI_SAT_SQ_TYPE,
  TI_SAT_DQ_TYPE,
  TI_SAT_TQ_TYPE,
  TI_SAT_UQQ_TYPE,
  TI_SAT_UHQ_TYPE,
  TI_SAT_USQ_TYPE,
  TI_SAT_UDQ_TYPE,
  TI_SAT_UTQ_TYPE,
  TI_HA_TYPE,
  TI_SA_TYPE,
  TI_DA_TYPE,
  TI_TA_TYPE,
  TI_UHA_TYPE,
  TI_USA_TYPE,
  TI_UDA_TYPE,
  TI_UTA_TYPE,
  TI_SAT_HA_TYPE,
  TI_SAT_SA_TYPE,
  TI_SAT_DA_TYPE,
  TI_SAT_TA_TYPE,
  TI_SAT_UHA_TYPE,
  TI_SAT_USA_TYPE,
  TI_SAT_UDA_TYPE,
  TI_SAT_UTA_TYPE,

  TI_OPTIMIZATION_DEFAULT,
  TI_OPTIMIZATION_CURRENT,
  TI_TARGET_OPTION_DEFAULT,
  TI_TARGET_OPTION_CURRENT,
  TI_CURRENT_TARGET_PRAGMA,
  TI_CURRENT_OPTIMIZE_PRAGMA,

  TI_CHREC_DONT_KNOW,
  TI_CHREC_KNOWN,

  TI_MAX
};





enum integer_type_kind {
  itk_char,
  itk_signed_char,
  itk_unsigned_char,
  itk_short,
  itk_unsigned_short,
  itk_int,
  itk_unsigned_int,
  itk_long,
  itk_unsigned_long,
  itk_long_long,
  itk_unsigned_long_long,

  itk_intN_0,
  itk_unsigned_intN_0,
  itk_intN_1,
  itk_unsigned_intN_1,
  itk_intN_2,
  itk_unsigned_intN_2,
  itk_intN_3,
  itk_unsigned_intN_3,

  itk_none
};
# 831 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
enum ptrmemfunc_vbit_where_t {
  ptrmemfunc_vbit_in_pfn,
  ptrmemfunc_vbit_in_delta
};



enum attribute_flags {



  ATTR_FLAG_DECL_NEXT = 1,



  ATTR_FLAG_FUNCTION_NEXT = 2,



  ATTR_FLAG_ARRAY_NEXT = 4,


  ATTR_FLAG_TYPE_IN_PLACE = 8,



  ATTR_FLAG_BUILT_IN = 16,

  ATTR_FLAG_CXX11 = 32
};


enum size_type_kind {
  stk_sizetype,
  stk_ssizetype,
  stk_bitsizetype,
  stk_sbitsizetype,
  stk_type_kind_last
};

enum operand_equal_flag {
  OEP_ONLY_CONST = 1,
  OEP_PURE_SAME = 2,
  OEP_MATCH_SIDE_EFFECTS = 4,
  OEP_ADDRESS_OF = 8,

  OEP_NO_HASH_CHECK = 16,

  OEP_HASH_CHECK = 32,

  OEP_LEXICOGRAPHIC = 64,
  OEP_BITWISE = 128
};



enum tree_node_kind {
  d_kind,
  t_kind,
  b_kind,
  s_kind,
  r_kind,
  e_kind,
  c_kind,
  id_kind,
  vec_kind,
  binfo_kind,
  ssa_name_kind,
  constr_kind,
  x_kind,
  lang_decl,
  lang_type,
  omp_clause_kind,
  all_kinds
};

enum annot_expr_kind {
  annot_expr_ivdep_kind,
  annot_expr_unroll_kind,
  annot_expr_no_vector_kind,
  annot_expr_vector_kind,
  annot_expr_parallel_kind,
  annot_expr_kind_last
};







struct alias_pair {
  tree decl;
  tree target;
};


typedef unsigned short priority_type;


typedef tree (*walk_tree_fn) (tree *, int *, void *);


typedef tree (*walk_tree_lh) (tree *, int *, tree (*) (tree *, int *, void *),
         void *, hash_set<tree> *);
# 962 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
struct tree_base {
  enum tree_code code : 16;

  unsigned side_effects_flag : 1;
  unsigned constant_flag : 1;
  unsigned addressable_flag : 1;
  unsigned volatile_flag : 1;
  unsigned readonly_flag : 1;
  unsigned asm_written_flag: 1;
  unsigned nowarning_flag : 1;
  unsigned visited : 1;

  unsigned used_flag : 1;
  unsigned nothrow_flag : 1;
  unsigned static_flag : 1;
  unsigned public_flag : 1;
  unsigned private_flag : 1;
  unsigned protected_flag : 1;
  unsigned deprecated_flag : 1;
  unsigned default_def_flag : 1;

  union {


    struct {
      unsigned lang_flag_0 : 1;
      unsigned lang_flag_1 : 1;
      unsigned lang_flag_2 : 1;
      unsigned lang_flag_3 : 1;
      unsigned lang_flag_4 : 1;
      unsigned lang_flag_5 : 1;
      unsigned lang_flag_6 : 1;
      unsigned saturating_flag : 1;

      unsigned unsigned_flag : 1;
      unsigned packed_flag : 1;
      unsigned user_align : 1;
      unsigned nameless_flag : 1;
      unsigned atomic_flag : 1;
      unsigned spare0 : 3;

      unsigned spare1 : 8;




      unsigned address_space : 8;
    } bits;






    struct {


      unsigned char unextended;



      unsigned char extended;





      unsigned char offset;
    } int_length;


    int length;


    struct {

      unsigned int log2_npatterns : 8;


      unsigned int nelts_per_pattern : 8;


      unsigned int unused : 16;
    } vector_cst;


    unsigned int version;


    unsigned int chrec_var;


    enum internal_fn ifn;


    enum omp_memory_order omp_atomic_memory_order;
# 1066 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
    struct {
      unsigned short clique;
      unsigned short base;
    } dependence_info;
  } u;
};
# 1371 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
struct tree_typed {
  struct tree_base base;
  tree type;
};

struct tree_common {
  struct tree_typed typed;
  tree chain;
};

struct tree_int_cst {
  struct tree_typed typed;
  long val[1];
};


struct tree_real_cst {
  struct tree_typed typed;
  struct real_value * real_cst_ptr;
};

struct tree_fixed_cst {
  struct tree_typed typed;
  struct fixed_value * fixed_cst_ptr;
};

struct tree_string {
  struct tree_typed typed;
  int length;
  char str[1];
};

struct tree_complex {
  struct tree_typed typed;
  tree real;
  tree imag;
};

struct tree_vector {
  struct tree_typed typed;
  tree elts[1];
};

struct tree_poly_int_cst {
  struct tree_typed typed;
  tree coeffs[1];
};

struct tree_identifier {
  struct tree_common common;
  struct ht_identifier id;
};

struct tree_list {
  struct tree_common common;
  tree purpose;
  tree value;
};

struct tree_vec {
  struct tree_common common;
  tree a[1];
};





struct constructor_elt {
  tree index;
  tree value;
};

struct tree_constructor {
  struct tree_typed typed;
  vec<constructor_elt, va_gc> *elts;
};

enum omp_clause_depend_kind
{
  OMP_CLAUSE_DEPEND_IN,
  OMP_CLAUSE_DEPEND_OUT,
  OMP_CLAUSE_DEPEND_INOUT,
  OMP_CLAUSE_DEPEND_MUTEXINOUTSET,
  OMP_CLAUSE_DEPEND_SOURCE,
  OMP_CLAUSE_DEPEND_SINK,
  OMP_CLAUSE_DEPEND_DEPOBJ,
  OMP_CLAUSE_DEPEND_LAST
};

enum omp_clause_proc_bind_kind
{

  OMP_CLAUSE_PROC_BIND_FALSE = 0,
  OMP_CLAUSE_PROC_BIND_TRUE = 1,
  OMP_CLAUSE_PROC_BIND_MASTER = 2,
  OMP_CLAUSE_PROC_BIND_CLOSE = 3,
  OMP_CLAUSE_PROC_BIND_SPREAD = 4,
  OMP_CLAUSE_PROC_BIND_LAST
};

enum omp_clause_device_type_kind
{
  OMP_CLAUSE_DEVICE_TYPE_HOST = 1,
  OMP_CLAUSE_DEVICE_TYPE_NOHOST = 2,
  OMP_CLAUSE_DEVICE_TYPE_ANY = 3
};

enum omp_clause_linear_kind
{
  OMP_CLAUSE_LINEAR_DEFAULT,
  OMP_CLAUSE_LINEAR_REF,
  OMP_CLAUSE_LINEAR_VAL,
  OMP_CLAUSE_LINEAR_UVAL
};

struct tree_exp {
  struct tree_typed typed;
  location_t locus;
  tree

    operands[1];
};



struct ssa_use_operand_t {
  struct ssa_use_operand_t* prev;
  struct ssa_use_operand_t* next;





  union { gimple *stmt; tree ssa_name; } loc;
  tree * use;
};

struct tree_ssa_name {
  struct tree_typed typed;


  tree var;


  gimple *def_stmt;


  union ssa_name_info_type {

    struct ptr_info_def *ptr_info;

    struct range_info_def *range_info;
  }
                                                   info;


  struct ssa_use_operand_t imm_uses;
};

struct phi_arg_d {


  struct ssa_use_operand_t imm_use;
  tree def;
  location_t locus;
};

struct tree_omp_clause {
  struct tree_common common;
  location_t locus;
  enum omp_clause_code code;
  union omp_clause_subcode {
    enum omp_clause_default_kind default_kind;
    enum omp_clause_schedule_kind schedule_kind;
    enum omp_clause_depend_kind depend_kind;

    unsigned int map_kind;
    enum omp_clause_proc_bind_kind proc_bind_kind;
    enum tree_code reduction_code;
    enum omp_clause_linear_kind linear_kind;
    enum tree_code if_modifier;
    enum omp_clause_defaultmap_kind defaultmap_kind;
    enum omp_clause_bind_kind bind_kind;
    enum omp_clause_device_type_kind device_type_kind;
  } subcode;



  gimple_seq gimple_reduction_init;
  gimple_seq gimple_reduction_merge;

  tree
    ops[1];
};

struct tree_block {
  struct tree_base base;
  tree chain;

  unsigned block_num;

  location_t locus;
  location_t end_locus;

  tree vars;
  vec<tree, va_gc> *nonlocalized_vars;

  tree subblocks;
  tree supercontext;
  tree abstract_origin;
  tree fragment_origin;
  tree fragment_chain;


  struct die_struct *die;
};

struct tree_type_common {
  struct tree_common common;
  tree size;
  tree size_unit;
  tree attributes;
  unsigned int uid;

  unsigned int precision : 10;
  unsigned no_force_blk_flag : 1;
  unsigned needs_constructing_flag : 1;
  unsigned transparent_aggr_flag : 1;
  unsigned restrict_flag : 1;
  unsigned contains_placeholder_bits : 2;

  enum machine_mode mode : 8;



  unsigned string_flag : 1;
  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned lang_flag_7 : 1;






  unsigned align : 6;
  unsigned warn_if_not_align : 6;
  unsigned typeless_storage : 1;
  unsigned empty_flag : 1;
  unsigned indivisible_p : 1;
  unsigned spare : 16;

  alias_set_type alias_set;
  tree pointer_to;
  tree reference_to;
  union tree_type_symtab {
    int address;
    struct die_struct * die;
  } symtab;
  tree canonical;
  tree next_variant;
  tree main_variant;
  tree context;
  tree name;
};

struct tree_type_with_lang_specific {
  struct tree_type_common common;

  struct lang_type *lang_specific;
};

struct tree_type_non_common {
  struct tree_type_with_lang_specific with_lang_specific;
  tree values;
  tree minval;
  tree maxval;
  tree lang_1;
};

struct tree_binfo {
  struct tree_common common;

  tree offset;
  tree vtable;
  tree virtuals;
  tree vptr_field;
  vec<tree, va_gc> *base_accesses;
  tree inheritance;

  tree vtt_subvtt;
  tree vtt_vptr;

  vec<tree, va_gc> base_binfos;
};

struct tree_decl_minimal {
  struct tree_common common;
  location_t locus;
  unsigned int uid;
  tree name;
  tree context;
};

struct tree_decl_common {
  struct tree_decl_minimal common;
  tree size;

  enum machine_mode mode : 8;

  unsigned nonlocal_flag : 1;
  unsigned virtual_flag : 1;
  unsigned ignored_flag : 1;
  unsigned abstract_flag : 1;
  unsigned artificial_flag : 1;
  unsigned preserve_flag: 1;
  unsigned debug_expr_is_from : 1;

  unsigned lang_flag_0 : 1;
  unsigned lang_flag_1 : 1;
  unsigned lang_flag_2 : 1;
  unsigned lang_flag_3 : 1;
  unsigned lang_flag_4 : 1;
  unsigned lang_flag_5 : 1;
  unsigned lang_flag_6 : 1;
  unsigned lang_flag_7 : 1;
  unsigned lang_flag_8 : 1;




  unsigned decl_flag_0 : 1;



  unsigned decl_flag_1 : 1;



  unsigned decl_flag_2 : 1;

  unsigned decl_flag_3 : 1;


  unsigned not_gimple_reg_flag : 1;

  unsigned decl_by_reference_flag : 1;

  unsigned decl_read_flag : 1;


  unsigned decl_nonshareable_flag : 1;


  unsigned int off_align : 6;


  unsigned int align : 6;



  unsigned int warn_if_not_align : 6;




  unsigned int pt_uid;

  tree size_unit;
  tree initial;
  tree attributes;
  tree abstract_origin;


  struct lang_decl *lang_specific;
};

struct tree_decl_with_rtl {
  struct tree_decl_common common;
  rtx rtl;
};

struct tree_field_decl {
  struct tree_decl_common common;

  tree offset;
  tree bit_field_type;
  tree qualifier;
  tree bit_offset;
  tree fcontext;
};

struct tree_label_decl {
  struct tree_decl_with_rtl common;
  int label_decl_uid;
  int eh_landing_pad_nr;
};

struct tree_result_decl {
  struct tree_decl_with_rtl common;
};

struct tree_const_decl {
  struct tree_decl_common common;
};

struct tree_parm_decl {
  struct tree_decl_with_rtl common;
  rtx incoming_rtl;
};

struct tree_decl_with_vis {
 struct tree_decl_with_rtl common;
 tree assembler_name;
 struct symtab_node *symtab_node;


 unsigned defer_output : 1;
 unsigned hard_register : 1;
 unsigned common_flag : 1;
 unsigned in_text_section : 1;
 unsigned in_constant_pool : 1;
 unsigned dllimport_flag : 1;

 unsigned weak_flag : 1;

 unsigned seen_in_bind_expr : 1;
 unsigned comdat_flag : 1;

 enum symbol_visibility visibility : 2;
 unsigned visibility_specified : 1;


 unsigned init_priority_p : 1;

 unsigned shadowed_for_var_p : 1;

 unsigned cxx_constructor : 1;

 unsigned cxx_destructor : 1;

 unsigned final : 1;

 unsigned regdecl_flag : 1;


};

struct tree_var_decl {
  struct tree_decl_with_vis common;
};

struct tree_decl_non_common {
  struct tree_decl_with_vis common;

  tree result;
};



enum function_decl_type
{
  NONE,
  OPERATOR_NEW,
  OPERATOR_DELETE,
  LAMBDA_FUNCTION


};






struct tree_function_decl {
  struct tree_decl_non_common common;

  struct function *f;


  tree arguments;

  tree personality;


  tree function_specific_target;
  tree function_specific_optimization;


  tree saved_tree;

  tree vindex;


  unsigned int function_code;

  enum built_in_class built_in_class : 2;
  unsigned static_ctor_flag : 1;
  unsigned static_dtor_flag : 1;
  unsigned uninlinable : 1;
  unsigned possibly_inlined : 1;
  unsigned novops_flag : 1;
  unsigned returns_twice_flag : 1;

  unsigned malloc_flag : 1;
  unsigned declared_inline_flag : 1;
  unsigned no_inline_warning_flag : 1;
  unsigned no_instrument_function_entry_exit : 1;
  unsigned no_limit_stack : 1;
  unsigned disregard_inline_limits : 1;
  unsigned pure_flag : 1;
  unsigned looping_const_or_pure_flag : 1;


  enum function_decl_type decl_type: 2;
  unsigned has_debug_args_flag : 1;
  unsigned versioned_function : 1;
  unsigned replaceable_operator : 1;



};

struct tree_translation_unit_decl {
  struct tree_decl_common common;

  const char * language;


};

struct tree_type_decl {
  struct tree_decl_non_common common;

};

struct tree_statement_list_node
 {
  struct tree_statement_list_node *prev;
  struct tree_statement_list_node *next;
  tree stmt;
};

struct tree_statement_list
 {
  struct tree_typed typed;
  struct tree_statement_list_node *head;
  struct tree_statement_list_node *tail;
};




struct tree_optimization_option {
  struct tree_base base;


  struct cl_optimization *opts;



  void * optabs;



  struct target_optabs * base_optabs;
};



class target_globals;



struct tree_target_option {
  struct tree_base base;


  class target_globals *globals;


  struct cl_target_option *opts;
};




union
                                                         tree_node {
  struct tree_base base;
  struct tree_typed typed;
  struct tree_common common;
  struct tree_int_cst int_cst;
  struct tree_poly_int_cst poly_int_cst;
  struct tree_real_cst real_cst;
  struct tree_fixed_cst fixed_cst;
  struct tree_vector vector;
  struct tree_string string;
  struct tree_complex complex;
  struct tree_identifier identifier;
  struct tree_decl_minimal decl_minimal;
  struct tree_decl_common decl_common;
  struct tree_decl_with_rtl decl_with_rtl;
  struct tree_decl_non_common
    decl_non_common;
  struct tree_parm_decl parm_decl;
  struct tree_decl_with_vis decl_with_vis;
  struct tree_var_decl var_decl;
  struct tree_field_decl field_decl;
  struct tree_label_decl label_decl;
  struct tree_result_decl result_decl;
  struct tree_const_decl const_decl;
  struct tree_type_decl type_decl;
  struct tree_function_decl function_decl;
  struct tree_translation_unit_decl
    translation_unit_decl;
  struct tree_type_common type_common;
  struct tree_type_with_lang_specific
    type_with_lang_specific;
  struct tree_type_non_common
    type_non_common;
  struct tree_list list;
  struct tree_vec vec;
  struct tree_exp exp;
  struct tree_ssa_name ssa_name;
  struct tree_block block;
  struct tree_binfo binfo;
  struct tree_statement_list stmt_list;
  struct tree_constructor constructor;
  struct tree_omp_clause omp_clause;
  struct tree_optimization_option optimization;
  struct tree_target_option target_option;
};


struct attribute_spec {


  const char *name;

  int min_length;


  int max_length;







  bool decl_required;


  bool type_required;




  bool function_type_required;

  bool affects_type_identity;
# 2054 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-core.h"
  tree (*handler) (tree *node, tree name, tree args,
     int flags, bool *no_add_attrs);




  struct exclusions {
    const char *name;
    bool function;
    bool variable;
    bool type;
  };



  const exclusions *exclude;
};







typedef struct record_layout_info_s {

  tree t;


  tree offset;

  unsigned int offset_align;

  tree bitpos;

  unsigned int record_align;


  unsigned int unpacked_align;

  tree prev_field;


  vec<tree, va_gc> *pending_statics;

  int remaining_in_alignment;


  int packed_maybe_necessary;
} *record_layout_info;


struct function_args_iterator {
  tree next;
};


struct tree_map_base {
  tree from;
};



struct tree_map {
  struct tree_map_base base;
  unsigned int hash;
  tree to;
};


struct tree_decl_map {
  struct tree_map_base base;
  tree to;
};


struct tree_int_map {
  struct tree_map_base base;
  unsigned int to;
};


struct tree_vec_map {
  struct tree_map_base base;
  vec<tree, va_gc> *to;
};






struct call_expr_arg_iterator {
  tree t;
  int n;
  int i;
};

struct const_call_expr_arg_iterator {
  const_tree t;
  int n;
  int i;
};



struct builtin_info_type {
  tree decl;


  unsigned implicit_p : 1;

  unsigned declared_p : 1;
};



struct floatn_type_info {

  int n;


  bool extended;
};






extern bool tree_contains_struct[MAX_TREE_CODES][64];


extern const enum tree_code_class tree_code_type[];



extern const char *const tree_code_class_strings[];


extern const unsigned char tree_code_length[];


extern vec<alias_pair, va_gc> *alias_pairs;


extern const char *const built_in_class_names[(BUILT_IN_NORMAL + 1)];


extern const char * built_in_names[(int) END_BUILTINS];


extern unsigned const char omp_clause_num_ops[];
extern const char * const omp_clause_code_name[];


extern vec<tree, va_gc> *all_translation_units;


extern tree global_trees[TI_MAX];



extern tree integer_types[itk_none];


extern tree sizetype_tab[(int) stk_type_kind_last];


extern uint64_t tree_node_counts[];
extern uint64_t tree_node_sizes[];




extern bool in_gimple_form;


extern builtin_info_type builtin_info[(int)END_BUILTINS];


extern unsigned int maximum_field_alignment;


extern tree current_function_decl;


extern const char * current_function_func_begin_label;


extern const floatn_type_info floatn_nx_types[(TI_FLOATN_NX_TYPE_LAST - TI_FLOATN_NX_TYPE_FIRST + 1)];
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h" 2



inline combined_fn
as_combined_fn (built_in_function fn)
{
  return combined_fn (int (fn));
}



inline combined_fn
as_combined_fn (internal_fn fn)
{
  return combined_fn (int (fn) + int (END_BUILTINS));
}



inline bool
builtin_fn_p (combined_fn code)
{
  return int (code) < int (END_BUILTINS);
}




inline built_in_function
as_builtin_fn (combined_fn code)
{
  ((void)(!(builtin_fn_p (code)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 55, __FUNCTION__), 0 : 0));
  return built_in_function (int (code));
}



inline bool
internal_fn_p (combined_fn code)
{
  return int (code) >= int (END_BUILTINS);
}




inline internal_fn
as_internal_fn (combined_fn code)
{
  ((void)(!(internal_fn_p (code)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 73, __FUNCTION__), 0 : 0));
  return internal_fn (int (code) - int (END_BUILTINS));
}
# 351 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern void tree_contains_struct_check_failed (const_tree,
            const enum tree_node_structure_enum,
            const char *, int, const char *)
  __attribute__ ((__noreturn__)) __attribute__ ((__cold__));

extern void tree_check_failed (const_tree, const char *, int, const char *,
          ...) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_not_check_failed (const_tree, const char *, int, const char *,
       ...) __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_class_check_failed (const_tree, const enum tree_code_class,
         const char *, int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_range_check_failed (const_tree, const char *, int,
         const char *, enum tree_code,
         enum tree_code)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_not_class_check_failed (const_tree,
      const enum tree_code_class,
      const char *, int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_int_cst_elt_check_failed (int, int, const char *,
        int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_vec_elt_check_failed (int, int, const char *,
           int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void phi_node_elt_check_failed (int, int, const char *,
           int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void tree_operand_check_failed (int, const_tree,
           const char *, int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void omp_clause_check_failed (const_tree, const char *, int,
         const char *, enum omp_clause_code)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void omp_clause_operand_check_failed (int, const_tree, const char *,
                 int, const char *)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
extern void omp_clause_range_check_failed (const_tree, const char *, int,
          const char *, enum omp_clause_code,
          enum omp_clause_code)
    __attribute__ ((__noreturn__)) __attribute__ ((__cold__));
# 428 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
# 1 "./tree-check.h" 1
# 429 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h" 2
# 1200 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
static inline source_range
get_expr_source_range (tree expr)
{
  location_t loc = ((((expr)) && ((tree_code_type[(int) (((enum tree_code) ((expr))->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) ((expr))->base.code))]) <= tcc_expression)) ? (expr)->exp.locus : ((location_t) 0));
  return get_range_from_loc (line_table, loc);
}

extern void protected_set_expr_location (tree, location_t);
extern void protected_set_expr_location_if_unset (tree, location_t);

extern tree maybe_wrap_with_location (tree, location_t);

extern int suppress_location_wrappers;





class auto_suppress_location_wrappers
{
 public:
  auto_suppress_location_wrappers () { ++suppress_location_wrappers; }
  ~auto_suppress_location_wrappers () { --suppress_location_wrappers; }
};
# 1996 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern machine_mode element_mode (const_tree);
extern machine_mode vector_type_mode (const_tree);
extern unsigned int vector_element_bits (const_tree);
extern tree vector_element_bits_tree (const_tree);
# 2653 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree decl_value_expr_lookup (tree);
extern void decl_value_expr_insert (tree, tree);
# 2940 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree decl_debug_expr_lookup (tree);
extern void decl_debug_expr_insert (tree, tree);
# 2952 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern priority_type decl_init_priority_lookup (tree);
extern priority_type decl_fini_priority_lookup (tree);
extern void decl_init_priority_insert (tree, priority_type);
extern void decl_fini_priority_insert (tree, priority_type);
# 3035 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
static inline void
set_function_decl_type (tree decl, function_decl_type t, bool set)
{
  if (set)
    {
      ((void)(!((decl->function_decl.decl_type) == NONE || (decl->function_decl.decl_type) == t) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3040, __FUNCTION__), 0 : 0))
                                           ;
      decl->function_decl.decl_type = t;
    }
  else if ((decl->function_decl.decl_type) == t)
    (decl->function_decl.decl_type) = NONE;
}
# 3169 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern vec<tree, va_gc> **decl_debug_args_lookup (tree);
extern vec<tree, va_gc> **decl_debug_args_insert (tree);
# 3276 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree build_optimization_node (struct gcc_options *opts);
# 3285 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree build_target_option_node (struct gcc_options *opts);

extern void prepare_target_option_nodes_for_pch (void);



inline tree
tree_check (tree __t, const char *__f, int __l, const char *__g, tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) != __c)
    tree_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline tree
tree_not_check (tree __t, const char *__f, int __l, const char *__g,
                enum tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) == __c)
    tree_not_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline tree
tree_check2 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline tree
tree_not_check2 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline tree
tree_check3 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline tree
tree_not_check3 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline tree
tree_check4 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline tree
tree_not_check4 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline tree
tree_check5 (tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4
      && ((enum tree_code) (__t)->base.code) != __c5)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline tree
tree_not_check5 (tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4
      || ((enum tree_code) (__t)->base.code) == __c5)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline tree
contains_struct_check (tree __t, const enum tree_node_structure_enum __s,
                       const char *__f, int __l, const char *__g)
{
  if (tree_contains_struct[((enum tree_code) (__t)->base.code)][__s] != 1)
      tree_contains_struct_check_failed (__t, __s, __f, __l, __g);
  return __t;
}

inline tree
tree_class_check (tree __t, const enum tree_code_class __class,
                  const char *__f, int __l, const char *__g)
{
  if (tree_code_type[(int) (((enum tree_code) (__t)->base.code))] != __class)
    tree_class_check_failed (__t, __class, __f, __l, __g);
  return __t;
}

inline tree
tree_range_check (tree __t,
                  enum tree_code __code1, enum tree_code __code2,
                  const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) < __code1 || ((enum tree_code) (__t)->base.code) > __code2)
    tree_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}

inline tree
omp_clause_subcode_check (tree __t, enum omp_clause_code __code,
                          const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__t->omp_clause.code != __code)
    omp_clause_check_failed (__t, __f, __l, __g, __code);
  return __t;
}

inline tree
omp_clause_range_check (tree __t,
                        enum omp_clause_code __code1,
                        enum omp_clause_code __code2,
                        const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if ((int) __t->omp_clause.code < (int) __code1
      || (int) __t->omp_clause.code > (int) __code2)
    omp_clause_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}



inline tree
expr_check (tree __t, const char *__f, int __l, const char *__g)
{
  char const __c = tree_code_type[(int) (((enum tree_code) (__t)->base.code))];
  if (!((__c) >= tcc_reference && (__c) <= tcc_expression))
    tree_class_check_failed (__t, tcc_expression, __f, __l, __g);
  return __t;
}



inline tree
non_type_check (tree __t, const char *__f, int __l, const char *__g)
{
  if ((tree_code_type[(int) (((enum tree_code) (__t)->base.code))] == tcc_type))
    tree_not_class_check_failed (__t, tcc_type, __f, __l, __g);
  return __t;
}

inline const long *
tree_int_cst_elt_check (const_tree __t, int __i,
   const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != INTEGER_CST)
    tree_check_failed (__t, __f, __l, __g, INTEGER_CST, 0);
  if (__i < 0 || __i >= __t->base.u.int_length.extended)
    tree_int_cst_elt_check_failed (__i, __t->base.u.int_length.extended,
       __f, __l, __g);
  return &(const_cast<union tree_node *> (((__t))))->int_cst.val[__i];
}

inline long *
tree_int_cst_elt_check (tree __t, int __i,
   const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != INTEGER_CST)
    tree_check_failed (__t, __f, __l, __g, INTEGER_CST, 0);
  if (__i < 0 || __i >= __t->base.u.int_length.extended)
    tree_int_cst_elt_check_failed (__i, __t->base.u.int_length.extended,
       __f, __l, __g);
  return &(const_cast<union tree_node *> (((__t))))->int_cst.val[__i];
}




#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-overflow"


inline tree *
tree_vec_elt_check (tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != TREE_VEC)
    tree_check_failed (__t, __f, __l, __g, TREE_VEC, 0);
  if (__i < 0 || __i >= __t->base.u.length)
    tree_vec_elt_check_failed (__i, __t->base.u.length, __f, __l, __g);
  return &(const_cast<union tree_node *> (((__t))))->vec.a[__i];
}


#pragma GCC diagnostic pop


inline tree *
omp_clause_elt_check (tree __t, int __i,
                      const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__i < 0 || __i >= omp_clause_num_ops [__t->omp_clause.code])
    omp_clause_operand_check_failed (__i, __t, __f, __l, __g);
  return &__t->omp_clause.ops[__i];
}



inline tree
any_integral_type_check (tree __t, const char *__f, int __l, const char *__g)
{
  if (!((((enum tree_code) (__t)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (__t)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (__t)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (__t)->base.code) == COMPLEX_TYPE || (((enum tree_code) (__t)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3540, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3540, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3540, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))))
    tree_check_failed (__t, __f, __l, __g, BOOLEAN_TYPE, ENUMERAL_TYPE,
         INTEGER_TYPE, 0);
  return __t;
}

inline const_tree
tree_check (const_tree __t, const char *__f, int __l, const char *__g,
     tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) != __c)
    tree_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline const_tree
tree_not_check (const_tree __t, const char *__f, int __l, const char *__g,
                enum tree_code __c)
{
  if (((enum tree_code) (__t)->base.code) == __c)
    tree_not_check_failed (__t, __f, __l, __g, __c, 0);
  return __t;
}

inline const_tree
tree_check2 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline const_tree
tree_not_check2 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, 0);
  return __t;
}

inline const_tree
tree_check3 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline const_tree
tree_not_check3 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, 0);
  return __t;
}

inline const_tree
tree_check4 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline const_tree
tree_not_check4 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, 0);
  return __t;
}

inline const_tree
tree_check5 (const_tree __t, const char *__f, int __l, const char *__g,
             enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
             enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) != __c1
      && ((enum tree_code) (__t)->base.code) != __c2
      && ((enum tree_code) (__t)->base.code) != __c3
      && ((enum tree_code) (__t)->base.code) != __c4
      && ((enum tree_code) (__t)->base.code) != __c5)
    tree_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline const_tree
tree_not_check5 (const_tree __t, const char *__f, int __l, const char *__g,
                 enum tree_code __c1, enum tree_code __c2, enum tree_code __c3,
                 enum tree_code __c4, enum tree_code __c5)
{
  if (((enum tree_code) (__t)->base.code) == __c1
      || ((enum tree_code) (__t)->base.code) == __c2
      || ((enum tree_code) (__t)->base.code) == __c3
      || ((enum tree_code) (__t)->base.code) == __c4
      || ((enum tree_code) (__t)->base.code) == __c5)
    tree_not_check_failed (__t, __f, __l, __g, __c1, __c2, __c3, __c4, __c5, 0);
  return __t;
}

inline const_tree
contains_struct_check (const_tree __t, const enum tree_node_structure_enum __s,
                       const char *__f, int __l, const char *__g)
{
  if (tree_contains_struct[((enum tree_code) (__t)->base.code)][__s] != 1)
      tree_contains_struct_check_failed (__t, __s, __f, __l, __g);
  return __t;
}

inline const_tree
tree_class_check (const_tree __t, const enum tree_code_class __class,
                  const char *__f, int __l, const char *__g)
{
  if (tree_code_type[(int) (((enum tree_code) (__t)->base.code))] != __class)
    tree_class_check_failed (__t, __class, __f, __l, __g);
  return __t;
}

inline const_tree
tree_range_check (const_tree __t,
                  enum tree_code __code1, enum tree_code __code2,
                  const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) < __code1 || ((enum tree_code) (__t)->base.code) > __code2)
    tree_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}

inline const_tree
omp_clause_subcode_check (const_tree __t, enum omp_clause_code __code,
                          const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__t->omp_clause.code != __code)
    omp_clause_check_failed (__t, __f, __l, __g, __code);
  return __t;
}

inline const_tree
omp_clause_range_check (const_tree __t,
                        enum omp_clause_code __code1,
                        enum omp_clause_code __code2,
                        const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if ((int) __t->omp_clause.code < (int) __code1
      || (int) __t->omp_clause.code > (int) __code2)
    omp_clause_range_check_failed (__t, __f, __l, __g, __code1, __code2);
  return __t;
}

inline const_tree
expr_check (const_tree __t, const char *__f, int __l, const char *__g)
{
  char const __c = tree_code_type[(int) (((enum tree_code) (__t)->base.code))];
  if (!((__c) >= tcc_reference && (__c) <= tcc_expression))
    tree_class_check_failed (__t, tcc_expression, __f, __l, __g);
  return __t;
}

inline const_tree
non_type_check (const_tree __t, const char *__f, int __l, const char *__g)
{
  if ((tree_code_type[(int) (((enum tree_code) (__t)->base.code))] == tcc_type))
    tree_not_class_check_failed (__t, tcc_type, __f, __l, __g);
  return __t;
}


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-overflow"


inline const_tree *
tree_vec_elt_check (const_tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != TREE_VEC)
    tree_check_failed (__t, __f, __l, __g, TREE_VEC, 0);
  if (__i < 0 || __i >= __t->base.u.length)
    tree_vec_elt_check_failed (__i, __t->base.u.length, __f, __l, __g);
  return (const_cast<const_tree *> ((&__t->vec.a[__i])));

}


#pragma GCC diagnostic pop


inline const_tree *
omp_clause_elt_check (const_tree __t, int __i,
                      const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != OMP_CLAUSE)
    tree_check_failed (__t, __f, __l, __g, OMP_CLAUSE, 0);
  if (__i < 0 || __i >= omp_clause_num_ops [__t->omp_clause.code])
    omp_clause_operand_check_failed (__i, __t, __f, __l, __g);
  return (const_cast<const_tree *> ((&__t->omp_clause.ops[__i])));
}

inline const_tree
any_integral_type_check (const_tree __t, const char *__f, int __l,
    const char *__g)
{
  if (!((((enum tree_code) (__t)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (__t)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (__t)->base.code) == INTEGER_TYPE) || ((((enum tree_code) (__t)->base.code) == COMPLEX_TYPE || (((enum tree_code) (__t)->base.code) == VECTOR_TYPE)) && (((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3766, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3766, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((__t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3766, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))))
    tree_check_failed (__t, __f, __l, __g, BOOLEAN_TYPE, ENUMERAL_TYPE,
         INTEGER_TYPE, 0);
  return __t;
}






static inline int
tree_operand_length (const_tree node)
{
  if ((tree_code_type[(int) (((enum tree_code) (node)->base.code))] == tcc_vl_exp))
    return ((int)((unsigned long) (*tree_int_cst_elt_check (((tree_class_check ((node), (tcc_vl_exp), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3781, __FUNCTION__))->exp.operands[0]), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3781, __FUNCTION__))));
  else
    return tree_code_length[(int) (((enum tree_code) (node)->base.code))];
}




inline tree *
tree_operand_check (tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  const_tree __u = (expr_check ((__t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3793, __FUNCTION__));
  if (__i < 0 || __i >= tree_operand_length (__u))
    tree_operand_check_failed (__i, __u, __f, __l, __g);
  return &(const_cast<union tree_node *> (((__u))))->exp.operands[__i];
}

inline tree *
tree_operand_check_code (tree __t, enum tree_code __code, int __i,
                         const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != __code)
    tree_check_failed (__t, __f, __l, __g, __code, 0);
  if (__i < 0 || __i >= tree_operand_length (__t))
    tree_operand_check_failed (__i, __t, __f, __l, __g);
  return &__t->exp.operands[__i];
}

inline const_tree *
tree_operand_check (const_tree __t, int __i,
                    const char *__f, int __l, const char *__g)
{
  const_tree __u = (expr_check ((__t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3814, __FUNCTION__));
  if (__i < 0 || __i >= tree_operand_length (__u))
    tree_operand_check_failed (__i, __u, __f, __l, __g);
  return (const_cast<const_tree *> ((&__u->exp.operands[__i])));
}

inline const_tree *
tree_operand_check_code (const_tree __t, enum tree_code __code, int __i,
                         const char *__f, int __l, const char *__g)
{
  if (((enum tree_code) (__t)->base.code) != __code)
    tree_check_failed (__t, __f, __l, __g, __code, 0);
  if (__i < 0 || __i >= tree_operand_length (__t))
    tree_operand_check_failed (__i, __t, __f, __l, __g);
  return (const_cast<const_tree *> ((&__t->exp.operands[__i])));
}





inline bool
id_equal (const_tree id, const char *str)
{
  return !strcmp (((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3838, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str), str);
}

inline bool
id_equal (const char *str, const_tree id)
{
  return !strcmp (str, ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3844, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
}



inline poly_uint64
TYPE_VECTOR_SUBPARTS (const_tree node)
{
  static_assert ((1 <= 2), "NUM_POLY_INT_COEFFS <= 2");
  unsigned int precision = (tree_check ((node), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3853, __FUNCTION__, (VECTOR_TYPE)))->type_common.precision;
  if (1 == 2)
    {


      poly_uint64 res = 0;
      res.coeffs[0] = 1UL << (precision & 0xff);
      if (precision & 0x100)
 res.coeffs[1] = 1UL << (precision & 0xff);
      return res;
    }
  else
    return 1UL << precision;
}




inline void
SET_TYPE_VECTOR_SUBPARTS (tree node, poly_uint64 subparts)
{
  static_assert ((1 <= 2), "NUM_POLY_INT_COEFFS <= 2");
  unsigned long coeff0 = subparts.coeffs[0];
  int index = exact_log2 (coeff0);
  ((void)(!(index >= 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3877, __FUNCTION__), 0 : 0));
  if (1 == 2)
    {
# 3895 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
      unsigned long coeff1 = subparts.coeffs[1];
      ((void)(!(coeff1 == 0 || coeff1 == coeff0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3896, __FUNCTION__), 0 : 0));
      (tree_check ((node), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3897, __FUNCTION__, (VECTOR_TYPE)))->type_common.precision
 = index + (coeff1 != 0 ? 0x100 : 0);
    }
  else
    (tree_check ((node), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3901, __FUNCTION__, (VECTOR_TYPE)))->type_common.precision = index;
}




static inline bool
valid_vector_subparts_p (poly_uint64 subparts)
{
  unsigned long coeff0 = subparts.coeffs[0];
  if (!pow2p_hwi (coeff0))
    return false;
  if (1 == 2)
    {
      unsigned long coeff1 = subparts.coeffs[1];
      if (coeff1 != 0 && coeff1 != coeff0)
 return false;
    }
  return true;
}



inline built_in_function
DECL_FUNCTION_CODE (const_tree decl)
{
  const tree_function_decl &fndecl = (tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3927, __FUNCTION__, (FUNCTION_DECL)))->function_decl;
  ((void)(!(fndecl.built_in_class == BUILT_IN_NORMAL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3928, __FUNCTION__), 0 : 0));
  return (built_in_function) fndecl.function_code;
}




inline int
DECL_MD_FUNCTION_CODE (const_tree decl)
{
  const tree_function_decl &fndecl = (tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3938, __FUNCTION__, (FUNCTION_DECL)))->function_decl;
  ((void)(!(fndecl.built_in_class == BUILT_IN_MD) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3939, __FUNCTION__), 0 : 0));
  return fndecl.function_code;
}




inline int
DECL_FE_FUNCTION_CODE (const_tree decl)
{
  const tree_function_decl &fndecl = (tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3949, __FUNCTION__, (FUNCTION_DECL)))->function_decl;
  ((void)(!(fndecl.built_in_class == BUILT_IN_FRONTEND) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3950, __FUNCTION__), 0 : 0));
  return fndecl.function_code;
}



inline void
set_decl_built_in_function (tree decl, built_in_class fclass,
       unsigned int fcode)
{
  tree_function_decl &fndecl = (tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3960, __FUNCTION__, (FUNCTION_DECL)))->function_decl;
  fndecl.built_in_class = fclass;
  fndecl.function_code = fcode;
}



inline void
copy_decl_built_in_function (tree newdecl, const_tree olddecl)
{
  tree_function_decl &newfndecl = (tree_check ((newdecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3970, __FUNCTION__, (FUNCTION_DECL)))->function_decl;
  const tree_function_decl &oldfndecl
    = (tree_check ((olddecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 3972, __FUNCTION__, (FUNCTION_DECL)))->function_decl;
  newfndecl.built_in_class = oldfndecl.built_in_class;
  newfndecl.function_code = oldfndecl.function_code;
}
# 3987 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
inline bool
location_wrapper_p (const_tree exp)
{
# 3998 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
  if ((((enum tree_code) (exp)->base.code) == NON_LVALUE_EXPR
       || ((enum tree_code) (exp)->base.code) == VIEW_CONVERT_EXPR)
      && ((tree_check2 ((exp), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4000, __FUNCTION__, (NON_LVALUE_EXPR), (VIEW_CONVERT_EXPR)))->base.public_flag))
    return true;
  return false;
}



inline tree
tree_strip_any_location_wrapper (tree exp)
{
  if (location_wrapper_p (exp))
    return (*((const_cast<tree*> (tree_operand_check ((exp), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4011, __FUNCTION__)))));
  else
    return exp;
}
# 4253 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
inline unsigned int
vector_cst_encoded_nelts (const_tree t)
{
  return (1U << ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4256, __FUNCTION__, (VECTOR_CST)))->base.u.vector_cst.log2_npatterns)) * ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4256, __FUNCTION__, (VECTOR_CST)))->base.u.vector_cst.nelts_per_pattern);
}

extern tree decl_assembler_name (tree);
extern void overwrite_decl_assembler_name (tree decl, tree name);
extern tree decl_comdat_group (const_tree);
extern tree decl_comdat_group_id (const_tree);
extern const char *decl_section_name (const_tree);
extern void set_decl_section_name (tree, const char *);
extern enum tls_model decl_tls_model (const_tree);
extern void set_decl_tls_model (tree, enum tls_model);




extern size_t tree_size (const_tree);




extern size_t tree_code_size (enum tree_code);


extern int allocate_decl_uid (void);





extern tree make_node (enum tree_code );



extern void free_node (tree);



extern tree copy_node (tree );



extern tree copy_list (tree);



extern tree build_case_label (tree, tree, tree);


extern tree make_tree_binfo (unsigned );



extern tree make_int_cst (int, int );



extern tree make_tree_vec (int );



extern tree grow_tree_vec (tree v, int );



extern tree build_nt (enum tree_code, ...);
extern tree build_nt_call_vec (tree, vec<tree, va_gc> *);

extern tree build0 (enum tree_code, tree );
extern tree build1 (enum tree_code, tree, tree );
extern tree build2 (enum tree_code, tree, tree, tree );
extern tree build3 (enum tree_code, tree, tree, tree, tree );
extern tree build4 (enum tree_code, tree, tree, tree, tree,
      tree );
extern tree build5 (enum tree_code, tree, tree, tree, tree, tree,
      tree );



static inline tree
build1_loc (location_t loc, enum tree_code code, tree type,
     tree arg1 )
{
  tree t = build1 (code, type, arg1 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4340, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build2_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1 )
{
  tree t = build2 (code, type, arg0, arg1 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4350, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build3_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1, tree arg2 )
{
  tree t = build3 (code, type, arg0, arg1, arg2 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4360, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build4_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1, tree arg2, tree arg3 )
{
  tree t = build4 (code, type, arg0, arg1, arg2, arg3 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4370, __FUNCTION__))->exp.locus = (loc);
  return t;
}

static inline tree
build5_loc (location_t loc, enum tree_code code, tree type, tree arg0,
     tree arg1, tree arg2, tree arg3, tree arg4 )
{
  tree t = build5 (code, type, arg0, arg1, arg2, arg3,
   arg4 );
  if (((t) && ((tree_code_type[(int) (((enum tree_code) (t)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (t)->base.code))]) <= tcc_expression)))
    (expr_check (((t)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4381, __FUNCTION__))->exp.locus = (loc);
  return t;
}



extern tree double_int_to_tree (tree, double_int);

extern tree wide_int_to_tree (tree type, const poly_wide_int_ref &cst);
extern tree force_fit_type (tree, const poly_wide_int_ref &, int, bool);




extern tree build_int_cst (tree, poly_int64);
extern tree build_int_cstu (tree type, poly_uint64);
extern tree build_int_cst_type (tree, poly_int64);
extern tree make_vector (unsigned, unsigned );
extern tree build_vector_from_ctor (tree, vec<constructor_elt, va_gc> *);
extern tree build_vector_from_val (tree, tree);
extern tree build_uniform_cst (tree, tree);
extern tree build_vec_series (tree, tree, tree);
extern tree build_index_vector (tree, poly_uint64, poly_uint64);
extern tree build_vector_a_then_b (tree, unsigned int, tree, tree);
extern void recompute_constructor_flags (tree);
extern void verify_constructor_flags (tree);
extern tree build_constructor (tree, vec<constructor_elt, va_gc> * );
extern tree build_constructor_single (tree, tree, tree);
extern tree build_constructor_from_list (tree, tree);
extern tree build_constructor_va (tree, int, ...);
extern tree build_clobber (tree);
extern tree build_real_from_int_cst (tree, const_tree);
extern tree build_complex (tree, tree, tree);
extern tree build_complex_inf (tree, bool);
extern tree build_each_one_cst (tree);
extern tree build_one_cst (tree);
extern tree build_minus_one_cst (tree);
extern tree build_all_ones_cst (tree);
extern tree build_zero_cst (tree);
extern tree build_string (unsigned, const char * = nullptr);
extern tree build_poly_int_cst (tree, const poly_wide_int_ref &);
extern tree build_tree_list (tree, tree );
extern tree build_tree_list_vec (const vec<tree, va_gc> * );
extern tree build_decl (location_t, enum tree_code,
   tree, tree );
extern tree build_fn_decl (const char *, tree);
extern tree build_translation_unit_decl (tree);
extern tree build_block (tree, tree, tree, tree);
extern tree build_empty_stmt (location_t);
extern tree build_omp_clause (location_t, enum omp_clause_code);

extern tree build_vl_exp (enum tree_code, int );

extern tree build_call_nary (tree, tree, int, ...);
extern tree build_call_valist (tree, tree, int, va_list);


extern tree build_call_array_loc (location_t, tree, tree, int, const tree *);
extern tree build_call_vec (tree, tree, vec<tree, va_gc> *);
extern tree build_call_expr_loc_array (location_t, tree, int, tree *);
extern tree build_call_expr_loc_vec (location_t, tree, vec<tree, va_gc> *);
extern tree build_call_expr_loc (location_t, tree, int, ...);
extern tree build_call_expr (tree, int, ...);
extern tree build_call_expr_internal_loc (location_t, enum internal_fn,
       tree, int, ...);
extern tree build_call_expr_internal_loc_array (location_t, enum internal_fn,
      tree, int, const tree *);
extern tree maybe_build_call_expr_loc (location_t, combined_fn, tree,
           int, ...);
extern tree build_alloca_call_expr (tree, unsigned int, long);
extern tree build_string_literal (unsigned, const char * = nullptr,
      tree = integer_types[itk_char],
      unsigned long = -1UL);



extern tree signed_or_unsigned_type_for (int, tree);
extern tree signed_type_for (tree);
extern tree unsigned_type_for (tree);
extern tree truth_type_for (tree);
extern tree build_pointer_type_for_mode (tree, machine_mode, bool);
extern tree build_pointer_type (tree);
extern tree build_reference_type_for_mode (tree, machine_mode, bool);
extern tree build_reference_type (tree);
extern tree build_vector_type_for_mode (tree, machine_mode);
extern tree build_vector_type (tree, poly_int64);
extern tree build_truth_vector_type_for_mode (poly_uint64, machine_mode);
extern tree build_opaque_vector_type (tree, poly_int64);
extern tree build_index_type (tree);
extern tree build_array_type (tree, tree, bool = false);
extern tree build_nonshared_array_type (tree, tree);
extern tree build_array_type_nelts (tree, poly_uint64);
extern tree build_function_type (tree, tree);
extern tree build_function_type_list (tree, ...);
extern tree build_varargs_function_type_list (tree, ...);
extern tree build_function_type_array (tree, int, tree *);
extern tree build_varargs_function_type_array (tree, int, tree *);





extern tree build_method_type_directly (tree, tree, tree);
extern tree build_method_type (tree, tree);
extern tree build_offset_type (tree, tree);
extern tree build_complex_type (tree, bool named = false);
extern tree array_type_nelts (const_tree);

extern tree value_member (tree, tree);
extern tree purpose_member (const_tree, tree);
extern bool vec_member (const_tree, vec<tree, va_gc> *);
extern tree chain_index (int, tree);


extern int tree_int_cst_equal (const_tree, const_tree);


extern bool tree_fits_shwi_p (const_tree) __attribute__ ((__pure__));
extern bool tree_fits_poly_int64_p (const_tree) __attribute__ ((__pure__));
extern bool tree_fits_uhwi_p (const_tree) __attribute__ ((__pure__));
extern bool tree_fits_poly_uint64_p (const_tree) __attribute__ ((__pure__));

extern long tree_to_shwi (const_tree)
  __attribute__ ((__nonnull__ (1))) __attribute__ ((__pure__));
extern poly_int64 tree_to_poly_int64 (const_tree)
  __attribute__ ((__nonnull__ (1))) __attribute__ ((__pure__));
extern unsigned long tree_to_uhwi (const_tree)
  __attribute__ ((__nonnull__ (1))) __attribute__ ((__pure__));
extern poly_uint64 tree_to_poly_uint64 (const_tree)
  __attribute__ ((__nonnull__ (1))) __attribute__ ((__pure__));
# 4541 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern int tree_int_cst_sgn (const_tree);
extern int tree_int_cst_sign_bit (const_tree);
extern unsigned int tree_int_cst_min_precision (tree, signop);
extern tree strip_array_types (tree);
extern tree excess_precision_type (tree);



enum cst_size_error {
  cst_size_ok,
  cst_size_not_constant,
  cst_size_negative,
  cst_size_too_big,
  cst_size_overflow
};

extern bool valid_constant_size_p (const_tree, cst_size_error * = nullptr);
extern tree max_object_size ();




inline bool
poly_int_tree_p (const_tree t, poly_int64_pod *value)
{
  if (tree_fits_poly_int64_p (t))
    {
      *value = tree_to_poly_int64 (t);
      return true;
    }
  return false;
}




inline bool
poly_int_tree_p (const_tree t, poly_uint64_pod *value)
{
  if (tree_fits_poly_uint64_p (t))
    {
      *value = tree_to_poly_uint64 (t);
      return true;
    }
  return false;
}





extern tree make_tree (tree, rtx);




extern bool check_lang_type (const_tree cand, const_tree base);



extern bool check_base_type (const_tree cand, const_tree base);




extern bool check_qualified_type (const_tree, const_tree, int);





extern tree get_qualified_type (tree, int);




extern tree build_qualified_type (tree, int );



extern tree build_aligned_type (tree, unsigned int);
# 4635 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree build_distinct_type_copy (tree );
extern tree build_variant_type_copy (tree );






extern hashval_t type_hash_canon_hash (tree);
extern tree type_hash_canon (unsigned int, tree);

extern tree convert (tree, tree);
extern tree size_in_bytes_loc (location_t, const_tree);
inline tree
size_in_bytes (const_tree t)
{
  return size_in_bytes_loc (input_location, t);
}

extern long int_size_in_bytes (const_tree);
extern long max_int_size_in_bytes (const_tree);
extern tree bit_position (const_tree);
extern tree byte_position (const_tree);
extern long int_byte_position (const_tree);
# 4685 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree chainon (tree, tree);



extern tree tree_cons (tree, tree, tree );



extern tree tree_last (tree);



extern tree nreverse (tree);




extern int list_length (const_tree);



extern tree first_field (const_tree) __attribute__ ((__nonnull__ (1)));
extern tree last_field (const_tree) __attribute__ ((__nonnull__ (1)));
# 4716 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern bool initializer_zerop (const_tree, bool * = nullptr);
extern bool initializer_each_zero_or_onep (const_tree);

extern wide_int vector_cst_int_elt (const_tree, unsigned int);
extern tree vector_cst_elt (const_tree, unsigned int);




extern tree uniform_vector_p (const_tree);





extern tree uniform_integer_cst_p (tree);

extern int single_nonzero_element (const_tree);



extern vec<tree, va_gc> *ctor_to_vec (tree);



extern bool zerop (const_tree);



extern bool integer_zerop (const_tree);



extern bool integer_onep (const_tree);




extern bool integer_each_onep (const_tree);




extern bool integer_all_onesp (const_tree);




extern bool integer_minus_onep (const_tree);




extern bool integer_pow2p (const_tree);




extern bool integer_nonzerop (const_tree);




extern bool integer_truep (const_tree);

extern bool cst_and_fits_in_hwi (const_tree);
extern tree num_ending_zeros (const_tree);




extern bool fixed_zerop (const_tree);




extern tree staticp (tree);





extern tree save_expr (tree);



extern bool tree_invariant_p (tree);




extern tree skip_simple_arithmetic (tree);




extern tree skip_simple_constant_arithmetic (tree);



enum tree_node_structure_enum tree_node_structure (const_tree);




extern bool contains_placeholder_p (const_tree);
# 4833 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern bool type_contains_placeholder_p (tree);
# 4842 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern void find_placeholder_in_expr (tree, vec<tree> *);
# 4860 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree substitute_in_expr (tree, tree, tree);
# 4871 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree substitute_placeholder_in_expr (tree, tree);
# 4885 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree stabilize_reference (tree);






extern tree get_unwidened (tree, tree);






extern tree get_narrower (tree, int *);



static inline bool
handled_component_p (const_tree t)
{
  switch (((enum tree_code) (t)->base.code))
    {
    case COMPONENT_REF:
    case BIT_FIELD_REF:
    case ARRAY_REF:
    case ARRAY_RANGE_REF:
    case REALPART_EXPR:
    case IMAGPART_EXPR:
    case VIEW_CONVERT_EXPR:
      return true;

    default:
      return false;
    }
}



static inline bool
reverse_storage_order_for_component_p (tree t)
{

  if ((((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4928, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4928, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4928, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4928, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE)) || (((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4928, __FUNCTION__))->typed.type))->base.code) == VECTOR_TYPE))
    return false;

  if (((enum tree_code) (t)->base.code) == REALPART_EXPR || ((enum tree_code) (t)->base.code) == IMAGPART_EXPR)
    t = (*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4932, __FUNCTION__)))));

  switch (((enum tree_code) (t)->base.code))
    {
    case ARRAY_REF:
    case COMPONENT_REF:


      return (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4940, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE))
      && ((tree_check4 ((((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4941, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4941, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4941, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag);

    case BIT_FIELD_REF:
    case MEM_REF:
      return ((tree_check2 ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4945, __FUNCTION__, (BIT_FIELD_REF), (MEM_REF)))->base.default_def_flag);

    case ARRAY_RANGE_REF:
    case VIEW_CONVERT_EXPR:
    default:
      return false;
    }

  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4953, __FUNCTION__));
}







static inline bool
storage_order_barrier_p (const_tree t)
{
  if (((enum tree_code) (t)->base.code) != VIEW_CONVERT_EXPR)
    return false;

  if ((((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4968, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4968, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4968, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4968, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE))
      && ((tree_check4 ((((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4969, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4969, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    return true;

  tree op = (*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4972, __FUNCTION__)))));

  if ((((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4974, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE || (((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4974, __FUNCTION__))->typed.type))->base.code) == RECORD_TYPE || ((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4974, __FUNCTION__))->typed.type))->base.code) == UNION_TYPE || ((enum tree_code) (((contains_struct_check ((op), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4974, __FUNCTION__))->typed.type))->base.code) == QUAL_UNION_TYPE))
      && ((tree_check4 ((((contains_struct_check ((op), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4975, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 4975, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE), (ARRAY_TYPE)))->base.u.bits.saturating_flag))
    return true;

  return false;
}




extern tree get_containing_scope (const_tree);



extern const_tree get_ultimate_context (const_tree);



extern tree decl_function_context (const_tree);



extern tree decl_type_context (const_tree);


extern bool real_zerop (const_tree);



static inline void
function_args_iter_init (function_args_iterator *i, const_tree fntype)
{
  i->next = ((tree_check2 ((fntype), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5006, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))->type_non_common.values);
}




static inline tree *
function_args_iter_cond_ptr (function_args_iterator *i)
{
  return (i->next) ? &((tree_check ((i->next), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5015, __FUNCTION__, (TREE_LIST)))->list.value) : nullptr;
}




static inline tree
function_args_iter_cond (function_args_iterator *i)
{
  return (i->next) ? ((tree_check ((i->next), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5024, __FUNCTION__, (TREE_LIST)))->list.value) : (tree) nullptr;
}


static inline void
function_args_iter_next (function_args_iterator *i)
{
  ((void)(!(i->next != (tree) nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5031, __FUNCTION__), 0 : 0));
  i->next = ((contains_struct_check ((i->next), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5032, __FUNCTION__))->common.chain);
}



static inline bool
inlined_function_outer_scope_p (const_tree block)
{
 return ((IS_ADHOC_LOC (((tree_check ((block), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5040, __FUNCTION__, (BLOCK)))->block.locus))) ? get_location_from_adhoc_loc (line_table, ((tree_check ((block), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5040, __FUNCTION__, (BLOCK)))->block.locus)) : (((tree_check ((block), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5040, __FUNCTION__, (BLOCK)))->block.locus))) != ((location_t) 0);
}
# 5060 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern unsigned crc32_unsigned_n (unsigned, unsigned, unsigned);
extern unsigned crc32_string (unsigned, const char *);
inline unsigned
crc32_unsigned (unsigned chksum, unsigned value)
{
  return crc32_unsigned_n (chksum, value, 4);
}
inline unsigned
crc32_byte (unsigned chksum, char byte)
{
  return crc32_unsigned_n (chksum, byte, 1);
}
extern void clean_symbol_name (char *);
extern tree get_file_function_name (const char *);
extern tree get_callee_fndecl (const_tree);
extern combined_fn get_call_combined_fn (const_tree);
extern int type_num_arguments (const_tree);
extern tree type_argument_type (const_tree, unsigned) __attribute__ ((__nonnull__ (1)));
extern bool associative_tree_code (enum tree_code);
extern bool commutative_tree_code (enum tree_code);
extern bool commutative_ternary_tree_code (enum tree_code);
extern bool operation_can_overflow (enum tree_code);
extern bool operation_no_trapping_overflow (tree, enum tree_code);
extern tree upper_bound_in_type (tree, tree);
extern tree lower_bound_in_type (tree, tree);
extern int operand_equal_for_phi_arg_p (const_tree, const_tree);
extern tree create_artificial_label (location_t);
extern const char *get_name (tree);
extern bool stdarg_p (const_tree);
extern bool prototype_p (const_tree);
extern bool is_typedef_decl (const_tree x);
extern bool typedef_variant_p (const_tree);
extern bool auto_var_p (const_tree);
extern bool auto_var_in_fn_p (const_tree, const_tree);
extern tree build_low_bits_mask (tree, unsigned);
extern bool tree_nop_conversion_p (const_tree, const_tree);
extern tree tree_strip_nop_conversions (tree);
extern tree tree_strip_sign_nop_conversions (tree);
extern const_tree strip_invariant_refs (const_tree);
extern tree lhd_gcc_personality (void);
extern void assign_assembler_name_if_needed (tree);
extern bool warn_deprecated_use (tree, tree);
extern void cache_integer_cst (tree);
extern const char *combined_fn_name (combined_fn);





static inline int
struct_ptr_eq (const void *a, const void *b)
{
  const void * const * x = (const void * const *) a;
  const void * const * y = (const void * const *) b;
  return *x == *y;
}

static inline hashval_t
struct_ptr_hash (const void *a)
{
  const void * const * x = (const void * const *) a;
  return (intptr_t)*x >> 4;
}


static inline bool
truth_value_p (enum tree_code code)
{
  return (tree_code_type[(int) (code)] == tcc_comparison
   || code == TRUTH_AND_EXPR || code == TRUTH_ANDIF_EXPR
   || code == TRUTH_OR_EXPR || code == TRUTH_ORIF_EXPR
   || code == TRUTH_XOR_EXPR || code == TRUTH_NOT_EXPR);
}



static inline bool
ptrofftype_p (tree type)
{
  return ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE)
   && ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5140, __FUNCTION__))->type_common.precision) == ((tree_class_check ((sizetype_tab[(int) stk_sizetype]), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5140, __FUNCTION__))->type_common.precision)
   && ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5141, __FUNCTION__))->base.u.bits.unsigned_flag) == ((tree_class_check ((sizetype_tab[(int) stk_sizetype]), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5141, __FUNCTION__))->base.u.bits.unsigned_flag));
}




static inline bool
complete_or_array_type_p (const_tree type)
{
  return (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5150, __FUNCTION__))->type_common.size) != (tree) nullptr)
         || (((enum tree_code) (type)->base.code) == ARRAY_TYPE
      && (((tree_class_check ((((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5152, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5152, __FUNCTION__))->type_common.size) != (tree) nullptr));
}



inline bool
poly_int_tree_p (const_tree t)
{
  return (((enum tree_code) (t)->base.code) == INTEGER_CST || (1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST));
}




inline poly_uint64
bit_field_size (const_tree t)
{
  return tree_to_poly_uint64 ((*((const_cast<tree*> (tree_operand_check ((t), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5169, __FUNCTION__))))));
}




inline poly_uint64
bit_field_offset (const_tree t)
{
  return tree_to_poly_uint64 ((*((const_cast<tree*> (tree_operand_check ((t), (2), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5178, __FUNCTION__))))));
}

extern tree strip_float_extensions (tree);
extern bool really_constant_p (const_tree);
extern bool ptrdiff_tree_p (const_tree, poly_int64_pod *);
extern bool decl_address_invariant_p (const_tree);
extern bool decl_address_ip_invariant_p (const_tree);
extern bool int_fits_type_p (const_tree, const_tree)
  __attribute__ ((__nonnull__ (1))) __attribute__ ((__nonnull__ (2))) __attribute__ ((__pure__));

extern void get_type_static_bounds (const_tree, mpz_t, mpz_t);

extern bool variably_modified_type_p (tree, tree);
extern int tree_log2 (const_tree);
extern int tree_floor_log2 (const_tree);
extern unsigned int tree_ctz (const_tree);
extern int simple_cst_equal (const_tree, const_tree);

namespace inchash
{

extern void add_expr (const_tree, hash &, unsigned int = 0);

}



static inline hashval_t iterative_hash_expr(const_tree tree, hashval_t seed)
{
  inchash::hash hstate (seed);
  inchash::add_expr (tree, hstate);
  return hstate.end ();
}

extern int compare_tree_int (const_tree, unsigned long);
extern bool type_list_equal (const_tree, const_tree);
extern bool chain_member (const_tree, const_tree);
extern void dump_tree_statistics (void);
extern void recompute_tree_invariant_for_addr_expr (tree);
extern bool needs_to_live_in_memory (const_tree);
extern tree reconstruct_complex_type (tree, tree);
extern bool real_onep (const_tree);
extern bool real_minus_onep (const_tree);
extern void init_ttree (void);
extern void build_common_tree_nodes (bool);
extern void build_common_builtin_nodes (void);
extern tree build_nonstandard_integer_type (unsigned long, int);
extern tree build_nonstandard_boolean_type (unsigned long);
extern tree build_range_type (tree, tree, tree);
extern tree build_nonshared_range_type (tree, tree, tree);
extern bool subrange_type_for_debug_p (const_tree, tree *, tree *);
extern long int_cst_value (const_tree);
extern tree tree_block (tree);
extern void tree_set_block (tree, tree);
extern location_t *block_nonartificial_location (tree);
extern location_t tree_nonartificial_location (tree);
extern tree block_ultimate_origin (const_tree);
extern tree get_binfo_at_offset (tree, poly_int64, tree);
extern bool virtual_method_call_p (const_tree, bool = false);
extern tree obj_type_ref_class (const_tree ref, bool = false);
extern bool types_same_for_odr (const_tree type1, const_tree type2);
extern bool contains_bitfld_component_ref_p (const_tree);
extern bool block_may_fallthru (const_tree);
extern void using_eh_for_cleanups (void);
extern bool using_eh_for_cleanups_p (void);
extern const char *get_tree_code_name (enum tree_code);
extern void set_call_expr_flags (tree, int);
extern tree walk_tree_1 (tree*, walk_tree_fn, void*, hash_set<tree>*,
    walk_tree_lh);
extern tree walk_tree_without_duplicates_1 (tree*, walk_tree_fn, void*,
         walk_tree_lh);





extern tree drop_tree_overflow (tree);




extern tree get_base_address (tree t);



extern tree array_ref_element_size (tree);


extern tree get_typenode_from_name (const char *);



extern tree array_ref_up_bound (tree);



extern tree array_ref_low_bound (tree);




extern bool array_at_struct_end_p (tree);



extern tree component_ref_field_offset (tree);






extern tree component_ref_size (tree, bool * = nullptr);

extern int tree_map_base_eq (const void *, const void *);
extern unsigned int tree_map_base_hash (const void *);
extern int tree_map_base_marked_p (const void *);
extern void __attribute__ ((__used__)) verify_type (const_tree t);
extern bool gimple_canonical_types_compatible_p (const_tree, const_tree,
       bool trust_type_canonical = true);
extern bool type_with_interoperable_signedness (const_tree);
extern bitmap get_nonnull_args (const_tree);
extern int get_range_pos_neg (tree);



inline enum tree_code
tree_code_for_canonical_type_merging (enum tree_code code)
{






  if (code == ENUMERAL_TYPE)
    return INTEGER_TYPE;





  if (code == REFERENCE_TYPE)
    return POINTER_TYPE;
  return code;
}
# 5335 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
inline bool
canonical_type_used_p (const_tree t)
{
  return !((((enum tree_code) (t)->base.code) == POINTER_TYPE || ((enum tree_code) (t)->base.code) == REFERENCE_TYPE)
    || ((enum tree_code) (t)->base.code) == ARRAY_TYPE
    || ((enum tree_code) (t)->base.code) == VECTOR_TYPE);
}


extern unsigned int tree_map_hash (const void *);



extern unsigned int tree_decl_map_hash (const void *);


struct tree_decl_map_cache_hasher : ggc_cache_ptr_hash<tree_decl_map>
{
  static hashval_t hash (tree_decl_map *m) { return tree_decl_map_hash (m); }
  static bool
  equal (tree_decl_map *a, tree_decl_map *b)
  {
    return tree_map_base_eq (a, b);
  }

  static int
  keep_cache_entry (tree_decl_map *&m)
  {
    return ggc_marked_p (m->base.from);
  }
};
# 5378 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
struct tree_decl_hash : ggc_ptr_hash <tree_node>
{
  static inline hashval_t hash (tree);
};

inline hashval_t
tree_decl_hash::hash (tree t)
{
  return ((contains_struct_check ((t), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5386, __FUNCTION__))->decl_minimal.uid);
}


struct tree_type_hash : ggc_ptr_hash <tree_node>
{
  static inline hashval_t hash (tree);
};

inline hashval_t
tree_type_hash::hash (tree t)
{
  return ((tree_class_check ((t), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5398, __FUNCTION__))->type_common.uid);
}




struct tree_ssa_name_hash : ggc_ptr_hash <tree_node>
{
  static inline hashval_t hash (tree);
};

inline hashval_t
tree_ssa_name_hash::hash (tree t)
{
  return (tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5412, __FUNCTION__, (SSA_NAME)))->base.u.version;
}


struct tree_hash : ggc_ptr_hash <tree_node>
{
  static hashval_t hash (tree);
};

inline hashval_t
tree_hash::hash (tree t)
{
  return ((size_t) (t) & 0777777);
}




struct tree_cache_traits
  : simple_cache_map_traits<default_hash_traits<tree>, tree> { };
typedef hash_map<tree,tree,tree_cache_traits> tree_cache_map;



struct decl_tree_cache_traits
  : simple_cache_map_traits<tree_decl_hash, tree> { };
typedef hash_map<tree,tree,decl_tree_cache_traits> decl_tree_cache_map;



struct type_tree_cache_traits
  : simple_cache_map_traits<tree_type_hash, tree> { };
typedef hash_map<tree,tree,type_tree_cache_traits> type_tree_cache_map;



static inline void
init_call_expr_arg_iterator (tree exp, call_expr_arg_iterator *iter)
{
  iter->t = exp;
  iter->n = (((int)((unsigned long) (*tree_int_cst_elt_check (((tree_class_check ((exp), (tcc_vl_exp), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5452, __FUNCTION__))->exp.operands[0]), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5452, __FUNCTION__)))) - 3);
  iter->i = 0;
}

static inline void
init_const_call_expr_arg_iterator (const_tree exp, const_call_expr_arg_iterator *iter)
{
  iter->t = exp;
  iter->n = (((int)((unsigned long) (*tree_int_cst_elt_check (((tree_class_check ((exp), (tcc_vl_exp), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5460, __FUNCTION__))->exp.operands[0]), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5460, __FUNCTION__)))) - 3);
  iter->i = 0;
}



static inline tree
next_call_expr_arg (call_expr_arg_iterator *iter)
{
  tree result;
  if (iter->i >= iter->n)
    return (tree) nullptr;
  result = (*((const_cast<tree*> (tree_operand_check (((tree_check ((iter->t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5472, __FUNCTION__, (CALL_EXPR)))), ((iter->i) + 3), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5472, __FUNCTION__)))));
  iter->i++;
  return result;
}

static inline const_tree
next_const_call_expr_arg (const_call_expr_arg_iterator *iter)
{
  const_tree result;
  if (iter->i >= iter->n)
    return (tree) nullptr;
  result = (*((const_cast<tree*> (tree_operand_check (((tree_check ((iter->t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5483, __FUNCTION__, (CALL_EXPR)))), ((iter->i) + 3), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5483, __FUNCTION__)))));
  iter->i++;
  return result;
}





static inline tree
first_call_expr_arg (tree exp, call_expr_arg_iterator *iter)
{
  init_call_expr_arg_iterator (exp, iter);
  return next_call_expr_arg (iter);
}

static inline const_tree
first_const_call_expr_arg (const_tree exp, const_call_expr_arg_iterator *iter)
{
  init_const_call_expr_arg_iterator (exp, iter);
  return next_const_call_expr_arg (iter);
}



static inline bool
more_call_expr_args_p (const call_expr_arg_iterator *iter)
{
  return (iter->i < iter->n);
}
# 5525 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
static inline bool
is_lang_specific (const_tree t)
{
  return ((enum tree_code) (t)->base.code) == LANG_TYPE || ((enum tree_code) (t)->base.code) >= ((int) LAST_AND_UNUSED_TREE_CODE);
}






static inline tree
builtin_decl_explicit (enum built_in_function fncode)
{
  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5539, __FUNCTION__), 0 : 0));

  return builtin_info[(size_t)fncode].decl;
}


static inline tree
builtin_decl_implicit (enum built_in_function fncode)
{
  size_t uns_fncode = (size_t)fncode;
  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5549, __FUNCTION__), 0 : 0));

  if (!builtin_info[uns_fncode].implicit_p)
    return (tree) nullptr;

  return builtin_info[uns_fncode].decl;
}




static inline void
set_builtin_decl (enum built_in_function fncode, tree decl, bool implicit_p)
{
  size_t ufncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1))) && (decl != (tree) nullptr || !implicit_p)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5565, __FUNCTION__), 0 : 0))
                                               ;

  builtin_info[ufncode].decl = decl;
  builtin_info[ufncode].implicit_p = implicit_p;
  builtin_info[ufncode].declared_p = false;
}



static inline void
set_builtin_decl_implicit_p (enum built_in_function fncode, bool implicit_p)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1))) && builtin_info[uns_fncode].decl != (tree) nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5580, __FUNCTION__), 0 : 0))
                                                       ;

  builtin_info[uns_fncode].implicit_p = implicit_p;
}



static inline void
set_builtin_decl_declared_p (enum built_in_function fncode, bool declared_p)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1))) && builtin_info[uns_fncode].decl != (tree) nullptr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5593, __FUNCTION__), 0 : 0))
                                                       ;

  builtin_info[uns_fncode].declared_p = declared_p;
}




static inline bool
builtin_decl_explicit_p (enum built_in_function fncode)
{
  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5605, __FUNCTION__), 0 : 0));
  return (builtin_info[(size_t)fncode].decl != (tree) nullptr);
}



static inline bool
builtin_decl_implicit_p (enum built_in_function fncode)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5616, __FUNCTION__), 0 : 0));
  return (builtin_info[uns_fncode].decl != (tree) nullptr
   && builtin_info[uns_fncode].implicit_p);
}



static inline bool
builtin_decl_declared_p (enum built_in_function fncode)
{
  size_t uns_fncode = (size_t)fncode;

  ((void)(!((((unsigned long) ((int)fncode) - (unsigned long) (((int)BUILT_IN_NONE) + 1) <= (unsigned long) (((int) END_BUILTINS) - 1) - (unsigned long) (((int)BUILT_IN_NONE) + 1)))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5628, __FUNCTION__), 0 : 0));
  return (builtin_info[uns_fncode].decl != (tree) nullptr
   && builtin_info[uns_fncode].declared_p);
}
# 5643 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
static inline bool
maybe_special_function_p (const_tree fndecl)
{
  tree name_decl = ((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5646, __FUNCTION__))->decl_minimal.name);
  if (name_decl



      && (((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5651, __FUNCTION__))->decl_minimal.context) == (tree) nullptr
   || ((enum tree_code) (((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5652, __FUNCTION__))->decl_minimal.context))->base.code) == TRANSLATION_UNIT_DECL)
      && ((fndecl)->base.public_flag))
    return true;
  return false;
}




static inline bool
is_global_var (const_tree t)
{
  return (((t)->base.static_flag) || ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5664, __FUNCTION__))->decl_common.decl_flag_1));
}





static inline bool
may_be_aliased (const_tree var)
{
  return (((enum tree_code) (var)->base.code) != CONST_DECL
   && (((var)->base.public_flag)
       || ((contains_struct_check ((var), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5676, __FUNCTION__))->decl_common.decl_flag_1)
       || ((var)->base.addressable_flag))
   && !((((var)->base.static_flag) || ((var)->base.public_flag) || ((contains_struct_check ((var), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5678, __FUNCTION__))->decl_common.decl_flag_1))
        && (((non_type_check ((var), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5679, __FUNCTION__))->base.readonly_flag)
     || (((enum tree_code) (var)->base.code) == VAR_DECL
         && ((tree_check ((var), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5681, __FUNCTION__, (VAR_DECL)))->base.nothrow_flag)))));
}


static inline struct cl_optimization *
opts_for_fn (const_tree fndecl)
{
  tree fn_opts = ((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5688, __FUNCTION__, (FUNCTION_DECL)))->function_decl.function_specific_optimization);
  if (fn_opts == (tree) nullptr)
    fn_opts = global_trees[TI_OPTIMIZATION_DEFAULT];
  return ((tree_check ((fn_opts), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5691, __FUNCTION__, (OPTIMIZATION_NODE)))->optimization.opts);
}


static inline cl_target_option *
target_opts_for_fn (const_tree fndecl)
{
  tree fn_opts = ((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5698, __FUNCTION__, (FUNCTION_DECL)))->function_decl.function_specific_target);
  if (fn_opts == (tree) nullptr)
    fn_opts = global_trees[TI_TARGET_OPTION_DEFAULT];
  return fn_opts == (tree) nullptr ? nullptr : ((tree_check ((fn_opts), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5701, __FUNCTION__, (TARGET_OPTION_NODE)))->target_option.opts);
}
# 5712 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
extern tree make_anon_name ();


namespace wi
{
  class unextended_tree
  {
  private:
    const_tree m_t;

  public:
    unextended_tree () {}
    unextended_tree (const_tree t) : m_t (t) {}

    unsigned int get_precision () const;
    const long *get_val () const;
    unsigned int get_len () const;
    const_tree get_tree () const { return m_t; }
  };

  template <>
  struct int_traits <unextended_tree>
  {
    static const enum precision_type precision_type = VAR_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = false;
  };

  template <int N>
  class extended_tree
  {
  private:
    const_tree m_t;

  public:
    extended_tree () {}
    extended_tree (const_tree);

    unsigned int get_precision () const;
    const long *get_val () const;
    unsigned int get_len () const;
    const_tree get_tree () const { return m_t; }
  };

  template <int N>
  struct int_traits <extended_tree <N> >
  {
    static const enum precision_type precision_type = CONST_PRECISION;
    static const bool host_dependent_precision = false;
    static const bool is_sign_extended = true;
    static const unsigned int precision = N;
  };

  typedef extended_tree <(((160 + 64) / 64) * 64)> widest_extended_tree;
  typedef extended_tree <((64 + 4 + 64 - 1) & ~(64 - 1))> offset_extended_tree;

  typedef const generic_wide_int <widest_extended_tree> tree_to_widest_ref;
  typedef const generic_wide_int <offset_extended_tree> tree_to_offset_ref;
  typedef const generic_wide_int<wide_int_ref_storage<false, false> >
    tree_to_wide_ref;

  tree_to_widest_ref to_widest (const_tree);
  tree_to_offset_ref to_offset (const_tree);
  tree_to_wide_ref to_wide (const_tree);
  wide_int to_wide (const_tree, unsigned int);

  typedef const poly_int <1,
     generic_wide_int <widest_extended_tree> >
    tree_to_poly_widest_ref;
  typedef const poly_int <1,
     generic_wide_int <offset_extended_tree> >
    tree_to_poly_offset_ref;
  typedef const poly_int <1,
     generic_wide_int <unextended_tree> >
    tree_to_poly_wide_ref;

  tree_to_poly_widest_ref to_poly_widest (const_tree);
  tree_to_poly_offset_ref to_poly_offset (const_tree);
  tree_to_poly_wide_ref to_poly_wide (const_tree);

  template <int N>
  struct ints_for <generic_wide_int <extended_tree <N> >, CONST_PRECISION>
  {
    typedef generic_wide_int <extended_tree <N> > extended;
    static extended zero (const extended &);
  };

  template <>
  struct ints_for <generic_wide_int <unextended_tree>, VAR_PRECISION>
  {
    typedef generic_wide_int <unextended_tree> unextended;
    static unextended zero (const unextended &);
  };
}



typedef generic_wide_int <wi::extended_tree <(((160 + 64) / 64) * 64) * 2> >
  widest2_int_cst;
# 5846 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
inline wi::tree_to_widest_ref
wi::to_widest (const_tree t)
{
  return t;
}
# 5871 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
inline wi::tree_to_offset_ref
wi::to_offset (const_tree t)
{
  return t;
}
# 5901 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
inline wi::tree_to_wide_ref
wi::to_wide (const_tree t)
{
  return wi::storage_ref (&(*tree_int_cst_elt_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5904, __FUNCTION__)), ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5904, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.unextended),
     ((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5905, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5905, __FUNCTION__))->type_common.precision));
}





inline wide_int
wi::to_wide (const_tree t, unsigned int prec)
{
  return wide_int::from (wi::to_wide (t), prec, ((signop) ((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5915, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5915, __FUNCTION__))->base.u.bits.unsigned_flag)));
}

template <int N>
inline wi::extended_tree <N>::extended_tree (const_tree t)
  : m_t (t)
{
  ((void)(!(((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5922, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5922, __FUNCTION__))->type_common.precision) <= N) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5922, __FUNCTION__), 0 : 0));
}

template <int N>
inline unsigned int
wi::extended_tree <N>::get_precision () const
{
  return N;
}

template <int N>
inline const long *
wi::extended_tree <N>::get_val () const
{
  return &(*tree_int_cst_elt_check ((m_t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5936, __FUNCTION__));
}

template <int N>
inline unsigned int
wi::extended_tree <N>::get_len () const
{
  if (N == ((64 + 4 + 64 - 1) & ~(64 - 1)))
    return ((tree_check ((m_t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5944, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.offset);
  else if (N >= (((160 + 64) / 64) * 64))
    return ((tree_check ((m_t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5946, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.extended);
  else



    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5951, __FUNCTION__));
}

inline unsigned int
wi::unextended_tree::get_precision () const
{
  return ((tree_class_check ((((contains_struct_check ((m_t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5957, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5957, __FUNCTION__))->type_common.precision);
}

inline const long *
wi::unextended_tree::get_val () const
{
  return &(*tree_int_cst_elt_check ((m_t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5963, __FUNCTION__));
}

inline unsigned int
wi::unextended_tree::get_len () const
{
  return ((tree_check ((m_t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5969, __FUNCTION__, (INTEGER_CST)))->base.u.int_length.unextended);
}



inline wi::tree_to_poly_wide_ref
poly_int_cst_value (const_tree x)
{
  poly_int <1, generic_wide_int <wi::unextended_tree> > res;
  for (unsigned int i = 0; i < 1; ++i)
    res.coeffs[i] = ((tree_check ((x), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5979, __FUNCTION__, (POLY_INT_CST)))->poly_int_cst.coeffs[i]);
  return res;
}




inline wi::tree_to_poly_widest_ref
wi::to_poly_widest (const_tree t)
{
  if ((1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST))
    {
      poly_int <1,
  generic_wide_int <widest_extended_tree> > res;
      for (unsigned int i = 0; i < 1; ++i)
 res.coeffs[i] = ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 5994, __FUNCTION__, (POLY_INT_CST)))->poly_int_cst.coeffs[i]);
      return res;
    }
  return t;
}




inline wi::tree_to_poly_offset_ref
wi::to_poly_offset (const_tree t)
{
  if ((1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST))
    {
      poly_int <1,
  generic_wide_int <offset_extended_tree> > res;
      for (unsigned int i = 0; i < 1; ++i)
 res.coeffs[i] = ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6011, __FUNCTION__, (POLY_INT_CST)))->poly_int_cst.coeffs[i]);
      return res;
    }
  return t;
}




inline wi::tree_to_poly_wide_ref
wi::to_poly_wide (const_tree t)
{
  if ((1 > 1 && ((enum tree_code) (t)->base.code) == POLY_INT_CST))
    return poly_int_cst_value (t);
  return t;
}

template <int N>
inline generic_wide_int <wi::extended_tree <N> >
wi::ints_for <generic_wide_int <wi::extended_tree <N> >,
       wi::CONST_PRECISION>::zero (const extended &x)
{
  return build_zero_cst (((contains_struct_check ((x.get_tree ()), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6033, __FUNCTION__))->typed.type));
}

inline generic_wide_int <wi::unextended_tree>
wi::ints_for <generic_wide_int <wi::unextended_tree>,
       wi::VAR_PRECISION>::zero (const unextended &x)
{
  return build_zero_cst (((contains_struct_check ((x.get_tree ()), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6040, __FUNCTION__))->typed.type));
}

namespace wi
{
  template <typename T>
  bool fits_to_boolean_p (const T &x, const_tree);

  template <typename T>
  bool fits_to_tree_p (const T &x, const_tree);

  wide_int min_value (const_tree);
  wide_int max_value (const_tree);
  wide_int from_mpz (const_tree, mpz_t, bool);
}

template <typename T>
bool
wi::fits_to_boolean_p (const T &x, const_tree type)
{
  typedef typename poly_int_traits<T>::int_type int_type;
  return ((!maybe_ne (x, int_type (0)))
   || (!maybe_ne (x, int_type (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6062, __FUNCTION__))->base.u.bits.unsigned_flag) ? 1 : -1))));
}

template <typename T>
bool
wi::fits_to_tree_p (const T &x, const_tree type)
{


  if (((enum tree_code) (type)->base.code) == BOOLEAN_TYPE)
    return fits_to_boolean_p (x, type);

  if (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6074, __FUNCTION__))->base.u.bits.unsigned_flag))
    return (!maybe_ne (x, zext (x, ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6075, __FUNCTION__))->type_common.precision))));
  else
    return (!maybe_ne (x, sext (x, ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6077, __FUNCTION__))->type_common.precision))));
}



inline wide_int
wi::min_value (const_tree type)
{
  return min_value (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6085, __FUNCTION__))->type_common.precision), ((signop) ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6085, __FUNCTION__))->base.u.bits.unsigned_flag)));
}



inline wide_int
wi::max_value (const_tree type)
{
  return max_value (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6093, __FUNCTION__))->type_common.precision), ((signop) ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6093, __FUNCTION__))->base.u.bits.unsigned_flag)));
}




inline bool
tree_int_cst_lt (const_tree t1, const_tree t2)
{
  return wi::to_widest (t1) < wi::to_widest (t2);
}




inline bool
tree_int_cst_le (const_tree t1, const_tree t2)
{
  return wi::to_widest (t1) <= wi::to_widest (t2);
}





inline int
tree_int_cst_compare (const_tree t1, const_tree t2)
{
  return wi::cmps (wi::to_widest (t1), wi::to_widest (t2));
}







extern void set_decl_rtl (tree, rtx);
extern bool complete_ctor_at_level_p (const_tree, long, const_tree);




extern tree get_inner_reference (tree, poly_int64_pod *, poly_int64_pod *,
     tree *, machine_mode *, int *, int *, int *);

extern tree build_personality_function (const char *);

struct int_n_trees_t {

  tree signed_type;
  tree unsigned_type;
};


extern bool int_n_enabled_p[1];
extern struct int_n_trees_t int_n_trees[1];





inline long
int_bit_position (const_tree field)
{
  return ((wi::to_offset (((tree_check ((field), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6158, __FUNCTION__, (FIELD_DECL)))->field_decl.offset)) << 3)
   + wi::to_offset (((tree_check ((field), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6159, __FUNCTION__, (FIELD_DECL)))->field_decl.bit_offset))).to_shwi ();
}



inline bool
type_with_alias_set_p (const_tree t)
{

  if (((enum tree_code) (t)->base.code) == FUNCTION_TYPE || ((enum tree_code) (t)->base.code) == METHOD_TYPE)
    return false;

  if ((((tree_class_check ((t), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6171, __FUNCTION__))->type_common.size) != (tree) nullptr))
    return true;



  if (((enum tree_code) (t)->base.code) == ARRAY_TYPE && (((tree_class_check ((((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6176, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6176, __FUNCTION__))->type_common.size) != (tree) nullptr))
    return true;

  return false;
}

extern location_t set_block (location_t loc, tree block);

extern void gt_ggc_mx (tree &);
extern void gt_pch_nx (tree &);
extern void gt_pch_nx (tree &, gt_pointer_operator, void *);

extern bool nonnull_arg_p (const_tree);
extern bool default_is_empty_record (const_tree);
extern bool flexible_array_type_p (const_tree);
extern long arg_int_size_in_bytes (const_tree);
extern tree arg_size_in_bytes (const_tree);
extern bool expr_type_first_operand_type_p (tree_code);

extern location_t
set_source_range (tree expr, location_t start, location_t finish);

extern location_t
set_source_range (tree expr, source_range src_range);


inline bool
desired_pro_or_demotion_p (const_tree to_type, const_tree from_type)
{
  unsigned int to_type_precision = ((tree_class_check ((to_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6205, __FUNCTION__))->type_common.precision);


  if (to_type_precision <= GET_MODE_PRECISION (word_mode))
    return true;


  return to_type_precision <= ((tree_class_check ((from_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6212, __FUNCTION__))->type_common.precision);
}



class builtin_structptr_type
{
public:
  tree& node;
  tree& base;
  const char *str;
};
extern const builtin_structptr_type builtin_structptr_types[6];



inline bool
type_has_mode_precision_p (const_tree t)
{
  return (!maybe_ne (((tree_class_check ((t), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6231, __FUNCTION__))->type_common.precision), GET_MODE_PRECISION (((((enum tree_code) ((tree_class_check ((t), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6231, __FUNCTION__)))->base.code) == VECTOR_TYPE) ? vector_type_mode (t) : (t)->type_common.mode))));
}







inline bool
fndecl_built_in_p (const_tree node)
{
  return ((built_in_class) (tree_check ((node), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6243, __FUNCTION__, (FUNCTION_DECL)))->function_decl.built_in_class) != NOT_BUILT_IN;
}




inline bool
fndecl_built_in_p (const_tree node, built_in_class klass)
{
  return fndecl_built_in_p (node) && ((built_in_class) (tree_check ((node), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6252, __FUNCTION__, (FUNCTION_DECL)))->function_decl.built_in_class) == klass;
}




inline bool
fndecl_built_in_p (const_tree node, unsigned int name, built_in_class klass)
{
  return (fndecl_built_in_p (node, klass)
   && ((tree_check ((node), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h", 6262, __FUNCTION__, (FUNCTION_DECL)))->function_decl.function_code) == name);
}




inline bool
fndecl_built_in_p (const_tree node, built_in_function name)
{
  return (fndecl_built_in_p (node, BUILT_IN_NORMAL)
   && DECL_FUNCTION_CODE (node) == name);
}
# 6304 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree.h"
class op_location_t
{
public:
  location_t m_operator_loc;
  location_t m_combined_loc;


  op_location_t (location_t combined_loc)
  : m_operator_loc (((location_t) 0)), m_combined_loc (combined_loc)
  {}



  op_location_t (location_t operator_loc, location_t combined_loc)
  : m_operator_loc (operator_loc), m_combined_loc (combined_loc)
  {}


  operator location_t () const { return m_combined_loc; }
};
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/fold-const.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/fold-const.h"
extern int folding_initializer;


extern int native_encode_expr (const_tree, unsigned char *, int, int off = -1);
extern int native_encode_initializer (tree, unsigned char *, int,
          int off = -1);
extern tree native_interpret_expr (tree, const unsigned char *, int);
extern bool can_native_interpret_type_p (tree);
extern void shift_bytes_in_array_left (unsigned char *, unsigned int,
           unsigned int);
extern void shift_bytes_in_array_right (unsigned char *, unsigned int,
     unsigned int);







extern tree fold (tree);


extern tree fold_unary_loc (location_t, enum tree_code, tree, tree);


extern tree fold_unary_ignore_overflow_loc (location_t, enum tree_code, tree, tree);


extern tree fold_binary_loc (location_t, enum tree_code, tree, tree, tree);


extern tree fold_ternary_loc (location_t, enum tree_code, tree, tree, tree, tree);


extern tree fold_build1_loc (location_t, enum tree_code, tree,
        tree );


extern tree fold_build2_loc (location_t, enum tree_code, tree, tree,
        tree );


extern tree fold_build3_loc (location_t, enum tree_code, tree, tree, tree,
      tree );
extern tree fold_build1_initializer_loc (location_t, enum tree_code, tree, tree);
extern tree fold_build2_initializer_loc (location_t, enum tree_code, tree, tree, tree);


extern tree fold_build_call_array_loc (location_t, tree, tree, int, tree *);


extern tree fold_build_call_array_initializer_loc (location_t, tree, tree, int, tree *);
extern tree get_array_ctor_element_at_index (tree, offset_int,
          unsigned * = nullptr);
extern bool fold_convertible_p (const_tree, const_tree);


extern tree fold_convert_loc (location_t, tree, tree);
extern tree fold_single_bit_test (location_t, enum tree_code, tree, tree, tree);
extern tree fold_ignored_result (tree);
extern tree fold_abs_const (tree, tree);
extern tree fold_indirect_ref_1 (location_t, tree, tree);
extern void fold_defer_overflow_warnings (void);
extern void fold_undefer_overflow_warnings (bool, const gimple *, int);
extern void fold_undefer_and_ignore_overflow_warnings (void);
extern bool fold_deferring_overflow_warnings_p (void);
extern void fold_overflow_warning (const char*, enum warn_strict_overflow_code);
extern enum tree_code fold_div_compare (enum tree_code, tree, tree,
     tree *, tree *, bool *);
extern bool operand_equal_p (const_tree, const_tree, unsigned int flags = 0);
extern int multiple_of_p (tree, const_tree, const_tree);


extern tree omit_one_operand_loc (location_t, tree, tree, tree);


extern tree omit_two_operands_loc (location_t, tree, tree, tree, tree);


extern tree invert_truthvalue_loc (location_t, tree);
extern tree fold_unary_to_constant (enum tree_code, tree, tree);
extern tree fold_binary_to_constant (enum tree_code, tree, tree, tree);
extern tree fold_bit_and_mask (tree, tree, enum tree_code,
          tree, enum tree_code, tree, tree,
          tree, enum tree_code, tree, tree, tree *);
extern tree fold_read_from_constant_string (tree);
extern tree fold_read_from_vector (tree, poly_uint64);



extern bool wide_int_binop (wide_int &res, enum tree_code,
       const wide_int &arg1, const wide_int &arg2,
       signop, wi::overflow_type *);
extern tree int_const_binop (enum tree_code, const_tree, const_tree, int = 1);


extern tree build_fold_addr_expr_loc (location_t, tree);


extern tree build_fold_addr_expr_with_type_loc (location_t, tree, tree);
extern tree fold_build_cleanup_point_expr (tree type, tree expr);


extern tree build_fold_indirect_ref_loc (location_t, tree);


extern tree fold_indirect_ref_loc (location_t, tree);
extern tree build_simple_mem_ref_loc (location_t, tree);


extern poly_offset_int mem_ref_offset (const_tree);
extern tree build_invariant_address (tree, tree, poly_int64);
extern tree constant_boolean_node (bool, tree);
extern tree div_if_zero_remainder (const_tree, const_tree);

extern bool tree_swap_operands_p (const_tree, const_tree);
extern enum tree_code swap_tree_comparison (enum tree_code);

extern bool ptr_difference_const (tree, tree, poly_int64_pod *);
extern enum tree_code invert_tree_comparison (enum tree_code, bool);
extern bool inverse_conditions_p (const_tree, const_tree);

extern bool tree_unary_nonzero_warnv_p (enum tree_code, tree, tree, bool *);
extern bool tree_binary_nonzero_warnv_p (enum tree_code, tree, tree, tree op1,
                                         bool *);
extern bool tree_single_nonzero_warnv_p (tree, bool *);
extern bool tree_unary_nonnegative_warnv_p (enum tree_code, tree, tree,
         bool *, int);
extern bool tree_binary_nonnegative_warnv_p (enum tree_code, tree, tree, tree,
          bool *, int);
extern bool tree_single_nonnegative_warnv_p (tree, bool *, int);
extern bool tree_call_nonnegative_warnv_p (tree, combined_fn, tree, tree,
        bool *, int);

extern bool integer_valued_real_unary_p (tree_code, tree, int);
extern bool integer_valued_real_binary_p (tree_code, tree, tree, int);
extern bool integer_valued_real_call_p (combined_fn, tree, tree, int);
extern bool integer_valued_real_single_p (tree, int);
extern bool integer_valued_real_p (tree, int = 0);

extern bool fold_real_zero_addition_p (const_tree, const_tree, int);
extern tree combine_comparisons (location_t, enum tree_code, enum tree_code,
     enum tree_code, tree, tree, tree);
extern void debug_fold_checksum (const_tree);
extern bool may_negate_without_overflow_p (const_tree);

extern tree round_up_loc (location_t, tree, unsigned int);

extern tree round_down_loc (location_t, tree, int);
extern tree size_int_kind (poly_int64, enum size_type_kind);


extern tree size_binop_loc (location_t, enum tree_code, tree, tree);


extern tree size_diffop_loc (location_t, tree, tree);



extern tree non_lvalue_loc (location_t, tree);

extern bool tree_expr_nonzero_p (tree);
extern bool tree_expr_nonnegative_p (tree);
extern bool tree_expr_nonnegative_warnv_p (tree, bool *, int = 0);
extern tree make_range (tree, int *, tree *, tree *, bool *);
extern tree make_range_step (location_t, enum tree_code, tree, tree, tree,
        tree *, tree *, int *, bool *);
extern tree range_check_type (tree);
extern tree build_range_check (location_t, tree, tree, int, tree, tree);
extern bool merge_ranges (int *, tree *, tree *, int, tree, tree, int,
     tree, tree);
extern tree sign_bit_p (tree, const_tree);
extern tree exact_inverse (tree, tree);
extern bool expr_not_equal_to (tree t, const wide_int &);
extern tree const_unop (enum tree_code, tree, tree);
extern tree const_binop (enum tree_code, tree, tree, tree);
extern bool negate_mathfn_p (combined_fn);
extern const char *getbyterep (tree, unsigned long *);
extern const char *c_getstr (tree);
extern wide_int tree_nonzero_bits (const_tree);



extern tree convert_to_ptrofftype_loc (location_t loc, tree off);




extern tree fold_build_pointer_plus_loc (location_t loc, tree ptr, tree off);





extern tree fold_build_pointer_plus_hwi_loc (location_t loc, tree ptr, long off);







class operand_compare
{
public:


  virtual bool operand_equal_p (const_tree, const_tree, unsigned int flags);



  virtual void hash_operand (const_tree, inchash::hash &, unsigned flags);

protected:



  bool verify_hash_value (const_tree arg0, const_tree arg1, unsigned int flags,
     bool *ret);
};
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h" 2
# 44 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h"
# 1 "./bversion.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h" 2


typedef enum
{

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.def" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.def"
DK_UNSPECIFIED,




DK_IGNORED,


DK_FATAL,
DK_ICE,
DK_ERROR,
DK_SORRY,
DK_WARNING,
DK_ANACHRONISM,
DK_NOTE,
DK_DEBUG,



DK_DIAGNOSTIC_PATH,



DK_PEDWARN,
DK_PERMERROR,


DK_WERROR,


DK_ICE_NOBT,
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h" 2

  DK_LAST_DIAGNOSTIC_KIND,


  DK_POP
} diagnostic_t;



class auto_diagnostic_group
{
 public:
  auto_diagnostic_group ();
  ~auto_diagnostic_group ();
};


class diagnostic_metadata;

extern const char *progname;

extern const char *trim_filename (const char *);
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h"
extern void internal_error (const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)))
     __attribute__ ((__noreturn__));
extern void internal_error_no_backtrace (const char *, ...)
     __attribute__ ((__format__ (__gcc_cxxdiag__, 1, 2))) __attribute__ ((__nonnull__ (1))) __attribute__ ((__noreturn__));

extern bool warning (int, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern bool warning_n (location_t, int, unsigned long,
         const char *, const char *, ...)
    __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 6))) __attribute__ ((__nonnull__ (4))) __attribute__ ((__format__ (__gcc_cxxdiag__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool warning_n (rich_location *, int, unsigned long,
         const char *, const char *, ...)
    __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 6))) __attribute__ ((__nonnull__ (4))) __attribute__ ((__format__ (__gcc_cxxdiag__, 5, 6))) __attribute__ ((__nonnull__ (5)));
extern bool warning_at (location_t, int, const char *, ...)
    __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool warning_at (rich_location *, int, const char *, ...)
    __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool warning_meta (rich_location *,
     const diagnostic_metadata &, int,
     const char *, ...)
    __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 5))) __attribute__ ((__nonnull__ (4)));
extern void error (const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern void error_n (location_t, unsigned long, const char *,
       const char *, ...)
    __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 5))) __attribute__ ((__nonnull__ (3))) __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 5))) __attribute__ ((__nonnull__ (4)));
extern void error_at (location_t, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void error_at (rich_location *, const char *, ...)
  __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void fatal_error (location_t, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)))
     __attribute__ ((__noreturn__));

extern bool pedwarn (location_t, int, const char *, ...)
     __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool pedwarn (rich_location *, int, const char *, ...)
     __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern bool permerror (location_t, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern bool permerror (rich_location *, const char *,
       ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void sorry (const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern void sorry_at (location_t, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void inform (location_t, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void inform (rich_location *, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 3))) __attribute__ ((__nonnull__ (2)));
extern void inform_n (location_t, unsigned long, const char *,
        const char *, ...)
    __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 5))) __attribute__ ((__nonnull__ (3))) __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 5))) __attribute__ ((__nonnull__ (4)));
extern void verbatim (const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 1, 2))) __attribute__ ((__nonnull__ (1)));
extern bool emit_diagnostic (diagnostic_t, location_t, int,
        const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 5))) __attribute__ ((__nonnull__ (4)));
extern bool emit_diagnostic (diagnostic_t, rich_location *, int,
        const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 5))) __attribute__ ((__nonnull__ (4)));
extern bool emit_diagnostic_valist (diagnostic_t, location_t, int, const char *,
        va_list *) __attribute__ ((__format__ (__gcc_cxxdiag__, 4, 0))) __attribute__ ((__nonnull__ (4)));
extern bool seen_error (void);




extern void fnotice (FILE *, const char *, ...)
     __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__nonnull__ (2)));
# 45 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h" 2
# 63 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
enum rid
{


  RID_STATIC = 0,
  RID_UNSIGNED, RID_LONG, RID_CONST, RID_EXTERN,
  RID_REGISTER, RID_TYPEDEF, RID_SHORT, RID_INLINE,
  RID_VOLATILE, RID_SIGNED, RID_AUTO, RID_RESTRICT,
  RID_NORETURN, RID_ATOMIC,


  RID_COMPLEX, RID_THREAD, RID_SAT,


  RID_FRIEND, RID_VIRTUAL, RID_EXPLICIT, RID_EXPORT, RID_MUTABLE,



  RID_IN, RID_OUT, RID_INOUT, RID_BYCOPY, RID_BYREF, RID_ONEWAY,



  RID_GETTER, RID_SETTER,
  RID_READONLY, RID_READWRITE,
  RID_ASSIGN, RID_RETAIN, RID_COPY,
  RID_NONATOMIC,



  RID_IMAGINARY,


  RID_INT, RID_CHAR, RID_FLOAT, RID_DOUBLE, RID_VOID,
  RID_ENUM, RID_STRUCT, RID_UNION, RID_IF, RID_ELSE,
  RID_WHILE, RID_DO, RID_FOR, RID_SWITCH, RID_CASE,
  RID_DEFAULT, RID_BREAK, RID_CONTINUE, RID_RETURN, RID_GOTO,
  RID_SIZEOF,


  RID_ASM, RID_TYPEOF, RID_ALIGNOF, RID_ATTRIBUTE, RID_VA_ARG,
  RID_EXTENSION, RID_IMAGPART, RID_REALPART, RID_LABEL, RID_CHOOSE_EXPR,
  RID_TYPES_COMPATIBLE_P, RID_BUILTIN_COMPLEX, RID_BUILTIN_SHUFFLE,
  RID_BUILTIN_CONVERTVECTOR, RID_BUILTIN_TGMATH,
  RID_BUILTIN_HAS_ATTRIBUTE,
  RID_DFLOAT32, RID_DFLOAT64, RID_DFLOAT128,


  RID_FLOAT16,
  RID_FLOATN_NX_FIRST = RID_FLOAT16,
  RID_FLOAT32,
  RID_FLOAT64,
  RID_FLOAT128,
  RID_FLOAT32X,
  RID_FLOAT64X,
  RID_FLOAT128X,




  RID_FRACT, RID_ACCUM, RID_AUTO_TYPE, RID_BUILTIN_CALL_WITH_STATIC_CHAIN,


  RID_GIMPLE,


  RID_PHI,


  RID_RTL,


  RID_ALIGNAS, RID_GENERIC,



  RID_CXX_COMPAT_WARN,


  RID_TRANSACTION_ATOMIC, RID_TRANSACTION_RELAXED, RID_TRANSACTION_CANCEL,


  RID_FUNCTION_NAME, RID_PRETTY_FUNCTION_NAME, RID_C99_FUNCTION_NAME,



  RID_BOOL, RID_WCHAR, RID_CLASS,
  RID_PUBLIC, RID_PRIVATE, RID_PROTECTED,
  RID_TEMPLATE, RID_NULL, RID_CATCH,
  RID_DELETE, RID_FALSE, RID_NAMESPACE,
  RID_NEW, RID_OFFSETOF, RID_OPERATOR,
  RID_THIS, RID_THROW, RID_TRUE,
  RID_TRY, RID_TYPENAME, RID_TYPEID,
  RID_USING, RID_CHAR16, RID_CHAR32,


  RID_CONSTCAST, RID_DYNCAST, RID_REINTCAST, RID_STATCAST,


  RID_ADDRESSOF, RID_BASES,
  RID_BUILTIN_LAUNDER, RID_DIRECT_BASES,
  RID_HAS_NOTHROW_ASSIGN, RID_HAS_NOTHROW_CONSTRUCTOR,
  RID_HAS_NOTHROW_COPY, RID_HAS_TRIVIAL_ASSIGN,
  RID_HAS_TRIVIAL_CONSTRUCTOR, RID_HAS_TRIVIAL_COPY,
  RID_HAS_TRIVIAL_DESTRUCTOR, RID_HAS_UNIQUE_OBJ_REPRESENTATIONS,
  RID_HAS_VIRTUAL_DESTRUCTOR,
  RID_IS_ABSTRACT, RID_IS_AGGREGATE,
  RID_IS_BASE_OF, RID_IS_CLASS,
  RID_IS_EMPTY, RID_IS_ENUM,
  RID_IS_FINAL, RID_IS_LITERAL_TYPE,
  RID_IS_POD, RID_IS_POLYMORPHIC,
  RID_IS_SAME_AS,
  RID_IS_STD_LAYOUT, RID_IS_TRIVIAL,
  RID_IS_TRIVIALLY_ASSIGNABLE, RID_IS_TRIVIALLY_CONSTRUCTIBLE,
  RID_IS_TRIVIALLY_COPYABLE,
  RID_IS_UNION, RID_UNDERLYING_TYPE,
  RID_IS_ASSIGNABLE, RID_IS_CONSTRUCTIBLE,


  RID_CONSTEXPR, RID_DECLTYPE, RID_NOEXCEPT, RID_NULLPTR, RID_STATIC_ASSERT,


  RID_CONSTINIT, RID_CONSTEVAL,


  RID_CHAR8,


  RID_CONCEPT, RID_REQUIRES,


  RID_CO_AWAIT, RID_CO_YIELD, RID_CO_RETURN,


  RID_ATOMIC_NOEXCEPT, RID_ATOMIC_CANCEL, RID_SYNCHRONIZED,



  RID_AT_ENCODE, RID_AT_END,
  RID_AT_CLASS, RID_AT_ALIAS, RID_AT_DEFS,
  RID_AT_PRIVATE, RID_AT_PROTECTED, RID_AT_PUBLIC, RID_AT_PACKAGE,
  RID_AT_PROTOCOL, RID_AT_SELECTOR,
  RID_AT_THROW, RID_AT_TRY, RID_AT_CATCH,
  RID_AT_FINALLY, RID_AT_SYNCHRONIZED,
  RID_AT_OPTIONAL, RID_AT_REQUIRED, RID_AT_PROPERTY,
  RID_AT_SYNTHESIZE, RID_AT_DYNAMIC,
  RID_AT_INTERFACE,
  RID_AT_IMPLEMENTATION,





  RID_ADDR_SPACE_0,
  RID_ADDR_SPACE_1,
  RID_ADDR_SPACE_2,
  RID_ADDR_SPACE_3,
  RID_ADDR_SPACE_4,
  RID_ADDR_SPACE_5,
  RID_ADDR_SPACE_6,
  RID_ADDR_SPACE_7,
  RID_ADDR_SPACE_8,
  RID_ADDR_SPACE_9,
  RID_ADDR_SPACE_10,
  RID_ADDR_SPACE_11,
  RID_ADDR_SPACE_12,
  RID_ADDR_SPACE_13,
  RID_ADDR_SPACE_14,
  RID_ADDR_SPACE_15,

  RID_FIRST_ADDR_SPACE = RID_ADDR_SPACE_0,
  RID_LAST_ADDR_SPACE = RID_ADDR_SPACE_15,
# 244 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
  RID_INT_N_0,
  RID_INT_N_1,
  RID_INT_N_2,
  RID_INT_N_3,

  RID_FIRST_INT_N = RID_INT_N_0,
  RID_LAST_INT_N = RID_INT_N_3,

  RID_MAX,

  RID_FIRST_MODIFIER = RID_STATIC,
  RID_LAST_MODIFIER = RID_ONEWAY,

  RID_FIRST_CXX11 = RID_CONSTEXPR,
  RID_LAST_CXX11 = RID_STATIC_ASSERT,
  RID_FIRST_CXX20 = RID_CONSTINIT,
  RID_LAST_CXX20 = RID_CONSTINIT,
  RID_FIRST_AT = RID_AT_ENCODE,
  RID_LAST_AT = RID_AT_IMPLEMENTATION,
  RID_FIRST_PQ = RID_IN,
  RID_LAST_PQ = RID_ONEWAY,
  RID_FIRST_PATTR = RID_GETTER,
  RID_LAST_PATTR = RID_NONATOMIC
};
# 295 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern tree *ridpointers;



enum c_tree_index
{
    CTI_CHAR8_TYPE,
    CTI_CHAR16_TYPE,
    CTI_CHAR32_TYPE,
    CTI_WCHAR_TYPE,
    CTI_UNDERLYING_WCHAR_TYPE,
    CTI_WINT_TYPE,
    CTI_SIGNED_SIZE_TYPE,
    CTI_UNSIGNED_PTRDIFF_TYPE,
    CTI_INTMAX_TYPE,
    CTI_UINTMAX_TYPE,
    CTI_WIDEST_INT_LIT_TYPE,
    CTI_WIDEST_UINT_LIT_TYPE,



    CTI_SIG_ATOMIC_TYPE,
    CTI_INT8_TYPE,
    CTI_INT16_TYPE,
    CTI_INT32_TYPE,
    CTI_INT64_TYPE,
    CTI_UINT8_TYPE,
    CTI_UINT16_TYPE,
    CTI_UINT32_TYPE,
    CTI_UINT64_TYPE,
    CTI_INT_LEAST8_TYPE,
    CTI_INT_LEAST16_TYPE,
    CTI_INT_LEAST32_TYPE,
    CTI_INT_LEAST64_TYPE,
    CTI_UINT_LEAST8_TYPE,
    CTI_UINT_LEAST16_TYPE,
    CTI_UINT_LEAST32_TYPE,
    CTI_UINT_LEAST64_TYPE,
    CTI_INT_FAST8_TYPE,
    CTI_INT_FAST16_TYPE,
    CTI_INT_FAST32_TYPE,
    CTI_INT_FAST64_TYPE,
    CTI_UINT_FAST8_TYPE,
    CTI_UINT_FAST16_TYPE,
    CTI_UINT_FAST32_TYPE,
    CTI_UINT_FAST64_TYPE,
    CTI_INTPTR_TYPE,
    CTI_UINTPTR_TYPE,

    CTI_CHAR_ARRAY_TYPE,
    CTI_CHAR8_ARRAY_TYPE,
    CTI_CHAR16_ARRAY_TYPE,
    CTI_CHAR32_ARRAY_TYPE,
    CTI_WCHAR_ARRAY_TYPE,
    CTI_STRING_TYPE,
    CTI_CONST_STRING_TYPE,


    CTI_TRUTHVALUE_TYPE,
    CTI_TRUTHVALUE_TRUE,
    CTI_TRUTHVALUE_FALSE,

    CTI_DEFAULT_FUNCTION_TYPE,


    CTI_FUNCTION_NAME_DECL,
    CTI_PRETTY_FUNCTION_NAME_DECL,
    CTI_C99_FUNCTION_NAME_DECL,
    CTI_SAVED_FUNCTION_NAME_DECLS,

    CTI_NULL,

    CTI_MAX
};
# 379 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
struct c_common_identifier {
  struct tree_common common;
  struct cpp_hashnode node;
};



struct c_common_resword
{
  const char *const word;
  enum rid const rid : 16;
  const unsigned int disable : 16;
};



extern machine_mode c_default_pointer_mode;
# 446 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern const struct c_common_resword c_common_reswords[];


extern const unsigned int num_c_common_reswords;
# 514 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern tree c_global_trees[CTI_MAX];





enum c_language_kind
{
  clk_c = 0,
  clk_objc = 1,
  clk_cxx = 2,
  clk_objcxx = 3
};



extern c_language_kind c_language;





enum ref_operator {

  RO_NULL,

  RO_ARRAY_INDEXING,

  RO_UNARY_STAR,

  RO_ARROW,

  RO_IMPLICIT_CONVERSION,

  RO_ARROW_STAR
};



struct stmt_tree_s {

  vec<tree, va_gc> *x_cur_stmt_list;
# 566 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
  int stmts_are_full_exprs_p;
};

typedef struct stmt_tree_s *stmt_tree;




struct c_language_function {


  struct stmt_tree_s x_stmt_tree;



  vec<tree, va_gc> *local_typedefs;
};
# 596 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern void (*lang_post_pch_load) (void);

extern void push_file_scope (void);
extern void pop_file_scope (void);
extern stmt_tree current_stmt_tree (void);
extern tree push_stmt_list (void);
extern tree pop_stmt_list (tree);
extern tree add_stmt (tree);
extern void push_cleanup (tree, tree, bool);

extern tree build_modify_expr (location_t, tree, tree, enum tree_code,
          location_t, tree, tree);
extern tree build_indirect_ref (location_t, tree, ref_operator);

extern bool has_c_linkage (const_tree decl);
extern bool c_decl_implicit (const_tree);





extern char flag_no_line_commands;




extern char flag_no_output;




extern char flag_dump_macros;



extern char flag_dump_includes;



extern bool flag_pch_preprocess;




extern const char *pch_file;




extern int flag_iso;







extern int flag_cond_mismatch;



extern int flag_isoc94;



extern int flag_isoc99;



extern int flag_isoc11;



extern int flag_isoc2x;



extern int flag_hosted;
# 682 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern int print_struct_values;



extern const char *constant_string_class_name;






extern int warn_abi_version;
# 711 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
enum cxx_dialect {
  cxx_unset,

  cxx98,
  cxx03 = cxx98,

  cxx0x,
  cxx11 = cxx0x,

  cxx14,

  cxx17,

  cxx20
};


extern enum cxx_dialect cxx_dialect;





extern int max_tinst_depth;







extern int c_inhibit_evaluation_warnings;




extern bool done_lexing;
# 769 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
inline bool
gnu_vector_type_p (const_tree type)
{
  return ((enum tree_code) (type)->base.code) == VECTOR_TYPE && !((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h", 772, __FUNCTION__))->type_common.indivisible_p);
}

struct visibility_flags
{
  unsigned inpragma : 1;
  unsigned inlines_hidden : 1;
};


enum conversion_safety {

  SAFE_CONVERSION = 0,

  UNSAFE_OTHER,

  UNSAFE_SIGN,


  UNSAFE_REAL,


  UNSAFE_IMAGINARY
};


extern struct visibility_flags visibility_options;


extern const struct attribute_spec c_common_attribute_table[];
extern const struct attribute_spec c_common_format_attribute_table[];






extern tree (*make_fname_decl) (location_t, tree, int);


extern void c_register_addr_space (const char *str, addr_space_t as);


extern bool in_late_binary_op;
extern const char *c_addr_space_name (addr_space_t as);
extern tree identifier_global_value (tree);
extern tree identifier_global_tag (tree);
extern bool names_builtin_p (const char *);
extern tree c_linkage_bindings (tree);
extern void record_builtin_type (enum rid, const char *, tree);
extern tree build_void_list_node (void);
extern void start_fname_decls (void);
extern void finish_fname_decls (void);
extern const char *fname_as_string (int);
extern tree fname_decl (location_t, unsigned, tree);

extern int check_user_alignment (const_tree, bool, bool);
extern bool check_function_arguments (location_t loc, const_tree, const_tree,
          int, tree *, vec<location_t> *);
extern void check_function_arguments_recurse (void (*)
           (void *, tree,
            unsigned long),
           void *, tree,
           unsigned long);
extern bool check_builtin_function_arguments (location_t, vec<location_t>,
           tree, tree, int, tree *);
extern void check_function_format (const_tree, tree, int, tree *,
       vec<location_t> *);
extern bool attribute_fallthrough_p (tree);
extern tree handle_format_attribute (tree *, tree, tree, int, bool *);
extern tree handle_format_arg_attribute (tree *, tree, tree, int, bool *);
extern bool c_common_handle_option (size_t, const char *, long, int,
        location_t,
        const struct cl_option_handlers *);
extern bool default_handle_c_option (size_t, const char *, int);
extern tree c_common_type_for_mode (machine_mode, int);
extern tree c_common_type_for_size (unsigned int, int);
extern tree c_common_fixed_point_type_for_size (unsigned int, unsigned int,
      int, int);
extern tree c_common_unsigned_type (tree);
extern tree c_common_signed_type (tree);
extern tree c_common_signed_or_unsigned_type (int, tree);
extern void c_common_init_ts (void);
extern tree c_build_bitfield_integer_type (unsigned long, int);
extern enum conversion_safety unsafe_conversion_p (tree, tree, tree, bool);
extern bool decl_with_nonnull_addr_p (const_tree);
extern tree c_fully_fold (tree, bool, bool *, bool = false);
extern tree c_wrap_maybe_const (tree, bool);
extern tree c_common_truthvalue_conversion (location_t, tree);
extern void c_apply_type_quals_to_decl (int, tree);
extern tree c_sizeof_or_alignof_type (location_t, tree, bool, bool, int);
extern tree c_alignof_expr (location_t, tree);


extern void binary_op_error (rich_location *, enum tree_code, tree, tree);
extern tree fix_string_type (tree);
extern tree convert_and_check (location_t, tree, tree);
extern bool c_determine_visibility (tree);
extern bool vector_types_compatible_elements_p (tree, tree);
extern void mark_valid_location_for_stdc_pragma (bool);
extern bool valid_location_for_stdc_pragma_p (void);
extern void set_float_const_decimal64 (void);
extern void clear_float_const_decimal64 (void);
extern bool float_const_decimal64_p (void);

extern bool keyword_begins_type_specifier (enum rid);
extern bool keyword_is_storage_class_specifier (enum rid);
extern bool keyword_is_type_qualifier (enum rid);
extern bool keyword_is_decl_specifier (enum rid);
extern unsigned max_align_t_align (void);
extern bool cxx_fundamental_alignment_p (unsigned);
extern bool pointer_to_zero_sized_aggr_p (tree);
extern bool bool_promoted_to_int_p (tree);
extern tree fold_for_warn (tree);
extern tree c_common_get_narrower (tree, int *);
extern bool get_attribute_operand (tree, unsigned long *);
extern void c_common_finalize_early_debug (void);






extern tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwise);




extern tree shorten_compare (location_t, tree *, tree *, tree *,
        enum tree_code *);

extern tree pointer_int_sum (location_t, enum tree_code, tree, tree,
        bool = true);


extern tree c_build_qualified_type (tree, int, tree = (tree) nullptr, size_t = 0);



extern void c_common_nodes_and_builtins (void);

extern void disable_builtin_function (const char *);

extern void set_compound_literal_name (tree decl);

extern tree build_va_arg (location_t, tree, tree);

extern const unsigned int c_family_lang_mask;
extern unsigned int c_common_option_lang_mask (void);
extern void c_common_diagnostics_set_defaults (diagnostic_context *);
extern bool c_common_complain_wrong_lang_p (const struct cl_option *);
extern void c_common_init_options_struct (struct gcc_options *);
extern void c_common_init_options (unsigned int, struct cl_decoded_option *);
extern bool c_common_post_options (const char **);
extern bool c_common_init (void);
extern void c_common_finish (void);
extern void c_common_parse_file (void);
extern FILE *get_dump_info (int, dump_flags_t *);
extern alias_set_type c_common_get_alias_set (tree);
extern void c_register_builtin_type (tree, const char*);
extern bool c_promoting_integer_type_p (const_tree);
extern bool self_promoting_args_p (const_tree);
extern tree strip_pointer_operator (tree);
extern tree strip_pointer_or_array_types (tree);
extern long c_common_to_target_charset (long);


extern void c_parse_file (void);

extern void c_parse_final_cleanups (void);
# 981 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern tree do_case (location_t, tree, tree);
extern tree build_stmt (location_t, enum tree_code, ...);
extern tree build_real_imag_expr (location_t, enum tree_code, tree);




extern tree build_unary_op (location_t, enum tree_code, tree, bool);
extern tree build_binary_op (location_t, enum tree_code, tree, tree, bool);
extern tree perform_integral_promotions (tree);




extern tree default_conversion (tree);




extern tree common_type (tree, tree);

extern tree decl_constant_value (tree);


extern tree boolean_increment (enum tree_code, tree);

extern int case_compare (splay_tree_key, splay_tree_key);

extern tree c_add_case_label (location_t, splay_tree, tree, tree, tree);
extern bool c_switch_covers_all_cases_p (splay_tree, tree);

extern tree build_function_call (location_t, tree, tree);

extern tree build_function_call_vec (location_t, vec<location_t>, tree,
         vec<tree, va_gc> *, vec<tree, va_gc> *,
         tree = (tree) nullptr);

extern tree resolve_overloaded_builtin (location_t, tree, vec<tree, va_gc> *);

extern tree finish_label_address_expr (tree, location_t);



extern tree lookup_label (tree);
extern tree lookup_name (tree);
extern bool lvalue_p (const_tree);

extern bool vector_targets_convertible_p (const_tree t1, const_tree t2);
extern bool vector_types_convertible_p (const_tree t1, const_tree t2, bool emit_lax_note);
extern tree c_build_vec_perm_expr (location_t, tree, tree, tree, bool = true);
extern tree c_build_vec_convert (location_t, tree, location_t, tree, bool = true);

extern void init_c_lex (void);

extern void c_cpp_builtins (cpp_reader *);
extern void c_cpp_builtins_optimize_pragma (cpp_reader *, tree, tree);
extern bool c_cpp_diagnostic (cpp_reader *, enum cpp_diagnostic_level,
         enum cpp_warning_reason, rich_location *,
         const char *, va_list *)
     __attribute__ ((__format__ (__gcc_cxxdiag__, 5, 0))) __attribute__ ((__nonnull__ (5)));
extern int c_common_has_attribute (cpp_reader *);
extern int c_common_has_builtin (cpp_reader *);

extern bool parse_optimize_options (tree, bool);



extern int pending_lang_change;



struct c_fileinfo
{
  int time;







  short interface_only;
  short interface_unknown;
};

struct c_fileinfo *get_fileinfo (const char *);
extern void dump_time_statistics (void);

extern bool c_dump_tree (void *, tree);

extern void verify_sequence_points (tree);

extern tree fold_offsetof (tree, tree = global_trees[TI_SIZE_TYPE],
      tree_code ctx = ERROR_MARK);

extern int complete_array_type (tree *, tree, bool);
extern void complete_flexible_array_elts (tree);

extern tree builtin_type_for_size (int, bool);

extern void c_common_mark_addressable_vec (tree);

extern void set_underlying_type (tree);
extern bool user_facing_original_type_p (const_tree);
extern void record_types_used_by_current_var_decl (tree);
extern vec<tree, va_gc> *make_tree_vector (void);
extern void release_tree_vector (vec<tree, va_gc> *);
extern vec<tree, va_gc> *make_tree_vector_single (tree);
extern vec<tree, va_gc> *make_tree_vector_from_list (tree);
extern vec<tree, va_gc> *make_tree_vector_from_ctor (tree);
extern vec<tree, va_gc> *make_tree_vector_copy (const vec<tree, va_gc> *);



extern tree registered_builtin_types;




extern time_t cb_get_source_date_epoch (cpp_reader *pfile);
# 1109 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern const char *cb_get_suggestion (cpp_reader *, const char *,
          const char *const *);

extern string_concat_db *g_string_concat_db;

class substring_loc;
extern const char *c_get_substring_location (const substring_loc &substr_loc,
          location_t *out_loc);


extern void c_genericize (tree);
extern int c_gimplify_expr (tree *, gimple_seq *, gimple_seq *);
extern tree c_build_bind_expr (location_t, tree, tree);


extern enum cpp_ttype
conflict_marker_get_final_tok_kind (enum cpp_ttype tok1_kind);


extern void pch_init (void);
extern void pch_cpp_save_state (void);
extern int c_common_valid_pch (cpp_reader *pfile, const char *name, int fd);
extern void c_common_read_pch (cpp_reader *pfile, const char *name, int fd,
          const char *orig);
extern void c_common_write_pch (void);
extern void c_common_no_more_pch (void);
extern void c_common_pch_pragma (cpp_reader *pfile, const char *);


extern const unsigned char executable_checksum[16];


extern void builtin_define_std (const char *macro);
extern void builtin_define_with_value (const char *, const char *, int);
extern void builtin_define_with_int_value (const char *, long);
extern void builtin_define_type_sizeof (const char *, tree);
extern void c_stddef_cpp_builtins (void);
extern void fe_file_change (const line_map_ordinary *);
extern void c_parse_error (const char *, enum cpp_ttype, tree, unsigned char,
      rich_location *richloc);


extern void init_pp_output (FILE *);
extern void preprocess_file (cpp_reader *);
extern void pp_file_change (const line_map_ordinary *);
extern void pp_dir_change (cpp_reader *, const char *);
extern bool check_missing_format_attribute (tree, tree);


typedef wide_int_bitmask omp_clause_mask;



enum c_omp_clause_split
{
  C_OMP_CLAUSE_SPLIT_TARGET = 0,
  C_OMP_CLAUSE_SPLIT_TEAMS,
  C_OMP_CLAUSE_SPLIT_DISTRIBUTE,
  C_OMP_CLAUSE_SPLIT_PARALLEL,
  C_OMP_CLAUSE_SPLIT_FOR,
  C_OMP_CLAUSE_SPLIT_SIMD,
  C_OMP_CLAUSE_SPLIT_COUNT,
  C_OMP_CLAUSE_SPLIT_SECTIONS = C_OMP_CLAUSE_SPLIT_FOR,
  C_OMP_CLAUSE_SPLIT_TASKLOOP = C_OMP_CLAUSE_SPLIT_FOR,
  C_OMP_CLAUSE_SPLIT_LOOP = C_OMP_CLAUSE_SPLIT_FOR
};

enum c_omp_region_type
{
  C_ORT_OMP = 1 << 0,
  C_ORT_ACC = 1 << 1,
  C_ORT_DECLARE_SIMD = 1 << 2,
  C_ORT_OMP_DECLARE_SIMD = C_ORT_OMP | C_ORT_DECLARE_SIMD
};

extern tree c_finish_omp_master (location_t, tree);
extern tree c_finish_omp_taskgroup (location_t, tree, tree);
extern tree c_finish_omp_critical (location_t, tree, tree, tree);
extern tree c_finish_omp_ordered (location_t, tree, tree);
extern void c_finish_omp_barrier (location_t);
extern tree c_finish_omp_atomic (location_t, enum tree_code, enum tree_code,
     tree, tree, tree, tree, tree, bool,
     enum omp_memory_order, bool = false);
extern bool c_omp_depend_t_p (tree);
extern void c_finish_omp_depobj (location_t, tree, enum omp_clause_depend_kind,
     tree);
extern void c_finish_omp_flush (location_t, int);
extern void c_finish_omp_taskwait (location_t);
extern void c_finish_omp_taskyield (location_t);
extern tree c_finish_omp_for (location_t, enum tree_code, tree, tree, tree,
         tree, tree, tree, tree, bool);
extern bool c_omp_check_loop_iv (tree, tree, walk_tree_lh);
extern bool c_omp_check_loop_iv_exprs (location_t, tree, int, tree, tree, tree,
           walk_tree_lh);
extern tree c_finish_oacc_wait (location_t, tree, tree);
extern tree c_oacc_split_loop_clauses (tree, tree *, bool);
extern void c_omp_split_clauses (location_t, enum tree_code, omp_clause_mask,
     tree, tree *);
extern tree c_omp_declare_simd_clauses_to_numbers (tree, tree);
extern void c_omp_declare_simd_clauses_to_decls (tree, tree);
extern bool c_omp_predefined_variable (tree);
extern enum omp_clause_default_kind c_omp_predetermined_sharing (tree);
extern enum omp_clause_defaultmap_kind c_omp_predetermined_mapping (tree);
extern tree c_omp_check_context_selector (location_t, tree);
extern void c_omp_mark_declare_variant (location_t, tree, tree);
extern const char *c_omp_map_clause_name (tree, bool);


static inline tree
c_tree_chain_next (tree t)
{



  if ((tree_contains_struct[(((enum tree_code) (t)->base.code))][(TS_TYPE_COMMON)]))
    return ((tree_class_check ((t), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h", 1224, __FUNCTION__))->type_common.next_variant);

  if ((tree_contains_struct[(((enum tree_code) (t)->base.code))][(TS_COMMON)]))
    return ((contains_struct_check ((t), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h", 1227, __FUNCTION__))->common.chain);
  return nullptr;
}
# 1249 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
enum overflow_type {
  OT_UNDERFLOW = -1,
  OT_NONE,
  OT_OVERFLOW
};

struct tree_userdef_literal {
  struct tree_base base;
  tree suffix_id;
  tree value;
  tree num_string;
  enum overflow_type overflow;
};
# 1278 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-common.h"
extern tree build_userdef_literal (tree suffix_id, tree value,
       enum overflow_type overflow,
       tree num_string);

extern bool convert_vector_to_array_for_subscript (location_t, tree *, tree);


enum stv_conv {
  stv_error,
  stv_nothing,
  stv_firstarg,
  stv_secondarg
};

extern enum stv_conv scalar_to_vector (location_t loc, enum tree_code code,
           tree op0, tree op1, bool);

extern tree find_inv_trees (tree *, int *, void *);
extern tree replace_inv_trees (tree *, int *, void *);

extern bool reject_gcc_builtin (const_tree, location_t = ((location_t) 0));
extern bool valid_array_size_p (location_t, const_tree, tree, bool = true);
extern void invalid_array_size_error (location_t, cst_size_error,
          const_tree, const_tree);


extern void constant_expression_warning (tree);
extern void constant_expression_error (tree);
extern void overflow_warning (location_t, tree, tree = (tree) nullptr);
extern void warn_logical_operator (location_t, enum tree_code, tree,
       enum tree_code, tree, enum tree_code, tree);
extern void warn_tautological_cmp (const op_location_t &, enum tree_code,
       tree, tree);
extern void warn_logical_not_parentheses (location_t, enum tree_code, tree,
       tree);
extern bool warn_if_unused_value (const_tree, location_t);
extern bool strict_aliasing_warning (location_t, tree, tree);
extern void sizeof_pointer_memaccess_warning (location_t *, tree,
           vec<tree, va_gc> *, tree *,
           bool (*) (tree, tree));
extern void check_main_parameter_types (tree decl);
extern void warnings_for_convert_and_check (location_t, tree, tree, tree);
extern void c_do_switch_warnings (splay_tree, location_t, tree, tree, bool);
extern void warn_for_omitted_condop (location_t, tree);
extern bool warn_for_restrict (unsigned, tree *, unsigned);
extern void warn_for_address_or_pointer_of_packed_member (tree, tree);




enum lvalue_use {
  lv_assign,
  lv_increment,
  lv_decrement,
  lv_addressof,
  lv_asm
};

extern void lvalue_error (location_t, enum lvalue_use);
extern void invalid_indirection_error (location_t, tree, ref_operator);
extern void readonly_error (location_t, tree, enum lvalue_use);
extern void warn_array_subscript_with_type_char (location_t, tree);
extern void warn_about_parentheses (location_t,
        enum tree_code,
        enum tree_code, tree,
        enum tree_code, tree);
extern void warn_for_unused_label (tree label);
extern void warn_for_div_by_zero (location_t, tree divisor);
extern void warn_for_memset (location_t, tree, tree, int);
extern void warn_for_sign_compare (location_t,
       tree orig_op0, tree orig_op1,
       tree op0, tree op1,
       tree result_type,
       enum tree_code resultcode);
extern void do_warn_double_promotion (tree, tree, tree, const char *,
          location_t);
extern void do_warn_unused_parameter (tree);
extern void record_locally_defined_typedef (tree);
extern void maybe_record_typedef_use (tree);
extern void maybe_warn_unused_local_typedefs (void);
extern void maybe_warn_bool_compare (location_t, enum tree_code, tree, tree);
extern bool maybe_warn_shift_overflow (location_t, tree, tree);
extern void warn_duplicated_cond_add_or_warn (location_t, tree, vec<tree> **);
extern bool diagnose_mismatched_attributes (tree, tree);
extern tree do_warn_duplicated_branches_r (tree *, int *, void *);
extern void warn_for_multistatement_macros (location_t, location_t,
         location_t, enum rid);


extern bool attribute_takes_identifier_p (const_tree);
extern tree handle_deprecated_attribute (tree *, tree, tree, int, bool *);
extern tree handle_unused_attribute (tree *, tree, tree, int, bool *);
extern tree handle_fallthrough_attribute (tree *, tree, tree, int, bool *);
extern int parse_tm_stmt_attr (tree, int);
extern int tm_attr_to_mask (tree);
extern tree tm_mask_to_attr (int);
extern tree find_tm_attribute (tree);
extern const struct attribute_spec::exclusions attr_cold_hot_exclusions[];
extern const struct attribute_spec::exclusions attr_noreturn_exclusions[];
extern tree handle_noreturn_attribute (tree *, tree, tree, int, bool *);


extern bool valid_format_string_type_p (tree);


enum posargflags {

  POSARG_ZERO = 1,


  POSARG_ELLIPSIS = 2
};

extern tree positional_argument (const_tree, const_tree, tree, tree_code,
     int = 0, int = posargflags ());

extern enum flt_eval_method
excess_precision_mode_join (enum flt_eval_method, enum flt_eval_method);

extern int c_flt_eval_method (bool ts18661_p);
extern void add_no_sanitize_value (tree node, unsigned int flags);

extern void maybe_add_include_fixit (rich_location *, const char *, bool);
extern void maybe_suggest_missing_token_insertion (rich_location *richloc,
         enum cpp_ttype token_type,
         location_t prev_token_loc);
extern tree braced_lists_to_strings (tree, tree);

extern bool has_attribute (location_t, tree, tree, tree (*)(tree));


namespace selftest {


  extern void c_format_c_tests (void);
  extern void c_indentation_c_tests (void);
  extern void c_pretty_print_c_tests (void);
  extern void c_spellcheck_cc_tests (void);


  extern void c_family_tests (void);
}
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-url.h" 1
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-url.h"
typedef enum
{
  DIAGNOSTICS_URL_NO = 0,
  DIAGNOSTICS_URL_YES = 1,
  DIAGNOSTICS_URL_AUTO = 2
} diagnostic_url_rule_t;



enum diagnostic_url_format
{

  URL_FORMAT_NONE,


  URL_FORMAT_ST,


  URL_FORMAT_BEL
};

const diagnostic_url_format URL_FORMAT_DEFAULT = URL_FORMAT_BEL;

extern diagnostic_url_format determine_url_format (diagnostic_url_rule_t);
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h" 2






struct text_info
{
  const char *format_spec;
  va_list *args_ptr;
  int err_no;
  void **x_data;
  rich_location *m_richloc;

  void set_location (unsigned int idx, location_t loc,
       enum range_display_kind range_display_kind);
  location_t get_location (unsigned int index_of_location) const;
};






enum diagnostic_prefixing_rule_t
{
  DIAGNOSTICS_SHOW_PREFIX_ONCE = 0x0,
  DIAGNOSTICS_SHOW_PREFIX_NEVER = 0x1,
  DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE = 0x2
};






struct chunk_info
{

  struct chunk_info *prev;







  const char *args[30 * 2];
};



class output_buffer
{
public:
  output_buffer ();
  ~output_buffer ();


  struct obstack formatted_obstack;



  struct obstack chunk_obstack;



  struct obstack *obstack;


  struct chunk_info *cur_chunk_array;


  FILE *stream;


  int line_length;



  char digit_buffer[128];




  bool flush_p;
};



static inline const char *
output_buffer_formatted_text (output_buffer *buff)
{
  __extension__ ({ struct obstack *__o = (buff->obstack); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < 1) _obstack_newchunk (__o, 1); ((void) (*((__o)->next_free)++ = ('\0'))); });
  return (const char *) ((void *) (buff->obstack)->object_base);
}



static inline void
output_buffer_append_r (output_buffer *buff, const char *start, int length)
{
  ((void)(!(start) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h", 128, __FUNCTION__), 0 : 0));
  __extension__ ({ struct obstack *__o = (buff->obstack); size_t __len = (length); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); memcpy (__o->next_free, start, __len); __o->next_free += __len; (void) 0; });
  for (int i = 0; i < length; i++)
    if (start[i] == '\n')
      buff->line_length = 0;
    else
      buff->line_length++;
}



static inline const char *
output_buffer_last_position_in_text (const output_buffer *buff)
{
  const char *p = nullptr;
  struct obstack *text = buff->obstack;

  if (((void *) (text)->object_base) != ((void *) (text)->next_free))
    p = ((const char *) ((void *) (text)->next_free)) - 1;
  return p;
}



typedef unsigned int pp_flags;

enum pp_padding
{
  pp_none, pp_before, pp_after
};



struct pp_wrapping_mode_t
{

  diagnostic_prefixing_rule_t rule;



  int line_cutoff;
};
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
typedef bool (*printer_fn) (pretty_printer *, text_info *, const char *,
       int, bool, bool, bool, bool *, const char **);






class format_postprocessor
{
 public:
  virtual ~format_postprocessor () {}
  virtual format_postprocessor *clone() const = 0;
  virtual void handle (pretty_printer *) = 0;
};
# 220 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
class pretty_printer
{
public:


  explicit pretty_printer (int = 0);
  explicit pretty_printer (const pretty_printer &other);

  virtual ~pretty_printer ();

  virtual pretty_printer *clone () const;


  output_buffer *buffer;



  char *prefix;


  pp_padding padding;



  int maximum_length;


  int indent_skip;


  pp_wrapping_mode_t wrapping;
# 261 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
  printer_fn format_decoder;





  format_postprocessor *m_format_postprocessor;


  bool emitted_prefix;


  bool need_newline;



  bool translate_identifiers;


  bool show_color;


  diagnostic_url_format url_format;
};

static inline const char *
pp_get_prefix (const pretty_printer *pp) { return pp->prefix; }
# 353 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
extern void pp_set_line_maximum_length (pretty_printer *, int);
extern void pp_set_prefix (pretty_printer *, char *);
extern char *pp_take_prefix (pretty_printer *);
extern void pp_destroy_prefix (pretty_printer *);
extern int pp_remaining_character_count_for_line (pretty_printer *);
extern void pp_clear_output_area (pretty_printer *);
extern const char *pp_formatted_text (pretty_printer *);
extern const char *pp_last_position_in_text (const pretty_printer *);
extern void pp_emit_prefix (pretty_printer *);
extern void pp_append_text (pretty_printer *, const char *, const char *);
extern void pp_newline_and_flush (pretty_printer *);
extern void pp_newline_and_indent (pretty_printer *, int);
extern void pp_separate_with (pretty_printer *, char);
# 382 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
extern void pp_printf (pretty_printer *, const char *, ...)
     __attribute__ ((__format__ (__gcc_cxxdiag__, 2 ,3))) __attribute__ ((__nonnull__ (2)));

extern void pp_verbatim (pretty_printer *, const char *, ...)
     __attribute__ ((__format__ (__gcc_cxxdiag__, 2 ,3))) __attribute__ ((__nonnull__ (2)));
extern void pp_flush (pretty_printer *);
extern void pp_really_flush (pretty_printer *);
extern void pp_format (pretty_printer *, text_info *);
extern void pp_output_formatted_text (pretty_printer *);
extern void pp_format_verbatim (pretty_printer *, text_info *);

extern void pp_indent (pretty_printer *);
extern void pp_newline (pretty_printer *);
extern void pp_character (pretty_printer *, int);
extern void pp_string (pretty_printer *, const char *);

extern void pp_write_text_to_stream (pretty_printer *);
extern void pp_write_text_as_dot_label_to_stream (pretty_printer *, bool);
extern void pp_write_text_as_html_like_dot_to_stream (pretty_printer *pp);

extern void pp_maybe_space (pretty_printer *);

extern void pp_begin_quote (pretty_printer *, bool);
extern void pp_end_quote (pretty_printer *, bool);

extern void pp_begin_url (pretty_printer *pp, const char *url);
extern void pp_end_url (pretty_printer *pp);


static inline pp_wrapping_mode_t
pp_set_verbatim_wrapping_ (pretty_printer *pp)
{
  pp_wrapping_mode_t oldmode = (pp)->wrapping;
  (pp)->wrapping.line_cutoff = 0;
  (pp)->wrapping.rule = DIAGNOSTICS_SHOW_PREFIX_NEVER;
  return oldmode;
}


extern const char *identifier_to_locale (const char *);
extern void *(*identifier_to_locale_alloc) (size_t);
extern void (*identifier_to_locale_free) (void *);



inline void
pp_wide_integer (pretty_printer *pp, long i)
{
  do { sprintf ((pp)->buffer->digit_buffer, "%" 
# 430 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h" 3 4
 "l" "d"
# 430 "/home/giulianob/gcc_git_gnu/gcc/gcc/pretty-print.h"
 , i); pp_string (pp, (pp)->buffer->digit_buffer); } while (0);
}

template<unsigned int N, typename T>
void pp_wide_integer (pretty_printer *pp, const poly_int_pod<N, T> &);
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic-core.h" 1
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h" 2






enum diagnostics_column_unit
{

  DIAGNOSTICS_COLUMN_UNIT_DISPLAY,


  DIAGNOSTICS_COLUMN_UNIT_BYTE
};



enum diagnostics_output_format
{

  DIAGNOSTICS_OUTPUT_FORMAT_TEXT,


  DIAGNOSTICS_OUTPUT_FORMAT_JSON
};


enum diagnostic_path_format
{

  DPF_NONE,



  DPF_SEPARATE_EVENTS,





  DPF_INLINE_EVENTS
};




struct diagnostic_info
{

  text_info message;


  rich_location *richloc;



  const diagnostic_metadata *metadata;


  void *x_data;

  diagnostic_t kind;

  int option_index;
};




struct diagnostic_classification_change_t
{
  location_t location;
  int option;
  diagnostic_t kind;
};


typedef void (*diagnostic_starter_fn) (diagnostic_context *,
           diagnostic_info *);

typedef void (*diagnostic_start_span_fn) (diagnostic_context *,
       expanded_location);

typedef void (*diagnostic_finalizer_fn) (diagnostic_context *,
      diagnostic_info *,
      diagnostic_t);

class edit_context;
namespace json { class value; }



struct diagnostic_context
{

  pretty_printer *printer;


  int diagnostic_count[DK_LAST_DIAGNOSTIC_KIND];


  bool warning_as_error_requested;



  int n_opts;







  diagnostic_t *classify_diagnostic;






  diagnostic_classification_change_t *classification_history;


  int n_classification_history;


  int *push_list;
  int n_push;



  bool show_caret;


  int caret_max_width;


  char caret_chars[rich_location::STATICALLY_ALLOCATED_RANGES];



  bool show_cwe;


  enum diagnostic_path_format path_format;


  bool show_path_depths;



  bool show_option_requested;


  bool abort_on_error;


  bool show_column;


  bool pedantic_errors;


  bool permissive;



  int opt_permissive;


  bool fatal_errors;


  bool dc_inhibit_warnings;


  bool dc_warn_system_headers;


  int max_errors;
# 214 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h"
  diagnostic_starter_fn begin_diagnostic;




  diagnostic_start_span_fn start_span;


  diagnostic_finalizer_fn end_diagnostic;


  void (*internal_error) (diagnostic_context *, const char *, va_list *);



  int (*option_enabled) (int, unsigned, void *);



  void *option_state;







  char *(*option_name) (diagnostic_context *, int, diagnostic_t, diagnostic_t);





  char *(*get_option_url) (diagnostic_context *, int);

  void (*print_path) (diagnostic_context *, const diagnostic_path *);
  json::value *(*make_json_for_path) (diagnostic_context *, const diagnostic_path *);


  void *x_data;


  location_t last_location;



  const line_map_ordinary *last_module;

  int lock;


  unsigned lang_mask;

  bool inhibit_notes_p;
# 276 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h"
  bool colorize_source_p;


  bool show_labels_p;



  bool show_line_numbers_p;



  int min_margin_width;



  bool show_ruler_p;



  bool parseable_fixits_p;


  enum diagnostics_column_unit column_unit;


  int column_origin;


  int tabstop;



  edit_context *edit_context_ptr;


  int diagnostic_group_nesting_depth;



  int diagnostic_group_emission_count;





  void (*begin_group_cb) (diagnostic_context * context);



  void (*end_group_cb) (diagnostic_context * context);


  void (*final_cb) (diagnostic_context *context);
};

static inline void
diagnostic_inhibit_notes (diagnostic_context * context)
{
  context->inhibit_notes_p = true;
}
# 362 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h"
extern diagnostic_context *global_dc;
# 389 "/home/giulianob/gcc_git_gnu/gcc/gcc/diagnostic.h"
static inline void
diagnostic_override_option_index (diagnostic_info *info, int optidx)
{
  info->option_index = optidx;
}


extern void diagnostic_initialize (diagnostic_context *, int);
extern void diagnostic_color_init (diagnostic_context *, int value = -1);
extern void diagnostic_urls_init (diagnostic_context *, int value = -1);
extern void diagnostic_finish (diagnostic_context *);
extern void diagnostic_report_current_module (diagnostic_context *, location_t);
extern void diagnostic_show_locus (diagnostic_context *,
       rich_location *richloc,
       diagnostic_t diagnostic_kind);
extern void diagnostic_show_any_path (diagnostic_context *, diagnostic_info *);


extern diagnostic_t diagnostic_classify_diagnostic (diagnostic_context *,
          int ,
          diagnostic_t ,
          location_t);
extern void diagnostic_push_diagnostics (diagnostic_context *, location_t);
extern void diagnostic_pop_diagnostics (diagnostic_context *, location_t);
extern bool diagnostic_report_diagnostic (diagnostic_context *,
       diagnostic_info *);

extern void diagnostic_set_info (diagnostic_info *, const char *, va_list *,
     rich_location *, diagnostic_t) __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 0))) __attribute__ ((__nonnull__ (2)));
extern void diagnostic_set_info_translated (diagnostic_info *, const char *,
         va_list *, rich_location *,
         diagnostic_t)
     __attribute__ ((__format__ (__gcc_cxxdiag__, 2, 0))) __attribute__ ((__nonnull__ (2)));
extern void diagnostic_append_note (diagnostic_context *, location_t,
                                    const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 4))) __attribute__ ((__nonnull__ (3)));

extern char *diagnostic_build_prefix (diagnostic_context *, const diagnostic_info *);
void default_diagnostic_starter (diagnostic_context *, diagnostic_info *);
void default_diagnostic_start_span_fn (diagnostic_context *,
           expanded_location);
void default_diagnostic_finalizer (diagnostic_context *, diagnostic_info *,
       diagnostic_t);
void diagnostic_set_caret_max_width (diagnostic_context *context, int value);
void diagnostic_action_after_output (diagnostic_context *, diagnostic_t);
void diagnostic_check_max_errors (diagnostic_context *, bool flush = false);

void diagnostic_file_cache_fini (void);

int get_terminal_width (void);




static inline location_t
diagnostic_location (const diagnostic_info * diagnostic, int which = 0)
{
  return diagnostic->message.get_location (which);
}



static inline unsigned int
diagnostic_num_locations (const diagnostic_info * diagnostic)
{
  return diagnostic->message.m_richloc->get_num_locations ();
}





static inline expanded_location
diagnostic_expand_location (const diagnostic_info * diagnostic, int which = 0)
{
  return diagnostic->richloc->get_expanded_location (which);
}




const int CARET_LINE_MARGIN = 10;





static inline bool
diagnostic_same_line (const diagnostic_context *context,
         expanded_location s1, expanded_location s2)
{
  return s2.column && s1.line == s2.line
    && context->caret_max_width - CARET_LINE_MARGIN > abs (s1.column - s2.column);
}

extern const char *diagnostic_get_color_for_kind (diagnostic_t kind);
extern int diagnostic_converted_column (diagnostic_context *context,
     expanded_location s);


extern char *file_name_as_prefix (diagnostic_context *, const char *);

extern char *build_message_string (const char *, ...) __attribute__ ((__format__ (__printf__, 1, 2))) __attribute__ ((__nonnull__ (1)));

extern void diagnostic_output_format_init (diagnostic_context *,
        enum diagnostics_output_format);


extern int num_digits (int);

extern json::value *json_from_expanded_location (diagnostic_context *context,
       location_t loc);
# 42 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 2
# 50 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
extern location_t cp_expr_location (const_tree);

class cp_expr
{
public:
  cp_expr () :
    m_value (nullptr), m_loc (((location_t) 0)) {}

  cp_expr (tree value) :
    m_value (value), m_loc (cp_expr_location (m_value)) {}

  cp_expr (tree value, location_t loc):
    m_value (value), m_loc (loc)
  {
    protected_set_expr_location (value, loc);
  }


  operator tree () const { return m_value; }
  tree & operator* () { return m_value; }
  tree operator* () const { return m_value; }
  tree & operator-> () { return m_value; }
  tree operator-> () const { return m_value; }

  tree get_value () const { return m_value; }
  location_t get_location () const { return m_loc; }
  location_t get_start () const
  {
    source_range src_range = get_range_from_loc (line_table, m_loc);
    return src_range.m_start;
  }
  location_t get_finish () const
  {
    source_range src_range = get_range_from_loc (line_table, m_loc);
    return src_range.m_finish;
  }

  void set_location (location_t loc)
  {
    protected_set_expr_location (m_value, loc);
    m_loc = loc;
  }

  void set_range (location_t start, location_t finish)
  {
    set_location (make_location (m_loc, start, finish));
  }

  cp_expr& maybe_add_location_wrapper ()
  {
    m_value = maybe_wrap_with_location (m_value, m_loc);
    return *this;
  }

 private:
  tree m_value;
  location_t m_loc;
};

inline bool
operator == (const cp_expr &lhs, tree rhs)
{
  return lhs.get_value () == rhs;
}


enum cp_tree_index
{
    CPTI_WCHAR_DECL,
    CPTI_VTABLE_ENTRY_TYPE,
    CPTI_DELTA_TYPE,
    CPTI_VTABLE_INDEX_TYPE,
    CPTI_CLEANUP_TYPE,
    CPTI_VTT_PARM_TYPE,

    CPTI_CLASS_TYPE,
    CPTI_UNKNOWN_TYPE,
    CPTI_INIT_LIST_TYPE,
    CPTI_VTBL_TYPE,
    CPTI_VTBL_PTR_TYPE,
    CPTI_STD,
    CPTI_ABI,
    CPTI_GLOBAL,
    CPTI_GLOBAL_TYPE,
    CPTI_CONST_TYPE_INFO_TYPE,
    CPTI_TYPE_INFO_PTR_TYPE,
    CPTI_ABORT_FNDECL,
    CPTI_AGGR_TAG,
    CPTI_CONV_OP_MARKER,

    CPTI_CTOR_IDENTIFIER,
    CPTI_COMPLETE_CTOR_IDENTIFIER,
    CPTI_BASE_CTOR_IDENTIFIER,
    CPTI_DTOR_IDENTIFIER,
    CPTI_COMPLETE_DTOR_IDENTIFIER,
    CPTI_BASE_DTOR_IDENTIFIER,
    CPTI_DELETING_DTOR_IDENTIFIER,
    CPTI_CONV_OP_IDENTIFIER,
    CPTI_DELTA_IDENTIFIER,
    CPTI_IN_CHARGE_IDENTIFIER,
    CPTI_VTT_PARM_IDENTIFIER,
    CPTI_AS_BASE_IDENTIFIER,
    CPTI_THIS_IDENTIFIER,
    CPTI_PFN_IDENTIFIER,
    CPTI_VPTR_IDENTIFIER,
    CPTI_GLOBAL_IDENTIFIER,
    CPTI_ANON_IDENTIFIER,
    CPTI_AUTO_IDENTIFIER,
    CPTI_DECLTYPE_AUTO_IDENTIFIER,
    CPTI_INIT_LIST_IDENTIFIER,
    CPTI_FOR_RANGE__IDENTIFIER,
    CPTI_FOR_BEGIN__IDENTIFIER,
    CPTI_FOR_END__IDENTIFIER,
    CPTI_FOR_RANGE_IDENTIFIER,
    CPTI_FOR_BEGIN_IDENTIFIER,
    CPTI_FOR_END_IDENTIFIER,
    CPTI_ABI_TAG_IDENTIFIER,
    CPTI_ALIGNED_IDENTIFIER,
    CPTI_BEGIN_IDENTIFIER,
    CPTI_END_IDENTIFIER,
    CPTI_GET_IDENTIFIER,
    CPTI_GNU_IDENTIFIER,
    CPTI_TUPLE_ELEMENT_IDENTIFIER,
    CPTI_TUPLE_SIZE_IDENTIFIER,
    CPTI_TYPE_IDENTIFIER,
    CPTI_VALUE_IDENTIFIER,
    CPTI_FUN_IDENTIFIER,
    CPTI_CLOSURE_IDENTIFIER,
    CPTI_HEAP_UNINIT_IDENTIFIER,
    CPTI_HEAP_IDENTIFIER,
    CPTI_HEAP_DELETED_IDENTIFIER,

    CPTI_LANG_NAME_C,
    CPTI_LANG_NAME_CPLUSPLUS,

    CPTI_EMPTY_EXCEPT_SPEC,
    CPTI_NOEXCEPT_TRUE_SPEC,
    CPTI_NOEXCEPT_FALSE_SPEC,
    CPTI_NOEXCEPT_DEFERRED_SPEC,

    CPTI_TERMINATE_FN,
    CPTI_CALL_UNEXPECTED_FN,
    CPTI_GET_EXCEPTION_PTR_FN,
    CPTI_BEGIN_CATCH_FN,
    CPTI_END_CATCH_FN,
    CPTI_ALLOCATE_EXCEPTION_FN,
    CPTI_FREE_EXCEPTION_FN,
    CPTI_THROW_FN,
    CPTI_RETHROW_FN,
    CPTI_ATEXIT_FN_PTR_TYPE,
    CPTI_ATEXIT,
    CPTI_DSO_HANDLE,
    CPTI_DCAST,

    CPTI_NULLPTR,
    CPTI_NULLPTR_TYPE,

    CPTI_ALIGN_TYPE,

    CPTI_ANY_TARG,

    CPTI_SOURCE_LOCATION_IMPL,

    CPTI_FALLBACK_DFLOAT32_TYPE,
    CPTI_FALLBACK_DFLOAT64_TYPE,
    CPTI_FALLBACK_DFLOAT128_TYPE,

    CPTI_MAX
};

extern tree cp_global_trees[CPTI_MAX];
# 385 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/name-lookup.h" 1
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/name-lookup.h"
typedef struct binding_table_s *binding_table;
typedef struct binding_entry_s *binding_entry;


typedef void (*bt_foreach_proc) (binding_entry, void *);

struct binding_entry_s {
  binding_entry chain;
  tree name;
  tree type;
};
# 47 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/name-lookup.h"
extern void binding_table_foreach (binding_table, bt_foreach_proc, void *);
extern binding_entry binding_table_find (binding_table, tree);



typedef struct cxx_binding cxx_binding;


typedef struct cp_binding_level cp_binding_level;
# 65 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/name-lookup.h"
struct cxx_binding {

  cxx_binding *previous;

  tree value;

  tree type;

  cp_binding_level *scope;
  unsigned value_is_inherited : 1;
  unsigned is_local : 1;
};



struct cxx_saved_binding {

  tree identifier;

  cxx_binding *binding;
  tree real_type_value;
};


extern tree identifier_type_value (tree);
extern void set_identifier_type_value (tree, tree);
extern void push_binding (tree, tree, cp_binding_level*);
extern void pop_local_binding (tree, tree);
extern void pop_bindings_and_leave_scope (void);
extern tree constructor_name (tree);
extern bool constructor_name_p (tree, tree);


enum scope_kind {
  sk_block = 0,




  sk_cleanup,


  sk_try,
  sk_catch,
  sk_for,

  sk_cond,

  sk_function_parms,
  sk_class,
  sk_scoped_enum,

  sk_namespace,

  sk_template_parms,
  sk_template_spec,



  sk_transaction,
  sk_omp
};


enum tag_scope {
  ts_current = 0,




  ts_global = 1,


  ts_within_enclosing_non_class = 2,



  ts_lambda = 3
};

struct cp_class_binding {
  cxx_binding *base;

  tree identifier;
};
# 172 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/name-lookup.h"
struct cp_binding_level {




  tree names;


  vec<tree, va_gc> *using_directives;



  vec<cp_class_binding, va_gc> *class_shadowed;






  tree type_shadowed;




  tree blocks;



  tree this_entity;


  cp_binding_level *level_chain;



  tree statement_list;


  int binding_depth;




  enum scope_kind kind : 4;



  unsigned int explicit_spec_p : 1;


  unsigned keep : 1;



  unsigned more_cleanups_ok : 1;
  unsigned have_cleanups : 1;






  unsigned defining_class_p : 1;


  unsigned immediate_fn_ctx_p : 1;


};
# 257 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/name-lookup.h"
extern cp_binding_level *leave_scope (void);
extern bool kept_level_p (void);
extern bool global_bindings_p (void);
extern bool toplevel_bindings_p (void);
extern bool namespace_bindings_p (void);
extern bool local_bindings_p (void);
extern bool template_parm_scope_p (void);
extern scope_kind innermost_scope_kind (void);
extern cp_binding_level *begin_scope (scope_kind, tree);
extern void print_binding_stack (void);
extern void pop_everything (void);
extern void keep_next_level (bool);
extern bool is_ancestor (tree ancestor, tree descendant);
extern bool is_nested_namespace (tree parent, tree descendant,
     bool inline_only = false);
extern tree push_scope (tree);
extern void pop_scope (tree);
extern tree push_inner_scope (tree);
extern void pop_inner_scope (tree, tree);
extern void push_binding_level (cp_binding_level *);

extern bool handle_namespace_attrs (tree, tree);
extern void pushlevel_class (void);
extern void poplevel_class (void);



enum class LOOK_where
{
  BLOCK = 1 << 0,
  CLASS = 1 << 1,
  NAMESPACE = 1 << 2,

  ALL = BLOCK | CLASS | NAMESPACE,
  BLOCK_NAMESPACE = BLOCK | NAMESPACE,
  CLASS_NAMESPACE = CLASS | NAMESPACE,
};
constexpr LOOK_where operator| (LOOK_where a, LOOK_where b)
{
  return LOOK_where (unsigned (a) | unsigned (b));
}
constexpr LOOK_where operator& (LOOK_where a, LOOK_where b)
{
  return LOOK_where (unsigned (a) & unsigned (b));
}

enum class LOOK_want
{
  NORMAL = 0,
  TYPE = 1 << 1,
  NAMESPACE = 1 << 2,

  HIDDEN_FRIEND = 1 << 3,
  HIDDEN_LAMBDA = 1 << 4,

  TYPE_NAMESPACE = TYPE | NAMESPACE,
};
constexpr LOOK_want operator| (LOOK_want a, LOOK_want b)
{
  return LOOK_want (unsigned (a) | unsigned (b));
}
constexpr LOOK_want operator& (LOOK_want a, LOOK_want b)
{
  return LOOK_want (unsigned (a) & unsigned (b));
}

extern tree lookup_name (tree, LOOK_where, LOOK_want = LOOK_want::NORMAL);

extern tree lookup_name (tree name);
inline tree lookup_name (tree name, LOOK_want want)
{
  return lookup_name (name, LOOK_where::ALL, want);
}

extern tree lookup_type_scope (tree, tag_scope);
extern tree get_namespace_binding (tree ns, tree id);
extern void set_global_binding (tree decl);
inline tree get_global_binding (tree id)
{
  return get_namespace_binding ((tree) nullptr, id);
}
extern tree lookup_qualified_name (tree scope, tree name,
       LOOK_want = LOOK_want::NORMAL,
       bool = true);
extern tree lookup_qualified_name (tree scope, const char *name,
       LOOK_want = LOOK_want::NORMAL,
       bool = true);
extern bool is_local_extern (tree);
extern bool pushdecl_class_level (tree);
extern tree pushdecl_namespace_level (tree, bool);
extern bool push_class_level_binding (tree, tree);
extern tree get_local_decls ();
extern int function_parm_depth (void);
extern tree cp_namespace_decls (tree);
extern void set_decl_namespace (tree, tree, bool);
extern void push_decl_namespace (tree);
extern void pop_decl_namespace (void);
extern void do_namespace_alias (tree, tree);
extern tree do_class_using_decl (tree, tree);
extern tree lookup_arg_dependent (tree, tree, vec<tree, va_gc> *);
extern tree search_anon_aggr (tree, tree, bool = false);
extern tree get_class_binding_direct (tree, tree, bool want_type = false);
extern tree get_class_binding (tree, tree, bool want_type = false);
extern tree *find_member_slot (tree klass, tree name);
extern tree *add_member_slot (tree klass, tree name);
extern void resort_type_member_vec (void *, void *,
        gt_pointer_operator, void *);
extern void set_class_bindings (tree, unsigned extra = 0);
extern void insert_late_enum_def_bindings (tree, tree);
extern tree innermost_non_namespace_value (tree);
extern cxx_binding *outer_binding (tree, cxx_binding *, bool);
extern void cp_emit_debug_info_for_using (tree, tree);

extern void finish_nonmember_using_decl (tree scope, tree name);
extern void finish_using_directive (tree target, tree attribs);
extern tree pushdecl (tree, bool is_friend = false);
extern tree pushdecl_outermost_localscope (tree);
extern tree pushdecl_top_level (tree, bool is_friend = false);
extern tree pushdecl_top_level_and_finish (tree, tree);
extern tree pushtag (tree, tree, tag_scope);
extern int push_namespace (tree, bool make_inline = false);
extern void pop_namespace (void);
extern void push_nested_namespace (tree);
extern void pop_nested_namespace (tree);
extern void push_to_top_level (void);
extern void pop_from_top_level (void);
extern void maybe_save_operator_binding (tree);
extern void push_operator_bindings (void);
extern void discard_operator_bindings (tree);
# 386 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 2
# 615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
inline tree
template_info_decl_check (const_tree t, const char* f, int l, const char* fn)
{
  switch (((enum tree_code) (t)->base.code))
    {
    case VAR_DECL:
    case FUNCTION_DECL:
    case FIELD_DECL:
    case TYPE_DECL:
    case CONCEPT_DECL:
    case TEMPLATE_DECL:
      return const_cast<tree>(t);
    default:
      break;
    }
  tree_check_failed (t, f, l, fn,
       VAR_DECL, FUNCTION_DECL, FIELD_DECL, TYPE_DECL,
       CONCEPT_DECL, TEMPLATE_DECL, 0);
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 633, __FUNCTION__));
}
# 655 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct lang_identifier {
  struct c_common_identifier c_common;
  cxx_binding *bindings;
};



inline lang_identifier*
identifier_p (tree t)
{
  if (((enum tree_code) (t)->base.code) == IDENTIFIER_NODE)
    return (lang_identifier*) t;
  return nullptr;
}




struct template_parm_index {
  struct tree_common common;
  int index;
  int level;
  int orig_level;
  tree decl;
};

struct ptrmem_cst {
  struct tree_common common;
  tree member;
};
typedef struct ptrmem_cst * ptrmem_cst_t;
# 780 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_overload {
  struct tree_common common;
  tree function;
};




class ovl_iterator {
  tree ovl;
  const bool allow_inner;

 public:
  explicit ovl_iterator (tree o, bool allow = false)
    : ovl (o), allow_inner (allow)
  {
  }

 private:

  ovl_iterator &operator= (const ovl_iterator &);
  ovl_iterator (const ovl_iterator &);

 public:
  operator bool () const
  {
    return ovl;
  }
  ovl_iterator &operator++ ()
  {
    ovl = ((enum tree_code) (ovl)->base.code) != OVERLOAD ? (tree) nullptr : (((struct tree_overload*)(tree_check ((ovl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 810, __FUNCTION__, (OVERLOAD))))->common.chain);
    return *this;
  }
  tree operator* () const
  {
    tree fn = ((enum tree_code) (ovl)->base.code) != OVERLOAD ? ovl : (((struct tree_overload*)(tree_check ((ovl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 815, __FUNCTION__, (OVERLOAD))))->function);


    ((void)(!(allow_inner || ((enum tree_code) (fn)->base.code) != OVERLOAD) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 818, __FUNCTION__), 0 : 0));

    return fn;
  }

 public:

  bool using_p () const
  {
    return (((enum tree_code) (ovl)->base.code) == USING_DECL
     || (((enum tree_code) (ovl)->base.code) == OVERLOAD && ((tree_not_check2 (((tree_check ((ovl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 828, __FUNCTION__, (OVERLOAD)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 828, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_1)));
  }
  bool hidden_p () const
  {
    return ((enum tree_code) (ovl)->base.code) == OVERLOAD && ((tree_not_check2 (((tree_check ((ovl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 832, __FUNCTION__, (OVERLOAD)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 832, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_2);
  }

 public:
  tree remove_node (tree head)
  {
    return remove_node (head, ovl);
  }
  tree reveal_node (tree head)
  {
    return reveal_node (head, ovl);
  }

 protected:


  tree maybe_push ()
  {
    tree r = (tree) nullptr;

    if (ovl && ((enum tree_code) (ovl)->base.code) == OVERLOAD && ((tree_not_check2 (((tree_check ((ovl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 852, __FUNCTION__, (OVERLOAD)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 852, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_3))
      {
 r = (((struct tree_overload*)(tree_check ((ovl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 854, __FUNCTION__, (OVERLOAD))))->common.chain);
 ovl = (((struct tree_overload*)(tree_check ((ovl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 855, __FUNCTION__, (OVERLOAD))))->function);
      }
    return r;
  }

  void pop (tree outer)
  {
    ((void)(!(!ovl) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 862, __FUNCTION__), 0 : 0));
    ovl = outer;
  }

 private:


  static tree remove_node (tree head, tree node);
  static tree reveal_node (tree ovl, tree node);
};




class lkp_iterator : public ovl_iterator {
  typedef ovl_iterator parent;

  tree outer;

 public:
  explicit lkp_iterator (tree o)
    : parent (o, true), outer (maybe_push ())
  {
  }

 public:
  lkp_iterator &operator++ ()
  {
    bool repush = !outer;

    if (!parent::operator++ () && !repush)
      {
 pop (outer);
 repush = true;
      }

    if (repush)
      outer = maybe_push ();

    return *this;
  }
};




struct named_decl_hash : ggc_remove <tree> {
  typedef tree value_type;
  typedef tree compare_type;

  inline static hashval_t hash (const value_type decl);
  inline static bool equal (const value_type existing, compare_type candidate);

  static const bool empty_zero_p = true;
  static inline void mark_empty (value_type &p) {p = (tree) nullptr;}
  static inline bool is_empty (value_type p) {return !p;}


  static bool is_deleted (value_type) { return false; }
  static void mark_deleted (value_type) { (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 921, __FUNCTION__)); }
};



class releasing_vec
{
public:
  typedef vec<tree, va_gc> vec_t;

  releasing_vec (vec_t *v): v(v) { }
  releasing_vec (): v(make_tree_vector ()) { }



  releasing_vec (const releasing_vec &);
  releasing_vec &operator= (const releasing_vec &);

  vec_t &operator* () const { return *v; }
  vec_t *operator-> () const { return v; }
  vec_t *get() const { return v; }
  operator vec_t *() const { return v; }
  vec_t ** operator& () { return &v; }


  tree& operator[] (unsigned i) const { return (*v)[i]; }

  ~releasing_vec() { release_tree_vector (v); }
private:
  vec_t *v;
};

inline tree* vec_safe_push (releasing_vec& r, const tree &t )
{ return vec_safe_push (*&r, t ); }
inline bool vec_safe_reserve (releasing_vec& r, unsigned n, bool e = false )
{ return vec_safe_reserve (*&r, n, e ); }
inline unsigned vec_safe_length (releasing_vec &r)
{ return r->length(); }
inline void vec_safe_splice (releasing_vec &r, vec<tree, va_gc> *p )
{ vec_safe_splice (*&r, p ); }
void release_tree_vector (releasing_vec &);

struct tree_template_decl {
  struct tree_decl_common common;
  tree arguments;
  tree result;
};
# 1000 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_baselink {
  struct tree_common common;
  tree binfo;
  tree functions;
  tree access_binfo;
};



enum cp_id_kind
{

  CP_ID_KIND_NONE,

  CP_ID_KIND_UNQUALIFIED,

  CP_ID_KIND_UNQUALIFIED_DEPENDENT,

  CP_ID_KIND_TEMPLATE_ID,

  CP_ID_KIND_QUALIFIED
};




enum cpp0x_warn_str
{

  CPP0X_INITIALIZER_LISTS,

  CPP0X_EXPLICIT_CONVERSION,

  CPP0X_VARIADIC_TEMPLATES,

  CPP0X_LAMBDA_EXPR,

  CPP0X_AUTO,

  CPP0X_SCOPED_ENUMS,

  CPP0X_DEFAULTED_DELETED,

  CPP0X_INLINE_NAMESPACES,

  CPP0X_OVERRIDE_CONTROLS,

  CPP0X_NSDMI,

  CPP0X_USER_DEFINED_LITERALS,

  CPP0X_DELEGATING_CTORS,

  CPP0X_INHERITING_CTORS,

  CPP0X_ATTRIBUTES,

  CPP0X_REF_QUALIFIER
};



enum composite_pointer_operation
{

  CPO_COMPARISON,

  CPO_CONVERSION,

  CPO_CONDITIONAL_EXPR
};


enum expr_list_kind {
  ELK_INIT,
  ELK_MEM_INIT,
  ELK_FUNC_CAST
};


enum impl_conv_rhs {
  ICR_DEFAULT_ARGUMENT,
  ICR_CONVERTING,
  ICR_INIT,
  ICR_ARGPASS,
  ICR_RETURN,
  ICR_ASSIGN
};


enum impl_conv_void {
  ICV_CAST,
  ICV_SECOND_OF_COND,
  ICV_THIRD_OF_COND,
  ICV_RIGHT_OF_COMMA,
  ICV_LEFT_OF_COMMA,
  ICV_STATEMENT,
  ICV_THIRD_IN_FOR
};



enum abstract_class_use {
  ACU_UNKNOWN,
  ACU_CAST,
  ACU_NEW,
  ACU_THROW,
  ACU_CATCH,
  ACU_ARRAY,
  ACU_RETURN,
  ACU_PARM
};
# 1135 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum cp_identifier_kind {
  cik_normal = 0,
  cik_keyword = 1,
  cik_ctor = 2,
  cik_dtor = 3,

  cik_simple_op = 4,
  cik_assign_op = 5,
  cik_conv_op = 6,
  cik_reserved_for_udlit = 7,
  cik_max
};
# 1237 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_deferred_parse {
  struct tree_base base;
  struct cp_token_cache *tokens;
  vec<tree, va_gc> *instantiations;
};
# 1258 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_deferred_noexcept {
  struct tree_base base;
  tree pattern;
  tree args;
};
# 1280 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_static_assert {
  struct tree_common common;
  tree condition;
  tree message;
  location_t location;
};

struct tree_argument_pack_select {
  struct tree_common common;
  tree argument_pack;
  int index;
};



enum cp_trait_kind
{
  CPTK_BASES,
  CPTK_DIRECT_BASES,
  CPTK_HAS_NOTHROW_ASSIGN,
  CPTK_HAS_NOTHROW_CONSTRUCTOR,
  CPTK_HAS_NOTHROW_COPY,
  CPTK_HAS_TRIVIAL_ASSIGN,
  CPTK_HAS_TRIVIAL_CONSTRUCTOR,
  CPTK_HAS_TRIVIAL_COPY,
  CPTK_HAS_TRIVIAL_DESTRUCTOR,
  CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS,
  CPTK_HAS_VIRTUAL_DESTRUCTOR,
  CPTK_IS_ABSTRACT,
  CPTK_IS_AGGREGATE,
  CPTK_IS_BASE_OF,
  CPTK_IS_CLASS,
  CPTK_IS_EMPTY,
  CPTK_IS_ENUM,
  CPTK_IS_FINAL,
  CPTK_IS_LITERAL_TYPE,
  CPTK_IS_POD,
  CPTK_IS_POLYMORPHIC,
  CPTK_IS_SAME_AS,
  CPTK_IS_STD_LAYOUT,
  CPTK_IS_TRIVIAL,
  CPTK_IS_TRIVIALLY_ASSIGNABLE,
  CPTK_IS_TRIVIALLY_CONSTRUCTIBLE,
  CPTK_IS_TRIVIALLY_COPYABLE,
  CPTK_IS_UNION,
  CPTK_UNDERLYING_TYPE,
  CPTK_IS_ASSIGNABLE,
  CPTK_IS_CONSTRUCTIBLE
};
# 1344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_trait_expr {
  struct tree_common common;
  tree type1;
  tree type2;
  location_t locus;
  enum cp_trait_kind kind;
};
# 1370 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum cp_lambda_default_capture_mode_type {
  CPLD_NONE,
  CPLD_COPY,
  CPLD_REFERENCE
};
# 1439 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_lambda_expr
{
  struct tree_typed typed;
  tree capture_list;
  tree this_capture;
  tree extra_scope;
  vec<tree, va_gc> *pending_proxies;
  location_t locus;
  enum cp_lambda_default_capture_mode_type default_capture_mode : 8;
  short int discriminator;
};
# 1472 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct deferred_access_check {

  tree binfo;

  tree decl;

  tree diag_decl;

  location_t loc;
};

struct tree_template_info {
  struct tree_base base;
  tree tmpl;
  tree args;
  vec<deferred_access_check, va_gc> *deferred_access_checks;
};
# 1500 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_constraint_info {
  struct tree_base base;
  tree template_reqs;
  tree declarator_reqs;
  tree associated_constr;
};


template<typename T>
inline T*
check_nonnull (T* p)
{
  ((void)(!(p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 1512, __FUNCTION__), 0 : 0));
  return p;
}


inline tree_constraint_info *
check_constraint_info (tree t)
{
  if (t && ((enum tree_code) (t)->base.code) == CONSTRAINT_INFO)
    return (tree_constraint_info *)t;
  return nullptr;
}
# 1626 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum cp_tree_node_structure_enum {
  TS_CP_GENERIC,
  TS_CP_IDENTIFIER,
  TS_CP_TPI,
  TS_CP_PTRMEM,
  TS_CP_OVERLOAD,
  TS_CP_BASELINK,
  TS_CP_TEMPLATE_DECL,
  TS_CP_DEFERRED_PARSE,
  TS_CP_DEFERRED_NOEXCEPT,
  TS_CP_STATIC_ASSERT,
  TS_CP_ARGUMENT_PACK_SELECT,
  TS_CP_TRAIT_EXPR,
  TS_CP_LAMBDA_EXPR,
  TS_CP_TEMPLATE_INFO,
  TS_CP_CONSTRAINT_INFO,
  TS_CP_USERDEF_LITERAL
};


union
                                                                                 lang_tree_node {
  union tree_node
                                        generic;
  struct template_parm_index tpi;
  struct ptrmem_cst ptrmem;
  struct tree_overload overload;
  struct tree_baselink baselink;
  struct tree_template_decl template_decl;
  struct tree_deferred_parse deferred_parse;
  struct tree_deferred_noexcept deferred_noexcept;
  struct lang_identifier identifier;
  struct tree_static_assert
    static_assertion;
  struct tree_argument_pack_select
    argument_pack_select;
  struct tree_trait_expr
    trait_expression;
  struct tree_lambda_expr
    lambda_expression;
  struct tree_template_info
    template_info;
  struct tree_constraint_info
    constraint_info;
  struct tree_userdef_literal
    userdef_literal;
};




struct saved_scope {
  vec<cxx_saved_binding, va_gc> *old_bindings;
  tree old_namespace;
  vec<tree, va_gc> *decl_ns_list;
  tree class_name;
  tree class_type;
  tree access_specifier;
  tree function_decl;
  vec<tree, va_gc> *lang_base;
  tree lang_name;
  tree template_parms;
  cp_binding_level *x_previous_class_level;
  tree x_saved_tree;


  tree x_current_class_ptr;
  tree x_current_class_ref;

  int x_processing_template_decl;
  int x_processing_specialization;
  int x_processing_constraint;
  int suppress_location_wrappers;
  unsigned int x_processing_explicit_instantiation : 1;
  unsigned int need_pop_function_context : 1;



  unsigned int discarded_stmt : 1;

  int unevaluated_operand;
  int inhibit_evaluation_warnings;
  int noexcept_operand;


  int omp_declare_target_attribute;
  int ref_temp_count;

  struct stmt_tree_s x_stmt_tree;

  cp_binding_level *class_bindings;
  cp_binding_level *bindings;

  hash_map<tree, tree> * x_local_specializations;

  struct saved_scope *prev;
};

extern struct saved_scope *scope_chain;
# 1774 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
class processing_template_decl_sentinel
{
public:
  int saved;
  processing_template_decl_sentinel (bool reset = true)
    : saved (scope_chain->x_processing_template_decl)
  {
    if (reset)
      scope_chain->x_processing_template_decl = 0;
  }
  ~processing_template_decl_sentinel()
  {
    scope_chain->x_processing_template_decl = saved;
  }
};




class warning_sentinel
{
public:
  int &flag;
  int val;
  warning_sentinel(int& flag, bool suppress=true)
    : flag(flag), val(flag) { if (suppress) flag = 0; }
  ~warning_sentinel() { flag = val; }
};




class iloc_sentinel
{
  location_t saved_loc;
public:
  iloc_sentinel (location_t loc): saved_loc (input_location)
  {
    if (loc >= RESERVED_LOCATION_COUNT)
      input_location = loc;
  }
  ~iloc_sentinel ()
  {
    input_location = saved_loc;
  }
};





template <typename T>
class temp_override
{
  T& overridden_variable;
  T saved_value;
public:
  temp_override(T& var) : overridden_variable (var), saved_value (var) {}
  temp_override(T& var, T overrider)
    : overridden_variable (var), saved_value (var)
  {
    overridden_variable = overrider;
  }
  ~temp_override() { overridden_variable = saved_value; }
};
# 1857 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct cxx_int_tree_map {
  unsigned int uid;
  tree to;
};

struct cxx_int_tree_map_hasher : ggc_ptr_hash<cxx_int_tree_map>
{
  static hashval_t hash (cxx_int_tree_map *);
  static bool equal (cxx_int_tree_map *, cxx_int_tree_map *);
};

struct named_label_entry;

struct named_label_hash : ggc_remove <named_label_entry *>
{
  typedef named_label_entry *value_type;
  typedef tree compare_type;

  inline static hashval_t hash (value_type);
  inline static bool equal (const value_type, compare_type);

  static const bool empty_zero_p = true;
  inline static void mark_empty (value_type &p) {p = nullptr;}
  inline static bool is_empty (value_type p) {return !p;}


  inline static bool is_deleted (value_type) { return false; }
  inline static void mark_deleted (value_type) { (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 1884, __FUNCTION__)); }
};



struct language_function {
  struct c_language_function base;

  tree x_cdtor_label;
  tree x_current_class_ptr;
  tree x_current_class_ref;
  tree x_eh_spec_block;
  tree x_in_charge_parm;
  tree x_vtt_parm;
  tree x_return_value;

  unsigned int returns_value : 1;
  unsigned int returns_null : 1;
  unsigned int returns_abnormally : 1;
  unsigned int infinite_loop: 1;
  unsigned int x_in_function_try_handler : 1;
  unsigned int x_in_base_initializer : 1;


  unsigned int can_throw : 1;

  unsigned int invalid_constexpr : 1;
  unsigned int throwing_cleanup : 1;

  hash_table<named_label_hash> *x_named_labels;

  cp_binding_level *bindings;



  vec<tree, va_gc> *infinite_loops;
  hash_table<cxx_int_tree_map_hasher> *extern_decl_map;
};
# 2003 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
extern tree cp_literal_operator_id (const char *);




extern bool statement_code_p[MAX_TREE_CODES];



enum languages { lang_c, lang_cplusplus };
# 2119 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct tree_pair_s {
  tree purpose;
  tree value;
};
typedef tree_pair_s *tree_pair_p;
# 2138 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct lang_type {
  unsigned char align;

  unsigned has_type_conversion : 1;
  unsigned has_copy_ctor : 1;
  unsigned has_default_ctor : 1;
  unsigned const_needs_init : 1;
  unsigned ref_needs_init : 1;
  unsigned has_const_copy_assign : 1;
  unsigned use_template : 2;

  unsigned has_mutable : 1;
  unsigned com_interface : 1;
  unsigned non_pod_class : 1;
  unsigned nearly_empty_p : 1;
  unsigned user_align : 1;
  unsigned has_copy_assign : 1;
  unsigned has_new : 1;
  unsigned has_array_new : 1;

  unsigned gets_delete : 2;
  unsigned interface_only : 1;
  unsigned interface_unknown : 1;
  unsigned contains_empty_class_p : 1;
  unsigned anon_aggr : 1;
  unsigned non_zero_init : 1;
  unsigned empty_p : 1;


  unsigned vec_new_uses_cookie : 1;
  unsigned declared_class : 1;
  unsigned diamond_shaped : 1;
  unsigned repeated_base : 1;
  unsigned being_defined : 1;
  unsigned debug_requested : 1;
  unsigned fields_readonly : 1;
  unsigned ptrmemfunc_flag : 1;

  unsigned lazy_default_ctor : 1;
  unsigned lazy_copy_ctor : 1;
  unsigned lazy_copy_assign : 1;
  unsigned lazy_destructor : 1;
  unsigned has_const_copy_ctor : 1;
  unsigned has_complex_copy_ctor : 1;
  unsigned has_complex_copy_assign : 1;
  unsigned non_aggregate : 1;

  unsigned has_complex_dflt : 1;
  unsigned has_list_ctor : 1;
  unsigned non_std_layout : 1;
  unsigned is_literal : 1;
  unsigned lazy_move_ctor : 1;
  unsigned lazy_move_assign : 1;
  unsigned has_complex_move_ctor : 1;
  unsigned has_complex_move_assign : 1;

  unsigned has_constexpr_ctor : 1;
  unsigned unique_obj_representations : 1;
  unsigned unique_obj_representations_set : 1;
# 2205 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
  unsigned dummy : 5;

  tree primary_base;
  vec<tree_pair_s, va_gc> *vcall_indices;
  tree vtables;
  tree typeinfo_var;
  vec<tree, va_gc> *vbases;
  binding_table nested_udts;
  tree as_base;
  vec<tree, va_gc> *pure_virtuals;
  tree friend_classes;
  vec<tree, va_gc> * members;
  tree key_method;
  tree decl_list;
  tree befriending_classes;



  tree objc_info;

  tree lambda_expr;
};
# 2629 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum lang_decl_selector
{
  lds_min,
  lds_fn,
  lds_ns,
  lds_parm,
  lds_decomp
};






struct lang_decl_base {

  enum lang_decl_selector selector : 16;
  enum languages language : 1;
  unsigned use_template : 2;
  unsigned not_really_extern : 1;
  unsigned initialized_in_class : 1;
  unsigned threadprivate_or_deleted_p : 1;
  unsigned anticipated_p : 1;

  unsigned friend_or_tls : 1;
  unsigned unknown_bound_p : 1;
  unsigned odr_used : 1;
  unsigned spare : 1;
  unsigned concept_p : 1;
  unsigned var_declared_inline_p : 1;
  unsigned dependent_init_p : 1;

};
# 2675 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct lang_decl_min {
  struct lang_decl_base base;






  tree template_info;






  tree access;
};



struct lang_decl_fn {
  struct lang_decl_min min;


  unsigned ovl_op_code : 6;
  unsigned global_ctor_p : 1;
  unsigned global_dtor_p : 1;

  unsigned static_function : 1;
  unsigned pure_virtual : 1;
  unsigned defaulted_p : 1;
  unsigned has_in_charge_parm_p : 1;
  unsigned has_vtt_parm_p : 1;
  unsigned pending_inline_p : 1;
  unsigned nonconverting : 1;
  unsigned thunk_p : 1;

  unsigned this_thunk_p : 1;
  unsigned hidden_friend_p : 1;
  unsigned omp_declare_reduction_p : 1;
  unsigned has_dependent_explicit_spec_p : 1;
  unsigned immediate_fn_p : 1;
  unsigned maybe_deleted : 1;
  unsigned coroutine_p : 1;

  unsigned spare : 9;






  tree befriending_classes;







  tree context;

  union lang_decl_u5
  {

    tree cloned_function;



    long fixed_offset;
  } u5;

  union lang_decl_u3
  {
    struct cp_token_cache * pending_inline_info;
    tree saved_auto_return_type;
  } u;

};



struct lang_decl_ns {
  struct lang_decl_base base;
  cp_binding_level *level;


  vec<tree, va_gc> *inlinees;




  hash_table<named_decl_hash> *bindings;
};



struct lang_decl_parm {
  struct lang_decl_base base;
  int level;
  int index;
};



struct lang_decl_decomp {
  struct lang_decl_min min;


  tree base;
};





struct lang_decl {
  union lang_decl_u {

    struct lang_decl_base base;
    struct lang_decl_min min;
    struct lang_decl_fn fn;
    struct lang_decl_ns ns;
    struct lang_decl_parm parm;
    struct lang_decl_decomp decomp;
  } u;
};
# 3901 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
struct aggr_init_expr_arg_iterator {
  tree t;
  int n;
  int i;
};



inline void
init_aggr_init_expr_arg_iterator (tree exp,
           aggr_init_expr_arg_iterator *iter)
{
  iter->t = exp;
  iter->n = (((int)((unsigned long) (*tree_int_cst_elt_check (((tree_class_check ((exp), (tcc_vl_exp), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 3914, __FUNCTION__))->exp.operands[0]), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 3914, __FUNCTION__)))) - 3);
  iter->i = 0;
}



inline tree
next_aggr_init_expr_arg (aggr_init_expr_arg_iterator *iter)
{
  tree result;
  if (iter->i >= iter->n)
    return (tree) nullptr;
  result = (*((const_cast<tree*> (tree_operand_check (((tree_check ((iter->t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 3926, __FUNCTION__, (AGGR_INIT_EXPR)))), ((iter->i) + 3), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 3926, __FUNCTION__)))));
  iter->i++;
  return result;
}





inline tree
first_aggr_init_expr_arg (tree exp, aggr_init_expr_arg_iterator *iter)
{
  init_aggr_init_expr_arg_iterator (exp, iter);
  return next_aggr_init_expr_arg (iter);
}



inline bool
more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)
{
  return (iter->i < iter->n);
}
# 5175 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum tag_types {
  none_type = 0,
  record_type,
  class_type,
  union_type,
  enum_type,
  typename_type,
  scope_type
};


enum cp_lvalue_kind_flags {
  clk_none = 0,
  clk_ordinary = 1,
  clk_rvalueref = 2,
  clk_class = 4,
  clk_bitfield = 8,
  clk_packed = 16,
  clk_implicit_rval = 1<<5
};



typedef int cp_lvalue_kind;


enum tmpl_spec_kind {
  tsk_none,
  tsk_invalid_member_spec,



  tsk_invalid_expl_inst,

  tsk_excessive_parms,

  tsk_insufficient_parms,

  tsk_template,
  tsk_expl_spec,
  tsk_expl_inst
};





enum access_kind {
  ak_none = 0,
  ak_public = 1,
  ak_protected = 2,
  ak_private = 3
};



enum special_function_kind {
  sfk_none = 0,



  sfk_destructor,
  sfk_constructor,
  sfk_inheriting_constructor,
  sfk_copy_constructor,
  sfk_move_constructor,
  sfk_copy_assignment,
  sfk_move_assignment,

  sfk_complete_destructor,
  sfk_base_destructor,
  sfk_deleting_destructor,


  sfk_conversion,
  sfk_deduction_guide,
  sfk_comparison,
  sfk_virtual_destructor
};
# 5272 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum linkage_kind {
  lk_none,
  lk_internal,
  lk_external
};

enum duration_kind {
  dk_static,
  dk_thread,
  dk_auto,
  dk_dynamic
};


enum tsubst_flags {
  tf_none = 0,
  tf_error = 1 << 0,
  tf_warning = 1 << 1,
  tf_ignore_bad_quals = 1 << 2,
  tf_keep_type_decl = 1 << 3,

  tf_ptrmem_ok = 1 << 4,

  tf_user = 1 << 5,

  tf_conv = 1 << 6,



  tf_decltype = 1 << 7,


  tf_partial = 1 << 8,

  tf_fndecl_type = 1 << 9,

  tf_no_cleanup = 1 << 10,

  tf_norm = 1 << 11,


  tf_warning_or_error = tf_warning | tf_error
};



typedef int tsubst_flags_t;


enum base_access_flags {
  ba_any = 0,

  ba_unique = 1 << 0,
  ba_check_bit = 1 << 1,
  ba_check = ba_unique | ba_check_bit,
  ba_ignore_scope = 1 << 2
};



typedef int base_access;


enum deferring_kind {
  dk_no_deferred = 0,
  dk_deferred = 1,
  dk_no_check = 2
};



enum base_kind {
  bk_inaccessible = -3,
  bk_ambig = -2,
  bk_not_base = -1,
  bk_same_type = 0,
  bk_proper_base = 1,
  bk_via_virtual = 2


};







extern tree integer_two_node;




extern int function_depth;




extern int comparing_specializations;







extern int cp_unevaluated_operand;




class cp_unevaluated
{
public:
  cp_unevaluated ();
  ~cp_unevaluated ();
};




class cp_evaluated
{
public:
  int uneval;
  int inhibit;
  cp_evaluated ()
    : uneval(cp_unevaluated_operand), inhibit(c_inhibit_evaluation_warnings)
  { cp_unevaluated_operand = c_inhibit_evaluation_warnings = 0; }
  ~cp_evaluated ()
  { cp_unevaluated_operand = uneval;
    c_inhibit_evaluation_warnings = inhibit; }
};







enum unification_kind_t {
  DEDUCE_CALL,
  DEDUCE_CONV,
  DEDUCE_EXACT
};




enum lss_policy { lss_blank, lss_copy, lss_nop };
class local_specialization_stack
{
public:
  local_specialization_stack (lss_policy = lss_blank);
  ~local_specialization_stack ();

  hash_map<tree, tree> *saved;
};



extern int current_class_depth;




extern vec<tree, va_gc> *static_decls;



extern vec<tree, va_gc> *keyed_classes;
# 5518 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
extern int at_eof;




extern bool defer_mangling_aliases;



extern bool flag_noexcept_type;





extern tree static_aggregates;

extern tree tls_aggregates;

enum overload_flags { NO_SPECIAL = 0, DTOR_FLAG, TYPENAME_FLAG };
# 5725 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum auto_deduction_context
{
  adc_unspecified,
  adc_variable_type,
  adc_return_type,
  adc_unify,
  adc_requirement,
  adc_decomp_type
};
# 5794 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
const unsigned int STF_USER_VISIBLE = 1U;
const unsigned int STF_STRIP_DEPENDENT = 1U << 1;
# 5806 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
extern void init_reswords (void);


enum ovl_op_flags {
  OVL_OP_FLAG_NONE = 0,
  OVL_OP_FLAG_UNARY = 1,
  OVL_OP_FLAG_BINARY = 2,
  OVL_OP_FLAG_AMBIARY = 3,
  OVL_OP_FLAG_ALLOC = 4,
  OVL_OP_FLAG_DELETE = 1,
  OVL_OP_FLAG_VEC = 2
};



enum ovl_op_code {
  OVL_OP_ERROR_MARK,
  OVL_OP_NOP_EXPR,


# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/operators.def" 1
# 71 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/operators.def"
OVL_OP_NEW_EXPR,
OVL_OP_VEC_NEW_EXPR,

OVL_OP_DELETE_EXPR,

OVL_OP_VEC_DELETE_EXPR,



OVL_OP_UNARY_PLUS_EXPR,
OVL_OP_NEGATE_EXPR,
OVL_OP_ADDR_EXPR,
OVL_OP_INDIRECT_REF,
OVL_OP_BIT_NOT_EXPR,
OVL_OP_TRUTH_NOT_EXPR,
OVL_OP_PREINCREMENT_EXPR,
OVL_OP_PREDECREMENT_EXPR,
OVL_OP_COMPONENT_REF,
OVL_OP_SIZEOF_EXPR,
OVL_OP_CO_AWAIT_EXPR,


OVL_OP_ALIGNOF_EXPR,
OVL_OP_IMAGPART_EXPR,
OVL_OP_REALPART_EXPR,


OVL_OP_PLUS_EXPR,
OVL_OP_MINUS_EXPR,
OVL_OP_MULT_EXPR,
OVL_OP_TRUNC_DIV_EXPR,
OVL_OP_TRUNC_MOD_EXPR,
OVL_OP_BIT_AND_EXPR,
OVL_OP_BIT_IOR_EXPR,
OVL_OP_BIT_XOR_EXPR,
OVL_OP_LSHIFT_EXPR,
OVL_OP_RSHIFT_EXPR,


OVL_OP_EQ_EXPR,
OVL_OP_NE_EXPR,
OVL_OP_LT_EXPR,
OVL_OP_GT_EXPR,
OVL_OP_LE_EXPR,
OVL_OP_GE_EXPR,
OVL_OP_SPACESHIP_EXPR,

OVL_OP_TRUTH_ANDIF_EXPR,
OVL_OP_TRUTH_ORIF_EXPR,
OVL_OP_COMPOUND_EXPR,
OVL_OP_MEMBER_REF,
OVL_OP_DOTSTAR_EXPR,
OVL_OP_ARRAY_REF,
OVL_OP_POSTINCREMENT_EXPR,
OVL_OP_POSTDECREMENT_EXPR,


OVL_OP_COND_EXPR,
OVL_OP_CALL_EXPR,


OVL_OP_CAST_EXPR,
OVL_OP_DYNAMIC_CAST_EXPR,
OVL_OP_REINTERPRET_CAST_EXPR,
OVL_OP_CONST_CAST_EXPR,
OVL_OP_STATIC_CAST_EXPR,
OVL_OP_SCOPE_REF,
OVL_OP_EXPR_PACK_EXPANSION,
OVL_OP_UNARY_LEFT_FOLD_EXPR,
OVL_OP_UNARY_RIGHT_FOLD_EXPR,
OVL_OP_BINARY_LEFT_FOLD_EXPR,
OVL_OP_BINARY_RIGHT_FOLD_EXPR,


















# 5827 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 2
  OVL_OP_MAX
};

struct ovl_op_info_t {

  tree identifier;

  const char *name;

  const char *mangled_name;

  enum tree_code tree_code : 16;

  enum ovl_op_code ovl_op_code : 8;

  unsigned flags : 8;
};


extern ovl_op_info_t ovl_op_info[2][OVL_OP_MAX];

extern unsigned char ovl_op_mapping[MAX_TREE_CODES];

extern unsigned char ovl_op_alternate[OVL_OP_MAX];
# 5864 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
inline tree ovl_op_identifier (bool isass, tree_code code)
{ return (&ovl_op_info[(isass) != 0][ovl_op_mapping[(code)]])->identifier; }
inline tree ovl_op_identifier (tree_code code) { return ovl_op_identifier (false, code); }






typedef int cp_cv_quals;





enum virt_specifier
  {
    VIRT_SPEC_UNSPECIFIED = 0x0,
    VIRT_SPEC_FINAL = 0x1,
    VIRT_SPEC_OVERRIDE = 0x2
  };




typedef int cp_virt_specifiers;
# 5902 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
enum cp_ref_qualifier {
  REF_QUAL_NONE = 0,
  REF_QUAL_LVALUE = 1,
  REF_QUAL_RVALUE = 2
};



enum cp_storage_class {


  sc_none = 0,
  sc_auto,
  sc_register,
  sc_static,
  sc_extern,
  sc_mutable
};





enum cp_decl_spec {
  ds_first,
  ds_signed = ds_first,
  ds_unsigned,
  ds_short,
  ds_long,
  ds_const,
  ds_volatile,
  ds_restrict,
  ds_inline,
  ds_virtual,
  ds_explicit,
  ds_friend,
  ds_typedef,
  ds_alias,
  ds_constexpr,
  ds_complex,
  ds_constinit,
  ds_consteval,
  ds_thread,
  ds_type_spec,
  ds_redefined_builtin_type_spec,
  ds_attribute,
  ds_std_attribute,
  ds_storage_class,
  ds_long_long,
  ds_concept,
  ds_last
};



struct cp_decl_specifier_seq {


  location_t locations[ds_last];




  tree type;

  tree attributes;

  tree std_attributes;


  tree redefined_builtin_type;

  tree explicit_specifier;


  cp_storage_class storage_class;

  int int_n_idx;

  unsigned int type_definition_p : 1;


  unsigned int multiple_types_p : 1;



  unsigned int conflicting_specifiers_p : 1;

  unsigned int any_specifiers_p : 1;

  unsigned int any_type_specifiers_p : 1;

  unsigned int explicit_int_p : 1;

  unsigned int explicit_intN_p : 1;

  unsigned int explicit_char_p : 1;

  unsigned int gnu_thread_keyword_p : 1;

  unsigned int decltype_p : 1;


  unsigned int int_n_alt: 1;
};



enum cp_declarator_kind {
  cdk_id,
  cdk_function,
  cdk_array,
  cdk_pointer,
  cdk_reference,
  cdk_ptrmem,
  cdk_decomp,
  cdk_error
};



typedef struct cp_declarator cp_declarator;

typedef struct cp_parameter_declarator cp_parameter_declarator;


struct cp_parameter_declarator {

  cp_parameter_declarator *next;

  cp_decl_specifier_seq decl_specifiers;

  cp_declarator *declarator;

  tree default_argument;

  bool template_parameter_pack_p;

  location_t loc;
};


struct cp_declarator {

  enum cp_declarator_kind kind : 4;


  unsigned int parameter_pack_p : 1;


  location_t parenthesized;

  location_t id_loc;




  tree attributes;



  tree std_attributes;


  cp_declarator *declarator;
  union {

    struct {


      tree qualifying_scope;


      tree unqualified_name;


      special_function_kind sfk;
    } id;

    struct {

      tree parameters;

      cp_cv_quals qualifiers;

      cp_virt_specifiers virt_specifiers;

      cp_ref_qualifier ref_qualifier;

      tree tx_qualifier;

      tree exception_specification;

      tree late_return_type;

      tree requires_clause;
    } function;

    struct {

      tree bounds;
    } array;

    struct {

      cp_cv_quals qualifiers;

      tree class_type;
    } pointer;

    struct {


      cp_cv_quals qualifiers;

      bool rvalue_ref;
    } reference;
  } u;
};


struct tinst_level {

  struct tinst_level *next;
# 6137 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
  tree tldcl, targs;

 private:

  bool split_list_p () const { return targs; }


  bool tree_list_p () const
  {
    return !split_list_p () && ((enum tree_code) (tldcl)->base.code) == TREE_LIST;
  }


  bool not_list_p () const
  {
    return !split_list_p () && !tree_list_p ();
  }



  tree to_list ();

 public:

  static void free (tinst_level *obj);


  bool list_p () const { return !not_list_p (); }




  tree get_node () {
    if (!split_list_p ()) return tldcl;
    else return to_list ();
  }



  tree maybe_get_node () const {
    if (!split_list_p ()) return tldcl;
    else return (tree) nullptr;
  }


  location_t locus;


  unsigned short errors;







  unsigned short refcount;


  static const unsigned short refcount_infinity = (unsigned short) ~0;
};


enum cp_built_in_function {
  CP_BUILT_IN_IS_CONSTANT_EVALUATED,
  CP_BUILT_IN_INTEGER_PACK,
  CP_BUILT_IN_SOURCE_LOCATION,
  CP_BUILT_IN_LAST
};

bool decl_spec_seq_has_spec_p (const cp_decl_specifier_seq *, cp_decl_spec);



inline tree
type_of_this_parm (const_tree fntype)
{
  function_args_iterator iter;
  ((void)(!(((enum tree_code) (fntype)->base.code) == METHOD_TYPE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 6215, __FUNCTION__), 0 : 0));
  function_args_iter_init (&iter, fntype);
  return function_args_iter_cond (&iter);
}



inline tree
class_of_this_parm (const_tree fntype)
{
  return ((contains_struct_check ((type_of_this_parm (fntype)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 6225, __FUNCTION__))->typed.type);
}



extern cp_parameter_declarator *no_parameters;


extern int class_dump_id;
extern int raw_dump_id;


extern bool check_dtor_name (tree, tree);
int magic_varargs_p (tree);

extern tree build_conditional_expr (const op_location_t &,
       tree, tree, tree,
                                                 tsubst_flags_t);
extern tree build_addr_func (tree, tsubst_flags_t);
extern void set_flags_from_callee (tree);
extern tree build_call_a (tree, int, tree*);
extern tree build_call_n (tree, int, ...);
extern bool null_ptr_cst_p (tree);
extern bool null_member_pointer_value_p (tree);
extern bool sufficient_parms_p (const_tree);
extern tree type_decays_to (tree);
extern tree extract_call_expr (tree);
extern tree build_trivial_dtor_call (tree);
extern tree build_user_type_conversion (tree, tree, int,
       tsubst_flags_t);
extern tree build_new_function_call (tree, vec<tree, va_gc> **,
       tsubst_flags_t);
extern tree build_operator_new_call (tree, vec<tree, va_gc> **,
       tree *, tree *, tree, tree,
       tree *, tsubst_flags_t);
extern tree build_new_method_call (tree, tree,
       vec<tree, va_gc> **, tree,
       int, tree *, tsubst_flags_t);
extern tree build_special_member_call (tree, tree,
       vec<tree, va_gc> **,
       tree, int, tsubst_flags_t);
extern tree build_new_op (const op_location_t &,
       enum tree_code,
       int, tree, tree, tree, tree *,
       tsubst_flags_t);
extern tree build_op_call (tree, vec<tree, va_gc> **,
       tsubst_flags_t);
extern bool aligned_allocation_fn_p (tree);
extern tree destroying_delete_p (tree);
extern bool usual_deallocation_fn_p (tree);
extern tree build_op_delete_call (enum tree_code, tree, tree,
       bool, tree, tree,
       tsubst_flags_t);
extern bool can_convert (tree, tree, tsubst_flags_t);
extern bool can_convert_standard (tree, tree, tsubst_flags_t);
extern bool can_convert_arg (tree, tree, tree, int,
       tsubst_flags_t);
extern bool can_convert_arg_bad (tree, tree, tree, int,
       tsubst_flags_t);
extern int conv_flags (int, int, tree, tree, int);
extern struct conversion * good_conversion (tree, tree, tree, int, tsubst_flags_t);
extern location_t get_fndecl_argument_location (tree, int);
extern void complain_about_bad_argument (location_t arg_loc,
       tree from_type, tree to_type,
       tree fndecl, int parmnum);
extern void maybe_inform_about_fndecl_for_bogus_argument_init (tree, int);







class access_failure_info
{
 public:
  access_failure_info () : m_was_inaccessible (false),
    m_basetype_path ((tree) nullptr),
    m_decl ((tree) nullptr), m_diag_decl ((tree) nullptr) {}

  void record_access_failure (tree basetype_path, tree decl, tree diag_decl);

  bool was_inaccessible_p () const { return m_was_inaccessible; }
  tree get_decl () const { return m_decl; }
  tree get_diag_decl () const { return m_diag_decl; }
  tree get_any_accessor (bool const_p) const;
  void maybe_suggest_accessor (bool const_p) const;
  static void add_fixit_hint (rich_location *richloc, tree accessor);

 private:
  bool m_was_inaccessible;
  tree m_basetype_path;
  tree m_decl;
  tree m_diag_decl;
};

extern void complain_about_access (tree, tree, bool);
extern void push_defarg_context (tree);
extern void pop_defarg_context (void);
extern tree convert_default_arg (tree, tree, tree, int,
       tsubst_flags_t);
extern tree convert_arg_to_ellipsis (tree, tsubst_flags_t);
extern tree build_x_va_arg (location_t, tree, tree);
extern tree cxx_type_promotes_to (tree);
extern tree type_passed_as (tree);
extern tree convert_for_arg_passing (tree, tree, tsubst_flags_t);
extern bool is_properly_derived_from (tree, tree);
extern tree initialize_reference (tree, tree, int,
       tsubst_flags_t);
extern tree extend_ref_init_temps (tree, tree,
       vec<tree, va_gc>**,
       tree * = nullptr);
extern tree make_temporary_var_for_ref_to_temp (tree, tree);
extern bool type_has_extended_temps (tree);
extern tree strip_top_quals (tree);
extern bool reference_related_p (tree, tree);
extern bool reference_compatible_p (tree, tree);
extern int remaining_arguments (tree);
extern tree perform_implicit_conversion (tree, tree, tsubst_flags_t);
extern tree perform_implicit_conversion_flags (tree, tree, tsubst_flags_t, int);
extern tree build_converted_constant_expr (tree, tree, tsubst_flags_t);
extern tree build_converted_constant_bool_expr (tree, tsubst_flags_t);
extern tree perform_direct_initialization_if_possible (tree, tree, bool,
                                                       tsubst_flags_t);
extern vec<tree,va_gc> *resolve_args (vec<tree,va_gc>*, tsubst_flags_t);
extern tree in_charge_arg_for_name (tree);
extern tree build_cxx_call (tree, int, tree *,
       tsubst_flags_t,
       tree = (tree) nullptr);
extern bool is_std_init_list (tree);
extern bool is_list_ctor (tree);
extern void validate_conversion_obstack (void);
extern void mark_versions_used (tree);
extern bool unsafe_return_slot_p (tree);
extern bool cp_warn_deprecated_use (tree, tsubst_flags_t = tf_warning_or_error);
extern void cp_warn_deprecated_use_scopes (tree);
extern tree get_function_version_dispatcher (tree);


extern tree build_vfield_ref (tree, tree);
extern tree build_if_in_charge (tree true_stmt, tree false_stmt = global_trees[TI_VOID]);
extern tree build_base_path (enum tree_code, tree,
       tree, int, tsubst_flags_t);
extern tree convert_to_base (tree, tree, bool, bool,
       tsubst_flags_t);
extern tree convert_to_base_statically (tree, tree);
extern tree build_vtbl_ref (tree, tree);
extern tree build_vfn_ref (tree, tree);
extern tree get_vtable_decl (tree, int);
extern bool add_method (tree, tree, bool);
extern tree declared_access (tree);
extern tree currently_open_class (tree);
extern tree currently_open_derived_class (tree);
extern tree outermost_open_class (void);
extern tree current_nonlambda_class_type (void);
extern tree finish_struct (tree, tree);
extern void finish_struct_1 (tree);
extern int resolves_to_fixed_type_p (tree, int * = nullptr);
extern void init_class_processing (void);
extern int is_empty_class (tree);
extern bool is_really_empty_class (tree, bool);
extern void pushclass (tree);
extern void popclass (void);
extern void push_nested_class (tree);
extern void pop_nested_class (void);
extern int current_lang_depth (void);
extern void push_lang_context (tree);
extern void pop_lang_context (void);
extern tree instantiate_type (tree, tree, tsubst_flags_t);
extern void build_self_reference (void);
extern int same_signature_p (const_tree, const_tree);
extern tree lookup_vfn_in_binfo (tree, tree);
extern void maybe_add_class_template_decl_list (tree, tree, int);
extern void unreverse_member_declarations (tree);
extern void invalidate_class_lookup_cache (void);
extern void maybe_note_name_used_in_class (tree, tree);
extern void note_name_declared_in_class (tree, tree);
extern tree get_vtbl_decl_for_binfo (tree);
extern bool vptr_via_virtual_p (tree);
extern void debug_class (tree);
extern void debug_thunks (tree);
extern void set_linkage_according_to_type (tree, tree);
extern void determine_key_method (tree);
extern void check_for_override (tree, tree);
extern void push_class_stack (void);
extern void pop_class_stack (void);
extern bool default_ctor_p (const_tree);
extern bool type_has_user_nondefault_constructor (tree);
extern tree in_class_defaulted_default_constructor (tree);
extern bool user_provided_p (tree);
extern bool type_has_user_provided_constructor (tree);
extern bool type_has_non_user_provided_default_constructor (tree);
extern bool vbase_has_user_provided_move_assign (tree);
extern tree default_init_uninitialized_part (tree);
extern bool trivial_default_constructor_is_constexpr (tree);
extern bool type_has_constexpr_default_constructor (tree);
extern bool type_has_constexpr_destructor (tree);
extern bool type_has_virtual_destructor (tree);
extern bool classtype_has_move_assign_or_move_ctor_p (tree, bool user_declared);
extern bool classtype_has_non_deleted_move_ctor (tree);
extern bool classtype_has_non_deleted_copy_ctor (tree);
extern tree classtype_has_depr_implicit_copy (tree);
extern bool classtype_has_op (tree, tree_code);
extern tree classtype_has_defaulted_op (tree, tree_code);
extern bool type_build_ctor_call (tree);
extern bool type_build_dtor_call (tree);
extern void explain_non_literal_class (tree);
extern void inherit_targ_abi_tags (tree);
extern void defaulted_late_check (tree);
extern bool defaultable_fn_check (tree);
extern void check_abi_tags (tree);
extern tree missing_abi_tags (tree);
extern void fixup_type_variants (tree);
extern void fixup_attribute_variants (tree);
extern void clone_cdtor (tree, bool);
extern tree copy_operator_fn (tree, tree_code code);
extern void adjust_clone_args (tree);
extern void deduce_noexcept_on_destructor (tree);
extern bool uniquely_derived_from_p (tree, tree);
extern bool publicly_uniquely_derived_p (tree, tree);
extern tree common_enclosing_class (tree, tree);


extern tree convert_to_reference (tree, tree, int, int, tree,
       tsubst_flags_t);
extern tree convert_from_reference (tree);
extern tree force_rvalue (tree, tsubst_flags_t);
extern tree ocp_convert (tree, tree, int, int,
       tsubst_flags_t);
extern tree cp_convert (tree, tree, tsubst_flags_t);
extern tree cp_convert_and_check (tree, tree, tsubst_flags_t);
extern tree cp_fold_convert (tree, tree);
extern tree cp_get_callee (tree);
extern tree cp_get_callee_fndecl (tree);
extern tree cp_get_callee_fndecl_nofold (tree);
extern tree cp_get_fndecl_from_callee (tree, bool fold = true);
extern tree convert_to_void (tree, impl_conv_void,
                                    tsubst_flags_t);
extern tree convert_force (tree, tree, int,
       tsubst_flags_t);
extern tree build_expr_type_conversion (int, tree, bool);
extern tree type_promotes_to (tree);
extern bool can_convert_qual (tree, tree);
extern tree perform_qualification_conversions (tree, tree);
extern bool tx_safe_fn_type_p (tree);
extern tree tx_unsafe_fn_variant (tree);
extern bool fnptr_conv_p (tree, tree);
extern tree strip_fnptr_conv (tree);


extern void maybe_push_cleanup_level (tree);
extern tree maybe_push_decl (tree);
extern tree current_decl_namespace (void);


extern tree poplevel (int, int, int);
extern void cxx_init_decl_processing (void);
enum cp_tree_node_structure_enum cp_tree_node_structure
      (union lang_tree_node *);
extern void finish_scope (void);
extern void push_switch (tree);
extern void pop_switch (void);
extern void note_break_stmt (void);
extern bool note_iteration_stmt_body_start (void);
extern void note_iteration_stmt_body_end (bool);
extern void determine_local_discriminator (tree);
extern int decls_match (tree, tree, bool = true);
extern bool maybe_version_functions (tree, tree, bool);
extern tree duplicate_decls (tree, tree, bool);
extern tree declare_local_label (tree);
extern tree define_label (location_t, tree);
extern void check_goto (tree);
extern bool check_omp_return (void);
extern tree make_typename_type (tree, tree, enum tag_types, tsubst_flags_t);
extern tree build_typename_type (tree, tree, tree, tag_types);
extern tree make_unbound_class_template (tree, tree, tree, tsubst_flags_t);
extern tree build_library_fn_ptr (const char *, tree, int);
extern tree build_cp_library_fn_ptr (const char *, tree, int);
extern tree push_library_fn (tree, tree, tree, int);
extern tree push_void_library_fn (tree, tree, int);
extern tree push_throw_library_fn (tree, tree);
extern void warn_misplaced_attr_for_class_type (location_t location,
       tree class_type);
extern tree check_tag_decl (cp_decl_specifier_seq *, bool);
extern tree shadow_tag (cp_decl_specifier_seq *);
extern tree groktypename (cp_decl_specifier_seq *, const cp_declarator *, bool);
extern tree start_decl (const cp_declarator *, cp_decl_specifier_seq *, int, tree, tree, tree *);
extern void start_decl_1 (tree, bool);
extern bool check_array_initializer (tree, tree, tree);
extern void omp_declare_variant_finalize (tree, tree);
extern void cp_finish_decl (tree, tree, bool, tree, int);
extern tree lookup_decomp_type (tree);
extern void cp_maybe_mangle_decomp (tree, tree, unsigned int);
extern void cp_finish_decomp (tree, tree, unsigned int);
extern int cp_complete_array_type (tree *, tree, bool);
extern int cp_complete_array_type_or_error (tree *, tree, bool, tsubst_flags_t);
extern tree build_ptrmemfunc_type (tree);
extern tree build_ptrmem_type (tree, tree);

extern tree build_this_parm (tree, tree, cp_cv_quals);
extern tree grokparms (tree, tree *);
extern int copy_fn_p (const_tree);
extern bool move_fn_p (const_tree);
extern bool move_signature_fn_p (const_tree);
extern tree get_scope_of_declarator (const cp_declarator *);
extern void grok_special_member_properties (tree);
extern bool grok_ctor_properties (const_tree, const_tree);
extern bool grok_op_properties (tree, bool);
extern tree xref_tag (enum tag_types, tree, tag_scope, bool);
extern tree xref_tag_from_type (tree, tree, tag_scope);
extern void xref_basetypes (tree, tree);
extern tree start_enum (tree, tree, tree, tree, bool, bool *);
extern void finish_enum_value_list (tree);
extern void finish_enum (tree);
extern void build_enumerator (tree, tree, tree, tree, location_t);
extern tree lookup_enumerator (tree, tree);
extern bool start_preparsed_function (tree, tree, int);
extern bool start_function (cp_decl_specifier_seq *,
       const cp_declarator *, tree);
extern tree begin_function_body (void);
extern void finish_function_body (tree);
extern tree outer_curly_brace_block (tree);
extern tree finish_function (bool);
extern tree grokmethod (cp_decl_specifier_seq *, const cp_declarator *, tree);
extern void maybe_register_incomplete_var (tree);
extern void maybe_commonize_var (tree);
extern void complete_vars (tree);
extern tree static_fn_type (tree);
extern void revert_static_member_fn (tree);
extern void fixup_anonymous_aggr (tree);
extern tree compute_array_index_type (tree, tree, tsubst_flags_t);
extern tree check_default_argument (tree, tree, tsubst_flags_t);
extern int wrapup_namespace_globals ();
extern tree create_implicit_typedef (tree, tree);
extern int local_variable_p (const_tree);
extern tree register_dtor_fn (tree);
extern tmpl_spec_kind current_tmpl_spec_kind (int);
extern tree cp_fname_init (const char *, tree *);
extern tree cxx_builtin_function (tree decl);
extern tree cxx_builtin_function_ext_scope (tree decl);
extern tree cxx_simulate_builtin_function_decl (tree);
extern tree check_elaborated_type_specifier (enum tag_types, tree, bool);
extern void warn_extern_redeclared_static (tree, tree);
extern tree cxx_comdat_group (tree);
extern bool cp_missing_noreturn_ok_p (tree);
extern bool is_direct_enum_init (tree, tree);
extern void initialize_artificial_var (tree, vec<constructor_elt, va_gc> *);
extern tree check_var_type (tree, tree, location_t);
extern tree reshape_init (tree, tree, tsubst_flags_t);
extern tree next_initializable_field (tree);
extern tree fndecl_declared_return_type (tree);
extern bool undeduced_auto_decl (tree);
extern bool require_deduced_type (tree, tsubst_flags_t = tf_warning_or_error);

extern tree finish_case_label (location_t, tree, tree);
extern tree cxx_maybe_build_cleanup (tree, tsubst_flags_t);
extern bool check_array_designated_initializer (constructor_elt *,
       unsigned long);
extern bool check_for_uninitialized_const_var (tree, bool, tsubst_flags_t);
extern tree build_explicit_specifier (tree, tsubst_flags_t);
extern void do_push_parm_decls (tree, tree, tree *);


extern void record_mangling (tree, bool);
extern void overwrite_mangling (tree, tree);
extern void note_mangling_alias (tree, tree);
extern void generate_mangling_aliases (void);
extern tree build_memfn_type (tree, tree, cp_cv_quals, cp_ref_qualifier);
extern tree build_pointer_ptrmemfn_type (tree);
extern tree change_return_type (tree, tree);
extern void maybe_retrofit_in_chrg (tree);
extern void maybe_make_one_only (tree);
extern bool vague_linkage_p (tree);
extern void grokclassfn (tree, tree,
       enum overload_flags);
extern tree grok_array_decl (location_t, tree, tree, bool);
extern tree delete_sanity (location_t, tree, tree, bool,
       int, tsubst_flags_t);
extern tree check_classfn (tree, tree, tree);
extern void check_member_template (tree);
extern tree grokfield (const cp_declarator *, cp_decl_specifier_seq *,
         tree, bool, tree, tree);
extern tree grokbitfield (const cp_declarator *, cp_decl_specifier_seq *,
     tree, tree, tree);
extern tree splice_template_attributes (tree *, tree);
extern bool any_dependent_type_attributes_p (tree);
extern tree cp_reconstruct_complex_type (tree, tree);
extern bool attributes_naming_typedef_ok (tree);
extern void cplus_decl_attributes (tree *, tree, int);
extern void finish_anon_union (tree);
extern void cxx_post_compilation_parsing_cleanups (void);
extern tree coerce_new_type (tree, location_t);
extern void coerce_delete_type (tree, location_t);
extern void comdat_linkage (tree);
extern void determine_visibility (tree);
extern void constrain_class_visibility (tree);
extern void reset_type_linkage (tree);
extern void tentative_decl_linkage (tree);
extern void import_export_decl (tree);
extern tree build_cleanup (tree);
extern tree build_offset_ref_call_from_tree (tree, vec<tree, va_gc> **,
       tsubst_flags_t);
extern bool decl_defined_p (tree);
extern bool decl_constant_var_p (tree);
extern bool decl_maybe_constant_var_p (tree);
extern void no_linkage_error (tree);
extern void check_default_args (tree);
extern bool mark_used (tree);
extern bool mark_used (tree, tsubst_flags_t);
extern void finish_static_data_member_decl (tree, tree, bool, tree, int);
extern tree cp_build_parm_decl (tree, tree, tree);
extern void copy_linkage (tree, tree);
extern tree get_guard (tree);
extern tree get_guard_cond (tree, bool);
extern tree set_guard (tree);
extern tree maybe_get_tls_wrapper_call (tree);
extern void mark_needed (tree);
extern bool decl_needed_p (tree);
extern void note_vague_linkage_fn (tree);
extern void note_variable_template_instantiation (tree);
extern tree build_artificial_parm (tree, tree, tree);
extern bool possibly_inlined_p (tree);
extern int parm_index (tree);
extern tree vtv_start_verification_constructor_init_function (void);
extern tree vtv_finish_verification_constructor_init_function (tree);
extern bool cp_omp_mappable_type (tree);
extern bool cp_omp_emit_unmappable_type_notes (tree);
extern void cp_check_const_attributes (tree);


extern const char *type_as_string (tree, int);
extern const char *type_as_string_translate (tree, int);
extern const char *decl_as_string (tree, int);
extern const char *decl_as_string_translate (tree, int);
extern const char *decl_as_dwarf_string (tree, int);
extern const char *expr_as_string (tree, int);
extern const char *expr_to_string (tree);
extern const char *lang_decl_name (tree, int, bool);
extern const char *lang_decl_dwarf_name (tree, int, bool);
extern const char *language_to_string (enum languages);
extern const char *class_key_or_enum_as_string (tree);
extern void maybe_warn_variadic_templates (void);
extern void maybe_warn_cpp0x (cpp0x_warn_str str);
extern bool pedwarn_cxx98 (location_t, int, const char *, ...) __attribute__ ((__format__ (__gcc_cxxdiag__, 3, 4))) __attribute__ ((__nonnull__ (3)));
extern location_t location_of (tree);
extern void qualified_name_lookup_error (tree, tree, tree,
       location_t);


extern void init_exception_processing (void);
extern tree expand_start_catch_block (tree);
extern void expand_end_catch_block (void);
extern tree build_exc_ptr (void);
extern tree build_throw (location_t, tree);
extern int nothrow_libfn_p (const_tree);
extern void check_handlers (tree);
extern tree finish_noexcept_expr (tree, tsubst_flags_t);
extern bool expr_noexcept_p (tree, tsubst_flags_t);
extern void perform_deferred_noexcept_checks (void);
extern bool nothrow_spec_p (const_tree);
extern bool type_noexcept_p (const_tree);
extern bool type_throw_all_p (const_tree);
extern tree build_noexcept_spec (tree, tsubst_flags_t);
extern void choose_personality_routine (enum languages);
extern tree build_must_not_throw_expr (tree,tree);
extern tree eh_type_info (tree);
extern tree begin_eh_spec_block (void);
extern void finish_eh_spec_block (tree, tree);
extern tree build_eh_type_type (tree);
extern tree cp_protect_cleanup_actions (void);
extern void maybe_splice_retval_cleanup (tree);
extern tree maybe_set_retval_sentinel (void);

extern tree template_parms_to_args (tree);
extern tree template_parms_level_to_args (tree);
extern tree generic_targs_for (tree);


extern tree cplus_expand_constant (tree);
extern tree mark_use (tree expr, bool rvalue_p, bool read_p,
        location_t = ((location_t) 0),
        bool reject_builtin = true);
extern tree mark_rvalue_use (tree,
                                                 location_t = ((location_t) 0),
                                                 bool reject_builtin = true);
extern tree mark_lvalue_use (tree);
extern tree mark_lvalue_use_nonread (tree);
extern tree mark_type_use (tree);
extern tree mark_discarded_use (tree);
extern void mark_exp_read (tree);


extern int is_friend (tree, tree);
extern void make_friend_class (tree, tree, bool);
extern void add_friend (tree, tree, bool);
extern tree do_friend (tree, tree, tree, tree,
       enum overload_flags, bool);

extern void set_global_friend (tree);
extern bool is_global_friend (tree);


extern tree expand_member_init (tree);
extern void emit_mem_initializers (tree);
extern tree build_aggr_init (tree, tree, int,
                                                 tsubst_flags_t);
extern int is_class_type (tree, int);
extern tree get_type_value (tree);
extern tree build_zero_init (tree, tree, bool);
extern tree build_value_init (tree, tsubst_flags_t);
extern tree build_value_init_noctor (tree, tsubst_flags_t);
extern tree get_nsdmi (tree, bool, tsubst_flags_t);
extern tree build_offset_ref (tree, tree, bool,
       tsubst_flags_t);
extern tree throw_bad_array_new_length (void);
extern bool type_has_new_extended_alignment (tree);
extern unsigned malloc_alignment (void);
extern tree build_new_constexpr_heap_type (tree, tree, tree);
extern tree build_new (location_t,
       vec<tree, va_gc> **, tree,
       tree, vec<tree, va_gc> **,
       int, tsubst_flags_t);
extern tree get_temp_regvar (tree, tree);
extern tree build_vec_init (tree, tree, tree, bool, int,
                                                 tsubst_flags_t);
extern tree build_delete (location_t, tree, tree,
       special_function_kind,
       int, int, tsubst_flags_t);
extern void push_base_cleanups (void);
extern tree build_vec_delete (location_t, tree, tree,
       special_function_kind, int,
       tsubst_flags_t);
extern tree create_temporary_var (tree);
extern void initialize_vtbl_ptrs (tree);
extern tree scalar_constant_value (tree);
extern tree decl_constant_value (tree, bool);
extern tree decl_really_constant_value (tree, bool = true);
extern int diagnose_uninitialized_cst_or_ref_member (tree, bool, bool);
extern tree build_vtbl_address (tree);
extern bool maybe_reject_flexarray_init (tree, tree);


extern void cxx_dup_lang_specific_decl (tree);
extern tree unqualified_name_lookup_error (tree,
       location_t = ((location_t) 0));
extern tree unqualified_fn_lookup_error (cp_expr);
extern tree make_conv_op_name (tree);
extern tree build_lang_decl (enum tree_code, tree, tree);
extern tree build_lang_decl_loc (location_t, enum tree_code, tree, tree);
extern void retrofit_lang_decl (tree);
extern void fit_decomposition_lang_decl (tree, tree);
extern tree copy_decl (tree );
extern tree copy_type (tree );
extern tree cxx_make_type (enum tree_code );
extern tree make_class_type (enum tree_code );
extern const char *get_identifier_kind_name (tree);
extern void set_identifier_kind (tree, cp_identifier_kind);
extern bool cxx_init (void);
extern void cxx_finish (void);
extern bool in_main_input_context (void);


extern void init_method (void);
extern tree make_thunk (tree, bool, tree, tree);
extern void finish_thunk (tree);
extern void use_thunk (tree, bool);
extern bool trivial_fn_p (tree);
extern tree forward_parm (tree);
extern bool is_trivially_xible (enum tree_code, tree, tree);
extern bool is_xible (enum tree_code, tree, tree);
extern tree get_defaulted_eh_spec (tree, tsubst_flags_t = tf_warning_or_error);
extern bool maybe_explain_implicit_delete (tree);
extern void explain_implicit_non_constexpr (tree);
extern void deduce_inheriting_ctor (tree);
extern bool decl_remember_implicit_trigger_p (tree);
extern void synthesize_method (tree);
extern tree lazily_declare_fn (special_function_kind,
       tree);
extern tree skip_artificial_parms_for (const_tree, tree);
extern int num_artificial_parms_for (const_tree);
extern tree make_alias_for (tree, tree);
extern tree get_copy_ctor (tree, tsubst_flags_t);
extern tree get_copy_assign (tree);
extern tree get_default_ctor (tree);
extern tree get_dtor (tree, tsubst_flags_t);
extern tree strip_inheriting_ctors (tree);
extern tree inherited_ctor_binfo (tree);
extern bool ctor_omit_inherited_parms (tree);
extern tree locate_ctor (tree);
extern tree implicitly_declare_fn (special_function_kind, tree,
       bool, tree, tree);


extern bool maybe_clone_body (tree);


extern tree cp_convert_range_for (tree, tree, tree, tree, unsigned int, bool,
      unsigned short);
extern void cp_convert_omp_range_for (tree &, vec<tree, va_gc> *, tree &,
          tree &, tree &, tree &, tree &, tree &);
extern void cp_finish_omp_range_for (tree, tree);
extern bool parsing_nsdmi (void);
extern bool parsing_default_capturing_generic_lambda_in_template (void);
extern void inject_this_parameter (tree, cp_cv_quals);
extern location_t defparse_location (tree);
extern void maybe_show_extern_c_location (void);
extern bool literal_integer_zerop (const_tree);


extern void push_access_scope (tree);
extern void pop_access_scope (tree);
extern bool check_template_shadow (tree);
extern bool check_auto_in_tmpl_args (tree, tree);
extern tree get_innermost_template_args (tree, int);
extern void maybe_begin_member_template_processing (tree);
extern void maybe_end_member_template_processing (void);
extern tree finish_member_template_decl (tree);
extern void begin_template_parm_list (void);
extern bool begin_specialization (void);
extern void reset_specialization (void);
extern void end_specialization (void);
extern void begin_explicit_instantiation (void);
extern void end_explicit_instantiation (void);
extern void check_unqualified_spec_or_inst (tree, location_t);
extern tree check_explicit_specialization (tree, tree, int, int,
       tree = (tree) nullptr);
extern int num_template_headers_for_class (tree);
extern void check_template_variable (tree);
extern tree make_auto (void);
extern tree make_decltype_auto (void);
extern tree make_constrained_auto (tree, tree);
extern tree make_constrained_decltype_auto (tree, tree);
extern tree make_template_placeholder (tree);
extern bool template_placeholder_p (tree);
extern bool ctad_template_p (tree);
extern tree do_auto_deduction (tree, tree, tree,
                                                 tsubst_flags_t
       = tf_warning_or_error,
                                                 auto_deduction_context
       = adc_unspecified,
       tree = (tree) nullptr,
       int = ((1 << 0)));
extern tree type_uses_auto (tree);
extern tree type_uses_auto_or_concept (tree);
extern void append_type_to_template_for_access_check (tree, tree, tree,
            location_t);
extern tree convert_generic_types_to_packs (tree, int, int);
extern tree splice_late_return_type (tree, tree);
extern bool is_auto (const_tree);
extern tree process_template_parm (tree, location_t, tree,
       bool, bool);
extern tree end_template_parm_list (tree);
extern void end_template_parm_list (void);
extern void end_template_decl (void);
extern tree maybe_update_decl_type (tree, tree);
extern bool check_default_tmpl_args (tree, tree, bool, bool, int);
extern tree push_template_decl (tree);
extern tree push_template_decl_real (tree, bool);
extern tree add_inherited_template_parms (tree, tree);
extern void template_parm_level_and_index (tree, int*, int*);
extern bool redeclare_class_template (tree, tree, tree);
extern tree lookup_template_class (tree, tree, tree, tree,
       int, tsubst_flags_t);
extern tree lookup_template_function (tree, tree);
extern tree lookup_template_variable (tree, tree);
extern int uses_template_parms (tree);
extern bool uses_template_parms_level (tree, int);
extern bool in_template_function (void);
extern bool need_generic_capture (void);
extern tree instantiate_class_template (tree);
extern tree instantiate_template (tree, tree, tsubst_flags_t);
extern tree fn_type_unification (tree, tree, tree,
       const tree *, unsigned int,
       tree, unification_kind_t, int,
       struct conversion **,
       bool, bool);
extern void mark_decl_instantiated (tree, int);
extern int more_specialized_fn (tree, tree, int);
extern void do_decl_instantiation (tree, tree);
extern void do_type_instantiation (tree, tree, tsubst_flags_t);
extern bool always_instantiate_p (tree);
extern bool maybe_instantiate_noexcept (tree, tsubst_flags_t = tf_warning_or_error);
extern tree instantiate_decl (tree, bool, bool);
extern int comp_template_parms (const_tree, const_tree);
extern bool template_heads_equivalent_p (const_tree, const_tree);
extern bool builtin_pack_fn_p (tree);
extern tree uses_parameter_packs (tree);
extern bool template_parameter_pack_p (const_tree);
extern bool function_parameter_pack_p (const_tree);
extern bool function_parameter_expanded_from_pack_p (tree, tree);
extern tree make_pack_expansion (tree, tsubst_flags_t = tf_warning_or_error);
extern bool check_for_bare_parameter_packs (tree, location_t = ((location_t) 0));
extern tree build_template_info (tree, tree);
extern tree get_template_info (const_tree);
extern int template_class_depth (tree);
extern int is_specialization_of (tree, tree);
extern bool is_specialization_of_friend (tree, tree);
extern tree get_pattern_parm (tree, tree);
extern int comp_template_args (tree, tree, tree * = nullptr,
       tree * = nullptr, bool = false);
extern int template_args_equal (tree, tree, bool = false);
extern tree maybe_process_partial_specialization (tree);
extern tree most_specialized_instantiation (tree);
extern tree most_specialized_partial_spec (tree, tsubst_flags_t);
extern void print_candidates (tree);
extern void instantiate_pending_templates (int);
extern tree tsubst_default_argument (tree, int, tree, tree,
       tsubst_flags_t);
extern tree tsubst (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_copy_and_build (tree, tree, tsubst_flags_t,
       tree, bool = false, bool = false);
extern tree tsubst_expr (tree, tree, tsubst_flags_t,
                                                 tree, bool);
extern tree tsubst_pack_expansion (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_argument_pack (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_template_args (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_template_arg (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_function_parms (tree, tree, tsubst_flags_t, tree);
extern tree most_general_template (tree);
extern tree get_mostly_instantiated_function_type (tree);
extern bool problematic_instantiation_changed (void);
extern void record_last_problematic_instantiation (void);
extern struct tinst_level *current_instantiation(void);
extern bool instantiating_current_function_p (void);
extern tree maybe_get_template_decl_from_type_decl (tree);
extern int processing_template_parmlist;
extern bool dependent_type_p (tree);
extern bool dependent_scope_p (tree);
extern bool any_dependent_template_arguments_p (const_tree);
extern bool any_erroneous_template_args_p (const_tree);
extern bool dependent_template_p (tree);
extern bool dependent_template_id_p (tree, tree);
extern bool type_dependent_expression_p (tree);
extern bool type_dependent_object_expression_p (tree);
extern bool any_type_dependent_arguments_p (const vec<tree, va_gc> *);
extern bool any_type_dependent_elements_p (const_tree);
extern bool type_dependent_expression_p_push (tree);
extern bool value_dependent_expression_p (tree);
extern bool instantiation_dependent_expression_p (tree);
extern bool instantiation_dependent_uneval_expression_p (tree);
extern bool any_value_dependent_elements_p (const_tree);
extern bool dependent_omp_for_p (tree, tree, tree, tree);
extern tree resolve_typename_type (tree, bool);
extern tree template_for_substitution (tree);
extern tree build_non_dependent_expr (tree);
extern void make_args_non_dependent (vec<tree, va_gc> *);
extern bool reregister_specialization (tree, tree, tree);
extern tree instantiate_non_dependent_expr (tree);
extern tree instantiate_non_dependent_expr_sfinae (tree, tsubst_flags_t);
extern tree instantiate_non_dependent_expr_internal (tree, tsubst_flags_t);
extern tree instantiate_non_dependent_or_null (tree);
extern bool variable_template_specialization_p (tree);
extern bool alias_type_or_template_p (tree);
enum { nt_opaque = false, nt_transparent = true };
extern tree alias_template_specialization_p (const_tree, bool);
extern tree dependent_alias_template_spec_p (const_tree, bool);
extern bool template_parm_object_p (const_tree);
extern tree tparm_object_argument (tree);
extern bool explicit_class_specialization_p (tree);
extern bool push_tinst_level (tree);
extern bool push_tinst_level_loc (tree, location_t);
extern void pop_tinst_level (void);
extern struct tinst_level *outermost_tinst_level(void);
extern void init_template_processing (void);
extern void print_template_statistics (void);
bool template_template_parameter_p (const_tree);
bool template_type_parameter_p (const_tree);
extern bool primary_template_specialization_p (const_tree);
extern tree get_primary_template_innermost_parameters (const_tree);
extern tree get_template_parms_at_level (tree, int);
extern tree get_template_innermost_arguments (const_tree);
extern tree get_template_argument_pack_elems (const_tree);
extern tree get_function_template_decl (const_tree);
extern tree resolve_nondeduced_context (tree, tsubst_flags_t);
extern tree resolve_nondeduced_context_or_error (tree, tsubst_flags_t);
extern hashval_t iterative_hash_template_arg (tree arg, hashval_t val);
extern tree coerce_template_parms (tree, tree, tree);
extern tree coerce_template_parms (tree, tree, tree, tsubst_flags_t);
extern tree canonicalize_type_argument (tree, tsubst_flags_t);
extern void register_local_specialization (tree, tree);
extern tree retrieve_local_specialization (tree);
extern tree extract_fnparm_pack (tree, tree *);
extern tree template_parm_to_arg (tree);
extern tree dguide_name (tree);
extern bool dguide_name_p (tree);
extern bool deduction_guide_p (const_tree);
extern bool copy_guide_p (const_tree);
extern bool template_guide_p (const_tree);
extern bool builtin_guide_p (const_tree);
extern void store_explicit_specifier (tree, tree);
extern tree add_outermost_template_args (tree, tree);



extern vec<tree, va_gc> *unemitted_tinfo_decls;

extern void init_rtti_processing (void);
extern tree build_typeid (tree, tsubst_flags_t);
extern tree get_tinfo_decl (tree);
extern tree get_typeid (tree, tsubst_flags_t);
extern tree build_headof (tree);
extern tree build_dynamic_cast (location_t, tree, tree,
       tsubst_flags_t);
extern void emit_support_tinfos (void);
extern bool emit_tinfo_decl (tree);


extern bool accessible_base_p (tree, tree, bool);
extern tree lookup_base (tree, tree, base_access,
       base_kind *, tsubst_flags_t);
extern tree dcast_base_hint (tree, tree);
extern int accessible_p (tree, tree, bool);
extern int accessible_in_template_p (tree, tree);
extern tree lookup_field (tree, tree, int, bool);
extern tree lookup_fnfields (tree, tree, int, tsubst_flags_t);
extern tree lookup_member (tree, tree, int, bool,
       tsubst_flags_t,
       access_failure_info *afi = nullptr);
extern tree lookup_member_fuzzy (tree, tree, bool);
extern tree locate_field_accessor (tree, tree, bool);
extern int look_for_overrides (tree, tree);
extern void get_pure_virtuals (tree);
extern void maybe_suppress_debug_info (tree);
extern void note_debug_info_needed (tree);
extern tree current_scope (void);
extern int at_function_scope_p (void);
extern bool at_class_scope_p (void);
extern bool at_namespace_scope_p (void);
extern tree context_for_name_lookup (tree);
extern tree lookup_conversions (tree);
extern tree binfo_from_vbase (tree);
extern tree binfo_for_vbase (tree, tree);
extern tree look_for_overrides_here (tree, tree);

extern tree dfs_walk_all (tree, tree (*) (tree, void *),
     tree (*) (tree, void *), void *);
extern tree dfs_walk_once (tree, tree (*) (tree, void *),
      tree (*) (tree, void *), void *);
extern tree binfo_via_virtual (tree, tree);
extern bool binfo_direct_p (tree);
extern tree build_baselink (tree, tree, tree, tree);
extern tree adjust_result_of_qualified_name_lookup
      (tree, tree, tree);
extern tree copied_binfo (tree, tree);
extern tree original_binfo (tree, tree);
extern int shared_member_p (tree);
extern bool any_dependent_bases_p (tree = current_nonlambda_class_type ());
extern bool maybe_check_overriding_exception_spec (tree, tree);


extern void push_deferring_access_checks (deferring_kind);
extern void resume_deferring_access_checks (void);
extern void stop_deferring_access_checks (void);
extern void pop_deferring_access_checks (void);
extern vec<deferred_access_check, va_gc> *get_deferred_access_checks (void);
extern void reopen_deferring_access_checks (vec<deferred_access_check, va_gc> *);
extern void pop_to_parent_deferring_access_checks (void);
extern bool perform_access_checks (vec<deferred_access_check, va_gc> *,
       tsubst_flags_t);
extern bool perform_deferred_access_checks (tsubst_flags_t);
extern bool perform_or_defer_access_check (tree, tree, tree,
       tsubst_flags_t,
       access_failure_info *afi = nullptr);




class deferring_access_check_sentinel
{
public:
  deferring_access_check_sentinel (enum deferring_kind kind = dk_deferred)
  {
    push_deferring_access_checks (kind);
  }
  ~deferring_access_check_sentinel ()
  {
    pop_deferring_access_checks ();
  }
};

extern int stmts_are_full_exprs_p (void);
extern void init_cp_semantics (void);
extern tree do_poplevel (tree);
extern void break_maybe_infinite_loop (void);
extern void add_decl_expr (tree);
extern tree maybe_cleanup_point_expr_void (tree);
extern tree finish_expr_stmt (tree);
extern tree begin_if_stmt (void);
extern tree finish_if_stmt_cond (tree, tree);
extern tree finish_then_clause (tree);
extern void begin_else_clause (tree);
extern void finish_else_clause (tree);
extern void finish_if_stmt (tree);
extern tree begin_while_stmt (void);
extern void finish_while_stmt_cond (tree, tree, bool, unsigned short);
extern void finish_while_stmt (tree);
extern tree begin_do_stmt (void);
extern void finish_do_body (tree);
extern void finish_do_stmt (tree, tree, bool, unsigned short);
extern tree finish_return_stmt (tree);
extern tree begin_for_scope (tree *);
extern tree begin_for_stmt (tree, tree);
extern void finish_init_stmt (tree);
extern void finish_for_cond (tree, tree, bool, unsigned short);
extern void finish_for_expr (tree, tree);
extern void finish_for_stmt (tree);
extern tree begin_range_for_stmt (tree, tree);
extern void finish_range_for_decl (tree, tree, tree);
extern void finish_range_for_stmt (tree);
extern tree finish_break_stmt (void);
extern tree finish_continue_stmt (void);
extern tree begin_switch_stmt (void);
extern void finish_switch_cond (tree, tree);
extern void finish_switch_stmt (tree);
extern tree finish_goto_stmt (tree);
extern tree begin_try_block (void);
extern void finish_try_block (tree);
extern void finish_handler_sequence (tree);
extern tree begin_function_try_block (tree *);
extern void finish_function_try_block (tree);
extern void finish_function_handler_sequence (tree, tree);
extern void finish_cleanup_try_block (tree);
extern tree begin_handler (void);
extern void finish_handler_parms (tree, tree);
extern void finish_handler (tree);
extern void finish_cleanup (tree, tree);
extern bool is_this_parameter (tree);

enum {
  BCS_NORMAL = 0,
  BCS_NO_SCOPE = 1,
  BCS_TRY_BLOCK = 2,
  BCS_FN_BODY = 4,
  BCS_TRANSACTION = 8
};
extern tree begin_compound_stmt (unsigned int);

extern void finish_compound_stmt (tree);
extern tree finish_asm_stmt (location_t, int, tree, tree,
       tree, tree, tree, bool);
extern tree finish_label_stmt (tree);
extern void finish_label_decl (tree);
extern cp_expr finish_parenthesized_expr (cp_expr);
extern tree force_paren_expr (tree, bool = false);
inline tree force_paren_expr_uneval (tree t)
{ return force_paren_expr (t, true); }
extern tree maybe_undo_parenthesized_ref (tree);
extern tree maybe_strip_ref_conversion (tree);
extern tree finish_non_static_data_member (tree, tree, tree);
extern tree begin_stmt_expr (void);
extern tree finish_stmt_expr_expr (tree, tree);
extern tree finish_stmt_expr (tree, bool);
extern tree stmt_expr_value_expr (tree);
bool empty_expr_stmt_p (tree);
extern cp_expr perform_koenig_lookup (cp_expr, vec<tree, va_gc> *,
       tsubst_flags_t);
extern tree finish_call_expr (tree, vec<tree, va_gc> **, bool,
       bool, tsubst_flags_t);
extern tree lookup_and_finish_template_variable (tree, tree, tsubst_flags_t = tf_warning_or_error);
extern tree finish_template_variable (tree, tsubst_flags_t = tf_warning_or_error);
extern cp_expr finish_increment_expr (cp_expr, enum tree_code);
extern tree finish_this_expr (void);
extern tree finish_pseudo_destructor_expr (tree, tree, tree, location_t);
extern cp_expr finish_unary_op_expr (location_t, enum tree_code, cp_expr,
       tsubst_flags_t);


enum fcl_t { fcl_functional, fcl_c99 };
extern tree finish_compound_literal (tree, tree, tsubst_flags_t, fcl_t = fcl_functional);
extern tree finish_fname (tree);
extern void finish_translation_unit (void);
extern tree finish_template_type_parm (tree, tree);
extern tree finish_template_template_parm (tree, tree);
extern tree begin_class_definition (tree);
extern void finish_template_decl (tree);
extern tree finish_template_type (tree, tree, int);
extern tree finish_base_specifier (tree, tree, bool);
extern void finish_member_declaration (tree);
extern bool outer_automatic_var_p (tree);
extern tree process_outer_var_ref (tree, tsubst_flags_t, bool force_use = false);
extern cp_expr finish_id_expression (tree, tree, tree,
       cp_id_kind *,
       bool, bool, bool *,
       bool, bool, bool, bool,
       const char **,
                                                 location_t);
extern tree finish_typeof (tree);
extern tree finish_underlying_type (tree);
extern tree calculate_bases (tree, tsubst_flags_t);
extern tree finish_bases (tree, bool);
extern tree calculate_direct_bases (tree, tsubst_flags_t);
extern tree finish_offsetof (tree, tree, location_t);
extern void finish_decl_cleanup (tree, tree);
extern void finish_eh_cleanup (tree);
extern void emit_associated_thunks (tree);
extern void finish_mem_initializers (tree);
extern tree check_template_template_default_arg (tree);
extern bool expand_or_defer_fn_1 (tree);
extern void expand_or_defer_fn (tree);
extern bool check_accessibility_of_qualified_id (tree, tree, tree, tsubst_flags_t);
extern tree finish_qualified_id_expr (tree, tree, bool, bool,
       bool, bool, tsubst_flags_t);
extern void simplify_aggr_init_expr (tree *);
extern void finalize_nrv (tree *, tree, tree);
extern tree omp_reduction_id (enum tree_code, tree, tree);
extern tree cp_remove_omp_priv_cleanup_stmt (tree *, int *, void *);
extern void cp_check_omp_declare_reduction (tree);
extern void finish_omp_declare_simd_methods (tree);
extern tree finish_omp_clauses (tree, enum c_omp_region_type);
extern tree push_omp_privatization_clauses (bool);
extern void pop_omp_privatization_clauses (tree);
extern void save_omp_privatization_clauses (vec<tree> &);
extern void restore_omp_privatization_clauses (vec<tree> &);
extern void finish_omp_threadprivate (tree);
extern tree begin_omp_structured_block (void);
extern tree finish_omp_structured_block (tree);
extern tree finish_oacc_data (tree, tree);
extern tree finish_oacc_host_data (tree, tree);
extern tree finish_omp_construct (enum tree_code, tree, tree);
extern tree begin_omp_parallel (void);
extern tree finish_omp_parallel (tree, tree);
extern tree begin_omp_task (void);
extern tree finish_omp_task (tree, tree);
extern tree finish_omp_for (location_t, enum tree_code,
       tree, tree, tree, tree, tree,
       tree, tree, vec<tree> *, tree);
extern tree finish_omp_for_block (tree, tree);
extern void finish_omp_atomic (location_t, enum tree_code,
       enum tree_code, tree, tree,
       tree, tree, tree, tree,
       enum omp_memory_order);
extern void finish_omp_barrier (void);
extern void finish_omp_depobj (location_t, tree,
       enum omp_clause_depend_kind,
       tree);
extern void finish_omp_flush (int);
extern void finish_omp_taskwait (void);
extern void finish_omp_taskyield (void);
extern void finish_omp_cancel (tree);
extern void finish_omp_cancellation_point (tree);
extern tree omp_privatize_field (tree, bool);
extern tree begin_transaction_stmt (location_t, tree *, int);
extern void finish_transaction_stmt (tree, tree, int, tree);
extern tree build_transaction_expr (location_t, tree, int, tree);
extern bool cxx_omp_create_clause_info (tree, tree, bool, bool,
       bool, bool);
extern tree baselink_for_fns (tree);
extern void finish_static_assert (tree, tree, location_t,
                                                 bool);
extern tree finish_decltype_type (tree, bool, tsubst_flags_t);
extern tree finish_trait_expr (location_t, enum cp_trait_kind, tree, tree);
extern tree build_lambda_expr (void);
extern tree build_lambda_object (tree);
extern tree begin_lambda_type (tree);
extern tree lambda_capture_field_type (tree, bool, bool);
extern tree lambda_return_type (tree);
extern tree lambda_proxy_type (tree);
extern tree lambda_function (tree);
extern void apply_deduced_return_type (tree, tree);
extern tree add_capture (tree, tree, tree, bool, bool);
extern tree add_default_capture (tree, tree, tree);
extern void insert_capture_proxy (tree);
extern void insert_pending_capture_proxies (void);
extern bool is_capture_proxy (tree);
extern bool is_normal_capture_proxy (tree);
extern bool is_constant_capture_proxy (tree);
extern void register_capture_members (tree);
extern tree lambda_expr_this_capture (tree, int);
extern void maybe_generic_this_capture (tree, tree);
extern tree maybe_resolve_dummy (tree, bool);
extern tree current_nonlambda_function (void);
extern tree nonlambda_method_basetype (void);
extern tree current_nonlambda_scope (void);
extern tree current_lambda_expr (void);
extern bool generic_lambda_fn_p (tree);
extern tree do_dependent_capture (tree, bool = false);
extern bool lambda_fn_in_template_p (tree);
extern void maybe_add_lambda_conv_op (tree);
extern bool is_lambda_ignored_entity (tree);
extern bool lambda_static_thunk_p (tree);
extern tree finish_builtin_launder (location_t, tree,
       tsubst_flags_t);
extern tree cp_build_vec_convert (tree, location_t, tree,
       tsubst_flags_t);
extern void start_lambda_scope (tree);
extern void record_lambda_scope (tree);
extern void record_null_lambda_scope (tree);
extern void finish_lambda_scope (void);
extern tree start_lambda_function (tree fn, tree lambda_expr);
extern void finish_lambda_function (tree body);


extern int cp_tree_operand_length (const_tree);
extern int cp_tree_code_length (enum tree_code);
extern void cp_free_lang_data (tree t);
extern tree force_target_expr (tree, tree, tsubst_flags_t);
extern tree build_target_expr_with_type (tree, tree, tsubst_flags_t);
extern void lang_check_failed (const char *, int,
       const char *) __attribute__ ((__noreturn__))
       __attribute__ ((__cold__));
extern tree stabilize_expr (tree, tree *);
extern void stabilize_call (tree, tree *);
extern bool stabilize_init (tree, tree *);
extern tree add_stmt_to_compound (tree, tree);
extern void init_tree (void);
extern bool pod_type_p (const_tree);
extern bool layout_pod_type_p (const_tree);
extern bool std_layout_type_p (const_tree);
extern bool trivial_type_p (const_tree);
extern bool trivially_copyable_p (const_tree);
extern bool type_has_unique_obj_representations (const_tree);
extern bool scalarish_type_p (const_tree);
extern bool structural_type_p (tree, bool = false);
extern bool type_has_nontrivial_default_init (const_tree);
extern bool type_has_nontrivial_copy_init (const_tree);
extern void maybe_warn_parm_abi (tree, location_t);
extern bool class_tmpl_impl_spec_p (const_tree);
extern int zero_init_p (const_tree);
extern bool zero_init_expr_p (tree);
extern bool check_abi_tag_redeclaration (const_tree, const_tree,
       const_tree);
extern bool check_abi_tag_args (tree, tree);
extern tree strip_typedefs (tree, bool * = nullptr,
       unsigned int = 0);
extern tree strip_typedefs_expr (tree, bool * = nullptr,
       unsigned int = 0);
extern tree copy_binfo (tree, tree, tree,
       tree *, int);
extern int member_p (const_tree);
extern cp_lvalue_kind real_lvalue_p (const_tree);
extern cp_lvalue_kind lvalue_kind (const_tree);
extern bool glvalue_p (const_tree);
extern bool obvalue_p (const_tree);
extern bool xvalue_p (const_tree);
extern bool bitfield_p (const_tree);
extern tree cp_stabilize_reference (tree);
extern bool builtin_valid_in_constant_expr_p (const_tree);
extern tree build_min (enum tree_code, tree, ...);
extern tree build_min_nt_loc (location_t, enum tree_code,
       ...);
extern tree build_min_non_dep (enum tree_code, tree, ...);
extern tree build_min_non_dep_op_overload (enum tree_code, tree, tree, ...);
extern tree build_min_nt_call_vec (tree, vec<tree, va_gc> *);
extern tree build_min_non_dep_call_vec (tree, tree, vec<tree, va_gc> *);
extern vec<tree, va_gc>* vec_copy_and_insert (vec<tree, va_gc>*, tree, unsigned);
extern tree build_cplus_new (tree, tree, tsubst_flags_t);
extern tree build_local_temp (tree);
extern bool is_local_temp (tree);
extern tree build_aggr_init_expr (tree, tree);
extern tree get_target_expr (tree);
extern tree get_target_expr_sfinae (tree, tsubst_flags_t);
extern tree build_cplus_array_type (tree, tree);
extern tree build_array_of_n_type (tree, int);
extern bool array_of_runtime_bound_p (tree);
extern bool vla_type_p (tree);
extern tree build_array_copy (tree);
extern tree build_vec_init_expr (tree, tree, tsubst_flags_t);
extern void diagnose_non_constexpr_vec_init (tree);
extern tree hash_tree_cons (tree, tree, tree);
extern tree hash_tree_chain (tree, tree);
extern tree build_qualified_name (tree, tree, tree, bool);
extern tree build_ref_qualified_type (tree, cp_ref_qualifier);
inline tree ovl_first (tree) __attribute__ ((__pure__));
extern tree ovl_make (tree fn,
       tree next = (tree) nullptr);
extern tree ovl_insert (tree fn, tree maybe_ovl,
       bool using_p = false);
extern tree ovl_skip_hidden (tree) __attribute__ ((__pure__));
extern void lookup_mark (tree lookup, bool val);
extern tree lookup_add (tree fns, tree lookup);
extern tree lookup_maybe_add (tree fns, tree lookup,
       bool deduping);
extern int is_overloaded_fn (tree) __attribute__ ((__pure__));
extern bool really_overloaded_fn (tree) __attribute__ ((__pure__));
extern tree dependent_name (tree);
extern tree maybe_get_fns (tree) __attribute__ ((__pure__));
extern tree get_fns (tree) __attribute__ ((__pure__));
extern tree get_first_fn (tree) __attribute__ ((__pure__));
extern tree ovl_scope (tree);
extern const char *cxx_printable_name (tree, int);
extern const char *cxx_printable_name_translate (tree, int);
extern tree canonical_eh_spec (tree);
extern tree build_cp_fntype_variant (tree, cp_ref_qualifier, tree, bool);
extern tree build_exception_variant (tree, tree);
extern tree bind_template_template_parm (tree, tree);
extern tree array_type_nelts_total (tree);
extern tree array_type_nelts_top (tree);
extern bool array_of_unknown_bound_p (const_tree);
extern tree break_out_target_exprs (tree, bool = false);
extern tree build_ctor_subob_ref (tree, tree, tree);
extern tree replace_placeholders (tree, tree, bool * = nullptr);
extern bool find_placeholders (tree);
extern tree get_type_decl (tree);
extern tree decl_namespace_context (tree);
extern bool decl_anon_ns_mem_p (const_tree);
extern tree lvalue_type (tree);
extern tree error_type (tree);
extern int varargs_function_p (const_tree);
extern bool cp_tree_equal (tree, tree);
extern tree no_linkage_check (tree, bool);
extern void debug_binfo (tree);
extern tree build_dummy_object (tree);
extern tree maybe_dummy_object (tree, tree *);
extern bool is_dummy_object (const_tree);
extern bool is_byte_access_type (tree);
extern const struct attribute_spec cxx_attribute_table[];
extern tree make_ptrmem_cst (tree, tree);
extern tree cp_build_type_attribute_variant (tree, tree);
extern tree cp_build_reference_type (tree, bool);
extern tree move (tree);
extern tree cp_build_qualified_type_real (tree, int, tsubst_flags_t);


extern bool cv_qualified_p (const_tree);
extern tree cv_unqualified (tree);
extern special_function_kind special_function_p (const_tree);
extern special_function_kind special_memfn_p (const_tree);
extern int count_trees (tree);
extern int char_type_p (tree);
extern void verify_stmt_tree (tree);
extern linkage_kind decl_linkage (tree);
extern duration_kind decl_storage_duration (tree);
extern tree cp_walk_subtrees (tree*, int*, walk_tree_fn,
         void*, hash_set<tree> *);




extern tree rvalue (tree);
extern tree convert_bitfield_to_declared_type (tree);
extern tree cp_save_expr (tree);
extern bool cast_valid_in_integral_constant_expression_p (tree);
extern bool cxx_type_hash_eq (const_tree, const_tree);
extern tree cxx_copy_lang_qualifiers (const_tree, const_tree);

extern void cxx_print_statistics (void);
extern bool maybe_warn_zero_as_null_pointer_constant (tree, location_t);


extern void cxx_print_xnode (FILE *, tree, int);
extern void cxx_print_decl (FILE *, tree, int);
extern void cxx_print_type (FILE *, tree, int);
extern void cxx_print_identifier (FILE *, tree, int);
extern void cxx_print_error_function (diagnostic_context *,
       const char *,
       struct diagnostic_info *);




enum compare_bounds_t { bounds_none, bounds_either, bounds_first };

extern bool cxx_mark_addressable (tree, bool = false);
extern int string_conv_p (const_tree, const_tree, int);
extern tree cp_truthvalue_conversion (tree, tsubst_flags_t);
extern tree contextual_conv_bool (tree, tsubst_flags_t);
extern tree condition_conversion (tree);
extern tree require_complete_type (tree);
extern tree require_complete_type_sfinae (tree, tsubst_flags_t);
extern tree complete_type (tree);
extern tree complete_type_or_else (tree, tree);
extern tree complete_type_or_maybe_complain (tree, tree, tsubst_flags_t);
inline bool type_unknown_p (const_tree);
enum { ce_derived, ce_type, ce_normal, ce_exact };
extern bool comp_except_specs (const_tree, const_tree, int);
extern bool comptypes (tree, tree, int);
extern bool same_type_ignoring_top_level_qualifiers_p (tree, tree);
extern bool similar_type_p (tree, tree);
extern bool compparms (const_tree, const_tree);
extern int comp_cv_qualification (const_tree, const_tree);
extern int comp_cv_qualification (int, int);
extern int comp_cv_qual_signature (tree, tree);
extern tree cxx_sizeof_or_alignof_expr (location_t, tree,
       enum tree_code, bool);
extern tree cxx_sizeof_or_alignof_type (location_t, tree,
       enum tree_code, bool, bool);
extern tree cxx_alignas_expr (tree);
extern tree cxx_sizeof_nowarn (tree);
extern tree is_bitfield_expr_with_lowered_type (const_tree);
extern tree unlowered_expr_type (const_tree);
extern tree decay_conversion (tree,
                                                 tsubst_flags_t,
                                                 bool = true);
extern tree build_class_member_access_expr (cp_expr, tree, tree, bool,
       tsubst_flags_t);
extern tree finish_class_member_access_expr (cp_expr, tree, bool,
       tsubst_flags_t);
extern tree lookup_destructor (tree, tree, tree, tsubst_flags_t);
extern tree build_x_indirect_ref (location_t, tree,
       ref_operator,
       tsubst_flags_t);
extern tree cp_build_indirect_ref (location_t, tree,
       ref_operator,
       tsubst_flags_t);
extern tree cp_build_fold_indirect_ref (tree);
extern tree build_array_ref (location_t, tree, tree);
extern tree cp_build_array_ref (location_t, tree, tree,
       tsubst_flags_t);
extern tree get_member_function_from_ptrfunc (tree *, tree, tsubst_flags_t);
extern tree cp_build_function_call_nary (tree, tsubst_flags_t, ...)
      __attribute__ ((__sentinel__));
extern tree cp_build_function_call_vec (tree, vec<tree, va_gc> **,
       tsubst_flags_t,
       tree = (tree) nullptr);
extern tree build_x_binary_op (const op_location_t &,
       enum tree_code, tree,
       enum tree_code, tree,
       enum tree_code, tree *,
       tsubst_flags_t);
inline tree build_x_binary_op (const op_location_t &loc,
          enum tree_code code, tree arg1, tree arg2,
          tsubst_flags_t complain)
{
  return build_x_binary_op (loc, code, arg1, ((enum tree_code) (arg1)->base.code), arg2,
       ((enum tree_code) (arg2)->base.code), nullptr, complain);
}
extern tree build_x_array_ref (location_t, tree, tree,
       tsubst_flags_t);
extern tree build_x_unary_op (location_t,
       enum tree_code, cp_expr,
                                                 tsubst_flags_t);
extern tree cp_build_addressof (location_t, tree,
       tsubst_flags_t);
extern tree cp_build_addr_expr (tree, tsubst_flags_t);
extern tree cp_build_unary_op (enum tree_code, tree, bool,
                                                 tsubst_flags_t);
extern tree genericize_compound_lvalue (tree);
extern tree unary_complex_lvalue (enum tree_code, tree);
extern tree build_x_conditional_expr (location_t, tree, tree, tree,
                                                 tsubst_flags_t);
extern tree build_x_compound_expr_from_list (tree, expr_list_kind,
       tsubst_flags_t);
extern tree build_x_compound_expr_from_vec (vec<tree, va_gc> *,
       const char *, tsubst_flags_t);
extern tree build_x_compound_expr (location_t, tree, tree,
       tsubst_flags_t);
extern tree build_compound_expr (location_t, tree, tree);
extern tree cp_build_compound_expr (tree, tree, tsubst_flags_t);
extern tree build_static_cast (location_t, tree, tree,
       tsubst_flags_t);
extern tree build_reinterpret_cast (location_t, tree, tree,
       tsubst_flags_t);
extern tree build_const_cast (location_t, tree, tree,
       tsubst_flags_t);
extern tree build_c_cast (location_t, tree, tree);
extern cp_expr build_c_cast (location_t loc, tree type,
       cp_expr expr);
extern tree cp_build_c_cast (location_t, tree, tree,
       tsubst_flags_t);
extern cp_expr build_x_modify_expr (location_t, tree,
       enum tree_code, tree,
       tsubst_flags_t);
extern tree cp_build_modify_expr (location_t, tree,
       enum tree_code, tree,
       tsubst_flags_t);
extern tree convert_for_initialization (tree, tree, tree, int,
       impl_conv_rhs, tree, int,
                                                 tsubst_flags_t);
extern int comp_ptr_ttypes (tree, tree);
extern bool comp_ptr_ttypes_const (tree, tree, compare_bounds_t);
extern bool error_type_p (const_tree);
extern bool ptr_reasonably_similar (const_tree, const_tree);
extern tree build_ptrmemfunc (tree, tree, int, bool,
       tsubst_flags_t);
extern int cp_type_quals (const_tree);
extern int type_memfn_quals (const_tree);
extern cp_ref_qualifier type_memfn_rqual (const_tree);
extern tree apply_memfn_quals (tree, cp_cv_quals,
       cp_ref_qualifier = REF_QUAL_NONE);
extern bool cp_has_mutable_p (const_tree);
extern bool at_least_as_qualified_p (const_tree, const_tree);
extern void cp_apply_type_quals_to_decl (int, tree);
extern tree build_ptrmemfunc1 (tree, tree, tree);
extern void expand_ptrmemfunc_cst (tree, tree *, tree *);
extern tree type_after_usual_arithmetic_conversions (tree, tree);
extern tree common_pointer_type (tree, tree);
extern tree composite_pointer_type (const op_location_t &,
       tree, tree, tree, tree,
       composite_pointer_operation,
       tsubst_flags_t);
extern tree merge_types (tree, tree);
extern tree strip_array_domain (tree);
extern tree check_return_expr (tree, bool *);
extern tree spaceship_type (tree, tsubst_flags_t = tf_warning_or_error);
extern tree genericize_spaceship (tree, tree, tree);
extern tree cp_build_binary_op (const op_location_t &,
       enum tree_code, tree, tree,
       tsubst_flags_t);
extern tree build_x_vec_perm_expr (location_t,
       tree, tree, tree,
       tsubst_flags_t);

extern tree build_simple_component_ref (tree, tree);
extern tree build_ptrmemfunc_access_expr (tree, tree);
extern tree build_address (tree);
extern tree build_nop (tree, tree);
extern tree non_reference (tree);
extern tree lookup_anon_field (tree, tree);
extern bool invalid_nonstatic_memfn_p (location_t, tree,
       tsubst_flags_t);
extern tree convert_member_func_to_ptr (tree, tree, tsubst_flags_t);
extern tree convert_ptrmem (tree, tree, bool, bool,
       tsubst_flags_t);
extern int lvalue_or_else (tree, enum lvalue_use,
                                                 tsubst_flags_t);
extern void check_template_keyword (tree);
extern bool check_raw_literal_operator (const_tree decl);
extern bool check_literal_operator_args (const_tree, bool *, bool *);
extern void maybe_warn_about_useless_cast (location_t, tree, tree,
       tsubst_flags_t);
extern tree cp_perform_integral_promotions (tree, tsubst_flags_t);

extern tree finish_left_unary_fold_expr (tree, int);
extern tree finish_right_unary_fold_expr (tree, int);
extern tree finish_binary_fold_expr (tree, tree, int);
extern tree treat_lvalue_as_rvalue_p (tree, bool);
extern bool decl_in_std_namespace_p (tree);


extern void require_complete_eh_spec_types (tree, tree);
extern void cxx_incomplete_type_diagnostic (location_t, const_tree,
       const_tree, diagnostic_t);

inline location_t
cp_expr_loc_or_loc (const_tree t, location_t or_loc)
{
  location_t loc = cp_expr_location (t);
  if (loc == ((location_t) 0))
    loc = or_loc;
  return loc;
}

inline location_t
cp_expr_loc_or_input_loc (const_tree t)
{
  return cp_expr_loc_or_loc (t, input_location);
}

inline void
cxx_incomplete_type_diagnostic (const_tree value, const_tree type,
    diagnostic_t diag_kind)
{
  cxx_incomplete_type_diagnostic (cp_expr_loc_or_input_loc (value),
      value, type, diag_kind);
}

extern void cxx_incomplete_type_error (location_t, const_tree,
       const_tree);
inline void
cxx_incomplete_type_error (const_tree value, const_tree type)
{
  cxx_incomplete_type_diagnostic (value, type, DK_ERROR);
}

extern void cxx_incomplete_type_inform (const_tree);
extern tree error_not_base_type (tree, tree);
extern tree binfo_or_else (tree, tree);
extern void cxx_readonly_error (location_t, tree,
       enum lvalue_use);
extern void complete_type_check_abstract (tree);
extern int abstract_virtuals_error (tree, tree);
extern int abstract_virtuals_error (abstract_class_use, tree);
extern int abstract_virtuals_error_sfinae (tree, tree, tsubst_flags_t);
extern int abstract_virtuals_error_sfinae (abstract_class_use, tree, tsubst_flags_t);

extern tree store_init_value (tree, tree, vec<tree, va_gc>**, int);
extern tree split_nonconstant_init (tree, tree);
extern bool check_narrowing (tree, tree, tsubst_flags_t,
       bool = false);
extern bool ordinary_char_type_p (tree);
extern tree digest_init (tree, tree, tsubst_flags_t);
extern tree digest_init_flags (tree, tree, int, tsubst_flags_t);
extern tree digest_nsdmi_init (tree, tree, tsubst_flags_t);
extern tree build_scoped_ref (tree, tree, tree *);
extern tree build_x_arrow (location_t, tree,
       tsubst_flags_t);
extern tree build_m_component_ref (tree, tree, tsubst_flags_t);
extern tree build_functional_cast (location_t, tree, tree,
       tsubst_flags_t);
extern tree add_exception_specifier (tree, tree, tsubst_flags_t);
extern tree merge_exception_specifiers (tree, tree);


extern void init_mangle (void);
extern void mangle_decl (tree);
extern const char *mangle_type_string (tree);
extern tree mangle_typeinfo_for_type (tree);
extern tree mangle_typeinfo_string_for_type (tree);
extern tree mangle_vtbl_for_type (tree);
extern tree mangle_vtt_for_type (tree);
extern tree mangle_ctor_vtbl_for_type (tree, tree);
extern tree mangle_thunk (tree, int, tree, tree, tree);
extern tree mangle_guard_variable (tree);
extern tree mangle_tls_init_fn (tree);
extern tree mangle_tls_wrapper_fn (tree);
extern bool decl_tls_wrapper_p (tree);
extern tree mangle_ref_init_variable (tree);
extern tree mangle_template_parm_object (tree);
extern char *get_mangled_vtable_map_var_name (tree);
extern bool mangle_return_type_p (tree);
extern tree mangle_decomp (tree, vec<tree> &);


extern bool cp_dump_tree (void *, tree);



extern alias_set_type cxx_get_alias_set (tree);
extern bool cxx_warn_unused_global_decl (const_tree);
extern size_t cp_tree_size (enum tree_code);
extern bool cp_var_mod_type_p (tree, tree);
extern void cxx_initialize_diagnostics (diagnostic_context *);
extern int cxx_types_compatible_p (tree, tree);
extern bool cxx_block_may_fallthru (const_tree);


extern int cp_gimplify_expr (tree *, gimple_seq *,
       gimple_seq *);
extern void cp_genericize (tree);
extern bool cxx_omp_const_qual_no_mutable (tree);
extern enum omp_clause_default_kind cxx_omp_predetermined_sharing_1 (tree);
extern enum omp_clause_default_kind cxx_omp_predetermined_sharing (tree);
extern enum omp_clause_defaultmap_kind cxx_omp_predetermined_mapping (tree);
extern tree cxx_omp_clause_default_ctor (tree, tree, tree);
extern tree cxx_omp_clause_copy_ctor (tree, tree, tree);
extern tree cxx_omp_clause_assign_op (tree, tree, tree);
extern tree cxx_omp_clause_dtor (tree, tree);
extern void cxx_omp_finish_clause (tree, gimple_seq *);
extern bool cxx_omp_privatize_by_reference (const_tree);
extern bool cxx_omp_disregard_value_expr (tree, bool);
extern void cp_fold_function (tree);
extern tree cp_fold_maybe_rvalue (tree, bool);
extern tree cp_fold_rvalue (tree);
extern tree cp_fully_fold (tree);
extern tree cp_fully_fold_init (tree);
extern tree predeclare_vla (tree);
extern void clear_fold_cache (void);
extern tree lookup_hotness_attribute (tree);
extern tree process_stmt_hotness_attribute (tree, location_t);
extern bool simple_empty_class_p (tree, tree, tree_code);
extern tree fold_builtin_source_location (location_t);


extern tree strip_using_decl (tree);



enum cp_oracle_request
{
  CP_ORACLE_IDENTIFIER
};
# 7785 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h"
typedef void cp_binding_oracle_function (enum cp_oracle_request, tree identifier);

extern cp_binding_oracle_function *cp_binding_oracle;





extern tree current_failed_constraint;



struct diagnosing_failed_constraint
{
  diagnosing_failed_constraint (tree, tree, bool);
  ~diagnosing_failed_constraint ();
  static bool replay_errors_p ();

  bool diagnosing_error;
};



extern cp_expr finish_constraint_or_expr (location_t, cp_expr, cp_expr);
extern cp_expr finish_constraint_and_expr (location_t, cp_expr, cp_expr);
extern cp_expr finish_constraint_primary_expr (cp_expr);
extern tree finish_concept_definition (cp_expr, tree);
extern tree combine_constraint_expressions (tree, tree);
extern tree append_constraint (tree, tree);
extern tree get_constraints (const_tree);
extern void set_constraints (tree, tree);
extern void remove_constraints (tree);
extern tree current_template_constraints (void);
extern tree associate_classtype_constraints (tree);
extern tree build_constraints (tree, tree);
extern tree maybe_substitute_reqs_for (tree, const_tree);
extern tree get_template_head_requirements (tree);
extern tree get_trailing_function_requirements (tree);
extern tree get_shorthand_constraints (tree);

extern tree build_concept_id (tree);
extern tree build_type_constraint (tree, tree, tsubst_flags_t);
extern tree build_concept_check (tree, tree, tsubst_flags_t);
extern tree build_concept_check (tree, tree, tree, tsubst_flags_t);

extern tree_pair finish_type_constraints (tree, tree, tsubst_flags_t);
extern tree build_constrained_parameter (tree, tree, tree = (tree) nullptr);
extern void placeholder_extract_concept_and_args (tree, tree&, tree&);
extern bool equivalent_placeholder_constraints (tree, tree);
extern hashval_t hash_placeholder_constraint (tree);
extern bool deduce_constrained_parameter (tree, tree&, tree&);
extern tree resolve_constraint_check (tree);
extern tree check_function_concept (tree);
extern tree finish_template_introduction (tree, tree, location_t loc);
extern bool valid_requirements_p (tree);
extern tree finish_concept_name (tree);
extern tree finish_shorthand_constraint (tree, tree);
extern tree finish_requires_expr (location_t, tree, tree);
extern tree finish_simple_requirement (location_t, tree);
extern tree finish_type_requirement (location_t, tree);
extern tree finish_compound_requirement (location_t, tree, tree, bool);
extern tree finish_nested_requirement (location_t, tree);
extern void check_constrained_friend (tree, tree);
extern tree tsubst_requires_expr (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_constraint (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_constraint_info (tree, tree, tsubst_flags_t, tree);
extern tree tsubst_parameter_mapping (tree, tree, tsubst_flags_t, tree);
extern tree get_mapped_args (tree);

struct processing_constraint_expression_sentinel
{
  processing_constraint_expression_sentinel ();
  ~processing_constraint_expression_sentinel ();
};

extern bool processing_constraint_expression_p ();

extern tree unpack_concept_check (tree);
extern tree evaluate_concept_check (tree, tsubst_flags_t);
extern tree satisfy_constraint_expression (tree);
extern bool constraints_satisfied_p (tree);
extern bool constraints_satisfied_p (tree, tree);
extern void clear_satisfaction_cache ();
extern bool* lookup_subsumption_result (tree, tree);
extern bool save_subsumption_result (tree, tree, bool);
extern tree find_template_parameters (tree, tree);
extern bool equivalent_constraints (tree, tree);
extern bool equivalently_constrained (tree, tree);
extern bool subsumes_constraints (tree, tree);
extern bool strictly_subsumes (tree, tree, tree);
extern bool weakly_subsumes (tree, tree, tree);
extern int more_constrained (tree, tree);
extern bool at_least_as_constrained (tree, tree);
extern bool constraints_equivalent_p (tree, tree);
extern bool atomic_constraints_identical_p (tree, tree);
extern hashval_t iterative_hash_constraint (tree, hashval_t);
extern hashval_t hash_atomic_constraint (tree);
extern void diagnose_constraints (location_t, tree, tree);


extern bool subsumes (tree, tree);


extern void cp_finish_injected_record_type (tree);


extern void vtv_compute_class_hierarchy_transitive_closure (void);
extern void vtv_generate_init_routine (void);
extern void vtv_save_class_info (tree);
extern void vtv_recover_class_info (void);
extern void vtv_build_vtable_verify_fndecl (void);


extern void fini_constexpr (void);
extern bool literal_type_p (tree);
extern tree register_constexpr_fundef (tree, tree);
extern bool is_valid_constexpr_fn (tree, bool);
extern bool check_constexpr_ctor_body (tree, tree, bool);
extern tree constexpr_fn_retval (tree);
extern tree ensure_literal_type_for_constexpr_object (tree);
extern bool potential_constant_expression (tree);
extern bool is_constant_expression (tree);
extern bool is_rvalue_constant_expression (tree);
extern bool is_nondependent_constant_expression (tree);
extern bool is_nondependent_static_init_expression (tree);
extern bool is_static_init_expression (tree);
extern bool potential_rvalue_constant_expression (tree);
extern bool require_potential_constant_expression (tree);
extern bool require_constant_expression (tree);
extern bool require_rvalue_constant_expression (tree);
extern bool require_potential_rvalue_constant_expression (tree);
extern tree cxx_constant_value (tree, tree = (tree) nullptr);
extern void cxx_constant_dtor (tree, tree);
extern tree cxx_constant_init (tree, tree = (tree) nullptr);
extern tree maybe_constant_value (tree, tree = (tree) nullptr, bool = false);
extern tree maybe_constant_init (tree, tree = (tree) nullptr, bool = false);
extern tree fold_non_dependent_expr (tree,
       tsubst_flags_t = tf_warning_or_error,
       bool = false, tree = (tree) nullptr);
extern tree maybe_fold_non_dependent_expr (tree,
       tsubst_flags_t = tf_warning_or_error);
extern tree fold_non_dependent_init (tree,
       tsubst_flags_t = tf_warning_or_error,
       bool = false);
extern tree fold_simple (tree);
extern bool reduced_constant_expression_p (tree);
extern bool is_instantiation_of_constexpr (tree);
extern bool var_in_constexpr_fn (tree);
extern bool var_in_maybe_constexpr_fn (tree);
extern void explain_invalid_constexpr_fn (tree);
extern vec<tree> cx_error_context (void);
extern tree fold_sizeof_expr (tree);
extern void clear_cv_and_fold_caches (bool = true);
extern tree unshare_constructor (tree );




struct uid_sensitive_constexpr_evaluation_sentinel
{
  temp_override<bool> ovr;
  uid_sensitive_constexpr_evaluation_sentinel ();
};






struct uid_sensitive_constexpr_evaluation_checker
{
  const unsigned saved_counter;
  uid_sensitive_constexpr_evaluation_checker ();
  bool evaluation_restricted_p () const;
};


extern void cp_ubsan_maybe_instrument_member_call (tree);
extern void cp_ubsan_instrument_member_accesses (tree *);
extern tree cp_ubsan_maybe_instrument_downcast (location_t, tree, tree, tree);
extern tree cp_ubsan_maybe_instrument_cast_to_vbase (location_t, tree, tree);
extern void cp_ubsan_maybe_initialize_vtbl_ptrs (tree);


extern tree finish_co_return_stmt (location_t, tree);
extern tree finish_co_await_expr (location_t, tree);
extern tree finish_co_yield_expr (location_t, tree);
extern tree coro_validate_builtin_call (tree,
       tsubst_flags_t = tf_warning_or_error);
extern bool morph_fn_to_coro (tree, tree *, tree *);



inline tree
ovl_first (tree node)
{
  while (((enum tree_code) (node)->base.code) == OVERLOAD)
    node = (((struct tree_overload*)(tree_check ((node), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 7982, __FUNCTION__, (OVERLOAD))))->function);
  return node;
}

inline bool
type_unknown_p (const_tree expr)
{
  return ((contains_struct_check ((expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 7989, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_UNKNOWN_TYPE];
}

inline hashval_t
named_decl_hash::hash (const value_type decl)
{
  tree name = ((contains_struct_check ((ovl_first (decl)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 7995, __FUNCTION__))->decl_minimal.name);
  return name ? ((tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 7996, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.hash_value) : 0;
}

inline bool
named_decl_hash::equal (const value_type existing, compare_type candidate)
{
  tree name = ((contains_struct_check ((ovl_first (existing)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8002, __FUNCTION__))->decl_minimal.name);
  return candidate == name;
}

inline bool
null_node_p (const_tree expr)
{
  (expr) = tree_strip_any_location_wrapper ((const_cast<union tree_node *> (((expr)))));
  return expr == c_global_trees[CTI_NULL];
}


inline bool
variable_template_p (tree t)
{
  if (((enum tree_code) (t)->base.code) != TEMPLATE_DECL)
    return false;
  if (!(((((contains_struct_check ((((tree_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8019, __FUNCTION__, (TEMPLATE_DECL))))))))->arguments), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8019, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8019, __FUNCTION__))->typed.type))) == (t)))
    return false;
  if (tree r = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8021, __FUNCTION__, (TEMPLATE_DECL))))))))->result)
    return (((enum tree_code) (r)->base.code) == VAR_DECL);
  return false;
}




inline bool
standard_concept_p (tree t)
{
  if (((enum tree_code) (t)->base.code) == TEMPLATE_DECL)
    t = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8033, __FUNCTION__, (TEMPLATE_DECL))))))))->result;
  return ((enum tree_code) (t)->base.code) == CONCEPT_DECL;
}




inline bool
variable_concept_p (tree t)
{
  if (((enum tree_code) (t)->base.code) == TEMPLATE_DECL)
    t = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8044, __FUNCTION__, (TEMPLATE_DECL))))))))->result;
  return (((enum tree_code) (t)->base.code) == VAR_DECL) && (((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8045, __FUNCTION__))->decl_common.lang_specific)->u.base.concept_p);
}





inline bool
function_concept_p (tree t)
{
  if (((enum tree_code) (t)->base.code) == OVERLOAD)
    t = ovl_first (t);
  if (((enum tree_code) (t)->base.code) == TEMPLATE_DECL)
    t = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8058, __FUNCTION__, (TEMPLATE_DECL))))))))->result;
  return ((enum tree_code) (t)->base.code) == FUNCTION_DECL && (((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8059, __FUNCTION__))->decl_common.lang_specific)->u.base.concept_p);
}



inline bool
concept_definition_p (tree t)
{
  if (t == global_trees[TI_ERROR_MARK])
    return false;


  if (((enum tree_code) (t)->base.code) == OVERLOAD)
    t = ovl_first (t);


  if (((enum tree_code) (t)->base.code) == TEMPLATE_DECL)
    t = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8076, __FUNCTION__, (TEMPLATE_DECL))))))))->result;


  if (((enum tree_code) (t)->base.code) == CONCEPT_DECL)
    return true;


  if (!(((enum tree_code) (t)->base.code) == VAR_DECL || ((enum tree_code) (t)->base.code) == FUNCTION_DECL))
    return false;
  if (!((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8085, __FUNCTION__))->decl_common.lang_specific))
    return false;

  return (((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8088, __FUNCTION__))->decl_common.lang_specific)->u.base.concept_p);
}



inline bool
concept_definition_p (const_tree t)
{
  return concept_definition_p (const_cast<tree> (t));
}



inline bool
concept_check_p (const_tree t)
{
  if (((enum tree_code) (t)->base.code) == CALL_EXPR)
    t = (*((const_cast<tree*> (tree_operand_check (((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8105, __FUNCTION__, (CALL_EXPR)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8105, __FUNCTION__)))));
  if (t && ((enum tree_code) (t)->base.code) == TEMPLATE_ID_EXPR)
    return concept_definition_p ((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8107, __FUNCTION__))))));
  return false;
}



inline bool
implicit_rvalue_p (const_tree t)
{
  if (((((enum tree_code) (t)->base.code) == INDIRECT_REF) && ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8116, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8116, __FUNCTION__))->typed.type) && (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check (((t)), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8116, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8116, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE)))
    t = (*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8117, __FUNCTION__)))));
  return ((((enum tree_code) (t)->base.code) == NON_LVALUE_EXPR
    || ((enum tree_code) (t)->base.code) == STATIC_CAST_EXPR)
   && ((tree_not_check2 (((tree_check2 (((t)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8120, __FUNCTION__, (NON_LVALUE_EXPR), (STATIC_CAST_EXPR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8120, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_3));
}
inline tree
set_implicit_rvalue_p (tree ot)
{
  tree t = ot;
  if (((((enum tree_code) (t)->base.code) == INDIRECT_REF) && ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8126, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8126, __FUNCTION__))->typed.type) && (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check (((t)), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8126, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8126, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE)))
    t = (*((const_cast<tree*> (tree_operand_check ((t), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8127, __FUNCTION__)))));
  ((tree_not_check2 (((tree_check2 (((t)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8128, __FUNCTION__, (NON_LVALUE_EXPR), (STATIC_CAST_EXPR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8128, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_3) = 1;
  return ot;
}



inline bool
is_constrained_auto (const_tree t)
{
  return is_auto (t) && ((contains_struct_check ((((tree_class_check ((t), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8137, __FUNCTION__))->type_common.name)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h", 8137, __FUNCTION__))->decl_common.size_unit);
}


namespace selftest {
  extern void run_cp_tests (void);



  extern void cp_pt_c_tests ();
  extern void cp_tree_c_tests (void);
}
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.h" 1
# 52 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.h"
struct timevar_time_def
{

  double user;



  double sys;


  double wall;


  size_t ggc_mem;
};






typedef enum
{
  TV_NONE,
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.def" 1
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.def"
TV_TOTAL,







TV_PHASE_SETUP,
TV_PHASE_PARSING,
TV_PHASE_DEFERRED,
TV_PHASE_LATE_PARSING_CLEANUPS,
TV_PHASE_OPT_GEN,
TV_PHASE_LATE_ASM,
TV_PHASE_STREAM_IN,
TV_PHASE_STREAM_OUT,
TV_PHASE_FINALIZE,


TV_NAME_LOOKUP,
TV_OVERLOAD,


TV_GC,


TV_DUMP,


TV_PCH_SAVE,
TV_PCH_CPP_SAVE,
TV_PCH_PTR_REALLOC,
TV_PCH_PTR_SORT,
TV_PCH_RESTORE,
TV_PCH_CPP_RESTORE,

TV_CGRAPH,
TV_CGRAPHOPT,
TV_CGRAPH_FUNC_EXPANSION,
TV_CGRAPH_IPA_PASSES,
TV_IPA_ODR,
TV_IPA_FNSUMMARY,
TV_IPA_UNREACHABLE,
TV_IPA_INHERITANCE,
TV_IPA_VIRTUAL_CALL,
TV_IPA_DEVIRT,
TV_IPA_CONSTANT_PROP,
TV_IPA_INLINING,
TV_IPA_FNSPLIT,
TV_IPA_COMDATS,
TV_IPA_OPT,
TV_IPA_LTO_DECOMPRESS,
TV_IPA_LTO_COMPRESS,
TV_IPA_LTO_OUTPUT,
TV_IPA_LTO_GIMPLE_IN,
TV_IPA_LTO_GIMPLE_OUT,
TV_IPA_LTO_DECL_IN,
TV_IPA_LTO_DECL_OUT,
TV_IPA_LTO_CTORS_IN,
TV_IPA_LTO_CTORS_OUT,
TV_IPA_LTO_CGRAPH_IO,
TV_IPA_LTO_DECL_MERGE,
TV_IPA_LTO_CGRAPH_MERGE,
TV_LTO,
TV_WHOPR_WPA,
TV_WHOPR_WPA_IO,
TV_WHOPR_PARTITIONING,
TV_WHOPR_LTRANS,
TV_IPA_REFERENCE,
TV_IPA_PROFILE,
TV_IPA_AUTOFDO,
TV_IPA_PURE_CONST,
TV_IPA_ICF,
TV_IPA_PTA,
TV_IPA_SRA,
TV_IPA_FREE_LANG_DATA,
TV_IPA_FREE_INLINE_SUMMARY,

TV_CFG,

TV_CLEANUP_CFG,
TV_CFG_VERIFY,
TV_DELETE_TRIVIALLY_DEAD,


TV_DF_SCAN,
TV_DF_MD,
TV_DF_RD,
TV_DF_LR,
TV_DF_LIVE,
TV_DF_MIR,
TV_DF_CHAIN,
TV_DF_WORD_LR,
TV_DF_NOTE,
TV_REG_STATS,

TV_ALIAS_ANALYSIS,
TV_ALIAS_STMT_WALK,
TV_REG_SCAN,
TV_REBUILD_JUMP,

TV_CPP,
TV_LEX,
TV_PARSE_GLOBAL,
TV_PARSE_STRUCT,
TV_PARSE_ENUM,
TV_PARSE_FUNC,
TV_PARSE_INLINE,
TV_PARSE_INMETH,
TV_TEMPLATE_INST,
TV_CONSTEXPR,
TV_CONSTRAINT_NORM,
TV_CONSTRAINT_SAT,
TV_CONSTRAINT_SUB,
TV_FLATTEN_INLINING,
TV_EARLY_INLINING,
TV_INLINE_PARAMETERS,
TV_INTEGRATION,
TV_TREE_GIMPLIFY,
TV_TREE_EH,
TV_TREE_CFG,
TV_TREE_CLEANUP_CFG,
TV_TREE_TAIL_MERGE,
TV_TREE_VRP,
TV_TREE_EARLY_VRP,
TV_TREE_COPY_PROP,
TV_FIND_REFERENCED_VARS,
TV_TREE_PTA,
TV_TREE_INSERT_PHI_NODES,
TV_TREE_SSA_REWRITE_BLOCKS,
TV_TREE_SSA_OTHER,
TV_TREE_SSA_INCREMENTAL,
TV_TREE_OPS,
TV_TREE_SSA_DOMINATOR_OPTS,
TV_TREE_SSA_THREAD_JUMPS,
TV_TREE_SRA,
TV_ISOLATE_ERRONEOUS_PATHS,
TV_TREE_CCP,
TV_TREE_SPLIT_EDGES,
TV_TREE_REASSOC,
TV_TREE_PRE,
TV_TREE_FRE,
TV_TREE_SINK,
TV_TREE_PHIOPT,
TV_TREE_BACKPROP,
TV_TREE_FORWPROP,
TV_TREE_PHIPROP,
TV_TREE_DCE,
TV_TREE_CD_DCE,
TV_TREE_CALL_CDCE,
TV_TREE_DSE,
TV_TREE_MERGE_PHI,
TV_TREE_LOOP,
TV_TREE_NOLOOP,
TV_TREE_LOOP_BOUNDS,
TV_LIM,
TV_LINTERCHANGE,
TV_TREE_LOOP_IVCANON,
TV_SCEV_CONST,
TV_TREE_LOOP_UNSWITCH,
TV_LOOP_SPLIT,
TV_LOOP_JAM,
TV_COMPLETE_UNROLL,
TV_TREE_PARALLELIZE_LOOPS,
TV_TREE_VECTORIZATION,
TV_TREE_SLP_VECTORIZATION,
TV_GRAPHITE,
TV_GRAPHITE_TRANSFORMS,
TV_GRAPHITE_DATA_DEPS,
TV_GRAPHITE_CODE_GEN,
TV_TREE_LOOP_DISTRIBUTION,
TV_CHECK_DATA_DEPS,
TV_TREE_PREFETCH,
TV_TREE_LOOP_IVOPTS,
TV_PREDCOM,
TV_TREE_CH,
TV_TREE_SSA_UNCPROP,
TV_TREE_NRV,
TV_TREE_COPY_RENAME,
TV_TREE_SSA_VERIFY,
TV_TREE_STMT_VERIFY,
TV_TREE_SWITCH_CONVERSION,
TV_TREE_SWITCH_LOWERING,
TV_TREE_RECIP,
TV_TREE_SINCOS,
TV_TREE_WIDEN_MUL,
TV_TRANS_MEM,
TV_TREE_STRLEN,
TV_CGRAPH_VERIFY,
TV_DOM_FRONTIERS,
TV_DOMINANCE,
TV_CONTROL_DEPENDENCES,
TV_OUT_OF_SSA,
TV_VAR_EXPAND,
TV_EXPAND,
TV_POST_EXPAND,
TV_VARCONST,
TV_LOWER_SUBREG,
TV_JUMP,
TV_FWPROP,
TV_CSE,
TV_DCE,
TV_DSE1,
TV_DSE2,
TV_LOOP,
TV_LOOP_INIT,
TV_LOOP_VERSIONING,
TV_LOOP_MOVE_INVARIANTS,
TV_LOOP_UNROLL,
TV_LOOP_DOLOOP,
TV_LOOP_FINI,
TV_CPROP,
TV_PRE,
TV_HOIST,
TV_LSM,
TV_TRACER,
TV_WEB,
TV_AUTO_INC_DEC,
TV_CSE2,
TV_BRANCH_PROB,
TV_COMBINE,
TV_IFCVT,
TV_MODE_SWITCH,
TV_SMS,
TV_LIVE_RANGE_SHRINKAGE,
TV_SCHED,
TV_EARLY_REMAT,
TV_IRA,
TV_LRA,
TV_LRA_ELIMINATE,
TV_LRA_INHERITANCE,
TV_LRA_CREATE_LIVE_RANGES,
TV_LRA_ASSIGN,
TV_LRA_COALESCE,
TV_LRA_REMAT,
TV_RELOAD,
TV_RELOAD_CSE_REGS,
TV_GCSE_AFTER_RELOAD,
TV_REE,
TV_THREAD_PROLOGUE_AND_EPILOGUE,
TV_IFCVT2,
TV_SPLIT_PATHS,
TV_COMBINE_STACK_ADJUST,
TV_PEEPHOLE2,
TV_RENAME_REGISTERS,
TV_SCHED_FUSION,
TV_CPROP_REGISTERS,
TV_SCHED2,
TV_MACH_DEP,
TV_DBR_SCHED,
TV_REORDER_BLOCKS,
TV_SHORTEN_BRANCH,
TV_REG_STACK,
TV_FINAL,
TV_VAROUT,
TV_SYMOUT,
TV_VAR_TRACKING,
TV_VAR_TRACKING_DATAFLOW,
TV_VAR_TRACKING_EMIT,
TV_TREE_IFCOMBINE,
TV_TREE_UNINIT,
TV_PLUGIN_INIT,
TV_PLUGIN_RUN,
TV_GIMPLE_SLSR,
TV_GIMPLE_STORE_MERGING,
TV_VTABLE_VERIFICATION,
TV_TREE_UBSAN,
TV_INITIALIZE_RTL,
TV_GIMPLE_LADDRESS,
TV_TREE_LOOP_IFCVT,


TV_EARLY_LOCAL,
TV_OPTIMIZE,
TV_REST_OF_COMPILATION,
TV_POSTRELOAD,
TV_LATE_COMPILATION,
TV_REMOVE_UNUSED,
TV_ADDRESS_TAKEN,
TV_TODO,
TV_VERIFY_LOOP_CLOSED,
TV_VERIFY_RTL_SHARING,
TV_REBUILD_FREQUENCIES,
TV_REPAIR_LOOPS,


TV_JIT_REPLAY,
TV_ASSEMBLE,
TV_LINK,
TV_LOAD,
TV_JIT_ACQUIRING_MUTEX,
TV_JIT_CLIENT_CODE,


TV_ANALYZER,
TV_ANALYZER_SUPERGRAPH,
TV_ANALYZER_STATE_PURGE,
TV_ANALYZER_PLAN,
TV_ANALYZER_SCC,
TV_ANALYZER_WORKLIST,
TV_ANALYZER_DUMP,
TV_ANALYZER_DIAGNOSTICS,
TV_ANALYZER_SHORTEST_PATHS,
# 77 "/home/giulianob/gcc_git_gnu/gcc/gcc/timevar.h" 2
  TIMEVAR_LAST
}
timevar_id_t;




class timer;







extern timer *g_timer;


extern size_t timevar_ggc_mem_total;

extern void timevar_init (void);
extern void timevar_start (timevar_id_t);
extern void timevar_stop (timevar_id_t);
extern bool timevar_cond_start (timevar_id_t);
extern void timevar_cond_stop (timevar_id_t, bool);



class timer
{
 public:
  timer ();
  ~timer ();

  void start (timevar_id_t tv);
  void stop (timevar_id_t tv);
  void push (timevar_id_t tv);
  void pop (timevar_id_t tv);
  bool cond_start (timevar_id_t tv);
  void cond_stop (timevar_id_t tv);

  void push_client_item (const char *item_name);
  void pop_client_item ();

  void print (FILE *fp);

  const char *get_topmost_item_name () const;

 private:

  void validate_phases (FILE *fp) const;

  struct timevar_def;
  void push_internal (struct timevar_def *tv);
  void pop_internal ();
  static void print_row (FILE *fp,
    const timevar_time_def *total,
    const char *name, const timevar_time_def &elapsed);
  static bool all_zero (const timevar_time_def &elapsed);

 private:
  typedef hash_map<timevar_def *, timevar_time_def> child_map_t;


  struct timevar_def
  {

    struct timevar_time_def elapsed;



    struct timevar_time_def start_time;


    const char *name;



    unsigned standalone : 1;



    unsigned used : 1;

    child_map_t *children;
  };




  struct timevar_stack_def
  {

    struct timevar_def *timevar;


    struct timevar_stack_def *next;
  };





  class named_items;

 private:





  timevar_def m_timevars[TIMEVAR_LAST];


  timevar_stack_def *m_stack;



  timevar_stack_def *m_unused_stack_instances;




  timevar_time_def m_start_time;


  named_items *m_jit_client_items;

  friend class named_items;
};


static inline void
timevar_push (timevar_id_t tv)
{
  if (g_timer)
    g_timer->push (tv);
}

static inline void
timevar_pop (timevar_id_t tv)
{
  if (g_timer)
    g_timer->pop (tv);
}



class auto_timevar
{
 public:
  auto_timevar (timer *t, timevar_id_t tv)
    : m_timer (t),
      m_tv (tv)
  {
    if (m_timer)
      m_timer->push (m_tv);
  }

  explicit auto_timevar (timevar_id_t tv)
    : m_timer (g_timer)
    , m_tv (tv)
  {
    if (m_timer)
      m_timer->push (m_tv);
  }

  ~auto_timevar ()
  {
    if (m_timer)
      m_timer->pop (m_tv);
  }

 private:


  auto_timevar (const auto_timevar &);

  timer *m_timer;
  timevar_id_t m_tv;
};

extern void print_time (const char *, long);
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/stringpool.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/stringpool.h"
extern tree get_identifier (const char *);




extern tree maybe_get_identifier (const char *);



extern tree get_identifier_with_length (const char *, size_t);
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/ipa-ref.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/ipa-ref.h"
struct cgraph_node;
struct varpool_node;
struct symtab_node;



enum ipa_ref_use
{
  IPA_REF_LOAD,
  IPA_REF_STORE,
  IPA_REF_ADDR,
  IPA_REF_ALIAS
};


struct ipa_ref
{
public:

  void remove_reference ();



  bool cannot_lead_to_return ();


  bool address_matters_p ();


  struct ipa_ref_list * referring_ref_list (void);


  struct ipa_ref_list * referred_ref_list (void);

  symtab_node *referring;
  symtab_node *referred;
  gimple *stmt;
  unsigned int lto_stmt_uid;


  unsigned int speculative_id : 16;
  unsigned int referred_index;
  enum ipa_ref_use use:3;
  unsigned int speculative:1;
};

typedef struct ipa_ref ipa_ref_t;
typedef struct ipa_ref *ipa_ref_ptr;



struct ipa_ref_list
{
public:

  struct ipa_ref *first_reference (void)
  {
    if (!vec_safe_length (references))
      return nullptr;
    return &(*references)[0];
  }


  struct ipa_ref *first_referring (void)
  {
    if (!referring.length ())
      return nullptr;
    return referring[0];
  }


  struct ipa_ref *first_alias (void)
  {
    struct ipa_ref *r = first_referring ();

    return r && r->use == IPA_REF_ALIAS ? r : nullptr;
  }


  struct ipa_ref *last_alias (void)
  {
    unsigned int i = 0;

    for(i = 0; i < referring.length (); i++)
      if (referring[i]->use != IPA_REF_ALIAS)
 break;

    return i == 0 ? nullptr : referring[i - 1];
  }


  bool inline has_aliases_p (void)
  {
    return first_alias ();
  }


  void clear (void)
  {
    referring.create (0);
    references = nullptr;
  }


  unsigned int nreferences (void)
  {
    return vec_safe_length (references);
  }


  vec<ipa_ref_t, va_gc> *references;


  vec<ipa_ref_ptr> referring;
};
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/plugin-api.h" 1
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/plugin-api.h"
extern "C"
{




enum ld_plugin_status
{
  LDPS_OK = 0,
  LDPS_NO_SYMS,
  LDPS_BAD_HANDLE,
  LDPS_ERR

};



enum ld_plugin_api_version
{
  LD_PLUGIN_API_VERSION = 1
};



enum ld_plugin_output_file_type
{
  LDPO_REL,
  LDPO_EXEC,
  LDPO_DYN,
  LDPO_PIE
};



struct ld_plugin_input_file
{
  const char *name;
  int fd;
  off_t offset;
  off_t filesize;
  void *handle;
};



struct ld_plugin_symbol
{
  char *name;
  char *version;
# 152 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/plugin-api.h"
  char def;
  char symbol_type;
  char section_kind;
  char unused;
# 164 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/plugin-api.h"
  int visibility;
  uint64_t size;
  char *comdat_key;
  int resolution;
};



struct ld_plugin_section
{
  const void* handle;
  unsigned int shndx;
};



enum ld_plugin_symbol_kind
{
  LDPK_DEF,
  LDPK_WEAKDEF,
  LDPK_UNDEF,
  LDPK_WEAKUNDEF,
  LDPK_COMMON
};



enum ld_plugin_symbol_visibility
{
  LDPV_DEFAULT,
  LDPV_PROTECTED,
  LDPV_INTERNAL,
  LDPV_HIDDEN
};



enum ld_plugin_symbol_type
{
  LDST_UNKNOWN,
  LDST_FUNCTION,
  LDST_VARIABLE
};

enum ld_plugin_symbol_section_kind
{
  LDSSK_DEFAULT,
  LDSSK_BSS
};



enum ld_plugin_symbol_resolution
{
  LDPR_UNKNOWN = 0,


  LDPR_UNDEF,



  LDPR_PREVAILING_DEF,




  LDPR_PREVAILING_DEF_IRONLY,



  LDPR_PREEMPTED_REG,


  LDPR_PREEMPTED_IR,


  LDPR_RESOLVED_IR,



  LDPR_RESOLVED_EXEC,


  LDPR_RESOLVED_DYN,





  LDPR_PREVAILING_DEF_IRONLY_EXP
};



typedef
enum ld_plugin_status
(*ld_plugin_claim_file_handler) (
  const struct ld_plugin_input_file *file, int *claimed);



typedef
enum ld_plugin_status
(*ld_plugin_all_symbols_read_handler) (void);



typedef
enum ld_plugin_status
(*ld_plugin_cleanup_handler) (void);



typedef
enum ld_plugin_status
(*ld_plugin_register_claim_file) (ld_plugin_claim_file_handler handler);



typedef
enum ld_plugin_status
(*ld_plugin_register_all_symbols_read) (
  ld_plugin_all_symbols_read_handler handler);



typedef
enum ld_plugin_status
(*ld_plugin_register_cleanup) (ld_plugin_cleanup_handler handler);



typedef
enum ld_plugin_status
(*ld_plugin_add_symbols) (void *handle, int nsyms,
                          const struct ld_plugin_symbol *syms);




typedef
enum ld_plugin_status
(*ld_plugin_get_input_file) (const void *handle,
                             struct ld_plugin_input_file *file);

typedef
enum ld_plugin_status
(*ld_plugin_get_view) (const void *handle, const void **viewp);



typedef
enum ld_plugin_status
(*ld_plugin_release_input_file) (const void *handle);



typedef
enum ld_plugin_status
(*ld_plugin_get_symbols) (const void *handle, int nsyms,
                          struct ld_plugin_symbol *syms);



typedef
enum ld_plugin_status
(*ld_plugin_add_input_file) (const char *pathname);



typedef
enum ld_plugin_status
(*ld_plugin_add_input_library) (const char *libname);



typedef
enum ld_plugin_status
(*ld_plugin_set_extra_library_path) (const char *path);



typedef
enum ld_plugin_status
(*ld_plugin_message) (int level, const char *format, ...);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_count) (const void* handle, unsigned int *count);





typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_type) (const struct ld_plugin_section section,
                                     unsigned int *type);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_name) (const struct ld_plugin_section section,
                                     char **section_name_ptr);







typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_contents) (const struct ld_plugin_section section,
                                         const unsigned char **section_contents,
                                         size_t* len);







typedef
enum ld_plugin_status
(*ld_plugin_update_section_order) (const struct ld_plugin_section *section_list,
       unsigned int num_sections);





typedef
enum ld_plugin_status
(*ld_plugin_allow_section_ordering) (void);






typedef
enum ld_plugin_status
(*ld_plugin_allow_unique_segment_for_sections) (void);
# 427 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/plugin-api.h"
typedef
enum ld_plugin_status
(*ld_plugin_unique_segment_for_sections) (
    const char* segment_name,
    uint64_t segment_flags,
    uint64_t segment_alignment,
    const struct ld_plugin_section * section_list,
    unsigned int num_sections);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_alignment) (const struct ld_plugin_section section,
                                          unsigned int *addralign);






typedef
enum ld_plugin_status
(*ld_plugin_get_input_section_size) (const struct ld_plugin_section section,
                                     uint64_t *secsize);

typedef
enum ld_plugin_status
(*ld_plugin_new_input_handler) (const struct ld_plugin_input_file *file);






typedef
enum ld_plugin_status
(*ld_plugin_register_new_input) (ld_plugin_new_input_handler handler);





typedef
enum ld_plugin_status
(*ld_plugin_get_wrap_symbols) (uint64_t *num_symbols,
                               const char ***wrap_symbol_list);

enum ld_plugin_level
{
  LDPL_INFO,
  LDPL_WARNING,
  LDPL_ERROR,
  LDPL_FATAL
};



enum ld_plugin_tag
{
  LDPT_NULL = 0,
  LDPT_API_VERSION = 1,
  LDPT_GOLD_VERSION = 2,
  LDPT_LINKER_OUTPUT = 3,
  LDPT_OPTION = 4,
  LDPT_REGISTER_CLAIM_FILE_HOOK = 5,
  LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK = 6,
  LDPT_REGISTER_CLEANUP_HOOK = 7,
  LDPT_ADD_SYMBOLS = 8,
  LDPT_GET_SYMBOLS = 9,
  LDPT_ADD_INPUT_FILE = 10,
  LDPT_MESSAGE = 11,
  LDPT_GET_INPUT_FILE = 12,
  LDPT_RELEASE_INPUT_FILE = 13,
  LDPT_ADD_INPUT_LIBRARY = 14,
  LDPT_OUTPUT_NAME = 15,
  LDPT_SET_EXTRA_LIBRARY_PATH = 16,
  LDPT_GNU_LD_VERSION = 17,
  LDPT_GET_VIEW = 18,
  LDPT_GET_INPUT_SECTION_COUNT = 19,
  LDPT_GET_INPUT_SECTION_TYPE = 20,
  LDPT_GET_INPUT_SECTION_NAME = 21,
  LDPT_GET_INPUT_SECTION_CONTENTS = 22,
  LDPT_UPDATE_SECTION_ORDER = 23,
  LDPT_ALLOW_SECTION_ORDERING = 24,
  LDPT_GET_SYMBOLS_V2 = 25,
  LDPT_ALLOW_UNIQUE_SEGMENT_FOR_SECTIONS = 26,
  LDPT_UNIQUE_SEGMENT_FOR_SECTIONS = 27,
  LDPT_GET_SYMBOLS_V3 = 28,
  LDPT_GET_INPUT_SECTION_ALIGNMENT = 29,
  LDPT_GET_INPUT_SECTION_SIZE = 30,
  LDPT_REGISTER_NEW_INPUT_HOOK = 31,
  LDPT_GET_WRAP_SYMBOLS = 32,
  LDPT_ADD_SYMBOLS_V2 = 33
};



struct ld_plugin_tv
{
  enum ld_plugin_tag tv_tag;
  union
  {
    int tv_val;
    const char *tv_string;
    ld_plugin_register_claim_file tv_register_claim_file;
    ld_plugin_register_all_symbols_read tv_register_all_symbols_read;
    ld_plugin_register_cleanup tv_register_cleanup;
    ld_plugin_add_symbols tv_add_symbols;
    ld_plugin_get_symbols tv_get_symbols;
    ld_plugin_add_input_file tv_add_input_file;
    ld_plugin_message tv_message;
    ld_plugin_get_input_file tv_get_input_file;
    ld_plugin_get_view tv_get_view;
    ld_plugin_release_input_file tv_release_input_file;
    ld_plugin_add_input_library tv_add_input_library;
    ld_plugin_set_extra_library_path tv_set_extra_library_path;
    ld_plugin_get_input_section_count tv_get_input_section_count;
    ld_plugin_get_input_section_type tv_get_input_section_type;
    ld_plugin_get_input_section_name tv_get_input_section_name;
    ld_plugin_get_input_section_contents tv_get_input_section_contents;
    ld_plugin_update_section_order tv_update_section_order;
    ld_plugin_allow_section_ordering tv_allow_section_ordering;
    ld_plugin_allow_unique_segment_for_sections tv_allow_unique_segment_for_sections;
    ld_plugin_unique_segment_for_sections tv_unique_segment_for_sections;
    ld_plugin_get_input_section_alignment tv_get_input_section_alignment;
    ld_plugin_get_input_section_size tv_get_input_section_size;
    ld_plugin_register_new_input tv_register_new_input;
    ld_plugin_get_wrap_symbols tv_get_wrap_symbols;
  } tv_u;
};



typedef
enum ld_plugin_status
(*ld_plugin_onload) (struct ld_plugin_tv *tv);


}
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/ipa-param-manipulation.h" 1
# 128 "/home/giulianob/gcc_git_gnu/gcc/gcc/ipa-param-manipulation.h"
enum ipa_param_name_prefix_indices
  {
   IPA_PARAM_PREFIX_SYNTH,
   IPA_PARAM_PREFIX_ISRA,
   IPA_PARAM_PREFIX_SIMD,
   IPA_PARAM_PREFIX_MASK,
   IPA_PARAM_PREFIX_COUNT
};
# 144 "/home/giulianob/gcc_git_gnu/gcc/gcc/ipa-param-manipulation.h"
enum ipa_parm_op
{

  IPA_PARAM_OP_UNDEFINED,


  IPA_PARAM_OP_COPY,



  IPA_PARAM_OP_NEW,


  IPA_PARAM_OP_SPLIT
};




struct ipa_adjusted_param
{


  tree type;



  tree alias_ptr_type;




  unsigned unit_offset;





  unsigned base_index : 16;



  unsigned prev_clone_index : 16;


  enum ipa_parm_op op : 2;



  unsigned prev_clone_adjustment : 1;



  unsigned param_prefix_index : 2;



  unsigned reverse : 1;


  unsigned user_flag : 1;
};

void ipa_dump_adjusted_parameters (FILE *f,
       vec<ipa_adjusted_param, va_gc> *adj_params);





struct ipa_param_performed_split
{




  tree dummy_decl;

  unsigned unit_offset;
};






class ipa_param_adjustments
{
public:






  ipa_param_adjustments (vec<ipa_adjusted_param, va_gc> *new_params,
    int always_copy_start, bool skip_return)
    : m_adj_params (new_params), m_always_copy_start (always_copy_start),
    m_skip_return (skip_return)
    {}



  gcall *modify_call (gcall *stmt,
        vec<ipa_param_performed_split, va_gc> *performed_splits,
        tree callee_decl, bool update_references);

  bool first_param_intact_p ();

  tree build_new_function_type (tree old_type, bool type_is_original_p);

  tree adjust_decl (tree orig_decl);


  void get_surviving_params (vec<bool> *surviving_params);

  void get_updated_indices (vec<int> *new_indices);


  int get_original_index (int newidx);

  void dump (FILE *f);
  void debug ();


  vec<ipa_adjusted_param, va_gc> *m_adj_params;





  int m_always_copy_start;

  bool m_skip_return;

private:
  ipa_param_adjustments () {}

  void init (vec<tree> *cur_params);
  int get_max_base_index ();
  bool method2func_p (tree orig_type);
};




struct ipa_param_body_replacement
{

  tree base;

  tree repl;
# 305 "/home/giulianob/gcc_git_gnu/gcc/gcc/ipa-param-manipulation.h"
  tree dummy;

  unsigned unit_offset;
};

struct ipa_replace_map;
# 321 "/home/giulianob/gcc_git_gnu/gcc/gcc/ipa-param-manipulation.h"
class ipa_param_body_adjustments
{
public:

  ipa_param_body_adjustments (ipa_param_adjustments *adjustments,
         tree fndecl, tree old_fndecl,
         struct copy_body_data *id, tree *vars,
         vec<ipa_replace_map *, va_gc> *tree_map);


  ipa_param_body_adjustments (ipa_param_adjustments *adjustments,
         tree fndecl);


  ipa_param_body_adjustments (vec<ipa_adjusted_param, va_gc> *adj_params,
         tree fndecl);



  bool perform_cfun_body_modifications ();


  void modify_formal_parameters ();

  void register_replacement (ipa_adjusted_param *apm, tree replacement,
        tree dummy = (tree) nullptr);

  tree lookup_replacement (tree base, unsigned unit_offset);

  ipa_param_body_replacement *get_expr_replacement (tree expr,
          bool ignore_default_def);


  tree get_replacement_ssa_base (tree old_decl);

  bool modify_gimple_stmt (gimple **stmt, gimple_seq *extra_stmts);

  tree get_new_param_chain ();



  vec<ipa_adjusted_param, va_gc> *m_adj_params;
  ipa_param_adjustments *m_adjustments;




  auto_vec<tree, 16> m_reset_debug_decls;



  bool m_split_modifications_p;
private:
  void common_initialization (tree old_fndecl, tree *vars,
         vec<ipa_replace_map *, va_gc> *tree_map);
  tree carry_over_param (tree t);
  unsigned get_base_index (ipa_adjusted_param *apm);
  ipa_param_body_replacement *lookup_replacement_1 (tree base,
          unsigned unit_offset);
  tree replace_removed_params_ssa_names (tree old_name, gimple *stmt);
  bool modify_expression (tree *expr_p, bool convert);
  bool modify_assignment (gimple *stmt, gimple_seq *extra_stmts);
  bool modify_call_stmt (gcall **stmt_p);
  bool modify_cfun_body ();
  void reset_debug_stmts ();



  tree m_fndecl;



  struct copy_body_data *m_id;



  auto_vec<tree, 16> m_oparms;




  auto_vec<tree, 16> m_new_decls;




  auto_vec<tree, 16> m_new_types;





  auto_vec<ipa_param_body_replacement, 16> m_replacements;






  auto_vec<tree> m_removed_decls;



  hash_map<tree, unsigned> m_removed_map;




  bool m_method2func;
};

void push_function_arg_decls (vec<tree> *args, tree fndecl);
void push_function_arg_types (vec<tree> *types, tree fntype);
# 28 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h" 2

extern void debuginfo_early_init (void);
extern void debuginfo_init (void);
extern void debuginfo_fini (void);
extern void debuginfo_start (void);
extern void debuginfo_stop (void);
extern void debuginfo_early_start (void);
extern void debuginfo_early_stop (void);

class ipa_opt_pass_d;
typedef ipa_opt_pass_d *ipa_opt_pass;



enum symtab_type
{
  SYMTAB_SYMBOL,
  SYMTAB_FUNCTION,
  SYMTAB_VARIABLE
};




struct section_hash_entry
{
  int ref_count;
  char *name;


};

struct section_name_hasher : ggc_ptr_hash<section_hash_entry>
{
  typedef const char *compare_type;

  static hashval_t hash (section_hash_entry *);
  static bool equal (section_hash_entry *, const char *);
};

enum availability
{

  AVAIL_UNSET,

  AVAIL_NOT_AVAILABLE,





  AVAIL_INTERPOSABLE,


  AVAIL_AVAILABLE,




  AVAIL_LOCAL
};


enum symbol_partitioning_class
{


   SYMBOL_EXTERNAL,

   SYMBOL_PARTITION,


   SYMBOL_DUPLICATE
};



struct

  symtab_node
{
public:
  friend class symbol_table;


  explicit symtab_node (symtab_type t)
    : type (t), resolution (LDPR_UNKNOWN), definition (false), alias (false),
      transparent_alias (false), weakref (false), cpp_implicit_alias (false),
      symver (false), analyzed (false), writeonly (false),
      refuse_visibility_changes (false), externally_visible (false),
      no_reorder (false), force_output (false), forced_by_abi (false),
      unique_name (false), implicit_section (false), body_removed (false),
      used_from_other_partition (false), in_other_partition (false),
      address_taken (false), in_init_priority_hash (false),
      need_lto_streaming (false), offloadable (false), ifunc_resolver (false),
      order (false), next_sharing_asm_name (nullptr),
      previous_sharing_asm_name (nullptr), same_comdat_group (nullptr), ref_list (),
      alias_target (nullptr), lto_file_data (nullptr), aux (nullptr),
      x_comdat_group ((tree) nullptr), x_section (nullptr)
  {}


  const char *name () const;


  const char *dump_name () const;


  const char *asm_name () const;


  const char *dump_asm_name () const;


  const char *get_visibility_string () const;


  const char *get_symtab_type_string () const;



  void register_symbol (void);


  void remove (void);


  void dump (FILE *f);


  void dump_graphviz (FILE *f);


  void __attribute__ ((__used__)) debug (void);


  void __attribute__ ((__used__)) verify (void);




  ipa_ref *create_reference (symtab_node *referred_node,
        enum ipa_ref_use use_type);




  ipa_ref *create_reference (symtab_node *referred_node,
        enum ipa_ref_use use_type, gimple *stmt);




  ipa_ref *maybe_create_reference (tree val, gimple *stmt);


  void clone_references (symtab_node *node);





  void clone_referring (symtab_node *node);


  ipa_ref *clone_reference (ipa_ref *ref, gimple *stmt);



  ipa_ref *find_reference (symtab_node *referred_node, gimple *stmt,
      unsigned int lto_stmt_uid);


  void remove_stmt_references (gimple *stmt);





  void clear_stmts_in_references (void);


  void remove_all_references (void);


  void remove_all_referring (void);


  void dump_references (FILE *file);


  void dump_referring (FILE *);


  inline unsigned num_references (void)
  {
    return ref_list.references ? ref_list.references->length () : 0;
  }


  ipa_ref *iterate_reference (unsigned i, ipa_ref *&ref);


  ipa_ref *iterate_referring (unsigned i, ipa_ref *&ref);


  ipa_ref *iterate_direct_aliases (unsigned i, ipa_ref *&ref);



  bool semantically_equivalent_p (symtab_node *target);


  enum symbol_partitioning_class get_partitioning_class (void);


  tree get_comdat_group ()
    {
      return x_comdat_group;
    }


  tree get_comdat_group_id ()
    {
      if (x_comdat_group && ((enum tree_code) (x_comdat_group)->base.code) != IDENTIFIER_NODE)
 x_comdat_group = decl_assembler_name (x_comdat_group);
      return x_comdat_group;
    }


  void set_comdat_group (tree group)
    {
      ((void)(!(!group || ((enum tree_code) (group)->base.code) == IDENTIFIER_NODE || (tree_code_type[(int) (((enum tree_code) (group)->base.code))] == tcc_declaration)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 260, __FUNCTION__), 0 : 0))
                        ;
      x_comdat_group = group;
    }


  const char * get_section ()
    {
      if (!x_section)
 return nullptr;
      return x_section->name;
    }


  void remove_from_same_comdat_group (void);


  void add_to_same_comdat_group (symtab_node *old_node);


  void dissolve_same_comdat_group_list (void);



  bool used_from_object_file_p (void);






  symtab_node *ultimate_alias_target (enum availability *avail = nullptr,
          struct symtab_node *ref = nullptr);


  inline symtab_node *next_defined_symbol (void);





  bool resolve_alias (symtab_node *target, bool transparent = false);



  void fixup_same_cpp_alias_visibility (symtab_node *target);




  bool call_for_symbol_and_aliases (bool (*callback) (symtab_node *, void *),
        void *data,
        bool include_overwrite);




  symtab_node *noninterposable_alias (void);


  inline symtab_node *get_alias_target (void);


  void set_section (const char *section);




  void set_section_for_node (const char *section);


  void set_init_priority (priority_type priority);


  priority_type get_init_priority ();


  enum availability get_availability (symtab_node *ref = nullptr);



  bool prevailing_p (void);




  bool binds_to_current_def_p (symtab_node *ref = nullptr);


  void make_decl_local (void);


  void copy_visibility_from (symtab_node *n);





  unsigned int definition_alignment ();


  bool can_increase_alignment_p ();


  void increase_alignment (unsigned int align);


  bool has_aliases_p (void);



  bool real_symbol_p (void);


  bool output_to_lto_symbol_table_p (void);




  bool needed_p (void);



  bool native_rtl_p () const;


  bool referred_to_p (bool include_self = true);







  inline bool
  can_be_discarded_p (void)
  {
    return (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 397, __FUNCTION__))->decl_common.decl_flag_1)
     || ((get_comdat_group ()
   || ((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 399, __FUNCTION__))->decl_with_vis.common_flag)
   || (decl_section_name (decl) && ((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 400, __FUNCTION__))->decl_with_vis.weak_flag)))
  && ((resolution != LDPR_PREVAILING_DEF
       && resolution != LDPR_PREVAILING_DEF_IRONLY_EXP)
      || global_options.x_flag_incremental_link)
  && resolution != LDPR_PREVAILING_DEF_IRONLY));
  }




  inline bool comdat_local_p (void)
  {
    return (same_comdat_group && !((decl)->base.public_flag));
  }


  inline bool in_same_comdat_group_p (symtab_node *target);


  bool nonzero_address ();
# 429 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  int equal_address_to (symtab_node *s2, bool memory_accessed = false);



  bool address_matters_p ();




  bool address_can_be_compared_p (void);



  static inline symtab_node *get (const_tree decl)
  {


    ((void)(!(((enum tree_code) (decl)->base.code) == FUNCTION_DECL || (((enum tree_code) (decl)->base.code) == VAR_DECL && (((decl)->base.static_flag) || ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 448, __FUNCTION__))->decl_common.decl_flag_1) || global_options.x_in_lto_p))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 446, __FUNCTION__), 0 : 0))


                   ;



    ((void)(!(!decl->decl_with_vis.symtab_node || decl->decl_with_vis.symtab_node->decl == decl) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 453, __FUNCTION__), 0 : 0))
                                                     ;
    return decl->decl_with_vis.symtab_node;
  }



  static inline symtab_node * get_create (tree node);



  static symtab_node *get_for_asmname (const_tree asmname);


  static symtab_node *find_by_order (int order);


  static symtab_node *find_by_name (const char *);


  static symtab_node *find_by_asm_name (const char *);


  static __attribute__ ((__used__)) void verify_symtab_nodes (void);


  static inline void checking_verify_symtab_nodes (void);


  enum symtab_type type : 8;


  enum ld_plugin_symbol_resolution resolution : 8;





  unsigned definition : 1;


  unsigned alias : 1;
# 516 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  unsigned transparent_alias : 1;

  unsigned weakref : 1;






  unsigned cpp_implicit_alias : 1;

  unsigned symver : 1;


  unsigned analyzed : 1;

  unsigned writeonly : 1;


  unsigned refuse_visibility_changes : 1;




  unsigned externally_visible : 1;

  unsigned no_reorder : 1;


  unsigned force_output : 1;



  unsigned forced_by_abi : 1;

  unsigned unique_name : 1;


  unsigned implicit_section : 1;


  unsigned body_removed : 1;






  unsigned used_from_other_partition : 1;



  unsigned in_other_partition : 1;






  unsigned address_taken : 1;

  unsigned in_init_priority_hash : 1;



  unsigned need_lto_streaming : 1;


  unsigned offloadable : 1;


  unsigned ifunc_resolver : 1;



  int order;


  tree decl;


  symtab_node *next;
  symtab_node *previous;
# 609 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  symtab_node *next_sharing_asm_name;
  symtab_node *previous_sharing_asm_name;


  symtab_node *same_comdat_group;


  ipa_ref_list ref_list;




  tree alias_target;


  struct lto_file_decl_data * lto_file_data;

  void * aux;
  int aux2;


  tree x_comdat_group;


  section_hash_entry *x_section;

protected:

  void dump_base (FILE *);


  bool __attribute__ ((__used__)) verify_base (void);



  void unregister (void);




  struct symbol_priority_map *priority_info (void);


  bool call_for_symbol_and_aliases_1 (bool (*callback) (symtab_node *, void *),
          void *data,
          bool include_overwrite);
private:

  static bool set_section (symtab_node *n, void *s);


  static bool set_implicit_section (symtab_node *n, void *);


  static bool noninterposable_alias (symtab_node *node, void *data);


  symtab_node *ultimate_alias_target_1 (enum availability *avail = nullptr,
     symtab_node *ref = nullptr);


  const char *get_dump_name (bool asm_name_p) const;
};

inline void
symtab_node::checking_verify_symtab_nodes (void)
{
  if (global_options.x_flag_checking)
    symtab_node::verify_symtab_nodes ();
}
# 688 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
struct lto_file_decl_data;

extern const char * const cgraph_availability_names[];
extern const char * const ld_plugin_symbol_resolution_names[];
extern const char * const tls_model_names[];
# 707 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
struct cgraph_thunk_info {

  long fixed_offset;



  long virtual_value;



  long indirect_offset;



  tree alias;



  bool this_adjusting;







  bool virtual_offset_p;



  bool thunk_p;
};



struct ipa_replace_map
{

  tree new_tree;

  int parm_num;
};

struct cgraph_clone_info
{


  vec<ipa_replace_map *, va_gc> *tree_map;

  ipa_param_adjustments *param_adjustments;
# 768 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  vec<ipa_param_performed_split, va_gc> *performed_splits;
};

enum cgraph_simd_clone_arg_type
{
  SIMD_CLONE_ARG_TYPE_VECTOR,
  SIMD_CLONE_ARG_TYPE_UNIFORM,

  SIMD_CLONE_ARG_TYPE_LINEAR_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_VARIABLE_STEP,


  SIMD_CLONE_ARG_TYPE_LINEAR_REF_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_REF_VARIABLE_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_UVAL_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_UVAL_VARIABLE_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_VAL_CONSTANT_STEP,
  SIMD_CLONE_ARG_TYPE_LINEAR_VAL_VARIABLE_STEP,
  SIMD_CLONE_ARG_TYPE_MASK
};




struct cgraph_simd_clone_arg {


  tree orig_arg;



  tree orig_type;







  tree vector_arg;


  tree vector_type;
# 819 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  tree simd_array;



  enum cgraph_simd_clone_arg_type arg_type;





  long linear_step;


  unsigned int alignment;
};



struct cgraph_simd_clone {

  unsigned int simdlen;



  unsigned int nargs;


  unsigned int vecsize_int;


  unsigned int vecsize_float;




  machine_mode mask_mode;




  unsigned char vecsize_mangle;



  unsigned int inbranch : 1;


  cgraph_node *prev_clone, *next_clone;


  cgraph_node *origin;


  cgraph_simd_clone_arg args[1];
};


struct cgraph_function_version_info {

  cgraph_node *this_node;



  cgraph_function_version_info *prev;



  cgraph_function_version_info *next;
# 896 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  tree dispatcher_resolver;
};




enum cgraph_inline_failed_t {
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cif-code.def" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/cif-code.def"
CIF_OK,


CIF_UNSPECIFIED,



CIF_FUNCTION_NOT_CONSIDERED,



CIF_FUNCTION_NOT_OPTIMIZED,



CIF_BODY_NOT_AVAILABLE,



CIF_REDEFINED_EXTERN_INLINE,




CIF_FUNCTION_NOT_INLINABLE,



CIF_OVERWRITABLE,



CIF_FUNCTION_NOT_INLINE_CANDIDATE,



CIF_LARGE_FUNCTION_GROWTH_LIMIT,

CIF_LARGE_STACK_FRAME_GROWTH_LIMIT,

CIF_MAX_INLINE_INSNS_SINGLE_LIMIT,

CIF_MAX_INLINE_INSNS_AUTO_LIMIT,

CIF_INLINE_UNIT_GROWTH_LIMIT,



CIF_RECURSIVE_INLINING,



CIF_UNLIKELY_CALL,



CIF_NEVER_CALL,



CIF_NOT_DECLARED_INLINED,



CIF_LTO_MISMATCHED_DECLARATIONS,



CIF_VARIADIC_THUNK,



CIF_ORIGINALLY_INDIRECT_CALL,



CIF_INDIRECT_UNKNOWN_CALL,



CIF_EH_PERSONALITY,




CIF_NON_CALL_EXCEPTIONS,



CIF_TARGET_OPTION_MISMATCH,



CIF_OPTIMIZATION_MISMATCH,



CIF_USES_COMDAT_LOCAL,




CIF_SANITIZE_ATTRIBUTE_MISMATCH,




CIF_EXTERN_LIVE_ONLY_STATIC,




CIF_UNREACHABLE,
# 904 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h" 2
  CIF_N_REASONS
};

enum cgraph_inline_failed_type_t
{
  CIF_FINAL_NORMAL = 0,
  CIF_FINAL_ERROR
};

struct cgraph_edge;

struct cgraph_edge_hasher : ggc_ptr_hash<cgraph_edge>
{
  typedef gimple *compare_type;

  static hashval_t hash (cgraph_edge *);
  static hashval_t hash (gimple *);
  static bool equal (cgraph_edge *, gimple *);
};




struct cgraph_node : public symtab_node
{
  friend class symbol_table;


  explicit cgraph_node (int uid)
    : symtab_node (SYMTAB_FUNCTION), callees (nullptr), callers (nullptr),
      indirect_calls (nullptr), origin (nullptr), nested (nullptr), next_nested (nullptr),
      next_sibling_clone (nullptr), prev_sibling_clone (nullptr), clones (nullptr),
      clone_of (nullptr), call_site_hash (nullptr), former_clone_of (nullptr),
      simdclone (nullptr), simd_clones (nullptr), ipa_transforms_to_apply (vNULL),
      inlined_to (nullptr), rtl (nullptr), clone (), thunk (),
      count (profile_count::uninitialized ()),
      count_materialization_scale (10000), profile_id (0),
      unit_id (0), tp_first_run (0), used_as_abstract_origin (false),
      lowered (false), process (false), frequency (NODE_FREQUENCY_NORMAL),
      only_called_at_startup (false), only_called_at_exit (false),
      tm_clone (false), dispatcher_function (false), calls_comdat_local (false),
      icf_merged (false), nonfreeing_fn (false), merged_comdat (false),
      merged_extern_inline (false), parallelized_function (false),
      split_part (false), indirect_call_target (false), local (false),
      versionable (false), can_change_signature (false),
      redefined_extern_inline (false), tm_may_enter_irr (false),
      ipcp_clone (false), declare_variant_alt (false),
      calls_declare_variant_alt (false), m_uid (uid), m_summary_id (-1)
  {}





  bool remove_symbol_and_inline_clones (cgraph_node *forbidden_node = nullptr);



  void record_stmt_references (gimple *stmt);






  void set_call_stmt_including_clones (gimple *old_stmt, gcall *new_stmt,
           bool update_speculative = true);






  cgraph_node *function_symbol (enum availability *avail = nullptr,
    struct symtab_node *ref = nullptr);







  cgraph_node *function_or_virtual_thunk_symbol
    (enum availability *avail = nullptr,
     struct symtab_node *ref = nullptr);
# 1006 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  cgraph_node *create_clone (tree decl, profile_count count,
        bool update_original,
        vec<cgraph_edge *> redirect_callers,
        bool call_duplication_hook,
        cgraph_node *new_inlined_to,
        ipa_param_adjustments *param_adjustments,
        const char *suffix = nullptr);




  cgraph_node *create_virtual_clone (vec<cgraph_edge *> redirect_callers,
         vec<ipa_replace_map *, va_gc> *tree_map,
         ipa_param_adjustments *param_adjustments,
         const char * suffix, unsigned num_suffix);



  void remove_from_clone_tree ();



  cgraph_node *find_replacement (void);
# 1043 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  cgraph_node *create_version_clone (tree new_decl,
        vec<cgraph_edge *> redirect_callers,
        bitmap bbs_to_copy,
        const char *suffix = nullptr);
# 1071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  cgraph_node *create_version_clone_with_body
    (vec<cgraph_edge *> redirect_callers,
     vec<ipa_replace_map *, va_gc> *tree_map,
     ipa_param_adjustments *param_adjustments,
     bitmap bbs_to_copy, basic_block new_entry_block, const char *clone_name,
     tree target_attributes = (tree) nullptr);



  cgraph_function_version_info *insert_new_function_version (void);


  cgraph_function_version_info *function_version (void);



  void analyze (void);




  cgraph_node * create_thunk (tree alias, tree, bool this_adjusting,
         long fixed_offset,
         long virtual_value,
         long indirect_offset,
         tree virtual_offset,
         tree real_alias);



  inline cgraph_node *get_alias_target (void);







  cgraph_node *ultimate_alias_target (availability *availability = nullptr,
          symtab_node *ref = nullptr);






  bool expand_thunk (bool output_asm_thunks, bool force_gimple_thunk);



  void expand_all_artificial_thunks ();


  void assemble_thunks_and_aliases (void);


  void expand (void);







  void reset (void);



  void create_wrapper (cgraph_node *target);


  void __attribute__ ((__used__)) verify_node (void);


  void remove (void);


  void dump (FILE *f);


  void dump_graphviz (FILE *f);


  void __attribute__ ((__used__)) debug (void);



  bool get_untransformed_body (void);




  bool get_body (void);





  void release_body (bool keep_arguments = false);


  struct function *get_fun () const;


  void unnest (void);


  void make_local (void);


  void mark_address_taken (void);


  void set_fini_priority (priority_type priority);


  priority_type get_fini_priority (void);


  cgraph_edge *create_edge (cgraph_node *callee,
       gcall *call_stmt, profile_count count,
       bool cloning_p = false);




  cgraph_edge *create_indirect_edge (gcall *call_stmt, int ecf_flags,
         profile_count count,
         bool cloning_p = false);




  void create_edge_including_clones (cgraph_node *callee,
         gimple *old_stmt, gcall *stmt,
         profile_count count,
         cgraph_inline_failed_t reason);



  cgraph_edge *get_edge (gimple *call_stmt);



  vec<cgraph_edge *> collect_callers (void);


  void remove_callers (void);


  void remove_callees (void);



  enum availability get_availability (symtab_node *ref = nullptr);



  bool set_nothrow_flag (bool nothrow);



  bool set_malloc_flag (bool malloc_p);
# 1244 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  bool set_const_flag (bool set_const, bool looping);







  bool set_pure_flag (bool pure, bool looping);





  bool call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,
            void *),
        void *data, bool include_overwritable);





  bool call_for_symbol_thunks_and_aliases (bool (*callback) (cgraph_node *node,
            void *data),
        void *data,
        bool include_overwritable,
        bool exclude_virtual_thunks = false);



  inline void mark_force_output (void);


  bool local_p (void);





  bool can_be_local_p (void);



  bool cannot_return_p (void);





  bool only_called_directly_p (void);




  inline bool only_called_directly_or_aliased_p (void);
# 1316 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  bool will_be_removed_from_program_if_no_direct_calls_p
  (bool will_inline = false);




  bool can_remove_if_no_direct_calls_and_refs_p (void);





  bool can_remove_if_no_direct_calls_p (bool will_inline = false);






  inline bool has_gimple_body_p (void);


  inline bool former_thunk_p (void);



  bool check_calls_comdat_local_p ();


  bool optimize_for_size_p (void);


  static void dump_cgraph (FILE *f);


  void maybe_release_dominators ();


  static inline
  void debug_cgraph (void)
  {
    dump_cgraph (
# 1357 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h" 3 4
                stderr
# 1357 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
                      );
  }


  inline int get_uid ()
  {
    return m_uid;
  }


  inline int get_summary_id ()
  {
    return m_summary_id;
  }



  static void record_function_versions (tree decl1, tree decl2);



  static void delete_function_version_by_decl (tree decl);
# 1391 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  static void add_new_function (tree fndecl, bool lowered);


  static inline cgraph_node *get (const_tree decl)
  {
    ((void)(!(((enum tree_code) (decl)->base.code) == FUNCTION_DECL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 1396, __FUNCTION__), 0 : 0));
    return dyn_cast <cgraph_node *> (symtab_node::get (decl));
  }





  static void finalize_function (tree, bool);


  static cgraph_node * create (tree decl);



  static cgraph_node * get_create (tree);


  static cgraph_node *local_info_node (tree decl);


  static struct cgraph_rtl_info *rtl_info (const_tree);



  static cgraph_node *get_for_asmname (tree asmname);






  static cgraph_node * create_same_body_alias (tree alias, tree decl);


  static void __attribute__ ((__used__)) verify_cgraph_nodes (void);


  static inline void checking_verify_cgraph_nodes (void);


  static bool make_local (cgraph_node *node, void *);




  static cgraph_node *create_alias (tree alias, tree target);


  static bool has_thunk_p (cgraph_node *node, void *);

  cgraph_edge *callees;
  cgraph_edge *callers;


  cgraph_edge *indirect_calls;

  cgraph_node *origin;

  cgraph_node *nested;

  cgraph_node *next_nested;

  cgraph_node *next_sibling_clone;
  cgraph_node *prev_sibling_clone;
  cgraph_node *clones;
  cgraph_node *clone_of;


  hash_table<cgraph_edge_hasher> * call_site_hash;

  tree former_clone_of;



  cgraph_simd_clone *simdclone;

  cgraph_node *simd_clones;




  vec<ipa_opt_pass> ipa_transforms_to_apply;



  cgraph_node *inlined_to;

  struct cgraph_rtl_info *rtl;
  cgraph_clone_info clone;
  cgraph_thunk_info thunk;


  profile_count count;


  int count_materialization_scale;

  unsigned int profile_id;

  int unit_id;

  int tp_first_run;



  unsigned used_as_abstract_origin : 1;

  unsigned lowered : 1;


  unsigned process : 1;


  enum node_frequency frequency : 2;

  unsigned only_called_at_startup : 1;

  unsigned only_called_at_exit : 1;




  unsigned tm_clone : 1;

  unsigned dispatcher_function : 1;


  unsigned calls_comdat_local : 1;

  unsigned icf_merged: 1;



  unsigned nonfreeing_fn : 1;

  unsigned merged_comdat : 1;

  unsigned merged_extern_inline : 1;

  unsigned parallelized_function : 1;

  unsigned split_part : 1;

  unsigned indirect_call_target : 1;


  unsigned local : 1;

  unsigned versionable : 1;


  unsigned can_change_signature : 1;


  unsigned redefined_extern_inline : 1;

  unsigned tm_may_enter_irr : 1;

  unsigned ipcp_clone : 1;


  unsigned declare_variant_alt : 1;

  unsigned calls_declare_variant_alt : 1;

private:

  int m_uid;


  int m_summary_id;


  bool call_for_symbol_and_aliases_1 (bool (*callback) (cgraph_node *,
              void *),
          void *data, bool include_overwritable);
};



struct cgraph_node_set_def
{
  hash_map<cgraph_node *, size_t> *map;
  vec<cgraph_node *> nodes;
};

typedef cgraph_node_set_def *cgraph_node_set;
typedef struct varpool_node_set_def *varpool_node_set;

struct varpool_node;



struct varpool_node_set_def
{
  hash_map<varpool_node *, size_t> * map;
  vec<varpool_node *> nodes;
};


struct cgraph_node_set_iterator
{
  cgraph_node_set set;
  unsigned index;
};


struct varpool_node_set_iterator
{
  varpool_node_set set;
  unsigned index;
};





class ipa_polymorphic_call_context {
public:



  long offset;
  long speculative_offset;
  tree outer_type;
  tree speculative_outer_type;

  unsigned maybe_in_construction : 1;

  unsigned maybe_derived_type : 1;


  unsigned speculative_maybe_derived_type : 1;


  unsigned invalid : 1;

  unsigned dynamic : 1;


  ipa_polymorphic_call_context ();

  ipa_polymorphic_call_context (cgraph_edge *e);



  ipa_polymorphic_call_context (tree cst, tree otr_type = nullptr,
    long offset = 0);



  ipa_polymorphic_call_context (tree fndecl, tree ref, gimple *stmt,
    tree *instance = nullptr);



  bool get_dynamic_type (tree, tree, tree, gimple *, unsigned *);


  void clear_speculation ();



  void clear_outer_type (tree otr_type = nullptr);
# 1672 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  bool restrict_to_inner_class (tree otr_type,
    bool consider_placement_new = true,
    bool consider_bases = true);


  void offset_by (long);


  void possible_dynamic_type_change (bool, tree otr_type = nullptr);




  bool combine_with (ipa_polymorphic_call_context, tree otr_type = nullptr);
  bool meet_with (ipa_polymorphic_call_context, tree otr_type = nullptr);


  bool useless_p () const;

  bool equal_to (const ipa_polymorphic_call_context &x) const;



  void dump (FILE *f, bool newline = true) const;
  void __attribute__ ((__used__)) debug () const;


  void stream_out (struct output_block *) const;
  void stream_in (class lto_input_block *, class data_in *data_in);

private:
  bool combine_speculation_with (tree, long, bool, tree);
  bool meet_speculation_with (tree, long, bool, tree);
  void set_by_decl (tree, long);
  bool set_by_invariant (tree, tree, long);
  bool speculation_consistent_p (tree, long, bool, tree) const;
  void make_speculative (tree otr_type = nullptr);
};



class cgraph_indirect_call_info
{
public:


  long offset;

  ipa_polymorphic_call_context context;

  long otr_token;

  tree otr_type;

  int param_index;

  int ecf_flags;


  unsigned num_speculative_call_targets : 16;



  unsigned polymorphic : 1;


  unsigned agg_contents : 1;

  unsigned member_ptr : 1;


  unsigned by_ref : 1;




  unsigned guaranteed_unmodified : 1;


  unsigned vptr_changed : 1;
};

class
               cgraph_edge
{
public:
  friend struct cgraph_node;
  friend class symbol_table;


  static void remove (cgraph_edge *edge);





  static cgraph_edge *set_call_stmt (cgraph_edge *e, gcall *new_stmt,
         bool update_speculative = true);



  void redirect_callee (cgraph_node *n);





  void redirect_callee_duplicating_thunks (cgraph_node *n);





  static cgraph_edge *make_direct (cgraph_edge *edge, cgraph_node *callee);






  cgraph_edge *make_speculative (cgraph_node *n2, profile_count direct_count,
     unsigned int speculative_id = 0);
# 1817 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  cgraph_edge *first_speculative_call_target ();






  cgraph_edge *next_speculative_call_target ()
  {
    cgraph_edge *e = this;
    ((void)(!(speculative && callee) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 1827, __FUNCTION__), 0 : 0));

    if (e->next_callee && e->next_callee->speculative
 && e->next_callee->call_stmt == e->call_stmt
 && e->next_callee->lto_stmt_uid == e->lto_stmt_uid)
      return e->next_callee;
    return nullptr;
  }



  cgraph_edge *speculative_call_indirect_edge ()
  {
    ((void)(!(speculative) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 1840, __FUNCTION__), 0 : 0));
    if (!callee)
      return this;
    for (cgraph_edge *e2 = caller->indirect_calls;
  true; e2 = e2->next_callee)
      if (e2->speculative
   && call_stmt == e2->call_stmt
   && lto_stmt_uid == e2->lto_stmt_uid)
 return e2;
  }






  cgraph_edge *speculative_call_for_target (cgraph_node *);



  ipa_ref *speculative_call_target_ref ()
  {
    ipa_ref *ref;

    ((void)(!(speculative) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 1864, __FUNCTION__), 0 : 0));
    for (unsigned int i = 0; caller->iterate_reference (i, ref); i++)
      if (ref->speculative && ref->speculative_id == speculative_id
   && ref->stmt == (gimple *)call_stmt
   && ref->lto_stmt_uid == lto_stmt_uid)
 return ref;
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 1870, __FUNCTION__));
  }
# 1888 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  static cgraph_edge *resolve_speculation (cgraph_edge *edge,
        tree callee_decl = nullptr);
# 1905 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  static gimple *redirect_call_stmt_to_callee (cgraph_edge *e);



  cgraph_edge * clone (cgraph_node *n, gcall *call_stmt, unsigned stmt_uid,
         profile_count num, profile_count den,
         bool update_original);


  bool verify_count ();




  bool cannot_lead_to_return_p (void);


  bool recursive_p (void);


  bool maybe_hot_p (void);


  inline int get_uid ()
  {
    return m_uid;
  }


  inline int get_summary_id ()
  {
    return m_summary_id;
  }



  static unsigned int rebuild_edges (void);



  static void rebuild_references (void);



  bool possibly_call_in_translation_unit_p (void);


  int num_speculative_call_targets_p (void);


  profile_count count;
  cgraph_node *caller;
  cgraph_node *callee;
  cgraph_edge *prev_caller;
  cgraph_edge *next_caller;
  cgraph_edge *prev_callee;
  cgraph_edge *next_callee;
  gcall *call_stmt;


  cgraph_indirect_call_info *indirect_info;
  void * aux;


  enum cgraph_inline_failed_t inline_failed;


  unsigned int lto_stmt_uid;


  unsigned int speculative_id : 16;

  unsigned int indirect_inlining_edge : 1;


  unsigned int indirect_unknown_callee : 1;


  unsigned int call_stmt_cannot_inline_p : 1;

  unsigned int can_throw_external : 1;
# 2003 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
  unsigned int speculative : 1;


  unsigned in_polymorphic_cdtor : 1;


  bool binds_to_current_def_p ();




  int frequency ();


  sreal sreal_frequency ();
private:

  int m_uid;


  int m_summary_id;


  void remove_caller (void);


  void remove_callee (void);



  void set_callee (cgraph_node *n);


  void dump_edge_flags (FILE *f);



  bool verify_corresponds_to_fndecl (tree decl);
};







struct varpool_node : public symtab_node
{

  explicit varpool_node ()
    : symtab_node (SYMTAB_VARIABLE), output (0), dynamically_initialized (0),
      tls_model (TLS_MODEL_NONE), used_by_single_function (0)
  {}


  void dump (FILE *f);


  void __attribute__ ((__used__)) debug (void);


  void remove (void);


  void remove_initializer (void);

  void analyze (void);


  availability get_availability (symtab_node *ref = nullptr);



  tree get_constructor (void);


  bool ctor_useable_for_folding_p (void);






  inline varpool_node *ultimate_alias_target
    (availability *availability = nullptr, symtab_node *ref = nullptr);


  inline varpool_node *get_alias_target (void);


  bool assemble_decl (void);





  void finalize_named_section_flags (void);




  bool call_for_symbol_and_aliases (bool (*callback) (varpool_node *, void *),
        void *data,
        bool include_overwritable);


  bool externally_visible_p (void);






  inline bool all_refs_explicit_p ();



  inline bool can_remove_if_no_refs_p (void);





  static void add (tree decl);


  static inline varpool_node *get (const_tree decl);




  static void finalize_decl (tree decl);



  static varpool_node * create_extra_name_alias (tree alias, tree decl);



  static varpool_node * create_alias (tree, tree);


  static void dump_varpool (FILE *f);


  static void __attribute__ ((__used__)) debug_varpool (void);


  static varpool_node *create_empty (void);


  static varpool_node *get_create (tree decl);


  static varpool_node *get_for_asmname (tree asmname);


  unsigned output : 1;



  unsigned dynamically_initialized : 1;

  enum tls_model tls_model : 3;





  unsigned used_by_single_function : 1;

private:

  void assemble_aliases (void);


  bool call_for_symbol_and_aliases_1 (bool (*callback) (varpool_node *, void *),
          void *data,
          bool include_overwritable);
};



struct asm_node {

  asm_node *next;

  tree asm_str;

  int order;
};



template <>
template <>
inline bool
is_a_helper <cgraph_node *>::test (symtab_node *p)
{
  return p && p->type == SYMTAB_FUNCTION;
}



template <>
template <>
inline bool
is_a_helper <varpool_node *>::test (symtab_node *p)
{
  return p && p->type == SYMTAB_VARIABLE;
}

typedef void (*cgraph_edge_hook)(cgraph_edge *, void *);
typedef void (*cgraph_node_hook)(cgraph_node *, void *);
typedef void (*varpool_node_hook)(varpool_node *, void *);
typedef void (*cgraph_2edge_hook)(cgraph_edge *, cgraph_edge *, void *);
typedef void (*cgraph_2node_hook)(cgraph_node *, cgraph_node *, void *);

struct cgraph_edge_hook_list;
struct cgraph_node_hook_list;
struct varpool_node_hook_list;
struct cgraph_2edge_hook_list;
struct cgraph_2node_hook_list;


struct symbol_priority_map {
  priority_type init;
  priority_type fini;
};

enum symtab_state
{

  PARSING,

  CONSTRUCTION,

  LTO_STREAMING,

  IPA,

  IPA_SSA,


  IPA_SSA_AFTER_INLINING,

  EXPANSION,

  FINISHED
};

struct asmname_hasher : ggc_ptr_hash <symtab_node>
{
  typedef const_tree compare_type;

  static hashval_t hash (symtab_node *n);
  static bool equal (symtab_node *n, const_tree t);
};

class symbol_table
{
public:
  friend struct symtab_node;
  friend struct cgraph_node;
  friend struct cgraph_edge;

  symbol_table ():
  cgraph_count (0), cgraph_max_uid (1), cgraph_max_summary_id (0),
  edges_count (0), edges_max_uid (1), edges_max_summary_id (0),
  cgraph_released_summary_ids (), edge_released_summary_ids (),
  nodes (nullptr), asmnodes (nullptr), asm_last_node (nullptr),
  order (0), max_unit (0), global_info_ready (false), state (PARSING),
  function_flags_ready (false), cpp_implicit_aliases_done (false),
  section_hash (nullptr), assembler_name_hash (nullptr), init_priority_hash (nullptr),
  dump_file (nullptr), ipa_clones_dump_file (nullptr), cloned_nodes (),
  m_first_edge_removal_hook (nullptr), m_first_cgraph_removal_hook (nullptr),
  m_first_edge_duplicated_hook (nullptr), m_first_cgraph_duplicated_hook (nullptr),
  m_first_cgraph_insertion_hook (nullptr), m_first_varpool_insertion_hook (nullptr),
  m_first_varpool_removal_hook (nullptr)
  {
  }


  void initialize (void);


  inline asm_node *finalize_toplevel_asm (tree asm_str);


  void finalize_compilation_unit (void);






  void process_same_body_aliases (void);


  void compile (void);




  void process_new_functions (void);






  void materialize_all_clones (void);


  inline void register_symbol (symtab_node *node);

  inline void
  clear_asm_symbols (void)
  {
    asmnodes = nullptr;
    asm_last_node = nullptr;
  }


  bool remove_unreachable_nodes (FILE *file);





  void remove_unreferenced_decls (void);


  inline void unregister (symtab_node *node);


  cgraph_node *create_empty (void);


  void release_symbol (cgraph_node *node);


  bool output_variables (void);



  void output_weakrefs (void);


  inline symtab_node *first_symbol (void);


  inline asm_node *
  first_asm_symbol (void)
  {
    return asmnodes;
  }


  inline symtab_node *first_defined_symbol (void);


  inline varpool_node *first_variable (void);


  inline varpool_node *next_variable (varpool_node *node);


  inline varpool_node *first_static_initializer (void);


  inline varpool_node *next_static_initializer (varpool_node *node);


  inline varpool_node *first_defined_variable (void);


  inline varpool_node *next_defined_variable (varpool_node *node);


  inline cgraph_node *first_defined_function (void);


  inline cgraph_node *next_defined_function (cgraph_node *node);


  inline cgraph_node *first_function (void);


  inline cgraph_node *next_function (cgraph_node *node);


  cgraph_node *first_function_with_gimple_body (void);


  inline cgraph_node *next_function_with_gimple_body (cgraph_node *node);


  cgraph_edge_hook_list *add_edge_removal_hook (cgraph_edge_hook hook,
      void *data);


  void remove_edge_removal_hook (cgraph_edge_hook_list *entry);


  cgraph_node_hook_list *add_cgraph_removal_hook (cgraph_node_hook hook,
        void *data);


  void remove_cgraph_removal_hook (cgraph_node_hook_list *entry);


  varpool_node_hook_list *add_varpool_removal_hook (varpool_node_hook hook,
          void *data);


  void remove_varpool_removal_hook (varpool_node_hook_list *entry);


  cgraph_node_hook_list *add_cgraph_insertion_hook (cgraph_node_hook hook,
          void *data);


  void remove_cgraph_insertion_hook (cgraph_node_hook_list *entry);


  varpool_node_hook_list *add_varpool_insertion_hook (varpool_node_hook hook,
            void *data);


  void remove_varpool_insertion_hook (varpool_node_hook_list *entry);


  cgraph_2edge_hook_list *add_edge_duplication_hook (cgraph_2edge_hook hook,
           void *data);

  void remove_edge_duplication_hook (cgraph_2edge_hook_list *entry);


  cgraph_2node_hook_list *add_cgraph_duplication_hook (cgraph_2node_hook hook,
             void *data);


  void remove_cgraph_duplication_hook (cgraph_2node_hook_list *entry);


  void call_edge_removal_hooks (cgraph_edge *e);


  void call_cgraph_insertion_hooks (cgraph_node *node);


  void call_cgraph_removal_hooks (cgraph_node *node);


  void call_cgraph_duplication_hooks (cgraph_node *node, cgraph_node *node2);


  void call_edge_duplication_hooks (cgraph_edge *cs1, cgraph_edge *cs2);


  void call_varpool_removal_hooks (varpool_node *node);


  void call_varpool_insertion_hooks (varpool_node *node);


  void symtab_prevail_in_asm_name_hash (symtab_node *node);


  void symtab_initialize_asm_name_hash (void);


  void change_decl_assembler_name (tree decl, tree name);


  void dump (FILE *f);


  void dump_graphviz (FILE *f);


  void __attribute__ ((__used__)) debug (void);


  inline int assign_summary_id (cgraph_node *node)
  {
    if (!cgraph_released_summary_ids.is_empty ())
      node->m_summary_id = cgraph_released_summary_ids.pop ();
    else
      node->m_summary_id = cgraph_max_summary_id++;

    return node->m_summary_id;
  }


  inline int assign_summary_id (cgraph_edge *edge)
  {
    if (!edge_released_summary_ids.is_empty ())
      edge->m_summary_id = edge_released_summary_ids.pop ();
    else
      edge->m_summary_id = edges_max_summary_id++;

    return edge->m_summary_id;
  }



  static bool assembler_names_equal_p (const char *name1, const char *name2);

  int cgraph_count;
  int cgraph_max_uid;
  int cgraph_max_summary_id;

  int edges_count;
  int edges_max_uid;
  int edges_max_summary_id;


  vec<int> cgraph_released_summary_ids;


  vec<int> edge_released_summary_ids;


  static char symbol_suffix_separator ();

  symtab_node* nodes;
  asm_node* asmnodes;
  asm_node* asm_last_node;




  int order;


  int max_unit;


  bool global_info_ready;

  enum symtab_state state;

  bool function_flags_ready;

  bool cpp_implicit_aliases_done;


  hash_table<section_name_hasher> * section_hash;


  hash_table<asmname_hasher> *assembler_name_hash;


  hash_map<symtab_node *, symbol_priority_map> *init_priority_hash;

  FILE* dump_file;

  FILE* ipa_clones_dump_file;

  hash_set <const cgraph_node *> cloned_nodes;

private:




  cgraph_edge *create_edge (cgraph_node *caller, cgraph_node *callee,
       gcall *call_stmt, profile_count count,
       bool indir_unknown_callee, bool cloning_p);


  void free_edge (cgraph_edge *e);


  void insert_to_assembler_name_hash (symtab_node *node, bool with_clones);


  void unlink_from_assembler_name_hash (symtab_node *node, bool with_clones);


  static hashval_t decl_assembler_name_hash (const_tree asmname);


  static bool decl_assembler_name_equal (tree decl, const_tree asmname);

  friend struct asmname_hasher;


  cgraph_edge_hook_list * m_first_edge_removal_hook;

  cgraph_node_hook_list * m_first_cgraph_removal_hook;

  cgraph_2edge_hook_list * m_first_edge_duplicated_hook;

  cgraph_2node_hook_list * m_first_cgraph_duplicated_hook;

  cgraph_node_hook_list * m_first_cgraph_insertion_hook;

  varpool_node_hook_list * m_first_varpool_insertion_hook;

  varpool_node_hook_list * m_first_varpool_removal_hook;
};

extern symbol_table *symtab;

extern vec<cgraph_node *> cgraph_new_nodes;

inline hashval_t
asmname_hasher::hash (symtab_node *n)
{
  return symbol_table::decl_assembler_name_hash
    (decl_assembler_name (n->decl));
}

inline bool
asmname_hasher::equal (symtab_node *n, const_tree t)
{
  return symbol_table::decl_assembler_name_equal (n->decl, t);
}


void cgraph_c_finalize (void);
void release_function_body (tree);
cgraph_indirect_call_info *cgraph_allocate_init_indirect_info (void);

void cgraph_update_edges_for_call_stmt (gimple *, tree, gimple *);
bool cgraph_function_possibly_inlined_p (tree);

const char* cgraph_inline_failed_string (cgraph_inline_failed_t);
cgraph_inline_failed_type_t cgraph_inline_failed_type (cgraph_inline_failed_t);


void cgraphunit_c_finalize (void);
int tp_first_run_node_cmp (const void *pa, const void *pb);



basic_block init_lowered_empty_function (tree, bool, profile_count);

tree thunk_adjust (gimple_stmt_iterator *, tree, bool, long, tree,
     long);


tree clone_function_name_numbered (const char *name, const char *suffix);
tree clone_function_name_numbered (tree decl, const char *suffix);
tree clone_function_name (const char *name, const char *suffix,
     unsigned long number);
tree clone_function_name (tree decl, const char *suffix,
     unsigned long number);
tree clone_function_name (tree decl, const char *suffix);

void tree_function_versioning (tree, tree, vec<ipa_replace_map *, va_gc> *,
          ipa_param_adjustments *,
          bool, bitmap, basic_block);

void dump_callgraph_transformation (const cgraph_node *original,
        const cgraph_node *clone,
        const char *suffix);

int compute_call_stmt_bb_frequency (tree, basic_block bb);
void record_references_in_initializer (tree, bool);


void cgraph_build_static_cdtor (char which, tree body, int priority);
bool ipa_discover_variable_flags (void);


tree ctor_for_folding (tree);


void initialize_inline_failed (struct cgraph_edge *);
bool speculation_useful_p (struct cgraph_edge *e, bool anticipate_inlining);



inline bool
symtab_node::real_symbol_p (void)
{
  cgraph_node *cnode;

  if (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 2685, __FUNCTION__))->decl_common.abstract_flag))
    return false;
  if (transparent_alias && definition)
    return false;
  if (!is_a <cgraph_node *> (this))
    return true;
  cnode = dyn_cast <cgraph_node *> (this);
  if (cnode->inlined_to)
    return false;
  return true;
}




static inline bool
decl_in_symtab_p (const_tree decl)
{
  return (((enum tree_code) (decl)->base.code) == FUNCTION_DECL
          || (((enum tree_code) (decl)->base.code) == VAR_DECL
       && (((decl)->base.static_flag) || ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 2705, __FUNCTION__))->decl_common.decl_flag_1))));
}

inline bool
symtab_node::in_same_comdat_group_p (symtab_node *target)
{
  symtab_node *source = this;

  if (cgraph_node *cn = dyn_cast <cgraph_node *> (target))
    {
      if (cn->inlined_to)
 source = cn->inlined_to;
    }
  if (cgraph_node *cn = dyn_cast <cgraph_node *> (target))
    {
      if (cn->inlined_to)
 target = cn->inlined_to;
    }

  return source->get_comdat_group () == target->get_comdat_group ();
}



inline symtab_node *
symtab_node::get_alias_target (void)
{
  ipa_ref *ref = nullptr;
  iterate_reference (0, ref);
  ((void)(!(ref->use == IPA_REF_ALIAS) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 2734, __FUNCTION__), 0 : 0));
  return ref->referred;
}



inline symtab_node *
symtab_node::next_defined_symbol (void)
{
  symtab_node *node1 = next;

  for (; node1; node1 = node1->next)
    if (node1->definition)
      return node1;

  return nullptr;
}



inline ipa_ref *
symtab_node::iterate_reference (unsigned i, ipa_ref *&ref)
{
  vec_safe_iterate (ref_list.references, i, &ref);

  return ref;
}



inline ipa_ref *
symtab_node::iterate_referring (unsigned i, ipa_ref *&ref)
{
  ref_list.referring.iterate (i, &ref);

  return ref;
}



inline ipa_ref *
symtab_node::iterate_direct_aliases (unsigned i, ipa_ref *&ref)
{
  ref_list.referring.iterate (i, &ref);

  if (ref && ref->use != IPA_REF_ALIAS)
    return nullptr;

  return ref;
}



inline bool
symtab_node::has_aliases_p (void)
{
  ipa_ref *ref = nullptr;

  return (iterate_direct_aliases (0, ref) != nullptr);
}




inline bool
resolution_used_from_other_file_p (enum ld_plugin_symbol_resolution resolution)
{
  return (resolution == LDPR_PREVAILING_DEF
   || resolution == LDPR_PREEMPTED_REG
   || resolution == LDPR_RESOLVED_EXEC
   || resolution == LDPR_RESOLVED_DYN);
}




inline bool
symtab_node::used_from_object_file_p (void)
{
  if (!((decl)->base.public_flag) || ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 2813, __FUNCTION__))->decl_common.decl_flag_1))
    return false;
  if (resolution_used_from_other_file_p (resolution))
    return true;
  return false;
}



inline varpool_node *
varpool_node::get (const_tree decl)
{
  ((void)(!(((enum tree_code) (decl)->base.code) == VAR_DECL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 2825, __FUNCTION__), 0 : 0));
  return dyn_cast<varpool_node *> (symtab_node::get (decl));
}



inline void
symbol_table::register_symbol (symtab_node *node)
{
  node->next = nodes;
  node->previous = nullptr;

  if (nodes)
    nodes->previous = node;
  nodes = node;

  node->order = order++;
}



asm_node *
symbol_table::finalize_toplevel_asm (tree asm_str)
{
  asm_node *node;

  node = ggc_cleared_alloc<asm_node> ();
  node->asm_str = asm_str;
  node->order = order++;
  node->next = nullptr;

  if (asmnodes == nullptr)
    asmnodes = node;
  else
    asm_last_node->next = node;

  asm_last_node = node;
  return node;
}


inline void
symbol_table::unregister (symtab_node *node)
{
  if (node->previous)
    node->previous->next = node->next;
  else
    nodes = node->next;

  if (node->next)
    node->next->previous = node->previous;

  node->next = nullptr;
  node->previous = nullptr;
}



inline void
symbol_table::release_symbol (cgraph_node *node)
{
  cgraph_count--;
  if (node->m_summary_id != -1)
    cgraph_released_summary_ids.safe_push (node->m_summary_id);
  ggc_free (node);
}


inline symtab_node *
symbol_table::first_symbol (void)
{
  return nodes;
}






inline symtab_node *
symbol_table::first_defined_symbol (void)
{
  symtab_node *node;

  for (node = nodes; node; node = node->next)
    if (node->definition)
      return node;

  return nullptr;
}







inline varpool_node *
symbol_table::first_variable (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    if (varpool_node *vnode = dyn_cast <varpool_node *> (node))
      return vnode;
  return nullptr;
}


inline varpool_node *
symbol_table::next_variable (varpool_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    if (varpool_node *vnode1 = dyn_cast <varpool_node *> (node1))
      return vnode1;
  return nullptr;
}







inline varpool_node *
symbol_table::first_static_initializer (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      varpool_node *vnode = dyn_cast <varpool_node *> (node);
      if (vnode && ((contains_struct_check ((node->decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 2956, __FUNCTION__))->decl_common.initial))
 return vnode;
    }
  return nullptr;
}


inline varpool_node *
symbol_table::next_static_initializer (varpool_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      varpool_node *vnode1 = dyn_cast <varpool_node *> (node1);
      if (vnode1 && ((contains_struct_check ((node1->decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 2970, __FUNCTION__))->decl_common.initial))
 return vnode1;
    }
  return nullptr;
}







inline varpool_node *
symbol_table::first_defined_variable (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      varpool_node *vnode = dyn_cast <varpool_node *> (node);
      if (vnode && vnode->definition)
 return vnode;
    }
  return nullptr;
}


inline varpool_node *
symbol_table::next_defined_variable (varpool_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      varpool_node *vnode1 = dyn_cast <varpool_node *> (node1);
      if (vnode1 && vnode1->definition)
 return vnode1;
    }
  return nullptr;
}






inline cgraph_node *
symbol_table::first_defined_function (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      cgraph_node *cn = dyn_cast <cgraph_node *> (node);
      if (cn && cn->definition)
 return cn;
    }
  return nullptr;
}


inline cgraph_node *
symbol_table::next_defined_function (cgraph_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      cgraph_node *cn1 = dyn_cast <cgraph_node *> (node1);
      if (cn1 && cn1->definition)
 return cn1;
    }
  return nullptr;
}







inline cgraph_node *
symbol_table::first_function (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    if (cgraph_node *cn = dyn_cast <cgraph_node *> (node))
      return cn;
  return nullptr;
}


inline cgraph_node *
symbol_table::next_function (cgraph_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    if (cgraph_node *cn1 = dyn_cast <cgraph_node *> (node1))
      return cn1;
  return nullptr;
}


inline cgraph_node *
symbol_table::first_function_with_gimple_body (void)
{
  symtab_node *node;
  for (node = nodes; node; node = node->next)
    {
      cgraph_node *cn = dyn_cast <cgraph_node *> (node);
      if (cn && cn->has_gimple_body_p ())
 return cn;
    }
  return nullptr;
}


inline cgraph_node *
symbol_table::next_function_with_gimple_body (cgraph_node *node)
{
  symtab_node *node1 = node->next;
  for (; node1; node1 = node1->next)
    {
      cgraph_node *cn1 = dyn_cast <cgraph_node *> (node1);
      if (cn1 && cn1->has_gimple_body_p ())
 return cn1;
    }
  return nullptr;
}
# 3107 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
inline bool
cgraph_node::has_gimple_body_p (void)
{
  return definition && !thunk.thunk_p && !alias;
}



inline bool
cgraph_node::former_thunk_p (void)
{
  return (!thunk.thunk_p
   && (thunk.fixed_offset
       || thunk.virtual_offset_p
       || thunk.indirect_offset));
}
# 3133 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
struct constant_descriptor_tree {

  rtx rtl;


  tree value;




  hashval_t hash;
};





inline bool
cgraph_node::only_called_directly_or_aliased_p (void)
{
  ((void)(!(!inlined_to) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3153, __FUNCTION__), 0 : 0));
  return (!force_output && !address_taken
   && !ifunc_resolver
   && !used_from_other_partition
   && !((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3157, __FUNCTION__))->decl_common.virtual_flag)
   && !((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3158, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_ctor_flag)
   && !((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3159, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_dtor_flag)
   && !used_from_object_file_p ()
   && !externally_visible);
}




inline bool
cgraph_node::can_remove_if_no_direct_calls_and_refs_p (void)
{
  ((void)(!(!inlined_to) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3170, __FUNCTION__), 0 : 0));

  if (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3172, __FUNCTION__))->decl_common.decl_flag_1))
    return true;

  if (force_output || used_from_other_partition)
    return false;
  if (((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3177, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_ctor_flag)
      || ((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3178, __FUNCTION__, (FUNCTION_DECL)))->function_decl.static_dtor_flag))
    return false;

  if (externally_visible
      && ((!((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3182, __FUNCTION__))->decl_with_vis.comdat_flag) || ifunc_resolver)
   || forced_by_abi
   || used_from_object_file_p ()))
    return false;
  return true;
}



inline void
cgraph_node::checking_verify_cgraph_nodes (void)
{
  if (global_options.x_flag_checking)
    cgraph_node::verify_cgraph_nodes ();
}




inline bool
varpool_node::can_remove_if_no_refs_p (void)
{
  if (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3204, __FUNCTION__))->decl_common.decl_flag_1))
    return true;
  return (!force_output && !used_from_other_partition
   && ((((contains_struct_check ((decl), (TS_DECL_WITH_VIS), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3207, __FUNCTION__))->decl_with_vis.comdat_flag)
        && !forced_by_abi
        && !used_from_object_file_p ())
       || !externally_visible
       || ((tree_check3 ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3211, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2)));
}






inline bool
varpool_node::all_refs_explicit_p ()
{
  return (definition
   && !externally_visible
   && !used_from_other_partition
   && !force_output);
}

struct tree_descriptor_hasher : ggc_ptr_hash<constant_descriptor_tree>
{
  static hashval_t hash (constant_descriptor_tree *);
  static bool equal (constant_descriptor_tree *, constant_descriptor_tree *);
};


hash_table<tree_descriptor_hasher> *constant_pool_htab (void);



inline cgraph_node *
cgraph_node::get_alias_target (void)
{
  return dyn_cast <cgraph_node *> (symtab_node::get_alias_target ());
}



inline varpool_node *
varpool_node::get_alias_target (void)
{
  return dyn_cast <varpool_node *> (symtab_node::get_alias_target ());
}







inline symtab_node *
symtab_node::ultimate_alias_target (enum availability *availability,
        symtab_node *ref)
{
  if (!alias)
    {
      if (availability)
 *availability = get_availability (ref);
      return this;
    }

  return ultimate_alias_target_1 (availability, ref);
}







inline cgraph_node *
cgraph_node::ultimate_alias_target (enum availability *availability,
        symtab_node *ref)
{
  cgraph_node *n = dyn_cast <cgraph_node *>
    (symtab_node::ultimate_alias_target (availability, ref));
  if (!n && availability)
    *availability = AVAIL_NOT_AVAILABLE;
  return n;
}







inline varpool_node *
varpool_node::ultimate_alias_target (availability *availability,
         symtab_node *ref)
{
  varpool_node *n = dyn_cast <varpool_node *>
    (symtab_node::ultimate_alias_target (availability, ref));

  if (!n && availability)
    *availability = AVAIL_NOT_AVAILABLE;
  return n;
}




inline void
cgraph_edge::set_callee (cgraph_node *n)
{
  prev_caller = nullptr;
  if (n->callers)
    n->callers->prev_caller = this;
  next_caller = n->callers;
  n->callers = this;
  callee = n;
}



inline bool
cgraph_edge::recursive_p (void)
{
  cgraph_node *c = callee->ultimate_alias_target ();
  if (caller->inlined_to)
    return caller->inlined_to->decl == c->decl;
  else
    return caller->decl == c->decl;
}



inline void
cgraph_edge::remove_callee (void)
{
  ((void)(!(!indirect_unknown_callee) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3339, __FUNCTION__), 0 : 0));
  if (prev_caller)
    prev_caller->next_caller = next_caller;
  if (next_caller)
    next_caller->prev_caller = prev_caller;
  if (!prev_caller)
    callee->callers = next_caller;
}



inline bool
cgraph_edge::binds_to_current_def_p ()
{
  if (callee)
    return callee->binds_to_current_def_p (caller);
  else
    return false;
}





inline int
cgraph_edge::frequency ()
{
  return count.to_cgraph_frequency (caller->inlined_to
        ? caller->inlined_to->count
        : caller->count);
}



static inline bool
decl_is_tm_clone (const_tree fndecl)
{
  cgraph_node *n = cgraph_node::get (fndecl);
  if (n)
    return n->tm_clone;
  return false;
}




inline void
cgraph_node::mark_force_output (void)
{
  force_output = 1;
  ((void)(!(!inlined_to) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3389, __FUNCTION__), 0 : 0));
}



inline bool
cgraph_node::optimize_for_size_p (void)
{
  if ((opts_for_fn (decl)->x_optimize_size))
    return true;
  if (frequency == NODE_FREQUENCY_UNLIKELY_EXECUTED)
    return true;
  else
    return false;
}




inline symtab_node *
symtab_node::get_create (tree node)
{
  if (((enum tree_code) (node)->base.code) == VAR_DECL)
    return varpool_node::get_create (node);
  else
    return cgraph_node::get_create (node);
}



inline enum availability
symtab_node::get_availability (symtab_node *ref)
{
  if (is_a <cgraph_node *> (this))
    return dyn_cast <cgraph_node *> (this)->get_availability (ref);
  else
    return dyn_cast <varpool_node *> (this)->get_availability (ref);
}




inline bool
symtab_node::call_for_symbol_and_aliases (bool (*callback) (symtab_node *,
           void *),
       void *data,
       bool include_overwritable)
{
  if (include_overwritable
      || get_availability () > AVAIL_INTERPOSABLE)
    {
      if (callback (this, data))
        return true;
    }
  if (has_aliases_p ())
    return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);
  return false;
}





inline bool
cgraph_node::call_for_symbol_and_aliases (bool (*callback) (cgraph_node *,
           void *),
       void *data,
       bool include_overwritable)
{
  if (include_overwritable
      || get_availability () > AVAIL_INTERPOSABLE)
    {
      if (callback (this, data))
        return true;
    }
  if (has_aliases_p ())
    return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);
  return false;
}





inline bool
varpool_node::call_for_symbol_and_aliases (bool (*callback) (varpool_node *,
            void *),
        void *data,
        bool include_overwritable)
{
  if (include_overwritable
      || get_availability () > AVAIL_INTERPOSABLE)
    {
      if (callback (this, data))
        return true;
    }
  if (has_aliases_p ())
    return call_for_symbol_and_aliases_1 (callback, data, include_overwritable);
  return false;
}



inline bool
ipa_ref::address_matters_p ()
{
  if (use != IPA_REF_ADDR)
    return false;

  if (is_a <varpool_node *> (referring)
      && ((contains_struct_check ((referring->decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3499, __FUNCTION__))->decl_common.virtual_flag))
    return false;
  return referred->address_can_be_compared_p ();
}



inline
ipa_polymorphic_call_context::ipa_polymorphic_call_context (cgraph_edge *e)
{
  ((void)(!(e->indirect_info->polymorphic) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3509, __FUNCTION__), 0 : 0));
  *this = e->indirect_info->context;
}



inline
ipa_polymorphic_call_context::ipa_polymorphic_call_context ()
{
  clear_speculation ();
  clear_outer_type ();
  invalid = false;
}



inline void
ipa_polymorphic_call_context::clear_speculation ()
{
  speculative_outer_type = nullptr;
  speculative_offset = 0;
  speculative_maybe_derived_type = false;
}




inline void
ipa_polymorphic_call_context::clear_outer_type (tree otr_type)
{
  outer_type = otr_type ? ((tree_class_check ((otr_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3539, __FUNCTION__))->type_common.main_variant) : nullptr;
  offset = 0;
  maybe_derived_type = true;
  maybe_in_construction = true;
  dynamic = true;
}



inline void
ipa_polymorphic_call_context::offset_by (long off)
{
  if (outer_type)
    offset += off;
  if (speculative_outer_type)
    speculative_offset += off;
}



inline bool
ipa_polymorphic_call_context::useless_p () const
{
  return (!outer_type && !speculative_outer_type);
}
# 3587 "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h"
static inline const char *
xstrdup_for_dump (const char *transient_str)
{
  return ggc_alloc_string ((transient_str), -1 );
}



inline bool
symtab_node::prevailing_p (void)
{
  return definition && ((!((decl)->base.public_flag) && !((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cgraph.h", 3598, __FUNCTION__))->decl_common.decl_flag_1))
    || previous_sharing_asm_name == nullptr);
}

extern symbol_table *saved_symtab;



namespace selftest {




class symbol_table_test
{
 public:

  symbol_table_test ();


  ~symbol_table_test ();
};

}
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/print-tree.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/print-tree.h"
extern void debug_tree (tree);
extern void debug_raw (const tree_node &ref);
extern void debug_raw (const tree_node *ptr);
extern void debug (const tree_node &ref);
extern void debug (const tree_node *ptr);
extern void debug_verbose (const tree_node &ref);
extern void debug_verbose (const tree_node *ptr);
extern void debug_head (const tree_node &ref);
extern void debug_head (const tree_node *ptr);
extern void debug_body (const tree_node &ref);
extern void debug_body (const tree_node *ptr);
extern void debug (vec<tree, va_gc> &ref);
extern void debug (vec<tree, va_gc> *ptr);
extern void debug_raw (vec<tree, va_gc> &ref);
extern void debug_raw (vec<tree, va_gc> *ptr);

extern void dump_addr (FILE*, const char *, const void *);
extern void print_node (FILE *, const char *, tree, int,
   bool brief_for_visited = true);
extern void print_node_brief (FILE *, const char *, const_tree, int);
extern void indent_to (FILE *, int);




extern void print_decl_identifier (FILE *, tree, int flags);
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h"
extern const struct attribute_spec *lookup_attribute_spec (const_tree);
extern void init_attributes (void);
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h"
extern tree decl_attributes (tree *, tree, int, tree = (tree) nullptr);

extern bool cxx11_attribute_p (const_tree);
extern tree get_attribute_name (const_tree);
extern tree get_attribute_namespace (const_tree);
extern void apply_tm_attr (tree, tree);
extern tree make_attribute (const char *, const char *, tree);

extern struct scoped_attributes* register_scoped_attributes (const struct attribute_spec *,
            const char *);

extern char *sorted_attr_string (tree);
extern bool common_function_versions (tree, tree);
extern char *make_unique_name (tree, const char *, bool);
extern tree make_dispatcher_decl (const tree);
extern bool is_function_default_version (const tree);







extern tree build_type_attribute_variant (tree, tree);
extern tree build_decl_attribute_variant (tree, tree);
extern tree build_type_attribute_qual_variant (tree, tree, int);

extern bool attribute_value_equal (const_tree, const_tree);




extern int comp_type_attributes (const_tree, const_tree);


extern tree merge_decl_attributes (tree, tree);
extern tree merge_type_attributes (tree, tree);




extern tree remove_attribute (const char *, tree);



extern tree merge_attributes (tree, tree);




extern void duplicate_one_attribute (tree *, tree, const char *);




extern void copy_attributes_to_builtin (tree);



extern tree merge_dllimport_decl_attributes (tree, tree);


extern tree handle_dll_attribute (tree *, tree, tree, int, bool *);

extern int attribute_list_equal (const_tree, const_tree);
extern int attribute_list_contained (const_tree, const_tree);






extern tree private_lookup_attribute (const char *attr_name, size_t attr_len,
          tree list);

extern unsigned decls_mismatched_attributes (tree, tree, tree,
          const char* const[],
          pretty_printer*);

extern void maybe_diag_alias_attributes (tree, tree);




static inline tree
canonicalize_attr_name (tree attr_name)
{
  const size_t l = ((tree_check ((attr_name), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 121, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.len);
  const char *s = ((const char *) (tree_check ((attr_name), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 122, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

  if (l > 4 && s[0] == '_' && s[1] == '_' && s[l - 1] == '_' && s[l - 2] == '_')
    return get_identifier_with_length (s + 2, l - 4);

  return attr_name;
}




static inline bool
cmp_attribs (const char *attr1, size_t attr1_len,
      const char *attr2, size_t attr2_len)
{
  return attr1_len == attr2_len && strncmp (attr1, attr2, attr1_len) == 0;
}



static inline bool
cmp_attribs (const char *attr1, const char *attr2)
{
  return cmp_attribs (attr1, strlen (attr1), attr2, strlen (attr2));
}




static inline bool
is_attribute_p (const char *attr_name, const_tree ident)
{
  return cmp_attribs (attr_name, strlen (attr_name),
        ((const char *) (tree_check ((ident), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 155, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str), ((tree_check ((ident), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 155, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.len));
}
# 166 "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h"
static inline tree
lookup_attribute (const char *attr_name, tree list)
{
  ((void)(!(attr_name[0] != '_') ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 169, __FUNCTION__), 0 : 0));

  if (list == (tree) nullptr)
    return (tree) nullptr;
  else
    {
      size_t attr_len = strlen (attr_name);



      return private_lookup_attribute (attr_name, attr_len, list);
    }
}






static inline tree
lookup_attribute_by_prefix (const char *attr_name, tree list)
{
  ((void)(!(attr_name[0] != '_') ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 191, __FUNCTION__), 0 : 0));

  if (list == (tree) nullptr)
    return (tree) nullptr;
  else
    {
      size_t attr_len = strlen (attr_name);
      while (list)
 {
   size_t ident_len = ((tree_check ((get_attribute_name (list)), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 200, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.len);

   if (attr_len > ident_len)
     {
       list = ((contains_struct_check ((list), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 204, __FUNCTION__))->common.chain);
       continue;
     }

   const char *p = ((const char *) (tree_check ((get_attribute_name (list)), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 208, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
   ((void)(!(attr_len == 0 || p[0] != '_') ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 209, __FUNCTION__), 0 : 0));

   if (strncmp (attr_name, p, attr_len) == 0)
     break;

   list = ((contains_struct_check ((list), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/attribs.h", 214, __FUNCTION__))->common.chain);
 }

      return list;
    }
}





struct attr_access
{

  tree ptr;

  tree size;


  unsigned ptrarg;
  unsigned sizarg;


  enum access_mode { none, read_only, write_only, read_write };
  access_mode mode;
};


struct rdwr_access_hash: int_hash<int, -1> { };



struct attr_access;
typedef hash_map<rdwr_access_hash, attr_access> rdwr_map;

extern void init_attr_rdwr_indices (rdwr_map *, tree);
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/trans-mem.h" 1
# 42 "/home/giulianob/gcc_git_gnu/gcc/gcc/trans-mem.h"
extern void compute_transaction_bits (void);
extern bool is_tm_ending (gimple *);
extern tree build_tm_abort_call (location_t, bool);
extern bool is_tm_safe (const_tree);
extern bool is_tm_pure (const_tree);
extern bool is_tm_may_cancel_outer (tree);
extern bool is_tm_ending_fndecl (tree);
extern void record_tm_replacement (tree, tree);
extern void tm_malloc_replacement (tree);
# 33 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h" 1
# 22 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h"
# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4


# 31 "/usr/include/locale.h" 3 4
extern "C" {
# 51 "/usr/include/locale.h" 3 4
struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 118 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();
# 141 "/usr/include/locale.h" 3 4
extern locale_t newlocale (int __category_mask, const char *__locale,
      locale_t __base) throw ();
# 176 "/usr/include/locale.h" 3 4
extern locale_t duplocale (locale_t __dataset) throw ();



extern void freelocale (locale_t __dataset) throw ();






extern locale_t uselocale (locale_t __dataset) throw ();







}
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h" 2







# 1 "/usr/include/libintl.h" 1 3 4
# 34 "/usr/include/libintl.h" 3 4
extern "C" {




extern char *gettext (const char *__msgid)
     throw () __attribute__ ((__format_arg__ (1)));



extern char *dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dgettext (const char *__domainname, const char *__msgid)
     throw () __attribute__ ((__format_arg__ (2)));



extern char *dcgettext (const char *__domainname,
   const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));
extern char *__dcgettext (const char *__domainname,
     const char *__msgid, int __category)
     throw () __attribute__ ((__format_arg__ (2)));




extern char *ngettext (const char *__msgid1, const char *__msgid2,
         unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (1))) __attribute__ ((__format_arg__ (2)));



extern char *dngettext (const char *__domainname, const char *__msgid1,
   const char *__msgid2, unsigned long int __n)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));



extern char *dcngettext (const char *__domainname, const char *__msgid1,
    const char *__msgid2, unsigned long int __n,
    int __category)
     throw () __attribute__ ((__format_arg__ (2))) __attribute__ ((__format_arg__ (3)));





extern char *textdomain (const char *__domainname) throw ();



extern char *bindtextdomain (const char *__domainname,
        const char *__dirname) throw ();



extern char *bind_textdomain_codeset (const char *__domainname,
          const char *__codeset) throw ();
# 121 "/usr/include/libintl.h" 3 4
}
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h" 2

# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h"
extern void gcc_init_libintl (void);
extern size_t gcc_gettext_width (const char *);
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/intl.h"
extern char *get_spaces (const char *);

extern const char *open_quote;
extern const char *close_quote;
extern const char *locale_encoding;
extern bool locale_utf8;
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/decl.h" 1
# 21 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/decl.h"
enum decl_context
{ NORMAL,
  FUNCDEF,
  PARM,
  TPARM,
  CATCHPARM,
  FIELD,
  BITFIELD,
  TYPENAME,
  TEMPLATE_TYPE_ARG,
  MEMFUNCDEF
};


extern tree grokdeclarator (const cp_declarator *,
       cp_decl_specifier_seq *,
       enum decl_context, int, tree*);
extern void name_unnamed_type (tree, tree);






enum deprecated_states {
  DEPRECATED_NORMAL,
  DEPRECATED_SUPPRESS
};

extern enum deprecated_states deprecated_state;
# 35 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-objc.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-objc.h"
enum objc_ivar_visibility_kind {
  OBJC_IVAR_VIS_PROTECTED = 0,
  OBJC_IVAR_VIS_PUBLIC = 1,
  OBJC_IVAR_VIS_PRIVATE = 2,
  OBJC_IVAR_VIS_PACKAGE = 3
};





extern void objc_write_global_declarations (void);
extern tree objc_is_class_name (tree);
extern tree objc_is_object_ptr (tree);
extern void objc_check_decl (tree);
extern void objc_check_global_decl (tree);
extern tree objc_common_type (tree, tree);
extern bool objc_compare_types (tree, tree, int, tree);
extern bool objc_have_common_type (tree, tree, int, tree);
extern bool objc_diagnose_private_ivar (tree);
extern void objc_volatilize_decl (tree);
extern tree objc_rewrite_function_call (tree, tree);
extern tree objc_message_selector (void);
extern tree objc_lookup_ivar (tree, tree);
extern void objc_clear_super_receiver (void);
extern int objc_is_public (tree, tree);
extern tree objc_is_id (tree);
extern void objc_declare_alias (tree, tree);
extern void objc_declare_class (tree);
extern void objc_declare_protocol (tree, tree);
extern tree objc_build_message_expr (tree, tree);
extern tree objc_finish_message_expr (tree, tree, tree, tree*);
extern tree objc_build_selector_expr (location_t, tree);
extern tree objc_build_protocol_expr (tree);
extern tree objc_build_encode_expr (tree);
extern tree objc_build_string_object (tree);
extern tree objc_get_protocol_qualified_type (tree, tree);
extern tree objc_get_class_reference (tree);
extern tree objc_get_class_ivars (tree);
extern bool objc_detect_field_duplicates (bool);
extern void objc_start_class_interface (tree, tree, tree, tree);
extern void objc_start_category_interface (tree, tree, tree, tree);
extern void objc_start_protocol (tree, tree, tree);
extern void objc_continue_interface (void);
extern void objc_finish_interface (void);
extern void objc_start_class_implementation (tree, tree);
extern void objc_start_category_implementation (tree, tree);
extern void objc_continue_implementation (void);
extern void objc_finish_implementation (void);
extern void objc_set_visibility (objc_ivar_visibility_kind);
extern tree objc_build_method_signature (bool, tree, tree, tree, bool);
extern void objc_add_method_declaration (bool, tree, tree);
extern bool objc_start_method_definition (bool, tree, tree, tree);
extern void objc_finish_method_definition (tree);
extern void objc_add_instance_variable (tree);
extern tree objc_build_keyword_decl (tree, tree, tree, tree);
extern tree objc_build_throw_stmt (location_t, tree);
extern void objc_begin_try_stmt (location_t, tree);
extern tree objc_finish_try_stmt (void);
extern void objc_begin_catch_clause (tree);
extern void objc_finish_catch_clause (void);
extern void objc_build_finally_clause (location_t, tree);
extern tree objc_build_synchronized (location_t, tree, tree);
extern int objc_static_init_needed_p (void);
extern tree objc_generate_static_init_call (tree);
extern tree objc_generate_write_barrier (tree, enum tree_code, tree);
extern void objc_set_method_opt (bool);
extern void objc_finish_foreach_loop (location_t, tree, tree, tree, tree, tree);
extern bool objc_method_decl (enum tree_code);
extern void objc_add_property_declaration (location_t, tree, bool, bool, bool,
        bool, bool, bool, tree, tree);
extern tree objc_maybe_build_component_ref (tree, tree);
extern tree objc_build_class_component_ref (tree, tree);
extern tree objc_maybe_build_modify_expr (tree, tree);
extern tree objc_build_incr_expr_for_property_ref (location_t, enum tree_code,
         tree, tree);
extern void objc_add_synthesize_declaration (location_t, tree);
extern void objc_add_dynamic_declaration (location_t, tree);
extern const char * objc_maybe_printable_name (tree, int);
extern bool objc_is_property_ref (tree);
extern bool objc_string_ref_type_p (tree);
extern void objc_check_format_arg (tree, tree);
extern void objc_finish_function (void);
extern void objc_maybe_warn_exceptions (location_t);



extern void *objc_get_current_scope (void);
extern void objc_mark_locals_volatile (void *);
# 36 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/highlev-plugin-common.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.h" 2


enum plugin_event
{

# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.def" 1
# 21 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.def"
PLUGIN_START_PARSE_FUNCTION,


PLUGIN_FINISH_PARSE_FUNCTION,


PLUGIN_PASS_MANAGER_SETUP,


PLUGIN_FINISH_TYPE,


PLUGIN_FINISH_DECL,


PLUGIN_FINISH_UNIT,


PLUGIN_PRE_GENERICIZE,


PLUGIN_FINISH,


PLUGIN_INFO,


PLUGIN_GGC_START,


PLUGIN_GGC_MARKING,


PLUGIN_GGC_END,


PLUGIN_REGISTER_GGC_ROOTS,


PLUGIN_ATTRIBUTES,


PLUGIN_START_UNIT,


PLUGIN_PRAGMAS,


PLUGIN_ALL_PASSES_START,


PLUGIN_ALL_PASSES_END,


PLUGIN_ALL_IPA_PASSES_START,


PLUGIN_ALL_IPA_PASSES_END,


PLUGIN_OVERRIDE_GATE,


PLUGIN_PASS_EXECUTION,



PLUGIN_EARLY_GIMPLE_PASSES_START,



PLUGIN_EARLY_GIMPLE_PASSES_END,


PLUGIN_NEW_PASS,




PLUGIN_INCLUDE_FILE,
# 30 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.h" 2

  PLUGIN_EVENT_FIRST_DYNAMIC
};




extern "C" {


extern const char **plugin_event_name;

struct plugin_argument
{
  char *key;
  char *value;
};



struct plugin_info
{
  const char *version;
  const char *help;
};



struct plugin_gcc_version
{
  const char *basever;
  const char *datestamp;
  const char *devphase;
  const char *revision;
  const char *configuration_arguments;
};


struct plugin_name_args
{
  char *base_name;

  const char *full_name;

  int argc;

  struct plugin_argument *argv;
  const char *version;
  const char *help;
};



extern bool plugin_default_version_check (struct plugin_gcc_version *,
       struct plugin_gcc_version *);
# 95 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.h"
typedef int (*plugin_init_func) (struct plugin_name_args *plugin_info,
                                 struct plugin_gcc_version *version);



extern int plugin_init (struct plugin_name_args *plugin_info,
                        struct plugin_gcc_version *version);






typedef void (*plugin_callback_func) (void *gcc_data, void *user_data);
# 121 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.h"
extern int get_event_last (void);

int get_named_event_id (const char *name, enum insert_option insert);






extern void register_callback (const char *plugin_name,
          int event,
                               plugin_callback_func callback,
                               void *user_data);

extern int unregister_callback (const char *plugin_name, int event);





extern const char* default_plugin_dir_name (void);


}






extern "C" {

extern int plugin_is_GPL_compatible;

}



struct attribute_spec;
struct scoped_attributes;

extern void add_new_plugin (const char *);
extern void parse_plugin_arg_opt (const char *);
extern int invoke_plugin_callbacks_full (int, void *);
extern void initialize_plugins (void);
extern bool plugins_active_p (void);
extern void dump_active_plugins (FILE *);
extern void debug_active_plugins (void);
extern void warn_if_plugins (void);
extern void print_plugins_versions (FILE *file, const char *indent);
extern void print_plugins_help (FILE *file, const char *indent);
extern void finalize_plugins (void);

extern bool flag_plugin_added;
# 184 "/home/giulianob/gcc_git_gnu/gcc/gcc/plugin.h"
static inline int
invoke_plugin_callbacks (int event __attribute__ ((__unused__)),
    void *gcc_data __attribute__ ((__unused__)))
{


  if (flag_plugin_added)
    return invoke_plugin_callbacks_full (event, gcc_data);


  return 3;
}



extern void register_attribute (const struct attribute_spec *attr);
extern struct scoped_attributes* register_scoped_attributes (const struct attribute_spec *,
            const char *);
# 37 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-pretty-print.h" 1
# 34 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-pretty-print.h"
extern void debug_generic_expr (tree);
extern void debug_generic_stmt (tree);
extern void debug_tree_chain (tree);
extern void print_generic_decl (FILE *, tree, dump_flags_t);
extern void print_generic_stmt (FILE *, tree, dump_flags_t = TDF_NONE);
extern void print_generic_stmt_indented (FILE *, tree, dump_flags_t, int);
extern void print_generic_expr (FILE *, tree, dump_flags_t = TDF_NONE);
extern char *print_generic_expr_to_str (tree);
extern void dump_omp_clauses (pretty_printer *, tree, int, dump_flags_t);
extern void dump_omp_atomic_memory_order (pretty_printer *,
       enum omp_memory_order);
extern void dump_omp_loop_non_rect_expr (pretty_printer *, tree, int,
      dump_flags_t);
extern int dump_generic_node (pretty_printer *, tree, int, dump_flags_t, bool);
extern void print_declaration (pretty_printer *, tree, int, dump_flags_t);
extern int op_code_prio (enum tree_code);
extern int op_prio (const_tree);
extern const char *op_symbol_code (enum tree_code);
extern void pretty_print_string (pretty_printer *, const char *, size_t);
extern void print_call_name (pretty_printer *, tree, dump_flags_t);
extern void percent_K_format (text_info *, location_t, tree);
extern void pp_tree_identifier (pretty_printer *, tree);
extern void dump_function_header (FILE *, tree, dump_flags_t);
extern void pp_double_int (pretty_printer *pp, double_int d, bool uns);
extern void dump_location (pretty_printer *buffer, location_t loc);
# 38 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h" 1
# 24 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-tree.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-pragma.h" 1
# 27 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-pragma.h"
enum pragma_kind {
  PRAGMA_NONE = 0,

  PRAGMA_OACC_ATOMIC,
  PRAGMA_OACC_CACHE,
  PRAGMA_OACC_DATA,
  PRAGMA_OACC_DECLARE,
  PRAGMA_OACC_ENTER_DATA,
  PRAGMA_OACC_EXIT_DATA,
  PRAGMA_OACC_HOST_DATA,
  PRAGMA_OACC_KERNELS,
  PRAGMA_OACC_LOOP,
  PRAGMA_OACC_PARALLEL,
  PRAGMA_OACC_ROUTINE,
  PRAGMA_OACC_SERIAL,
  PRAGMA_OACC_UPDATE,
  PRAGMA_OACC_WAIT,

  PRAGMA_OMP_ATOMIC,
  PRAGMA_OMP_BARRIER,
  PRAGMA_OMP_CANCEL,
  PRAGMA_OMP_CANCELLATION_POINT,
  PRAGMA_OMP_CRITICAL,
  PRAGMA_OMP_DECLARE,
  PRAGMA_OMP_DEPOBJ,
  PRAGMA_OMP_DISTRIBUTE,
  PRAGMA_OMP_END_DECLARE_TARGET,
  PRAGMA_OMP_FLUSH,
  PRAGMA_OMP_FOR,
  PRAGMA_OMP_LOOP,
  PRAGMA_OMP_MASTER,
  PRAGMA_OMP_ORDERED,
  PRAGMA_OMP_PARALLEL,
  PRAGMA_OMP_REQUIRES,
  PRAGMA_OMP_SCAN,
  PRAGMA_OMP_SECTION,
  PRAGMA_OMP_SECTIONS,
  PRAGMA_OMP_SIMD,
  PRAGMA_OMP_SINGLE,
  PRAGMA_OMP_TARGET,
  PRAGMA_OMP_TASK,
  PRAGMA_OMP_TASKGROUP,
  PRAGMA_OMP_TASKLOOP,
  PRAGMA_OMP_TASKWAIT,
  PRAGMA_OMP_TASKYIELD,
  PRAGMA_OMP_THREADPRIVATE,
  PRAGMA_OMP_TEAMS,

  PRAGMA_GCC_PCH_PREPROCESS,
  PRAGMA_IVDEP,
  PRAGMA_UNROLL,

  PRAGMA_FIRST_EXTERNAL
};




enum pragma_omp_clause {
  PRAGMA_OMP_CLAUSE_NONE = 0,

  PRAGMA_OMP_CLAUSE_ALIGNED,
  PRAGMA_OMP_CLAUSE_BIND,
  PRAGMA_OMP_CLAUSE_COLLAPSE,
  PRAGMA_OMP_CLAUSE_COPYIN,
  PRAGMA_OMP_CLAUSE_COPYPRIVATE,
  PRAGMA_OMP_CLAUSE_DEFAULT,
  PRAGMA_OMP_CLAUSE_DEFAULTMAP,
  PRAGMA_OMP_CLAUSE_DEPEND,
  PRAGMA_OMP_CLAUSE_DEVICE,
  PRAGMA_OMP_CLAUSE_DEVICE_TYPE,
  PRAGMA_OMP_CLAUSE_DIST_SCHEDULE,
  PRAGMA_OMP_CLAUSE_FINAL,
  PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,
  PRAGMA_OMP_CLAUSE_FOR,
  PRAGMA_OMP_CLAUSE_FROM,
  PRAGMA_OMP_CLAUSE_GRAINSIZE,
  PRAGMA_OMP_CLAUSE_HINT,
  PRAGMA_OMP_CLAUSE_IF,
  PRAGMA_OMP_CLAUSE_IN_REDUCTION,
  PRAGMA_OMP_CLAUSE_INBRANCH,
  PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR,
  PRAGMA_OMP_CLAUSE_LASTPRIVATE,
  PRAGMA_OMP_CLAUSE_LINEAR,
  PRAGMA_OMP_CLAUSE_LINK,
  PRAGMA_OMP_CLAUSE_MAP,
  PRAGMA_OMP_CLAUSE_MERGEABLE,
  PRAGMA_OMP_CLAUSE_NOGROUP,
  PRAGMA_OMP_CLAUSE_NONTEMPORAL,
  PRAGMA_OMP_CLAUSE_NOTINBRANCH,
  PRAGMA_OMP_CLAUSE_NOWAIT,
  PRAGMA_OMP_CLAUSE_NUM_TASKS,
  PRAGMA_OMP_CLAUSE_NUM_TEAMS,
  PRAGMA_OMP_CLAUSE_NUM_THREADS,
  PRAGMA_OMP_CLAUSE_ORDER,
  PRAGMA_OMP_CLAUSE_ORDERED,
  PRAGMA_OMP_CLAUSE_PARALLEL,
  PRAGMA_OMP_CLAUSE_PRIORITY,
  PRAGMA_OMP_CLAUSE_PRIVATE,
  PRAGMA_OMP_CLAUSE_PROC_BIND,
  PRAGMA_OMP_CLAUSE_REDUCTION,
  PRAGMA_OMP_CLAUSE_SAFELEN,
  PRAGMA_OMP_CLAUSE_SCHEDULE,
  PRAGMA_OMP_CLAUSE_SECTIONS,
  PRAGMA_OMP_CLAUSE_SHARED,
  PRAGMA_OMP_CLAUSE_SIMD,
  PRAGMA_OMP_CLAUSE_SIMDLEN,
  PRAGMA_OMP_CLAUSE_TASK_REDUCTION,
  PRAGMA_OMP_CLAUSE_TASKGROUP,
  PRAGMA_OMP_CLAUSE_THREAD_LIMIT,
  PRAGMA_OMP_CLAUSE_THREADS,
  PRAGMA_OMP_CLAUSE_TO,
  PRAGMA_OMP_CLAUSE_UNIFORM,
  PRAGMA_OMP_CLAUSE_UNTIED,
  PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR,
  PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR,


  PRAGMA_OACC_CLAUSE_ASYNC,
  PRAGMA_OACC_CLAUSE_ATTACH,
  PRAGMA_OACC_CLAUSE_AUTO,
  PRAGMA_OACC_CLAUSE_COPY,
  PRAGMA_OACC_CLAUSE_COPYOUT,
  PRAGMA_OACC_CLAUSE_CREATE,
  PRAGMA_OACC_CLAUSE_DELETE,
  PRAGMA_OACC_CLAUSE_DETACH,
  PRAGMA_OACC_CLAUSE_DEVICEPTR,
  PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT,
  PRAGMA_OACC_CLAUSE_FINALIZE,
  PRAGMA_OACC_CLAUSE_GANG,
  PRAGMA_OACC_CLAUSE_HOST,
  PRAGMA_OACC_CLAUSE_INDEPENDENT,
  PRAGMA_OACC_CLAUSE_NO_CREATE,
  PRAGMA_OACC_CLAUSE_NUM_GANGS,
  PRAGMA_OACC_CLAUSE_NUM_WORKERS,
  PRAGMA_OACC_CLAUSE_PRESENT,
  PRAGMA_OACC_CLAUSE_SELF,
  PRAGMA_OACC_CLAUSE_SEQ,
  PRAGMA_OACC_CLAUSE_TILE,
  PRAGMA_OACC_CLAUSE_VECTOR,
  PRAGMA_OACC_CLAUSE_VECTOR_LENGTH,
  PRAGMA_OACC_CLAUSE_WAIT,
  PRAGMA_OACC_CLAUSE_WORKER,
  PRAGMA_OACC_CLAUSE_IF_PRESENT,
  PRAGMA_OACC_CLAUSE_COLLAPSE = PRAGMA_OMP_CLAUSE_COLLAPSE,
  PRAGMA_OACC_CLAUSE_COPYIN = PRAGMA_OMP_CLAUSE_COPYIN,
  PRAGMA_OACC_CLAUSE_DEVICE = PRAGMA_OMP_CLAUSE_DEVICE,
  PRAGMA_OACC_CLAUSE_DEFAULT = PRAGMA_OMP_CLAUSE_DEFAULT,
  PRAGMA_OACC_CLAUSE_FIRSTPRIVATE = PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,
  PRAGMA_OACC_CLAUSE_IF = PRAGMA_OMP_CLAUSE_IF,
  PRAGMA_OACC_CLAUSE_PRIVATE = PRAGMA_OMP_CLAUSE_PRIVATE,
  PRAGMA_OACC_CLAUSE_REDUCTION = PRAGMA_OMP_CLAUSE_REDUCTION,
  PRAGMA_OACC_CLAUSE_LINK = PRAGMA_OMP_CLAUSE_LINK,
  PRAGMA_OACC_CLAUSE_USE_DEVICE = PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR
};

extern struct cpp_reader* parse_in;




extern void push_visibility (const char *, int);
extern bool pop_visibility (int);

extern void init_pragma (void);


typedef void (*pragma_handler_1arg)(struct cpp_reader *);


typedef void (*pragma_handler_2arg)(struct cpp_reader *, void *);


union gen_pragma_handler {
  pragma_handler_1arg handler_1arg;
  pragma_handler_2arg handler_2arg;
};

struct internal_pragma_handler {
  union gen_pragma_handler handler;


  bool extra_data;

  void * data;
};

extern void c_register_pragma (const char *space, const char *name,
                               pragma_handler_1arg handler);
extern void c_register_pragma_with_data (const char *space, const char *name,
                                         pragma_handler_2arg handler,
                                         void *data);

extern void c_register_pragma_with_expansion (const char *space,
                                              const char *name,
                                              pragma_handler_1arg handler);
extern void c_register_pragma_with_expansion_and_data (const char *space,
                                                       const char *name,
                                                   pragma_handler_2arg handler,
                                                       void *data);
extern void c_invoke_pragma_handler (unsigned int);

extern void maybe_apply_pragma_weak (tree);
extern void maybe_apply_pending_pragma_weaks (void);
extern tree maybe_apply_renaming_pragma (tree, tree);
extern void maybe_apply_pragma_scalar_storage_order (tree);
extern void add_to_renaming_pragma_list (tree, tree);

extern enum cpp_ttype pragma_lex (tree *, location_t *loc = 
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-pragma.h" 3 4
                                                           __null
# 235 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-pragma.h"
                                                               );
# 248 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-pragma.h"
extern enum cpp_ttype c_lex_with_flags (tree *, location_t *, unsigned char *,
     int);

extern void c_pp_lookup_pragma (unsigned int, const char **, const char **);

extern tree pragma_extern_prefix;
# 26 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h" 2




struct tree_check {

  tree value;

  vec<deferred_access_check, va_gc> *checks;


  tree qualifying_scope;
};



struct cp_token {

  enum cpp_ttype type : 8;


  enum rid keyword : 8;

  unsigned char flags;

  bool implicit_extern_c : 1;



  bool error_reported : 1;



  bool purged_p : 1;
  bool tree_check_p : 1;



  location_t location;

  union cp_token_value {

    struct tree_check* tree_check_value;

    tree value;
  } u;
};



typedef struct cp_token *cp_token_position;






struct cp_lexer {


  vec<cp_token, va_gc> *buffer;



  cp_token_position last_token;



  cp_token_position next_token;





  vec<cp_token_position> saved_tokens;


  enum cpp_ttype saved_type : 8;
  enum rid saved_keyword : 8;


  struct cp_lexer *next;


  bool debugging_p;



  bool in_pragma;
};
# 124 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h"
struct cp_token_cache {

  cp_token * first;


  cp_token * last;
};

typedef cp_token_cache *cp_token_cache_ptr;

struct cp_token_ident
{
  unsigned int ident_len;
  const char *ident_str;
  unsigned int before_len;
  const char *before_str;
  unsigned int after_len;
  const char *after_str;
};



struct cp_default_arg_entry {

  tree class_type;


  tree decl;
};




struct cp_unparsed_functions_entry {


  vec<cp_default_arg_entry, va_gc> *funs_with_default_args;



  vec<tree, va_gc> *funs_with_definitions;



  vec<tree, va_gc> *nsdmis;


  vec<tree, va_gc> *noexcepts;
};




enum cp_parser_status_kind
{

  CP_PARSER_STATUS_KIND_NO_ERROR,

  CP_PARSER_STATUS_KIND_ERROR,


  CP_PARSER_STATUS_KIND_COMMITTED
};



struct cp_parser_context {


  enum cp_parser_status_kind status;




  tree object_type;


  struct cp_parser_context *next;
};



struct cp_omp_declare_simd_data {
  bool error_seen;
  bool fndecl_seen;
  bool variant_p;
  vec<cp_token_cache_ptr> tokens;
  tree clauses;
};


struct cp_oacc_routine_data : cp_omp_declare_simd_data {
  location_t loc;
};



struct cp_parser {

  cp_lexer *lexer;
# 238 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h"
  tree scope;






  tree object_scope;
  tree qualifying_scope;
# 257 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h"
  cp_parser_context *context;



  bool allow_gnu_extensions_p;






  bool greater_than_is_operator_p;




  bool default_arg_ok_p;



  bool integral_constant_expression_p;





  bool allow_non_integral_constant_expression_p;



  bool non_integral_constant_expression_p;






  unsigned char local_variables_forbidden_p;




  bool in_unbraced_linkage_specification_p;



  bool in_declarator_p;


  bool in_template_argument_list_p;
# 318 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.h"
  unsigned char in_statement;





  bool in_switch_statement_p;




  bool in_type_id_in_expr_p;



  bool translate_strings_p;



  bool in_function_body;



  unsigned char in_transaction;


  bool colon_corrects_to_scope_p;





  bool colon_doesnt_start_class_def_p;




  const char *type_definition_forbidden_message;


  const char *type_definition_forbidden_message_arg;




  vec<cp_unparsed_functions_entry, va_gc> *unparsed_queues;



  unsigned num_classes_being_defined;



  unsigned num_template_parameter_lists;



  cp_omp_declare_simd_data * omp_declare_simd;



  cp_oacc_routine_data * oacc_routine;



  bool auto_is_implicit_function_template_parm_p;




  bool fully_implicit_function_template_p;







  tree implicit_template_parms;






  cp_binding_level* implicit_template_scope;




  bool in_result_type_constraint_p;



  int prevent_constrained_type_specifiers;



  location_t innermost_linkage_specification_location;

};


extern void debug (cp_token &ref);
extern void debug (cp_token *ptr);
extern void cp_lexer_debug_tokens (vec<cp_token, va_gc> *);
extern void debug (vec<cp_token, va_gc> &ref);
extern void debug (vec<cp_token, va_gc> *ptr);
extern void cp_debug_parser (FILE *, cp_parser *);
extern void debug (cp_parser &ref);
extern void debug (cp_parser *ptr);
extern bool cp_keyword_starts_decl_specifier_p (enum rid keyword);
# 39 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/gomp-constants.h" 1
# 51 "/home/giulianob/gcc_git_gnu/gcc/gcc/../include/gomp-constants.h"
enum gomp_map_kind
  {

    GOMP_MAP_ALLOC = 0,

    GOMP_MAP_TO = (GOMP_MAP_ALLOC | (1 << 0)),

    GOMP_MAP_FROM = (GOMP_MAP_ALLOC | (1 << 1)),

    GOMP_MAP_TOFROM = (GOMP_MAP_TO | GOMP_MAP_FROM),



    GOMP_MAP_POINTER = ((1 << 2) | 0),







    GOMP_MAP_TO_PSET = ((1 << 2) | 1),

    GOMP_MAP_FORCE_PRESENT = ((1 << 2) | 2),

    GOMP_MAP_DELETE = ((1 << 2) | 3),


    GOMP_MAP_FORCE_DEVICEPTR = ((1 << 3) | 0),

    GOMP_MAP_DEVICE_RESIDENT = ((1 << 3) | 1),

    GOMP_MAP_LINK = ((1 << 3) | 2),

    GOMP_MAP_IF_PRESENT = ((1 << 3) | 3),

    GOMP_MAP_FIRSTPRIVATE = (((1 << 3) | (1 << 2)) | 0),


    GOMP_MAP_FIRSTPRIVATE_INT = (((1 << 3) | (1 << 2)) | 1),


    GOMP_MAP_USE_DEVICE_PTR = (((1 << 3) | (1 << 2)) | 2),




    GOMP_MAP_ZERO_LEN_ARRAY_SECTION = (((1 << 3) | (1 << 2)) | 3),

    GOMP_MAP_FORCE_ALLOC = ((1 << 7) | GOMP_MAP_ALLOC),

    GOMP_MAP_FORCE_TO = ((1 << 7) | GOMP_MAP_TO),

    GOMP_MAP_FORCE_FROM = ((1 << 7) | GOMP_MAP_FROM),

    GOMP_MAP_FORCE_TOFROM = ((1 << 7) | GOMP_MAP_TOFROM),



    GOMP_MAP_USE_DEVICE_PTR_IF_PRESENT = ((1 << 4) | 0),


    GOMP_MAP_ALWAYS_TO = ((1 << 4) | GOMP_MAP_TO),


    GOMP_MAP_ALWAYS_FROM = ((1 << 4)
      | GOMP_MAP_FROM),


    GOMP_MAP_ALWAYS_TOFROM = ((1 << 4)
      | GOMP_MAP_TOFROM),






    GOMP_MAP_STRUCT = ((1 << 4)
      | ((1 << 3) | (1 << 2)) | 0),



    GOMP_MAP_ALWAYS_POINTER = ((1 << 4)
      | ((1 << 3) | (1 << 2)) | 1),

    GOMP_MAP_DELETE_ZERO_LEN_ARRAY_SECTION
      = ((1 << 4)
      | ((1 << 3) | (1 << 2)) | 3),

    GOMP_MAP_RELEASE = ((1 << 4)
      | GOMP_MAP_DELETE),






    GOMP_MAP_ATTACH = (((1 << 6) | (1 << 4)) | 0),

    GOMP_MAP_DETACH = (((1 << 6) | (1 << 4)) | 1),

    GOMP_MAP_FORCE_DETACH = (((1 << 6) | (1 << 4))
      | (1 << 7) | 1),



    GOMP_MAP_FIRSTPRIVATE_POINTER = ((1 << 8) | 1),

    GOMP_MAP_FIRSTPRIVATE_REFERENCE = ((1 << 8) | 2),



    GOMP_MAP_ATTACH_DETACH = ((1 << 8) | 3)
  };
# 40 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-general.h" 1
# 29 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-general.h"
enum oacc_loop_flags {
  OLF_SEQ = 1u << 0,
  OLF_AUTO = 1u << 1,
  OLF_INDEPENDENT = 1u << 2,
  OLF_GANG_STATIC = 1u << 3,
  OLF_TILE = 1u << 4,


  OLF_DIM_BASE = 5,
  OLF_DIM_GANG = 1u << (OLF_DIM_BASE + 0),
  OLF_DIM_WORKER = 1u << (OLF_DIM_BASE + 1),
  OLF_DIM_VECTOR = 1u << (OLF_DIM_BASE + 2),

  OLF_MAX = OLF_DIM_BASE + 3
};
# 54 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-general.h"
struct omp_for_data_loop
{
  tree v, n1, n2, step, m1, m2;
  enum tree_code cond_code;
  int outer;
  bool non_rect_referenced;
};



struct omp_for_data
{
  struct omp_for_data_loop loop;
  tree chunk_size;
  gomp_for *for_stmt;
  tree pre, iter_type;
  tree tiling;
  int collapse;
  int ordered;
  int first_nonrect, last_nonrect;
  bool have_nowait, have_ordered, simd_schedule, have_reductemp;
  bool have_pointer_condtemp, have_scantemp, have_nonctrl_scantemp;
  bool non_rect;
  int lastprivate_conditional;
  unsigned char sched_modifiers;
  enum omp_clause_schedule_kind sched_kind;
  struct omp_for_data_loop *loops;


  tree first_inner_iterations;


  tree factor;

  tree adjn1;
};



extern tree omp_find_clause (tree clauses, enum omp_clause_code kind);
extern bool omp_is_allocatable_or_ptr (tree decl);
extern tree omp_check_optional_argument (tree decl, bool for_present_check);
extern bool omp_is_reference (tree decl);
extern void omp_adjust_for_condition (location_t loc, enum tree_code *cond_code,
          tree *n2, tree v, tree step);
extern tree omp_get_for_step_from_incr (location_t loc, tree incr);
extern void omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,
      struct omp_for_data_loop *loops);
extern gimple *omp_build_barrier (tree lhs);
extern tree find_combined_omp_for (tree *, int *, void *);
extern poly_uint64 omp_max_vf (void);
extern int omp_max_simt_vf (void);
extern int omp_constructor_traits_to_codes (tree, enum tree_code *);
extern int omp_context_selector_matches (tree);
extern int omp_context_selector_set_compare (const char *, tree, tree);
extern tree omp_get_context_selector (tree, const char *, const char *);
extern tree omp_resolve_declare_variant (tree);
extern tree oacc_launch_pack (unsigned code, tree device, unsigned op);
extern tree oacc_replace_fn_attrib_attr (tree attribs, tree dims);
extern void oacc_replace_fn_attrib (tree fn, tree dims);
extern void oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args);
extern int oacc_verify_routine_clauses (tree, tree *, location_t,
     const char *);
extern tree oacc_build_routine_dims (tree clauses);
extern tree oacc_get_fn_attrib (tree fn);
extern bool offloading_function_p (tree fn);
extern int oacc_get_fn_dim_size (tree fn, int axis);
extern int oacc_get_ifn_dim_arg (const gimple *stmt);

enum omp_requires {
  OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER = 0xf,
  OMP_REQUIRES_UNIFIED_ADDRESS = 0x10,
  OMP_REQUIRES_UNIFIED_SHARED_MEMORY = 0x20,
  OMP_REQUIRES_DYNAMIC_ALLOCATORS = 0x40,
  OMP_REQUIRES_REVERSE_OFFLOAD = 0x80,
  OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER_USED = 0x100,
  OMP_REQUIRES_TARGET_USED = 0x200
};

extern enum omp_requires omp_requires_mask;
# 41 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-offload.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/omp-offload.h"
extern int oacc_get_default_dim (int dim);
extern int oacc_get_min_dim (int dim);
extern int oacc_fn_attrib_level (tree attr);

extern vec<tree, va_gc> *offload_funcs;
extern vec<tree, va_gc> *offload_vars;

extern void omp_finish_file (void);
extern void omp_discover_implicit_declare_target (void);
# 42 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-indentation.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/c-indentation.h"
struct token_indent_info
{
  location_t location;
  enum cpp_ttype type : 8;
  enum rid keyword : 8;
};




template <typename T>
inline token_indent_info
get_token_indent_info (const T *token)
{
  token_indent_info info;
  info.location = token->location;
  info.type = token->type;
  info.keyword = token->keyword;

  return info;
}

extern void
warn_for_misleading_indentation (const token_indent_info &guard_tinfo,
     const token_indent_info &body_tinfo,
     const token_indent_info &next_tinfo);
extern const char *
guard_tinfo_to_string (enum rid keyword);
# 43 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/context.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/context.h"
namespace gcc {

class pass_manager;
class dump_manager;




class context
{
public:
  context ();
  ~context ();


  bool have_offload;



  void set_passes (pass_manager *m)
  {
    ((void)(!(!m_passes) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/context.h", 44, __FUNCTION__), 0 : 0));
    m_passes = m;
  }

  pass_manager *get_passes () { ((void)(!(m_passes) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/context.h", 48, __FUNCTION__), 0 : 0)); return m_passes; }



  dump_manager *get_dumps () {((void)(!(m_dumps) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/context.h", 52, __FUNCTION__), 0 : 0)); return m_dumps; }

private:

  pass_manager *m_passes;


  dump_manager *m_dumps;

};

}



extern gcc::context *g;
# 44 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h" 1
# 25 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h"
class gcc_rich_location : public rich_location
{
 public:



  gcc_rich_location (location_t loc, const range_label *label = 
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h" 3 4
                                                               __null
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h"
                                                                   )
  : rich_location (line_table, loc, label)
  {
  }


  void
  add_expr (tree expr, range_label *label);

  void
  maybe_add_expr (tree t, range_label *label);

  void add_fixit_misspelled_id (location_t misspelled_token_loc,
    tree hint_id);
# 65 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h"
  bool add_location_if_nearby (location_t loc,
          bool restrict_to_current_line_spans = true,
          const range_label *label = 
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h" 3 4
                                    __null
# 67 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h"
                                        );
# 101 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h"
  void add_fixit_insert_formatted (const char *content,
       location_t insertion_point,
       location_t indent);
};




class text_range_label : public range_label
{
 public:
  text_range_label (const char *text) : m_text (text) {}

  label_text get_text (unsigned ) const final override
  {
    return label_text::borrow (m_text);
  }

 private:
  const char *m_text;
};
# 152 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h"
class range_label_for_type_mismatch : public range_label
{
 public:
  range_label_for_type_mismatch (tree labelled_type, tree other_type)
  : m_labelled_type (labelled_type), m_other_type (other_type)
  {
  }

  label_text get_text (unsigned range_idx) const override;

 protected:
  tree m_labelled_type;
  tree m_other_type;
};





class maybe_range_label_for_tree_type_mismatch : public range_label
{
 public:
  maybe_range_label_for_tree_type_mismatch (tree expr, tree other_expr)
  : m_expr (expr), m_other_expr (other_expr)
  {
  }

  label_text get_text (unsigned range_idx) const final override;

 private:
  tree m_expr;
  tree m_other_expr;
};

class op_location_t;
# 209 "/home/giulianob/gcc_git_gnu/gcc/gcc/gcc-rich-location.h"
class binary_op_rich_location : public gcc_rich_location
{
 public:
  binary_op_rich_location (const op_location_t &loc,
      tree arg0, tree arg1,
      bool show_types);

 private:
  static bool use_operator_loc_p (const op_location_t &loc,
      tree arg0, tree arg1);

  maybe_range_label_for_tree_type_mismatch m_label_for_arg0;
  maybe_range_label_for_tree_type_mismatch m_label_for_arg1;
};
# 45 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h" 1
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h"
struct tree_stmt_iterator {
  struct tree_statement_list_node *ptr;
  tree container;
};

static inline tree_stmt_iterator
tsi_start (tree t)
{
  tree_stmt_iterator i;

  i.ptr = ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h", 42, __FUNCTION__, (STATEMENT_LIST)))->stmt_list.head);
  i.container = t;

  return i;
}

static inline tree_stmt_iterator
tsi_last (tree t)
{
  tree_stmt_iterator i;

  i.ptr = ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h", 53, __FUNCTION__, (STATEMENT_LIST)))->stmt_list.tail);
  i.container = t;

  return i;
}

static inline bool
tsi_end_p (tree_stmt_iterator i)
{
  return i.ptr == 
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h" 3 4
                 __null
# 62 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h"
                     ;
}

static inline bool
tsi_one_before_end_p (tree_stmt_iterator i)
{
  return i.ptr != 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h" 3 4
                 __null 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h"
                      && i.ptr->next == 
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h" 3 4
                                        __null
# 68 "/home/giulianob/gcc_git_gnu/gcc/gcc/tree-iterator.h"
                                            ;
}

static inline void
tsi_next (tree_stmt_iterator *i)
{
  i->ptr = i->ptr->next;
}

static inline void
tsi_prev (tree_stmt_iterator *i)
{
  i->ptr = i->ptr->prev;
}

static inline tree *
tsi_stmt_ptr (tree_stmt_iterator i)
{
  return &i.ptr->stmt;
}

static inline tree
tsi_stmt (tree_stmt_iterator i)
{
  return i.ptr->stmt;
}

enum tsi_iterator_update
{
  TSI_NEW_STMT,

  TSI_SAME_STMT,
  TSI_CHAIN_START,

  TSI_CHAIN_END,

  TSI_CONTINUE_LINKING


};

extern void tsi_link_before (tree_stmt_iterator *, tree,
        enum tsi_iterator_update);
extern void tsi_link_after (tree_stmt_iterator *, tree,
       enum tsi_iterator_update);

extern void tsi_delink (tree_stmt_iterator *);

extern tree alloc_stmt_list (void);
extern void free_stmt_list (tree);
extern void append_to_statement_list (tree, tree *);
extern void append_to_statement_list_force (tree, tree *);
extern tree expr_first (tree);
extern tree expr_last (tree);
extern tree expr_single (tree);
# 46 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-name-hint.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-name-hint.h"
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h" 1
# 31 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h"
enum lookup_name_fuzzy_kind {

  FUZZY_LOOKUP_TYPENAME,


  FUZZY_LOOKUP_FUNCTION_NAME,


  FUZZY_LOOKUP_NAME
};







class deferred_diagnostic
{
 public:
  virtual ~deferred_diagnostic () {}

  location_t get_location () const { return m_loc; }



  void suppress ()
  {
    m_suppress = true;
  }

  bool is_suppressed_p () const { return m_suppress; }

 protected:
  deferred_diagnostic (location_t loc)
  : m_loc (loc), m_suppress (false) {}

 private:
  location_t m_loc;
  bool m_suppress;
};
# 91 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h"
class name_hint
{
public:
  name_hint () : m_suggestion (
# 94 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h" 3 4
                              __null
# 94 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h"
                                  ), m_deferred () {}

  name_hint (const char *suggestion, deferred_diagnostic *deferred)
  : m_suggestion (suggestion), m_deferred (deferred)
  {
  }

  const char *suggestion () const { return m_suggestion; }


  operator bool () const { return (m_suggestion != 
# 104 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h" 3 4
                                                  __null
       
# 105 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h"
      || m_deferred != 
# 105 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h" 3 4
                       __null
# 105 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/name-hint.h"
                           ); }



  gnu::unique_ptr<deferred_diagnostic> take_deferred () { return move (m_deferred); }




  void suppress ()
  {
    if (m_deferred)
      m_deferred->suppress ();
  }

private:
  const char *m_suggestion;
  gnu::unique_ptr<deferred_diagnostic> m_deferred;
};

extern name_hint lookup_name_fuzzy (tree, enum lookup_name_fuzzy_kind,
        location_t);
# 32 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/cp-name-hint.h" 2

extern name_hint suggest_alternatives_for (location_t, tree, bool);
extern name_hint suggest_alternatives_in_other_namespaces (location_t, tree);
extern name_hint suggest_alternative_in_explicit_scope (location_t, tree, tree);
extern name_hint suggest_alternative_in_scoped_enum (tree, tree);
# 47 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/memmodel.h" 1
# 37 "/home/giulianob/gcc_git_gnu/gcc/gcc/memmodel.h"
enum memmodel
{
  MEMMODEL_RELAXED = 0,
  MEMMODEL_CONSUME = 1,
  MEMMODEL_ACQUIRE = 2,
  MEMMODEL_RELEASE = 3,
  MEMMODEL_ACQ_REL = 4,
  MEMMODEL_SEQ_CST = 5,
  MEMMODEL_LAST = 6,
  MEMMODEL_SYNC_ACQUIRE = MEMMODEL_ACQUIRE | (1<<15),
  MEMMODEL_SYNC_RELEASE = MEMMODEL_RELEASE | (1<<15),
  MEMMODEL_SYNC_SEQ_CST = MEMMODEL_SEQ_CST | (1<<15),

  MEMMODEL_MAX = ((int) (~ (int) 0 - ((int) ((! ((int) 0 < (int) -1)) ? (int) 1 << (sizeof (int) * 8 - 1) : (int) 0))))
};


static inline enum memmodel
memmodel_from_int (unsigned long val)
{
  return (enum memmodel) (val & ((1<<16)-1));
}


static inline enum memmodel
memmodel_base (unsigned long val)
{
  return (enum memmodel) (val & ((1<<15)-1));
}


static inline bool
is_mm_relaxed (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_RELAXED;
}


static inline bool
is_mm_consume (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_CONSUME;
}


static inline bool
is_mm_acquire (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_ACQUIRE;
}


static inline bool
is_mm_release (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_RELEASE;
}


static inline bool
is_mm_acq_rel (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_ACQ_REL;
}


static inline bool
is_mm_seq_cst (enum memmodel model)
{
  return (model & ((1<<15)-1)) == MEMMODEL_SEQ_CST;
}


static inline bool
is_mm_sync (enum memmodel model)
{
  return (model & (1<<15));
}
# 48 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 1 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/known-headers.h" 1
# 23 "/home/giulianob/gcc_git_gnu/gcc/gcc/c-family/known-headers.h"
extern const char *get_c_stdlib_header_for_name (const char *name);
extern const char *get_cp_stdlib_header_for_name (const char *name);

extern const char *get_c_stdlib_header_for_string_macro_name (const char *n);
extern const char *get_cp_stdlib_header_for_string_macro_name (const char *n);




class suggest_missing_header : public deferred_diagnostic
{
 public:
  suggest_missing_header (location_t loc, const char *name,
     const char *header_hint);
  ~suggest_missing_header ();

 private:
  const char *m_name_str;
  const char *m_header_hint;
};
# 49 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
# 57 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
enum non_integral_constant {
  NIC_NONE,

  NIC_FLOAT,

  NIC_THIS,

  NIC_FUNC_NAME,

  NIC_PRETTY_FUNC,

  NIC_C99_FUNC,

  NIC_VA_ARG,

  NIC_CAST,

  NIC_TYPEID,

  NIC_NCC,

  NIC_FUNC_CALL,

  NIC_INC,

  NIC_DEC,

  NIC_ARRAY_REF,

  NIC_ARROW,

  NIC_POINT,

  NIC_ADDR_LABEL,

  NIC_STAR,

  NIC_ADDR,

  NIC_PREINCREMENT,

  NIC_PREDECREMENT,

  NIC_NEW,

  NIC_DEL,

  NIC_OVERLOADED,

  NIC_ASSIGNMENT,

  NIC_COMMA,

  NIC_CONSTRUCTOR,

  NIC_TRANSACTION
};


enum name_lookup_error {

  NLE_NULL,

  NLE_TYPE,

  NLE_CXX98,

  NLE_NOT_CXX98
};


enum required_token {
  RT_NONE,
  RT_SEMICOLON,
  RT_OPEN_PAREN,
  RT_CLOSE_BRACE,
  RT_OPEN_BRACE,
  RT_CLOSE_SQUARE,
  RT_OPEN_SQUARE,
  RT_COMMA,
  RT_SCOPE,
  RT_LESS,
  RT_GREATER,
  RT_EQ,
  RT_ELLIPSIS,
  RT_MULT,
  RT_COMPL,
  RT_COLON,
  RT_COLON_SCOPE,
  RT_CLOSE_PAREN,
  RT_COMMA_CLOSE_PAREN,
  RT_PRAGMA_EOL,
  RT_NAME,


  RT_NEW,
  RT_DELETE,
  RT_RETURN,
  RT_WHILE,
  RT_EXTERN,
  RT_STATIC_ASSERT,
  RT_DECLTYPE,
  RT_OPERATOR,
  RT_CLASS,
  RT_TEMPLATE,
  RT_NAMESPACE,
  RT_USING,
  RT_ASM,
  RT_TRY,
  RT_CATCH,
  RT_THROW,
  RT_AUTO,
  RT_LABEL,
  RT_AT_TRY,
  RT_AT_SYNCHRONIZED,
  RT_AT_THROW,

  RT_SELECT,
  RT_ITERATION,
  RT_JUMP,
  RT_CLASS_KEY,
  RT_CLASS_TYPENAME_TEMPLATE,
  RT_TRANSACTION_ATOMIC,
  RT_TRANSACTION_RELAXED,
  RT_TRANSACTION_CANCEL,

  RT_CO_YIELD
};




class type_id_in_expr_sentinel
{
  cp_parser *parser;
  bool saved;
public:
  type_id_in_expr_sentinel (cp_parser *parser, bool set = true)
    : parser (parser),
      saved (parser->in_type_id_in_expr_p)
  { parser->in_type_id_in_expr_p = set; }
  ~type_id_in_expr_sentinel ()
  { parser->in_type_id_in_expr_p = saved; }
};



static cp_lexer *cp_lexer_new_main
  (void);
static cp_lexer *cp_lexer_new_from_tokens
  (cp_token_cache *tokens);
static void cp_lexer_destroy
  (cp_lexer *);
static int cp_lexer_saving_tokens
  (const cp_lexer *);
static cp_token *cp_lexer_token_at
  (cp_lexer *, cp_token_position);
static void cp_lexer_get_preprocessor_token
  (unsigned, cp_token *);
static inline cp_token *cp_lexer_peek_token
  (cp_lexer *);
static cp_token *cp_lexer_peek_nth_token
  (cp_lexer *, size_t);
static inline bool cp_lexer_next_token_is
  (cp_lexer *, enum cpp_ttype);
static bool cp_lexer_next_token_is_not
  (cp_lexer *, enum cpp_ttype);
static bool cp_lexer_next_token_is_keyword
  (cp_lexer *, enum rid);
static cp_token *cp_lexer_consume_token
  (cp_lexer *);
static void cp_lexer_purge_token
  (cp_lexer *);
static void cp_lexer_purge_tokens_after
  (cp_lexer *, cp_token_position);
static void cp_lexer_save_tokens
  (cp_lexer *);
static void cp_lexer_commit_tokens
  (cp_lexer *);
static void cp_lexer_rollback_tokens
  (cp_lexer *);
static void cp_lexer_print_token
  (FILE *, cp_token *);
static inline bool cp_lexer_debugging_p
  (cp_lexer *);
static void cp_lexer_start_debugging
  (cp_lexer *) __attribute__ ((__unused__));
static void cp_lexer_stop_debugging
  (cp_lexer *) __attribute__ ((__unused__));

static cp_token_cache *cp_token_cache_new
  (cp_token *, cp_token *);
static tree cp_parser_late_noexcept_specifier
  (cp_parser *, tree);
static void noexcept_override_late_checks
  (tree, tree);

static void cp_parser_initial_pragma
  (cp_token *);

static bool cp_parser_omp_declare_reduction_exprs
  (tree, cp_parser *);
static void cp_finalize_oacc_routine
  (cp_parser *, tree, bool);
# 269 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static FILE *cp_lexer_debug_stream;



int cp_unevaluated_operand;







static void
cp_lexer_dump_tokens (FILE *file, vec<cp_token, va_gc> *buffer,
        cp_token *start_token, unsigned num,
        cp_token *curr_token)
{
  unsigned i, nprinted;
  cp_token *token;
  bool do_print;

  fprintf (file, "%u tokens\n", vec_safe_length (buffer));

  if (buffer == 
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 292 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   )
    return;

  if (num == 0)
    num = buffer->length ();

  if (start_token == 
# 298 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 298 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        )
    start_token = buffer->address ();

  if (start_token > buffer->address ())
    {
      cp_lexer_print_token (file, &(*buffer)[0]);
      fprintf (file, " ... ");
    }

  do_print = false;
  nprinted = 0;
  for (i = 0; buffer->iterate (i, &token) && nprinted < num; i++)
    {
      if (token == start_token)
 do_print = true;

      if (!do_print)
 continue;

      nprinted++;
      if (token == curr_token)
 fprintf (file, "[[");

      cp_lexer_print_token (file, token);

      if (token == curr_token)
 fprintf (file, "]]");

      switch (token->type)
 {
   case CPP_SEMICOLON:
   case CPP_OPEN_BRACE:
   case CPP_CLOSE_BRACE:
   case CPP_EOF:
     fputc ('\n', file);
     break;

   default:
     fputc (' ', file);
 }
    }

  if (i == num && i < buffer->length ())
    {
      fprintf (file, " ... ");
      cp_lexer_print_token (file, &buffer->last ());
    }

  fprintf (file, "\n");
}




void
cp_lexer_debug_tokens (vec<cp_token, va_gc> *buffer)
{
  cp_lexer_dump_tokens (
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       stderr
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , buffer, 
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , 0, 
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 355 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                    );
}

__attribute__ ((__used__)) void
debug (vec<cp_token, va_gc> &ref)
{
  cp_lexer_dump_tokens (
# 361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       stderr
# 361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , &ref, 
# 361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                     __null
# 361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         , 0, 
# 361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  );
}

__attribute__ ((__used__)) void
debug (vec<cp_token, va_gc> *ptr)
{
  if (ptr)
    debug (*ptr);
  else
    fprintf (
# 370 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            stderr
# 370 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  , "<nil>\n");
}





static void
cp_debug_print_tree_if_set (FILE *file, const char *desc, tree t)
{
  if (t)
    {
      fprintf (file, "%s: ", desc);
      print_node_brief (file, "", t, 0);
    }
}




static void
cp_debug_print_context (FILE *file, cp_parser_context *c)
{
  const char *status_s[] = { "OK", "ERROR", "COMMITTED" };
  fprintf (file, "{ status = %s, scope = ", status_s[c->status]);
  print_node_brief (file, "", c->object_type, 0);
  fprintf (file, "}\n");
}




static void
cp_debug_print_context_stack (FILE *file, cp_parser_context *first)
{
  unsigned i;
  cp_parser_context *c;

  fprintf (file, "Parsing context stack:\n");
  for (i = 0, c = first; c; c = c->next, i++)
    {
      fprintf (file, "\t#%u: ", i);
      cp_debug_print_context (file, c);
    }
}




static void
cp_debug_print_flag (FILE *file, const char *desc, bool flag)
{
  if (flag)
    fprintf (file, "%s: true\n", desc);
}




static void
cp_debug_print_unparsed_function (FILE *file, cp_unparsed_functions_entry *uf)
{
  unsigned i;
  cp_default_arg_entry *default_arg_fn;
  tree fn;

  fprintf (file, "\tFunctions with default args:\n");
  for (i = 0;
       vec_safe_iterate (uf->funs_with_default_args, i, &default_arg_fn);
       i++)
    {
      fprintf (file, "\t\tClass type: ");
      print_node_brief (file, "", default_arg_fn->class_type, 0);
      fprintf (file, "\t\tDeclaration: ");
      print_node_brief (file, "", default_arg_fn->decl, 0);
      fprintf (file, "\n");
    }

  fprintf (file, "\n\tFunctions with definitions that require "
    "post-processing\n\t\t");
  for (i = 0; vec_safe_iterate (uf->funs_with_definitions, i, &fn); i++)
    {
      print_node_brief (file, "", fn, 0);
      fprintf (file, " ");
    }
  fprintf (file, "\n");

  fprintf (file, "\n\tNon-static data members with initializers that require "
           "post-processing\n\t\t");
  for (i = 0; vec_safe_iterate (uf->nsdmis, i, &fn); i++)
    {
      print_node_brief (file, "", fn, 0);
      fprintf (file, " ");
    }
  fprintf (file, "\n");
}




static void
cp_debug_print_unparsed_queues (FILE *file,
    vec<cp_unparsed_functions_entry, va_gc> *s)
{
  unsigned i;
  cp_unparsed_functions_entry *uf;

  fprintf (file, "Unparsed functions\n");
  for (i = 0; vec_safe_iterate (s, i, &uf); i++)
    {
      fprintf (file, "#%u:\n", i);
      cp_debug_print_unparsed_function (file, uf);
    }
}





static void
cp_debug_parser_tokens (FILE *file, cp_parser *parser, int window_size)
{
  cp_token *next_token, *first_token, *start_token;

  if (file == 
# 494 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 494 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
    file = 
# 495 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          stderr
# 495 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;

  next_token = parser->lexer->next_token;
  first_token = parser->lexer->buffer->address ();
  start_token = (next_token > first_token + window_size / 2)
  ? next_token - window_size / 2
  : first_token;
  cp_lexer_dump_tokens (file, parser->lexer->buffer, start_token, window_size,
   next_token);
}





void
cp_debug_parser (FILE *file, cp_parser *parser)
{
  const size_t window_size = 20;
  cp_token *token;
  expanded_location eloc;

  if (file == 
# 517 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 517 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
    file = 
# 518 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          stderr
# 518 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;

  fprintf (file, "Parser state\n\n");
  fprintf (file, "Number of tokens: %u\n",
    vec_safe_length (parser->lexer->buffer));
  cp_debug_print_tree_if_set (file, "Lookup scope", parser->scope);
  cp_debug_print_tree_if_set (file, "Object scope",
         parser->object_scope);
  cp_debug_print_tree_if_set (file, "Qualifying scope",
         parser->qualifying_scope);
  cp_debug_print_context_stack (file, parser->context);
  cp_debug_print_flag (file, "Allow GNU extensions",
         parser->allow_gnu_extensions_p);
  cp_debug_print_flag (file, "'>' token is greater-than",
         parser->greater_than_is_operator_p);
  cp_debug_print_flag (file, "Default args allowed in current "
         "parameter list", parser->default_arg_ok_p);
  cp_debug_print_flag (file, "Parsing integral constant-expression",
         parser->integral_constant_expression_p);
  cp_debug_print_flag (file, "Allow non-constant expression in current "
         "constant-expression",
         parser->allow_non_integral_constant_expression_p);
  cp_debug_print_flag (file, "Seen non-constant expression",
         parser->non_integral_constant_expression_p);
  cp_debug_print_flag (file, "Local names forbidden in current context",
         (parser->local_variables_forbidden_p
          & (1 << 0)));
  cp_debug_print_flag (file, "'this' forbidden in current context",
         (parser->local_variables_forbidden_p
          & (1 << 1)));
  cp_debug_print_flag (file, "In unbraced linkage specification",
         parser->in_unbraced_linkage_specification_p);
  cp_debug_print_flag (file, "Parsing a declarator",
         parser->in_declarator_p);
  cp_debug_print_flag (file, "In template argument list",
         parser->in_template_argument_list_p);
  cp_debug_print_flag (file, "Parsing an iteration statement",
         parser->in_statement & 2);
  cp_debug_print_flag (file, "Parsing a switch statement",
         parser->in_statement & 1);
  cp_debug_print_flag (file, "Parsing a structured OpenMP block",
         parser->in_statement & 4);
  cp_debug_print_flag (file, "Parsing an OpenMP loop",
         parser->in_statement & 8);
  cp_debug_print_flag (file, "Parsing an if statement",
         parser->in_statement & 16);
  cp_debug_print_flag (file, "Parsing a type-id in an expression "
         "context", parser->in_type_id_in_expr_p);
  cp_debug_print_flag (file, "String expressions should be translated "
         "to execution character set",
         parser->translate_strings_p);
  cp_debug_print_flag (file, "Parsing function body outside of a "
         "local class", parser->in_function_body);
  cp_debug_print_flag (file, "Auto correct a colon to a scope operator",
         parser->colon_corrects_to_scope_p);
  cp_debug_print_flag (file, "Colon doesn't start a class definition",
         parser->colon_doesnt_start_class_def_p);
  if (parser->type_definition_forbidden_message)
    fprintf (file, "Error message for forbidden type definitions: %s %s\n",
      parser->type_definition_forbidden_message,
      parser->type_definition_forbidden_message_arg
      ? parser->type_definition_forbidden_message_arg : "<none>");
  cp_debug_print_unparsed_queues (file, parser->unparsed_queues);
  fprintf (file, "Number of class definitions in progress: %u\n",
    parser->num_classes_being_defined);
  fprintf (file, "Number of template parameter lists for the current "
    "declaration: %u\n", parser->num_template_parameter_lists);
  cp_debug_parser_tokens (file, parser, window_size);
  token = parser->lexer->next_token;
  fprintf (file, "Next token to parse:\n");
  fprintf (file, "\tToken:  ");
  cp_lexer_print_token (file, token);
  eloc = expand_location (token->location);
  fprintf (file, "\n\tFile:   %s\n", eloc.file);
  fprintf (file, "\tLine:   %d\n", eloc.line);
  fprintf (file, "\tColumn: %d\n", eloc.column);
}

__attribute__ ((__used__)) void
debug (cp_parser &ref)
{
  cp_debug_parser (
# 599 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  stderr
# 599 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        , &ref);
}

__attribute__ ((__used__)) void
debug (cp_parser *ptr)
{
  if (ptr)
    debug (*ptr);
  else
    fprintf (
# 608 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            stderr
# 608 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  , "<nil>\n");
}



static cp_lexer *
cp_lexer_alloc (void)
{

  cp_lexer *lexer = ggc_cleared_alloc<cp_lexer> ();


  lexer->debugging_p = false;

  lexer->saved_tokens.create (5);


  vec_alloc (lexer->buffer, ((256 * 1024) / sizeof (cp_token)));

  return lexer;
}




static cp_lexer *
cp_lexer_new_main (void)
{
  cp_token token;




  cp_lexer_get_preprocessor_token (0, &token);
  cp_parser_initial_pragma (&token);
  c_common_no_more_pch ();

  cp_lexer *lexer = cp_lexer_alloc ();

  cp_token *tok = lexer->buffer->quick_push (token);


  while (tok->type != CPP_EOF)
    {
      tok = vec_safe_push (lexer->buffer, cp_token ());
      cp_lexer_get_preprocessor_token (2, tok);
    }

  lexer->next_token = lexer->buffer->address ();
  lexer->last_token = lexer->next_token
                      + lexer->buffer->length ()
        - 1;



  done_lexing = true;

  ((void)(!(!lexer->next_token->purged_p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 665, __FUNCTION__), 0 : 0));
  return lexer;
}




static cp_lexer *
cp_lexer_new_from_tokens (cp_token_cache *cache)
{
  cp_token *first = cache->first;
  cp_token *last = cache->last;
  cp_lexer *lexer = ggc_cleared_alloc<cp_lexer> ();


  lexer->buffer = 
# 680 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 680 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;


  lexer->saved_type = last->type;
  lexer->saved_keyword = last->keyword;
  last->type = CPP_EOF;
  last->keyword = RID_MAX;

  lexer->next_token = first;
  lexer->last_token = last;

  lexer->saved_tokens.create (5);


  lexer->debugging_p = false;

  ((void)(!(!lexer->next_token->purged_p && !lexer->last_token->purged_p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 696, __FUNCTION__), 0 : 0))
                                       ;
  return lexer;
}



static void
cp_lexer_destroy (cp_lexer *lexer)
{
  if (lexer->buffer)
    vec_free (lexer->buffer);
  else
    {

      lexer->last_token->type = lexer->saved_type;
      lexer->last_token->keyword = lexer->saved_keyword;
    }
  lexer->saved_tokens.release ();
  ggc_free (lexer);
}
# 727 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static inline bool
cp_lexer_debugging_p (cp_lexer *lexer)
{
  if (!false)
    return false;

  return lexer->debugging_p;
}


static inline cp_token_position
cp_lexer_token_position (cp_lexer *lexer, bool previous_p)
{
  return lexer->next_token - previous_p;
}

static inline cp_token *
cp_lexer_token_at (cp_lexer * , cp_token_position pos)
{
  return pos;
}

static inline void
cp_lexer_set_token_position (cp_lexer *lexer, cp_token_position pos)
{
  lexer->next_token = cp_lexer_token_at (lexer, pos);
}

static inline cp_token_position
cp_lexer_previous_token_position (cp_lexer *lexer)
{
  return cp_lexer_token_position (lexer, true);
}

static inline cp_token *
cp_lexer_previous_token (cp_lexer *lexer)
{
  cp_token_position tp = cp_lexer_previous_token_position (lexer);


  while (tp->purged_p)
    {
      ((void)(!(tp != vec_safe_address (lexer->buffer)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 769, __FUNCTION__), 0 : 0));
      tp--;
    }

  return cp_lexer_token_at (lexer, tp);
}





static cp_token *
cp_lexer_safe_previous_token (cp_lexer *lexer)
{
  if (lexer->buffer
      && lexer->next_token != lexer->buffer->address ())
    {
      cp_token_position tp = cp_lexer_previous_token_position (lexer);


      while (tp->purged_p)
 {
   if (tp == lexer->buffer->address ())
     return 
# 792 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 792 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ;
   tp--;
 }
      return cp_lexer_token_at (lexer, tp);
    }

  return 
# 798 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 798 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
            ;
}




static inline location_t
make_location (location_t caret, location_t start, cp_lexer *lexer)
{
  cp_token *t = cp_lexer_previous_token (lexer);
  return make_location (caret, start, t->location);
}



static inline int
cp_lexer_saving_tokens (const cp_lexer* lexer)
{
  return lexer->saved_tokens.length () != 0;
}






static void
cp_lexer_get_preprocessor_token (unsigned flags, cp_token *token)
{
  static int is_extern_c = 0;


  token->type
    = c_lex_with_flags (&token->u.value, &token->location, &token->flags,
   flags);
  token->keyword = RID_MAX;
  token->purged_p = false;
  token->error_reported = false;
  token->tree_check_p = false;




  is_extern_c += pending_lang_change;
  pending_lang_change = 0;
  token->implicit_extern_c = is_extern_c > 0;


  if (token->type == CPP_NAME)
    {
      if (((!((tree_not_check2 (((tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 848, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 848, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_2)) & (!((tree_not_check2 (((tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 848, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 848, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_1)) & ((tree_not_check2 (((tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 848, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 848, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)))
 {

   token->type = CPP_KEYWORD;

   token->keyword = ((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code));
 }
      else
 {
          if (global_options.x_warn_cxx11_compat
              && ((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code)) >= RID_FIRST_CXX11
              && ((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code)) <= RID_LAST_CXX11)
            {


       warning_at (token->location, OPT_Wc__11_compat,
     "identifier %qE is a keyword in C++11",
     token->u.value);



              (((struct c_common_identifier *) (token->u.value))->node.rid_code = (unsigned char) RID_MAX);
            }
   if (global_options.x_warn_cxx20_compat
       && ((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code)) >= RID_FIRST_CXX20
       && ((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code)) <= RID_LAST_CXX20)
     {


       warning_at (token->location, OPT_Wc__20_compat,
     "identifier %qE is a keyword in C++20",
     token->u.value);



       (((struct c_common_identifier *) (token->u.value))->node.rid_code = (unsigned char) RID_MAX);
     }

   token->keyword = RID_MAX;
 }
    }
  else if (token->type == CPP_AT_NAME)
    {

      token->type = CPP_KEYWORD;
      switch (((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code)))
 {
# 903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 case RID_CLASS: token->keyword = RID_AT_CLASS; break;
 case RID_PRIVATE: token->keyword = RID_AT_PRIVATE; break;
 case RID_PROTECTED: token->keyword = RID_AT_PROTECTED; break;
 case RID_PUBLIC: token->keyword = RID_AT_PUBLIC; break;
 case RID_THROW: token->keyword = RID_AT_THROW; break;
 case RID_TRY: token->keyword = RID_AT_TRY; break;
 case RID_CATCH: token->keyword = RID_AT_CATCH; break;
 case RID_SYNCHRONIZED: token->keyword = RID_AT_SYNCHRONIZED; break;
 default: token->keyword = ((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code));
 }
    }
}


static inline void
cp_lexer_set_source_position_from_token (cp_token *token)
{
  input_location = token->location;
}


static inline void
cp_lexer_set_source_position (cp_lexer *lexer)
{
  cp_token *token = cp_lexer_peek_token (lexer);
  cp_lexer_set_source_position_from_token (token);
}




static inline cp_token *
cp_lexer_peek_token (cp_lexer *lexer)
{
  if (cp_lexer_debugging_p (lexer))
    {
      fputs ("cp_lexer: peeking at token: ", cp_lexer_debug_stream);
      cp_lexer_print_token (cp_lexer_debug_stream, lexer->next_token);
      putc ('\n', cp_lexer_debug_stream);
    }
  return lexer->next_token;
}



static inline bool
cp_lexer_next_token_is (cp_lexer* lexer, enum cpp_ttype type)
{
  return cp_lexer_peek_token (lexer)->type == type;
}



static inline bool
cp_lexer_next_token_is_not (cp_lexer* lexer, enum cpp_ttype type)
{
  return !cp_lexer_next_token_is (lexer, type);
}



static inline bool
cp_lexer_next_token_is_keyword (cp_lexer* lexer, enum rid keyword)
{
  return cp_lexer_peek_token (lexer)->keyword == keyword;
}

static inline bool
cp_lexer_nth_token_is (cp_lexer* lexer, size_t n, enum cpp_ttype type)
{
  return cp_lexer_peek_nth_token (lexer, n)->type == type;
}

static inline bool
cp_lexer_nth_token_is_keyword (cp_lexer* lexer, size_t n, enum rid keyword)
{
  return cp_lexer_peek_nth_token (lexer, n)->keyword == keyword;
}



bool
cp_keyword_starts_decl_specifier_p (enum rid keyword)
{
  switch (keyword)
    {


    case RID_AUTO:

    case RID_REGISTER:
    case RID_STATIC:
    case RID_EXTERN:
    case RID_MUTABLE:
    case RID_THREAD:

    case RID_ENUM:
    case RID_CLASS:
    case RID_STRUCT:
    case RID_UNION:
    case RID_TYPENAME:

    case RID_CHAR:
    case RID_CHAR8:
    case RID_CHAR16:
    case RID_CHAR32:
    case RID_WCHAR:
    case RID_BOOL:
    case RID_SHORT:
    case RID_INT:
    case RID_LONG:
    case RID_SIGNED:
    case RID_UNSIGNED:
    case RID_FLOAT:
    case RID_DOUBLE:
    case RID_VOID:

    case RID_ATTRIBUTE:
    case RID_TYPEOF:

    case RID_DECLTYPE:
    case RID_UNDERLYING_TYPE:
    case RID_CONSTEXPR:

    case RID_CONSTINIT:
    case RID_CONSTEVAL:
      return true;

    default:
      if (keyword >= RID_FIRST_INT_N
   && keyword < RID_FIRST_INT_N + 1
   && int_n_enabled_p[keyword - RID_FIRST_INT_N])
 return true;
      return false;
    }
}



static bool
cp_lexer_next_token_is_decl_specifier_keyword (cp_lexer *lexer)
{
  cp_token *token;

  token = cp_lexer_peek_token (lexer);
  return cp_keyword_starts_decl_specifier_p (token->keyword);
}



static bool
token_is_decltype (cp_token *t)
{
  return (t->keyword == RID_DECLTYPE
   || t->type == ((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1)));
}



static bool
cp_lexer_next_token_is_decltype (cp_lexer *lexer)
{
  cp_token *t = cp_lexer_peek_token (lexer);
  return token_is_decltype (t);
}




static tree
saved_checks_value (struct tree_check *check_value)
{

  vec<deferred_access_check, va_gc> *checks;
  deferred_access_check *chk;
  checks = check_value->checks;
  if (checks)
    {
      int i;
      for (i = 0; vec_safe_iterate ((checks), (i), &(chk)); ++(i))
 perform_or_defer_access_check (chk->binfo,
           chk->decl,
           chk->diag_decl, tf_warning_or_error);
    }

  return check_value->value;
}







static cp_token *
cp_lexer_peek_nth_token (cp_lexer* lexer, size_t n)
{
  cp_token *token;


  ((void)(!(n > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1103, __FUNCTION__), 0 : 0));

  if (cp_lexer_debugging_p (lexer))
    fprintf (cp_lexer_debug_stream,
      "cp_lexer: peeking ahead %ld at token: ", (long)n);

  --n;
  token = lexer->next_token;
  while (n && token->type != CPP_EOF)
    {
      ++token;
      if (!token->purged_p)
 --n;
    }

  if (cp_lexer_debugging_p (lexer))
    {
      cp_lexer_print_token (cp_lexer_debug_stream, token);
      putc ('\n', cp_lexer_debug_stream);
    }

  return token;
}




static cp_token *
cp_lexer_consume_token (cp_lexer* lexer)
{
  cp_token *token = lexer->next_token;

  do
    {
      ((void)(!(token->type != CPP_EOF) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1137, __FUNCTION__), 0 : 0));
      lexer->next_token++;
    }
  while (lexer->next_token->purged_p);

  cp_lexer_set_source_position_from_token (token);


  if (cp_lexer_debugging_p (lexer))
    {
      fputs ("cp_lexer: consuming token: ", cp_lexer_debug_stream);
      cp_lexer_print_token (cp_lexer_debug_stream, token);
      putc ('\n', cp_lexer_debug_stream);
    }

  return token;
}





static void
cp_lexer_purge_token (cp_lexer *lexer)
{
  cp_token *tok = lexer->next_token;

  ((void)(!(tok->type != CPP_EOF) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1164, __FUNCTION__), 0 : 0));
  tok->purged_p = true;
  tok->location = ((location_t) 0);
  tok->u.value = (tree) 
# 1167 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 1167 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
  tok->keyword = RID_MAX;

  do
    tok++;
  while (tok->purged_p);
  lexer->next_token = tok;
}





static void
cp_lexer_purge_tokens_after (cp_lexer *lexer, cp_token *tok)
{
  cp_token *peek = lexer->next_token;

  ((void)(!(tok < peek) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1185, __FUNCTION__), 0 : 0));

  for (tok++; tok != peek; tok++)
    {
      tok->purged_p = true;
      tok->location = ((location_t) 0);
      tok->u.value = (tree) 
# 1191 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 1191 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
      tok->keyword = RID_MAX;
    }
}




static void
cp_lexer_save_tokens (cp_lexer* lexer)
{

  if (cp_lexer_debugging_p (lexer))
    fprintf (cp_lexer_debug_stream, "cp_lexer: saving tokens\n");

  lexer->saved_tokens.safe_push (lexer->next_token);
}



static void
cp_lexer_commit_tokens (cp_lexer* lexer)
{

  if (cp_lexer_debugging_p (lexer))
    fprintf (cp_lexer_debug_stream, "cp_lexer: committing tokens\n");

  lexer->saved_tokens.pop ();
}




static void
cp_lexer_rollback_tokens (cp_lexer* lexer)
{

  if (cp_lexer_debugging_p (lexer))
    fprintf (cp_lexer_debug_stream, "cp_lexer: restoring tokens\n");

  lexer->next_token = lexer->saved_tokens.pop ();
}






struct saved_token_sentinel
{
  cp_lexer *lexer;
  unsigned len;
  bool commit;
  saved_token_sentinel(cp_lexer *lexer): lexer(lexer), commit(true)
  {
    len = lexer->saved_tokens.length ();
    cp_lexer_save_tokens (lexer);
  }
  void rollback ()
  {
    cp_lexer_rollback_tokens (lexer);
    commit = false;
  }
  ~saved_token_sentinel()
  {
    if (commit)
      cp_lexer_commit_tokens (lexer);
    ((void)(!(lexer->saved_tokens.length () == len) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1258, __FUNCTION__), 0 : 0));
  }
};



static void
cp_lexer_print_token (FILE * stream, cp_token *token)
{


  static const char *const token_names[] = {



    "EQ", "NOT", "GREATER", "LESS", "PLUS", "MINUS", "MULT", "DIV", "MOD", "AND", "OR", "XOR", "RSHIFT", "LSHIFT", "COMPL", "AND_AND", "OR_OR", "QUERY", "COLON", "COMMA", "OPEN_PAREN", "CLOSE_PAREN", "EOF", "EQ_EQ", "NOT_EQ", "GREATER_EQ", "LESS_EQ", "SPACESHIP", "PLUS_EQ", "MINUS_EQ", "MULT_EQ", "DIV_EQ", "MOD_EQ", "AND_EQ", "OR_EQ", "XOR_EQ", "RSHIFT_EQ", "LSHIFT_EQ", "HASH", "PASTE", "OPEN_SQUARE", "CLOSE_SQUARE", "OPEN_BRACE", "CLOSE_BRACE", "SEMICOLON", "ELLIPSIS", "PLUS_PLUS", "MINUS_MINUS", "DEREF", "DOT", "SCOPE", "DEREF_STAR", "DOT_STAR", "ATSIGN", "NAME", "AT_NAME", "NUMBER", "CHAR", "WCHAR", "CHAR16", "CHAR32", "UTF8CHAR", "OTHER", "STRING", "WSTRING", "STRING16", "STRING32", "UTF8STRING", "OBJC_STRING", "HEADER_NAME", "CHAR_USERDEF", "WCHAR_USERDEF", "CHAR16_USERDEF", "CHAR32_USERDEF", "UTF8CHAR_USERDEF", "STRING_USERDEF", "WSTRING_USERDEF", "STRING16_USERDEF", "STRING32_USERDEF", "UTF8STRING_USERDEF", "COMMENT", "MACRO_ARG", "PRAGMA", "PRAGMA_EOL", "PADDING",



    "KEYWORD",
    "TEMPLATE_ID",
    "NESTED_NAME_SPECIFIER",
  };


  switch (token->type)
    {
    case CPP_KEYWORD:


      if (!identifier_p (token->u.value))
 break;

    case CPP_NAME:
      fputs (((const char *) (tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1292, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str), stream);
      break;

    case CPP_STRING:
    case CPP_STRING16:
    case CPP_STRING32:
    case CPP_WSTRING:
    case CPP_UTF8STRING:
      fprintf (stream, " \"%s\"", ((const char *)((tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1300, __FUNCTION__, (STRING_CST)))->string.str)));
      break;

    case CPP_NUMBER:
      print_generic_expr (stream, token->u.value);
      break;

    default:


      if (token->type < (sizeof (token_names) / sizeof ((token_names)[0])))
 fputs (token_names[token->type], stream);
      else
 fprintf (stream, "[%d]", token->type);
      break;
    }
}

__attribute__ ((__used__)) void
debug (cp_token &ref)
{
  cp_lexer_print_token (
# 1321 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       stderr
# 1321 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , &ref);
  fprintf (
# 1322 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          stderr
# 1322 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                , "\n");
}

__attribute__ ((__used__)) void
debug (cp_token *ptr)
{
  if (ptr)
    debug (*ptr);
  else
    fprintf (
# 1331 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            stderr
# 1331 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  , "<nil>\n");
}




static void
cp_lexer_start_debugging (cp_lexer* lexer)
{
  if (!false)
    fatal_error (input_location,
   "%<LEXER_DEBUGGING_ENABLED_P%> is not set to true");

  lexer->debugging_p = true;
  cp_lexer_debug_stream = 
# 1345 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         stderr
# 1345 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
}



static void
cp_lexer_stop_debugging (cp_lexer* lexer)
{
  if (!false)
    fatal_error (input_location,
   "%<LEXER_DEBUGGING_ENABLED_P%> is not set to true");

  lexer->debugging_p = false;
  cp_lexer_debug_stream = 
# 1358 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 1358 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
}



static cp_token_cache *
cp_token_cache_new (cp_token *first, cp_token *last)
{
  cp_token_cache *cache = ggc_alloc<cp_token_cache> ();
  cache->first = first;
  cache->last = last;
  return cache;
}




static inline void
cp_ensure_no_omp_declare_simd (cp_parser *parser)
{
  if (parser->omp_declare_simd && !parser->omp_declare_simd->error_seen)
    {
      error ("%<#pragma omp declare %s%> not immediately followed by "
      "function declaration or definition",
      parser->omp_declare_simd->variant_p ? "variant" : "simd");
      parser->omp_declare_simd = 
# 1383 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 1383 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
    }
}




static inline void
cp_finalize_omp_declare_simd (cp_parser *parser, tree fndecl)
{
  if (__builtin_expect (parser->omp_declare_simd != 
# 1393 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 1393 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       , 0))
    {
      if (fndecl == global_trees[TI_ERROR_MARK])
 {
   parser->omp_declare_simd = 
# 1397 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 1397 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
   return;
 }
      if (((enum tree_code) (fndecl)->base.code) != FUNCTION_DECL)
 {
   cp_ensure_no_omp_declare_simd (parser);
   return;
 }
    }
}




static inline void
cp_ensure_no_oacc_routine (cp_parser *parser)
{
  if (parser->oacc_routine && !parser->oacc_routine->error_seen)
    {
      error_at (parser->oacc_routine->loc,
  "%<#pragma acc routine%> not immediately followed by "
  "function declaration or definition");
      parser->oacc_routine = 
# 1419 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 1419 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
    }
}





static void
clear_decl_specs (cp_decl_specifier_seq *decl_specs)
{
  memset (decl_specs, 0, sizeof (cp_decl_specifier_seq));
}
# 1440 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_declarator *make_call_declarator
  (cp_declarator *, tree, cp_cv_quals, cp_virt_specifiers, cp_ref_qualifier, tree, tree, tree, tree);
static cp_declarator *make_array_declarator
  (cp_declarator *, tree);
static cp_declarator *make_pointer_declarator
  (cp_cv_quals, cp_declarator *, tree);
static cp_declarator *make_reference_declarator
  (cp_cv_quals, cp_declarator *, bool, tree);
static cp_declarator *make_ptrmem_declarator
  (cp_cv_quals, tree, cp_declarator *, tree);


static cp_declarator *cp_error_declarator;



static struct obstack declarator_obstack;



static inline void *
alloc_declarator (size_t bytes)
{
  return __extension__ ({ struct obstack *__h = (&declarator_obstack); __extension__ ({ struct obstack *__o = (__h); size_t __len = ((bytes)); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); ((void) ((__o)->next_free += (__len))); }); __extension__ ({ struct obstack *__o1 = (__h); void *__value = (void *) __o1->object_base; if (__o1->next_free == __value) __o1->maybe_empty_object = 1; __o1->next_free = ((sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (((__o1->next_free) - (sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (__o1->alignment_mask)) & ~(__o1->alignment_mask))); if ((size_t) (__o1->next_free - (char *) __o1->chunk) > (size_t) (__o1->chunk_limit - (char *) __o1->chunk)) __o1->next_free = __o1->chunk_limit; __o1->object_base = __o1->next_free; __value; }); });
}




static cp_declarator *
make_declarator (cp_declarator_kind kind)
{
  cp_declarator *declarator;

  declarator = (cp_declarator *) alloc_declarator (sizeof (cp_declarator));
  declarator->kind = kind;
  declarator->parenthesized = ((location_t) 0);
  declarator->attributes = (tree) 
# 1477 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 1477 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;
  declarator->std_attributes = (tree) 
# 1478 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 1478 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;
  declarator->declarator = 
# 1479 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 1479 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  declarator->parameter_pack_p = false;
  declarator->id_loc = ((location_t) 0);

  return declarator;
}







static cp_declarator *
make_id_declarator (tree qualifying_scope, tree unqualified_name,
      special_function_kind sfk, location_t id_location)
{
  cp_declarator *declarator;
# 1508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (qualifying_scope && (tree_code_type[(int) (((enum tree_code) (qualifying_scope)->base.code))] == tcc_type))
    qualifying_scope = ((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1509, __FUNCTION__))->type_common.main_variant);

  ((void)(!(identifier_p (unqualified_name) || ((enum tree_code) (unqualified_name)->base.code) == BIT_NOT_EXPR || ((enum tree_code) (unqualified_name)->base.code) == TEMPLATE_ID_EXPR) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 1511, __FUNCTION__), 0 : 0))

                                                           ;

  declarator = make_declarator (cdk_id);
  declarator->u.id.qualifying_scope = qualifying_scope;
  declarator->u.id.unqualified_name = unqualified_name;
  declarator->u.id.sfk = sfk;
  declarator->id_loc = id_location;

  return declarator;
}






cp_declarator *
make_pointer_declarator (cp_cv_quals cv_qualifiers, cp_declarator *target,
    tree attributes)
{
  cp_declarator *declarator;

  declarator = make_declarator (cdk_pointer);
  declarator->declarator = target;
  declarator->u.pointer.qualifiers = cv_qualifiers;
  declarator->u.pointer.class_type = (tree) 
# 1538 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 1538 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                             ;
  if (target)
    {
      declarator->id_loc = target->id_loc;
      declarator->parameter_pack_p = target->parameter_pack_p;
      target->parameter_pack_p = false;
    }
  else
    declarator->parameter_pack_p = false;

  declarator->std_attributes = attributes;

  return declarator;
}





cp_declarator *
make_reference_declarator (cp_cv_quals cv_qualifiers, cp_declarator *target,
      bool rvalue_ref, tree attributes)
{
  cp_declarator *declarator;

  declarator = make_declarator (cdk_reference);
  declarator->declarator = target;
  declarator->u.reference.qualifiers = cv_qualifiers;
  declarator->u.reference.rvalue_ref = rvalue_ref;
  if (target)
    {
      declarator->id_loc = target->id_loc;
      declarator->parameter_pack_p = target->parameter_pack_p;
      target->parameter_pack_p = false;
    }
  else
    declarator->parameter_pack_p = false;

  declarator->std_attributes = attributes;

  return declarator;
}





cp_declarator *
make_ptrmem_declarator (cp_cv_quals cv_qualifiers, tree class_type,
   cp_declarator *pointee,
   tree attributes)
{
  cp_declarator *declarator;

  declarator = make_declarator (cdk_ptrmem);
  declarator->declarator = pointee;
  declarator->u.pointer.qualifiers = cv_qualifiers;
  declarator->u.pointer.class_type = class_type;

  if (pointee)
    {
      declarator->parameter_pack_p = pointee->parameter_pack_p;
      pointee->parameter_pack_p = false;
    }
  else
    declarator->parameter_pack_p = false;

  declarator->std_attributes = attributes;

  return declarator;
}






cp_declarator *
make_call_declarator (cp_declarator *target,
        tree parms,
        cp_cv_quals cv_qualifiers,
        cp_virt_specifiers virt_specifiers,
        cp_ref_qualifier ref_qualifier,
        tree tx_qualifier,
        tree exception_specification,
        tree late_return_type,
        tree requires_clause)
{
  cp_declarator *declarator;

  declarator = make_declarator (cdk_function);
  declarator->declarator = target;
  declarator->u.function.parameters = parms;
  declarator->u.function.qualifiers = cv_qualifiers;
  declarator->u.function.virt_specifiers = virt_specifiers;
  declarator->u.function.ref_qualifier = ref_qualifier;
  declarator->u.function.tx_qualifier = tx_qualifier;
  declarator->u.function.exception_specification = exception_specification;
  declarator->u.function.late_return_type = late_return_type;
  declarator->u.function.requires_clause = requires_clause;
  if (target)
    {
      declarator->id_loc = target->id_loc;
      declarator->parameter_pack_p = target->parameter_pack_p;
      target->parameter_pack_p = false;
    }
  else
    declarator->parameter_pack_p = false;

  return declarator;
}




cp_declarator *
make_array_declarator (cp_declarator *element, tree bounds)
{
  cp_declarator *declarator;

  declarator = make_declarator (cdk_array);
  declarator->declarator = element;
  declarator->u.array.bounds = bounds;
  if (element)
    {
      declarator->id_loc = element->id_loc;
      declarator->parameter_pack_p = element->parameter_pack_p;
      element->parameter_pack_p = false;
    }
  else
    declarator->parameter_pack_p = false;

  return declarator;
}



static bool
declarator_can_be_parameter_pack (cp_declarator *declarator)
{
  if (declarator && declarator->parameter_pack_p)

    return false;





  bool found = false;
  while (declarator && !found)
    {
      switch ((int)declarator->kind)
 {
 case cdk_id:
 case cdk_array:
 case cdk_decomp:
   found = true;
   break;

 case cdk_error:
   return true;

 default:
   declarator = declarator->declarator;
   break;
 }
    }

  return !found;
}

cp_parameter_declarator *no_parameters;




cp_parameter_declarator *
make_parameter_declarator (cp_decl_specifier_seq *decl_specifiers,
      cp_declarator *declarator,
      tree default_argument,
      location_t loc,
      bool template_parameter_pack_p = false)
{
  cp_parameter_declarator *parameter;

  parameter = ((cp_parameter_declarator *)
        alloc_declarator (sizeof (cp_parameter_declarator)));
  parameter->next = 
# 1725 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 1725 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  if (decl_specifiers)
    parameter->decl_specifiers = *decl_specifiers;
  else
    clear_decl_specs (&parameter->decl_specifiers);
  parameter->declarator = declarator;
  parameter->default_argument = default_argument;
  parameter->template_parameter_pack_p = template_parameter_pack_p;
  parameter->loc = loc;

  return parameter;
}



static bool
function_declarator_p (const cp_declarator *declarator)
{
  while (declarator)
    {
      if (declarator->kind == cdk_function
   && declarator->declarator->kind == cdk_id)
 return true;
      if (declarator->kind == cdk_id
   || declarator->kind == cdk_decomp
   || declarator->kind == cdk_error)
 return false;
      declarator = declarator->declarator;
    }
  return false;
}
# 1815 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
enum
{

  CP_PARSER_FLAGS_NONE = 0x0,


  CP_PARSER_FLAGS_OPTIONAL = 0x1,


  CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES = 0x2,


  CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS = 0x4,


  CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR = 0x8,


  CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR = 0x10,

  CP_PARSER_FLAGS_TYPENAME_OPTIONAL = 0x20,

  CP_PARSER_FLAGS_DELAY_NOEXCEPT = 0x40,

  CP_PARSER_FLAGS_CONSTEVAL = 0x80
};



typedef int cp_parser_flags;



enum cp_parser_declarator_kind
{

  CP_PARSER_DECLARATOR_ABSTRACT,

  CP_PARSER_DECLARATOR_NAMED,

  CP_PARSER_DECLARATOR_EITHER
};





enum cp_parser_prec
{
  PREC_NOT_OPERATOR,
  PREC_LOGICAL_OR_EXPRESSION,
  PREC_LOGICAL_AND_EXPRESSION,
  PREC_INCLUSIVE_OR_EXPRESSION,
  PREC_EXCLUSIVE_OR_EXPRESSION,
  PREC_AND_EXPRESSION,
  PREC_EQUALITY_EXPRESSION,
  PREC_RELATIONAL_EXPRESSION,
  PREC_SPACESHIP_EXPRESSION,
  PREC_SHIFT_EXPRESSION,
  PREC_ADDITIVE_EXPRESSION,
  PREC_MULTIPLICATIVE_EXPRESSION,
  PREC_PM_EXPRESSION,
  NUM_PREC_VALUES = PREC_PM_EXPRESSION
};




struct cp_parser_binary_operations_map_node
{

  enum cpp_ttype token_type;

  enum tree_code tree_type;

  enum cp_parser_prec prec;
};

struct cp_parser_expression_stack_entry
{


  cp_expr lhs;


  enum tree_code lhs_type;

  enum tree_code tree_type;

  enum cp_parser_prec prec;

  location_t loc;
};




typedef struct cp_parser_expression_stack_entry
  cp_parser_expression_stack[NUM_PREC_VALUES];





static cp_parser_context *cp_parser_context_new
  (cp_parser_context *);



static cp_parser_context* cp_parser_context_free_list;





static const cp_parser_binary_operations_map_node binops[] = {
  { CPP_DEREF_STAR, MEMBER_REF, PREC_PM_EXPRESSION },
  { CPP_DOT_STAR, DOTSTAR_EXPR, PREC_PM_EXPRESSION },

  { CPP_MULT, MULT_EXPR, PREC_MULTIPLICATIVE_EXPRESSION },
  { CPP_DIV, TRUNC_DIV_EXPR, PREC_MULTIPLICATIVE_EXPRESSION },
  { CPP_MOD, TRUNC_MOD_EXPR, PREC_MULTIPLICATIVE_EXPRESSION },

  { CPP_PLUS, PLUS_EXPR, PREC_ADDITIVE_EXPRESSION },
  { CPP_MINUS, MINUS_EXPR, PREC_ADDITIVE_EXPRESSION },

  { CPP_LSHIFT, LSHIFT_EXPR, PREC_SHIFT_EXPRESSION },
  { CPP_RSHIFT, RSHIFT_EXPR, PREC_SHIFT_EXPRESSION },

  { CPP_SPACESHIP, SPACESHIP_EXPR, PREC_SPACESHIP_EXPRESSION },

  { CPP_LESS, LT_EXPR, PREC_RELATIONAL_EXPRESSION },
  { CPP_GREATER, GT_EXPR, PREC_RELATIONAL_EXPRESSION },
  { CPP_LESS_EQ, LE_EXPR, PREC_RELATIONAL_EXPRESSION },
  { CPP_GREATER_EQ, GE_EXPR, PREC_RELATIONAL_EXPRESSION },

  { CPP_EQ_EQ, EQ_EXPR, PREC_EQUALITY_EXPRESSION },
  { CPP_NOT_EQ, NE_EXPR, PREC_EQUALITY_EXPRESSION },

  { CPP_AND, BIT_AND_EXPR, PREC_AND_EXPRESSION },

  { CPP_XOR, BIT_XOR_EXPR, PREC_EXCLUSIVE_OR_EXPRESSION },

  { CPP_OR, BIT_IOR_EXPR, PREC_INCLUSIVE_OR_EXPRESSION },

  { CPP_AND_AND, TRUTH_ANDIF_EXPR, PREC_LOGICAL_AND_EXPRESSION },

  { CPP_OR_OR, TRUTH_ORIF_EXPR, PREC_LOGICAL_OR_EXPRESSION }
};




static cp_parser_binary_operations_map_node binops_by_token[((int) (((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1)) + 1)) + 1))];






static cp_parser_context *
cp_parser_context_new (cp_parser_context* next)
{
  cp_parser_context *context;


  if (cp_parser_context_free_list != 
# 1981 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 1981 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        )
    {

      context = cp_parser_context_free_list;
      cp_parser_context_free_list = context->next;
      memset (context, 0, sizeof (*context));
    }
  else
    context = ggc_cleared_alloc<cp_parser_context> ();


  context->status = CP_PARSER_STATUS_KIND_NO_ERROR;


  if (next)
    {


      context->object_type = next->object_type;

      context->next = next;
    }

  return context;
}
# 2018 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
push_unparsed_function_queues (cp_parser *parser)
{
  cp_unparsed_functions_entry e = { 
# 2021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 2021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , make_tree_vector (), 
# 2021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                              __null
# 2021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                  , 
# 2021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                    __null 
# 2021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                         };
  vec_safe_push (parser->unparsed_queues, e);
}

static void
pop_unparsed_function_queues (cp_parser *parser)
{
  release_tree_vector (parser->unparsed_queues->last ().funs_with_definitions);
  parser->unparsed_queues->pop ();
}





static cp_parser *cp_parser_new
  (cp_lexer *);
# 2053 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr cp_parser_identifier
  (cp_parser *);
static cp_expr cp_parser_string_literal
  (cp_parser *, bool, bool, bool);
static cp_expr cp_parser_userdef_char_literal
  (cp_parser *);
static tree cp_parser_userdef_string_literal
  (tree);
static cp_expr cp_parser_userdef_numeric_literal
  (cp_parser *);



static void cp_parser_translation_unit (cp_parser *);



static cp_expr cp_parser_primary_expression
  (cp_parser *, bool, bool, bool, cp_id_kind *);
static cp_expr cp_parser_id_expression
  (cp_parser *, bool, bool, bool *, bool, bool);
static cp_expr cp_parser_unqualified_id
  (cp_parser *, bool, bool, bool, bool);
static tree cp_parser_nested_name_specifier_opt
  (cp_parser *, bool, bool, bool, bool, bool = false);
static tree cp_parser_nested_name_specifier
  (cp_parser *, bool, bool, bool, bool);
static tree cp_parser_qualifying_entity
  (cp_parser *, bool, bool, bool, bool, bool);
static cp_expr cp_parser_postfix_expression
  (cp_parser *, bool, bool, bool, bool, cp_id_kind *);
static tree cp_parser_postfix_open_square_expression
  (cp_parser *, tree, bool, bool);
static tree cp_parser_postfix_dot_deref_expression
  (cp_parser *, enum cpp_ttype, cp_expr, bool, cp_id_kind *, location_t);
static vec<tree, va_gc> *cp_parser_parenthesized_expression_list
  (cp_parser *, int, bool, bool, bool *, location_t * = 
# 2089 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 2089 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           ,
   bool = false);

enum { non_attr = 0, normal_attr = 1, id_attr = 2 };
static void cp_parser_pseudo_destructor_name
  (cp_parser *, tree, tree *, tree *);
static cp_expr cp_parser_unary_expression
  (cp_parser *, cp_id_kind * = 
# 2096 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 2096 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  , bool = false, bool = false, bool = false);
static enum tree_code cp_parser_unary_operator
  (cp_token *);
static tree cp_parser_has_attribute_expression
  (cp_parser *);
static tree cp_parser_new_expression
  (cp_parser *);
static vec<tree, va_gc> *cp_parser_new_placement
  (cp_parser *);
static tree cp_parser_new_type_id
  (cp_parser *, tree *);
static cp_declarator *cp_parser_new_declarator_opt
  (cp_parser *);
static cp_declarator *cp_parser_direct_new_declarator
  (cp_parser *);
static vec<tree, va_gc> *cp_parser_new_initializer
  (cp_parser *);
static tree cp_parser_delete_expression
  (cp_parser *);
static cp_expr cp_parser_cast_expression
  (cp_parser *, bool, bool, bool, cp_id_kind *);
static cp_expr cp_parser_binary_expression
  (cp_parser *, bool, bool, enum cp_parser_prec, cp_id_kind *);
static tree cp_parser_question_colon_clause
  (cp_parser *, cp_expr);
static cp_expr cp_parser_assignment_expression
  (cp_parser *, cp_id_kind * = 
# 2122 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 2122 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  , bool = false, bool = false);
static enum tree_code cp_parser_assignment_operator_opt
  (cp_parser *);
static cp_expr cp_parser_expression
  (cp_parser *, cp_id_kind * = 
# 2126 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 2126 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  , bool = false, bool = false, bool = false);
static cp_expr cp_parser_constant_expression
  (cp_parser *, bool = false, bool * = 
# 2128 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                      __null
# 2128 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          , bool = false);
static cp_expr cp_parser_builtin_offsetof
  (cp_parser *);
static cp_expr cp_parser_lambda_expression
  (cp_parser *);
static void cp_parser_lambda_introducer
  (cp_parser *, tree);
static bool cp_parser_lambda_declarator_opt
  (cp_parser *, tree);
static void cp_parser_lambda_body
  (cp_parser *, tree);



static void cp_parser_statement
  (cp_parser *, tree, bool, bool *, vec<tree> * = 
# 2143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                 __null
# 2143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     , location_t * = 
# 2143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                      __null
# 2143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                          );
static void cp_parser_label_for_labeled_statement
(cp_parser *, tree);
static tree cp_parser_expression_statement
  (cp_parser *, tree);
static tree cp_parser_compound_statement
  (cp_parser *, tree, int, bool);
static void cp_parser_statement_seq_opt
  (cp_parser *, tree);
static tree cp_parser_selection_statement
  (cp_parser *, bool *, vec<tree> *);
static tree cp_parser_condition
  (cp_parser *);
static tree cp_parser_iteration_statement
  (cp_parser *, bool *, bool, unsigned short);
static bool cp_parser_init_statement
  (cp_parser *, tree *decl);
static tree cp_parser_for
  (cp_parser *, bool, unsigned short);
static tree cp_parser_c_for
  (cp_parser *, tree, tree, bool, unsigned short);
static tree cp_parser_range_for
  (cp_parser *, tree, tree, tree, bool, unsigned short, bool);
static void do_range_for_auto_deduction
  (tree, tree);
static tree cp_parser_perform_range_for_lookup
  (tree, tree *, tree *);
static tree cp_parser_range_for_member_function
  (tree, tree);
static tree cp_parser_jump_statement
  (cp_parser *);
static void cp_parser_declaration_statement
  (cp_parser *);

static tree cp_parser_implicitly_scoped_statement
  (cp_parser *, bool *, const token_indent_info &, vec<tree> * = 
# 2178 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                __null
# 2178 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                    );
static void cp_parser_already_scoped_statement
  (cp_parser *, bool *, const token_indent_info &);



static void cp_parser_declaration_seq_opt
  (cp_parser *);
static void cp_parser_declaration
  (cp_parser *);
static void cp_parser_toplevel_declaration
  (cp_parser *);
static void cp_parser_block_declaration
  (cp_parser *, bool);
static void cp_parser_simple_declaration
  (cp_parser *, bool, tree *);
static void cp_parser_decl_specifier_seq
  (cp_parser *, cp_parser_flags, cp_decl_specifier_seq *, int *);
static tree cp_parser_storage_class_specifier_opt
  (cp_parser *);
static tree cp_parser_function_specifier_opt
  (cp_parser *, cp_decl_specifier_seq *);
static tree cp_parser_type_specifier
  (cp_parser *, cp_parser_flags, cp_decl_specifier_seq *, bool,
   int *, bool *);
static tree cp_parser_simple_type_specifier
  (cp_parser *, cp_decl_specifier_seq *, cp_parser_flags);
static tree cp_parser_placeholder_type_specifier
  (cp_parser *, location_t, tree, bool);
static tree cp_parser_type_name
  (cp_parser *, bool);
static tree cp_parser_nonclass_name
  (cp_parser* parser);
static tree cp_parser_elaborated_type_specifier
  (cp_parser *, bool, bool);
static tree cp_parser_enum_specifier
  (cp_parser *);
static void cp_parser_enumerator_list
  (cp_parser *, tree);
static void cp_parser_enumerator_definition
  (cp_parser *, tree);
static tree cp_parser_namespace_name
  (cp_parser *);
static void cp_parser_namespace_definition
  (cp_parser *);
static void cp_parser_namespace_body
  (cp_parser *);
static tree cp_parser_qualified_namespace_specifier
  (cp_parser *);
static void cp_parser_namespace_alias_definition
  (cp_parser *);
static bool cp_parser_using_declaration
  (cp_parser *, bool);
static void cp_parser_using_directive
  (cp_parser *);
static tree cp_parser_alias_declaration
  (cp_parser *);
static void cp_parser_asm_definition
  (cp_parser *);
static void cp_parser_linkage_specification
  (cp_parser *);
static void cp_parser_static_assert
  (cp_parser *, bool);
static tree cp_parser_decltype
  (cp_parser *);
static tree cp_parser_decomposition_declaration
  (cp_parser *, cp_decl_specifier_seq *, tree *, location_t *);



static tree cp_parser_init_declarator
  (cp_parser *, cp_parser_flags, cp_decl_specifier_seq *,
   vec<deferred_access_check, va_gc> *, bool, bool, int, bool *, tree *,
   location_t *, tree *);
static cp_declarator *cp_parser_declarator
  (cp_parser *, cp_parser_declarator_kind, cp_parser_flags, int *, bool *,
   bool, bool, bool);
static cp_declarator *cp_parser_direct_declarator
  (cp_parser *, cp_parser_declarator_kind, cp_parser_flags, int *, bool, bool,
   bool);
static enum tree_code cp_parser_ptr_operator
  (cp_parser *, tree *, cp_cv_quals *, tree *);
static cp_cv_quals cp_parser_cv_qualifier_seq_opt
  (cp_parser *);
static cp_virt_specifiers cp_parser_virt_specifier_seq_opt
  (cp_parser *);
static cp_ref_qualifier cp_parser_ref_qualifier_opt
  (cp_parser *);
static tree cp_parser_tx_qualifier_opt
  (cp_parser *);
static tree cp_parser_late_return_type_opt
  (cp_parser *, cp_declarator *, tree &);
static tree cp_parser_declarator_id
  (cp_parser *, bool);
static tree cp_parser_type_id
  (cp_parser *, cp_parser_flags = CP_PARSER_FLAGS_NONE, location_t * = 
# 2273 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                      __null
# 2273 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                          );
static tree cp_parser_template_type_arg
  (cp_parser *);
static tree cp_parser_trailing_type_id (cp_parser *);
static tree cp_parser_type_id_1
  (cp_parser *, cp_parser_flags, bool, bool, location_t *);
static void cp_parser_type_specifier_seq
  (cp_parser *, cp_parser_flags, bool, bool, cp_decl_specifier_seq *);
static tree cp_parser_parameter_declaration_clause
  (cp_parser *, cp_parser_flags);
static tree cp_parser_parameter_declaration_list
  (cp_parser *, cp_parser_flags);
static cp_parameter_declarator *cp_parser_parameter_declaration
  (cp_parser *, cp_parser_flags, bool, bool *);
static tree cp_parser_default_argument
  (cp_parser *, bool);
static void cp_parser_function_body
  (cp_parser *, bool);
static tree cp_parser_initializer
  (cp_parser *, bool *, bool *, bool = false);
static cp_expr cp_parser_initializer_clause
  (cp_parser *, bool *);
static cp_expr cp_parser_braced_list
  (cp_parser*, bool*);
static vec<constructor_elt, va_gc> *cp_parser_initializer_list
  (cp_parser *, bool *, bool *);

static void cp_parser_ctor_initializer_opt_and_function_body
  (cp_parser *, bool);

static tree cp_parser_late_parsing_omp_declare_simd
  (cp_parser *, tree);

static tree cp_parser_late_parsing_oacc_routine
  (cp_parser *, tree);

static tree synthesize_implicit_template_parm
  (cp_parser *, tree);
static tree finish_fully_implicit_template
  (cp_parser *, tree);
static void abort_fully_implicit_template
  (cp_parser *);



static tree cp_parser_class_name
  (cp_parser *, bool, bool, enum tag_types, bool, bool, bool, bool = false);
static tree cp_parser_class_specifier
  (cp_parser *);
static tree cp_parser_class_head
  (cp_parser *, bool *);
static enum tag_types cp_parser_class_key
  (cp_parser *);
static void cp_parser_type_parameter_key
  (cp_parser* parser);
static void cp_parser_member_specification_opt
  (cp_parser *);
static void cp_parser_member_declaration
  (cp_parser *);
static tree cp_parser_pure_specifier
  (cp_parser *);
static tree cp_parser_constant_initializer
  (cp_parser *);



static tree cp_parser_base_clause
  (cp_parser *);
static tree cp_parser_base_specifier
  (cp_parser *);



static tree cp_parser_conversion_function_id
  (cp_parser *);
static tree cp_parser_conversion_type_id
  (cp_parser *);
static cp_declarator *cp_parser_conversion_declarator_opt
  (cp_parser *);
static void cp_parser_ctor_initializer_opt
  (cp_parser *);
static void cp_parser_mem_initializer_list
  (cp_parser *);
static tree cp_parser_mem_initializer
  (cp_parser *);
static tree cp_parser_mem_initializer_id
  (cp_parser *);



static cp_expr cp_parser_operator_function_id
  (cp_parser *);
static cp_expr cp_parser_operator
  (cp_parser *, location_t);



static void cp_parser_template_declaration
  (cp_parser *, bool);
static tree cp_parser_template_parameter_list
  (cp_parser *);
static tree cp_parser_template_parameter
  (cp_parser *, bool *, bool *);
static tree cp_parser_type_parameter
  (cp_parser *, bool *);
static tree cp_parser_template_id
  (cp_parser *, bool, bool, enum tag_types, bool);
static tree cp_parser_template_id_expr
  (cp_parser *, bool, bool, bool);
static tree cp_parser_template_name
  (cp_parser *, bool, bool, bool, enum tag_types, bool *);
static tree cp_parser_template_argument_list
  (cp_parser *);
static tree cp_parser_template_argument
  (cp_parser *);
static void cp_parser_explicit_instantiation
  (cp_parser *);
static void cp_parser_explicit_specialization
  (cp_parser *);



static tree cp_parser_try_block
  (cp_parser *);
static void cp_parser_function_try_block
  (cp_parser *);
static void cp_parser_handler_seq
  (cp_parser *);
static void cp_parser_handler
  (cp_parser *);
static tree cp_parser_exception_declaration
  (cp_parser *);
static tree cp_parser_throw_expression
  (cp_parser *);
static tree cp_parser_exception_specification_opt
  (cp_parser *, cp_parser_flags);
static tree cp_parser_type_id_list
  (cp_parser *);
static tree cp_parser_noexcept_specification_opt
  (cp_parser *, cp_parser_flags, bool, bool *, bool);



static tree cp_parser_asm_specification_opt
  (cp_parser *);
static tree cp_parser_asm_operand_list
  (cp_parser *);
static tree cp_parser_asm_clobber_list
  (cp_parser *);
static tree cp_parser_asm_label_list
  (cp_parser *);
static bool cp_next_tokens_can_be_attribute_p
  (cp_parser *);
static bool cp_next_tokens_can_be_gnu_attribute_p
  (cp_parser *);
static bool cp_next_tokens_can_be_std_attribute_p
  (cp_parser *);
static bool cp_nth_tokens_can_be_std_attribute_p
  (cp_parser *, size_t);
static bool cp_nth_tokens_can_be_gnu_attribute_p
  (cp_parser *, size_t);
static bool cp_nth_tokens_can_be_attribute_p
  (cp_parser *, size_t);
static tree cp_parser_attributes_opt
  (cp_parser *);
static tree cp_parser_gnu_attributes_opt
  (cp_parser *);
static tree cp_parser_gnu_attribute_list
  (cp_parser *, bool = false);
static tree cp_parser_std_attribute
  (cp_parser *, tree);
static tree cp_parser_std_attribute_spec
  (cp_parser *);
static tree cp_parser_std_attribute_spec_seq
  (cp_parser *);
static size_t cp_parser_skip_attributes_opt
  (cp_parser *, size_t);
static bool cp_parser_extension_opt
  (cp_parser *, int *);
static void cp_parser_label_declaration
  (cp_parser *);



static tree cp_parser_concept_definition
  (cp_parser *);
static tree cp_parser_constraint_expression
  (cp_parser *);
static tree cp_parser_requires_clause_opt
  (cp_parser *, bool);
static tree cp_parser_requires_expression
  (cp_parser *);
static tree cp_parser_requirement_parameter_list
  (cp_parser *);
static tree cp_parser_requirement_body
  (cp_parser *);
static tree cp_parser_requirement_seq
  (cp_parser *);
static tree cp_parser_requirement
  (cp_parser *);
static tree cp_parser_simple_requirement
  (cp_parser *);
static tree cp_parser_compound_requirement
  (cp_parser *);
static tree cp_parser_type_requirement
  (cp_parser *);
static tree cp_parser_nested_requirement
  (cp_parser *);



static tree cp_parser_transaction
  (cp_parser *, cp_token *);
static tree cp_parser_transaction_expression
  (cp_parser *, enum rid);
static void cp_parser_function_transaction
  (cp_parser *, enum rid);
static tree cp_parser_transaction_cancel
  (cp_parser *);



static tree cp_parser_yield_expression
  (cp_parser *);


enum pragma_context {
  pragma_external,
  pragma_member,
  pragma_objc_icode,
  pragma_stmt,
  pragma_compound
};
static bool cp_parser_pragma
  (cp_parser *, enum pragma_context, bool *);



static tree cp_parser_objc_message_receiver
  (cp_parser *);
static tree cp_parser_objc_message_args
  (cp_parser *);
static tree cp_parser_objc_message_expression
  (cp_parser *);
static cp_expr cp_parser_objc_encode_expression
  (cp_parser *);
static tree cp_parser_objc_defs_expression
  (cp_parser *);
static tree cp_parser_objc_protocol_expression
  (cp_parser *);
static tree cp_parser_objc_selector_expression
  (cp_parser *);
static cp_expr cp_parser_objc_expression
  (cp_parser *);
static bool cp_parser_objc_selector_p
  (enum cpp_ttype);
static tree cp_parser_objc_selector
  (cp_parser *);
static tree cp_parser_objc_protocol_refs_opt
  (cp_parser *);
static void cp_parser_objc_declaration
  (cp_parser *, tree);
static tree cp_parser_objc_statement
  (cp_parser *);
static bool cp_parser_objc_valid_prefix_attributes
  (cp_parser *, tree *);
static void cp_parser_objc_at_property_declaration
  (cp_parser *) ;
static void cp_parser_objc_at_synthesize_declaration
  (cp_parser *) ;
static void cp_parser_objc_at_dynamic_declaration
  (cp_parser *) ;
static tree cp_parser_objc_struct_declaration
  (cp_parser *) ;



static cp_expr cp_parser_lookup_name
  (cp_parser *, tree, enum tag_types, bool, bool, bool, tree *, location_t);
static tree cp_parser_lookup_name_simple
  (cp_parser *, tree, location_t);
static tree cp_parser_maybe_treat_template_as_class
  (tree, bool);
static bool cp_parser_check_declarator_template_parameters
  (cp_parser *, cp_declarator *, location_t);
static bool cp_parser_check_template_parameters
  (cp_parser *, unsigned, bool, location_t, cp_declarator *);
static cp_expr cp_parser_simple_cast_expression
  (cp_parser *);
static tree cp_parser_global_scope_opt
  (cp_parser *, bool);
static bool cp_parser_constructor_declarator_p
  (cp_parser *, cp_parser_flags, bool);
static tree cp_parser_function_definition_from_specifiers_and_declarator
  (cp_parser *, cp_decl_specifier_seq *, tree, const cp_declarator *);
static tree cp_parser_function_definition_after_declarator
  (cp_parser *, bool);
static bool cp_parser_template_declaration_after_export
  (cp_parser *, bool);
static void cp_parser_perform_template_parameter_access_checks
  (vec<deferred_access_check, va_gc> *);
static tree cp_parser_single_declaration
  (cp_parser *, vec<deferred_access_check, va_gc> *, bool, bool, bool *);
static cp_expr cp_parser_functional_cast
  (cp_parser *, tree);
static tree cp_parser_save_member_function_body
  (cp_parser *, cp_decl_specifier_seq *, cp_declarator *, tree);
static tree cp_parser_save_nsdmi
  (cp_parser *);
static tree cp_parser_enclosed_template_argument_list
  (cp_parser *);
static void cp_parser_save_default_args
  (cp_parser *, tree);
static void cp_parser_late_parsing_for_member
  (cp_parser *, tree);
static tree cp_parser_late_parse_one_default_arg
  (cp_parser *, tree, tree, tree);
static void cp_parser_late_parsing_nsdmi
  (cp_parser *, tree);
static void cp_parser_late_parsing_default_args
  (cp_parser *, tree);
static tree cp_parser_sizeof_operand
  (cp_parser *, enum rid);
static cp_expr cp_parser_trait_expr
  (cp_parser *, enum rid);
static bool cp_parser_declares_only_class_p
  (cp_parser *);
static void cp_parser_set_storage_class
  (cp_parser *, cp_decl_specifier_seq *, enum rid, cp_token *);
static void cp_parser_set_decl_spec_type
  (cp_decl_specifier_seq *, tree, cp_token *, bool);
static void set_and_check_decl_spec_loc
  (cp_decl_specifier_seq *decl_specs,
   cp_decl_spec ds, cp_token *);
static bool cp_parser_friend_p
  (const cp_decl_specifier_seq *);
static void cp_parser_required_error
  (cp_parser *, required_token, bool, location_t);
static cp_token *cp_parser_require
  (cp_parser *, enum cpp_ttype, required_token, location_t = ((location_t) 0));
static cp_token *cp_parser_require_keyword
  (cp_parser *, enum rid, required_token);
static bool cp_parser_token_starts_function_definition_p
  (cp_token *);
static bool cp_parser_next_token_starts_class_definition_p
  (cp_parser *);
static bool cp_parser_next_token_ends_template_argument_p
  (cp_parser *);
static bool cp_parser_nth_token_starts_template_argument_list_p
  (cp_parser *, size_t);
static enum tag_types cp_parser_token_is_class_key
  (cp_token *);
static enum tag_types cp_parser_token_is_type_parameter_key
  (cp_token *);
static void cp_parser_maybe_warn_enum_key (cp_parser *, location_t, tree, rid);
static void cp_parser_check_class_key
(cp_parser *, location_t, enum tag_types, tree type, bool, bool);
static void cp_parser_check_access_in_redeclaration
  (tree type, location_t location);
static bool cp_parser_optional_template_keyword
  (cp_parser *);
static void cp_parser_pre_parsed_nested_name_specifier
  (cp_parser *);
static bool cp_parser_cache_group
  (cp_parser *, enum cpp_ttype, unsigned);
static tree cp_parser_cache_defarg
  (cp_parser *parser, bool nsdmi);
static void cp_parser_parse_tentatively
  (cp_parser *);
static void cp_parser_commit_to_tentative_parse
  (cp_parser *);
static void cp_parser_commit_to_topmost_tentative_parse
  (cp_parser *);
static void cp_parser_abort_tentative_parse
  (cp_parser *);
static bool cp_parser_parse_definitely
  (cp_parser *);
static inline bool cp_parser_parsing_tentatively
  (cp_parser *);
static bool cp_parser_uncommitted_to_tentative_parse_p
  (cp_parser *);
static void cp_parser_error
  (cp_parser *, const char *);
static void cp_parser_name_lookup_error
  (cp_parser *, tree, tree, name_lookup_error, location_t);
static bool cp_parser_simulate_error
  (cp_parser *);
static bool cp_parser_check_type_definition
  (cp_parser *);
static void cp_parser_check_for_definition_in_return_type
  (cp_declarator *, tree, location_t type_location);
static void cp_parser_check_for_invalid_template_id
  (cp_parser *, tree, enum tag_types, location_t location);
static bool cp_parser_non_integral_constant_expression
  (cp_parser *, non_integral_constant);
static void cp_parser_diagnose_invalid_type_name
  (cp_parser *, tree, location_t);
static bool cp_parser_parse_and_diagnose_invalid_type_name
  (cp_parser *);
static int cp_parser_skip_to_closing_parenthesis
  (cp_parser *, bool, bool, bool);
static void cp_parser_skip_to_end_of_statement
  (cp_parser *);
static void cp_parser_consume_semicolon_at_end_of_statement
  (cp_parser *);
static void cp_parser_skip_to_end_of_block_or_statement
  (cp_parser *);
static bool cp_parser_skip_to_closing_brace
  (cp_parser *);
static void cp_parser_skip_to_end_of_template_parameter_list
  (cp_parser *);
static void cp_parser_skip_to_pragma_eol
  (cp_parser*, cp_token *);
static bool cp_parser_error_occurred
  (cp_parser *);
static bool cp_parser_allow_gnu_extensions_p
  (cp_parser *);
static bool cp_parser_is_pure_string_literal
  (cp_token *);
static bool cp_parser_is_string_literal
  (cp_token *);
static bool cp_parser_is_keyword
  (cp_token *, enum rid);
static tree cp_parser_make_typename_type
  (cp_parser *, tree, location_t location);
static cp_declarator * cp_parser_make_indirect_declarator
  (enum tree_code, tree, cp_cv_quals, cp_declarator *, tree);
static bool cp_parser_compound_literal_p
  (cp_parser *);
static bool cp_parser_array_designator_p
  (cp_parser *);
static bool cp_parser_init_statement_p
  (cp_parser *);
static bool cp_parser_skip_to_closing_square_bracket
  (cp_parser *);
static size_t cp_parser_skip_balanced_tokens (cp_parser *, size_t);





cp_unevaluated::cp_unevaluated ()
{
  ++cp_unevaluated_operand;
  ++c_inhibit_evaluation_warnings;
}

cp_unevaluated::~cp_unevaluated ()
{
  --c_inhibit_evaluation_warnings;
  --cp_unevaluated_operand;
}






static inline bool
cp_parser_parsing_tentatively (cp_parser* parser)
{
  return parser->context->next != 
# 2734 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 2734 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
}



static bool
cp_parser_is_pure_string_literal (cp_token* token)
{
  return (token->type == CPP_STRING ||
   token->type == CPP_STRING16 ||
   token->type == CPP_STRING32 ||
   token->type == CPP_WSTRING ||
   token->type == CPP_UTF8STRING);
}




static bool
cp_parser_is_string_literal (cp_token* token)
{
  return (cp_parser_is_pure_string_literal (token) ||
   token->type == CPP_STRING_USERDEF ||
   token->type == CPP_STRING16_USERDEF ||
   token->type == CPP_STRING32_USERDEF ||
   token->type == CPP_WSTRING_USERDEF ||
   token->type == CPP_UTF8STRING_USERDEF);
}



static bool
cp_parser_is_keyword (cp_token* token, enum rid keyword)
{
  return token->keyword == keyword;
}




static enum pragma_kind
cp_parser_pragma_kind (cp_token *token)
{
  if (token->type != CPP_PRAGMA)
    return PRAGMA_NONE;

  return (enum pragma_kind) ((unsigned long) (*tree_int_cst_elt_check ((token->u.value), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 2780, __FUNCTION__)));
}
# 2794 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_lexer_peek_conflict_marker (cp_lexer *lexer, enum cpp_ttype tok1_kind,
          location_t *out_loc)
{
  cp_token *token2 = cp_lexer_peek_nth_token (lexer, 2);
  if (token2->type != tok1_kind)
    return false;
  cp_token *token3 = cp_lexer_peek_nth_token (lexer, 3);
  if (token3->type != tok1_kind)
    return false;
  cp_token *token4 = cp_lexer_peek_nth_token (lexer, 4);
  if (token4->type != conflict_marker_get_final_tok_kind (tok1_kind))
    return false;


  location_t start_loc = cp_lexer_peek_token (lexer)->location;
  if (((expand_location (start_loc)).column) != 1)
    return false;





  location_t finish_loc = get_finish (token4->location);
  *out_loc = make_location (start_loc, start_loc, finish_loc);

  return true;
}




static const char *
get_matching_symbol (required_token token_desc)
{
  switch (token_desc)
    {
    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 2832, __FUNCTION__));
      return "";
    case RT_CLOSE_BRACE:
      return "{";
    case RT_CLOSE_PAREN:
      return "(";
    }
}




static enum cpp_ttype
get_required_cpp_ttype (required_token token_desc)
{
  switch (token_desc)
    {
    case RT_SEMICOLON:
      return CPP_SEMICOLON;
    case RT_OPEN_PAREN:
      return CPP_OPEN_PAREN;
    case RT_CLOSE_BRACE:
      return CPP_CLOSE_BRACE;
    case RT_OPEN_BRACE:
      return CPP_OPEN_BRACE;
    case RT_CLOSE_SQUARE:
      return CPP_CLOSE_SQUARE;
    case RT_OPEN_SQUARE:
      return CPP_OPEN_SQUARE;
    case RT_COMMA:
      return CPP_COMMA;
    case RT_COLON:
      return CPP_COLON;
    case RT_CLOSE_PAREN:
      return CPP_CLOSE_PAREN;

    default:

      return CPP_EOF;
    }
}
# 2893 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_error_1 (cp_parser* parser, const char* gmsgid,
     required_token missing_token_desc,
     location_t matching_location)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);


  cp_lexer_set_source_position_from_token (token);

  if (token->type == CPP_PRAGMA)
    {
      error_at (token->location,
  "%<#pragma%> is not allowed here");
      cp_parser_skip_to_pragma_eol (parser, token);
      return;
    }


  if (token->type == CPP_LSHIFT
      || token->type == CPP_RSHIFT
      || token->type == CPP_EQ_EQ)
    {
      location_t loc;
      if (cp_lexer_peek_conflict_marker (parser->lexer, token->type, &loc))
 {
   error_at (loc, "version control conflict marker in file");
   expanded_location token_exploc = expand_location (token->location);

   for (;;)
     {
       cp_lexer_consume_token (parser->lexer);
       cp_token *next = cp_lexer_peek_token (parser->lexer);
       if (next->type == CPP_EOF)
  break;
       if (next->location == ((location_t) 0)
    || loc == ((location_t) 0))
  break;

       expanded_location next_exploc = expand_location (next->location);
       if (next_exploc.file != token_exploc.file)
  break;
       if (next_exploc.line != token_exploc.line)
  break;
     }
   return;
 }
    }

  auto_diagnostic_group d;
  gcc_rich_location richloc (input_location);

  bool added_matching_location = false;

  if (missing_token_desc != RT_NONE)
    if (cp_token *prev_token = cp_lexer_safe_previous_token (parser->lexer))
      {



 enum cpp_ttype ttype = get_required_cpp_ttype (missing_token_desc);
 location_t prev_token_loc = prev_token->location;
 maybe_suggest_missing_token_insertion (&richloc, ttype,
            prev_token_loc);




 if (matching_location != ((location_t) 0))
   added_matching_location
     = richloc.add_location_if_nearby (matching_location);
      }






  name_hint h;
  if (token->type == CPP_NAME)
    if (cp_token *prev_token = cp_lexer_safe_previous_token (parser->lexer))
      if (cp_parser_is_string_literal (prev_token))
 {
   tree name = token->u.value;
   const char *token_name = ((const char *) (tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 2977, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
   const char *header_hint
     = get_cp_stdlib_header_for_string_macro_name (token_name);
   if (header_hint != 
# 2980 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 2980 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         )
     h = name_hint (
# 2981 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 2981 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       , new suggest_missing_header (token->location,
            token_name,
            header_hint));
 }


  c_parse_error (gmsgid,



   (token->type == CPP_KEYWORD ? CPP_NAME : token->type),
   token->u.value, token->flags, &richloc);

  if (missing_token_desc != RT_NONE)
    {


      if (matching_location != ((location_t) 0)
   && !added_matching_location)
 inform (matching_location, "to match this %qs",
  get_matching_symbol (missing_token_desc));
    }
}







static void
cp_parser_error (cp_parser* parser, const char* gmsgid)
{
  if (!cp_parser_simulate_error (parser))
    cp_parser_error_1 (parser, gmsgid, RT_NONE, ((location_t) 0));
}






static void
cp_parser_name_lookup_error (cp_parser* parser,
        tree name,
        tree decl,
        name_lookup_error desired,
        location_t location)
{


  if (decl == global_trees[TI_ERROR_MARK])
    {
      if (parser->scope && parser->scope != cp_global_trees[CPTI_GLOBAL])
 error_at (location, "%<%E::%E%> has not been declared",
    parser->scope, name);
      else if (parser->scope == cp_global_trees[CPTI_GLOBAL])
 error_at (location, "%<::%E%> has not been declared", name);
      else if (parser->object_scope
        && !(((((enum tree_code) (parser->object_scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (parser->object_scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((parser->object_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3040, __FUNCTION__))->type_common.lang_flag_5)))
 error_at (location, "request for member %qE in non-class type %qT",
    name, parser->object_scope);
      else if (parser->object_scope)
 error_at (location, "%<%T::%E%> has not been declared",
    parser->object_scope, name);
      else
 error_at (location, "%qE has not been declared", name);
    }
  else if (parser->scope && parser->scope != cp_global_trees[CPTI_GLOBAL])
    {
      switch (desired)
 {
   case NLE_TYPE:
     error_at (location, "%<%E::%E%> is not a type",
        parser->scope, name);
     break;
   case NLE_CXX98:
     error_at (location, "%<%E::%E%> is not a class or namespace",
        parser->scope, name);
     break;
   case NLE_NOT_CXX98:
     error_at (location,
            "%<%E::%E%> is not a class, namespace, or enumeration",
        parser->scope, name);
     break;
   default:
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3067, __FUNCTION__));

 }
    }
  else if (parser->scope == cp_global_trees[CPTI_GLOBAL])
    {
      switch (desired)
 {
   case NLE_TYPE:
     error_at (location, "%<::%E%> is not a type", name);
     break;
   case NLE_CXX98:
     error_at (location, "%<::%E%> is not a class or namespace", name);
     break;
   case NLE_NOT_CXX98:
     error_at (location,
        "%<::%E%> is not a class, namespace, or enumeration",
        name);
     break;
   default:
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3087, __FUNCTION__));
 }
    }
  else
    {
      switch (desired)
 {
   case NLE_TYPE:
     error_at (location, "%qE is not a type", name);
     break;
   case NLE_CXX98:
     error_at (location, "%qE is not a class or namespace", name);
     break;
   case NLE_NOT_CXX98:
     error_at (location,
        "%qE is not a class, namespace, or enumeration", name);
     break;
   default:
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3105, __FUNCTION__));
 }
    }
}





static bool
cp_parser_simulate_error (cp_parser* parser)
{
  if (cp_parser_uncommitted_to_tentative_parse_p (parser))
    {
      parser->context->status = CP_PARSER_STATUS_KIND_ERROR;
      return true;
    }
  return false;
}





static bool
cp_parser_check_type_definition (cp_parser* parser)
{

  if (parser->type_definition_forbidden_message)
    {


      error (parser->type_definition_forbidden_message,
      parser->type_definition_forbidden_message_arg);
      return false;
    }
  return true;
}







static void
cp_parser_check_for_definition_in_return_type (cp_declarator *declarator,
            tree type, location_t type_location)
{



  while (declarator
  && (declarator->kind == cdk_pointer
      || declarator->kind == cdk_reference
      || declarator->kind == cdk_ptrmem))
    declarator = declarator->declarator;
  if (declarator
      && declarator->kind == cdk_function)
    {
      error_at (type_location,
  "new types may not be defined in a return type");
      inform (type_location,
       "(perhaps a semicolon is missing after the definition of %qT)",
       type);
    }
}







static void
cp_parser_check_for_invalid_template_id (cp_parser* parser,
      tree type,
      enum tag_types tag_type,
      location_t location)
{
  cp_token_position start = 0;

  if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))
    {
      if (((enum tree_code) (type)->base.code) == TYPE_DECL)
 type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3190, __FUNCTION__))->typed.type);
      if ((tree_code_type[(int) (((enum tree_code) (type)->base.code))] == tcc_type) && !template_placeholder_p (type))
 error_at (location, "%qT is not a template", type);
      else if (identifier_p (type))
 {
   if (tag_type != none_type)
     error_at (location, "%qE is not a class template", type);
   else
     error_at (location, "%qE is not a template", type);
 }
      else
 error_at (location, "invalid template-id");

      if (cp_parser_uncommitted_to_tentative_parse_p (parser))
 start = cp_lexer_token_position (parser->lexer, true);

      cp_lexer_consume_token (parser->lexer);

      cp_parser_enclosed_template_argument_list (parser);


      if (start)
 cp_lexer_purge_tokens_after (parser->lexer, start);
    }
}






static bool
cp_parser_non_integral_constant_expression (cp_parser *parser,
         non_integral_constant thing)
{
  parser->non_integral_constant_expression_p = true;
  if (parser->integral_constant_expression_p)
    {
      if (!parser->allow_non_integral_constant_expression_p)
 {
   const char *msg = 
# 3230 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 3230 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
   switch (thing)
     {
         case NIC_FLOAT:
  pedwarn (input_location, OPT_Wpedantic,
    "ISO C++ forbids using a floating-point literal "
    "in a constant-expression");
  return true;
       case NIC_CAST:
  error ("a cast to a type other than an integral or "
         "enumeration type cannot appear in a "
         "constant-expression");
  return true;
       case NIC_TYPEID:
  error ("%<typeid%> operator "
         "cannot appear in a constant-expression");
  return true;
       case NIC_NCC:
  error ("non-constant compound literals "
         "cannot appear in a constant-expression");
  return true;
       case NIC_FUNC_CALL:
  error ("a function call "
         "cannot appear in a constant-expression");
  return true;
       case NIC_INC:
  error ("an increment "
         "cannot appear in a constant-expression");
  return true;
       case NIC_DEC:
  error ("an decrement "
         "cannot appear in a constant-expression");
  return true;
       case NIC_ARRAY_REF:
  error ("an array reference "
         "cannot appear in a constant-expression");
  return true;
       case NIC_ADDR_LABEL:
  error ("the address of a label "
         "cannot appear in a constant-expression");
  return true;
       case NIC_OVERLOADED:
  error ("calls to overloaded operators "
         "cannot appear in a constant-expression");
  return true;
       case NIC_ASSIGNMENT:
  error ("an assignment cannot appear in a constant-expression");
  return true;
       case NIC_COMMA:
  error ("a comma operator "
         "cannot appear in a constant-expression");
  return true;
       case NIC_CONSTRUCTOR:
  error ("a call to a constructor "
         "cannot appear in a constant-expression");
  return true;
       case NIC_TRANSACTION:
  error ("a transaction expression "
         "cannot appear in a constant-expression");
  return true;
       case NIC_THIS:
  msg = "this";
  break;
       case NIC_FUNC_NAME:
  msg = "__FUNCTION__";
  break;
         case NIC_PRETTY_FUNC:
  msg = "__PRETTY_FUNCTION__";
  break;
       case NIC_C99_FUNC:
  msg = "__func__";
  break;
       case NIC_VA_ARG:
  msg = "va_arg";
  break;
       case NIC_ARROW:
  msg = "->";
  break;
       case NIC_POINT:
  msg = ".";
  break;
       case NIC_STAR:
  msg = "*";
  break;
       case NIC_ADDR:
  msg = "&";
  break;
       case NIC_PREINCREMENT:
  msg = "++";
  break;
       case NIC_PREDECREMENT:
  msg = "--";
  break;
       case NIC_NEW:
  msg = "new";
  break;
       case NIC_DEL:
  msg = "delete";
  break;
       default:
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3330, __FUNCTION__));
     }
   if (msg)
     error ("%qs cannot appear in a constant-expression", msg);
   return true;
 }
    }
  return false;
}






static void
cp_parser_diagnose_invalid_type_name (cp_parser *parser, tree id,
          location_t location)
{
  tree decl, ambiguous_decls;
  cp_parser_commit_to_tentative_parse (parser);

  decl = cp_parser_lookup_name (parser, id, none_type,
                    false,
                     false,
                         true,
    &ambiguous_decls, location);
  if (ambiguous_decls)


    return;


  if ((((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3363, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 3363 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 3363 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3363, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL))
    {
      auto_diagnostic_group d;
      error_at (location,
  "invalid use of template-name %qE without an argument list",
  decl);
      if (((((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3369, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 3369 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null 
# 3369 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3369, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL) && (((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3369, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL && ((contains_struct_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3369, __FUNCTION__, (TEMPLATE_DECL))))))))->result), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3369, __FUNCTION__))->decl_common.lang_flag_2))) && cxx_dialect < cxx17)
 inform (location, "class template argument deduction is only available "
  "with %<-std=c++17%> or %<-std=gnu++17%>");
      inform (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3372, __FUNCTION__))->decl_minimal.locus), "%qD declared here", decl);
    }
  else if (((enum tree_code) (id)->base.code) == BIT_NOT_EXPR)
    error_at (location, "invalid use of destructor %qD as a type", id);
  else if (((enum tree_code) (decl)->base.code) == TYPE_DECL)

    error_at (location, "invalid combination of multiple type-specifiers");
  else if (!parser->scope)
    {

      auto_diagnostic_group d;
      name_hint hint;
      if (((enum tree_code) (id)->base.code) == IDENTIFIER_NODE)
 hint = lookup_name_fuzzy (id, FUZZY_LOOKUP_TYPENAME, location);
      if (const char *suggestion = hint.suggestion ())
 {
   gcc_rich_location richloc (location);
   richloc.add_fixit_replace (suggestion);
   error_at (&richloc,
      "%qE does not name a type; did you mean %qs?",
      id, suggestion);
 }
      else
 error_at (location, "%qE does not name a type", id);







      if (cxx_dialect < cxx11 && id == ridpointers[(int)RID_CONSTEXPR])
 inform (location, "C++11 %<constexpr%> only available with "
  "%<-std=c++11%> or %<-std=gnu++11%>");
      else if (cxx_dialect < cxx11 && id == ridpointers[(int)RID_NOEXCEPT])
 inform (location, "C++11 %<noexcept%> only available with "
  "%<-std=c++11%> or %<-std=gnu++11%>");
      else if (cxx_dialect < cxx11
        && ((enum tree_code) (id)->base.code) == IDENTIFIER_NODE
        && id_equal (id, "thread_local"))
 inform (location, "C++11 %<thread_local%> only available with "
  "%<-std=c++11%> or %<-std=gnu++11%>");
      else if (cxx_dialect < cxx20 && id == ridpointers[(int)RID_CONSTINIT])
 inform (location, "C++20 %<constinit%> only available with "
  "%<-std=c++20%> or %<-std=gnu++20%>");
      else if (!global_options.x_flag_concepts && id == ridpointers[(int)RID_CONCEPT])
 inform (location, "%<concept%> only available with %<-std=c++20%> or "
  "%<-fconcepts%>");
      else if (!global_options.x_flag_concepts && id == ridpointers[(int)RID_REQUIRES])
 inform (location, "%<requires%> only available with %<-std=c++20%> or "
  "%<-fconcepts%>");
      else if (scope_chain->x_processing_template_decl && scope_chain->class_type
        && ((tree_check3 ((scope_chain->class_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3424, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))->type_non_common.maxval))
 {
   for (tree b = ((contains_struct_check ((((tree_check3 ((scope_chain->class_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3426, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))->type_non_common.maxval)), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3426, __FUNCTION__))->common.chain);
        b; b = ((contains_struct_check ((b), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3427, __FUNCTION__))->common.chain))
     {
       tree base_type = ((contains_struct_check (((tree_check ((b), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3429, __FUNCTION__, (TREE_BINFO)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3429, __FUNCTION__))->typed.type);
       if ((((((enum tree_code) (base_type)->base.code)) == RECORD_TYPE || (((enum tree_code) (base_type)->base.code)) == UNION_TYPE) && ((tree_class_check ((base_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3430, __FUNCTION__))->type_common.lang_flag_5))
    && dependent_type_p (base_type))
  {



    base_type = ((((((tree_class_check (((base_type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) && !(((((tree_class_check (((base_type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) == 2)) ? ((contains_struct_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((((((contains_struct_check ((((tree_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((((struct tree_template_info*)(tree_check (((((tree_class_check (((tree_check3 (((base_type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__))->type_non_common.lang_1))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__, (TEMPLATE_INFO))))->tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__, (TEMPLATE_DECL))))))))->arguments), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__))->typed.type)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__, (TEMPLATE_DECL))))))))->result), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3436, __FUNCTION__))->typed.type) : (base_type));
    for (tree field = ((tree_check3 ((base_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3437, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))->type_non_common.values);
         field; field = (((contains_struct_check (((contains_struct_check ((field), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3438, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3438, __FUNCTION__))->common.chain)))
      if (((enum tree_code) (field)->base.code) == TYPE_DECL
   && ((contains_struct_check ((field), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3440, __FUNCTION__))->decl_minimal.name) == id)
        {
   inform (location,
    "(perhaps %<typename %T::%E%> was intended)",
    ((contains_struct_check (((tree_check ((b), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3444, __FUNCTION__, (TREE_BINFO)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3444, __FUNCTION__))->typed.type), id);
   goto found;
        }
  }
     }
 found:;
 }
    }


  else if (parser->scope != global_trees[TI_ERROR_MARK])
    {
      if (((enum tree_code) (parser->scope)->base.code) == NAMESPACE_DECL)
 {
   auto_diagnostic_group d;
   name_hint hint;
   if (decl == global_trees[TI_ERROR_MARK])
     hint = suggest_alternative_in_explicit_scope (location, id,
         parser->scope);
   const char *suggestion = hint.suggestion ();
   gcc_rich_location richloc (location_of (id));
   if (suggestion)
     richloc.add_fixit_replace (suggestion);
   if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))
     {
       if (suggestion)
  error_at (&richloc,
     "%qE in namespace %qE does not name a template"
     " type; did you mean %qs?",
     id, parser->scope, suggestion);
       else
  error_at (&richloc,
     "%qE in namespace %qE does not name a template type",
     id, parser->scope);
     }
   else if (((enum tree_code) (id)->base.code) == TEMPLATE_ID_EXPR)
     {
       if (suggestion)
  error_at (&richloc,
     "%qE in namespace %qE does not name a template"
     " type; did you mean %qs?",
     (*((const_cast<tree*> (tree_operand_check ((id), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3485, __FUNCTION__))))), parser->scope, suggestion);
       else
  error_at (&richloc,
     "%qE in namespace %qE does not name a template"
     " type",
     (*((const_cast<tree*> (tree_operand_check ((id), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3490, __FUNCTION__))))), parser->scope);
     }
   else
     {
       if (suggestion)
  error_at (&richloc,
     "%qE in namespace %qE does not name a type"
     "; did you mean %qs?",
     id, parser->scope, suggestion);
       else
  error_at (&richloc,
     "%qE in namespace %qE does not name a type",
     id, parser->scope);
     }
   if ((tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration))
     inform (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3505, __FUNCTION__))->decl_minimal.locus), "%qD declared here", decl);
 }
      else if ((((((enum tree_code) (parser->scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (parser->scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((parser->scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3507, __FUNCTION__))->type_common.lang_flag_5))
        && constructor_name_p (id, parser->scope))
 {

   auto_diagnostic_group d;
   error_at (location, "%<%T::%E%> names the constructor, not"
      " the type", parser->scope, id);
   if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))
     error_at (location, "and %qT has no template constructors",
        parser->scope);
 }
      else if ((tree_code_type[(int) (((enum tree_code) (parser->scope)->base.code))] == tcc_type)
        && dependent_scope_p (parser->scope))
 {
   gcc_rich_location richloc (location);
   richloc.add_fixit_insert_before ("typename ");
   if (((enum tree_code) (parser->scope)->base.code) == TYPENAME_TYPE)
     error_at (&richloc,
        "need %<typename%> before %<%T::%D::%E%> because "
        "%<%T::%D%> is a dependent scope",
        ((tree_class_check ((parser->scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3527, __FUNCTION__))->type_common.context),
        (((tree_class_check (((tree_check ((parser->scope), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3528, __FUNCTION__, (TYPENAME_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3528, __FUNCTION__))->type_non_common.values)),
        id,
        ((tree_class_check ((parser->scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3530, __FUNCTION__))->type_common.context),
        (((tree_class_check (((tree_check ((parser->scope), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3531, __FUNCTION__, (TYPENAME_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3531, __FUNCTION__))->type_non_common.values)));
   else
     error_at (&richloc, "need %<typename%> before %<%T::%E%> because "
        "%qT is a dependent scope",
        parser->scope, id, parser->scope);
 }
      else if ((tree_code_type[(int) (((enum tree_code) (parser->scope)->base.code))] == tcc_type))
 {
   auto_diagnostic_group d;
   if (!(((tree_class_check ((parser->scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3540, __FUNCTION__))->type_common.size) != (tree) 
# 3540 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 3540 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
       ))
     cxx_incomplete_type_error (location_of (id), (tree) 
# 3541 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                 __null
# 3541 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                          ,
           parser->scope);
   else if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))
     error_at (location_of (id),
        "%qE in %q#T does not name a template type",
        id, parser->scope);
   else if (((enum tree_code) (id)->base.code) == TEMPLATE_ID_EXPR)
     error_at (location_of (id),
        "%qE in %q#T does not name a template type",
        (*((const_cast<tree*> (tree_operand_check ((id), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3550, __FUNCTION__))))), parser->scope);
   else
     error_at (location_of (id),
        "%qE in %q#T does not name a type",
        id, parser->scope);
   if ((tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration))
     inform (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3556, __FUNCTION__))->decl_minimal.locus), "%qD declared here", decl);
 }
      else
 (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3559, __FUNCTION__));
    }
}
# 3573 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_parse_and_diagnose_invalid_type_name (cp_parser *parser)
{
  tree id;
  cp_token *token = cp_lexer_peek_token (parser->lexer);


  if (token->type == ((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)))
    {
      cp_token *next = cp_lexer_peek_nth_token (parser->lexer, 2);
      if (next->type == CPP_NAME && next->error_reported)
 goto out;
    }

  cp_parser_parse_tentatively (parser);
  id = cp_parser_id_expression (parser,
                           false,
                           true,
                   
# 3591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 3591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ,
                     false,
                   false);


  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)
      || ((enum tree_code) (id)->base.code) == TYPE_DECL)
    {
      cp_parser_abort_tentative_parse (parser);
      return false;
    }
  if (!cp_parser_parse_definitely (parser))
    return false;


  cp_parser_diagnose_invalid_type_name (parser, id, token->location);
 out:



  if (!parser->in_declarator_p)
    cp_parser_skip_to_end_of_block_or_statement (parser);
  return true;
}






static int
cp_parser_skip_to_closing_parenthesis_1 (cp_parser *parser,
      bool recovering,
      cpp_ttype or_ttype,
      bool consume_paren)
{
  unsigned paren_depth = 0;
  unsigned brace_depth = 0;
  unsigned square_depth = 0;
  unsigned condop_depth = 0;

  if (recovering && or_ttype == CPP_EOF
      && cp_parser_uncommitted_to_tentative_parse_p (parser))
    return 0;

  while (true)
    {
      cp_token * token = cp_lexer_peek_token (parser->lexer);


      if (token->type == or_ttype && or_ttype != CPP_EOF
   && !brace_depth && !paren_depth && !square_depth && !condop_depth)
 return -1;

      switch (token->type)
 {
 case CPP_PRAGMA_EOL:
   if (!parser->lexer->in_pragma)
     break;

 case CPP_EOF:

   return 0;


        case CPP_OPEN_SQUARE:
          ++square_depth;
          break;
        case CPP_CLOSE_SQUARE:
          if (!square_depth--)
            return 0;
          break;

 case CPP_SEMICOLON:

   if (!brace_depth)
     return 0;
   break;

 case CPP_OPEN_BRACE:
   ++brace_depth;
   break;
 case CPP_CLOSE_BRACE:
   if (!brace_depth--)
     return 0;
   break;

 case CPP_OPEN_PAREN:
   if (!brace_depth)
     ++paren_depth;
   break;

 case CPP_CLOSE_PAREN:
   if (!brace_depth && !paren_depth--)
     {
       if (consume_paren)
  cp_lexer_consume_token (parser->lexer);
       return 1;
     }
   break;

 case CPP_QUERY:
   if (!brace_depth && !paren_depth && !square_depth)
     ++condop_depth;
   break;

 case CPP_COLON:
   if (!brace_depth && !paren_depth && !square_depth && condop_depth > 0)
     condop_depth--;
   break;

 case CPP_PRAGMA:

   cp_parser_skip_to_pragma_eol (parser, recovering ? token : nullptr);
   continue;

 default:
   break;
 }


      cp_lexer_consume_token (parser->lexer);
    }
}






static int
cp_parser_skip_to_closing_parenthesis (cp_parser *parser,
           bool recovering,
           bool or_comma,
           bool consume_paren)
{
  cpp_ttype ttype = or_comma ? CPP_COMMA : CPP_EOF;
  return cp_parser_skip_to_closing_parenthesis_1 (parser, recovering,
        ttype, consume_paren);
}





static void
cp_parser_skip_to_end_of_statement (cp_parser* parser)
{
  unsigned nesting_depth = 0;


  if (parser->fully_implicit_function_template_p)
    abort_fully_implicit_template (parser);

  while (true)
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {
 case CPP_PRAGMA_EOL:
   if (!parser->lexer->in_pragma)
     break;

 case CPP_EOF:

   return;

 case CPP_SEMICOLON:


   if (!nesting_depth)
     return;
   break;

 case CPP_CLOSE_BRACE:







   if (nesting_depth == 0)
     return;
# 3787 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (--nesting_depth == 0)
     {
       cp_lexer_consume_token (parser->lexer);
       return;
     }
   break;

 case CPP_OPEN_BRACE:
   ++nesting_depth;
   break;

 case CPP_PRAGMA:

   cp_parser_skip_to_pragma_eol (parser, token);
   if (!nesting_depth)
     return;
   continue;

 default:
   break;
 }


      cp_lexer_consume_token (parser->lexer);
    }
}





static void
cp_parser_consume_semicolon_at_end_of_statement (cp_parser *parser)
{

  if (!cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON))
    {


      cp_parser_skip_to_end_of_statement (parser);

      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
 cp_lexer_consume_token (parser->lexer);
    }
}




static void
cp_parser_skip_to_end_of_block_or_statement (cp_parser* parser)
{
  int nesting_depth = 0;


  if (parser->fully_implicit_function_template_p)
    abort_fully_implicit_template (parser);

  while (nesting_depth >= 0)
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {
 case CPP_PRAGMA_EOL:
   if (!parser->lexer->in_pragma)
     break;

 case CPP_EOF:

   return;

 case CPP_SEMICOLON:

   if (!nesting_depth)
     nesting_depth = -1;
   break;

 case CPP_CLOSE_BRACE:


   nesting_depth--;
   if (nesting_depth < 0)
     return;
   if (!nesting_depth)
     nesting_depth = -1;
   break;

 case CPP_OPEN_BRACE:

   nesting_depth++;
   break;

 case CPP_PRAGMA:

   cp_parser_skip_to_pragma_eol (parser, token);
   if (!nesting_depth)
     return;
   continue;

 default:
   break;
 }


      cp_lexer_consume_token (parser->lexer);
    }
}





static bool
cp_parser_skip_to_closing_brace (cp_parser *parser)
{
  unsigned nesting_depth = 0;

  while (true)
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {
 case CPP_PRAGMA_EOL:
   if (!parser->lexer->in_pragma)
     break;

 case CPP_EOF:

   return false;

 case CPP_CLOSE_BRACE:


   if (nesting_depth-- == 0)
     return true;
   break;

 case CPP_OPEN_BRACE:


   ++nesting_depth;
   break;

 default:
   break;
 }


      cp_lexer_consume_token (parser->lexer);
    }
}






static void
cp_parser_skip_to_pragma_eol (cp_parser* parser, cp_token *pragma_tok)
{
  cp_token *token;

  do
    {




      ((void)(!(cp_lexer_next_token_is_not (parser->lexer, CPP_EOF)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 3957, __FUNCTION__), 0 : 0));
      token = cp_lexer_consume_token (parser->lexer);
    }
  while (token->type != CPP_PRAGMA_EOL);

  if (pragma_tok)
    {

      cp_lexer_purge_tokens_after (parser->lexer, pragma_tok);
      parser->lexer->in_pragma = false;
    }
}




static void
cp_parser_require_pragma_eol (cp_parser *parser, cp_token *pragma_tok)
{
  parser->lexer->in_pragma = false;
  if (!cp_parser_require (parser, CPP_PRAGMA_EOL, RT_PRAGMA_EOL))
    cp_parser_skip_to_pragma_eol (parser, pragma_tok);
}





static tree
cp_parser_make_typename_type (cp_parser *parser, tree id,
         location_t id_location)
{
  tree result;
  if (identifier_p (id))
    {
      result = make_typename_type (parser->scope, id, typename_type,
                    tf_none);
      if (result == global_trees[TI_ERROR_MARK])
 cp_parser_diagnose_invalid_type_name (parser, id, id_location);
      return result;
    }
  return make_typename_type (parser->scope, id, typename_type, tf_error);
}
# 4008 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_declarator *
cp_parser_make_indirect_declarator (enum tree_code code, tree class_type,
        cp_cv_quals cv_qualifiers,
        cp_declarator *target,
        tree attributes)
{
  if (code == ERROR_MARK || target == cp_error_declarator)
    return cp_error_declarator;

  if (code == INDIRECT_REF)
    if (class_type == (tree) 
# 4018 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 4018 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              )
      return make_pointer_declarator (cv_qualifiers, target, attributes);
    else
      return make_ptrmem_declarator (cv_qualifiers, class_type,
         target, attributes);
  else if (code == ADDR_EXPR && class_type == (tree) 
# 4023 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                             __null
# 4023 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                      )
    return make_reference_declarator (cv_qualifiers, target,
          false, attributes);
  else if (code == NON_LVALUE_EXPR && class_type == (tree) 
# 4026 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 4026 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                            )
    return make_reference_declarator (cv_qualifiers, target,
          true, attributes);
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4029, __FUNCTION__));
}



static cp_parser *
cp_parser_new (cp_lexer *lexer)
{


  for (unsigned i = 0; i < sizeof (binops) / sizeof (binops[0]); i++)
    binops_by_token[binops[i].token_type] = binops[i];

  cp_parser *parser = ggc_cleared_alloc<cp_parser> ();
  parser->lexer = lexer;
  parser->context = cp_parser_context_new (
# 4044 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 4044 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                              );


  parser->allow_gnu_extensions_p = 1;



  parser->greater_than_is_operator_p = true;

  parser->default_arg_ok_p = true;


  parser->integral_constant_expression_p = false;
  parser->allow_non_integral_constant_expression_p = false;
  parser->non_integral_constant_expression_p = false;


  parser->local_variables_forbidden_p = 0;


  parser->in_unbraced_linkage_specification_p = false;


  parser->in_declarator_p = false;


  parser->in_template_argument_list_p = false;


  parser->in_statement = 0;


  parser->in_switch_statement_p = false;


  parser->in_type_id_in_expr_p = false;


  parser->translate_strings_p = true;


  parser->in_function_body = false;


  parser->colon_corrects_to_scope_p = true;


  push_unparsed_function_queues (parser);


  parser->num_classes_being_defined = 0;


  parser->num_template_parameter_lists = 0;


  parser->omp_declare_simd = 
# 4100 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 4100 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
  parser->oacc_routine = 
# 4101 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 4101 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;


  parser->auto_is_implicit_function_template_parm_p = false;
  parser->fully_implicit_function_template_p = false;
  parser->implicit_template_parms = 0;
  parser->implicit_template_scope = 0;


  parser->prevent_constrained_type_specifiers = 0;


  parser->innermost_linkage_specification_location = ((location_t) 0);

  return parser;
}





static void
cp_parser_push_lexer_for_tokens (cp_parser *parser, cp_token_cache *cache)
{
  cp_lexer *lexer = cp_lexer_new_from_tokens (cache);
  lexer->next = parser->lexer;
  parser->lexer = lexer;



  cp_lexer_set_source_position_from_token (lexer->next_token);
}



static void
cp_parser_pop_lexer (cp_parser *parser)
{
  cp_lexer *lexer = parser->lexer;
  parser->lexer = lexer->next;
  cp_lexer_destroy (lexer);



  cp_lexer_set_source_position_from_token (parser->lexer->next_token);
}






static cp_expr
cp_parser_identifier (cp_parser* parser)
{
  cp_token *token;


  token = cp_parser_require (parser, CPP_NAME, RT_NAME);

  if (token)
    return cp_expr (token->u.value, token->location);
  else
    return global_trees[TI_ERROR_MARK];
}
# 4181 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_string_literal (cp_parser *parser, bool translate, bool wide_ok,
     bool lookup_udlit = true)
{
  tree value;
  size_t count;
  struct obstack str_ob;
  struct obstack loc_ob;
  cpp_string str, istr, *strs;
  cp_token *tok;
  enum cpp_ttype type, curr_type;
  int have_suffix_p = 0;
  tree string_tree;
  tree suffix_id = (tree) 
# 4194 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 4194 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
  bool curr_tok_is_userdef_p = false;

  tok = cp_lexer_peek_token (parser->lexer);
  if (!cp_parser_is_string_literal (tok))
    {
      cp_parser_error (parser, "expected string-literal");
      return global_trees[TI_ERROR_MARK];
    }

  location_t loc = tok->location;

  if (cpp_userdef_string_p (tok->type))
    {
      string_tree = (((struct tree_userdef_literal *)(tree_check ((tok->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4208, __FUNCTION__, (USERDEF_LITERAL))))->value);
      curr_type = cpp_userdef_string_remove_type (tok->type);
      curr_tok_is_userdef_p = true;
    }
  else
    {
      string_tree = tok->u.value;
      curr_type = tok->type;
    }
  type = curr_type;



  if (!cp_parser_is_string_literal
      (cp_lexer_peek_nth_token (parser->lexer, 2)))
    {
      cp_lexer_consume_token (parser->lexer);

      str.text = (const unsigned char *)((const char *)((tree_check ((string_tree), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4226, __FUNCTION__, (STRING_CST)))->string.str));
      str.len = ((tree_check ((string_tree), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4227, __FUNCTION__, (STRING_CST)))->string.length);
      count = 1;

      if (curr_tok_is_userdef_p)
 {
   suffix_id = (((struct tree_userdef_literal *)(tree_check ((tok->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4232, __FUNCTION__, (USERDEF_LITERAL))))->suffix_id);
   have_suffix_p = 1;
   curr_type = cpp_userdef_string_remove_type (tok->type);
 }
      else
 curr_type = tok->type;

      strs = &str;
    }
  else
    {
      location_t last_tok_loc = tok->location;
      _obstack_begin (((&str_ob)), (memory_block_pool::block_size), (0), (mempool_obstack_chunk_alloc), (mempool_obstack_chunk_free));
      _obstack_begin (((&loc_ob)), (memory_block_pool::block_size), (0), (mempool_obstack_chunk_alloc), (mempool_obstack_chunk_free));
      count = 0;

      do
 {
   cp_lexer_consume_token (parser->lexer);
   count++;
   str.text = (const unsigned char *)((const char *)((tree_check ((string_tree), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4252, __FUNCTION__, (STRING_CST)))->string.str));
   str.len = ((tree_check ((string_tree), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4253, __FUNCTION__, (STRING_CST)))->string.length);

   if (curr_tok_is_userdef_p)
     {
       tree curr_suffix_id = (((struct tree_userdef_literal *)(tree_check ((tok->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4257, __FUNCTION__, (USERDEF_LITERAL))))->suffix_id);
       if (have_suffix_p == 0)
  {
    suffix_id = curr_suffix_id;
    have_suffix_p = 1;
  }
       else if (have_suffix_p == 1
         && curr_suffix_id != suffix_id)
  {
    error ("inconsistent user-defined literal suffixes"
    " %qD and %qD in string literal",
    suffix_id, curr_suffix_id);
    have_suffix_p = -1;
  }
       curr_type = cpp_userdef_string_remove_type (tok->type);
     }
   else
     curr_type = tok->type;

   if (type != curr_type)
     {
       if (type == CPP_STRING)
  type = curr_type;
       else if (curr_type != CPP_STRING)
  {
    rich_location rich_loc (line_table, tok->location);
    rich_loc.add_range (last_tok_loc);
    error_at (&rich_loc,
       "unsupported non-standard concatenation "
       "of string literals");
  }
     }

   __extension__ ({ struct obstack *__o = (&str_ob); size_t __len = (sizeof (cpp_string)); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); memcpy (__o->next_free, &str, __len); __o->next_free += __len; (void) 0; });
   __extension__ ({ struct obstack *__o = (&loc_ob); size_t __len = (sizeof (location_t)); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); memcpy (__o->next_free, &tok->location, __len); __o->next_free += __len; (void) 0; });

   last_tok_loc = tok->location;

   tok = cp_lexer_peek_token (parser->lexer);
   if (cpp_userdef_string_p (tok->type))
     {
       string_tree = (((struct tree_userdef_literal *)(tree_check ((tok->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4298, __FUNCTION__, (USERDEF_LITERAL))))->value);
       curr_type = cpp_userdef_string_remove_type (tok->type);
       curr_tok_is_userdef_p = true;
     }
   else
     {
       string_tree = tok->u.value;
       curr_type = tok->type;
       curr_tok_is_userdef_p = false;
     }
 }
      while (cp_parser_is_string_literal (tok));




      loc = make_location (loc, loc, get_finish (last_tok_loc));

      strs = (cpp_string *) __extension__ ({ struct obstack *__o1 = (&str_ob); void *__value = (void *) __o1->object_base; if (__o1->next_free == __value) __o1->maybe_empty_object = 1; __o1->next_free = ((sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (((__o1->next_free) - (sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (__o1->alignment_mask)) & ~(__o1->alignment_mask))); if ((size_t) (__o1->next_free - (char *) __o1->chunk) > (size_t) (__o1->chunk_limit - (char *) __o1->chunk)) __o1->next_free = __o1->chunk_limit; __o1->object_base = __o1->next_free; __value; });
    }

  if (type != CPP_STRING && !wide_ok)
    {
      cp_parser_error (parser, "a wide string is invalid in this context");
      type = CPP_STRING;
    }

  if ((translate ? cpp_interpret_string : cpp_interpret_string_notranslate)
      (parse_in, strs, count, &istr, type))
    {
      value = build_string (istr.len, (const char *)istr.text);
      free ((const_cast<unsigned char *> ((istr.text))));
      if (count > 1)
 {
   location_t *locs = (location_t *)__extension__ ({ struct obstack *__o1 = (&loc_ob); void *__value = (void *) __o1->object_base; if (__o1->next_free == __value) __o1->maybe_empty_object = 1; __o1->next_free = ((sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (((__o1->next_free) - (sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (__o1->alignment_mask)) & ~(__o1->alignment_mask))); if ((size_t) (__o1->next_free - (char *) __o1->chunk) > (size_t) (__o1->chunk_limit - (char *) __o1->chunk)) __o1->next_free = __o1->chunk_limit; __o1->object_base = __o1->next_free; __value; });
   ((void)(!(g_string_concat_db) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4333, __FUNCTION__), 0 : 0));
   g_string_concat_db->record_string_concatenation (count, locs);
 }

      switch (type)
 {
 default:
 case CPP_STRING:
   ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4341, __FUNCTION__))->typed.type) = c_global_trees[CTI_CHAR_ARRAY_TYPE];
   break;
 case CPP_UTF8STRING:
   if (global_options.x_flag_char8_t)
     ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4345, __FUNCTION__))->typed.type) = c_global_trees[CTI_CHAR8_ARRAY_TYPE];
   else
     ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4347, __FUNCTION__))->typed.type) = c_global_trees[CTI_CHAR_ARRAY_TYPE];
   break;
 case CPP_STRING16:
   ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4350, __FUNCTION__))->typed.type) = c_global_trees[CTI_CHAR16_ARRAY_TYPE];
   break;
 case CPP_STRING32:
   ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4353, __FUNCTION__))->typed.type) = c_global_trees[CTI_CHAR32_ARRAY_TYPE];
   break;
 case CPP_WSTRING:
   ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4356, __FUNCTION__))->typed.type) = c_global_trees[CTI_WCHAR_ARRAY_TYPE];
   break;
 }

      value = fix_string_type (value);

      if (have_suffix_p)
 {
   tree literal = build_userdef_literal (suffix_id, value,
      OT_NONE, (tree) 
# 4365 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 4365 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       );
   if (lookup_udlit)
     value = cp_parser_userdef_string_literal (literal);
   else
     value = literal;
 }
    }
  else

    value = global_trees[TI_ERROR_MARK];

  if (count > 1)
    {
      __extension__ ({ struct obstack *__o = (&str_ob); void *__obj = (void *) (0); if (__obj > (void *) __o->chunk && __obj < (void *) __o->chunk_limit) __o->next_free = __o->object_base = (char *) __obj; else _obstack_free (__o, __obj); });
      __extension__ ({ struct obstack *__o = (&loc_ob); void *__obj = (void *) (0); if (__obj > (void *) __o->chunk && __obj < (void *) __o->chunk_limit) __o->next_free = __o->object_base = (char *) __obj; else _obstack_free (__o, __obj); });
    }

  return cp_expr (value, loc);
}



static tree
lookup_literal_operator (tree name, vec<tree, va_gc> *args)
{
  tree decl = lookup_name (name);
  if (!decl || !is_overloaded_fn (decl))
    return global_trees[TI_ERROR_MARK];

  for (lkp_iterator iter (decl); iter; ++iter)
    {
      tree fn = *iter;

      if (tree parmtypes = ((tree_check2 ((((contains_struct_check ((fn), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4398, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4398, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))->type_non_common.values))
 {
   unsigned int ix;
   bool found = true;

   for (ix = 0;
        found && ix < vec_safe_length (args) && parmtypes != (tree) 
# 4404 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                            __null
# 4404 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                     ;
        ++ix, parmtypes = ((contains_struct_check ((parmtypes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4405, __FUNCTION__))->common.chain))
     {
       tree tparm = ((tree_check ((parmtypes), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4407, __FUNCTION__, (TREE_LIST)))->list.value);
       tree targ = ((contains_struct_check (((*args)[ix]), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4408, __FUNCTION__))->typed.type);
       bool ptr = (((enum tree_code) (tparm)->base.code) == POINTER_TYPE);
       bool arr = ((enum tree_code) (targ)->base.code) == ARRAY_TYPE;
       if ((ptr || arr || !comptypes ((tparm), (targ), 0))
    && (!ptr || !arr
        || !comptypes ((((contains_struct_check ((tparm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4413, __FUNCTION__))->typed.type)), (((contains_struct_check ((targ), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4414, __FUNCTION__))->typed.type)), 0)
                            ))
  found = false;
     }

   if (found
       && ix == vec_safe_length (args)




       && parmtypes == global_trees[TI_VOID_LIST_NODE])
     return decl;
 }
    }

  return global_trees[TI_ERROR_MARK];
}




static cp_expr
cp_parser_userdef_char_literal (cp_parser *parser)
{
  cp_token *token = cp_lexer_consume_token (parser->lexer);
  tree literal = token->u.value;
  tree suffix_id = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4440, __FUNCTION__, (USERDEF_LITERAL))))->suffix_id);
  tree value = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4441, __FUNCTION__, (USERDEF_LITERAL))))->value);
  tree name = cp_literal_operator_id (((const char *) (tree_check ((suffix_id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4442, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
  tree decl, result;



  releasing_vec args;
  vec_safe_push (args, value);
  decl = lookup_literal_operator (name, args);
  if (!decl || decl == global_trees[TI_ERROR_MARK])
    {
      error ("unable to find character literal operator %qD with %qT argument",
      name, ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4453, __FUNCTION__))->typed.type));
      return global_trees[TI_ERROR_MARK];
    }
  result = finish_call_expr (decl, &args, false, true, tf_warning_or_error);
  return result;
}




static tree
make_char_string_pack (tree value)
{
  tree charvec;
  tree argpack = make_node (NONTYPE_ARGUMENT_PACK);
  const char *str = ((const char *)((tree_check ((value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4468, __FUNCTION__, (STRING_CST)))->string.str));
  int i, len = ((tree_check ((value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4469, __FUNCTION__, (STRING_CST)))->string.length) - 1;
  tree argvec = make_tree_vec (1);


  charvec = make_tree_vec (len);
  for (i = 0; i < len; ++i)
    {
      unsigned char s[3] = { '\'', str[i], '\'' };
      cpp_string in = { 3, s };
      cpp_string out = { 0, 0 };
      if (!cpp_interpret_string (parse_in, &in, 1, &out, CPP_STRING))
 return (tree) 
# 4480 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 4480 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
      ((void)(!(out.len == 2) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4481, __FUNCTION__), 0 : 0));
      (*((const_cast<tree *> (tree_vec_elt_check ((charvec), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4482, __FUNCTION__))))) = build_int_cst (integer_types[itk_char],
       out.text[0]);
    }


  if (((enum tree_code) (argpack)->base.code) == TYPE_ARGUMENT_PACK) ((contains_struct_check ((argpack), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4487, __FUNCTION__))->typed.type) = charvec; else (*((const_cast<tree*> (tree_operand_check ((argpack), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4487, __FUNCTION__))))) = charvec;

  (*((const_cast<tree *> (tree_vec_elt_check ((argvec), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4489, __FUNCTION__))))) = argpack;

  return argvec;
}




static tree
make_string_pack (tree value)
{
  tree charvec;
  tree argpack = make_node (NONTYPE_ARGUMENT_PACK);
  const unsigned char *str
    = (const unsigned char *) ((const char *)((tree_check ((value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4503, __FUNCTION__, (STRING_CST)))->string.str));
  int sz = ((unsigned long) (*tree_int_cst_elt_check ((((tree_class_check ((((contains_struct_check ((((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4504, __FUNCTION__))->typed.type)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4504, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4504, __FUNCTION__))->type_common.size_unit)), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4504, __FUNCTION__)));
  int len = ((tree_check ((value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4505, __FUNCTION__, (STRING_CST)))->string.length) / sz - 1;
  tree argvec = make_tree_vec (2);

  tree str_char_type_node = ((contains_struct_check ((((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4508, __FUNCTION__))->typed.type)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4508, __FUNCTION__))->typed.type);
  str_char_type_node = ((tree_class_check ((str_char_type_node), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4509, __FUNCTION__))->type_common.main_variant);


  (*((const_cast<tree *> (tree_vec_elt_check ((argvec), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4512, __FUNCTION__))))) = str_char_type_node;


  charvec = make_tree_vec (len);
  for (int i = 0; i < len; ++i)
    (*((const_cast<tree *> (tree_vec_elt_check ((charvec), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4517, __FUNCTION__)))))
      = double_int_to_tree (str_char_type_node,
       double_int::from_buffer (str + i * sz, sz));


  if (((enum tree_code) (argpack)->base.code) == TYPE_ARGUMENT_PACK) ((contains_struct_check ((argpack), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4522, __FUNCTION__))->typed.type) = charvec; else (*((const_cast<tree*> (tree_operand_check ((argpack), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4522, __FUNCTION__))))) = charvec;

  (*((const_cast<tree *> (tree_vec_elt_check ((argvec), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4524, __FUNCTION__))))) = argpack;

  return argvec;
}




static cp_expr
cp_parser_userdef_numeric_literal (cp_parser *parser)
{
  cp_token *token = cp_lexer_consume_token (parser->lexer);
  tree literal = token->u.value;
  tree suffix_id = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4537, __FUNCTION__, (USERDEF_LITERAL))))->suffix_id);
  tree value = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4538, __FUNCTION__, (USERDEF_LITERAL))))->value);
  int overflow = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4539, __FUNCTION__, (USERDEF_LITERAL))))->overflow);
  tree num_string = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4540, __FUNCTION__, (USERDEF_LITERAL))))->num_string);
  tree name = cp_literal_operator_id (((const char *) (tree_check ((suffix_id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4541, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
  tree decl, result;



  releasing_vec args;
  vec_safe_push (args, value);
  decl = lookup_literal_operator (name, args);
  if (decl && decl != global_trees[TI_ERROR_MARK])
    {
      result = finish_call_expr (decl, &args, false, true,
     tf_warning_or_error);

      if (((enum tree_code) (((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4554, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE && overflow > 0)
 {
   warning_at (token->location, OPT_Woverflow,
        "integer literal exceeds range of %qT type",
        integer_types[itk_unsigned_long_long]);
 }
      else
 {
   if (overflow > 0)
     warning_at (token->location, OPT_Woverflow,
   "floating literal exceeds range of %qT type",
   global_trees[TI_LONG_DOUBLE_TYPE]);
   else if (overflow < 0)
     warning_at (token->location, OPT_Woverflow,
   "floating literal truncated to zero");
 }

      return result;
    }




  args->truncate (0);
  vec_safe_push (args, num_string);
  decl = lookup_literal_operator (name, args);
  if (decl && decl != global_trees[TI_ERROR_MARK])
    {
      result = finish_call_expr (decl, &args, false, true,
     tf_warning_or_error);
      return result;
    }




  args->truncate (0);
  decl = lookup_literal_operator (name, args);
  if (decl && decl != global_trees[TI_ERROR_MARK])
    {
      tree tmpl_args = make_char_string_pack (num_string);
      if (tmpl_args == (tree) 
# 4595 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 4595 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               )
 {
   error ("failed to translate literal to execution character set %qT",
   num_string);
   return global_trees[TI_ERROR_MARK];
 }
      decl = lookup_template_function (decl, tmpl_args);
      result = finish_call_expr (decl, &args, false, true,
     tf_warning_or_error);
      return result;
    }



  bool ext = cpp_get_options (parse_in)->ext_numeric_literals;
  bool i14 = (cxx_dialect > cxx11
       && (id_equal (suffix_id, "i")
    || id_equal (suffix_id, "if")
    || id_equal (suffix_id, "il")));
  diagnostic_t kind = DK_ERROR;
  int opt = 0;

  if (i14 && ext)
    {
      tree cxlit = lookup_qualified_name (cp_global_trees[CPTI_STD], "complex_literals",
       LOOK_want::NORMAL, false);
      if (cxlit == global_trees[TI_ERROR_MARK])
 {

   kind = DK_PEDWARN;
   opt = OPT_Wpedantic;
 }
    }

  bool complained
    = emit_diagnostic (kind, input_location, opt,
         "unable to find numeric literal operator %qD", name);

  if (!complained)
                               ;
  else if (i14)
    {
      inform (token->location, "add %<using namespace std::complex_literals%> "
       "(from %<<complex>%>) to enable the C++14 user-defined literal "
       "suffixes");
      if (ext)
 inform (token->location, "or use %<j%> instead of %<i%> for the "
  "GNU built-in suffix");
    }
  else if (!ext)
    inform (token->location, "use %<-fext-numeric-literals%> "
     "to enable more built-in suffixes");

  if (kind == DK_ERROR)
    value = global_trees[TI_ERROR_MARK];
  else
    {

      tree type;
      if (id_equal (suffix_id, "i"))
 {
   if (((enum tree_code) (value)->base.code) == INTEGER_CST)
     type = integer_types[itk_int];
   else
     type = global_trees[TI_DOUBLE_TYPE];
 }
      else if (id_equal (suffix_id, "if"))
 type = global_trees[TI_FLOAT_TYPE];
      else
 type = global_trees[TI_LONG_DOUBLE_TYPE];

      value = build_complex (build_complex_type (type),
        fold_convert_loc (((location_t) 0), type, global_trees[TI_INTEGER_ZERO]),
        fold_convert_loc (((location_t) 0), type, value));
    }

  if (cp_parser_uncommitted_to_tentative_parse_p (parser))

    token->u.value = value;
  return value;
}





static tree
cp_parser_userdef_string_literal (tree literal)
{
  tree suffix_id = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4684, __FUNCTION__, (USERDEF_LITERAL))))->suffix_id);
  tree name = cp_literal_operator_id (((const char *) (tree_check ((suffix_id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4685, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
  tree value = (((struct tree_userdef_literal *)(tree_check ((literal), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4686, __FUNCTION__, (USERDEF_LITERAL))))->value);
  int len = ((tree_check ((value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4687, __FUNCTION__, (STRING_CST)))->string.length)
 / ((unsigned long) (*tree_int_cst_elt_check ((((tree_class_check ((((contains_struct_check ((((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4688, __FUNCTION__))->typed.type)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4688, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4688, __FUNCTION__))->type_common.size_unit)), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4688, __FUNCTION__))) - 1;
  tree decl;



  releasing_vec args;
  vec_safe_push (args, value);
  vec_safe_push (args, build_int_cst (global_trees[TI_SIZE_TYPE], len));
  decl = lookup_literal_operator (name, args);

  if (decl && decl != global_trees[TI_ERROR_MARK])
    return finish_call_expr (decl, &args, false, true,
        tf_warning_or_error);




  args->truncate (0);
  decl = lookup_literal_operator (name, args);
  if (decl && decl != global_trees[TI_ERROR_MARK])
    {


      tree tmpl_args = make_tree_vec (1);
      (*((const_cast<tree *> (tree_vec_elt_check ((tmpl_args), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4712, __FUNCTION__))))) = value;
      decl = lookup_template_function (decl, tmpl_args);
      tree res = resolve_nondeduced_context (decl, tf_none);
      if ((tree_code_type[(int) (((enum tree_code) (res)->base.code))] == tcc_declaration))
 decl = res;
      else
 {
   (*((const_cast<tree*> (tree_operand_check ((decl), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4719, __FUNCTION__))))) = make_string_pack (value);
   res = resolve_nondeduced_context (decl, tf_none);
   if ((tree_code_type[(int) (((enum tree_code) (res)->base.code))] == tcc_declaration))
     decl = res;
 }
      if (!(tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration) && cxx_dialect > cxx17)
 (*((const_cast<tree*> (tree_operand_check ((decl), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4725, __FUNCTION__))))) = tmpl_args;
      return finish_call_expr (decl, &args, false, true,
          tf_warning_or_error);
    }

  error ("unable to find string literal operator %qD with %qT, %qT arguments",
  name, ((contains_struct_check ((value), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4731, __FUNCTION__))->typed.type), global_trees[TI_SIZE_TYPE]);
  return global_trees[TI_ERROR_MARK];
}
# 4743 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_translation_unit (cp_parser* parser)
{
  ((void)(!(!cp_error_declarator) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4746, __FUNCTION__), 0 : 0));


  _obstack_begin (((&declarator_obstack)), (memory_block_pool::block_size), (0), (mempool_obstack_chunk_alloc), (mempool_obstack_chunk_free));

  cp_error_declarator = make_declarator (cdk_error);

  no_parameters = make_parameter_declarator (
# 4753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 4753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                , 
# 4753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                  __null
# 4753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                      , (tree) 
# 4753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                        __null
# 4753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                 ,
          ((location_t) 0));

  void *declarator_obstack_base = ((void *) (&declarator_obstack)->next_free);

  push_deferring_access_checks (global_options.x_flag_access_control
    ? dk_no_deferred : dk_no_check);

  bool implicit_extern_c = false;


  for (;;)
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);




      if (implicit_extern_c
   != cp_lexer_peek_token (parser->lexer)->implicit_extern_c)
 {
   implicit_extern_c = !implicit_extern_c;
   if (implicit_extern_c)
     push_lang_context (cp_global_trees[CPTI_LANG_NAME_C]);
   else
     pop_lang_context ();
 }

      if (token->type == CPP_EOF)
 break;

      if (token->type == CPP_CLOSE_BRACE)
 {
   cp_parser_error (parser, "expected declaration");
   cp_lexer_consume_token (parser->lexer);

   if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
     cp_lexer_consume_token (parser->lexer);
 }
      else
 cp_parser_toplevel_declaration (parser);
    }


  cp_lexer_destroy (parser->lexer);
  parser->lexer = 
# 4798 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 4798 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;


  ((void)(!(!implicit_extern_c) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4801, __FUNCTION__), 0 : 0));


  ((void)(!(((void *) (&declarator_obstack)->next_free) == declarator_obstack_base) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4804, __FUNCTION__), 0 : 0))
                                  ;
}




static inline tsubst_flags_t
complain_flags (bool decltype_p)
{
  tsubst_flags_t complain = tf_warning_or_error;
  if (decltype_p)
    complain |= tf_decltype;
  return complain;
}





static cp_token_position
cp_parser_start_tentative_firewall (cp_parser *parser)
{
  if (!cp_parser_uncommitted_to_tentative_parse_p (parser))
    return 0;

  cp_parser_parse_tentatively (parser);
  cp_parser_commit_to_topmost_tentative_parse (parser);
  return cp_lexer_token_position (parser->lexer, false);
}




static void
cp_parser_end_tentative_firewall (cp_parser *parser, cp_token_position start,
      tree expr)
{
  if (!start)
    return;


  cp_parser_parse_definitely (parser);

  cp_token *token = cp_lexer_token_at (parser->lexer, start);
  token->type = ((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1)) + 1));
  token->u.value = expr;
  token->keyword = RID_MAX;
  cp_lexer_purge_tokens_after (parser->lexer, start);
}






struct tentative_firewall
{
  cp_parser *parser;
  bool set;

  tentative_firewall (cp_parser *p): parser(p)
  {


    if ((set = cp_parser_uncommitted_to_tentative_parse_p (parser)))
      {
 cp_parser_parse_tentatively (parser);
 cp_parser_commit_to_topmost_tentative_parse (parser);
 cp_parser_parse_tentatively (parser);
      }
  }

  ~tentative_firewall()
  {
    if (set)
      {


 bool err = cp_parser_error_occurred (parser);
 cp_parser_parse_definitely (parser);
 cp_parser_parse_definitely (parser);
 if (err)
   cp_parser_simulate_error (parser);
      }
  }
};
# 4899 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
template <typename traits_t>
class token_pair
{
 public:

  token_pair () : m_open_loc (((location_t) 0)) {}






  bool require_open (cp_parser *parser)
  {
    m_open_loc = cp_lexer_peek_token (parser->lexer)->location;
    return cp_parser_require (parser, traits_t::open_token_type,
         traits_t::required_token_open);
  }




  cp_token * consume_open (cp_parser *parser)
  {
    cp_token *tok = cp_lexer_consume_token (parser->lexer);
    ((void)(!(tok->type == traits_t::open_token_type) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 4924, __FUNCTION__), 0 : 0));
    m_open_loc = tok->location;
    return tok;
  }






  cp_token *require_close (cp_parser *parser) const
  {
    return cp_parser_require (parser, traits_t::close_token_type,
         traits_t::required_token_close,
         m_open_loc);
  }

  location_t open_location () const { return m_open_loc; }

 private:
  location_t m_open_loc;
};



struct matching_paren_traits
{
  static const enum cpp_ttype open_token_type = CPP_OPEN_PAREN;
  static const enum required_token required_token_open = RT_OPEN_PAREN;
  static const enum cpp_ttype close_token_type = CPP_CLOSE_PAREN;
  static const enum required_token required_token_close = RT_CLOSE_PAREN;
};




typedef token_pair<matching_paren_traits> matching_parens;



struct matching_brace_traits
{
  static const enum cpp_ttype open_token_type = CPP_OPEN_BRACE;
  static const enum required_token required_token_open = RT_OPEN_BRACE;
  static const enum cpp_ttype close_token_type = CPP_CLOSE_BRACE;
  static const enum required_token required_token_close = RT_CLOSE_BRACE;
};




typedef token_pair<matching_brace_traits> matching_braces;





static cp_expr
cp_parser_statement_expr (cp_parser *parser)
{
  cp_token_position start = cp_parser_start_tentative_firewall (parser);


  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;
  matching_parens parens;
  parens.consume_open (parser);

  tree expr = begin_stmt_expr ();

  cp_parser_compound_statement (parser, expr, BCS_NORMAL, false);

  expr = finish_stmt_expr (expr, false);

  location_t finish_loc = cp_lexer_peek_token (parser->lexer)->location;
  if (!parens.require_close (parser))
    cp_parser_skip_to_end_of_statement (parser);

  cp_parser_end_tentative_firewall (parser, start, expr);
  location_t combined_loc = make_location (start_loc, start_loc, finish_loc);
  return cp_expr (expr, combined_loc);
}
# 5020 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static int
cp_parser_fold_operator (cp_token *token)
{
  switch (token->type)
    {
    case CPP_PLUS: return PLUS_EXPR;
    case CPP_MINUS: return MINUS_EXPR;
    case CPP_MULT: return MULT_EXPR;
    case CPP_DIV: return TRUNC_DIV_EXPR;
    case CPP_MOD: return TRUNC_MOD_EXPR;
    case CPP_XOR: return BIT_XOR_EXPR;
    case CPP_AND: return BIT_AND_EXPR;
    case CPP_OR: return BIT_IOR_EXPR;
    case CPP_LSHIFT: return LSHIFT_EXPR;
    case CPP_RSHIFT: return RSHIFT_EXPR;

    case CPP_EQ: return -NOP_EXPR;
    case CPP_PLUS_EQ: return -PLUS_EXPR;
    case CPP_MINUS_EQ: return -MINUS_EXPR;
    case CPP_MULT_EQ: return -MULT_EXPR;
    case CPP_DIV_EQ: return -TRUNC_DIV_EXPR;
    case CPP_MOD_EQ: return -TRUNC_MOD_EXPR;
    case CPP_XOR_EQ: return -BIT_XOR_EXPR;
    case CPP_AND_EQ: return -BIT_AND_EXPR;
    case CPP_OR_EQ: return -BIT_IOR_EXPR;
    case CPP_LSHIFT_EQ: return -LSHIFT_EXPR;
    case CPP_RSHIFT_EQ: return -RSHIFT_EXPR;

    case CPP_EQ_EQ: return EQ_EXPR;
    case CPP_NOT_EQ: return NE_EXPR;
    case CPP_LESS: return LT_EXPR;
    case CPP_GREATER: return GT_EXPR;
    case CPP_LESS_EQ: return LE_EXPR;
    case CPP_GREATER_EQ: return GE_EXPR;

    case CPP_AND_AND: return TRUTH_ANDIF_EXPR;
    case CPP_OR_OR: return TRUTH_ORIF_EXPR;

    case CPP_COMMA: return COMPOUND_EXPR;

    case CPP_DOT_STAR: return DOTSTAR_EXPR;
    case CPP_DEREF_STAR: return MEMBER_REF;

    default: return ERROR_MARK;
    }
}





static bool
is_binary_op (tree_code code)
{
  switch (code)
    {
    case PLUS_EXPR:
    case POINTER_PLUS_EXPR:
    case MINUS_EXPR:
    case MULT_EXPR:
    case TRUNC_DIV_EXPR:
    case TRUNC_MOD_EXPR:
    case BIT_XOR_EXPR:
    case BIT_AND_EXPR:
    case BIT_IOR_EXPR:
    case LSHIFT_EXPR:
    case RSHIFT_EXPR:

    case MODOP_EXPR:

    case EQ_EXPR:
    case NE_EXPR:
    case LE_EXPR:
    case GE_EXPR:
    case LT_EXPR:
    case GT_EXPR:

    case TRUTH_ANDIF_EXPR:
    case TRUTH_ORIF_EXPR:

    case COMPOUND_EXPR:

    case DOTSTAR_EXPR:
    case MEMBER_REF:
      return true;

    default:
      return false;
    }
}




static int
cp_parser_fold_operator (cp_parser *parser)
{
  cp_token* token = cp_lexer_peek_token (parser->lexer);
  int code = cp_parser_fold_operator (token);
  if (code != ERROR_MARK)
    cp_lexer_consume_token (parser->lexer);
  return code;
}
# 5133 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_fold_expression (cp_parser *parser, tree expr1)
{
  cp_id_kind pidk;


  if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
    {
      cp_lexer_consume_token (parser->lexer);
      int op = cp_parser_fold_operator (parser);
      if (op == ERROR_MARK)
        {
          cp_parser_error (parser, "expected binary operator");
          return global_trees[TI_ERROR_MARK];
        }

      tree expr = cp_parser_cast_expression (parser, false, false,
          false, &pidk);
      if (expr == global_trees[TI_ERROR_MARK])
        return global_trees[TI_ERROR_MARK];
      return finish_left_unary_fold_expr (expr, op);
    }

  const cp_token* token = cp_lexer_peek_token (parser->lexer);
  int op = cp_parser_fold_operator (parser);
  if (op == ERROR_MARK)
    {
      cp_parser_error (parser, "expected binary operator");
      return global_trees[TI_ERROR_MARK];
    }

  if (cp_lexer_next_token_is_not (parser->lexer, CPP_ELLIPSIS))
    {
      cp_parser_error (parser, "expected ...");
      return global_trees[TI_ERROR_MARK];
    }
  cp_lexer_consume_token (parser->lexer);




  if (((tree_code_type[(int) (((enum tree_code) (expr1)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (expr1)->base.code))]) <= tcc_expression) && ((expr1)->base.nowarning_flag))
                                                ;
  else if (is_binary_op (((enum tree_code) (expr1)->base.code)))
    error_at (location_of (expr1),
       "binary expression in operand of fold-expression");
  else if (((enum tree_code) (expr1)->base.code) == COND_EXPR
    || (((((enum tree_code) (expr1)->base.code) == INDIRECT_REF) && ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((expr1), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 5180, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 5180, __FUNCTION__))->typed.type) && (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check (((expr1)), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 5180, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 5180, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE))
        && ((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((expr1), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 5181, __FUNCTION__))))))->base.code) == COND_EXPR))
    error_at (location_of (expr1),
       "conditional expression in operand of fold-expression");


  if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))
    return finish_right_unary_fold_expr (expr1, op);

  if (cp_lexer_next_token_is_not (parser->lexer, token->type))
    {
      cp_parser_error (parser, "mismatched operator in fold-expression");
      return global_trees[TI_ERROR_MARK];
    }
  cp_lexer_consume_token (parser->lexer);


  tree expr2 = cp_parser_cast_expression (parser, false, false, false, &pidk);
  if (expr2 == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
  return finish_binary_fold_expr (expr1, expr2, op);
}
# 5257 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_primary_expression (cp_parser *parser,
         bool address_p,
         bool cast_p,
         bool template_arg_p,
         bool decltype_p,
         cp_id_kind *idk)
{
  cp_token *token = 
# 5265 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 5265 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;


  *idk = CP_ID_KIND_NONE;


  token = cp_lexer_peek_token (parser->lexer);
  switch ((int) token->type)
    {
# 5282 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
    case CPP_CHAR:
    case CPP_CHAR16:
    case CPP_CHAR32:
    case CPP_WCHAR:
    case CPP_UTF8CHAR:
    case CPP_NUMBER:
    case ((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1)) + 1)):
      if (((enum tree_code) (token->u.value)->base.code) == USERDEF_LITERAL)
 return cp_parser_userdef_numeric_literal (parser);
      token = cp_lexer_consume_token (parser->lexer);
      if (((enum tree_code) (token->u.value)->base.code) == FIXED_CST)
 {
   error_at (token->location,
      "fixed-point types not supported in C++");
   return global_trees[TI_ERROR_MARK];
 }



      if (((enum tree_code) (token->u.value)->base.code) == REAL_CST
   && parser->integral_constant_expression_p
   && global_options.x_pedantic)
 {



   if (cast_p)
     {
       cp_token *next_token;

       next_token = cp_lexer_peek_token (parser->lexer);
       if (

    next_token->type != CPP_COMMA

    && next_token->type != CPP_CLOSE_BRACE

    && next_token->type != CPP_SEMICOLON

    && next_token->type != CPP_CLOSE_PAREN

    && next_token->type != CPP_CLOSE_SQUARE

    && (next_token->type != CPP_GREATER
        || parser->greater_than_is_operator_p)


    && (next_token->type != CPP_RSHIFT
                      || (cxx_dialect == cxx98)
        || parser->greater_than_is_operator_p))
  cast_p = false;
     }





   if (!cast_p)
     cp_parser_non_integral_constant_expression (parser, NIC_FLOAT);
 }
      return (cp_expr (token->u.value, token->location)
       .maybe_add_location_wrapper ());

    case CPP_CHAR_USERDEF:
    case CPP_CHAR16_USERDEF:
    case CPP_CHAR32_USERDEF:
    case CPP_WCHAR_USERDEF:
    case CPP_UTF8CHAR_USERDEF:
      return cp_parser_userdef_char_literal (parser);

    case CPP_STRING:
    case CPP_STRING16:
    case CPP_STRING32:
    case CPP_WSTRING:
    case CPP_UTF8STRING:
    case CPP_STRING_USERDEF:
    case CPP_STRING16_USERDEF:
    case CPP_STRING32_USERDEF:
    case CPP_WSTRING_USERDEF:
    case CPP_UTF8STRING_USERDEF:



      return (cp_parser_string_literal (parser,
     parser->translate_strings_p,
     true)
       .maybe_add_location_wrapper ());

    case CPP_OPEN_PAREN:


      if (cp_parser_allow_gnu_extensions_p (parser)
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_OPEN_BRACE))
 {

   pedwarn (token->location, OPT_Wpedantic,
     "ISO C++ forbids braced-groups within expressions");







   if (!parser->in_function_body
       || parser->in_template_argument_list_p)
     {
       error_at (token->location,
   "statement-expressions are not allowed outside "
   "functions nor in template-argument lists");
       cp_parser_skip_to_end_of_block_or_statement (parser);
       if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))
  cp_lexer_consume_token (parser->lexer);
       return global_trees[TI_ERROR_MARK];
     }
   else
     return cp_parser_statement_expr (parser);
 }

      {
 cp_expr expr;
 bool saved_greater_than_is_operator_p;

 location_t open_paren_loc = token->location;


 matching_parens parens;
 parens.consume_open (parser);


 saved_greater_than_is_operator_p
   = parser->greater_than_is_operator_p;
 parser->greater_than_is_operator_p = true;

 if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))

   expr = (tree) 
# 5418 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 5418 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
 else

   expr = cp_parser_expression (parser, idk, cast_p, decltype_p);

 token = cp_lexer_peek_token (parser->lexer);
 if (token->type == CPP_ELLIPSIS || cp_parser_fold_operator (token))
   {
     expr = cp_parser_fold_expression (parser, expr);
     if (expr != global_trees[TI_ERROR_MARK]
  && cxx_dialect < cxx17)
       pedwarn (input_location, 0, "fold-expressions only available "
         "with %<-std=c++17%> or %<-std=gnu++17%>");
   }
 else





   expr = finish_parenthesized_expr (expr);





 if (*idk != CP_ID_KIND_QUALIFIED)
   *idk = CP_ID_KIND_NONE;



 parser->greater_than_is_operator_p
   = saved_greater_than_is_operator_p;


 token = cp_lexer_peek_token (parser->lexer);
 location_t close_paren_loc = token->location;
 expr.set_range (open_paren_loc, close_paren_loc);
 if (!parens.require_close (parser)
     && !cp_parser_uncommitted_to_tentative_parse_p (parser))
   cp_parser_skip_to_end_of_statement (parser);

 return expr;
      }

    case CPP_OPEN_SQUARE:
      {
 if (((c_language & clk_objc) != 0))
   {

     cp_parser_parse_tentatively (parser);
     tree msg = cp_parser_objc_message_expression (parser);

     if (cp_parser_parse_definitely (parser))
       return msg;

   }
 cp_expr lam = cp_parser_lambda_expression (parser);

 if (cp_parser_error_occurred (parser))
   return global_trees[TI_ERROR_MARK];
 maybe_warn_cpp0x (CPP0X_LAMBDA_EXPR);
 return lam;
      }

    case CPP_OBJC_STRING:
      if (((c_language & clk_objc) != 0))

        return cp_parser_objc_expression (parser);
      cp_parser_error (parser, "expected primary-expression");
      return global_trees[TI_ERROR_MARK];

    case CPP_KEYWORD:
      switch (token->keyword)
 {

 case RID_TRUE:
   cp_lexer_consume_token (parser->lexer);
   return cp_expr (global_trees[TI_BOOLEAN_TRUE], token->location);
 case RID_FALSE:
   cp_lexer_consume_token (parser->lexer);
   return cp_expr (global_trees[TI_BOOLEAN_FALSE], token->location);


 case RID_NULL:
   cp_lexer_consume_token (parser->lexer);
   return cp_expr (c_global_trees[CTI_NULL], token->location);


 case RID_NULLPTR:
   cp_lexer_consume_token (parser->lexer);
   return cp_expr (cp_global_trees[CPTI_NULLPTR], token->location);


 case RID_THIS:
   cp_lexer_consume_token (parser->lexer);
   if (parser->local_variables_forbidden_p & (1 << 1))
     {
       error_at (token->location,
   "%<this%> may not be used in this context");
       return global_trees[TI_ERROR_MARK];
     }

   if (cp_parser_non_integral_constant_expression (parser, NIC_THIS))
     return global_trees[TI_ERROR_MARK];
   return cp_expr (finish_this_expr (), token->location);



 case RID_OPERATOR:
   goto id_expression;

 case RID_FUNCTION_NAME:
 case RID_PRETTY_FUNCTION_NAME:
 case RID_C99_FUNCTION_NAME:
   {
     non_integral_constant name;
# 5543 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     token = cp_lexer_consume_token (parser->lexer);

     switch (token->keyword)
       {
       case RID_FUNCTION_NAME:
  name = NIC_FUNC_NAME;
  break;
       case RID_PRETTY_FUNCTION_NAME:
  name = NIC_PRETTY_FUNC;
  break;
       case RID_C99_FUNCTION_NAME:
  name = NIC_C99_FUNC;
  break;
       default:
  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 5557, __FUNCTION__));
       }

     if (cp_parser_non_integral_constant_expression (parser, name))
       return global_trees[TI_ERROR_MARK];


     return finish_fname (token->u.value);
   }

 case RID_VA_ARG:
   {
     tree expression;
     tree type;
     location_t type_location;
     location_t start_loc
       = cp_lexer_peek_token (parser->lexer)->location;


     cp_lexer_consume_token (parser->lexer);

     matching_parens parens;
     parens.require_open (parser);

     expression = cp_parser_assignment_expression (parser);

     cp_parser_require (parser, CPP_COMMA, RT_COMMA);
     type_location = cp_lexer_peek_token (parser->lexer)->location;

     {
       type_id_in_expr_sentinel s (parser);
       type = cp_parser_type_id (parser);
     }

     location_t finish_loc
       = cp_lexer_peek_token (parser->lexer)->location;
     parens.require_close (parser);


     if (cp_parser_non_integral_constant_expression (parser,
           NIC_VA_ARG))
       return global_trees[TI_ERROR_MARK];





     location_t combined_loc
       = make_location (type_location, start_loc, finish_loc);
     return build_x_va_arg (combined_loc, expression, type);
   }

 case RID_OFFSETOF:
   return cp_parser_builtin_offsetof (parser);

 case RID_HAS_NOTHROW_ASSIGN:
 case RID_HAS_NOTHROW_CONSTRUCTOR:
 case RID_HAS_NOTHROW_COPY:
 case RID_HAS_TRIVIAL_ASSIGN:
 case RID_HAS_TRIVIAL_CONSTRUCTOR:
 case RID_HAS_TRIVIAL_COPY:
 case RID_HAS_TRIVIAL_DESTRUCTOR:
 case RID_HAS_UNIQUE_OBJ_REPRESENTATIONS:
 case RID_HAS_VIRTUAL_DESTRUCTOR:
 case RID_IS_ABSTRACT:
 case RID_IS_AGGREGATE:
 case RID_IS_BASE_OF:
 case RID_IS_CLASS:
 case RID_IS_EMPTY:
 case RID_IS_ENUM:
 case RID_IS_FINAL:
 case RID_IS_LITERAL_TYPE:
 case RID_IS_POD:
 case RID_IS_POLYMORPHIC:
 case RID_IS_SAME_AS:
 case RID_IS_STD_LAYOUT:
 case RID_IS_TRIVIAL:
 case RID_IS_TRIVIALLY_ASSIGNABLE:
 case RID_IS_TRIVIALLY_CONSTRUCTIBLE:
 case RID_IS_TRIVIALLY_COPYABLE:
 case RID_IS_UNION:
 case RID_IS_ASSIGNABLE:
 case RID_IS_CONSTRUCTIBLE:
   return cp_parser_trait_expr (parser, token->keyword);


 case RID_REQUIRES:
   return cp_parser_requires_expression (parser);


 case RID_AT_ENCODE:
 case RID_AT_PROTOCOL:
 case RID_AT_SELECTOR:
   return cp_parser_objc_expression (parser);

 case RID_TEMPLATE:
   if (parser->in_function_body
       && (cp_lexer_peek_nth_token (parser->lexer, 2)->type
          == CPP_LESS))
     {
       error_at (token->location,
   "a template declaration cannot appear at block scope");
       cp_parser_skip_to_end_of_block_or_statement (parser);
       return global_trees[TI_ERROR_MARK];
     }

 default:
   cp_parser_error (parser, "expected primary-expression");
   return global_trees[TI_ERROR_MARK];
 }




    case CPP_NAME:
    case CPP_SCOPE:
    case ((enum cpp_ttype) (CPP_KEYWORD + 1)):
    case ((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)):
      {
      id_expression:
 cp_expr id_expression;
 cp_expr decl;
 const char *error_msg;
 bool template_p;
 bool done;
 cp_token *id_expr_token;


 id_expression
   = cp_parser_id_expression (parser,
                                false,
                                true,
         &template_p,
                          false,
                        false);
 if (id_expression == global_trees[TI_ERROR_MARK])
   return global_trees[TI_ERROR_MARK];
 id_expr_token = token;
 token = cp_lexer_peek_token (parser->lexer);
 done = (token->type != CPP_OPEN_SQUARE
  && token->type != CPP_OPEN_PAREN
  && token->type != CPP_DOT
  && token->type != CPP_DEREF
  && token->type != CPP_PLUS_PLUS
  && token->type != CPP_MINUS_MINUS);



 if (((enum tree_code) (id_expression)->base.code) == TEMPLATE_ID_EXPR
   || ((enum tree_code) (id_expression)->base.code) == TYPE_DECL)
   decl = id_expression;

 else
   {
     tree ambiguous_decls;




     if (id_expr_token->type == CPP_NAME
  && id_expr_token->error_reported)
       {
  cp_parser_simulate_error (parser);
  return global_trees[TI_ERROR_MARK];
       }

     decl = cp_parser_lookup_name (parser, id_expression,
       none_type,
       template_p,
                        false,
                            true,
       &ambiguous_decls,
       id_expression.get_location ());


     if (ambiguous_decls)
       return global_trees[TI_ERROR_MARK];



     if (((c_language & clk_objc) != 0)
  && cp_lexer_peek_token (parser->lexer)->type == CPP_DOT
  && ((enum tree_code) (decl)->base.code) == TYPE_DECL
  && objc_is_class_name (decl))
       {
  tree component;
  cp_lexer_consume_token (parser->lexer);
  component = cp_parser_identifier (parser);
  if (component == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  tree result = objc_build_class_component_ref (id_expression,
             component);






  location_t combined_loc
    = make_location (input_location, id_expression.get_start (),
       get_finish (input_location));
  protected_set_expr_location (result, combined_loc);
  return result;
       }
# 5774 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     tree decl_tree = objc_lookup_ivar (decl.get_value (),
            id_expression);
     if (decl_tree != decl.get_value ())
       decl = cp_expr (decl_tree);



     if (((enum tree_code) (decl)->base.code) == SCOPE_REF)
       {
# 5793 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  return decl;
       }


     if ((parser->local_variables_forbidden_p & (1 << 0))
  && local_variable_p (decl))
       {
  error_at (id_expression.get_location (),
     "local variable %qD may not appear in this context",
     decl.get_value ());
  return global_trees[TI_ERROR_MARK];
       }
   }

 decl = (finish_id_expression
  (id_expression, decl, parser->scope,
   idk,
   parser->integral_constant_expression_p,
   parser->allow_non_integral_constant_expression_p,
   &parser->non_integral_constant_expression_p,
   template_p, done, address_p,
   template_arg_p,
   &error_msg,
   id_expression.get_location ()));
 if (error_msg)
   cp_parser_error (parser, error_msg);
# 5827 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 location_t caret_loc = get_pure_location (id_expression.get_location ());
 location_t start_loc = get_start (id_expr_token->location);
 location_t finish_loc = get_finish (id_expression.get_location ());
 location_t combined_loc
   = make_location (caret_loc, start_loc, finish_loc);

 decl.set_location (combined_loc);
 return decl;
      }


    default:
      cp_parser_error (parser, "expected primary-expression");
      return global_trees[TI_ERROR_MARK];
    }
}

static inline cp_expr
cp_parser_primary_expression (cp_parser *parser,
         bool address_p,
         bool cast_p,
         bool template_arg_p,
         cp_id_kind *idk)
{
  return cp_parser_primary_expression (parser, address_p, cast_p, template_arg_p,
                       false, idk);
}
# 5889 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_id_expression (cp_parser *parser,
    bool template_keyword_p,
    bool check_dependency_p,
    bool *template_p,
    bool declarator_p,
    bool optional_p)
{
  bool global_scope_p;
  bool nested_name_specifier_p;


  if (template_p)
    *template_p = template_keyword_p;


  global_scope_p
    = (!template_keyword_p
       && (cp_parser_global_scope_opt (parser,
                                     false)
    != (tree) 
# 5909 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 5909 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ));


  nested_name_specifier_p
    = (cp_parser_nested_name_specifier_opt (parser,
                                false,
         check_dependency_p,
                    false,
         declarator_p,
         template_keyword_p)
       != (tree) 
# 5919 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 5919 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );



  if (nested_name_specifier_p)
    {
      tree saved_scope;
      tree saved_object_scope;
      tree saved_qualifying_scope;
      cp_expr unqualified_id;
      bool is_template;


      if (!template_p)
 template_p = &is_template;
      *template_p = cp_parser_optional_template_keyword (parser);


      saved_scope = parser->scope;
      saved_object_scope = parser->object_scope;
      saved_qualifying_scope = parser->qualifying_scope;

      unqualified_id = cp_parser_unqualified_id (parser, *template_p,
       check_dependency_p,
       declarator_p,
                      false);

      parser->scope = saved_scope;
      parser->object_scope = saved_object_scope;
      parser->qualifying_scope = saved_qualifying_scope;

      return unqualified_id;
    }


  else if (global_scope_p)
    {
      cp_token *token;
      tree id;


      token = cp_lexer_peek_token (parser->lexer);




      if (token->type == CPP_NAME
   && !cp_parser_nth_token_starts_template_argument_list_p
        (parser, 2))
 return cp_parser_identifier (parser);

      cp_parser_parse_tentatively (parser);

      id = cp_parser_template_id_expr (parser,
                                  false,
                                  true,
           declarator_p);

      if (cp_parser_parse_definitely (parser))
 return id;



      token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {
 case CPP_NAME:
   return cp_parser_identifier (parser);

 case CPP_KEYWORD:
   if (token->keyword == RID_OPERATOR)
     return cp_parser_operator_function_id (parser);


 default:
   cp_parser_error (parser, "expected id-expression");
   return global_trees[TI_ERROR_MARK];
 }
    }
  else
    return cp_parser_unqualified_id (parser, template_keyword_p,
                                true,
         declarator_p,
         optional_p);
}
# 6028 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_unqualified_id (cp_parser* parser,
     bool template_keyword_p,
     bool check_dependency_p,
     bool declarator_p,
     bool optional_p)
{
  cp_token *token;


  token = cp_lexer_peek_token (parser->lexer);

  switch ((int) token->type)
    {
    case CPP_NAME:
      {
 tree id;



 cp_parser_parse_tentatively (parser);

 id = cp_parser_template_id_expr (parser, template_keyword_p,
      check_dependency_p,
      declarator_p);

 if (cp_parser_parse_definitely (parser))
   return id;

 return cp_parser_identifier (parser);
      }

    case ((enum cpp_ttype) (CPP_KEYWORD + 1)):
      return cp_parser_template_id_expr (parser, template_keyword_p,
      check_dependency_p,
      declarator_p);

    case CPP_COMPL:
      {
 tree type_decl;
 tree qualifying_scope;
 tree object_scope;
 tree scope;
 bool done;
 location_t tilde_loc = token->location;


 cp_lexer_consume_token (parser->lexer);
# 6111 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 scope = parser->scope;
 object_scope = parser->object_scope;
 qualifying_scope = parser->qualifying_scope;


 if (scope == global_trees[TI_ERROR_MARK])
   {
     if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
       cp_lexer_consume_token (parser->lexer);
     return global_trees[TI_ERROR_MARK];
   }
 if (scope && ((enum tree_code) (scope)->base.code) == NAMESPACE_DECL)
   {
     if (!cp_parser_uncommitted_to_tentative_parse_p (parser))
       error_at (token->location,
   "scope %qT before %<~%> is not a class-name",
   scope);
     cp_parser_simulate_error (parser);
     if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
       cp_lexer_consume_token (parser->lexer);
     return global_trees[TI_ERROR_MARK];
   }
 if (template_keyword_p)
   {
     if (!cp_parser_uncommitted_to_tentative_parse_p (parser))
       error_at (tilde_loc, "%<template%> keyword not permitted in "
   "destructor name");
     cp_parser_simulate_error (parser);
     return global_trees[TI_ERROR_MARK];
   }

 ((void)(!(!scope || (tree_code_type[(int) (((enum tree_code) (scope)->base.code))] == tcc_type)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6142, __FUNCTION__), 0 : 0));

 token = cp_lexer_peek_token (parser->lexer);





 location_t loc
   = make_location (tilde_loc, tilde_loc, token->location);




 if (scope
     && token->type == CPP_NAME
     && (cp_lexer_peek_nth_token (parser->lexer, 2)->type
  != CPP_LESS)
     && (token->u.value == (((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6160, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6160, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6160, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6160, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6160, __FUNCTION__))->type_common.name))
  || ((((((enum tree_code) (scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6161, __FUNCTION__))->type_common.lang_flag_5))
      && constructor_name_p (token->u.value, scope))))
   {
     cp_lexer_consume_token (parser->lexer);
     return build_min_nt_loc (loc, BIT_NOT_EXPR, scope);
   }


 if (cp_parser_is_keyword (token, RID_AUTO))
   {
     if (cxx_dialect < cxx14)
       pedwarn (loc, 0,
         "%<~auto%> only available with "
         "%<-std=c++14%> or %<-std=gnu++14%>");
     cp_lexer_consume_token (parser->lexer);
     return build_min_nt_loc (loc, BIT_NOT_EXPR, make_auto ());
   }



 if (token->type == ((enum cpp_ttype) (CPP_KEYWORD + 1)) && cxx_dialect >= cxx20)
   {
     if (!cp_parser_simulate_error (parser))
       error_at (tilde_loc, "template-id not allowed for destructor");
     return global_trees[TI_ERROR_MARK];
   }







 done = false;
 type_decl = (tree) 
# 6195 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 6195 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
 if (scope)
   {
     cp_parser_parse_tentatively (parser);
     type_decl = cp_parser_class_name (parser,
                                  false,
                                  false,
           typename_type,
                                false,
                            false,
           declarator_p);
     if (cp_parser_parse_definitely (parser))
       done = true;
   }

 if (!done && scope && qualifying_scope)
   {
     cp_parser_parse_tentatively (parser);
     parser->scope = qualifying_scope;
     parser->object_scope = (tree) 
# 6214 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 6214 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
     parser->qualifying_scope = (tree) 
# 6215 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 6215 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
     type_decl
       = cp_parser_class_name (parser,
                                 false,
                                 false,
          typename_type,
                               false,
                           false,
          declarator_p);
     if (cp_parser_parse_definitely (parser))
       done = true;
   }

 else if (!done && object_scope)
   {
     cp_parser_parse_tentatively (parser);
     parser->scope = object_scope;
     parser->object_scope = (tree) 
# 6232 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 6232 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
     parser->qualifying_scope = (tree) 
# 6233 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 6233 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
     type_decl
       = cp_parser_class_name (parser,
                                 false,
                                 false,
          typename_type,
                               false,
                           false,
          declarator_p);
     if (cp_parser_parse_definitely (parser))
       done = true;
   }

 if (!done)
   {
     parser->scope = (tree) 
# 6248 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 6248 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
     parser->object_scope = (tree) 
# 6249 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 6249 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
     parser->qualifying_scope = (tree) 
# 6250 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 6250 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
     if (scope_chain->x_processing_template_decl)
       cp_parser_parse_tentatively (parser);
     type_decl
       = cp_parser_class_name (parser,
                                 false,
                                 false,
          typename_type,
                               false,
                           false,
          declarator_p);
     if (scope_chain->x_processing_template_decl
  && ! cp_parser_parse_definitely (parser))
       {


  if (cp_parser_uncommitted_to_tentative_parse_p (parser))
    {
      cp_parser_simulate_error (parser);
      return global_trees[TI_ERROR_MARK];
    }


  type_decl = cp_parser_identifier (parser);
  if (type_decl != global_trees[TI_ERROR_MARK])
    type_decl = build_min_nt_loc (loc, BIT_NOT_EXPR, type_decl);
  return type_decl;
       }
   }




 if (type_decl == global_trees[TI_ERROR_MARK] && scope)
   return build_min_nt_loc (loc, BIT_NOT_EXPR, scope);
 else if (type_decl == global_trees[TI_ERROR_MARK])
   return global_trees[TI_ERROR_MARK];


 if (declarator_p && scope && !check_dtor_name (scope, type_decl))
   {
     if (!cp_parser_uncommitted_to_tentative_parse_p (parser))
       error_at (loc,
   "declaration of %<~%T%> as member of %qT",
   type_decl, scope);
     cp_parser_simulate_error (parser);
     return global_trees[TI_ERROR_MARK];
   }





 if (declarator_p
     && !(((enum tree_code) (type_decl)->base.code) == TYPE_DECL && ((contains_struct_check ((type_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6304, __FUNCTION__))->decl_common.lang_flag_2))
     && !(((enum tree_code) (type_decl)->base.code) == TYPE_DECL && ((contains_struct_check ((type_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6305, __FUNCTION__))->decl_common.lang_flag_4))
     && !cp_parser_uncommitted_to_tentative_parse_p (parser))
   error_at (loc,
      "typedef-name %qD used as destructor declarator",
      type_decl);

 return build_min_nt_loc (loc, BIT_NOT_EXPR, ((contains_struct_check ((type_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6311, __FUNCTION__))->typed.type));
      }

    case CPP_KEYWORD:
      if (token->keyword == RID_OPERATOR)
 {
   cp_expr id;


   cp_parser_parse_tentatively (parser);

   id = cp_parser_template_id_expr (parser, template_keyword_p,
                               true,
        declarator_p);

   if (cp_parser_parse_definitely (parser))
     return id;


   cp_parser_parse_tentatively (parser);

   id = cp_parser_operator_function_id (parser);

   if (!cp_parser_parse_definitely (parser))
     id = cp_parser_conversion_function_id (parser);

   return id;
 }


    default:
      if (optional_p)
 return (tree) 
# 6343 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 6343 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
      cp_parser_error (parser, "expected unqualified-id");
      return global_trees[TI_ERROR_MARK];
    }
}





static void
check_template_keyword_in_nested_name_spec (tree name)
{
  if ((((((enum tree_code) (name)->base.code)) == RECORD_TYPE || (((enum tree_code) (name)->base.code)) == UNION_TYPE) && ((tree_class_check ((name), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6356, __FUNCTION__))->type_common.lang_flag_5))
      && ((((((tree_class_check ((name), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6357, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template)
    && (((((contains_struct_check ((((tree_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((((struct tree_template_info*)(tree_check (((((tree_class_check (((tree_check3 ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__))->type_non_common.lang_1))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__, (TEMPLATE_INFO))))->tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__, (TEMPLATE_DECL))))))))->arguments), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__))->typed.type))) == (((struct tree_template_info*)(tree_check (((((tree_class_check (((tree_check3 ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__))->type_non_common.lang_1))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6358, __FUNCTION__, (TEMPLATE_INFO))))->tmpl)))
   || ((((tree_class_check (((tree_check3 ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__))->type_non_common.lang_1)) && !((((tree_class_check ((name), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) && (((((contains_struct_check ((((tree_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((((struct tree_template_info*)(tree_check (((((tree_class_check (((tree_check3 ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__))->type_non_common.lang_1))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__, (TEMPLATE_INFO))))->tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__, (TEMPLATE_DECL))))))))->arguments), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__))->typed.type))) == (((struct tree_template_info*)(tree_check (((((tree_class_check (((tree_check3 ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__))->type_non_common.lang_1))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6359, __FUNCTION__, (TEMPLATE_INFO))))->tmpl)))))
    return;

  if (((enum tree_code) (name)->base.code) == TYPENAME_TYPE
      && ((enum tree_code) ((((tree_class_check (((tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6363, __FUNCTION__, (TYPENAME_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6363, __FUNCTION__))->type_non_common.values)))->base.code) == TEMPLATE_ID_EXPR)
    return;

  else if (alias_template_specialization_p (name, nt_opaque))
    return;

  permerror (input_location, (tree_code_type[(int) (((enum tree_code) (name)->base.code))] == tcc_type)
      ? "%qT is not a template"
      : "%qD is not a template",
      name);
}
# 6400 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_nested_name_specifier_opt (cp_parser *parser,
         bool typename_keyword_p,
         bool check_dependency_p,
         bool type_p,
         bool is_declaration,
         bool template_keyword_p )
{
  bool success = false;
  cp_token_position start = 0;
  cp_token *token;


  if (cp_parser_uncommitted_to_tentative_parse_p (parser)
      && cp_lexer_next_token_is_not (parser->lexer, ((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1))))
    {
      start = cp_lexer_token_position (parser->lexer, false);
      push_deferring_access_checks (dk_deferred);
    }

  while (true)
    {
      tree new_scope;
      tree old_scope;
      tree saved_qualifying_scope;



      token = cp_lexer_peek_token (parser->lexer);



      if (token->type == ((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)))
 {

   cp_parser_pre_parsed_nested_name_specifier (parser);



   if (is_declaration
       && ((enum tree_code) (parser->scope)->base.code) == TYPENAME_TYPE)
     {
       new_scope = resolve_typename_type (parser->scope,
                          false);
       if (((enum tree_code) (new_scope)->base.code) != TYPENAME_TYPE)
  parser->scope = new_scope;
     }
   success = true;
   continue;
 }




      if (success && token->keyword == RID_TEMPLATE)
 ;

      else if (token->type == ((enum cpp_ttype) (CPP_KEYWORD + 1)))
 ;

      else if (token_is_decltype (token))
 ;
      else
 {


   if (token->type != CPP_NAME)
     break;



   token = cp_lexer_peek_nth_token (parser->lexer, 2);

   if (token->type == CPP_COLON
       && parser->colon_corrects_to_scope_p
       && cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_NAME)
     {
       gcc_rich_location richloc (token->location);
       richloc.add_fixit_replace ("::");
       error_at (&richloc,
   "found %<:%> in nested-name-specifier, "
   "expected %<::%>");
       token->type = CPP_SCOPE;
     }

   if (token->type != CPP_SCOPE
       && !cp_parser_nth_token_starts_template_argument_list_p
    (parser, 2))
     break;
 }



      cp_parser_parse_tentatively (parser);



      if (success)
 {
   template_keyword_p = cp_parser_optional_template_keyword (parser);




   if (!template_keyword_p
       && typename_keyword_p
       && cp_parser_nth_token_starts_template_argument_list_p (parser, 2))
     template_keyword_p = true;
 }



      old_scope = parser->scope;
      saved_qualifying_scope = parser->qualifying_scope;




      if (is_declaration
   && !typename_keyword_p
   && parser->scope
   && ((enum tree_code) (parser->scope)->base.code) == TYPENAME_TYPE)
 parser->scope = resolve_typename_type (parser->scope,
                               false);

      new_scope
 = cp_parser_qualifying_entity (parser,
                                       typename_keyword_p,
                                       template_keyword_p,
                                       check_dependency_p,
                                       type_p,
                                       is_declaration);

      cp_parser_require (parser, CPP_SCOPE, RT_SCOPE);



      if (!cp_parser_parse_definitely (parser))
 {
   bool error_p = false;




   parser->scope = old_scope;
   parser->qualifying_scope = saved_qualifying_scope;







   if (cp_lexer_next_token_is (parser->lexer, ((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1)))
       && (cp_lexer_peek_nth_token (parser->lexer, 2)->type
    == CPP_SCOPE))
     {
       token = cp_lexer_consume_token (parser->lexer);
       tree dtype = token->u.tree_check_value->value;
       if (dtype != global_trees[TI_ERROR_MARK])
  error_at (token->location, "%<decltype%> evaluates to %qT, "
     "which is not a class or enumeration type",
     dtype);
       parser->scope = global_trees[TI_ERROR_MARK];
       error_p = true;

       success = true;
       cp_lexer_consume_token (parser->lexer);
     }

   if (cp_lexer_next_token_is (parser->lexer, ((enum cpp_ttype) (CPP_KEYWORD + 1)))
       && cp_lexer_nth_token_is (parser->lexer, 2, CPP_SCOPE))
     {


       token = cp_lexer_peek_token (parser->lexer);
       tree tid = token->u.tree_check_value->value;
       if (((enum tree_code) (tid)->base.code) == TEMPLATE_ID_EXPR
    && ((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((tid), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6578, __FUNCTION__))))))->base.code) != IDENTIFIER_NODE)
  {
    tree tmpl = (tree) 
# 6580 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 6580 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
    if (is_overloaded_fn (tid))
      {
        tree fns = get_fns (tid);
        if ((((enum tree_code) (fns)->base.code) != OVERLOAD || !(((struct tree_overload*)(tree_check ((fns), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6584, __FUNCTION__, (OVERLOAD))))->common.chain)))
   tmpl = ovl_first (fns);
        if (function_concept_p (fns))
   error_at (token->location, "concept-id %qD "
      "in nested-name-specifier", tid);
        else
   error_at (token->location, "function template-id "
      "%qD in nested-name-specifier", tid);
      }
    else
      {
        tmpl = (*((const_cast<tree*> (tree_operand_check ((tid), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6595, __FUNCTION__)))));
        if (variable_concept_p (tmpl)
     || standard_concept_p (tmpl))
   error_at (token->location, "concept-id %qD "
      "in nested-name-specifier", tid);
        else
   {

     ((void)(!(variable_template_p (tmpl)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6603, __FUNCTION__), 0 : 0));
     error_at (token->location, "variable template-id "
        "%qD in nested-name-specifier", tid);
   }
      }
    if (tmpl)
      inform (((contains_struct_check ((tmpl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6609, __FUNCTION__))->decl_minimal.locus),
       "%qD declared here", tmpl);

    parser->scope = global_trees[TI_ERROR_MARK];
    error_p = true;

    success = true;
    cp_lexer_consume_token (parser->lexer);
    cp_lexer_consume_token (parser->lexer);
  }
     }

   if (cp_parser_uncommitted_to_tentative_parse_p (parser))
     break;



   while (cp_lexer_next_token_is (parser->lexer, CPP_NAME)
   && (cp_lexer_peek_nth_token (parser->lexer, 2)->type
       == CPP_SCOPE)
   && (cp_lexer_peek_nth_token (parser->lexer, 3)->type
       != CPP_COMPL))
     {
       token = cp_lexer_consume_token (parser->lexer);
       if (!error_p)
  {
    if (!token->error_reported)
      {
        tree decl;
        tree ambiguous_decls;

        decl = cp_parser_lookup_name (parser, token->u.value,
          none_type,
                          false,
                           false,
                               true,
          &ambiguous_decls,
          token->location);
        if (((enum tree_code) (decl)->base.code) == TEMPLATE_DECL)
   error_at (token->location,
      "%qD used without template arguments",
      decl);
        else if (ambiguous_decls)
   {


     if (cp_parser_uncommitted_to_tentative_parse_p
         (parser))
       {
         error_at (token->location,
     "reference to %qD is ambiguous",
     token->u.value);
         print_candidates (ambiguous_decls);
       }
     decl = global_trees[TI_ERROR_MARK];
   }
        else
                        {
                          if (cxx_dialect != cxx98)
                            cp_parser_name_lookup_error
                            (parser, token->u.value, decl, NLE_NOT_CXX98,
          token->location);
     else
       cp_parser_name_lookup_error
       (parser, token->u.value, decl, NLE_CXX98,
        token->location);
                        }
      }
    parser->scope = global_trees[TI_ERROR_MARK];
    error_p = true;
# 6687 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
    success = true;
  }
       cp_lexer_consume_token (parser->lexer);
     }
   break;
 }

      success = true;

      if (((enum tree_code) (new_scope)->base.code) == TYPE_DECL)
 new_scope = ((contains_struct_check ((new_scope), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6697, __FUNCTION__))->typed.type);

      if (template_keyword_p)
 check_template_keyword_in_nested_name_spec (new_scope);


      if ((tree_code_type[(int) (((enum tree_code) (new_scope)->base.code))] == tcc_type)


   && !(((tree_class_check ((new_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6706, __FUNCTION__))->type_common.size) != (tree) 
# 6706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 6706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      )

   && !dependent_type_p (new_scope))
 {
   new_scope = complete_type (new_scope);



   if (!(((tree_class_check ((new_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6714, __FUNCTION__))->type_common.size) != (tree) 
# 6714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 6714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
       )
       && currently_open_class (new_scope))
     new_scope = ((tree_class_check ((new_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6716, __FUNCTION__))->type_common.main_variant);
 }


      parser->scope = new_scope;
    }






  if (success && start)
    {
      cp_token *token;

      token = cp_lexer_token_at (parser->lexer, start);

      token->type = ((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1));


      token->u.tree_check_value = ggc_cleared_alloc<struct tree_check> ();
      token->tree_check_p = true;
      token->u.tree_check_value->value = parser->scope;
      token->u.tree_check_value->checks = get_deferred_access_checks ();
      token->u.tree_check_value->qualifying_scope =
 parser->qualifying_scope;
      token->keyword = RID_MAX;


      cp_lexer_purge_tokens_after (parser->lexer, start);
    }

  if (start)
    pop_to_parent_deferring_access_checks ();

  return success ? parser->scope : (tree) 
# 6752 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 6752 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           ;
}






static tree
cp_parser_nested_name_specifier (cp_parser *parser,
     bool typename_keyword_p,
     bool check_dependency_p,
     bool type_p,
     bool is_declaration)
{
  tree scope;


  scope = cp_parser_nested_name_specifier_opt (parser,
            typename_keyword_p,
            check_dependency_p,
            type_p,
            is_declaration);

  if (!scope)
    {
      cp_parser_error (parser, "expected nested-name-specifier");
      parser->scope = (tree) 
# 6779 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 6779 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
    }

  return scope;
}
# 6802 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_qualifying_entity (cp_parser *parser,
        bool typename_keyword_p,
        bool template_keyword_p,
        bool check_dependency_p,
        bool type_p,
        bool is_declaration)
{
  tree saved_scope;
  tree saved_qualifying_scope;
  tree saved_object_scope;
  tree scope;
  bool only_class_p;
  bool successful_parse_p;


  if (cp_lexer_next_token_is_decltype (parser->lexer))
    {
      scope = cp_parser_decltype (parser);
      if (((enum tree_code) (scope)->base.code) != ENUMERAL_TYPE
   && !((((enum tree_code) (scope)->base.code) == TEMPLATE_TYPE_PARM || ((enum tree_code) (scope)->base.code) == TYPENAME_TYPE || ((enum tree_code) (scope)->base.code) == TYPEOF_TYPE || ((enum tree_code) (scope)->base.code) == BOUND_TEMPLATE_TEMPLATE_PARM || ((enum tree_code) (scope)->base.code) == DECLTYPE_TYPE) || (((((enum tree_code) (scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6822, __FUNCTION__))->type_common.lang_flag_5))))
 {
   cp_parser_simulate_error (parser);
   return global_trees[TI_ERROR_MARK];
 }
      if (((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6827, __FUNCTION__))->type_common.name))
 scope = ((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6828, __FUNCTION__))->type_common.name);
      return scope;
    }




  saved_scope = parser->scope;
  saved_qualifying_scope = parser->qualifying_scope;
  saved_object_scope = parser->object_scope;


  only_class_p = template_keyword_p
    || (saved_scope && (tree_code_type[(int) (((enum tree_code) (saved_scope)->base.code))] == tcc_type) && cxx_dialect == cxx98);
  if (!only_class_p)
    cp_parser_parse_tentatively (parser);
  scope = cp_parser_class_name (parser,
    typename_keyword_p,
    template_keyword_p,
    type_p ? class_type : none_type,
    check_dependency_p,
                     false,
    is_declaration,
                cxx_dialect > cxx98);
  successful_parse_p = only_class_p || cp_parser_parse_definitely (parser);

  if (!only_class_p && !successful_parse_p)
    {

      parser->scope = saved_scope;
      parser->qualifying_scope = saved_qualifying_scope;
      parser->object_scope = saved_object_scope;




      if (cp_lexer_next_token_is_not (parser->lexer, CPP_NAME)
   || cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SCOPE)
 return global_trees[TI_ERROR_MARK];
      scope = cp_parser_namespace_name (parser);
    }

  return scope;
}



static bool
cp_parser_compound_literal_p (cp_parser *parser)
{
  cp_lexer_save_tokens (parser->lexer);




  bool compound_literal_p
    = (cp_parser_skip_to_closing_parenthesis (parser, false, false,
                             true)
       && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE));


  cp_lexer_rollback_tokens (parser->lexer);

  return compound_literal_p;
}




bool
literal_integer_zerop (const_tree expr)
{
  return (location_wrapper_p (expr)
   && integer_zerop ((*((const_cast<tree*> (tree_operand_check ((expr), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 6901, __FUNCTION__)))))));
}
# 6946 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_postfix_expression (cp_parser *parser, bool address_p, bool cast_p,
                              bool member_access_only_p, bool decltype_p,
         cp_id_kind * pidk_return)
{
  cp_token *token;
  location_t loc;
  enum rid keyword;
  cp_id_kind idk = CP_ID_KIND_NONE;
  cp_expr postfix_expression = (tree) 
# 6955 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 6955 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;
  bool is_member_access = false;


  token = cp_lexer_peek_token (parser->lexer);
  loc = token->location;
  location_t start_loc = get_range_from_loc (line_table, loc).m_start;


  keyword = token->keyword;
  switch (keyword)
    {
    case RID_DYNCAST:
    case RID_STATCAST:
    case RID_REINTCAST:
    case RID_CONSTCAST:
      {
 tree type;
 cp_expr expression;
 const char *saved_message;
 bool saved_in_type_id_in_expr_p;




 cp_lexer_consume_token (parser->lexer);


 saved_message = parser->type_definition_forbidden_message;
 parser->type_definition_forbidden_message
   = "types may not be defined in casts";


 cp_parser_require (parser, CPP_LESS, RT_LESS);

 saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;
 parser->in_type_id_in_expr_p = true;
 type = cp_parser_type_id (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
      
# 6993 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null
# 6993 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         );
 parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;

 cp_parser_require (parser, CPP_GREATER, RT_GREATER);

 parser->type_definition_forbidden_message = saved_message;

 bool saved_greater_than_is_operator_p
   = parser->greater_than_is_operator_p;
 parser->greater_than_is_operator_p = true;


 matching_parens parens;
 parens.require_open (parser);
 expression = cp_parser_expression (parser, & idk, true);
 cp_token *close_paren = cp_parser_require (parser, CPP_CLOSE_PAREN,
         RT_CLOSE_PAREN);
 location_t end_loc = close_paren ?
   close_paren->location : ((location_t) 0);

 parser->greater_than_is_operator_p
   = saved_greater_than_is_operator_p;



 if (!cast_valid_in_integral_constant_expression_p (type)
     && cp_parser_non_integral_constant_expression (parser, NIC_CAST))
   {
     postfix_expression = global_trees[TI_ERROR_MARK];
     break;
   }






 location_t cp_cast_loc = make_location (start_loc, start_loc, end_loc);

 switch (keyword)
   {
   case RID_DYNCAST:
     postfix_expression
       = build_dynamic_cast (cp_cast_loc, type, expression,
        tf_warning_or_error);
     break;
   case RID_STATCAST:
     postfix_expression
       = build_static_cast (cp_cast_loc, type, expression,
       tf_warning_or_error);
     break;
   case RID_REINTCAST:
     postfix_expression
       = build_reinterpret_cast (cp_cast_loc, type, expression,
                                        tf_warning_or_error);
     break;
   case RID_CONSTCAST:
     postfix_expression
       = build_const_cast (cp_cast_loc, type, expression,
      tf_warning_or_error);
     break;
   default:
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7055, __FUNCTION__));
   }
      }
      break;

    case RID_TYPEID:
      {
 tree type;
 const char *saved_message;
 bool saved_in_type_id_in_expr_p;


 cp_lexer_consume_token (parser->lexer);

 matching_parens parens;
 parens.require_open (parser);

 saved_message = parser->type_definition_forbidden_message;
 parser->type_definition_forbidden_message
   = "types may not be defined in a %<typeid%> expression";


 cp_parser_parse_tentatively (parser);

 saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;
 parser->in_type_id_in_expr_p = true;
 type = cp_parser_type_id (parser);
 parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;



 cp_token *close_paren = parens.require_close (parser);

 if (cp_parser_parse_definitely (parser))
   postfix_expression = get_typeid (type, tf_warning_or_error);

 else
   {
     tree expression;


     expression = cp_parser_expression (parser, & idk);

     postfix_expression = build_typeid (expression, tf_warning_or_error);

     close_paren = parens.require_close (parser);
   }

 parser->type_definition_forbidden_message = saved_message;

 if (cp_parser_non_integral_constant_expression (parser, NIC_TYPEID))
   postfix_expression = global_trees[TI_ERROR_MARK];






 if (close_paren)
   {
     location_t typeid_loc
       = make_location (start_loc, start_loc, close_paren->location);
     postfix_expression.set_location (typeid_loc);
     postfix_expression.maybe_add_location_wrapper ();
   }
      }
      break;

    case RID_TYPENAME:
      {
 tree type;


        ++parser->prevent_constrained_type_specifiers;
 type = cp_parser_elaborated_type_specifier (parser,
                        false,
                             false);
        --parser->prevent_constrained_type_specifiers;
 postfix_expression = cp_parser_functional_cast (parser, type);
      }
      break;

    case RID_ADDRESSOF:
    case RID_BUILTIN_SHUFFLE:
    case RID_BUILTIN_LAUNDER:
      {
 vec<tree, va_gc> *vec;
 unsigned int i;
 tree p;

 cp_lexer_consume_token (parser->lexer);
 vec = cp_parser_parenthesized_expression_list (parser, non_attr,
                 false, true,
                         
# 7148 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 7148 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            );
 if (vec == 
# 7149 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 7149 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               )
   {
     postfix_expression = global_trees[TI_ERROR_MARK];
     break;
   }

 for (i = 0; (*vec).iterate ((i), &(p)); ++(i))
   mark_exp_read (p);

 switch (keyword)
   {
   case RID_ADDRESSOF:
     if (vec->length () == 1)
       postfix_expression
  = cp_build_addressof (loc, (*vec)[0], tf_warning_or_error);
     else
       {
  error_at (loc, "wrong number of arguments to "
          "%<__builtin_addressof%>");
  postfix_expression = global_trees[TI_ERROR_MARK];
       }
     break;

   case RID_BUILTIN_LAUNDER:
     if (vec->length () == 1)
       postfix_expression = finish_builtin_launder (loc, (*vec)[0],
          tf_warning_or_error);
     else
       {
  error_at (loc, "wrong number of arguments to "
          "%<__builtin_launder%>");
  postfix_expression = global_trees[TI_ERROR_MARK];
       }
     break;

   case RID_BUILTIN_SHUFFLE:
     if (vec->length () == 2)
       postfix_expression
  = build_x_vec_perm_expr (loc, (*vec)[0], (tree) 
# 7187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 7187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   ,
      (*vec)[1], tf_warning_or_error);
     else if (vec->length () == 3)
       postfix_expression
  = build_x_vec_perm_expr (loc, (*vec)[0], (*vec)[1],
      (*vec)[2], tf_warning_or_error);
     else
       {
  error_at (loc, "wrong number of arguments to "
          "%<__builtin_shuffle%>");
  postfix_expression = global_trees[TI_ERROR_MARK];
       }
     break;

   default:
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7202, __FUNCTION__));
   }
 break;
      }

    case RID_BUILTIN_CONVERTVECTOR:
      {
 tree expression;
 tree type;

 cp_lexer_consume_token (parser->lexer);

 matching_parens parens;
 parens.require_open (parser);

 expression = cp_parser_assignment_expression (parser);

 cp_parser_require (parser, CPP_COMMA, RT_COMMA);
 location_t type_location
   = cp_lexer_peek_token (parser->lexer)->location;

 {
   type_id_in_expr_sentinel s (parser);
   type = cp_parser_type_id (parser);
 }

 parens.require_close (parser);
 return cp_build_vec_convert (expression, type_location, type,
         tf_warning_or_error);
      }

    default:
      {
 tree type;





 cp_parser_parse_tentatively (parser);

        ++parser->prevent_constrained_type_specifiers;
 type = cp_parser_simple_type_specifier (parser,
                     
# 7245 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 7245 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ,
      CP_PARSER_FLAGS_NONE);
        --parser->prevent_constrained_type_specifiers;

 if (!cp_parser_error_occurred (parser))
   postfix_expression
     = cp_parser_functional_cast (parser, type);

 if (cp_parser_parse_definitely (parser))
   break;



 if (cp_parser_allow_gnu_extensions_p (parser)
     && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
   {
     cp_expr initializer = (tree) 
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 7261 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;

     cp_parser_parse_tentatively (parser);

     matching_parens parens;
     parens.consume_open (parser);



     if (!cp_parser_compound_literal_p (parser))
       cp_parser_simulate_error (parser);
     else
       {

  bool saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;
  parser->in_type_id_in_expr_p = true;
  type = cp_parser_type_id (parser);
  parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;
  parens.require_close (parser);
       }



     if (!cp_parser_error_occurred (parser))
       {
  bool non_constant_p;

  initializer = cp_parser_braced_list (parser,
           &non_constant_p);
       }


     if (cp_parser_parse_definitely (parser))
       {


  pedwarn (input_location, OPT_Wpedantic,
    "ISO C++ forbids compound-literals");
# 7308 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (cp_parser_non_integral_constant_expression (parser,
        NIC_NCC))
    {
      postfix_expression = global_trees[TI_ERROR_MARK];
      break;
    }

  postfix_expression
    = finish_compound_literal (type, initializer,
          tf_warning_or_error, fcl_c99);
  postfix_expression.set_location (initializer.get_location ());
  break;
       }
   }


 postfix_expression
   = cp_parser_primary_expression (parser, address_p, cast_p,
                          false,
       decltype_p,
       &idk);
      }
      break;
    }







  while (true)
    {
      if (idk == CP_ID_KIND_UNQUALIFIED
   && identifier_p (postfix_expression)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN))

 postfix_expression
   = unqualified_name_lookup_error (postfix_expression);


      token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {
 case CPP_OPEN_SQUARE:
   if (cp_next_tokens_can_be_std_attribute_p (parser))
     {
       cp_parser_error (parser,
          "two consecutive %<[%> shall "
          "only introduce an attribute");
       return global_trees[TI_ERROR_MARK];
     }
   postfix_expression
     = cp_parser_postfix_open_square_expression (parser,
       postfix_expression,
       false,
       decltype_p);
   postfix_expression.set_range (start_loc,
     postfix_expression.get_location ());

   idk = CP_ID_KIND_NONE;
          is_member_access = false;
   break;

 case CPP_OPEN_PAREN:

   {
     bool koenig_p;
     bool is_builtin_constant_p;
     bool saved_integral_constant_expression_p = false;
     bool saved_non_integral_constant_expression_p = false;
     tsubst_flags_t complain = complain_flags (decltype_p);
     vec<tree, va_gc> *args;
     location_t close_paren_loc = ((location_t) 0);

            is_member_access = false;

     tree stripped_expression
       = tree_strip_any_location_wrapper (postfix_expression);
     is_builtin_constant_p
       = (((enum tree_code) (stripped_expression)->base.code) == FUNCTION_DECL && ((built_in_class) (tree_check ((stripped_expression), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7389, __FUNCTION__, (FUNCTION_DECL)))->function_decl.built_in_class) == BUILT_IN_NORMAL && DECL_FUNCTION_CODE (stripped_expression) == BUILT_IN_CONSTANT_P);
     if (is_builtin_constant_p)
       {


  saved_integral_constant_expression_p
    = parser->integral_constant_expression_p;
  saved_non_integral_constant_expression_p
    = parser->non_integral_constant_expression_p;
  parser->integral_constant_expression_p = false;
       }
     args = (cp_parser_parenthesized_expression_list
      (parser, non_attr,
                  false, true,
                          
# 7403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 7403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ,
                           &close_paren_loc,
                            true));
     if (is_builtin_constant_p)
       {
  parser->integral_constant_expression_p
    = saved_integral_constant_expression_p;
  parser->non_integral_constant_expression_p
    = saved_non_integral_constant_expression_p;
       }

     if (args == 
# 7414 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 7414 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    )
       {
  postfix_expression = global_trees[TI_ERROR_MARK];
  break;
       }



     if (! builtin_valid_in_constant_expr_p (postfix_expression)
  && cp_parser_non_integral_constant_expression (parser,
              NIC_FUNC_CALL))
       {
  postfix_expression = global_trees[TI_ERROR_MARK];
  release_tree_vector (args);
  break;
       }

     koenig_p = false;
     if (idk == CP_ID_KIND_UNQUALIFIED
  || idk == CP_ID_KIND_TEMPLATE_ID)
       {
  if (identifier_p (postfix_expression)


      || (((enum tree_code) (postfix_expression)->base.code) == TEMPLATE_ID_EXPR
   && identifier_p ((*((const_cast<tree*> (tree_operand_check ((postfix_expression), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7439, __FUNCTION__))))))))
    {
      if (!args->is_empty ())
        {
   koenig_p = true;
   if (!any_type_dependent_arguments_p (args))
     postfix_expression
       = perform_koenig_lookup (postfix_expression, args,
           complain);
        }
      else
        postfix_expression
   = unqualified_fn_lookup_error (postfix_expression);
    }



  else if (!args->is_empty ()
    && is_overloaded_fn (postfix_expression))
    {



      bool do_adl_p = true;
      tree fns = get_fns (postfix_expression);
      for (lkp_iterator iter (fns); iter; ++iter)
        {
   tree fn = (((enum tree_code) (*iter)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((*iter), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7466, __FUNCTION__, (TEMPLATE_DECL))))))))->result : *iter);
   if ((((enum tree_code) (fn)->base.code) == USING_DECL
        && ((contains_struct_check (((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7468, __FUNCTION__, (USING_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7468, __FUNCTION__))->decl_common.lang_flag_0))
       || ((((enum tree_code) (((contains_struct_check ((fn), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7469, __FUNCTION__))->typed.type))->base.code) == METHOD_TYPE) || (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (fn)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7469, __FUNCTION__, (TEMPLATE_DECL))))))))->result : fn)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7469, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (fn)->base.code) == FUNCTION_DECL || (((enum tree_code) (fn)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7469, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 7469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null 
# 7469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7469, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7469, __FUNCTION__); &lt->u.fn; })->static_function))
       || ((contains_struct_check (((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7470, __FUNCTION__, (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7470, __FUNCTION__))->decl_common.lang_flag_0))
     {
       do_adl_p = false;
       break;
     }
        }

      if (do_adl_p)
        {
   koenig_p = true;
   if (!any_type_dependent_arguments_p (args))
     postfix_expression
       = perform_koenig_lookup (postfix_expression, args,
           complain);
        }
    }
       }

     if (((enum tree_code) (postfix_expression)->base.code) == COMPONENT_REF)
       {
  tree instance = (*((const_cast<tree*> (tree_operand_check ((postfix_expression), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7490, __FUNCTION__)))));
  tree fn = (*((const_cast<tree*> (tree_operand_check ((postfix_expression), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7491, __FUNCTION__)))));

  if (scope_chain->x_processing_template_decl
      && (type_dependent_object_expression_p (instance)
   || (!(((enum tree_code) (fn)->base.code) == BASELINK)
       && ((enum tree_code) (fn)->base.code) != FIELD_DECL)
   || type_dependent_expression_p (fn)
   || any_type_dependent_arguments_p (args)))
    {
      maybe_generic_this_capture (instance, fn);
      postfix_expression
        = build_min_nt_call_vec (postfix_expression, args);
    }
  else if ((((enum tree_code) (fn)->base.code) == BASELINK))
    {
    postfix_expression
      = (build_new_method_call
         (instance, fn, &args, (tree) 
# 7508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 7508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ,
   (idk == CP_ID_KIND_QUALIFIED
    ? ((1 << 0))|(1 << 1)
    : ((1 << 0))),
            
# 7512 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 7512 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ,
   complain));
    }
  else
    postfix_expression
      = finish_call_expr (postfix_expression, &args,
                          false,
                  false,
     complain);
       }
     else if (((enum tree_code) (postfix_expression)->base.code) == OFFSET_REF
       || ((enum tree_code) (postfix_expression)->base.code) == MEMBER_REF
       || ((enum tree_code) (postfix_expression)->base.code) == DOTSTAR_EXPR)
       postfix_expression = (build_offset_ref_call_from_tree
        (postfix_expression, &args,
         complain));
     else if (idk == CP_ID_KIND_QUALIFIED)


       postfix_expression
  = finish_call_expr (postfix_expression, &args,
                             true,
        koenig_p,
        complain);
     else

       postfix_expression
  = finish_call_expr (postfix_expression, &args,
                             false,
        koenig_p,
        complain);

     if (close_paren_loc != ((location_t) 0))
       {
  location_t combined_loc = make_location (token->location,
        start_loc,
        close_paren_loc);
  postfix_expression.set_location (combined_loc);
       }


     idk = CP_ID_KIND_NONE;

     release_tree_vector (args);
   }
   break;

 case CPP_DOT:
 case CPP_DEREF:






   cp_lexer_consume_token (parser->lexer);

   postfix_expression
     = cp_parser_postfix_dot_deref_expression (parser, token->type,
            postfix_expression,
            false, &idk, loc);

          is_member_access = true;
   break;

 case CPP_PLUS_PLUS:


   cp_lexer_consume_token (parser->lexer);

   postfix_expression
     = finish_increment_expr (postfix_expression,
         POSTINCREMENT_EXPR);

   if (cp_parser_non_integral_constant_expression (parser, NIC_INC))
     postfix_expression = global_trees[TI_ERROR_MARK];
   idk = CP_ID_KIND_NONE;
          is_member_access = false;
   break;

 case CPP_MINUS_MINUS:


   cp_lexer_consume_token (parser->lexer);

   postfix_expression
     = finish_increment_expr (postfix_expression,
         POSTDECREMENT_EXPR);

   if (cp_parser_non_integral_constant_expression (parser, NIC_DEC))
     postfix_expression = global_trees[TI_ERROR_MARK];
   idk = CP_ID_KIND_NONE;
          is_member_access = false;
   break;

 default:
   if (pidk_return != 
# 7608 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 7608 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         )
     * pidk_return = idk;
          if (member_access_only_p)
            return is_member_access
              ? postfix_expression
              : cp_expr (global_trees[TI_ERROR_MARK]);
          else
            return postfix_expression;
 }
    }


  (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7620, __FUNCTION__));
  return global_trees[TI_ERROR_MARK];
}
# 7633 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_postfix_open_square_expression (cp_parser *parser,
       tree postfix_expression,
       bool for_offsetof,
       bool decltype_p)
{
  tree index = (tree) 
# 7639 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 7639 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;
  bool saved_greater_than_is_operator_p;


  cp_lexer_consume_token (parser->lexer);

  saved_greater_than_is_operator_p = parser->greater_than_is_operator_p;
  parser->greater_than_is_operator_p = true;
# 7657 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (for_offsetof)
    index = cp_parser_constant_expression (parser);
  else
    {
      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
 {
   bool expr_nonconst_p;
   cp_lexer_set_source_position (parser->lexer);
   maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
   index = cp_parser_braced_list (parser, &expr_nonconst_p);
 }
      else
 index = cp_parser_expression (parser, 
# 7669 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                      __null
# 7669 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          , false,
                         false,
                           global_options.x_warn_comma_subscript);
    }

  parser->greater_than_is_operator_p = saved_greater_than_is_operator_p;


  cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);


  postfix_expression = grok_array_decl (loc, postfix_expression,
     index, decltype_p);



  if (!for_offsetof
      && (cp_parser_non_integral_constant_expression (parser, NIC_ARRAY_REF)))
    postfix_expression = global_trees[TI_ERROR_MARK];

  return postfix_expression;
}






bool
cp_parser_dot_deref_incomplete (tree *scope, cp_expr *postfix_expression,
    bool *dependent_p)
{


  diagnostic_t kind = (scope_chain->x_processing_template_decl
         && ((((enum tree_code) (*scope)->base.code) == TEMPLATE_TYPE_PARM || ((enum tree_code) (*scope)->base.code) == TYPENAME_TYPE || ((enum tree_code) (*scope)->base.code) == TYPEOF_TYPE || ((enum tree_code) (*scope)->base.code) == BOUND_TEMPLATE_TEMPLATE_PARM || ((enum tree_code) (*scope)->base.code) == DECLTYPE_TYPE) || (((((enum tree_code) (*scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (*scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((*scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7704, __FUNCTION__))->type_common.lang_flag_5))) ? DK_PEDWARN : DK_ERROR);

  switch (((enum tree_code) (*postfix_expression)->base.code))
    {
    case CAST_EXPR:
    case REINTERPRET_CAST_EXPR:
    case CONST_CAST_EXPR:
    case STATIC_CAST_EXPR:
    case DYNAMIC_CAST_EXPR:
    case IMPLICIT_CONV_EXPR:
    case VIEW_CONVERT_EXPR:
    case NON_LVALUE_EXPR:
      kind = DK_ERROR;
      break;
    case OVERLOAD:

      kind = DK_IGNORED;
      break;
    default:

      if (!((tree_code_type[(int) (((enum tree_code) (*postfix_expression)->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) (*postfix_expression)->base.code))]) <= tcc_expression))
 kind = DK_ERROR;
      break;
    }

  if (kind == DK_IGNORED)
    return false;

  location_t exploc = location_of (*postfix_expression);
  cxx_incomplete_type_diagnostic (exploc, *postfix_expression, *scope, kind);
  if (!((((enum tree_code) (*scope)->base.code) == TEMPLATE_TYPE_PARM || ((enum tree_code) (*scope)->base.code) == TYPENAME_TYPE || ((enum tree_code) (*scope)->base.code) == TYPEOF_TYPE || ((enum tree_code) (*scope)->base.code) == BOUND_TEMPLATE_TEMPLATE_PARM || ((enum tree_code) (*scope)->base.code) == DECLTYPE_TYPE) || (((((enum tree_code) (*scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (*scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((*scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7734, __FUNCTION__))->type_common.lang_flag_5))))
    return true;
  if (kind == DK_ERROR)
    *scope = *postfix_expression = global_trees[TI_ERROR_MARK];
  else if (scope_chain->x_processing_template_decl)
    {
      *dependent_p = true;
      *scope = ((contains_struct_check ((*postfix_expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7741, __FUNCTION__))->typed.type) = (tree) 
# 7741 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 7741 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                         ;
    }
  return false;
}
# 7759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_postfix_dot_deref_expression (cp_parser *parser,
     enum cpp_ttype token_type,
     cp_expr postfix_expression,
     bool for_offsetof, cp_id_kind *idk,
     location_t location)
{
  tree name;
  bool dependent_p;
  bool pseudo_destructor_p;
  tree scope = (tree) 
# 7769 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 7769 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  location_t start_loc = postfix_expression.get_start ();


  if (token_type == CPP_DEREF)
    postfix_expression = build_x_arrow (location, postfix_expression,
     tf_warning_or_error);


  dependent_p = type_dependent_object_expression_p (postfix_expression);

  parser->scope = (tree) 
# 7780 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 7780 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
  parser->qualifying_scope = (tree) 
# 7781 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 7781 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  parser->object_scope = (tree) 
# 7782 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 7782 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
  *idk = CP_ID_KIND_NONE;



  if (!dependent_p)
    {
      scope = ((contains_struct_check ((postfix_expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7789, __FUNCTION__))->typed.type);






      scope = non_reference (scope);




      if (postfix_expression != (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref))
   && scope != global_trees[TI_ERROR_MARK]
   && !currently_open_class (scope))
 {
   scope = complete_type (scope);
   if (!(((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7806, __FUNCTION__))->type_common.size) != (tree) 
# 7806 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 7806 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
       )
       && cp_parser_dot_deref_incomplete (&scope, &postfix_expression,
       &dependent_p))
     return global_trees[TI_ERROR_MARK];
 }

      if (!dependent_p)
 {


   parser->context->object_type = scope;



   if (!scope)
     scope = global_trees[TI_ERROR_MARK];



   if (scope == global_trees[TI_ERROR_MARK])
     postfix_expression = global_trees[TI_ERROR_MARK];
 }
    }

  if (dependent_p)
    {
      tree type = ((contains_struct_check ((postfix_expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7832, __FUNCTION__))->typed.type);


      if (type == (tree) 
# 7835 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 7835 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          )
 type = finish_typeof (postfix_expression);
      parser->context->object_type = type;
    }


  pseudo_destructor_p = false;





  if ((scope && ((((enum tree_code) (scope)->base.code) == OFFSET_TYPE) || ((enum tree_code) (scope)->base.code) == ENUMERAL_TYPE || ((((enum tree_code) (scope)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (scope)->base.code) == INTEGER_TYPE) || ((enum tree_code) (scope)->base.code) == REAL_TYPE || ((enum tree_code) (scope)->base.code) == COMPLEX_TYPE) || (((enum tree_code) (scope)->base.code) == POINTER_TYPE) || (((enum tree_code) (scope)->base.code) == RECORD_TYPE && (((tree_class_check (((tree_check ((scope), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7847, __FUNCTION__, (RECORD_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7847, __FUNCTION__))->type_common.lang_flag_2))) || (((enum tree_code) (scope)->base.code) == NULLPTR_TYPE))) || dependent_p)
    {
      tree s;
      tree type;

      cp_parser_parse_tentatively (parser);

      s = (tree) 
# 7854 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 7854 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
      cp_parser_pseudo_destructor_name (parser, postfix_expression,
     &s, &type);
      if (dependent_p
   && (cp_parser_error_occurred (parser)
       || !((((enum tree_code) (type)->base.code) == OFFSET_TYPE) || ((enum tree_code) (type)->base.code) == ENUMERAL_TYPE || ((((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((enum tree_code) (type)->base.code) == REAL_TYPE || ((enum tree_code) (type)->base.code) == COMPLEX_TYPE) || (((enum tree_code) (type)->base.code) == POINTER_TYPE) || (((enum tree_code) (type)->base.code) == RECORD_TYPE && (((tree_class_check (((tree_check ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7859, __FUNCTION__, (RECORD_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 7859, __FUNCTION__))->type_common.lang_flag_2))) || (((enum tree_code) (type)->base.code) == NULLPTR_TYPE))))
 cp_parser_abort_tentative_parse (parser);
      else if (cp_parser_parse_definitely (parser))
 {
   pseudo_destructor_p = true;
   postfix_expression
     = finish_pseudo_destructor_expr (postfix_expression,
          s, type, location);
 }
    }

  if (!pseudo_destructor_p)
    {



      bool template_p;
      cp_token *token = cp_lexer_peek_token (parser->lexer);

      name = (cp_parser_id_expression
       (parser,
        cp_parser_optional_template_keyword (parser),
                               true,
        &template_p,
                         false,
                       false));
# 7897 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (parser->scope)
 *idk = CP_ID_KIND_QUALIFIED;



      if (((enum tree_code) (name)->base.code) == TYPE_DECL)
 {
   error_at (token->location, "invalid use of %qD", name);
   postfix_expression = global_trees[TI_ERROR_MARK];
 }
      else
 {
   if (name != global_trees[TI_ERROR_MARK] && !(((enum tree_code) (name)->base.code) == BASELINK) && parser->scope)
     {
       if (((enum tree_code) (parser->scope)->base.code) == NAMESPACE_DECL)
  {
    error_at (token->location, "%<%D::%D%> is not a class member",
       parser->scope, name);
    postfix_expression = global_trees[TI_ERROR_MARK];
  }
       else
  name = build_qualified_name ( (tree) 
# 7918 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 7918 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                ,
          parser->scope,
          name,
          template_p);
       parser->scope = (tree) 
# 7922 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 7922 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
       parser->qualifying_scope = (tree) 
# 7923 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 7923 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          ;
       parser->object_scope = (tree) 
# 7924 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 7924 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
     }
   if (parser->scope && name && (((enum tree_code) (name)->base.code) == BASELINK))
     adjust_result_of_qualified_name_lookup
       (name, parser->scope, scope);
   postfix_expression
     = finish_class_member_access_expr (postfix_expression, name,
            template_p,
            tf_warning_or_error);





   location_t combined_loc
     = make_location (input_location, start_loc, parser->lexer);
   protected_set_expr_location (postfix_expression, combined_loc);
 }
    }



  parser->context->object_type = (tree) 
# 7946 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 7946 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;



  if (!for_offsetof
      && (cp_parser_non_integral_constant_expression
   (parser, token_type == CPP_DEREF ? NIC_ARROW : NIC_POINT)))
    postfix_expression = global_trees[TI_ERROR_MARK];

  return postfix_expression;
}
# 7991 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static vec<tree, va_gc> *
cp_parser_parenthesized_expression_list (cp_parser* parser,
      int is_attribute_list,
      bool cast_p,
                                         bool allow_expansion_p,
      bool *non_constant_p,
      location_t *close_paren_loc,
      bool wrap_locations_p)
{
  vec<tree, va_gc> *expression_list;
  bool fold_expr_p = is_attribute_list != non_attr;
  tree identifier = (tree) 
# 8002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 8002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  bool saved_greater_than_is_operator_p;


  if (non_constant_p)
    *non_constant_p = false;

  matching_parens parens;
  if (!parens.require_open (parser))
    return 
# 8011 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 8011 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              ;

  expression_list = make_tree_vector ();



  saved_greater_than_is_operator_p
    = parser->greater_than_is_operator_p;
  parser->greater_than_is_operator_p = true;

  cp_expr expr ((tree) 
# 8021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 8021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        );


  if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN))
    while (true)
      {


 if (is_attribute_list == id_attr
     && cp_lexer_peek_token (parser->lexer)->type == CPP_NAME)
   {
     cp_token *token;


     token = cp_lexer_consume_token (parser->lexer);

     identifier = token->u.value;
   }
 else
   {
     bool expr_non_constant_p;


     if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
       {

  cp_lexer_set_source_position (parser->lexer);
  maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
  expr = cp_parser_braced_list (parser, &expr_non_constant_p);
  if (non_constant_p && expr_non_constant_p)
    *non_constant_p = true;
       }
     else if (non_constant_p)
       {
  expr = (cp_parser_constant_expression
   (parser, true,
    &expr_non_constant_p));
  if (expr_non_constant_p)
    *non_constant_p = true;
       }
     else
       expr = cp_parser_assignment_expression (parser, 
# 8062 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                               __null
# 8062 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                   ,
            cast_p);

     if (fold_expr_p)
       expr = instantiate_non_dependent_expr (expr);



            if (allow_expansion_p
                && cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
              {

                cp_lexer_consume_token (parser->lexer);


                expr = make_pack_expansion (expr);
              }

     if (wrap_locations_p)
       expr.maybe_add_location_wrapper ();





     vec_safe_push (expression_list, expr.get_value ());

     if (expr == global_trees[TI_ERROR_MARK])
       goto skip_comma;
   }



 is_attribute_list = non_attr;

      get_comma:;

 if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
   break;


 cp_lexer_consume_token (parser->lexer);
      }

  if (close_paren_loc)
    *close_paren_loc = cp_lexer_peek_token (parser->lexer)->location;

  if (!parens.require_close (parser))
    {
      int ending;

    skip_comma:;


      ending = cp_parser_skip_to_closing_parenthesis (parser,
                           true,
                         true,
                              true);
      if (ending < 0)
 goto get_comma;
      if (!ending)
 {
   parser->greater_than_is_operator_p
     = saved_greater_than_is_operator_p;
   return 
# 8126 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 8126 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             ;
 }
    }

  parser->greater_than_is_operator_p
    = saved_greater_than_is_operator_p;

  if (identifier)
    vec_safe_insert (expression_list, 0, identifier);

  return expression_list;
}
# 8151 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_pseudo_destructor_name (cp_parser* parser,
      tree object,
      tree* scope,
      tree* type)
{
  bool nested_name_specifier_p;


  if (cp_lexer_next_token_is (parser->lexer, CPP_COMPL)
      && cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_AUTO)
      && !type_dependent_expression_p (object))
    {
      if (cxx_dialect < cxx14)
 pedwarn (input_location, 0,
   "%<~auto%> only available with "
   "%<-std=c++14%> or %<-std=gnu++14%>");
      cp_lexer_consume_token (parser->lexer);
      cp_lexer_consume_token (parser->lexer);
      *scope = (tree) 
# 8170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 8170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
      *type = ((contains_struct_check ((object), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8171, __FUNCTION__))->typed.type);
      return;
    }


  *type = global_trees[TI_ERROR_MARK];


  cp_parser_global_scope_opt (parser, true);

  nested_name_specifier_p
    = (cp_parser_nested_name_specifier_opt (parser,
                                false,
                                true,
                    false,
                            false)
       != (tree) 
# 8187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 8187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );


  if (nested_name_specifier_p
      && cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
    {

      cp_lexer_consume_token (parser->lexer);

      cp_parser_template_id (parser,
                               true,
                               false,
        class_type,
                           true);

      cp_parser_require (parser, CPP_SCOPE, RT_SCOPE);
    }


  else if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMPL))
    {






      if (cp_lexer_peek_token (parser->lexer)->type != CPP_NAME
   || cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SCOPE
   || cp_lexer_peek_nth_token (parser->lexer, 3)->type != CPP_COMPL)
 {
   cp_parser_error (parser, "non-scalar type");
   return;
 }


      *scope = ((contains_struct_check ((cp_parser_nonclass_name (parser)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8223, __FUNCTION__))->typed.type);
      if (*scope == global_trees[TI_ERROR_MARK])
 return;


      cp_parser_require (parser, CPP_SCOPE, RT_SCOPE);
    }
  else
    *scope = (tree) 
# 8231 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 8231 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;


  cp_parser_require (parser, CPP_COMPL, RT_COMPL);


  if (!scope_chain->x_processing_template_decl && !cp_parser_error_occurred (parser))
    cp_parser_commit_to_topmost_tentative_parse (parser);



  *type = ((contains_struct_check ((cp_parser_nonclass_name (parser)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8242, __FUNCTION__))->typed.type);
}
# 8279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_unary_expression (cp_parser *parser, cp_id_kind * pidk,
       bool address_p, bool cast_p, bool decltype_p)
{
  cp_token *token;
  enum tree_code unary_operator;


  token = cp_lexer_peek_token (parser->lexer);

  if (token->type == CPP_KEYWORD)
    {
      enum rid keyword = token->keyword;

      switch (keyword)
 {
 case RID_ALIGNOF:
 case RID_SIZEOF:
   {
     tree operand, ret;
     enum tree_code op;
     location_t start_loc = token->location;

     op = keyword == RID_ALIGNOF ? ALIGNOF_EXPR : SIZEOF_EXPR;
     bool std_alignof = id_equal (token->u.value, "alignof");


     cp_lexer_consume_token (parser->lexer);

     operand = cp_parser_sizeof_operand (parser, keyword);






     location_t compound_loc
       = make_location (start_loc, start_loc, parser->lexer);

     if ((tree_code_type[(int) (((enum tree_code) (operand)->base.code))] == tcc_type))
       ret = cxx_sizeof_or_alignof_type (compound_loc, operand, op,
      std_alignof, true);
     else
       {



  if (std_alignof)
    pedwarn (token->location, OPT_Wpedantic,
      "ISO C++ does not allow %<alignof%> "
      "with a non-type");

  ret = cxx_sizeof_or_alignof_expr (compound_loc,
        operand, op, true);
       }


     if (op == SIZEOF_EXPR && ret != global_trees[TI_ERROR_MARK])
       {
  if (((enum tree_code) (ret)->base.code) != SIZEOF_EXPR || (tree_code_type[(int) (((enum tree_code) (operand)->base.code))] == tcc_type))
    {
      if (!scope_chain->x_processing_template_decl && (tree_code_type[(int) (((enum tree_code) (operand)->base.code))] == tcc_type))
        {
   ret = build_min (SIZEOF_EXPR, global_trees[TI_SIZE_TYPE],
      build1 (NOP_EXPR, operand,
       global_trees[TI_ERROR_MARK]));
   ((tree_not_check2 (((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8345, __FUNCTION__, (SIZEOF_EXPR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8345, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0) = 1;
        }
      else
        ret = build_min (SIZEOF_EXPR, global_trees[TI_SIZE_TYPE], operand);
      ((non_type_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8349, __FUNCTION__))->base.side_effects_flag) = 0;
      ((non_type_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8350, __FUNCTION__))->base.readonly_flag) = 1;
      (expr_check (((ret)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8351, __FUNCTION__))->exp.locus = (compound_loc);
    }
       }

     cp_expr ret_expr (ret, compound_loc);
     ret_expr = ret_expr.maybe_add_location_wrapper ();
     return ret_expr;
   }

 case RID_BUILTIN_HAS_ATTRIBUTE:
   return cp_parser_has_attribute_expression (parser);

 case RID_NEW:
   return cp_parser_new_expression (parser);

 case RID_DELETE:
   return cp_parser_delete_expression (parser);

 case RID_EXTENSION:
   {

     int saved_pedantic;
     tree expr;


     cp_parser_extension_opt (parser, &saved_pedantic);

     expr = cp_parser_simple_cast_expression (parser);

     global_options.x_pedantic = saved_pedantic;

     return expr;
   }

 case RID_REALPART:
 case RID_IMAGPART:
   {
     tree expression;


     cp_lexer_consume_token (parser->lexer);

     expression = cp_parser_simple_cast_expression (parser);

     return build_x_unary_op (token->location,
         (keyword == RID_REALPART
          ? REALPART_EXPR : IMAGPART_EXPR),
         expression,
                                     tf_warning_or_error);
   }
   break;

 case RID_TRANSACTION_ATOMIC:
 case RID_TRANSACTION_RELAXED:
   return cp_parser_transaction_expression (parser, keyword);

 case RID_NOEXCEPT:
   {
     tree expr;
     const char *saved_message;
     bool saved_integral_constant_expression_p;
     bool saved_non_integral_constant_expression_p;
     bool saved_greater_than_is_operator_p;

     location_t start_loc = token->location;

     cp_lexer_consume_token (parser->lexer);
     matching_parens parens;
     parens.require_open (parser);

     saved_message = parser->type_definition_forbidden_message;
     parser->type_definition_forbidden_message
       = "types may not be defined in %<noexcept%> expressions";

     saved_integral_constant_expression_p
       = parser->integral_constant_expression_p;
     saved_non_integral_constant_expression_p
       = parser->non_integral_constant_expression_p;
     parser->integral_constant_expression_p = false;

     saved_greater_than_is_operator_p
       = parser->greater_than_is_operator_p;
     parser->greater_than_is_operator_p = true;

     ++cp_unevaluated_operand;
     ++c_inhibit_evaluation_warnings;
     ++scope_chain->noexcept_operand;
     expr = cp_parser_expression (parser);
     --scope_chain->noexcept_operand;
     --c_inhibit_evaluation_warnings;
     --cp_unevaluated_operand;

     parser->greater_than_is_operator_p
       = saved_greater_than_is_operator_p;

     parser->integral_constant_expression_p
       = saved_integral_constant_expression_p;
     parser->non_integral_constant_expression_p
       = saved_non_integral_constant_expression_p;

     parser->type_definition_forbidden_message = saved_message;

     parens.require_close (parser);





     location_t noexcept_loc
       = make_location (start_loc, start_loc, parser->lexer);

     return cp_expr (finish_noexcept_expr (expr, tf_warning_or_error),
       noexcept_loc);
   }

 case RID_CO_AWAIT:
   {
     tree expr;
     location_t kw_loc = token->location;


     cp_lexer_consume_token (parser->lexer);

     expr = cp_parser_simple_cast_expression (parser);
     if (expr == global_trees[TI_ERROR_MARK])
       return global_trees[TI_ERROR_MARK];


     return cp_expr (finish_co_await_expr (kw_loc, expr));
   }

 default:
   break;
 }
    }





  if (cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))
    {
      enum rid keyword;



      keyword = cp_lexer_peek_nth_token (parser->lexer, 2)->keyword;

      if (keyword == RID_NEW)
 return cp_parser_new_expression (parser);

      else if (keyword == RID_DELETE)
 return cp_parser_delete_expression (parser);
    }


  unary_operator = cp_parser_unary_operator (token);


  if (unary_operator == ERROR_MARK)
    {
      if (token->type == CPP_PLUS_PLUS)
 unary_operator = PREINCREMENT_EXPR;
      else if (token->type == CPP_MINUS_MINUS)
 unary_operator = PREDECREMENT_EXPR;

      else if (cp_parser_allow_gnu_extensions_p (parser)
        && token->type == CPP_AND_AND)
 {
   tree identifier;
   tree expression;
   location_t start_loc = token->location;


   cp_lexer_consume_token (parser->lexer);

   identifier = cp_parser_identifier (parser);




   location_t combined_loc
     = make_location (start_loc, start_loc, parser->lexer);

   expression = finish_label_address_expr (identifier, combined_loc);
   if (cp_parser_non_integral_constant_expression (parser,
         NIC_ADDR_LABEL))
     expression = global_trees[TI_ERROR_MARK];
   return expression;
 }
    }
  if (unary_operator != ERROR_MARK)
    {
      cp_expr cast_expression;
      cp_expr expression = global_trees[TI_ERROR_MARK];
      non_integral_constant non_constant_p = NIC_NONE;
      location_t loc = token->location;
      tsubst_flags_t complain = complain_flags (decltype_p);


      token = cp_lexer_consume_token (parser->lexer);
      enum cpp_ttype op_ttype = cp_lexer_peek_token (parser->lexer)->type;


      cast_expression
 = cp_parser_cast_expression (parser,
         unary_operator == ADDR_EXPR,
                    false,
                     false,
         pidk);






      loc = make_location (loc, loc, cast_expression.get_finish ());


      switch (unary_operator)
 {
 case INDIRECT_REF:
   non_constant_p = NIC_STAR;
   expression = build_x_indirect_ref (loc, cast_expression,
          RO_UNARY_STAR,
                                             complain);


          expression.set_location (loc);
   break;

 case ADDR_EXPR:
    non_constant_p = NIC_ADDR;

 case BIT_NOT_EXPR:
   expression = build_x_unary_op (loc, unary_operator,
      cast_expression,
                                         complain);


          expression.set_location (loc);
   break;

 case PREINCREMENT_EXPR:
 case PREDECREMENT_EXPR:
   non_constant_p = unary_operator == PREINCREMENT_EXPR
      ? NIC_PREINCREMENT : NIC_PREDECREMENT;

 case NEGATE_EXPR:


   if (unary_operator == NEGATE_EXPR && op_ttype == CPP_NUMBER)
     {
       tree stripped_expr
  = tree_strip_any_location_wrapper (cast_expression);
       if ((tree_code_type[(int) (((enum tree_code) (stripped_expr)->base.code))] == tcc_constant)
    && !integer_zerop (stripped_expr)
    && !((tree_class_check ((stripped_expr), (tcc_constant), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8608, __FUNCTION__))->base.public_flag))
  {
    tree folded = fold_build1_loc (((location_t) 0), unary_operator, ((contains_struct_check ((stripped_expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8611, __FUNCTION__))->typed.type), stripped_expr )

                        ;
    if ((tree_code_type[(int) (((enum tree_code) (folded)->base.code))] == tcc_constant) && !((tree_class_check ((folded), (tcc_constant), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8613, __FUNCTION__))->base.public_flag))
      {
        expression = maybe_wrap_with_location (folded, loc);
        break;
      }
  }
     }

 case UNARY_PLUS_EXPR:
 case TRUTH_NOT_EXPR:
   expression = finish_unary_op_expr (loc, unary_operator,
          cast_expression, complain);
   break;

 default:
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8628, __FUNCTION__));
 }

      if (non_constant_p != NIC_NONE
   && cp_parser_non_integral_constant_expression (parser,
        non_constant_p))
 expression = global_trees[TI_ERROR_MARK];

      return expression;
    }

  return cp_parser_postfix_expression (parser, address_p, cast_p,
                                                                false,
           decltype_p,
           pidk);
}




static enum tree_code
cp_parser_unary_operator (cp_token* token)
{
  switch (token->type)
    {
    case CPP_MULT:
      return INDIRECT_REF;

    case CPP_AND:
      return ADDR_EXPR;

    case CPP_PLUS:
      return UNARY_PLUS_EXPR;

    case CPP_MINUS:
      return NEGATE_EXPR;

    case CPP_NOT:
      return TRUTH_NOT_EXPR;

    case CPP_COMPL:
      return BIT_NOT_EXPR;

    default:
      return ERROR_MARK;
    }
}




static tree
cp_parser_has_attribute_expression (cp_parser *parser)
{
  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;


  cp_lexer_consume_token (parser->lexer);

  matching_parens parens;
  if (!parens.require_open (parser))
    return global_trees[TI_ERROR_MARK];



  const char *saved_message = parser->type_definition_forbidden_message;
  const char *saved_message_arg
    = parser->type_definition_forbidden_message_arg;
  parser->type_definition_forbidden_message
    = "types may not be defined in %qs expressions";
  parser->type_definition_forbidden_message_arg
    = ((const char *) (tree_check ((ridpointers[RID_BUILTIN_HAS_ATTRIBUTE]), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8699, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);



  bool saved_integral_constant_expression_p
    = parser->integral_constant_expression_p;
  bool saved_non_integral_constant_expression_p
    = parser->non_integral_constant_expression_p;
  parser->integral_constant_expression_p = false;


  ++cp_unevaluated_operand;
  ++c_inhibit_evaluation_warnings;

  tree oper = (tree) 
# 8713 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 8713 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;



  cp_parser_parse_tentatively (parser);

  bool saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;
  parser->in_type_id_in_expr_p = true;

  oper = cp_parser_type_id (parser);
  parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;

  cp_parser_parse_definitely (parser);



  if (!oper || oper == global_trees[TI_ERROR_MARK])
    oper = cp_parser_assignment_expression (parser);

  (oper) = tree_strip_any_location_wrapper ((const_cast<union tree_node *> (((oper)))));


  --cp_unevaluated_operand;
  --c_inhibit_evaluation_warnings;


  parser->type_definition_forbidden_message = saved_message;
  parser->type_definition_forbidden_message_arg = saved_message_arg;
  parser->integral_constant_expression_p
    = saved_integral_constant_expression_p;
  parser->non_integral_constant_expression_p
    = saved_non_integral_constant_expression_p;


  if (!cp_parser_require (parser, CPP_COMMA, RT_COMMA))
    {
      cp_parser_skip_to_closing_parenthesis (parser, false, false,
                            true);
      return global_trees[TI_ERROR_MARK];
    }


  bool ret = false;
  location_t atloc = cp_lexer_peek_token (parser->lexer)->location;
  if (tree attr = cp_parser_gnu_attribute_list (parser, true))
    {
      if (oper == global_trees[TI_ERROR_MARK])
                ;
      else if (type_dependent_expression_p (oper))
 sorry_at (atloc, "%<__builtin_has_attribute%> with dependent argument "
    "not supported yet");
      else
 {

   cp_check_const_attributes (attr);


   ret = has_attribute (atloc, oper, attr, default_conversion);
 }

      parens.require_close (parser);
    }
  else
    {
      error_at (atloc, "expected identifier");
      cp_parser_skip_to_closing_parenthesis (parser, true, false, true);
    }






  location_t compound_loc
    = make_location (start_loc, start_loc, parser->lexer);

  cp_expr ret_expr (ret ? global_trees[TI_BOOLEAN_TRUE] : global_trees[TI_BOOLEAN_FALSE]);
  ret_expr.set_location (compound_loc);
  ret_expr = ret_expr.maybe_add_location_wrapper ();
  return ret_expr;
}
# 8803 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_new_expression (cp_parser* parser)
{
  bool global_scope_p;
  vec<tree, va_gc> *placement;
  tree type;
  vec<tree, va_gc> *initializer;
  tree nelts = (tree) 
# 8810 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 8810 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  tree ret;

  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;


  global_scope_p
    = (cp_parser_global_scope_opt (parser,
                                 false)
       != (tree) 
# 8819 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 8819 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );

  cp_parser_require_keyword (parser, RID_NEW, RT_NEW);


  cp_parser_parse_tentatively (parser);

  placement = cp_parser_new_placement (parser);

  if (!cp_parser_parse_definitely (parser))
    {
      if (placement != 
# 8830 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 8830 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          )
 release_tree_vector (placement);
      placement = 
# 8832 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 8832 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }



  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      cp_token *token;
      const char *saved_message = parser->type_definition_forbidden_message;


      matching_parens parens;
      parens.consume_open (parser);


      parser->type_definition_forbidden_message
 = "types may not be defined in a new-expression";
      {
 type_id_in_expr_sentinel s (parser);
 type = cp_parser_type_id (parser);
      }
      parser->type_definition_forbidden_message = saved_message;


      parens.require_close (parser);
      token = cp_lexer_peek_token (parser->lexer);



      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))
 {
   error_at (token->location,
      "array bound forbidden after parenthesized type-id");
   inform (token->location,
    "try removing the parentheses around the type-id");
   cp_parser_direct_new_declarator (parser);
 }
    }

  else
    type = cp_parser_new_type_id (parser, &nelts);


  cp_token *token = cp_lexer_peek_token (parser->lexer);
  if (token->type == CPP_OPEN_PAREN
      || token->type == CPP_OPEN_BRACE)
    initializer = cp_parser_new_initializer (parser);
  else
    initializer = 
# 8880 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 8880 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;



  if (cp_parser_non_integral_constant_expression (parser, NIC_NEW))
    ret = global_trees[TI_ERROR_MARK];





  else if ((ret = type_uses_auto (type))
    && !(((contains_struct_check ((((tree_class_check (((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8892, __FUNCTION__, (TEMPLATE_TYPE_PARM)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8892, __FUNCTION__))->type_common.name)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8892, __FUNCTION__))->decl_common.initial))
    && (vec_safe_length (initializer) != 1
        || ((((enum tree_code) ((*initializer)[0])->base.code) == CONSTRUCTOR && ((contains_struct_check (((*initializer)[0]), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8894, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE])
     && (vec_safe_length (((tree_check (((*initializer)[0]), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 8895, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))) != 1)))
    {
      error_at (token->location,
  "initialization of new-expression for type %<auto%> "
  "requires exactly one element");
      ret = global_trees[TI_ERROR_MARK];
    }
  else
    {





      location_t combined_loc = make_location (start_loc, start_loc,
            parser->lexer);

      ret = build_new (combined_loc, &placement, type, nelts, &initializer,
         global_scope_p, tf_warning_or_error);
    }

  if (placement != 
# 8916 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 8916 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
    release_tree_vector (placement);
  if (initializer != 
# 8918 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 8918 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        )
    release_tree_vector (initializer);

  return ret;
}
# 8931 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static vec<tree, va_gc> *
cp_parser_new_placement (cp_parser* parser)
{
  vec<tree, va_gc> *expression_list;


  expression_list = (cp_parser_parenthesized_expression_list
       (parser, non_attr, false,
                              true,
                           
# 8940 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 8940 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ));

  if (expression_list && expression_list->is_empty ())
    error ("expected expression-list or type-id");

  return expression_list;
}
# 8957 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_new_type_id (cp_parser* parser, tree *nelts)
{
  cp_decl_specifier_seq type_specifier_seq;
  cp_declarator *new_declarator;
  cp_declarator *declarator;
  cp_declarator *outer_declarator;
  const char *saved_message;





  saved_message = parser->type_definition_forbidden_message;
  parser->type_definition_forbidden_message
    = "types may not be defined in a new-type-id";

  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
                       false,
                           false,
    &type_specifier_seq);

  parser->type_definition_forbidden_message = saved_message;

  if (type_specifier_seq.type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];


  new_declarator = cp_parser_new_declarator_opt (parser);



  *nelts = (tree) 
# 8989 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 8989 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  declarator = new_declarator;
  outer_declarator = 
# 8992 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 8992 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  while (declarator && (declarator->kind == cdk_pointer
   || declarator->kind == cdk_ptrmem))
    {
      outer_declarator = declarator;
      declarator = declarator->declarator;
    }
  while (declarator
  && declarator->kind == cdk_array
  && declarator->declarator
  && declarator->declarator->kind == cdk_array)
    {
      outer_declarator = declarator;
      declarator = declarator->declarator;
    }

  if (declarator && declarator->kind == cdk_array)
    {
      *nelts = declarator->u.array.bounds;
      if (*nelts == global_trees[TI_ERROR_MARK])
 *nelts = global_trees[TI_INTEGER_ONE];

      if (outer_declarator)
 outer_declarator->declarator = declarator->declarator;
      else
 new_declarator = 
# 9017 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 9017 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  return groktypename (&type_specifier_seq, new_declarator, false);
}
# 9031 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_declarator *
cp_parser_new_declarator_opt (cp_parser* parser)
{
  enum tree_code code;
  tree type, std_attributes = (tree) 
# 9035 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 9035 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
  cp_cv_quals cv_quals;


  cp_parser_parse_tentatively (parser);

  code = cp_parser_ptr_operator (parser, &type, &cv_quals, &std_attributes);

  if (cp_parser_parse_definitely (parser))
    {
      cp_declarator *declarator;


      declarator = cp_parser_new_declarator_opt (parser);

      declarator = cp_parser_make_indirect_declarator
 (code, type, cv_quals, declarator, std_attributes);

      return declarator;
    }


  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))
    return cp_parser_direct_new_declarator (parser);

  return 
# 9060 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 9060 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
            ;
}
# 9071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_declarator *
cp_parser_direct_new_declarator (cp_parser* parser)
{
  cp_declarator *declarator = 
# 9074 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 9074 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;

  while (true)
    {
      tree expression;
      cp_token *token;


      cp_parser_require (parser, CPP_OPEN_SQUARE, RT_OPEN_SQUARE);

      token = cp_lexer_peek_token (parser->lexer);
      expression = cp_parser_expression (parser);






      if (!scope_chain->x_processing_template_decl)
 {
   expression
     = build_expr_type_conversion (1 | 4,
       expression,
                    true);
   if (!expression)
     {
       error_at (token->location,
   "expression in new-declarator must have integral "
   "or enumeration type");
       expression = global_trees[TI_ERROR_MARK];
     }
 }


      cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);


      declarator = make_array_declarator (declarator, expression);



      if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_SQUARE))
 break;
    }

  return declarator;
}
# 9130 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static vec<tree, va_gc> *
cp_parser_new_initializer (cp_parser* parser)
{
  vec<tree, va_gc> *expression_list;

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      tree t;
      bool expr_non_constant_p;
      cp_lexer_set_source_position (parser->lexer);
      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
      t = cp_parser_braced_list (parser, &expr_non_constant_p);
      (((tree_not_check2 (((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9142, __FUNCTION__, (CONSTRUCTOR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9142, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)) = 1;
      expression_list = make_tree_vector_single (t);
    }
  else
    expression_list = (cp_parser_parenthesized_expression_list
         (parser, non_attr, false,
                         true,
                      
# 9149 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 9149 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ));

  return expression_list;
}
# 9162 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_delete_expression (cp_parser* parser)
{
  bool global_scope_p;
  bool array_p;
  tree expression;
  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;


  global_scope_p
    = (cp_parser_global_scope_opt (parser,
                                 false)
       != (tree) 
# 9174 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 9174 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );

  cp_parser_require_keyword (parser, RID_DELETE, RT_DELETE);

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))
    {

      cp_lexer_consume_token (parser->lexer);

      cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);

      array_p = true;
    }
  else
    array_p = false;


  expression = cp_parser_simple_cast_expression (parser);



  if (cp_parser_non_integral_constant_expression (parser, NIC_DEL))
    return global_trees[TI_ERROR_MARK];






  location_t combined_loc = make_location (start_loc, start_loc,
        parser->lexer);
  expression = delete_sanity (combined_loc, expression, (tree) 
# 9205 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 9205 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                , array_p,
         global_scope_p, tf_warning_or_error);

  return expression;
}





static int
cp_parser_tokens_start_cast_expression (cp_parser *parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  switch (token->type)
    {
    case CPP_COMMA:
    case CPP_SEMICOLON:
    case CPP_QUERY:
    case CPP_COLON:
    case CPP_CLOSE_SQUARE:
    case CPP_CLOSE_PAREN:
    case CPP_CLOSE_BRACE:
    case CPP_OPEN_BRACE:
    case CPP_DOT:
    case CPP_DOT_STAR:
    case CPP_DEREF:
    case CPP_DEREF_STAR:
    case CPP_DIV:
    case CPP_MOD:
    case CPP_LSHIFT:
    case CPP_RSHIFT:
    case CPP_LESS:
    case CPP_GREATER:
    case CPP_LESS_EQ:
    case CPP_GREATER_EQ:
    case CPP_EQ_EQ:
    case CPP_NOT_EQ:
    case CPP_EQ:
    case CPP_MULT_EQ:
    case CPP_DIV_EQ:
    case CPP_MOD_EQ:
    case CPP_PLUS_EQ:
    case CPP_MINUS_EQ:
    case CPP_RSHIFT_EQ:
    case CPP_LSHIFT_EQ:
    case CPP_AND_EQ:
    case CPP_XOR_EQ:
    case CPP_OR_EQ:
    case CPP_XOR:
    case CPP_OR:
    case CPP_OR_OR:
    case CPP_EOF:
    case CPP_ELLIPSIS:
      return 0;

    case CPP_OPEN_PAREN:


      return cp_lexer_peek_nth_token (parser->lexer, 2)->type
      != CPP_CLOSE_PAREN;

    case CPP_OPEN_SQUARE:


      if (cxx_dialect >= cxx11)
 return -1;
      return ((c_language & clk_objc) != 0);

    case CPP_PLUS_PLUS:
    case CPP_MINUS_MINUS:
# 9285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      return -1;

    default:
      return 1;
    }
}
# 9299 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static const char *
get_cast_suggestion (tree dst_type, tree orig_expr)
{
  tree trial;






  if (scope_chain->x_processing_template_decl)
    return 
# 9310 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 9310 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              ;


  trial = build_const_cast (input_location, dst_type, orig_expr, tf_none);
  if (trial != global_trees[TI_ERROR_MARK])
    return "const_cast";


  trial = build_static_cast (input_location, dst_type, orig_expr, tf_none);
  if (trial != global_trees[TI_ERROR_MARK])
    return "static_cast";


  trial = build_reinterpret_cast (input_location, dst_type, orig_expr,
      tf_none);
  if (trial != global_trees[TI_ERROR_MARK])
    return "reinterpret_cast";


  return 
# 9329 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 9329 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
            ;
}
# 9343 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
maybe_add_cast_fixit (rich_location *rich_loc, location_t open_paren_loc,
        location_t close_paren_loc, tree orig_expr,
        tree dst_type)
{


  if (!global_options.x_warn_old_style_cast)
    return;



  const char *cast_suggestion = get_cast_suggestion (dst_type, orig_expr);
  if (!cast_suggestion)
    return;


  pretty_printer pp;
  pp_printf (&pp, "%s<", cast_suggestion);
  rich_loc->add_fixit_replace (open_paren_loc, pp_formatted_text (&pp));


  rich_loc->add_fixit_replace (close_paren_loc, "> (");


  rich_loc->add_fixit_insert_after (")");
}
# 9384 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_cast_expression (cp_parser *parser, bool address_p, bool cast_p,
      bool decltype_p, cp_id_kind * pidk)
{

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      tree type = (tree) 
# 9391 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 9391 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
      cp_expr expr ((tree) 
# 9392 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 9392 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            );
      int cast_expression = 0;
      const char *saved_message;




      cp_parser_parse_tentatively (parser);

      saved_message = parser->type_definition_forbidden_message;
      parser->type_definition_forbidden_message
 = "types may not be defined in casts";

      matching_parens parens;
      cp_token *open_paren = parens.consume_open (parser);
      location_t open_paren_loc = open_paren->location;
      location_t close_paren_loc = ((location_t) 0);
# 9450 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      cp_lexer_save_tokens (parser->lexer);


      if (cp_parser_skip_to_closing_parenthesis (parser, false, false,
                         true))
 cast_expression
   = cp_parser_tokens_start_cast_expression (parser);


      cp_lexer_rollback_tokens (parser->lexer);


      if (!cast_expression)
 cp_parser_simulate_error (parser);
      else
 {
   bool saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;
   parser->in_type_id_in_expr_p = true;

   type = cp_parser_type_id (parser);

   cp_token *close_paren = parens.require_close (parser);
   if (close_paren)
     close_paren_loc = close_paren->location;
   parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;
 }


      parser->type_definition_forbidden_message = saved_message;




      if (!cp_parser_error_occurred (parser))
 {


   if (cast_expression > 0)
     cp_parser_commit_to_topmost_tentative_parse (parser);

   expr = cp_parser_cast_expression (parser,
                       false,
                    true,
                        false,
         pidk);

   if (cp_parser_parse_definitely (parser))
     {

       if (global_options.x_warn_old_style_cast
    && !in_system_header_at (input_location)
    && !(((enum tree_code) (type)->base.code) == VOID_TYPE)
    && scope_chain->lang_name != cp_global_trees[CPTI_LANG_NAME_C])
  {
    gcc_rich_location rich_loc (input_location);
    maybe_add_cast_fixit (&rich_loc, open_paren_loc, close_paren_loc,
     expr, type);
    warning_at (&rich_loc, OPT_Wold_style_cast,
         "use of old-style cast to %q#T", type);
  }



       if (!cast_valid_in_integral_constant_expression_p (type)
    && cp_parser_non_integral_constant_expression (parser,
         NIC_CAST))
  return global_trees[TI_ERROR_MARK];







       location_t cast_loc = make_location (open_paren_loc,
         open_paren_loc,
         expr.get_finish ());
       expr = build_c_cast (cast_loc, type, expr);
       return expr;
     }
 }
      else
        cp_parser_abort_tentative_parse (parser);
    }



  return cp_parser_unary_expression (parser, pidk, address_p,
         cast_p, decltype_p);
}
# 9620 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_binary_expression (cp_parser* parser, bool cast_p,
        bool no_toplevel_fold_p,
        bool decltype_p,
        enum cp_parser_prec prec,
        cp_id_kind * pidk)
{
  cp_parser_expression_stack stack;
  cp_parser_expression_stack_entry *sp = &stack[0];
  cp_parser_expression_stack_entry *disable_warnings_sp = 
# 9629 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                         __null
# 9629 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                             ;
  cp_parser_expression_stack_entry current;
  cp_expr rhs;
  cp_token *token;
  enum tree_code rhs_type;
  enum cp_parser_prec new_prec, lookahead_prec;
  tree overload;


  current.lhs_type = (cp_lexer_next_token_is (parser->lexer, CPP_NOT)
        ? TRUTH_NOT_EXPR : ERROR_MARK);
  current.lhs = cp_parser_cast_expression (parser, false,
        cast_p, decltype_p, pidk);
  current.prec = prec;

  if (cp_parser_error_occurred (parser))
    return global_trees[TI_ERROR_MARK];

  for (;;)
    {

      token = cp_lexer_peek_token (parser->lexer);

      if (global_options.x_warn_cxx11_compat
          && token->type == CPP_RSHIFT
          && !parser->greater_than_is_operator_p)
        {
          if (warning_at (token->location, OPT_Wc__11_compat,
     "%<>>%> operator is treated"
     " as two right angle brackets in C++11"))
     inform (token->location,
      "suggest parentheses around %<>>%> expression");
        }

      new_prec = (((token->type == CPP_GREATER || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT)) && !parser->greater_than_is_operator_p) ? PREC_NOT_OPERATOR : binops_by_token[token->type].prec);
      if (new_prec != PREC_NOT_OPERATOR
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_ELLIPSIS))

 new_prec = PREC_NOT_OPERATOR;
# 9676 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (new_prec <= current.prec)
 {
   if (sp == stack)
     break;
   else
     goto pop;
 }

     get_rhs:
      current.tree_type = binops_by_token[token->type].tree_type;
      current.loc = token->location;


      cp_lexer_consume_token (parser->lexer);



      if ((current.tree_type == TRUTH_ANDIF_EXPR
    && cp_fully_fold (current.lhs) == c_global_trees[CTI_TRUTHVALUE_FALSE])
   || (current.tree_type == TRUTH_ORIF_EXPR
       && cp_fully_fold (current.lhs) == c_global_trees[CTI_TRUTHVALUE_TRUE]))
 {
   disable_warnings_sp = sp;
   ++c_inhibit_evaluation_warnings;
 }



      rhs_type = (cp_lexer_next_token_is (parser->lexer, CPP_NOT)
    ? TRUTH_NOT_EXPR : ERROR_MARK);
      rhs = cp_parser_simple_cast_expression (parser);




      token = cp_lexer_peek_token (parser->lexer);
      lookahead_prec = (((token->type == CPP_GREATER || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT)) && !parser->greater_than_is_operator_p) ? PREC_NOT_OPERATOR : binops_by_token[token->type].prec);
      if (lookahead_prec != PREC_NOT_OPERATOR
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_ELLIPSIS))
 lookahead_prec = PREC_NOT_OPERATOR;
      if (lookahead_prec > new_prec)
 {




   *sp = current;
   ++sp;
   current.lhs = rhs;
   current.lhs_type = rhs_type;
   current.prec = new_prec;
   new_prec = lookahead_prec;
   goto get_rhs;

  pop:
   lookahead_prec = new_prec;







   rhs = current.lhs;
   rhs_type = current.lhs_type;
   --sp;
   current = *sp;
 }


      if (sp == disable_warnings_sp)
 {
   disable_warnings_sp = 
# 9748 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 9748 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
   --c_inhibit_evaluation_warnings;
 }

      if (global_options.x_warn_logical_not_paren
   && tree_code_type[(int) (current.tree_type)] == tcc_comparison
   && current.lhs_type == TRUTH_NOT_EXPR

   && (((enum tree_code) (current.lhs)->base.code) != NE_EXPR
       || !integer_zerop ((*((const_cast<tree*> (tree_operand_check ((current.lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9757, __FUNCTION__)))))))
   && (((enum tree_code) (current.lhs)->base.code) != TRUTH_NOT_EXPR
       || (((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((current.lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9759, __FUNCTION__))))))->base.code) != TRUTH_NOT_EXPR

    && (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((current.lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9761, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9761, __FUNCTION__))->typed.type) == (tree) 
# 9761 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                    __null
        
# 9762 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
       || (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((current.lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9762, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9762, __FUNCTION__))->typed.type))->base.code)
     != BOOLEAN_TYPE))))

   && (!(tree_code_type[(int) (((enum tree_code) (tree_strip_any_location_wrapper (current.lhs))->base.code))] == tcc_declaration)
       || ((contains_struct_check ((current.lhs), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9766, __FUNCTION__))->typed.type) == (tree) 
# 9766 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
       
# 9767 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      || ((enum tree_code) (((contains_struct_check ((current.lhs), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9767, __FUNCTION__))->typed.type))->base.code) != BOOLEAN_TYPE))
 warn_logical_not_parentheses (current.loc, current.tree_type,
          current.lhs, maybe_constant_value (rhs));

      overload = 
# 9771 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 9771 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;

      location_t combined_loc = make_location (current.loc,
            current.lhs.get_start (),
            rhs.get_finish ());
# 9784 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (no_toplevel_fold_p
   && lookahead_prec <= current.prec
   && sp == stack)
 {
   if (current.lhs == global_trees[TI_ERROR_MARK] || rhs == global_trees[TI_ERROR_MARK])
     current.lhs = global_trees[TI_ERROR_MARK];
   else
     {
       current.lhs.maybe_add_location_wrapper ();
       rhs.maybe_add_location_wrapper ();
       current.lhs
  = build_min (current.tree_type,
        tree_code_type[(int) (current.tree_type)]
        == tcc_comparison
        ? global_trees[TI_BOOLEAN_TYPE] : ((contains_struct_check ((current.lhs), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9798, __FUNCTION__))->typed.type),
        current.lhs.get_value (), rhs.get_value ());
       (expr_check (((current.lhs)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9800, __FUNCTION__))->exp.locus = (combined_loc);
     }
 }
      else
        {
   op_location_t op_loc (current.loc, combined_loc);
   current.lhs = build_x_binary_op (op_loc, current.tree_type,
                                           current.lhs, current.lhs_type,
                                           rhs, rhs_type, &overload,
                                           complain_flags (decltype_p));

          current.lhs.set_location (combined_loc);
        }
      current.lhs_type = current.tree_type;







      if (overload
   && cp_parser_non_integral_constant_expression (parser,
        NIC_OVERLOADED))
 return global_trees[TI_ERROR_MARK];
    }

  return current.lhs;
}

static cp_expr
cp_parser_binary_expression (cp_parser* parser, bool cast_p,
        bool no_toplevel_fold_p,
        enum cp_parser_prec prec,
        cp_id_kind * pidk)
{
  return cp_parser_binary_expression (parser, cast_p, no_toplevel_fold_p,
                      false, prec, pidk);
}
# 9853 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_question_colon_clause (cp_parser* parser, cp_expr logical_or_expr)
{
  tree expr, folded_logical_or_expr = cp_fully_fold (logical_or_expr);
  cp_expr assignment_expr;
  struct cp_token *token;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;


  cp_lexer_consume_token (parser->lexer);
  token = cp_lexer_peek_token (parser->lexer);
  if (cp_parser_allow_gnu_extensions_p (parser)
      && token->type == CPP_COLON)
    {
      pedwarn (token->location, OPT_Wpedantic,
        "ISO C++ does not allow %<?:%> with omitted middle operand");

      expr = (tree) 
# 9870 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 9870 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
      c_inhibit_evaluation_warnings +=
 folded_logical_or_expr == c_global_trees[CTI_TRUTHVALUE_TRUE];
      warn_for_omitted_condop (token->location, logical_or_expr);
    }
  else
    {
      bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;
      parser->colon_corrects_to_scope_p = false;

      c_inhibit_evaluation_warnings +=
 folded_logical_or_expr == c_global_trees[CTI_TRUTHVALUE_FALSE];
      expr = cp_parser_expression (parser);
      c_inhibit_evaluation_warnings +=
 ((folded_logical_or_expr == c_global_trees[CTI_TRUTHVALUE_TRUE])
  - (folded_logical_or_expr == c_global_trees[CTI_TRUTHVALUE_FALSE]));
      parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
    }


  cp_parser_require (parser, CPP_COLON, RT_COLON);

  assignment_expr = cp_parser_assignment_expression (parser);
  c_inhibit_evaluation_warnings -=
    folded_logical_or_expr == c_global_trees[CTI_TRUTHVALUE_TRUE];






  loc = make_location (loc,
         logical_or_expr.get_start (),
         assignment_expr.get_finish ());


  return build_x_conditional_expr (loc, logical_or_expr,
       expr,
       assignment_expr,
                                   tf_warning_or_error);
}
# 9925 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_assignment_expression (cp_parser* parser, cp_id_kind * pidk,
     bool cast_p, bool decltype_p)
{
  cp_expr expr;



  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_THROW))
    expr = cp_parser_throw_expression (parser);


  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_CO_YIELD))
    expr = cp_parser_yield_expression (parser);


  else
    {

      expr = cp_parser_binary_expression (parser, cast_p, false,
       decltype_p,
       PREC_NOT_OPERATOR, pidk);


      if (cp_lexer_next_token_is (parser->lexer, CPP_QUERY))
 return cp_parser_question_colon_clause (parser, expr);
      else
 {
   location_t loc = cp_lexer_peek_token (parser->lexer)->location;



   enum tree_code assignment_operator
     = cp_parser_assignment_operator_opt (parser);
   if (assignment_operator != ERROR_MARK)
     {
       bool non_constant_p;


       cp_expr rhs = cp_parser_initializer_clause (parser,
         &non_constant_p);

       if ((((enum tree_code) (rhs)->base.code) == CONSTRUCTOR && ((contains_struct_check ((rhs), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 9967, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE]))
  maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);



       if (cp_parser_non_integral_constant_expression (parser,
             NIC_ASSIGNMENT))
  return global_trees[TI_ERROR_MARK];







       loc = make_location (loc,
       expr.get_start (),
       rhs.get_finish ());
       expr = build_x_modify_expr (loc, expr,
       assignment_operator,
       rhs,
       complain_flags (decltype_p));


              expr.set_location (loc);
     }
 }
    }

  return expr;
}
# 10016 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static enum tree_code
cp_parser_assignment_operator_opt (cp_parser* parser)
{
  enum tree_code op;
  cp_token *token;


  token = cp_lexer_peek_token (parser->lexer);

  switch (token->type)
    {
    case CPP_EQ:
      op = NOP_EXPR;
      break;

    case CPP_MULT_EQ:
      op = MULT_EXPR;
      break;

    case CPP_DIV_EQ:
      op = TRUNC_DIV_EXPR;
      break;

    case CPP_MOD_EQ:
      op = TRUNC_MOD_EXPR;
      break;

    case CPP_PLUS_EQ:
      op = PLUS_EXPR;
      break;

    case CPP_MINUS_EQ:
      op = MINUS_EXPR;
      break;

    case CPP_RSHIFT_EQ:
      op = RSHIFT_EXPR;
      break;

    case CPP_LSHIFT_EQ:
      op = LSHIFT_EXPR;
      break;

    case CPP_AND_EQ:
      op = BIT_AND_EXPR;
      break;

    case CPP_XOR_EQ:
      op = BIT_XOR_EXPR;
      break;

    case CPP_OR_EQ:
      op = BIT_IOR_EXPR;
      break;

    default:

      op = ERROR_MARK;
    }


  if (op != ERROR_MARK
      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_ELLIPSIS))
    op = ERROR_MARK;


  if (op != ERROR_MARK)
    cp_lexer_consume_token (parser->lexer);

  return op;
}
# 10101 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_expression (cp_parser* parser, cp_id_kind * pidk,
        bool cast_p, bool decltype_p, bool warn_comma_p)
{
  cp_expr expression = (tree) 
# 10105 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 10105 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
  location_t loc = ((location_t) 0);

  while (true)
    {
      cp_expr assignment_expression;


      assignment_expression
 = cp_parser_assignment_expression (parser, pidk, cast_p, decltype_p);




      if (decltype_p && !scope_chain->x_processing_template_decl
   && ((enum tree_code) (assignment_expression)->base.code) == CALL_EXPR
   && (((((enum tree_code) (((contains_struct_check ((assignment_expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10121, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((assignment_expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10121, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((assignment_expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10121, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10121, __FUNCTION__))->type_common.lang_flag_5))
   && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 assignment_expression
   = build_cplus_new (((contains_struct_check ((assignment_expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10124, __FUNCTION__))->typed.type),
        assignment_expression, tf_warning_or_error);



      if (!expression)
 expression = assignment_expression;
      else
 {


   loc = make_location (loc,
          expression.get_start (),
          assignment_expression.get_finish ());
   expression = build_x_compound_expr (loc, expression,
           assignment_expression,
           complain_flags (decltype_p));
   expression.set_location (loc);
 }


      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA)
   || cp_lexer_nth_token_is (parser->lexer, 2, CPP_ELLIPSIS))
 break;

      loc = cp_lexer_peek_token (parser->lexer)->location;
      if (warn_comma_p)
 {




   warning_at (loc, OPT_Wcomma_subscript,
        "top-level comma expression in array subscript "
        "is deprecated");
   warn_comma_p = false;
 }
      cp_lexer_consume_token (parser->lexer);

      if (cp_parser_non_integral_constant_expression (parser, NIC_COMMA))
 expression = global_trees[TI_ERROR_MARK];
    }

  return expression;
}
# 10182 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_constant_expression (cp_parser* parser,
          bool allow_non_constant_p,
          bool *non_constant_p,
          bool strict_p)
{
  bool saved_integral_constant_expression_p;
  bool saved_allow_non_integral_constant_expression_p;
  bool saved_non_integral_constant_expression_p;
  cp_expr expression;
# 10211 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  saved_integral_constant_expression_p = parser->integral_constant_expression_p;
  saved_allow_non_integral_constant_expression_p
    = parser->allow_non_integral_constant_expression_p;
  saved_non_integral_constant_expression_p = parser->non_integral_constant_expression_p;

  parser->integral_constant_expression_p = true;
  parser->allow_non_integral_constant_expression_p
    = (allow_non_constant_p || cxx_dialect >= cxx11);
  parser->non_integral_constant_expression_p = false;
# 10229 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (strict_p)
    {

      expression = cp_parser_binary_expression (parser, false, false, false,
      PREC_NOT_OPERATOR, 
# 10233 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 10233 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            );


      if (cp_lexer_next_token_is (parser->lexer, CPP_QUERY))
 expression = cp_parser_question_colon_clause (parser, expression);
    }
  else
    expression = cp_parser_assignment_expression (parser);

  parser->integral_constant_expression_p
    = saved_integral_constant_expression_p;
  parser->allow_non_integral_constant_expression_p
    = saved_allow_non_integral_constant_expression_p;
  if (cxx_dialect >= cxx11)
    {



      tree decay = expression;
      if (((contains_struct_check ((expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10252, __FUNCTION__))->typed.type)
   && ((enum tree_code) (((contains_struct_check ((expression), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10253, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE)
 decay = build_address (expression);
      bool is_const = is_rvalue_constant_expression (decay);
      parser->non_integral_constant_expression_p = !is_const;
      if (!is_const && !allow_non_constant_p)
 require_rvalue_constant_expression (decay);
    }
  if (allow_non_constant_p)
    *non_constant_p = parser->non_integral_constant_expression_p;
  parser->non_integral_constant_expression_p
    = saved_non_integral_constant_expression_p;

  return expression;
}
# 10279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_builtin_offsetof (cp_parser *parser)
{
  int save_ice_p, save_non_ice_p;
  tree type;
  cp_expr expr;
  cp_id_kind dummy;
  cp_token *token;
  location_t finish_loc;




  save_ice_p = parser->integral_constant_expression_p;
  save_non_ice_p = parser->non_integral_constant_expression_p;

  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;


  cp_lexer_consume_token (parser->lexer);

  matching_parens parens;
  parens.require_open (parser);

  location_t loc = cp_lexer_peek_token (parser->lexer)->location;
  {
    const char *saved_message = parser->type_definition_forbidden_message;
    parser->type_definition_forbidden_message
      = "types may not be defined within %<__builtin_offsetof%>";
    type = cp_parser_type_id (parser);
    parser->type_definition_forbidden_message = saved_message;
  }

  cp_parser_require (parser, CPP_COMMA, RT_COMMA);
  token = cp_lexer_peek_token (parser->lexer);


  tree object_ptr
    = build_static_cast (input_location, build_pointer_type (type),
    global_trees[TI_NULL_POINTER], tf_warning_or_error);


  expr = cp_parser_postfix_dot_deref_expression (parser, CPP_DEREF, object_ptr,
       true, &dummy, token->location);
  while (true)
    {
      token = cp_lexer_peek_token (parser->lexer);
      switch (token->type)
 {
 case CPP_OPEN_SQUARE:

   expr = cp_parser_postfix_open_square_expression (parser, expr,
          true, false);
   break;

 case CPP_DEREF:

   expr = grok_array_decl (token->location, expr,
      global_trees[TI_INTEGER_ZERO], false);


 case CPP_DOT:

   cp_lexer_consume_token (parser->lexer);
   expr = cp_parser_postfix_dot_deref_expression (parser, CPP_DOT,
        expr, true, &dummy,
        token->location);
   break;

 case CPP_CLOSE_PAREN:

   finish_loc = cp_lexer_peek_token (parser->lexer)->location;
   cp_lexer_consume_token (parser->lexer);
   goto success;

 default:


   parens.require_close (parser);
   cp_parser_skip_to_closing_parenthesis (parser, true, false, true);
   expr = global_trees[TI_ERROR_MARK];
   goto failure;
 }
    }

 success:





  loc = make_location (loc, start_loc, finish_loc);


  expr = cp_expr (finish_offsetof (object_ptr, expr, loc), loc);

 failure:
  parser->integral_constant_expression_p = save_ice_p;
  parser->non_integral_constant_expression_p = save_non_ice_p;

  expr = expr.maybe_add_location_wrapper ();
  return expr;
}






static cp_expr
cp_parser_trait_expr (cp_parser* parser, enum rid keyword)
{
  cp_trait_kind kind;
  tree type1, type2 = (tree) 
# 10392 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 10392 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  bool binary = false;
  bool variadic = false;

  switch (keyword)
    {
    case RID_HAS_NOTHROW_ASSIGN:
      kind = CPTK_HAS_NOTHROW_ASSIGN;
      break;
    case RID_HAS_NOTHROW_CONSTRUCTOR:
      kind = CPTK_HAS_NOTHROW_CONSTRUCTOR;
      break;
    case RID_HAS_NOTHROW_COPY:
      kind = CPTK_HAS_NOTHROW_COPY;
      break;
    case RID_HAS_TRIVIAL_ASSIGN:
      kind = CPTK_HAS_TRIVIAL_ASSIGN;
      break;
    case RID_HAS_TRIVIAL_CONSTRUCTOR:
      kind = CPTK_HAS_TRIVIAL_CONSTRUCTOR;
      break;
    case RID_HAS_TRIVIAL_COPY:
      kind = CPTK_HAS_TRIVIAL_COPY;
      break;
    case RID_HAS_TRIVIAL_DESTRUCTOR:
      kind = CPTK_HAS_TRIVIAL_DESTRUCTOR;
      break;
    case RID_HAS_UNIQUE_OBJ_REPRESENTATIONS:
      kind = CPTK_HAS_UNIQUE_OBJ_REPRESENTATIONS;
      break;
    case RID_HAS_VIRTUAL_DESTRUCTOR:
      kind = CPTK_HAS_VIRTUAL_DESTRUCTOR;
      break;
    case RID_IS_ABSTRACT:
      kind = CPTK_IS_ABSTRACT;
      break;
    case RID_IS_AGGREGATE:
      kind = CPTK_IS_AGGREGATE;
      break;
    case RID_IS_BASE_OF:
      kind = CPTK_IS_BASE_OF;
      binary = true;
      break;
    case RID_IS_CLASS:
      kind = CPTK_IS_CLASS;
      break;
    case RID_IS_EMPTY:
      kind = CPTK_IS_EMPTY;
      break;
    case RID_IS_ENUM:
      kind = CPTK_IS_ENUM;
      break;
    case RID_IS_FINAL:
      kind = CPTK_IS_FINAL;
      break;
    case RID_IS_LITERAL_TYPE:
      kind = CPTK_IS_LITERAL_TYPE;
      break;
    case RID_IS_POD:
      kind = CPTK_IS_POD;
      break;
    case RID_IS_POLYMORPHIC:
      kind = CPTK_IS_POLYMORPHIC;
      break;
    case RID_IS_SAME_AS:
      kind = CPTK_IS_SAME_AS;
      binary = true;
      break;
    case RID_IS_STD_LAYOUT:
      kind = CPTK_IS_STD_LAYOUT;
      break;
    case RID_IS_TRIVIAL:
      kind = CPTK_IS_TRIVIAL;
      break;
    case RID_IS_TRIVIALLY_ASSIGNABLE:
      kind = CPTK_IS_TRIVIALLY_ASSIGNABLE;
      binary = true;
      break;
    case RID_IS_TRIVIALLY_CONSTRUCTIBLE:
      kind = CPTK_IS_TRIVIALLY_CONSTRUCTIBLE;
      variadic = true;
      break;
    case RID_IS_TRIVIALLY_COPYABLE:
      kind = CPTK_IS_TRIVIALLY_COPYABLE;
      break;
    case RID_IS_UNION:
      kind = CPTK_IS_UNION;
      break;
    case RID_UNDERLYING_TYPE:
      kind = CPTK_UNDERLYING_TYPE;
      break;
    case RID_BASES:
      kind = CPTK_BASES;
      break;
    case RID_DIRECT_BASES:
      kind = CPTK_DIRECT_BASES;
      break;
    case RID_IS_ASSIGNABLE:
      kind = CPTK_IS_ASSIGNABLE;
      binary = true;
      break;
    case RID_IS_CONSTRUCTIBLE:
      kind = CPTK_IS_CONSTRUCTIBLE;
      variadic = true;
      break;
    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10498, __FUNCTION__));
    }


  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;


  cp_lexer_consume_token (parser->lexer);

  matching_parens parens;
  parens.require_open (parser);

  {
    type_id_in_expr_sentinel s (parser);
    type1 = cp_parser_type_id (parser);
  }

  if (type1 == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  if (binary)
    {
      cp_parser_require (parser, CPP_COMMA, RT_COMMA);

      {
 type_id_in_expr_sentinel s (parser);
 type2 = cp_parser_type_id (parser);
      }

      if (type2 == global_trees[TI_ERROR_MARK])
 return global_trees[TI_ERROR_MARK];
    }
  else if (variadic)
    {
      while (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 {
   cp_lexer_consume_token (parser->lexer);
   tree elt = cp_parser_type_id (parser);
   if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
     {
       cp_lexer_consume_token (parser->lexer);
       elt = make_pack_expansion (elt);
     }
   if (elt == global_trees[TI_ERROR_MARK])
     return global_trees[TI_ERROR_MARK];
   type2 = tree_cons ((tree) 
# 10543 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 10543 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              , elt, type2);
 }
    }

  location_t finish_loc = cp_lexer_peek_token (parser->lexer)->location;
  parens.require_close (parser);





  location_t trait_loc = make_location (start_loc, start_loc, finish_loc);



  switch (kind)
    {
    case CPTK_UNDERLYING_TYPE:
      return cp_expr (finish_underlying_type (type1), trait_loc);
    case CPTK_BASES:
      return cp_expr (finish_bases (type1, false), trait_loc);
    case CPTK_DIRECT_BASES:
      return cp_expr (finish_bases (type1, true), trait_loc);
    default:
      return finish_trait_expr (trait_loc, kind, type1, type2);
    }
}
# 10578 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_lambda_expression (cp_parser* parser)
{
  tree lambda_expr = build_lambda_expr ();
  tree type;
  bool ok = true;
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  cp_token_position start = 0;

  (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10587, __FUNCTION__, (LAMBDA_EXPR))))->locus) = token->location;

  if (cxx_dialect >= cxx20)
                                                       ;
  else if (cp_unevaluated_operand)
    {
      if (!token->error_reported)
 {
   error_at ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10595, __FUNCTION__, (LAMBDA_EXPR))))->locus),
      "lambda-expression in unevaluated context"
      " only available with %<-std=c++20%> or %<-std=gnu++20%>");
   token->error_reported = true;
 }
      ok = false;
    }
  else if (parser->in_template_argument_list_p || processing_template_parmlist)
    {
      if (!token->error_reported)
 {
   error_at (token->location, "lambda-expression in template-argument"
      " only available with %<-std=c++20%> or %<-std=gnu++20%>");
   token->error_reported = true;
 }
      ok = false;
    }



  push_deferring_access_checks (dk_no_deferred);

  cp_parser_lambda_introducer (parser, lambda_expr);
  if (cp_parser_error_occurred (parser))
    return global_trees[TI_ERROR_MARK];

  type = begin_lambda_type (lambda_expr);
  if (type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  record_lambda_scope (lambda_expr);


  determine_visibility (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10628, __FUNCTION__))->type_common.name));



  register_capture_members ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10632, __FUNCTION__, (LAMBDA_EXPR))))->capture_list));

  {

    unsigned int saved_num_template_parameter_lists
        = parser->num_template_parameter_lists;
    unsigned char in_statement = parser->in_statement;
    bool in_switch_statement_p = parser->in_switch_statement_p;
    bool fully_implicit_function_template_p
        = parser->fully_implicit_function_template_p;
    tree implicit_template_parms = parser->implicit_template_parms;
    cp_binding_level* implicit_template_scope = parser->implicit_template_scope;
    bool auto_is_implicit_function_template_parm_p
        = parser->auto_is_implicit_function_template_parm_p;

    parser->num_template_parameter_lists = 0;
    parser->in_statement = 0;
    parser->in_switch_statement_p = false;
    parser->fully_implicit_function_template_p = false;
    parser->implicit_template_parms = 0;
    parser->implicit_template_scope = 0;
    parser->auto_is_implicit_function_template_parm_p = false;


    bool discarded = scope_chain->discarded_stmt;
    scope_chain->discarded_stmt = 0;




    if (cp_parser_start_tentative_firewall (parser))
      start = token;

    ok &= cp_parser_lambda_declarator_opt (parser, lambda_expr);

    if (ok && cp_parser_error_occurred (parser))
      ok = false;

    if (ok)
      {
 cp_parser_lambda_body (parser, lambda_expr);
      }
    else if (cp_parser_require (parser, CPP_OPEN_BRACE, RT_OPEN_BRACE))
      {
 if (cp_parser_skip_to_closing_brace (parser))
   cp_lexer_consume_token (parser->lexer);
      }


    (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10681, __FUNCTION__, (LAMBDA_EXPR))))->capture_list)
      = nreverse ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10682, __FUNCTION__, (LAMBDA_EXPR))))->capture_list));

    if (ok)
      maybe_add_lambda_conv_op (type);

    finish_struct (type, (tree) 
# 10687 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 10687 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                );

    scope_chain->discarded_stmt = discarded;

    parser->num_template_parameter_lists = saved_num_template_parameter_lists;
    parser->in_statement = in_statement;
    parser->in_switch_statement_p = in_switch_statement_p;
    parser->fully_implicit_function_template_p
 = fully_implicit_function_template_p;
    parser->implicit_template_parms = implicit_template_parms;
    parser->implicit_template_scope = implicit_template_scope;
    parser->auto_is_implicit_function_template_parm_p
 = auto_is_implicit_function_template_parm_p;
  }


  (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10703, __FUNCTION__, (LAMBDA_EXPR))))->this_capture) = (tree) 
# 10703 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 10703 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   ;


  ((void)(!((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10706, __FUNCTION__, (LAMBDA_EXPR))))->pending_proxies) == 
# 10706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null
# 10706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10706, __FUNCTION__), 0 : 0));

  insert_pending_capture_proxies ();


  (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10711, __FUNCTION__, (LAMBDA_EXPR))))->locus) = make_location (token->location,
            token->location,
            parser->lexer);

  if (ok)
    lambda_expr = build_lambda_object (lambda_expr);
  else
    lambda_expr = global_trees[TI_ERROR_MARK];

  cp_parser_end_tentative_firewall (parser, start, lambda_expr);

  pop_deferring_access_checks ();

  return lambda_expr;
}
# 10734 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)
{

  bool first = true;


  cp_parser_require (parser, CPP_OPEN_SQUARE, RT_OPEN_SQUARE);


  if (cp_lexer_next_token_is (parser->lexer, CPP_AND)
      && !cp_lexer_nth_token_is (parser->lexer, 2, CPP_ELLIPSIS)
      && !cp_lexer_nth_token_is (parser->lexer, 2, CPP_NAME)
      && !cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_THIS))
    (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10748, __FUNCTION__, (LAMBDA_EXPR))))->default_capture_mode) = CPLD_REFERENCE;
  else if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
    (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10750, __FUNCTION__, (LAMBDA_EXPR))))->default_capture_mode) = CPLD_COPY;

  if ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10752, __FUNCTION__, (LAMBDA_EXPR))))->default_capture_mode) != CPLD_NONE)
    {
      cp_lexer_consume_token (parser->lexer);
      first = false;

      if (!(at_function_scope_p () || parsing_nsdmi ()))
 error ("non-local lambda expression cannot have a capture-default");
    }

  hash_set<tree, true> ids;
  tree first_capture_id = (tree) 
# 10762 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 10762 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;
  while (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_SQUARE))
    {
      cp_token* capture_token;
      tree capture_id;
      tree capture_init_expr;
      cp_id_kind idk = CP_ID_KIND_NONE;
      bool explicit_init_p = false;

      enum capture_kind_type
      {
 BY_COPY,
 BY_REFERENCE
      };
      enum capture_kind_type capture_kind = BY_COPY;

      if (cp_lexer_next_token_is (parser->lexer, CPP_EOF))
 {
   error ("expected end of capture-list");
   return;
 }

      if (first)
 first = false;
      else
 cp_parser_require (parser, CPP_COMMA, RT_COMMA);


      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_THIS))
 {
   location_t loc = cp_lexer_peek_token (parser->lexer)->location;
   if (cxx_dialect < cxx20
       && (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10794, __FUNCTION__, (LAMBDA_EXPR))))->default_capture_mode) == CPLD_COPY)
     pedwarn (loc, 0, "explicit by-copy capture of %<this%> redundant "
       "with by-copy capture default");
   cp_lexer_consume_token (parser->lexer);
   if ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10798, __FUNCTION__, (LAMBDA_EXPR))))->this_capture))
     pedwarn (input_location, 0,
       "already captured %qD in lambda expression",
       cp_global_trees[CPTI_THIS_IDENTIFIER]);
   else
     add_capture (lambda_expr, cp_global_trees[CPTI_THIS_IDENTIFIER],
                    finish_this_expr (),
                       true, explicit_init_p);
   continue;
 }


      if (cp_lexer_next_token_is (parser->lexer, CPP_MULT)
   && cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_THIS))
 {
   location_t loc = cp_lexer_peek_token (parser->lexer)->location;
   if (cxx_dialect < cxx17)
     pedwarn (loc, 0, "%<*this%> capture only available with "
        "%<-std=c++17%> or %<-std=gnu++17%>");
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
   if ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10819, __FUNCTION__, (LAMBDA_EXPR))))->this_capture))
     pedwarn (input_location, 0,
       "already captured %qD in lambda expression",
       cp_global_trees[CPTI_THIS_IDENTIFIER]);
   else
     add_capture (lambda_expr, cp_global_trees[CPTI_THIS_IDENTIFIER],
                    finish_this_expr (),
                       false, explicit_init_p);
   continue;
 }


      if (cp_lexer_next_token_is (parser->lexer, CPP_AND)
   && cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_THIS))
 {
   error_at (cp_lexer_peek_token (parser->lexer)->location,
      "%<this%> cannot be captured by reference");
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
   continue;
 }


      if (cp_lexer_next_token_is (parser->lexer, CPP_AND))
 {
   capture_kind = BY_REFERENCE;
   cp_lexer_consume_token (parser->lexer);
 }

      bool init_pack_expansion = false;
      location_t ellipsis_loc = ((location_t) 0);
      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
 {
   ellipsis_loc = cp_lexer_peek_token (parser->lexer)->location;
   if (cxx_dialect < cxx20)
     pedwarn (ellipsis_loc, 0, "pack init-capture only available with "
       "%<-std=c++20%> or %<-std=gnu++20%>");
   cp_lexer_consume_token (parser->lexer);
   init_pack_expansion = true;
 }


      if (init_pack_expansion && capture_kind != BY_REFERENCE
   && cp_lexer_next_token_is (parser->lexer, CPP_AND))
 {
   pedwarn (cp_lexer_peek_token (parser->lexer)->location,
     0, "%<&%> should come before %<...%>");
   capture_kind = BY_REFERENCE;
   cp_lexer_consume_token (parser->lexer);
 }


      capture_token = cp_lexer_peek_token (parser->lexer);
      capture_id = cp_parser_identifier (parser);

      if (capture_id == global_trees[TI_ERROR_MARK])




 {
   cp_parser_skip_to_closing_parenthesis (parser,
                      true,
                    true,
                         true);
   break;
 }


      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ)
   || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)
   || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
 {
   bool direct, non_constant;

   if (cxx_dialect < cxx14)
     pedwarn (input_location, 0,
       "lambda capture initializers "
       "only available with %<-std=c++14%> or %<-std=gnu++14%>");
   capture_init_expr = cp_parser_initializer (parser, &direct,
           &non_constant, true);
   explicit_init_p = true;
   if (capture_init_expr == (tree) 
# 10901 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 10901 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    )
     {
       error ("empty initializer for lambda init-capture");
       capture_init_expr = global_trees[TI_ERROR_MARK];
     }
   if (init_pack_expansion)
     capture_init_expr = make_pack_expansion (capture_init_expr);
 }
      else
 {
   const char* error_msg;


   capture_init_expr
     = cp_parser_lookup_name_simple (parser, capture_id,
         capture_token->location);

   if (capture_init_expr == global_trees[TI_ERROR_MARK])
     {
       unqualified_name_lookup_error (capture_id);
       continue;
     }
   else if (!(((enum tree_code) (capture_init_expr)->base.code) == VAR_DECL)
     && ((enum tree_code) (capture_init_expr)->base.code) != PARM_DECL)
     {
       error_at (capture_token->location,
   "capture of non-variable %qE",
   capture_init_expr);
       if ((tree_code_type[(int) (((enum tree_code) (capture_init_expr)->base.code))] == tcc_declaration))
  inform (((contains_struct_check ((capture_init_expr), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10930, __FUNCTION__))->decl_minimal.locus),
   "%q#D declared here", capture_init_expr);
       continue;
     }
   if ((((enum tree_code) (capture_init_expr)->base.code) == VAR_DECL)
       && decl_storage_duration (capture_init_expr) != dk_auto)
     {
       if (pedwarn (capture_token->location, 0, "capture of variable "
      "%qD with non-automatic storage duration",
      capture_init_expr))
  inform (((contains_struct_check ((capture_init_expr), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10940, __FUNCTION__))->decl_minimal.locus),
   "%q#D declared here", capture_init_expr);
       continue;
     }

   capture_init_expr
            = finish_id_expression
                (capture_id,
   capture_init_expr,
                 parser->scope,
                 &idk,
                                                    false,
                                                              false,
                                                        
# 10953 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 10953 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           ,
                                false,
                          true,
                               false,
                                    false,
                 &error_msg,
                 capture_token->location);

   if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
     {
       location_t loc = cp_lexer_peek_token (parser->lexer)->location;
       cp_lexer_consume_token (parser->lexer);
       capture_init_expr = make_pack_expansion (capture_init_expr);
       if (init_pack_expansion)
  {



    if (cp_lexer_next_token_is (parser->lexer, CPP_EQ)
        || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)
        || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
      ellipsis_loc = loc;
    error_at (ellipsis_loc, "too many %<...%> in lambda capture");
    continue;
  }
     }
 }

      if ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10981, __FUNCTION__, (LAMBDA_EXPR))))->default_capture_mode) != CPLD_NONE
   && !explicit_init_p)
 {
   if ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10984, __FUNCTION__, (LAMBDA_EXPR))))->default_capture_mode) == CPLD_COPY
       && capture_kind == BY_COPY)
     pedwarn (capture_token->location, 0, "explicit by-copy capture "
       "of %qD redundant with by-copy capture default",
       capture_id);
   if ((((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 10989, __FUNCTION__, (LAMBDA_EXPR))))->default_capture_mode) == CPLD_REFERENCE
       && capture_kind == BY_REFERENCE)
     pedwarn (capture_token->location, 0, "explicit by-reference "
       "capture of %qD redundant with by-reference capture "
       "default", capture_id);
 }




      bool found = false;
      if (!ids.is_empty ())
 found = ids.add (capture_id);
      else if (first_capture_id == (tree) 
# 11002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 11002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           )
 first_capture_id = capture_id;
      else if (capture_id == first_capture_id)
 found = true;
      else
 {
   ids.add (first_capture_id);
   ids.add (capture_id);
 }
      if (found)
 pedwarn (input_location, 0,
   "already captured %qD in lambda expression", capture_id);
      else
 add_capture (lambda_expr, capture_id, capture_init_expr,
                          capture_kind == BY_REFERENCE,
       explicit_init_p);



      parser->scope = (tree) 
# 11021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 11021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
      parser->qualifying_scope = (tree) 
# 11022 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 11022 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;
      parser->object_scope = (tree) 
# 11023 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 11023 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
    }

  cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);
}
# 11043 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)
{





  tree param_list = global_trees[TI_VOID_LIST_NODE];
  tree std_attrs = (tree) 
# 11052 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 11052 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
  tree gnu_attrs = (tree) 
# 11053 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 11053 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
  tree exception_spec = (tree) 
# 11054 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 11054 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
  tree template_param_list = (tree) 
# 11055 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 11055 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  tree tx_qual = (tree) 
# 11056 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 11056 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
  tree return_type = (tree) 
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 11057 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
  tree trailing_requires_clause = (tree) 
# 11058 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 11058 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          ;
  cp_decl_specifier_seq lambda_specs;
  clear_decl_specs (&lambda_specs);

  cp_cv_quals quals = TYPE_QUAL_CONST;



  if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))
    {
      if (cxx_dialect < cxx14)
 pedwarn (parser->lexer->next_token->location, 0,
   "lambda templates are only available with "
   "%<-std=c++14%> or %<-std=gnu++14%>");
      else if (cxx_dialect < cxx20)
 pedwarn (parser->lexer->next_token->location, OPT_Wpedantic,
   "lambda templates are only available with "
   "%<-std=c++20%> or %<-std=gnu++20%>");

      cp_lexer_consume_token (parser->lexer);

      template_param_list = cp_parser_template_parameter_list (parser);
      cp_parser_skip_to_end_of_template_parameter_list (parser);




      tree dreqs = cp_parser_requires_clause_opt (parser, true);
      if (global_options.x_flag_concepts)
 {
   tree reqs = get_shorthand_constraints (scope_chain->template_parms);
   if (dreqs)
     reqs = combine_constraint_expressions (reqs, dreqs);
   ((contains_struct_check (((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11091, __FUNCTION__, (TREE_LIST)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11091, __FUNCTION__))->typed.type) = reqs;
 }


      ++parser->num_template_parameter_lists;
    }


  lambda_specs.attributes = cp_parser_attributes_opt (parser);




  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      bool is_consteval = false;


      if (cxx_dialect >= cxx20)
 {
   for (size_t n = cp_parser_skip_balanced_tokens (parser, 1);
        cp_lexer_nth_token_is (parser->lexer, n, CPP_KEYWORD); n++)
     {
       if (cp_lexer_peek_nth_token (parser->lexer, n)->keyword
    == RID_CONSTEVAL)
  {
    is_consteval = true;
    break;
  }
     }
 }

      matching_parens parens;
      parens.consume_open (parser);

      begin_scope (sk_function_parms, (tree) 
# 11126 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 11126 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                         );

      if (is_consteval)
 (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->immediate_fn_ctx_p = true;


      param_list
 = cp_parser_parameter_declaration_clause
     (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL);



      if (cxx_dialect < cxx14)
 for (tree t = param_list; t; t = ((contains_struct_check ((t), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11139, __FUNCTION__))->common.chain))
   if (((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11140, __FUNCTION__, (TREE_LIST)))->list.purpose) && (tree_code_type[(int) (((enum tree_code) (((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11140, __FUNCTION__, (TREE_LIST)))->list.value))->base.code))] == tcc_declaration))
     pedwarn (((contains_struct_check ((((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11141, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11141, __FUNCTION__))->decl_minimal.locus), OPT_Wpedantic,
       "default argument specified for lambda parameter");

      parens.require_close (parser);



      int declares_class_or_enum;
      if (cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer)
   && !cp_next_tokens_can_be_gnu_attribute_p (parser))
 cp_parser_decl_specifier_seq (parser,
          CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR,
          &lambda_specs, &declares_class_or_enum);
      if (lambda_specs.storage_class == sc_mutable)
 {
   ((tree_not_check2 (((tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11156, __FUNCTION__, (LAMBDA_EXPR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11156, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_1) = 1;
   quals = TYPE_UNQUALIFIED;
   if (lambda_specs.conflicting_specifiers_p)
     error_at (lambda_specs.locations[ds_storage_class],
        "duplicate %<mutable%>");
 }

      tx_qual = cp_parser_tx_qualifier_opt (parser);


      exception_spec
 = cp_parser_exception_specification_opt (parser, CP_PARSER_FLAGS_NONE);

      std_attrs = cp_parser_std_attribute_spec_seq (parser);


      if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))
        {
          cp_lexer_consume_token (parser->lexer);
          return_type = cp_parser_trailing_type_id (parser);
        }

      if (cp_next_tokens_can_be_gnu_attribute_p (parser))
 gnu_attrs = cp_parser_gnu_attributes_opt (parser);


      trailing_requires_clause = cp_parser_requires_clause_opt (parser, false);



      pop_bindings_and_leave_scope ();
    }
  else if (template_param_list != (tree) 
# 11188 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 11188 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          )
    cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);






  {
    cp_decl_specifier_seq return_type_specs;
    cp_declarator* declarator;
    tree fco;
    void *p;

    clear_decl_specs (&return_type_specs);
    return_type_specs.type = make_auto ();

    if (lambda_specs.locations[ds_constexpr])
      {
 if (cxx_dialect >= cxx17)
   return_type_specs.locations[ds_constexpr]
     = lambda_specs.locations[ds_constexpr];
 else
   error_at (lambda_specs.locations[ds_constexpr], "%<constexpr%> "
      "lambda only available with %<-std=c++17%> or "
      "%<-std=gnu++17%>");
      }
    if (lambda_specs.locations[ds_consteval])
      return_type_specs.locations[ds_consteval]
 = lambda_specs.locations[ds_consteval];

    p = __extension__ ({ struct obstack *__h = (&declarator_obstack); __extension__ ({ struct obstack *__o = (__h); size_t __len = ((0)); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); ((void) ((__o)->next_free += (__len))); }); __extension__ ({ struct obstack *__o1 = (__h); void *__value = (void *) __o1->object_base; if (__o1->next_free == __value) __o1->maybe_empty_object = 1; __o1->next_free = ((sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (((__o1->next_free) - (sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (__o1->alignment_mask)) & ~(__o1->alignment_mask))); if ((size_t) (__o1->next_free - (char *) __o1->chunk) > (size_t) (__o1->chunk_limit - (char *) __o1->chunk)) __o1->next_free = __o1->chunk_limit; __o1->object_base = __o1->next_free; __value; }); });

    declarator = make_id_declarator ((tree) 
# 11221 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 11221 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                             , (ovl_op_info[false][OVL_OP_CALL_EXPR].identifier), sfk_none,
         (((struct tree_lambda_expr *)(tree_check ((lambda_expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11222, __FUNCTION__, (LAMBDA_EXPR))))->locus));

    declarator = make_call_declarator (declarator, param_list, quals,
           VIRT_SPEC_UNSPECIFIED,
                                       REF_QUAL_NONE,
           tx_qual,
           exception_spec,
                                       return_type,
           trailing_requires_clause);
    declarator->std_attributes = std_attrs;

    fco = grokmethod (&return_type_specs,
        declarator,
        chainon (gnu_attrs, lambda_specs.attributes));
    if (fco != global_trees[TI_ERROR_MARK])
      {
 (((contains_struct_check (((tree_check2 ((fco), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11238, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11238, __FUNCTION__))->decl_common.lang_specific) ->u.base.initialized_in_class) = 1;
 ((contains_struct_check ((fco), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11239, __FUNCTION__))->decl_common.artificial_flag) = 1;

 ((contains_struct_check ((((tree_check ((fco), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11241, __FUNCTION__, (FUNCTION_DECL)))->function_decl.arguments)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11241, __FUNCTION__))->decl_minimal.name) = cp_global_trees[CPTI_CLOSURE_IDENTIFIER];
 set_function_decl_type ((tree_check ((fco), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11242, __FUNCTION__, (FUNCTION_DECL))), LAMBDA_FUNCTION, true);
      }
    if (template_param_list)
      {
 fco = finish_member_template_decl (fco);
 finish_template_decl (template_param_list);
 --parser->num_template_parameter_lists;
      }
    else if (parser->fully_implicit_function_template_p)
      fco = finish_fully_implicit_template (parser, fco);

    finish_member_declaration (fco);

    __extension__ ({ struct obstack *__o = (&declarator_obstack); void *__obj = (void *) (p); if (__obj > (void *) __o->chunk && __obj < (void *) __o->chunk_limit) __o->next_free = __o->object_base = (char *) __obj; else _obstack_free (__o, __obj); });

    return (fco != global_trees[TI_ERROR_MARK]);
  }
}
# 11268 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_lambda_body (cp_parser* parser, tree lambda_expr)
{
  bool nested = (current_function_decl != (tree) 
# 11271 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                         __null
# 11271 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  );
  unsigned char local_variables_forbidden_p
    = parser->local_variables_forbidden_p;
  bool in_function_body = parser->in_function_body;



  cp_evaluated ev;

  if (nested)
    push_function_context ();
  else


    ++function_depth;

  vec<tree> omp_privatization_save;
  save_omp_privatization_clauses (omp_privatization_save);

  parser->local_variables_forbidden_p = 0;
  parser->in_function_body = true;

  {
    local_specialization_stack s (lss_copy);
    tree fco = lambda_function (lambda_expr);
    tree body = start_lambda_function (fco, lambda_expr);




    cp_parser_function_body (parser, false);

    finish_lambda_function (body);
  }

  restore_omp_privatization_clauses (omp_privatization_save);
  parser->local_variables_forbidden_p = local_variables_forbidden_p;
  parser->in_function_body = in_function_body;
  if (nested)
    pop_function_context();
  else
    --function_depth;
}





static void
add_debug_begin_stmt (location_t loc)
{
  if (!global_options.x_debug_nonbind_markers_p)
    return;
  if ((((contains_struct_check ((current_function_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11324, __FUNCTION__))->decl_common.lang_specific)->u.base.concept_p))

    return;

  tree stmt = build0 (DEBUG_BEGIN_STMT, global_trees[TI_VOID_TYPE]);
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11329, __FUNCTION__))->exp.locus = (loc);
  add_stmt (stmt);
}
# 11375 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_statement (cp_parser* parser, tree in_statement_expr,
       bool in_compound, bool *if_p, vec<tree> *chain,
       location_t *loc_after_labels)
{
  tree statement, std_attrs = (tree) 
# 11380 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 11380 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
  cp_token *token;
  location_t statement_location, attrs_loc;

 restart:
  if (if_p != 
# 11385 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 11385 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
    *if_p = false;

  statement = (tree) 
# 11388 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 11388 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;

  saved_token_sentinel saved_tokens (parser->lexer);
  attrs_loc = cp_lexer_peek_token (parser->lexer)->location;
  if (((c_language & clk_objc) != 0))



    cp_parser_parse_tentatively (parser);
  std_attrs = cp_parser_std_attribute_spec_seq (parser);
  if (std_attrs)
    attrs_loc = make_location (attrs_loc, attrs_loc, parser->lexer);
  if (((c_language & clk_objc) != 0))
    {
      if (!cp_parser_parse_definitely (parser))
 std_attrs = (tree) 
# 11403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 11403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }


  token = cp_lexer_peek_token (parser->lexer);

  cp_token *statement_token = token;
  statement_location = token->location;
  add_debug_begin_stmt (statement_location);


  if (token->type == CPP_KEYWORD)
    {
      enum rid keyword = token->keyword;

      switch (keyword)
 {
 case RID_CASE:
 case RID_DEFAULT:



   cp_parser_label_for_labeled_statement (parser, std_attrs);
   in_compound = false;
   goto restart;

 case RID_IF:
 case RID_SWITCH:
   std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
   statement = cp_parser_selection_statement (parser, if_p, chain);
   break;

 case RID_WHILE:
 case RID_DO:
 case RID_FOR:
   std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
   statement = cp_parser_iteration_statement (parser, if_p, false, 0);
   break;

 case RID_BREAK:
 case RID_CONTINUE:
 case RID_RETURN:
 case RID_CO_RETURN:
 case RID_GOTO:
   std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
   statement = cp_parser_jump_statement (parser);
   break;


 case RID_AT_TRY:
 case RID_AT_CATCH:
 case RID_AT_FINALLY:
 case RID_AT_SYNCHRONIZED:
 case RID_AT_THROW:
   std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
   statement = cp_parser_objc_statement (parser);
   break;

 case RID_TRY:
   std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
   statement = cp_parser_try_block (parser);
   break;

 case RID_NAMESPACE:

   if (std_attrs != (tree) 
# 11468 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 11468 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
     {


       saved_tokens.rollback();
       std_attrs = (tree) 
# 11473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 11473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
     }
   cp_parser_declaration_statement (parser);
   return;

 case RID_TRANSACTION_ATOMIC:
 case RID_TRANSACTION_RELAXED:
 case RID_SYNCHRONIZED:
 case RID_ATOMIC_NOEXCEPT:
 case RID_ATOMIC_CANCEL:
   std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
   statement = cp_parser_transaction (parser, token);
   break;
 case RID_TRANSACTION_CANCEL:
   std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
   statement = cp_parser_transaction_cancel (parser);
   break;

 default:


   break;
 }
    }
  else if (token->type == CPP_NAME)
    {


      token = cp_lexer_peek_nth_token (parser->lexer, 2);
      if (token->type == CPP_COLON)
 {




   cp_parser_label_for_labeled_statement (parser, std_attrs);
   in_compound = false;
   goto restart;
 }
    }

  else if (token->type == CPP_OPEN_BRACE)
    {
      std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);
      statement = cp_parser_compound_statement (parser, 
# 11517 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 11517 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           , BCS_NORMAL, false);
    }


  else if (token->type == CPP_PRAGMA)
    {





      if (in_compound)
 cp_parser_pragma (parser, pragma_compound, if_p);
      else if (!cp_parser_pragma (parser, pragma_stmt, if_p))
 goto restart;
      return;
    }
  else if (token->type == CPP_EOF)
    {
      cp_parser_error (parser, "expected statement");
      return;
    }





  if (!statement)
    {
      if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
 {
   if (std_attrs != (tree) 
# 11548 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 11548 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )


     saved_tokens.rollback();

   cp_parser_parse_tentatively (parser);

   cp_parser_declaration_statement (parser);

   if (cp_parser_parse_definitely (parser))
     return;

   if (std_attrs)
     cp_lexer_set_token_position (parser->lexer, statement_token);
 }

      if (loc_after_labels != 
# 11564 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 11564 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 )
 *loc_after_labels = statement_location;

      std_attrs = process_stmt_hotness_attribute (std_attrs, attrs_loc);


      statement = cp_parser_expression_statement (parser, in_statement_expr);


      if (attribute_fallthrough_p (std_attrs))
 {

   if (statement == (tree) 
# 11576 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 11576 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
     {

       statement = build_call_expr_internal_loc (statement_location,
       IFN_FALLTHROUGH,
       global_trees[TI_VOID_TYPE], 0);
       finish_expr_stmt (statement);
     }
   else
     warning_at (statement_location, OPT_Wattributes,
   "%<fallthrough%> attribute not followed by %<;%>");
   std_attrs = (tree) 
# 11587 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 11587 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
 }
    }


  if (statement && statement_code_p[(int) (((enum tree_code) (statement)->base.code))])
    (expr_check (((statement)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11593, __FUNCTION__))->exp.locus = (statement_location);


  if (std_attrs != (tree) 
# 11596 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 11596 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           )
    warning_at (attrs_loc,
  OPT_Wattributes,
  "attributes at the beginning of statement are ignored");
}



static tree
attr_chainon (tree attrs, tree attr)
{
  if (attrs == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
  if (attr == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
  return chainon (attrs, attr);
}
# 11627 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_label_for_labeled_statement (cp_parser* parser, tree attributes)
{
  cp_token *token;
  tree label = (tree) 
# 11631 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 11631 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;


  token = cp_lexer_peek_token (parser->lexer);
  if (token->type != CPP_NAME
      && token->type != CPP_KEYWORD)
    {
      cp_parser_error (parser, "expected labeled-statement");
      return;
    }



  bool fallthrough_p = token->flags & (1 << 5);

  parser->colon_corrects_to_scope_p = false;
  switch (token->keyword)
    {
    case RID_CASE:
      {
 tree expr, expr_hi;
 cp_token *ellipsis;


 cp_lexer_consume_token (parser->lexer);

 expr = cp_parser_constant_expression (parser);
 if (check_for_bare_parameter_packs (expr))
   expr = global_trees[TI_ERROR_MARK];

 ellipsis = cp_lexer_peek_token (parser->lexer);
 if (ellipsis->type == CPP_ELLIPSIS)
   {

     cp_lexer_consume_token (parser->lexer);
     expr_hi = cp_parser_constant_expression (parser);
     if (check_for_bare_parameter_packs (expr_hi))
       expr_hi = global_trees[TI_ERROR_MARK];



   }
 else
   expr_hi = (tree) 
# 11675 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 11675 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;

 if (parser->in_switch_statement_p)
   {
     tree l = finish_case_label (token->location, expr, expr_hi);
     if (l && ((enum tree_code) (l)->base.code) == CASE_LABEL_EXPR)
       {
  label = (*((const_cast<tree*> (tree_operand_check (((tree_check ((l), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11682, __FUNCTION__, (CASE_LABEL_EXPR)))), (2), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11682, __FUNCTION__)))));
  ((tree_check ((label), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11683, __FUNCTION__, (LABEL_DECL)))->base.private_flag) = fallthrough_p;
       }
   }
 else
   error_at (token->location,
      "case label %qE not within a switch statement",
      expr);
      }
      break;

    case RID_DEFAULT:

      cp_lexer_consume_token (parser->lexer);

      if (parser->in_switch_statement_p)
 {
   tree l = finish_case_label (token->location, (tree) 
# 11699 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null
# 11699 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                        , (tree) 
# 11699 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                          __null
# 11699 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                   );
   if (l && ((enum tree_code) (l)->base.code) == CASE_LABEL_EXPR)
       {
  label = (*((const_cast<tree*> (tree_operand_check (((tree_check ((l), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11702, __FUNCTION__, (CASE_LABEL_EXPR)))), (2), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11702, __FUNCTION__)))));
  ((tree_check ((label), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11703, __FUNCTION__, (LABEL_DECL)))->base.private_flag) = fallthrough_p;
       }
 }
      else
 error_at (token->location, "case label not within a switch statement");
      break;

    default:

      label = finish_label_stmt (cp_parser_identifier (parser));
      if (label && ((enum tree_code) (label)->base.code) == LABEL_DECL)
 ((tree_check ((label), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11714, __FUNCTION__, (LABEL_DECL)))->base.private_flag) = fallthrough_p;
      break;
    }


  cp_parser_require (parser, CPP_COLON, RT_COLON);







  if (label != (tree) 
# 11727 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
      
# 11728 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && cp_next_tokens_can_be_gnu_attribute_p (parser))
    {
      tree attrs;
      cp_parser_parse_tentatively (parser);
      attrs = cp_parser_gnu_attributes_opt (parser);
      if (attrs == (tree) 
# 11733 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null

   
# 11735 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  || attribute_fallthrough_p (attrs)
   || cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
 cp_parser_abort_tentative_parse (parser);
      else if (!cp_parser_parse_definitely (parser))
 ;
      else
 attributes = attr_chainon (attributes, attrs);
    }

  if (attributes != (tree) 
# 11744 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 11744 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
    cplus_decl_attributes (&label, attributes, 0);

  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
}
# 11760 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_expression_statement (cp_parser* parser, tree in_statement_expr)
{
  tree statement = (tree) 
# 11763 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 11763 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  location_t loc = token->location;


  tree attr = cp_parser_gnu_attributes_opt (parser);



  if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
    {
      statement = cp_parser_expression (parser);
      if (statement == global_trees[TI_ERROR_MARK]
   && !cp_parser_uncommitted_to_tentative_parse_p (parser))
 {
   cp_parser_skip_to_end_of_block_or_statement (parser);
   return global_trees[TI_ERROR_MARK];
 }
    }


  if (attribute_fallthrough_p (attr))
    {

      if (statement == (tree) 
# 11787 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 11787 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               )

 statement = build_call_expr_internal_loc (loc, IFN_FALLTHROUGH,
        global_trees[TI_VOID_TYPE], 0);
      else
 warning_at (loc, OPT_Wattributes,
      "%<fallthrough%> attribute not followed by %<;%>");
      attr = (tree) 
# 11794 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 11794 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }


  if (attr != (tree) 
# 11798 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 11798 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
    warning_at (loc, OPT_Wattributes,
  "attributes at the beginning of statement are ignored");


  if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON)
      && !cp_parser_uncommitted_to_tentative_parse_p (parser))
    {
      if (((enum tree_code) (statement)->base.code) == SCOPE_REF)
 error_at (token->location, "need %<typename%> before %qE because "
    "%qT is a dependent scope",
    statement, (*((const_cast<tree*> (tree_operand_check ((statement), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11809, __FUNCTION__))))));
      else if (is_overloaded_fn (statement)
        && ((tree_check (((((enum tree_code) (get_first_fn (statement))->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((get_first_fn (statement)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11811, __FUNCTION__, (TEMPLATE_DECL))))))))->result : get_first_fn (statement))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11811, __FUNCTION__, (FUNCTION_DECL)))->decl_with_vis.cxx_constructor))
 {

   tree fn = get_first_fn (statement);
   error_at (token->location,
      "%<%T::%D%> names the constructor, not the type",
      ((contains_struct_check ((fn), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11817, __FUNCTION__))->decl_minimal.context), ((contains_struct_check ((fn), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11817, __FUNCTION__))->decl_minimal.name));
 }
    }


  cp_parser_consume_semicolon_at_end_of_statement (parser);

  if (in_statement_expr
      && cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))


    statement = finish_stmt_expr_expr (statement, in_statement_expr);
  else if (statement)
    statement = finish_expr_stmt (statement);

  return statement;
}
# 11851 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_compound_statement (cp_parser *parser, tree in_statement_expr,
         int bcs_flags, bool function_body)
{
  tree compound_stmt;
  matching_braces braces;


  if (!braces.require_open (parser))
    return global_trees[TI_ERROR_MARK];
  if (((contains_struct_check (((tree_check2 (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11861, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11861, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 11861, __FUNCTION__))->decl_common.lang_flag_8)
      && !function_body && cxx_dialect < cxx14)
    pedwarn (input_location, OPT_Wpedantic,
      "compound-statement in %<constexpr%> function");

  compound_stmt = begin_compound_stmt (bcs_flags);

  while (cp_lexer_next_token_is_keyword (parser->lexer, RID_LABEL))
    cp_parser_label_declaration (parser);

  cp_parser_statement_seq_opt (parser, in_statement_expr);

  if (function_body)
    maybe_splice_retval_cleanup (compound_stmt);


  finish_compound_stmt (compound_stmt);

  braces.require_close (parser);

  return compound_stmt;
}







static void
cp_parser_statement_seq_opt (cp_parser* parser, tree in_statement_expr)
{

  while (true)
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);




      if (token->type == CPP_CLOSE_BRACE
   || token->type == CPP_EOF
   || token->type == CPP_PRAGMA_EOL
   || (token->type == CPP_KEYWORD && token->keyword == RID_AT_END))
 break;



      else if (token->type == CPP_KEYWORD && token->keyword == RID_ELSE)
 {
   if (parser->in_statement & 16)
     break;
   else
     {
       token = cp_lexer_consume_token (parser->lexer);
       error_at (token->location, "%<else%> without a previous %<if%>");
     }
 }


      cp_parser_statement (parser, in_statement_expr, true, 
# 11921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                           __null
# 11921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                               );
    }
}




static bool
cp_parser_range_based_for_with_init_p (cp_parser *parser)
{
  bool r = false;


  cp_lexer_save_tokens (parser->lexer);


  if (cp_parser_skip_to_closing_parenthesis_1 (parser,
                           false,
            CPP_SEMICOLON,
                              false) != -1)
    goto out;


  cp_lexer_consume_token (parser->lexer);


  r = (cp_parser_skip_to_closing_parenthesis_1 (parser,
                     false,
      CPP_COLON,
                        false) == -1);

out:

  cp_lexer_rollback_tokens (parser->lexer);

  return r;
}



static bool
cp_parser_init_statement_p (cp_parser *parser)
{

  cp_lexer_save_tokens (parser->lexer);


  int ret = cp_parser_skip_to_closing_parenthesis_1 (parser,
                          false,
           CPP_SEMICOLON,
                             false);


  cp_lexer_rollback_tokens (parser->lexer);

  return ret == -1;
}
# 11996 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_selection_statement (cp_parser* parser, bool *if_p,
          vec<tree> *chain)
{
  cp_token *token;
  enum rid keyword;
  token_indent_info guard_tinfo;

  if (if_p != 
# 12004 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 12004 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
    *if_p = false;


  token = cp_parser_require (parser, CPP_KEYWORD, RT_SELECT);
  guard_tinfo = get_token_indent_info (token);


  keyword = token->keyword;
  switch (keyword)
    {
    case RID_IF:
    case RID_SWITCH:
      {
 tree statement;
 tree condition;

 bool cx = false;
 if (keyword == RID_IF
     && cp_lexer_next_token_is_keyword (parser->lexer,
            RID_CONSTEXPR))
   {
     cx = true;
     cp_token *tok = cp_lexer_consume_token (parser->lexer);
     if (cxx_dialect < cxx17)
       pedwarn (tok->location, 0, "%<if constexpr%> only available "
         "with %<-std=c++17%> or %<-std=gnu++17%>");
   }


 matching_parens parens;
 if (!parens.require_open (parser))
   {
     cp_parser_skip_to_end_of_statement (parser);
     return global_trees[TI_ERROR_MARK];
   }


 if (keyword == RID_IF)
   {
     statement = begin_if_stmt ();
     ((tree_not_check2 (((tree_check ((statement), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12045, __FUNCTION__, (IF_STMT)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12045, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0) = cx;
   }
 else
   statement = begin_switch_stmt ();


 if (cp_parser_init_statement_p (parser))
   {
     tree decl;
     if (cxx_dialect < cxx17)
       pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,
         "init-statement in selection statements only available "
         "with %<-std=c++17%> or %<-std=gnu++17%>");
     if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
       {


  delete chain;
  chain = 
# 12063 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 12063 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             ;
       }
     cp_parser_init_statement (parser, &decl);
   }


 condition = cp_parser_condition (parser);

 if (!parens.require_close (parser))
   cp_parser_skip_to_closing_parenthesis (parser, true, false,
                         true);

 if (keyword == RID_IF)
   {
     bool nested_if;
     unsigned char in_statement;


     condition = finish_if_stmt_cond (condition, statement);

     if (global_options.x_warn_duplicated_cond)
       warn_duplicated_cond_add_or_warn (token->location, condition,
      &chain);


     in_statement = parser->in_statement;
     parser->in_statement |= 16;



     bool was_discarded = scope_chain->discarded_stmt;
     bool discard_then = (cx && !scope_chain->x_processing_template_decl
     && integer_zerop (condition));
     if (discard_then)
       {
  scope_chain->discarded_stmt = true;
  ++c_inhibit_evaluation_warnings;
       }

     cp_parser_implicitly_scoped_statement (parser, &nested_if,
         guard_tinfo);

     parser->in_statement = in_statement;

     finish_then_clause (statement);

     if (discard_then)
       {
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((statement), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12111, __FUNCTION__, (IF_STMT)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12111, __FUNCTION__))))) = (tree) 
# 12111 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 12111 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
  scope_chain->discarded_stmt = was_discarded;
  --c_inhibit_evaluation_warnings;
       }


     if (cp_lexer_next_token_is_keyword (parser->lexer,
      RID_ELSE))
       {
  bool discard_else = (cx && !scope_chain->x_processing_template_decl
         && integer_nonzerop (condition));
  if (discard_else)
    {
      scope_chain->discarded_stmt = true;
      ++c_inhibit_evaluation_warnings;
    }

  guard_tinfo
    = get_token_indent_info (cp_lexer_peek_token (parser->lexer));

  cp_lexer_consume_token (parser->lexer);
  if (global_options.x_warn_duplicated_cond)
    {
      if (cp_lexer_next_token_is_keyword (parser->lexer,
       RID_IF)
   && chain == 
# 12136 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 12136 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  )
        {



   chain = new vec<tree> ();
   if (!(tree_code_type[(int) (((enum tree_code) (condition)->base.code))] == tcc_constant)
       && !((non_type_check ((condition), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12143, __FUNCTION__))->base.side_effects_flag))
   {


     tree e = build1 (NOP_EXPR, ((contains_struct_check ((condition), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12147, __FUNCTION__))->typed.type),
        condition);
     (expr_check (((e)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12149, __FUNCTION__))->exp.locus = (token->location);
     chain->safe_push (e);
   }
        }
      else if (!cp_lexer_next_token_is_keyword (parser->lexer,
             RID_IF))
        {



   delete chain;
   chain = 
# 12160 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 12160 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              ;
        }
    }
  begin_else_clause (statement);

  cp_parser_implicitly_scoped_statement (parser, 
# 12165 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 12165 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                    ,
             guard_tinfo, chain);

  finish_else_clause (statement);






  if (if_p != 
# 12175 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 12175 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
    *if_p = true;

  if (discard_else)
    {
      (*((const_cast<tree*> (tree_operand_check (((tree_check ((statement), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12180, __FUNCTION__, (IF_STMT)))), (2), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12180, __FUNCTION__))))) = (tree) 
# 12180 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 12180 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
      scope_chain->discarded_stmt = was_discarded;
      --c_inhibit_evaluation_warnings;
    }
       }
     else
       {




  if (nested_if)
    warning_at (((((statement)) && ((tree_code_type[(int) (((enum tree_code) ((statement))->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) ((statement))->base.code))]) <= tcc_expression)) ? (statement)->exp.locus : ((location_t) 0)), OPT_Wdangling_else,
         "suggest explicit braces to avoid ambiguous"
         " %<else%>");
  if (global_options.x_warn_duplicated_cond)
    {

      delete chain;
      chain = 
# 12199 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 12199 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;
    }
       }


     finish_if_stmt (statement);
   }
 else
   {
     bool in_switch_statement_p;
     unsigned char in_statement;


     finish_switch_cond (condition, statement);


     in_switch_statement_p = parser->in_switch_statement_p;
     in_statement = parser->in_statement;
     parser->in_switch_statement_p = true;
     parser->in_statement |= 1;
     cp_parser_implicitly_scoped_statement (parser, if_p,
         guard_tinfo);
     parser->in_switch_statement_p = in_switch_statement_p;
     parser->in_statement = in_statement;


     finish_switch_stmt (statement);
   }

 return statement;
      }
      break;

    default:
      cp_parser_error (parser, "expected selection-statement");
      return global_trees[TI_ERROR_MARK];
    }
}







static void
cp_parser_maybe_commit_to_declaration (cp_parser* parser,
           cp_decl_specifier_seq *decl_specs)
{
  if (decl_specs->any_specifiers_p
      && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN)
      && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE)
      && !cp_parser_error_occurred (parser)
      && !(decl_specs->type
    && ((enum tree_code) (decl_specs->type)->base.code) == TYPE_DECL
    && is_constrained_auto (((contains_struct_check ((decl_specs->type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12254, __FUNCTION__))->typed.type))))
    cp_parser_commit_to_tentative_parse (parser);
}





static bool
cp_parser_check_condition_declarator (cp_parser* parser,
                                     cp_declarator *declarator,
                                     location_t loc)
{
  if (declarator == cp_error_declarator
      || function_declarator_p (declarator)
      || declarator->kind == cdk_array)
    {
      if (declarator == cp_error_declarator)
                           ;
      else if (declarator->kind == cdk_array)
       error_at (loc, "condition declares an array");
      else
       error_at (loc, "condition declares a function");
      if (parser->fully_implicit_function_template_p)
       abort_fully_implicit_template (parser);
      cp_parser_skip_to_closing_parenthesis (parser, true,
                                                         false,
                                                              false);
      return false;
    }
  else
    return true;
}
# 12303 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_condition (cp_parser* parser)
{
  cp_decl_specifier_seq type_specifiers;
  const char *saved_message;
  int declares_class_or_enum;


  cp_parser_parse_tentatively (parser);


  saved_message = parser->type_definition_forbidden_message;
  parser->type_definition_forbidden_message
    = "types may not be defined in conditions";

  cp_parser_decl_specifier_seq (parser,
    CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR,
    &type_specifiers,
    &declares_class_or_enum);

  parser->type_definition_forbidden_message = saved_message;



  tree prefix_attributes = type_specifiers.attributes;

  cp_parser_maybe_commit_to_declaration (parser, &type_specifiers);


  if (!cp_parser_error_occurred (parser))
    {
      tree decl;
      tree asm_specification;
      tree attributes;
      cp_declarator *declarator;
      tree initializer = (tree) 
# 12338 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 12338 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
      location_t loc = cp_lexer_peek_token (parser->lexer)->location;


      declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
      CP_PARSER_FLAGS_NONE,
                              
# 12344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 12344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ,
                          
# 12345 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 12345 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ,
                   false,
                   false,
                   false);

      attributes = cp_parser_attributes_opt (parser);

      asm_specification = cp_parser_asm_specification_opt (parser);







      if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))
 cp_parser_simulate_error (parser);



      if (cp_parser_parse_definitely (parser))
 {
   tree pushed_scope;
   bool non_constant_p = false;
   int flags = (1 << 2);

   if (!cp_parser_check_condition_declarator (parser, declarator, loc))
     return global_trees[TI_ERROR_MARK];


   decl = start_decl (declarator, &type_specifiers,
                          true,
        attributes, prefix_attributes,
        &pushed_scope);


   if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
     {
       initializer = cp_parser_braced_list (parser, &non_constant_p);
       (((tree_not_check2 (((tree_check ((initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12385, __FUNCTION__, (CONSTRUCTOR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12385, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)) = 1;
       flags = 0;
     }
   else if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
     {

       cp_lexer_consume_token (parser->lexer);
       initializer = cp_parser_initializer_clause (parser,
         &non_constant_p);
     }
   else
     {
       cp_parser_error (parser, "expected initializer");
       initializer = global_trees[TI_ERROR_MARK];
     }
   if ((((enum tree_code) (initializer)->base.code) == CONSTRUCTOR && ((contains_struct_check ((initializer), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12400, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE]))
     maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);


   cp_finish_decl (decl,
     initializer, !non_constant_p,
     asm_specification,
     flags);

   if (pushed_scope)
     pop_scope (pushed_scope);

   return convert_from_reference (decl);
 }
    }


  else
    cp_parser_abort_tentative_parse (parser);


  return cp_parser_expression (parser);
}




static tree
cp_parser_for (cp_parser *parser, bool ivdep, unsigned short unroll)
{
  tree init, scope, decl;
  bool is_range_for;


  scope = begin_for_scope (&init);


  is_range_for = cp_parser_init_statement (parser, &decl);

  if (is_range_for)
    return cp_parser_range_for (parser, scope, init, decl, ivdep, unroll,
    false);
  else
    return cp_parser_c_for (parser, scope, init, ivdep, unroll);
}

static tree
cp_parser_c_for (cp_parser *parser, tree scope, tree init, bool ivdep,
   unsigned short unroll)
{

  tree condition = (tree) 
# 12451 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 12451 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
  tree expression = (tree) 
# 12452 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 12452 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  tree stmt;

  stmt = begin_for_stmt (scope, init);


  finish_init_stmt (stmt);


  if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
    condition = cp_parser_condition (parser);
  else if (ivdep)
    {
      cp_parser_error (parser, "missing loop condition in loop with "
         "%<GCC ivdep%> pragma");
      condition = global_trees[TI_ERROR_MARK];
    }
  else if (unroll)
    {
      cp_parser_error (parser, "missing loop condition in loop with "
         "%<GCC unroll%> pragma");
      condition = global_trees[TI_ERROR_MARK];
    }
  finish_for_cond (condition, stmt, ivdep, unroll);

  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);


  if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN))
    expression = cp_parser_expression (parser);
  finish_for_expr (expression, stmt);

  return stmt;
}
# 12497 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_range_for (cp_parser *parser, tree scope, tree init, tree range_decl,
       bool ivdep, unsigned short unroll, bool is_omp)
{
  tree stmt, range_expr;
  auto_vec <cxx_binding *, 16> bindings;
  auto_vec <tree, 16> names;
  tree decomp_first_name = (tree) 
# 12504 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 12504 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;
  unsigned int decomp_cnt = 0;



  if (range_decl != global_trees[TI_ERROR_MARK])
    {
      if (((tree_check3 ((range_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12511, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2))
 {
   tree v = (decl_value_expr_lookup ((contains_struct_check ((range_decl), (TS_DECL_WRTL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12513, __FUNCTION__))));


   if (((enum tree_code) (v)->base.code) == ARRAY_REF
       && (((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12517, __FUNCTION__))))))->base.code) == VAR_DECL)
       && ((((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12518, __FUNCTION__))))))->base.code) == VAR_DECL) && ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12518, __FUNCTION__)))))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12518, __FUNCTION__))->decl_common.lang_specific) ? ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12518, __FUNCTION__)))))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12518, __FUNCTION__))->decl_common.lang_specific)->u.base.selector == lds_decomp : false))
     {
       tree d = range_decl;
       range_decl = (*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12521, __FUNCTION__)))));
       decomp_cnt = tree_to_uhwi ((*((const_cast<tree*> (tree_operand_check ((v), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12522, __FUNCTION__)))))) + 1;
       decomp_first_name = d;
       for (unsigned int i = 0; i < decomp_cnt; i++, d = (((contains_struct_check (((contains_struct_check ((d), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12524, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12524, __FUNCTION__))->common.chain)))
  {
    tree name = ((contains_struct_check ((d), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12526, __FUNCTION__))->decl_minimal.name);
    names.safe_push (name);
    bindings.safe_push ((((struct lang_identifier*)(tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12528, __FUNCTION__, (IDENTIFIER_NODE))))->bindings));
    (((struct lang_identifier*)(tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12529, __FUNCTION__, (IDENTIFIER_NODE))))->bindings)
      = (((struct lang_identifier*)(tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12530, __FUNCTION__, (IDENTIFIER_NODE))))->bindings)->previous;
  }
     }
 }
      if (names.is_empty ())
 {
   tree name = ((contains_struct_check ((range_decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12536, __FUNCTION__))->decl_minimal.name);
   names.safe_push (name);
   bindings.safe_push ((((struct lang_identifier*)(tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12538, __FUNCTION__, (IDENTIFIER_NODE))))->bindings));
   (((struct lang_identifier*)(tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12539, __FUNCTION__, (IDENTIFIER_NODE))))->bindings) = (((struct lang_identifier*)(tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12539, __FUNCTION__, (IDENTIFIER_NODE))))->bindings)->previous;
 }
    }

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      bool expr_non_constant_p;
      range_expr = cp_parser_braced_list (parser, &expr_non_constant_p);
    }
  else
    range_expr = cp_parser_expression (parser);


  for (unsigned int i = 0; i < names.length (); i++)
    {
      cxx_binding *binding = bindings[i];
      binding->previous = (((struct lang_identifier*)(tree_check ((names[i]), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12555, __FUNCTION__, (IDENTIFIER_NODE))))->bindings);
      (((struct lang_identifier*)(tree_check ((names[i]), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12556, __FUNCTION__, (IDENTIFIER_NODE))))->bindings) = binding;
    }



  if (is_omp)
    return range_expr;



  if (scope_chain->x_processing_template_decl)
    {
      if (check_for_bare_parameter_packs (range_expr))
 range_expr = global_trees[TI_ERROR_MARK];
      stmt = begin_range_for_stmt (scope, init);
      if (ivdep)
 ((tree_not_check2 (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12572, __FUNCTION__, (RANGE_FOR_STMT)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12572, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_6) = 1;
      if (unroll)
 (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12574, __FUNCTION__, (RANGE_FOR_STMT)))), (4), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12574, __FUNCTION__))))) = build_int_cst (integer_types[itk_int], unroll);
      finish_range_for_decl (stmt, range_decl, range_expr);
      if (!type_dependent_expression_p (range_expr)

   && !(((enum tree_code) (range_expr)->base.code) == CONSTRUCTOR && ((contains_struct_check ((range_expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12578, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE]))
 do_range_for_auto_deduction (range_decl, range_expr);
    }
  else
    {
      stmt = begin_for_stmt (scope, init);
      stmt = cp_convert_range_for (stmt, range_decl, range_expr,
       decomp_first_name, decomp_cnt, ivdep,
       unroll);
    }
  return stmt;
}




static tree
build_range_temp (tree range_expr)
{
  tree range_type, range_temp;



  range_type = cp_build_reference_type (make_auto (), true);
  range_type = do_auto_deduction (range_type, range_expr,
      type_uses_auto (range_type));


  range_temp = build_decl (input_location, VAR_DECL, cp_global_trees[CPTI_FOR_RANGE__IDENTIFIER],
      range_type);
  ((range_temp)->base.used_flag) = 1;
  ((contains_struct_check ((range_temp), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12609, __FUNCTION__))->decl_common.artificial_flag) = 1;

  return range_temp;
}






static void
do_range_for_auto_deduction (tree decl, tree range_expr)
{
  tree auto_node = type_uses_auto (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12622, __FUNCTION__))->typed.type));
  if (auto_node)
    {
      tree begin_dummy, end_dummy, range_temp, iter_type, iter_decl;
      range_temp = convert_from_reference (build_range_temp (range_expr));
      iter_type = (cp_parser_perform_range_for_lookup
     (range_temp, &begin_dummy, &end_dummy));
      if (iter_type)
 {
   iter_decl = build_decl (input_location, VAR_DECL, (tree) 
# 12631 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                    __null
# 12631 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                             ,
      iter_type);
   iter_decl = build_x_indirect_ref (input_location, iter_decl,
         RO_UNARY_STAR,
         tf_warning_or_error);
   ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12636, __FUNCTION__))->typed.type) = do_auto_deduction (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12636, __FUNCTION__))->typed.type),
      iter_decl, auto_node);
 }
    }
}
# 12677 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
tree
cp_convert_range_for (tree statement, tree range_decl, tree range_expr,
        tree decomp_first_name, unsigned int decomp_cnt,
        bool ivdep, unsigned short unroll)
{
  tree begin, end;
  tree iter_type, begin_expr, end_expr;
  tree condition, expression;

  range_expr = mark_lvalue_use (range_expr);

  if (range_decl == global_trees[TI_ERROR_MARK] || range_expr == global_trees[TI_ERROR_MARK])


    begin_expr = end_expr = iter_type = global_trees[TI_ERROR_MARK];
  else
    {
      tree range_temp;

      if ((((enum tree_code) (range_expr)->base.code) == VAR_DECL)
   && array_of_runtime_bound_p (((contains_struct_check ((range_expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12697, __FUNCTION__))->typed.type)))

 range_temp = range_expr;
      else
 {
   range_temp = build_range_temp (range_expr);
   pushdecl (range_temp);
   cp_finish_decl (range_temp, range_expr,
                         false, (tree) 
# 12705 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 12705 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ,
     (1 << 2));
   range_temp = convert_from_reference (range_temp);
 }
      iter_type = cp_parser_perform_range_for_lookup (range_temp,
            &begin_expr, &end_expr);
    }


  begin = build_decl (input_location, VAR_DECL, cp_global_trees[CPTI_FOR_BEGIN__IDENTIFIER],
        iter_type);
  ((begin)->base.used_flag) = 1;
  ((contains_struct_check ((begin), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12717, __FUNCTION__))->decl_common.artificial_flag) = 1;
  pushdecl (begin);
  cp_finish_decl (begin, begin_expr,
                        false, (tree) 
# 12720 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 12720 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ,
    (1 << 2));

  if (cxx_dialect >= cxx17)
    iter_type = cv_unqualified (((contains_struct_check ((end_expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12724, __FUNCTION__))->typed.type));
  end = build_decl (input_location, VAR_DECL, cp_global_trees[CPTI_FOR_END__IDENTIFIER], iter_type);
  ((end)->base.used_flag) = 1;
  ((contains_struct_check ((end), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12727, __FUNCTION__))->decl_common.artificial_flag) = 1;
  pushdecl (end);
  cp_finish_decl (end, end_expr,
                        false, (tree) 
# 12730 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 12730 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ,
    (1 << 2));

  finish_init_stmt (statement);


  condition = build_x_binary_op (input_location, NE_EXPR,
     begin, ERROR_MARK,
     end, ERROR_MARK,
     
# 12739 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
    __null
# 12739 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        , tf_warning_or_error);
  finish_for_cond (condition, statement, ivdep, unroll);


  expression = finish_unary_op_expr (input_location,
         PREINCREMENT_EXPR, begin,
         tf_warning_or_error);
  finish_for_expr (expression, statement);

  if ((((enum tree_code) (range_decl)->base.code) == VAR_DECL) && ((((enum tree_code) (range_decl)->base.code) == VAR_DECL) && ((contains_struct_check ((range_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12748, __FUNCTION__))->decl_common.lang_specific) ? ((contains_struct_check ((range_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12748, __FUNCTION__))->decl_common.lang_specific)->u.base.selector == lds_decomp : false))
    cp_maybe_mangle_decomp (range_decl, decomp_first_name, decomp_cnt);


  cp_finish_decl (range_decl,
    build_x_indirect_ref (input_location, begin, RO_UNARY_STAR,
     tf_warning_or_error),
                        false, (tree) 
# 12755 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 12755 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ,
    (1 << 2));
  if ((((enum tree_code) (range_decl)->base.code) == VAR_DECL) && ((((enum tree_code) (range_decl)->base.code) == VAR_DECL) && ((contains_struct_check ((range_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12757, __FUNCTION__))->decl_common.lang_specific) ? ((contains_struct_check ((range_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12757, __FUNCTION__))->decl_common.lang_specific)->u.base.selector == lds_decomp : false))
    cp_finish_decomp (range_decl, decomp_first_name, decomp_cnt);

  return statement;
}






static tree
cp_parser_perform_range_for_lookup (tree range, tree *begin, tree *end)
{
  if (((range) == global_trees[TI_ERROR_MARK] || ((range) && ((contains_struct_check (((range)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12771, __FUNCTION__))->typed.type) == global_trees[TI_ERROR_MARK])))
    {
      *begin = *end = global_trees[TI_ERROR_MARK];
      return global_trees[TI_ERROR_MARK];
    }

  if (!(((tree_class_check ((complete_type (((contains_struct_check ((range), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12777, __FUNCTION__))->typed.type))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12777, __FUNCTION__))->type_common.size) != (tree) 
# 12777 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 12777 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      ))
    {
      error ("range-based %<for%> expression of type %qT "
      "has incomplete type", ((contains_struct_check ((range), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12780, __FUNCTION__))->typed.type));
      *begin = *end = global_trees[TI_ERROR_MARK];
      return global_trees[TI_ERROR_MARK];
    }
  if (((enum tree_code) (((contains_struct_check ((range), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12784, __FUNCTION__))->typed.type))->base.code) == ARRAY_TYPE)
    {

      *begin = decay_conversion (range, tf_warning_or_error);
      *end = build_binary_op (input_location, PLUS_EXPR,
         range,
         array_type_nelts_top (((contains_struct_check ((range), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12790, __FUNCTION__))->typed.type)),
         false);
      return ((contains_struct_check ((*begin), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12792, __FUNCTION__))->typed.type);
    }
  else
    {

      tree id_begin, id_end;
      tree member_begin, member_end;

      *begin = *end = global_trees[TI_ERROR_MARK];

      id_begin = (__builtin_constant_p ("begin") ? get_identifier_with_length (("begin"), strlen ("begin")) : get_identifier ("begin"));
      id_end = (__builtin_constant_p ("end") ? get_identifier_with_length (("end"), strlen ("end")) : get_identifier ("end"));
      member_begin = lookup_member (((contains_struct_check ((range), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12804, __FUNCTION__))->typed.type), id_begin,
                    2, false,
        tf_warning_or_error);
      member_end = lookup_member (((contains_struct_check ((range), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12807, __FUNCTION__))->typed.type), id_end,
                  2, false,
      tf_warning_or_error);

      if (member_begin != (tree) 
# 12811 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null 
# 12811 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   && member_end != (tree) 
# 12811 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                    __null
# 12811 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                             )
 {

   *begin = cp_parser_range_for_member_function (range, id_begin);
   *end = cp_parser_range_for_member_function (range, id_end);
 }
      else
 {

   releasing_vec vec;

   vec_safe_push (vec, range);

   member_begin = perform_koenig_lookup (id_begin, vec,
      tf_warning_or_error);
   *begin = finish_call_expr (member_begin, &vec, false, true,
         tf_warning_or_error);
   member_end = perform_koenig_lookup (id_end, vec,
           tf_warning_or_error);
   *end = finish_call_expr (member_end, &vec, false, true,
       tf_warning_or_error);
 }


      if (*begin == global_trees[TI_ERROR_MARK] || *end == global_trees[TI_ERROR_MARK])
 {

   *begin = *end = global_trees[TI_ERROR_MARK];
   return global_trees[TI_ERROR_MARK];
 }
      else if (type_dependent_expression_p (*begin)
        || type_dependent_expression_p (*end))


 return (tree) 
# 12845 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 12845 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
      else
 {
   tree iter_type = cv_unqualified (((contains_struct_check ((*begin), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12848, __FUNCTION__))->typed.type));


   if (!comptypes ((iter_type), (cv_unqualified (((contains_struct_check ((*end), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12851, __FUNCTION__))->typed.type))), 0))
     {
       if (cxx_dialect >= cxx17
    && (build_x_binary_op (input_location, NE_EXPR,
      *begin, ERROR_MARK,
      *end, ERROR_MARK,
      
# 12857 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null
# 12857 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         , tf_none)
        != global_trees[TI_ERROR_MARK]))


                    ;
       else
  error ("inconsistent begin/end types in range-based %<for%> "
         "statement: %qT and %qT",
         ((contains_struct_check ((*begin), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12865, __FUNCTION__))->typed.type), ((contains_struct_check ((*end), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 12865, __FUNCTION__))->typed.type));
     }
   return iter_type;
 }
    }
}




static tree
cp_parser_range_for_member_function (tree range, tree identifier)
{
  tree member, res;

  member = finish_class_member_access_expr (range, identifier,
         false, tf_warning_or_error);
  if (member == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  releasing_vec vec;
  res = finish_call_expr (member, &vec,
                          false,
                  false,
     tf_warning_or_error);
  return res;
}
# 12903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_iteration_statement (cp_parser* parser, bool *if_p, bool ivdep,
          unsigned short unroll)
{
  cp_token *token;
  enum rid keyword;
  tree statement;
  unsigned char in_statement;
  token_indent_info guard_tinfo;


  token = cp_parser_require (parser, CPP_KEYWORD, RT_ITERATION);
  if (!token)
    return global_trees[TI_ERROR_MARK];

  guard_tinfo = get_token_indent_info (token);



  in_statement = parser->in_statement;


  keyword = token->keyword;
  switch (keyword)
    {
    case RID_WHILE:
      {
 tree condition;


 statement = begin_while_stmt ();

 matching_parens parens;
 parens.require_open (parser);

 condition = cp_parser_condition (parser);
 finish_while_stmt_cond (condition, statement, ivdep, unroll);

 parens.require_close (parser);

 parser->in_statement = 2;
 bool prev = note_iteration_stmt_body_start ();
 cp_parser_already_scoped_statement (parser, if_p, guard_tinfo);
 note_iteration_stmt_body_end (prev);
 parser->in_statement = in_statement;

 finish_while_stmt (statement);
      }
      break;

    case RID_DO:
      {
 tree expression;


 statement = begin_do_stmt ();

 parser->in_statement = 2;
 bool prev = note_iteration_stmt_body_start ();
 cp_parser_implicitly_scoped_statement (parser, 
# 12962 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null
# 12962 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   , guard_tinfo);
 note_iteration_stmt_body_end (prev);
 parser->in_statement = in_statement;
 finish_do_body (statement);

 cp_parser_require_keyword (parser, RID_WHILE, RT_WHILE);

 matching_parens parens;
 parens.require_open (parser);

 expression = cp_parser_expression (parser);

 finish_do_stmt (expression, statement, ivdep, unroll);

 parens.require_close (parser);

 cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
      }
      break;

    case RID_FOR:
      {

 matching_parens parens;
 parens.require_open (parser);

 statement = cp_parser_for (parser, ivdep, unroll);


 parens.require_close (parser);


 parser->in_statement = 2;
 bool prev = note_iteration_stmt_body_start ();
 cp_parser_already_scoped_statement (parser, if_p, guard_tinfo);
 note_iteration_stmt_body_end (prev);
 parser->in_statement = in_statement;


 finish_for_stmt (statement);
      }
      break;

    default:
      cp_parser_error (parser, "expected iteration-statement");
      statement = global_trees[TI_ERROR_MARK];
      break;
    }

  return statement;
}
# 13021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_init_statement (cp_parser *parser, tree *decl)
{






  if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
    {
      bool is_range_for = false;
      bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;


      if (cp_parser_range_based_for_with_init_p (parser))
 {
   tree dummy;
   cp_parser_parse_tentatively (parser);

   cp_parser_simple_declaration (parser,
                                       false,
     &dummy);
   cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
   if (!cp_parser_parse_definitely (parser))

     cp_parser_expression_statement (parser, (tree) 
# 13047 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 13047 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     );

   if (cxx_dialect < cxx20)
     {
       pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,
         "range-based %<for%> loops with initializer only "
         "available with %<-std=c++20%> or %<-std=gnu++20%>");
       *decl = global_trees[TI_ERROR_MARK];
     }
 }


      parser->colon_corrects_to_scope_p = false;



      cp_parser_parse_tentatively (parser);

      cp_parser_simple_declaration (parser,
                                          false,
        decl);
      parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
      if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))
 {

   cp_lexer_consume_token (parser->lexer);
   is_range_for = true;
   if (cxx_dialect < cxx11)
     pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,
       "range-based %<for%> loops only available with "
       "%<-std=c++11%> or %<-std=gnu++11%>");
 }
      else


 cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);

      if (cp_parser_parse_definitely (parser))
 return is_range_for;


    }

  cp_parser_expression_statement (parser, (tree) 
# 13090 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                         __null
# 13090 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  );
  return false;
}
# 13111 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_jump_statement (cp_parser* parser)
{
  tree statement = global_trees[TI_ERROR_MARK];
  cp_token *token;
  enum rid keyword;
  unsigned char in_statement;


  token = cp_parser_require (parser, CPP_KEYWORD, RT_JUMP);
  if (!token)
    return global_trees[TI_ERROR_MARK];


  keyword = token->keyword;
  switch (keyword)
    {
    case RID_BREAK:
      in_statement = parser->in_statement & ~16;
      switch (in_statement)
 {
 case 0:
   error_at (token->location, "break statement not within loop or switch");
   break;
 default:
   ((void)(!((in_statement & 1) || in_statement == 2) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13136, __FUNCTION__), 0 : 0))
                                             ;
   statement = finish_break_stmt ();
   if (in_statement == 2)
     break_maybe_infinite_loop ();
   break;
 case 4:
   error_at (token->location, "invalid exit from OpenMP structured block");
   break;
 case 8:
   error_at (token->location, "break statement used with OpenMP for loop");
   break;
 }
      cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
      break;

    case RID_CONTINUE:
      switch (parser->in_statement & ~(1 | 16))
 {
 case 0:
   error_at (token->location, "continue statement not within a loop");
   break;

 case 2:
 case 8:
   statement = finish_continue_stmt ();
   break;
 case 4:
   error_at (token->location, "invalid exit from OpenMP structured block");
   break;
 default:
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13167, __FUNCTION__));
 }
      cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
      break;

    case RID_CO_RETURN:
    case RID_RETURN:
      {
 tree expr;
 bool expr_non_constant_p;

 if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
   {
     cp_lexer_set_source_position (parser->lexer);
     maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
     expr = cp_parser_braced_list (parser, &expr_non_constant_p);
   }
 else if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
   expr = cp_parser_expression (parser);
 else


   expr = (tree) 
# 13189 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 13189 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;


 if (keyword == RID_CO_RETURN)
   statement = finish_co_return_stmt (token->location, expr);
 else if (((tree_not_check2 (((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13194, __FUNCTION__, (FUNCTION_DECL)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13194, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_2) && scope_chain->discarded_stmt)
                                                         ;
 else
   statement = finish_return_stmt (expr);

 cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
      }
      break;

    case RID_GOTO:
      if (parser->in_function_body
   && ((contains_struct_check (((tree_check2 (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13205, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13205, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13205, __FUNCTION__))->decl_common.lang_flag_8))
 {
   error ("%<goto%> in %<constexpr%> function");
   ((cfun + 0)->language)->invalid_constexpr = true;
 }


      if (cp_lexer_next_token_is (parser->lexer, CPP_MULT))
 {

   pedwarn (token->location, OPT_Wpedantic, "ISO C++ forbids computed gotos");

   cp_lexer_consume_token (parser->lexer);

   finish_goto_stmt (cp_parser_expression (parser));
 }
      else
 finish_goto_stmt (cp_parser_identifier (parser));

      cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
      break;

    default:
      cp_parser_error (parser, "expected jump-statement");
      break;
    }

  return statement;
}






static void
cp_parser_declaration_statement (cp_parser* parser)
{
  void *p;


  p = __extension__ ({ struct obstack *__h = (&declarator_obstack); __extension__ ({ struct obstack *__o = (__h); size_t __len = ((0)); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); ((void) ((__o)->next_free += (__len))); }); __extension__ ({ struct obstack *__o1 = (__h); void *__value = (void *) __o1->object_base; if (__o1->next_free == __value) __o1->maybe_empty_object = 1; __o1->next_free = ((sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (((__o1->next_free) - (sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (__o1->alignment_mask)) & ~(__o1->alignment_mask))); if ((size_t) (__o1->next_free - (char *) __o1->chunk) > (size_t) (__o1->chunk_limit - (char *) __o1->chunk)) __o1->next_free = __o1->chunk_limit; __o1->object_base = __o1->next_free; __value; }); });


  cp_parser_block_declaration (parser, true);


  __extension__ ({ struct obstack *__o = (&declarator_obstack); void *__obj = (void *) (p); if (__obj > (void *) __o->chunk && __obj < (void *) __o->chunk_limit) __o->next_free = __o->object_base = (char *) __obj; else _obstack_free (__o, __obj); });
}
# 13274 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_implicitly_scoped_statement (cp_parser* parser, bool *if_p,
           const token_indent_info &guard_tinfo,
           vec<tree> *chain)
{
  tree statement;
  location_t body_loc = cp_lexer_peek_token (parser->lexer)->location;
  location_t body_loc_after_labels = ((location_t) 0);
  token_indent_info body_tinfo
    = get_token_indent_info (cp_lexer_peek_token (parser->lexer));

  if (if_p != 
# 13285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 13285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
    *if_p = false;


  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
    {
      cp_lexer_consume_token (parser->lexer);
      statement = add_stmt (build_empty_stmt (body_loc));

      if (guard_tinfo.keyword == RID_IF
   && !cp_lexer_next_token_is_keyword (parser->lexer, RID_ELSE))
 warning_at (body_loc, OPT_Wempty_body,
      "suggest braces around empty body in an %<if%> statement");
      else if (guard_tinfo.keyword == RID_ELSE)
 warning_at (body_loc, OPT_Wempty_body,
      "suggest braces around empty body in an %<else%> statement");
    }

  else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    statement = cp_parser_compound_statement (parser, 
# 13304 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                     __null
# 13304 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                         , BCS_NORMAL, false);

  else
    {

      statement = begin_compound_stmt (0);

      cp_parser_statement (parser, (tree) 
# 13311 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 13311 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , false, if_p, chain,
      &body_loc_after_labels);

      finish_compound_stmt (statement);
    }

  token_indent_info next_tinfo
    = get_token_indent_info (cp_lexer_peek_token (parser->lexer));
  warn_for_misleading_indentation (guard_tinfo, body_tinfo, next_tinfo);

  if (body_loc_after_labels != ((location_t) 0)
      && next_tinfo.type != CPP_SEMICOLON)
    warn_for_multistatement_macros (body_loc_after_labels, next_tinfo.location,
        guard_tinfo.location, guard_tinfo.keyword);


  return statement;
}






static void
cp_parser_already_scoped_statement (cp_parser* parser, bool *if_p,
        const token_indent_info &guard_tinfo)
{

  if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))
    {
      token_indent_info body_tinfo
 = get_token_indent_info (cp_lexer_peek_token (parser->lexer));
      location_t loc_after_labels = ((location_t) 0);

      cp_parser_statement (parser, (tree) 
# 13346 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 13346 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , false, if_p, 
# 13346 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                          __null
# 13346 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                              ,
      &loc_after_labels);
      token_indent_info next_tinfo
 = get_token_indent_info (cp_lexer_peek_token (parser->lexer));
      warn_for_misleading_indentation (guard_tinfo, body_tinfo, next_tinfo);

      if (loc_after_labels != ((location_t) 0)
   && next_tinfo.type != CPP_SEMICOLON)
 warn_for_multistatement_macros (loc_after_labels, next_tinfo.location,
     guard_tinfo.location,
     guard_tinfo.keyword);
    }
  else
    {


      matching_braces braces;
      braces.require_open (parser);

      while (cp_lexer_next_token_is_keyword (parser->lexer, RID_LABEL))
 cp_parser_label_declaration (parser);

      cp_parser_statement_seq_opt (parser, (tree) 
# 13368 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 13368 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   );
      braces.require_close (parser);
    }
}
# 13381 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_declaration_seq_opt (cp_parser* parser)
{
  while (true)
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);

      if (token->type == CPP_CLOSE_BRACE
   || token->type == CPP_EOF)
 break;
      else
 cp_parser_toplevel_declaration (parser);
    }
}
# 13415 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_declaration (cp_parser* parser)
{
  int saved_pedantic;


  if (cp_parser_extension_opt (parser, &saved_pedantic))
    {

      cp_parser_declaration (parser);

      global_options.x_pedantic = saved_pedantic;

      return;
    }


  cp_token *token1 = cp_lexer_peek_token (parser->lexer);
  cp_token *token2 = 
# 13433 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 13433 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;

  if (token1->type != CPP_EOF)
    token2 = cp_lexer_peek_nth_token (parser->lexer, 2);


  void *p = __extension__ ({ struct obstack *__h = (&declarator_obstack); __extension__ ({ struct obstack *__o = (__h); size_t __len = ((0)); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); ((void) ((__o)->next_free += (__len))); }); __extension__ ({ struct obstack *__o1 = (__h); void *__value = (void *) __o1->object_base; if (__o1->next_free == __value) __o1->maybe_empty_object = 1; __o1->next_free = ((sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (((__o1->next_free) - (sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (__o1->alignment_mask)) & ~(__o1->alignment_mask))); if ((size_t) (__o1->next_free - (char *) __o1->chunk) > (size_t) (__o1->chunk_limit - (char *) __o1->chunk)) __o1->next_free = __o1->chunk_limit; __o1->object_base = __o1->next_free; __value; }); });

  tree attributes = (tree) 
# 13441 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 13441 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;



  if (token1->keyword == RID_EXTERN
      && cp_parser_is_pure_string_literal (token2))
    cp_parser_linkage_specification (parser);



  else if (token1->keyword == RID_TEMPLATE)
    {

      if (token2->type == CPP_LESS
   && cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_GREATER)
 cp_parser_explicit_specialization (parser);

      else if (token2->type == CPP_LESS)
 cp_parser_template_declaration (parser, false);

      else
 cp_parser_explicit_instantiation (parser);
    }


  else if (token1->keyword == RID_EXPORT)
    cp_parser_template_declaration (parser, false);



  else if (cp_parser_allow_gnu_extensions_p (parser)
    && token2->keyword == RID_TEMPLATE
    && (token1->keyword == RID_EXTERN
        || token1->keyword == RID_STATIC
        || token1->keyword == RID_INLINE))
    cp_parser_explicit_instantiation (parser);


  else if (token1->keyword == RID_NAMESPACE
    && (
        (token2->type == CPP_NAME
  && (cp_lexer_peek_nth_token (parser->lexer, 3)->type
      != CPP_EQ))
               || (token2->type == CPP_OPEN_SQUARE
                   && cp_lexer_peek_nth_token (parser->lexer, 3)->type
                   == CPP_OPEN_SQUARE)

        || token2->type == CPP_OPEN_BRACE
        || token2->keyword == RID_ATTRIBUTE))
    cp_parser_namespace_definition (parser);

  else if (token2->keyword == RID_NAMESPACE
    && token1->keyword == RID_INLINE)
    cp_parser_namespace_definition (parser);

  else if (((c_language & clk_objc) != 0) && ((unsigned int) (token1->keyword) >= (unsigned int) RID_FIRST_AT && (unsigned int) (token1->keyword) <= (unsigned int) RID_LAST_AT))
    cp_parser_objc_declaration (parser, (tree) 
# 13497 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 13497 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                );
  else if (((c_language & clk_objc) != 0)
    && token1->keyword == RID_ATTRIBUTE
    && cp_parser_objc_valid_prefix_attributes (parser, &attributes))
    cp_parser_objc_declaration (parser, attributes);


  else if (global_options.x_flag_concepts
    && cp_parser_template_declaration_after_export (parser,
                       false))
                  ;
  else

    cp_parser_block_declaration (parser, false);


  __extension__ ({ struct obstack *__o = (&declarator_obstack); void *__obj = (void *) (p); if (__obj > (void *) __o->chunk && __obj < (void *) __o->chunk_limit) __o->next_free = __o->object_base = (char *) __obj; else _obstack_free (__o, __obj); });
}



static void
cp_parser_toplevel_declaration (cp_parser* parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  if (token->type == CPP_PRAGMA)




    cp_parser_pragma (parser, pragma_external, 
# 13528 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 13528 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  );
  else if (token->type == CPP_SEMICOLON)
    {
      cp_lexer_consume_token (parser->lexer);


      if (cxx_dialect < cxx11)
 pedwarn (input_location, OPT_Wpedantic, "extra %<;%>");
    }
  else

    cp_parser_declaration (parser);
}
# 13564 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_block_declaration (cp_parser *parser,
        bool statement_p)
{
  int saved_pedantic;


  if (cp_parser_extension_opt (parser, &saved_pedantic))
    {

      cp_parser_block_declaration (parser, statement_p);

      global_options.x_pedantic = saved_pedantic;

      return;
    }



  cp_token *token1 = cp_lexer_peek_token (parser->lexer);


  if (token1->keyword == RID_ASM)
    {
      if (statement_p)
 cp_parser_commit_to_tentative_parse (parser);
      cp_parser_asm_definition (parser);
    }


  else if (token1->keyword == RID_NAMESPACE)
    cp_parser_namespace_alias_definition (parser);


  else if (token1->keyword == RID_USING)
    {
      cp_token *token2;

      if (statement_p)
 cp_parser_commit_to_tentative_parse (parser);


      token2 = cp_lexer_peek_nth_token (parser->lexer, 2);
      if (token2->keyword == RID_NAMESPACE)
 cp_parser_using_directive (parser);


      else if (cxx_dialect >= cxx11
        && token2->type == CPP_NAME
        && ((cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_EQ)
     || (cp_nth_tokens_can_be_attribute_p (parser, 3))))
 cp_parser_alias_declaration (parser);

      else
 cp_parser_using_declaration (parser,
                                  false);
    }


  else if (token1->keyword == RID_LABEL)
    {
      cp_lexer_consume_token (parser->lexer);
      error_at (token1->location, "%<__label__%> not at the beginning of a block");
      cp_parser_skip_to_end_of_statement (parser);

      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
 cp_lexer_consume_token (parser->lexer);
    }

  else if (token1->keyword == RID_STATIC_ASSERT)
    cp_parser_static_assert (parser, false);

  else
    cp_parser_simple_declaration (parser, !statement_p,
                              
# 13638 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 13638 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 );
}
# 13660 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_simple_declaration (cp_parser* parser,
         bool function_definition_allowed_p,
         tree *maybe_range_for_decl)
{
  cp_decl_specifier_seq decl_specifiers;
  int declares_class_or_enum;
  bool saw_declarator;
  location_t comma_loc = ((location_t) 0);
  location_t init_loc = ((location_t) 0);

  if (maybe_range_for_decl)
    *maybe_range_for_decl = (tree) 
# 13672 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 13672 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;




  push_deferring_access_checks (dk_deferred);
# 13690 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  cp_parser_decl_specifier_seq (parser,
    CP_PARSER_FLAGS_OPTIONAL,
    &decl_specifiers,
    &declares_class_or_enum);

  stop_deferring_access_checks ();




  if (!function_definition_allowed_p
      && !decl_specifiers.any_specifiers_p)
    {
      cp_parser_error (parser, "expected declaration");
      goto done;
    }







  if (!decl_specifiers.any_type_specifiers_p
      && cp_parser_parse_and_diagnose_invalid_type_name (parser))
    {


      cp_parser_commit_to_tentative_parse (parser);

      goto done;
    }

  cp_parser_maybe_commit_to_declaration (parser, &decl_specifiers);


  for (size_t n = 1; ; n++)
    if (cp_lexer_nth_token_is (parser->lexer, n, CPP_AND)
 || cp_lexer_nth_token_is (parser->lexer, n, CPP_AND_AND))
      continue;
    else if (cp_lexer_nth_token_is (parser->lexer, n, CPP_OPEN_SQUARE)
      && !cp_lexer_nth_token_is (parser->lexer, n + 1, CPP_OPEN_SQUARE)
      && decl_specifiers.any_specifiers_p)
      {
 tree decl
   = cp_parser_decomposition_declaration (parser, &decl_specifiers,
       maybe_range_for_decl,
       &init_loc);


 cp_token *token = cp_lexer_peek_token (parser->lexer);

 if (token->type == CPP_SEMICOLON)
   goto finish;
 else if (maybe_range_for_decl)
   {
     if (*maybe_range_for_decl == (tree) 
# 13746 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 13746 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          )
       *maybe_range_for_decl = global_trees[TI_ERROR_MARK];
     goto finish;
   }

 else
   {


     if ((decl != global_trees[TI_ERROR_MARK]
   && ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13756, __FUNCTION__))->decl_common.initial) != global_trees[TI_ERROR_MARK])
  || cp_parser_uncommitted_to_tentative_parse_p (parser))
       cp_parser_error (parser, "expected %<;%>");

     cp_parser_skip_to_end_of_statement (parser);

     if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
       cp_lexer_consume_token (parser->lexer);
     goto done;
   }
      }
    else
      break;

  tree last_type;
  bool auto_specifier_p;




  tree auto_function_declaration;

  last_type = (tree) 
# 13778 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 13778 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  auto_specifier_p
    = decl_specifiers.type && type_uses_auto (decl_specifiers.type);
  auto_function_declaration = (tree) 
# 13781 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 13781 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;



  saw_declarator = false;
  while (cp_lexer_next_token_is_not (parser->lexer,
         CPP_SEMICOLON))
    {
      cp_token *token;
      bool function_definition_p;
      tree decl;
      tree auto_result = (tree) 
# 13792 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 13792 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;

      if (saw_declarator)
 {

   token = cp_lexer_peek_token (parser->lexer);
   ((void)(!(token->type == CPP_COMMA) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13798, __FUNCTION__), 0 : 0));
   cp_lexer_consume_token (parser->lexer);
   if (maybe_range_for_decl)
     {
       *maybe_range_for_decl = global_trees[TI_ERROR_MARK];
       if (comma_loc == ((location_t) 0))
  comma_loc = token->location;
     }
 }
      else
 saw_declarator = true;


      decl = cp_parser_init_declarator (parser,
     CP_PARSER_FLAGS_NONE,
     &decl_specifiers,
                
# 13814 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 13814 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ,
     function_definition_allowed_p,
                  false,
     declares_class_or_enum,
     &function_definition_p,
     maybe_range_for_decl,
     &init_loc,
     &auto_result);




      if (cp_parser_error_occurred (parser))
 goto done;

      if (auto_specifier_p && cxx_dialect >= cxx14)
 {



   if (auto_function_declaration == (tree) 
# 13834 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 13834 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            )
     auto_function_declaration
       = ((enum tree_code) (decl)->base.code) == FUNCTION_DECL ? decl : global_trees[TI_ERROR_MARK];
   else if (((enum tree_code) (decl)->base.code) == FUNCTION_DECL
     || auto_function_declaration != global_trees[TI_ERROR_MARK])
     {
       error_at (decl_specifiers.locations[ds_type_spec],
   "non-variable %qD in declaration with more than one "
   "declarator with placeholder type",
   ((enum tree_code) (decl)->base.code) == FUNCTION_DECL
   ? decl : auto_function_declaration);
       auto_function_declaration = global_trees[TI_ERROR_MARK];
     }
 }

      if (auto_result
   && (!scope_chain->x_processing_template_decl || !type_uses_auto (auto_result)))
 {
   if (last_type
       && last_type != global_trees[TI_ERROR_MARK]
       && !comptypes ((auto_result), (last_type), 0))
     {




       error_at (decl_specifiers.locations[ds_type_spec],
   "inconsistent deduction for %qT: %qT and then %qT",
   decl_specifiers.type, last_type, auto_result);
       last_type = global_trees[TI_ERROR_MARK];
     }
   else
     last_type = auto_result;
 }


      if (function_definition_p)
 {






   if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
     {
       cp_token *token = cp_lexer_peek_token (parser->lexer);
       error_at (token->location,
   "mixing"
   " declarations and function-definitions is forbidden");
     }

   else
     {
       pop_deferring_access_checks ();
       return;
     }
 }
      if (maybe_range_for_decl && *maybe_range_for_decl == (tree) 
# 13892 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                          __null
# 13892 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                   )
 *maybe_range_for_decl = decl;

      token = cp_lexer_peek_token (parser->lexer);

      if (token->type == CPP_COMMA)
                                        ;

      else if (token->type == CPP_SEMICOLON)
 break;
      else if (maybe_range_for_decl)
 {
   if ((declares_class_or_enum & 2) && token->type == CPP_COLON)
     permerror (decl_specifiers.locations[ds_type_spec],
         "types may not be defined in a for-range-declaration");
   break;
 }

      else
 {


   if ((decl != global_trees[TI_ERROR_MARK]
        && ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13915, __FUNCTION__))->decl_common.initial) != global_trees[TI_ERROR_MARK])
       || cp_parser_uncommitted_to_tentative_parse_p (parser))
     cp_parser_error (parser, "expected %<,%> or %<;%>");

   cp_parser_skip_to_end_of_statement (parser);

   if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
     cp_lexer_consume_token (parser->lexer);
   goto done;
 }






      function_definition_allowed_p = false;
    }




  if (!saw_declarator)
    {
      if (cp_parser_declares_only_class_p (parser))
 {
   if (!declares_class_or_enum
       && decl_specifiers.type
       && ((((((enum tree_code) (decl_specifiers.type)->base.code)) == RECORD_TYPE || (((enum tree_code) (decl_specifiers.type)->base.code)) == UNION_TYPE) && ((tree_class_check ((decl_specifiers.type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 13943, __FUNCTION__))->type_common.lang_flag_5)) || ((enum tree_code) (decl_specifiers.type)->base.code) == ENUMERAL_TYPE))



     decl_specifiers.type = (tree) 
# 13947 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 13947 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
   shadow_tag (&decl_specifiers);
 }

      perform_deferred_access_checks (tf_warning_or_error);
    }


 finish:
  if (!maybe_range_for_decl)
    cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
  else if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))
    {
      if (init_loc != ((location_t) 0))
 error_at (init_loc, "initializer in range-based %<for%> loop");
      if (comma_loc != ((location_t) 0))
 error_at (comma_loc,
    "multiple declarations in range-based %<for%> loop");
    }

 done:
  pop_deferring_access_checks ();
}





static tree
cp_parser_decomposition_declaration (cp_parser *parser,
         cp_decl_specifier_seq *decl_specifiers,
         tree *maybe_range_for_decl,
         location_t *init_loc)
{
  cp_ref_qualifier ref_qual = cp_parser_ref_qualifier_opt (parser);
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;
  cp_parser_require (parser, CPP_OPEN_SQUARE, RT_OPEN_SQUARE);


  auto_vec<cp_expr, 10> v;
  if (!cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_SQUARE))
    while (true)
      {
 cp_expr e = cp_parser_identifier (parser);
 if (e.get_value () == global_trees[TI_ERROR_MARK])
   break;
 v.safe_push (e);
 if (!cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
   break;
 cp_lexer_consume_token (parser->lexer);
      }

  location_t end_loc = cp_lexer_peek_token (parser->lexer)->location;
  if (!cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE))
    {
      end_loc = ((location_t) 0);
      cp_parser_skip_to_closing_parenthesis_1 (parser, true, CPP_CLOSE_SQUARE,
            false);
      if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_SQUARE))
 cp_lexer_consume_token (parser->lexer);
      else
 {
   cp_parser_skip_to_end_of_statement (parser);
   return global_trees[TI_ERROR_MARK];
 }
    }

  if (cxx_dialect < cxx17)
    pedwarn (loc, 0, "structured bindings only available with "
       "%<-std=c++17%> or %<-std=gnu++17%>");

  tree pushed_scope;
  cp_declarator *declarator = make_declarator (cdk_decomp);
  loc = end_loc == ((location_t) 0) ? loc : make_location (loc, loc, end_loc);
  declarator->id_loc = loc;
  if (ref_qual != REF_QUAL_NONE)
    declarator = make_reference_declarator (TYPE_UNQUALIFIED, declarator,
         ref_qual == REF_QUAL_RVALUE,
         (tree) 
# 14025 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 14025 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 );
  tree decl = start_decl (declarator, decl_specifiers, 1,
     (tree) 
# 14027 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
    __null
# 14027 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             , decl_specifiers->attributes,
     &pushed_scope);
  tree orig_decl = decl;

  unsigned int i;
  cp_expr e;
  cp_decl_specifier_seq decl_specs;
  clear_decl_specs (&decl_specs);
  decl_specs.type = make_auto ();
  tree prev = decl;
  for (i = 0; (v).iterate ((i), &(e)); ++(i))
    {
      if (i == 0)
 declarator = make_id_declarator ((tree) 
# 14040 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 14040 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          , e.get_value (),
      sfk_none, e.get_location ());
      else
 {
   declarator->u.id.unqualified_name = e.get_value ();
   declarator->id_loc = e.get_location ();
 }
      tree elt_pushed_scope;
      tree decl2 = start_decl (declarator, &decl_specs, 2,
          (tree) 
# 14049 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 14049 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  , (tree) 
# 14049 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 14049 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , &elt_pushed_scope);
      if (decl2 == global_trees[TI_ERROR_MARK])
 decl = global_trees[TI_ERROR_MARK];
      else if (decl != global_trees[TI_ERROR_MARK] && (((contains_struct_check (((contains_struct_check ((decl2), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14052, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14052, __FUNCTION__))->common.chain)) != prev)
 {


   ((void)(!((global_dc)->diagnostic_count[(int) (DK_ERROR)]) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14056, __FUNCTION__), 0 : 0));
   decl = global_trees[TI_ERROR_MARK];
 }
      else
 prev = decl2;
      if (elt_pushed_scope)
 pop_scope (elt_pushed_scope);
    }

  if (v.is_empty ())
    {
      error_at (loc, "empty structured binding declaration");
      decl = global_trees[TI_ERROR_MARK];
    }

  if (maybe_range_for_decl == 
# 14071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
      
# 14072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     || cp_lexer_next_token_is_not (parser->lexer, CPP_COLON))
    {
      bool non_constant_p = false, is_direct_init = false;
      *init_loc = cp_lexer_peek_token (parser->lexer)->location;
      tree initializer = cp_parser_initializer (parser, &is_direct_init,
      &non_constant_p);
      if (initializer == (tree) 
# 14078 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
   
# 14079 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  || (((enum tree_code) (initializer)->base.code) == TREE_LIST
       && ((contains_struct_check ((initializer), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14080, __FUNCTION__))->common.chain))
   || (is_direct_init
       && (((enum tree_code) (initializer)->base.code) == CONSTRUCTOR && ((contains_struct_check ((initializer), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14082, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE])
       && (vec_safe_length (((tree_check ((initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14083, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts))) != 1))
 {
   error_at (loc, "invalid initializer for structured binding "
      "declaration");
   initializer = global_trees[TI_ERROR_MARK];
 }

      if (decl != global_trees[TI_ERROR_MARK])
 {
   int flags = (decl_spec_seq_has_spec_p (decl_specifiers, ds_constinit)
         ? ((((((((((((((1 << 6) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) : 0);
   cp_maybe_mangle_decomp (decl, prev, v.length ());
   cp_finish_decl (decl, initializer, non_constant_p, (tree) 
# 14095 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                     __null
# 14095 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                              ,
     (is_direct_init ? ((1 << 0)) : (((1 << 0)) | (1 << 2)))
     | flags);
   cp_finish_decomp (decl, prev, v.length ());
 }
    }
  else if (decl != global_trees[TI_ERROR_MARK])
    {
      *maybe_range_for_decl = prev;


      cp_finish_decomp (decl, prev, v.length ());
    }

  if (pushed_scope)
    pop_scope (pushed_scope);

  if (decl == global_trees[TI_ERROR_MARK] && (tree_code_type[(int) (((enum tree_code) (orig_decl)->base.code))] == tcc_declaration))
    {
      if ((!(((contains_struct_check ((orig_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14114, __FUNCTION__))->decl_common.lang_flag_0) && (((enum tree_code) (orig_decl)->base.code) == CONST_DECL || ((enum tree_code) (orig_decl)->base.code) == PARM_DECL || ((enum tree_code) (orig_decl)->base.code) == TYPE_DECL || ((enum tree_code) (orig_decl)->base.code) == TEMPLATE_DECL)) && ((enum tree_code) ((!(! (((contains_struct_check ((orig_decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14114, __FUNCTION__))->decl_minimal.context)) || ((enum tree_code) (((contains_struct_check ((orig_decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14114, __FUNCTION__))->decl_minimal.context))->base.code) == TRANSLATION_UNIT_DECL) ? ((contains_struct_check ((orig_decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14114, __FUNCTION__))->decl_minimal.context) : cp_global_trees[CPTI_GLOBAL]))->base.code) == NAMESPACE_DECL))
 overwrite_decl_assembler_name (orig_decl, (__builtin_constant_p ("<decomp>") ? get_identifier_with_length (("<decomp>"), strlen ("<decomp>")) : get_identifier ("<decomp>")));
    }

  return decl;
}
# 14158 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_decl_specifier_seq (cp_parser* parser,
         cp_parser_flags flags,
         cp_decl_specifier_seq *decl_specs,
         int* declares_class_or_enum)
{
  bool constructor_possible_p = !parser->in_declarator_p;
  bool found_decl_spec = false;
  cp_token *start_token = 
# 14166 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 14166 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
  cp_decl_spec ds;


  clear_decl_specs (decl_specs);


  *declares_class_or_enum = 0;


  while (true)
    {
      bool constructor_p;
      cp_token *token;
      ds = ds_last;


      token = cp_lexer_peek_token (parser->lexer);



      if (!start_token)
 start_token = token;

      if ((flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR) == 0
   && cp_next_tokens_can_be_attribute_p (parser))
 {

   tree attrs = cp_parser_attributes_opt (parser);
# 14208 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (cxx11_attribute_p (attrs))
     {
       if (!found_decl_spec)


                  ;
       else
  {
    if (decl_specs->type && (((((enum tree_code) (decl_specs->type)->base.code)) == RECORD_TYPE || (((enum tree_code) (decl_specs->type)->base.code)) == UNION_TYPE) && ((tree_class_check ((decl_specs->type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14216, __FUNCTION__))->type_common.lang_flag_5)))
      {


        if (decl_specs->type_definition_p)
   warn_misplaced_attr_for_class_type (token->location,
           decl_specs->type);
        attrs = (tree) 
# 14223 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 14223 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
      }
    else
      {
        decl_specs->std_attributes
   = attr_chainon (decl_specs->std_attributes, attrs);
        if (decl_specs->locations[ds_std_attribute] == 0)
   decl_specs->locations[ds_std_attribute] = token->location;
      }
    continue;
  }
     }

   decl_specs->attributes
     = attr_chainon (decl_specs->attributes, attrs);
   if (decl_specs->locations[ds_attribute] == 0)
     decl_specs->locations[ds_attribute] = token->location;
   continue;
 }

      found_decl_spec = true;


      switch (token->keyword)
 {




 case RID_FRIEND:
   if (!at_class_scope_p ())
     {
       gcc_rich_location richloc (token->location);
       richloc.add_fixit_remove ();
       error_at (&richloc, "%<friend%> used outside of class");
       cp_lexer_purge_token (parser->lexer);
     }
   else
     {
       ds = ds_friend;

       cp_lexer_consume_token (parser->lexer);
     }
   break;

        case RID_CONSTEXPR:
   ds = ds_constexpr;
          cp_lexer_consume_token (parser->lexer);
          break;

 case RID_CONSTINIT:
   ds = ds_constinit;
   cp_lexer_consume_token (parser->lexer);
   break;

 case RID_CONSTEVAL:
   ds = ds_consteval;
   cp_lexer_consume_token (parser->lexer);
   break;

        case RID_CONCEPT:
          ds = ds_concept;
          cp_lexer_consume_token (parser->lexer);

   if (flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR)
     break;



          if (!global_options.x_flag_concepts_ts)
            {
       cp_token *next = cp_lexer_peek_token (parser->lexer);
       if (next->keyword == RID_BOOL)
  pedwarn (next->location, 0, "the %<bool%> keyword is not "
    "allowed in a C++20 concept definition");
       else
  pedwarn (token->location, 0, "C++20 concept definition syntax "
    "is %<concept <name> = <expr>%>");
            }




   if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)
       && cp_lexer_nth_token_is (parser->lexer, 2, CPP_EQ)
       && !decl_specs->any_type_specifiers_p)
     {
       cp_parser_set_decl_spec_type (decl_specs, global_trees[TI_BOOLEAN_TYPE],
         token, false);
       decl_specs->any_type_specifiers_p = true;
     }
          break;





 case RID_INLINE:
 case RID_VIRTUAL:
 case RID_EXPLICIT:
   cp_parser_function_specifier_opt (parser, decl_specs);
   break;



 case RID_TYPEDEF:
   ds = ds_typedef;

   cp_lexer_consume_token (parser->lexer);

   if (flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR)
     break;


   constructor_possible_p = false;


   cp_parser_commit_to_tentative_parse (parser);

          if (decl_specs->storage_class != sc_none)
            decl_specs->conflicting_specifiers_p = true;
   break;
# 14355 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 case RID_AUTO:
          if (cxx_dialect == cxx98)
            {

       cp_lexer_consume_token (parser->lexer);



       gcc_rich_location richloc (token->location);
       richloc.add_fixit_remove ();
       warning_at (&richloc, OPT_Wc__11_compat,
     "%<auto%> changes meaning in C++11; "
     "please remove it");


              cp_parser_set_storage_class (parser, decl_specs, RID_AUTO,
        token);
            }
          else

     found_decl_spec = false;
          break;

 case RID_REGISTER:
 case RID_STATIC:
 case RID_EXTERN:
 case RID_MUTABLE:

   cp_lexer_consume_token (parser->lexer);
          cp_parser_set_storage_class (parser, decl_specs, token->keyword,
           token);
   break;
 case RID_THREAD:

   ds = ds_thread;
   cp_lexer_consume_token (parser->lexer);
   break;

 default:

   found_decl_spec = false;
   break;
 }

      if (found_decl_spec
   && (flags & CP_PARSER_FLAGS_ONLY_TYPE_OR_CONSTEXPR)
   && token->keyword != RID_CONSTEXPR)
 error ("%<decl-specifier%> invalid in condition");

      if (found_decl_spec
   && (flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR)
   && token->keyword != RID_MUTABLE
   && token->keyword != RID_CONSTEXPR
   && token->keyword != RID_CONSTEVAL)
 error_at (token->location, "%qD invalid in lambda",
    ridpointers[token->keyword]);

      if (ds != ds_last)
 set_and_check_decl_spec_loc (decl_specs, ds, token);



      constructor_p
 = (!found_decl_spec
    && constructor_possible_p
    && (cp_parser_constructor_declarator_p
        (parser, flags, decl_spec_seq_has_spec_p (decl_specs,
        ds_friend))));



      if (!found_decl_spec && !constructor_p)
 {
   int decl_spec_declares_class_or_enum;
   bool is_cv_qualifier;
   tree type_spec;

   if (flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR)
     flags |= CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS;

   type_spec
     = cp_parser_type_specifier (parser, flags,
     decl_specs,
                        true,
     &decl_spec_declares_class_or_enum,
     &is_cv_qualifier);
   *declares_class_or_enum |= decl_spec_declares_class_or_enum;
# 14479 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (type_spec && !is_cv_qualifier)
     flags |= CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES;

   if (type_spec)
     {
       constructor_possible_p = false;
       found_decl_spec = true;
       if (!is_cv_qualifier)
  decl_specs->any_type_specifiers_p = true;

       if ((flags & CP_PARSER_FLAGS_ONLY_MUTABLE_OR_CONSTEXPR) != 0)
  error_at (token->location, "type-specifier invalid in lambda");
     }
 }



      if (!found_decl_spec)
 break;

      decl_specs->any_specifiers_p = true;


      flags |= CP_PARSER_FLAGS_OPTIONAL;
    }


  if (decl_spec_seq_has_spec_p (decl_specs, ds_friend)
      && (*declares_class_or_enum & 2))
    error_at (decl_specs->locations[ds_friend],
       "class definition may not be declared a friend");
}
# 14528 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_storage_class_specifier_opt (cp_parser* parser)
{
  switch (cp_lexer_peek_token (parser->lexer)->keyword)
    {
    case RID_AUTO:
      if (cxx_dialect != cxx98)
        return (tree) 
# 14535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 14535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;

      __attribute__((fallthrough));

    case RID_REGISTER:
    case RID_STATIC:
    case RID_EXTERN:
    case RID_MUTABLE:
    case RID_THREAD:

      return cp_lexer_consume_token (parser->lexer)->u.value;

    default:
      return (tree) 
# 14548 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 14548 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }
}
# 14565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_function_specifier_opt (cp_parser* parser,
      cp_decl_specifier_seq *decl_specs)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  switch (token->keyword)
    {
    case RID_INLINE:
      set_and_check_decl_spec_loc (decl_specs, ds_inline, token);
      break;

    case RID_VIRTUAL:



      if ((!processing_template_parmlist && scope_chain->x_processing_template_decl > template_class_depth (current_scope ()))
   && scope_chain->class_type)
 error_at (token->location, "templates may not be %<virtual%>");
      else
 set_and_check_decl_spec_loc (decl_specs, ds_virtual, token);
      break;

    case RID_EXPLICIT:
      {
 tree id = cp_lexer_consume_token (parser->lexer)->u.value;

 tree expr;
 if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
   {
     matching_parens parens;
     parens.consume_open (parser);


     const char *saved_message
       = parser->type_definition_forbidden_message;
     parser->type_definition_forbidden_message
       = "types may not be defined in explicit-specifier";

     if (cxx_dialect < cxx20)
       pedwarn (token->location, 0,
         "%<explicit(bool)%> only available with %<-std=c++20%> "
         "or %<-std=gnu++20%>");


     expr = cp_parser_constant_expression (parser);


     parser->type_definition_forbidden_message = saved_message;
     parens.require_close (parser);
   }
 else


   expr = global_trees[TI_BOOLEAN_TRUE];




 expr = build_explicit_specifier (expr, tf_warning_or_error);

 if (expr == global_trees[TI_BOOLEAN_TRUE])
   set_and_check_decl_spec_loc (decl_specs, ds_explicit, token);
 else if (expr == global_trees[TI_BOOLEAN_FALSE])
                                          ;
 else if (decl_specs)


   decl_specs->explicit_specifier = expr;
 return id;
      }

    default:
      return (tree) 
# 14637 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 14637 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }


  return cp_lexer_consume_token (parser->lexer)->u.value;
}







static void
cp_parser_linkage_specification (cp_parser* parser)
{
  tree linkage;


  cp_token *extern_token
    = cp_parser_require_keyword (parser, RID_EXTERN, RT_EXTERN);


  cp_token *string_token = cp_lexer_peek_token (parser->lexer);
  linkage = cp_parser_string_literal (parser, false, false);




  if (strlen (((const char *)((tree_check ((linkage), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14666, __FUNCTION__, (STRING_CST)))->string.str)))
      != (size_t) (((tree_check ((linkage), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14667, __FUNCTION__, (STRING_CST)))->string.length) - 1))
    {
      cp_parser_error (parser, "invalid linkage-specification");

      linkage = cp_global_trees[CPTI_LANG_NAME_CPLUSPLUS];
    }
  else
    linkage = (__builtin_constant_p (((const char *)((tree_check ((linkage), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14674, __FUNCTION__, (STRING_CST)))->string.str))) ? get_identifier_with_length ((((const char *)((tree_check ((linkage), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14674, __FUNCTION__, (STRING_CST)))->string.str))), strlen (((const char *)((tree_check ((linkage), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14674, __FUNCTION__, (STRING_CST)))->string.str)))) : get_identifier (((const char *)((tree_check ((linkage), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14674, __FUNCTION__, (STRING_CST)))->string.str))));


  push_lang_context (linkage);



  location_t saved_location
    = parser->innermost_linkage_specification_location;





  parser->innermost_linkage_specification_location
    = make_location (extern_token->location,
       extern_token->location,
       get_finish (string_token->location));



  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      cp_ensure_no_omp_declare_simd (parser);
      cp_ensure_no_oacc_routine (parser);


      matching_braces braces;
      braces.consume_open (parser);

      cp_parser_declaration_seq_opt (parser);

      braces.require_close (parser);
    }

  else
    {
      bool saved_in_unbraced_linkage_specification_p;

      saved_in_unbraced_linkage_specification_p
 = parser->in_unbraced_linkage_specification_p;
      parser->in_unbraced_linkage_specification_p = true;
      cp_parser_declaration (parser);
      parser->in_unbraced_linkage_specification_p
 = saved_in_unbraced_linkage_specification_p;
    }


  pop_lang_context ();


  parser->innermost_linkage_specification_location = saved_location;
}
# 14736 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_static_assert(cp_parser *parser, bool member_p)
{
  cp_expr condition;
  location_t token_loc;
  tree message;
  bool dummy;



  token_loc = cp_lexer_peek_token (parser->lexer)->location;


  if (!cp_parser_require_keyword (parser, RID_STATIC_ASSERT,
                                  RT_STATIC_ASSERT))
    return;



  if (cp_parser_parsing_tentatively (parser))
    cp_parser_commit_to_tentative_parse (parser);


  matching_parens parens;
  parens.require_open (parser);



  condition =
    cp_parser_constant_expression (parser,
                                                            true,
                                                      &dummy);

  if (cp_lexer_peek_token (parser->lexer)->type == CPP_CLOSE_PAREN)
    {
      if (cxx_dialect < cxx17)
 pedwarn (input_location, OPT_Wpedantic,
   "%<static_assert%> without a message "
   "only available with %<-std=c++17%> or %<-std=gnu++17%>");

      cp_lexer_consume_token (parser->lexer);
      message = build_string (1, "");
      ((contains_struct_check ((message), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14778, __FUNCTION__))->typed.type) = c_global_trees[CTI_CHAR_ARRAY_TYPE];
      fix_string_type (message);
    }
  else
    {

      cp_parser_require (parser, CPP_COMMA, RT_COMMA);


      message = cp_parser_string_literal (parser,
                                                 false,
                                               true);


      if (!parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser,
                                                              true,
                                                            false,
                              true);
    }


  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);




  location_t assert_loc = condition.get_location ();
  if (assert_loc == ((location_t) 0))
    assert_loc = token_loc;



  finish_static_assert (condition, message, assert_loc, member_p);
}



static tree
cp_parser_decltype_expr (cp_parser *parser,
    bool &id_expression_or_member_access_p)
{
  cp_token *id_expr_start_token;
  tree expr;


  id_expr_start_token = cp_lexer_peek_token (parser->lexer);
  cp_parser_parse_tentatively (parser);
  expr = cp_parser_id_expression (parser,
                                                         false,
                                                         true,
                                                 
# 14829 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 14829 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                    ,
                                                   false,
                                                 false);

  if (!cp_parser_error_occurred (parser) && expr != global_trees[TI_ERROR_MARK])
    {
      bool non_integral_constant_expression_p = false;
      tree id_expression = expr;
      cp_id_kind idk;
      const char *error_msg;

      if (identifier_p (expr))

 expr = cp_parser_lookup_name_simple (parser, expr,
          id_expr_start_token->location);

      if (expr && ((enum tree_code) (expr)->base.code) == TEMPLATE_DECL)

 expr = global_trees[TI_ERROR_MARK];

      if (expr
          && expr != global_trees[TI_ERROR_MARK]
          && ((enum tree_code) (expr)->base.code) != TYPE_DECL
   && (((enum tree_code) (expr)->base.code) != BIT_NOT_EXPR
       || !(tree_code_type[(int) (((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((expr), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 14853, __FUNCTION__))))))->base.code))] == tcc_type))
          && cp_lexer_peek_token (parser->lexer)->type == CPP_CLOSE_PAREN)
        {

          expr = (finish_id_expression
                  (id_expression, expr, parser->scope, &idk,
                                                      false,
                                                                true,
                   &non_integral_constant_expression_p,
                                  false,
                            true,
                                 false,
                                      false,
                   &error_msg,
     id_expr_start_token->location));

          if (expr == global_trees[TI_ERROR_MARK])





            id_expression_or_member_access_p = true;
        }

      if (expr
          && expr != global_trees[TI_ERROR_MARK]
          && cp_lexer_peek_token (parser->lexer)->type == CPP_CLOSE_PAREN)

        id_expression_or_member_access_p = true;
    }

  if (!id_expression_or_member_access_p)
    {

      cp_parser_abort_tentative_parse (parser);


      cp_parser_parse_tentatively (parser);


      expr = cp_parser_postfix_expression (parser, false,
                                                      false, true,
                                                                    true, 
# 14896 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                         __null
# 14896 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                             );

      if (expr
          && expr != global_trees[TI_ERROR_MARK]
          && cp_lexer_peek_token (parser->lexer)->type == CPP_CLOSE_PAREN)

        id_expression_or_member_access_p = true;
    }

  if (id_expression_or_member_access_p)

    cp_parser_parse_definitely (parser);
  else
    {


      cp_parser_abort_tentative_parse (parser);


      expr = cp_parser_expression (parser, 
# 14915 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 14915 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       , false,
                      true);
    }

  return expr;
}
# 14929 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_decltype (cp_parser *parser)
{
  bool id_expression_or_member_access_p = false;
  cp_token *start_token = cp_lexer_peek_token (parser->lexer);

  if (start_token->type == ((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1)))
    {

      cp_lexer_consume_token (parser->lexer);
      return saved_checks_value (start_token->u.tree_check_value);
    }


  if (!cp_parser_require_keyword (parser, RID_DECLTYPE, RT_DECLTYPE))
    return global_trees[TI_ERROR_MARK];


  matching_parens parens;
  if (!parens.require_open (parser))
    return global_trees[TI_ERROR_MARK];




  tentative_firewall firewall (parser);



  if (cp_parser_uncommitted_to_tentative_parse_p (parser)
      && !parser->in_declarator_p)
    cp_parser_commit_to_topmost_tentative_parse (parser);

  push_deferring_access_checks (dk_deferred);

  tree expr = (tree) 
# 14964 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 14964 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO)
      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_CLOSE_PAREN))
    {

      cp_lexer_consume_token (parser->lexer);
      if (cxx_dialect < cxx14)
 {
   error_at (start_token->location,
      "%<decltype(auto)%> type specifier only available with "
      "%<-std=c++14%> or %<-std=gnu++14%>");
   expr = global_trees[TI_ERROR_MARK];
 }
    }
  else
    {




      const char *saved_message = parser->type_definition_forbidden_message;
      parser->type_definition_forbidden_message
 = "types may not be defined in %<decltype%> expressions";



      bool saved_integral_constant_expression_p
 = parser->integral_constant_expression_p;
      bool saved_non_integral_constant_expression_p
 = parser->non_integral_constant_expression_p;
      parser->integral_constant_expression_p = false;



      bool saved_greater_than_is_operator_p
 = parser->greater_than_is_operator_p;
      parser->greater_than_is_operator_p = true;


      ++cp_unevaluated_operand;


      ++c_inhibit_evaluation_warnings;

      expr = cp_parser_decltype_expr (parser, id_expression_or_member_access_p);
      (expr) = tree_strip_any_location_wrapper ((const_cast<union tree_node *> (((expr)))));


      --cp_unevaluated_operand;
      --c_inhibit_evaluation_warnings;



      parser->greater_than_is_operator_p
 = saved_greater_than_is_operator_p;



      parser->type_definition_forbidden_message = saved_message;
      parser->integral_constant_expression_p
 = saved_integral_constant_expression_p;
      parser->non_integral_constant_expression_p
 = saved_non_integral_constant_expression_p;
    }


  if (expr == global_trees[TI_ERROR_MARK] || !parens.require_close (parser))
    {
      cp_parser_skip_to_closing_parenthesis (parser, true, false,
                            true);
      expr = global_trees[TI_ERROR_MARK];
    }


  if (cp_parser_error_occurred (parser))
    {
      pop_deferring_access_checks ();
      return global_trees[TI_ERROR_MARK];
    }

  if (!expr)

    expr = make_decltype_auto ();
  else
    expr = finish_decltype_type (expr, id_expression_or_member_access_p,
     tf_warning_or_error);



  start_token->type = ((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1));
  start_token->u.tree_check_value = ggc_cleared_alloc<struct tree_check> ();
  start_token->tree_check_p = true;
  start_token->u.tree_check_value->value = expr;
  start_token->u.tree_check_value->checks = get_deferred_access_checks ();
  start_token->keyword = RID_MAX;

  location_t loc = start_token->location;
  loc = make_location (loc, loc, parser->lexer);
  start_token->location = loc;

  cp_lexer_purge_tokens_after (parser->lexer, start_token);

  pop_to_parent_deferring_access_checks ();

  return expr;
}
# 15081 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_conversion_function_id (cp_parser* parser)
{
  tree type;
  tree saved_scope;
  tree saved_qualifying_scope;
  tree saved_object_scope;
  tree pushed_scope = (tree) 
# 15088 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 15088 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;


  if (!cp_parser_require_keyword (parser, RID_OPERATOR, RT_OPERATOR))
    return global_trees[TI_ERROR_MARK];



  saved_scope = parser->scope;
  saved_qualifying_scope = parser->qualifying_scope;
  saved_object_scope = parser->object_scope;
# 15112 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (saved_scope)
    pushed_scope = push_scope (saved_scope);

  type = cp_parser_conversion_type_id (parser);

  if (pushed_scope)
    pop_scope (pushed_scope);

  parser->scope = saved_scope;
  parser->qualifying_scope = saved_qualifying_scope;
  parser->object_scope = saved_object_scope;

  if (type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
  return make_conv_op_name (type);
}
# 15136 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_conversion_type_id (cp_parser* parser)
{
  tree attributes;
  cp_decl_specifier_seq type_specifiers;
  cp_declarator *declarator;
  tree type_specified;
  const char *saved_message;


  attributes = cp_parser_attributes_opt (parser);

  saved_message = parser->type_definition_forbidden_message;
  parser->type_definition_forbidden_message
    = "types may not be defined in a conversion-type-id";



  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
                       false,
                           false,
    &type_specifiers);

  parser->type_definition_forbidden_message = saved_message;


  if (type_specifiers.type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  declarator = cp_parser_conversion_declarator_opt (parser);

  type_specified = grokdeclarator (declarator, &type_specifiers, TYPENAME,
                        0, &attributes);
  if (attributes)
    cplus_decl_attributes (&type_specified, attributes, 0);



  if (! cp_parser_uncommitted_to_tentative_parse_p (parser)
      && type_uses_auto (type_specified))
    {
      if (cxx_dialect < cxx14)
 {
   error ("invalid use of %<auto%> in conversion operator");
   return global_trees[TI_ERROR_MARK];
 }
      else if (template_parm_scope_p ())
 warning (0, "use of %<auto%> in member template "
   "conversion operator can never be deduced");
    }

  return type_specified;
}
# 15197 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_declarator *
cp_parser_conversion_declarator_opt (cp_parser* parser)
{
  enum tree_code code;
  tree class_type, std_attributes = (tree) 
# 15201 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 15201 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            ;
  cp_cv_quals cv_quals;


  cp_parser_parse_tentatively (parser);

  code = cp_parser_ptr_operator (parser, &class_type, &cv_quals,
     &std_attributes);

  if (cp_parser_parse_definitely (parser))
    {
      cp_declarator *declarator;


      declarator = cp_parser_conversion_declarator_opt (parser);

      declarator = cp_parser_make_indirect_declarator
 (code, class_type, cv_quals, declarator, std_attributes);

      return declarator;
   }

  return 
# 15223 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 15223 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
            ;
}






static void
cp_parser_ctor_initializer_opt (cp_parser* parser)
{


  if (cp_lexer_next_token_is_not (parser->lexer, CPP_COLON))
    {

      if (((tree_check (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15239, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15239, __FUNCTION__, (FUNCTION_DECL)))->decl_with_vis.cxx_constructor))
 finish_mem_initializers ((tree) 
# 15240 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 15240 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  );
      return;
    }


  cp_lexer_consume_token (parser->lexer);

  cp_parser_mem_initializer_list (parser);
}







static void
cp_parser_mem_initializer_list (cp_parser* parser)
{
  tree mem_initializer_list = (tree) 
# 15259 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 15259 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
  tree target_ctor = global_trees[TI_ERROR_MARK];
  cp_token *token = cp_lexer_peek_token (parser->lexer);



  if (!((tree_check (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15265, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15265, __FUNCTION__, (FUNCTION_DECL)))->decl_with_vis.cxx_constructor))
    error_at (token->location,
       "only constructors take member initializers");


  while (true)
    {
      tree mem_initializer;

      token = cp_lexer_peek_token (parser->lexer);

      mem_initializer = cp_parser_mem_initializer (parser);

      bool ellipsis = cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS);
      if (ellipsis
   || (mem_initializer != global_trees[TI_ERROR_MARK]
       && check_for_bare_parameter_packs (((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15281, __FUNCTION__, (TREE_LIST)))->list.purpose)
                        )))
        {

   if (ellipsis)
     cp_lexer_consume_token (parser->lexer);



          if (mem_initializer != global_trees[TI_ERROR_MARK]
              && !(tree_code_type[(int) (((enum tree_code) (((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15291, __FUNCTION__, (TREE_LIST)))->list.purpose))->base.code))] == tcc_type))
            {
              error_at (token->location,
   "cannot expand initializer for member %qD",
   ((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15295, __FUNCTION__, (TREE_LIST)))->list.purpose));
              mem_initializer = global_trees[TI_ERROR_MARK];
            }


          if (mem_initializer != global_trees[TI_ERROR_MARK])
            mem_initializer = make_pack_expansion (mem_initializer);
        }
      if (target_ctor != global_trees[TI_ERROR_MARK]
   && mem_initializer != global_trees[TI_ERROR_MARK])
 {
   error ("mem-initializer for %qD follows constructor delegation",
   ((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15307, __FUNCTION__, (TREE_LIST)))->list.purpose));
   mem_initializer = global_trees[TI_ERROR_MARK];
 }

      if (mem_initializer != global_trees[TI_ERROR_MARK]
   && (((((enum tree_code) (((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15312, __FUNCTION__, (TREE_LIST)))->list.purpose))->base.code)) == RECORD_TYPE || (((enum tree_code) (((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15312, __FUNCTION__, (TREE_LIST)))->list.purpose))->base.code)) == UNION_TYPE) && ((tree_class_check ((((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15312, __FUNCTION__, (TREE_LIST)))->list.purpose)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15312, __FUNCTION__))->type_common.lang_flag_5))
   && comptypes ((((tree_check ((mem_initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15313, __FUNCTION__, (TREE_LIST)))->list.purpose)), (scope_chain->class_type), 0))
 {
   maybe_warn_cpp0x (CPP0X_DELEGATING_CTORS);
   if (mem_initializer_list)
     {
       error ("constructor delegation follows mem-initializer for %qD",
       ((tree_check ((mem_initializer_list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15319, __FUNCTION__, (TREE_LIST)))->list.purpose));
       mem_initializer = global_trees[TI_ERROR_MARK];
     }
   target_ctor = mem_initializer;
 }

      if (mem_initializer != global_trees[TI_ERROR_MARK])
 {
   ((contains_struct_check ((mem_initializer), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15327, __FUNCTION__))->common.chain) = mem_initializer_list;
   mem_initializer_list = mem_initializer;
 }

      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);
    }


  if (((tree_check (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15338, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15338, __FUNCTION__, (FUNCTION_DECL)))->decl_with_vis.cxx_constructor))
    finish_mem_initializers (mem_initializer_list);
}
# 15358 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_mem_initializer (cp_parser* parser)
{
  tree mem_initializer_id;
  tree expression_list;
  tree member;
  cp_token *token = cp_lexer_peek_token (parser->lexer);


  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      permerror (token->location,
   "anachronistic old-style base class initializer");
      mem_initializer_id = (tree) 
# 15371 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 15371 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;
    }
  else
    {
      mem_initializer_id = cp_parser_mem_initializer_id (parser);
      if (mem_initializer_id == global_trees[TI_ERROR_MARK])
 return mem_initializer_id;
    }
  member = expand_member_init (mem_initializer_id);
  if (member && !(tree_code_type[(int) (((enum tree_code) (member)->base.code))] == tcc_declaration))
    ((cfun + 0)->language)->x_in_base_initializer = 1;

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      bool expr_non_constant_p;
      cp_lexer_set_source_position (parser->lexer);
      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
      expression_list = cp_parser_braced_list (parser, &expr_non_constant_p);
      (((tree_not_check2 (((tree_check ((expression_list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15389, __FUNCTION__, (CONSTRUCTOR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15389, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)) = 1;
      expression_list = build_tree_list ((tree) 
# 15390 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 15390 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 , expression_list);
    }
  else
    {
      vec<tree, va_gc> *vec;
      vec = cp_parser_parenthesized_expression_list (parser, non_attr,
                      false,
                                 true,
                              
# 15398 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 15398 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ,
                               
# 15399 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 15399 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ,
                                true);
      if (vec == 
# 15401 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 15401 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    )
 return global_trees[TI_ERROR_MARK];
      expression_list = build_tree_list_vec (vec);
      release_tree_vector (vec);
    }

  if (expression_list == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
  if (!expression_list)
    expression_list = global_trees[TI_VOID_TYPE];

  ((cfun + 0)->language)->x_in_base_initializer = 0;

  if (!member)
    return global_trees[TI_ERROR_MARK];
  tree node = build_tree_list (member, expression_list);




  location_t loc
    = make_location (token->location, token->location, parser->lexer);
  tree dummy = build0 (EMPTY_CLASS_EXPR, (tree) 
# 15423 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 15423 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 );
  (expr_check (((dummy)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15424, __FUNCTION__))->exp.locus = (loc);
  ((contains_struct_check ((node), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15425, __FUNCTION__))->typed.type) = dummy;

  return node;
}
# 15441 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_mem_initializer_id (cp_parser* parser)
{
  bool global_scope_p;
  bool nested_name_specifier_p;
  bool template_p = false;
  tree id;

  cp_token *token = cp_lexer_peek_token (parser->lexer);


  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TYPENAME))
    {
      error_at (token->location,
  "keyword %<typename%> not allowed in this context (a qualified "
  "member initializer is implicitly a type)");
      cp_lexer_consume_token (parser->lexer);
    }

  global_scope_p
    = (cp_parser_global_scope_opt (parser,
                                 false)
       != (tree) 
# 15463 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 15463 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );
# 15476 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  nested_name_specifier_p
    = (cp_parser_nested_name_specifier_opt (parser,
                                true,
                                true,
                    true,
                            true)
       != (tree) 
# 15482 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 15482 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );
  if (nested_name_specifier_p)
    template_p = cp_parser_optional_template_keyword (parser);


  if (global_scope_p || nested_name_specifier_p)
    return cp_parser_class_name (parser,
                            true,
                            template_p,
     typename_type,
                            true,
                      false,
                        true);

  cp_parser_parse_tentatively (parser);
  if (cp_lexer_next_token_is_decltype (parser->lexer))

    id = cp_parser_decltype (parser);
  else

    id = cp_parser_class_name (parser,
                                 true,
                                 false,
          none_type,
                                 true,
                           false,
                             true);

  if (cp_parser_parse_definitely (parser))
    return id;

  return cp_parser_identifier (parser);
}
# 15526 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_operator_function_id (cp_parser* parser)
{
  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;

  if (!cp_parser_require_keyword (parser, RID_OPERATOR, RT_OPERATOR))
    return global_trees[TI_ERROR_MARK];

  return cp_parser_operator (parser, start_loc);
}




tree
cp_literal_operator_id (const char* name)
{
  tree identifier;
  char *buffer = ((char *) xmalloc (sizeof (char) * (strlen ("operator\"\"") + strlen (name) + 10)))
                              ;
  sprintf (buffer, "operator\"\"" "%s", name);
  identifier = (__builtin_constant_p (buffer) ? get_identifier_with_length ((buffer), strlen (buffer)) : get_identifier (buffer));
  free ((void*) (buffer));

  return identifier;
}
# 15568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_operator (cp_parser* parser, location_t start_loc)
{
  tree id = (tree) 
# 15571 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 15571 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
  cp_token *token;
  bool utf8 = false;


  token = cp_lexer_peek_token (parser->lexer);

  location_t end_loc = token->location;


  enum tree_code op = ERROR_MARK;
  bool assop = false;
  bool consumed = false;
  switch (token->type)
    {
    case CPP_KEYWORD:
      {

 if (token->keyword == RID_NEW)
   op = NEW_EXPR;
 else if (token->keyword == RID_DELETE)
   op = DELETE_EXPR;
 else if (token->keyword == RID_CO_AWAIT)
   op = CO_AWAIT_EXPR;
 else
   break;


 end_loc = cp_lexer_consume_token (parser->lexer)->location;


 token = cp_lexer_peek_token (parser->lexer);


 if (token->type == CPP_OPEN_SQUARE
     && op != CO_AWAIT_EXPR)
   {

     cp_lexer_consume_token (parser->lexer);

     if (cp_token *close_token
  = cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE))
       end_loc = close_token->location;
     op = op == NEW_EXPR ? VEC_NEW_EXPR : VEC_DELETE_EXPR;
   }
 consumed = true;
 break;
      }

    case CPP_PLUS:
      op = PLUS_EXPR;
      break;

    case CPP_MINUS:
      op = MINUS_EXPR;
      break;

    case CPP_MULT:
      op = MULT_EXPR;
      break;

    case CPP_DIV:
      op = TRUNC_DIV_EXPR;
      break;

    case CPP_MOD:
      op = TRUNC_MOD_EXPR;
      break;

    case CPP_XOR:
      op = BIT_XOR_EXPR;
      break;

    case CPP_AND:
      op = BIT_AND_EXPR;
      break;

    case CPP_OR:
      op = BIT_IOR_EXPR;
      break;

    case CPP_COMPL:
      op = BIT_NOT_EXPR;
      break;

    case CPP_NOT:
      op = TRUTH_NOT_EXPR;
      break;

    case CPP_EQ:
      assop = true;
      op = NOP_EXPR;
      break;

    case CPP_LESS:
      op = LT_EXPR;
      break;

    case CPP_GREATER:
      op = GT_EXPR;
      break;

    case CPP_PLUS_EQ:
      assop = true;
      op = PLUS_EXPR;
      break;

    case CPP_MINUS_EQ:
      assop = true;
      op = MINUS_EXPR;
      break;

    case CPP_MULT_EQ:
      assop = true;
      op = MULT_EXPR;
      break;

    case CPP_DIV_EQ:
      assop = true;
      op = TRUNC_DIV_EXPR;
      break;

    case CPP_MOD_EQ:
      assop = true;
      op = TRUNC_MOD_EXPR;
      break;

    case CPP_XOR_EQ:
      assop = true;
      op = BIT_XOR_EXPR;
      break;

    case CPP_AND_EQ:
      assop = true;
      op = BIT_AND_EXPR;
      break;

    case CPP_OR_EQ:
      assop = true;
      op = BIT_IOR_EXPR;
      break;

    case CPP_LSHIFT:
      op = LSHIFT_EXPR;
      break;

    case CPP_RSHIFT:
      op = RSHIFT_EXPR;
      break;

    case CPP_LSHIFT_EQ:
      assop = true;
      op = LSHIFT_EXPR;
      break;

    case CPP_RSHIFT_EQ:
      assop = true;
      op = RSHIFT_EXPR;
      break;

    case CPP_EQ_EQ:
      op = EQ_EXPR;
      break;

    case CPP_NOT_EQ:
      op = NE_EXPR;
      break;

    case CPP_LESS_EQ:
      op = LE_EXPR;
      break;

    case CPP_GREATER_EQ:
      op = GE_EXPR;
      break;

    case CPP_SPACESHIP:
      op = SPACESHIP_EXPR;
      break;

    case CPP_AND_AND:
      op = TRUTH_ANDIF_EXPR;
      break;

    case CPP_OR_OR:
      op = TRUTH_ORIF_EXPR;
      break;

    case CPP_PLUS_PLUS:
      op = POSTINCREMENT_EXPR;
      break;

    case CPP_MINUS_MINUS:
      op = PREDECREMENT_EXPR;
      break;

    case CPP_COMMA:
      op = COMPOUND_EXPR;
      break;

    case CPP_DEREF_STAR:
      op = MEMBER_REF;
      break;

    case CPP_DEREF:
      op = COMPONENT_REF;
      break;

    case CPP_QUERY:
      op = COND_EXPR;

      cp_lexer_consume_token (parser->lexer);

      cp_parser_require (parser, CPP_COLON, RT_COLON);
      consumed = true;
      break;

    case CPP_OPEN_PAREN:
      {

        matching_parens parens;
        parens.consume_open (parser);

        token = parens.require_close (parser);
        if (token)
   end_loc = token->location;
 op = CALL_EXPR;
 consumed = true;
 break;
      }

    case CPP_OPEN_SQUARE:

      cp_lexer_consume_token (parser->lexer);

      token = cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);
      if (token)
 end_loc = token->location;
      op = ARRAY_REF;
      consumed = true;
      break;

    case CPP_UTF8STRING:
    case CPP_UTF8STRING_USERDEF:
      utf8 = true;

    case CPP_STRING:
    case CPP_WSTRING:
    case CPP_STRING16:
    case CPP_STRING32:
    case CPP_STRING_USERDEF:
    case CPP_WSTRING_USERDEF:
    case CPP_STRING16_USERDEF:
    case CPP_STRING32_USERDEF:
      {
 cp_expr str;
 tree string_tree;
 int sz, len;

 if (cxx_dialect == cxx98)
   maybe_warn_cpp0x (CPP0X_USER_DEFINED_LITERALS);


 str = cp_parser_string_literal (parser, true,
                      true, false);
 if (str == global_trees[TI_ERROR_MARK])
   return global_trees[TI_ERROR_MARK];
 else if (((enum tree_code) (str)->base.code) == USERDEF_LITERAL)
   {
     string_tree = (((struct tree_userdef_literal *)(tree_check ((str.get_value ()), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15840, __FUNCTION__, (USERDEF_LITERAL))))->value);
     id = (((struct tree_userdef_literal *)(tree_check ((str.get_value ()), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15841, __FUNCTION__, (USERDEF_LITERAL))))->suffix_id);
     end_loc = str.get_location ();
   }
 else
   {
     string_tree = str;

     token = cp_lexer_peek_token (parser->lexer);
     if (token->type == CPP_NAME)
       {
  id = cp_parser_identifier (parser);
  end_loc = token->location;
       }
     else if (token->type == CPP_KEYWORD)
       {
  error ("unexpected keyword;"
         " remove space between quotes and suffix identifier");
  return global_trees[TI_ERROR_MARK];
       }
     else
       {
  error ("expected suffix identifier");
  return global_trees[TI_ERROR_MARK];
       }
   }
 sz = ((unsigned long) (*tree_int_cst_elt_check ((((tree_class_check ((((contains_struct_check ((((contains_struct_check ((string_tree), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15867, __FUNCTION__))->typed.type)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15867, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15866, __FUNCTION__))->type_common.size_unit)), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15866, __FUNCTION__)))
                                                ;
 len = ((tree_check ((string_tree), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15868, __FUNCTION__, (STRING_CST)))->string.length) / sz - 1;
 if (len != 0)
   {
     error ("expected empty string after %<operator%> keyword");
     return global_trees[TI_ERROR_MARK];
   }
 if (utf8 || ((tree_class_check ((((contains_struct_check ((((contains_struct_check ((string_tree), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15874, __FUNCTION__))->typed.type)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15874, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15874, __FUNCTION__))->type_common.main_variant)
     != integer_types[itk_char])
   {
     error ("invalid encoding prefix in literal operator");
     return global_trees[TI_ERROR_MARK];
   }
 if (id != global_trees[TI_ERROR_MARK])
   {
     const char *name = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 15882, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
     id = cp_literal_operator_id (name);
   }





 location_t combined_loc
   = make_location (start_loc, start_loc, parser->lexer);
 return cp_expr (id, combined_loc);
      }

    default:

      break;
    }



  if (op != ERROR_MARK)
    {
      id = ovl_op_identifier (assop, op);
      if (!consumed)
 cp_lexer_consume_token (parser->lexer);
    }

  else
    {
      cp_parser_error (parser, "expected operator");
      id = global_trees[TI_ERROR_MARK];
    }

  start_loc = make_location (start_loc, start_loc, get_finish (end_loc));
  return cp_expr (id, start_loc);
}
# 15948 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_template_declaration (cp_parser* parser, bool member_p)
{

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_EXPORT))
    {

      cp_lexer_consume_token (parser->lexer);

      warning (0, "keyword %<export%> not implemented, and will be ignored");
    }

  cp_parser_template_declaration_after_export (parser, member_p);
}
# 15972 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_template_parameter_list (cp_parser* parser)
{
  tree parameter_list = (tree) 
# 15975 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 15975 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;




  auto_suppress_location_wrappers sentinel;

  begin_template_parm_list ();







  while (true)
    {
      tree parameter;
      bool is_non_type;
      bool is_parameter_pack;
      location_t parm_loc;


      parm_loc = cp_lexer_peek_token (parser->lexer)->location;
      parameter = cp_parser_template_parameter (parser,
                                                &is_non_type,
                                                &is_parameter_pack);

      if (parameter != global_trees[TI_ERROR_MARK])
 parameter_list = process_template_parm (parameter_list,
      parm_loc,
      parameter,
      is_non_type,
      is_parameter_pack);
      else
       {
         tree err_parm = build_tree_list (parameter, parameter);
         parameter_list = chainon (parameter_list, err_parm);
       }


      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);
    }

  return end_template_parm_list (parameter_list);
}
# 16039 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_introduction_list (cp_parser *parser)
{
  vec<tree, va_gc> *introduction_vec = make_tree_vector ();

  while (true)
    {
      bool is_pack = cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS);
      if (is_pack)
 cp_lexer_consume_token (parser->lexer);

      tree identifier = cp_parser_identifier (parser);
      if (identifier == global_trees[TI_ERROR_MARK])
 break;


      tree parm = build_nt (WILDCARD_DECL);
      ((contains_struct_check ((parm), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16056, __FUNCTION__))->decl_minimal.locus)
 = cp_lexer_peek_token (parser->lexer)->location;
      ((contains_struct_check ((parm), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16058, __FUNCTION__))->decl_minimal.name) = identifier;
      ((tree_not_check2 ((parm), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16059, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0) = is_pack;
      vec_safe_push (introduction_vec, parm);


      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);
    }


  tree introduction_list = make_tree_vec (introduction_vec->length ());
  unsigned int n;
  tree parm;
  for (n = 0; (*introduction_vec).iterate ((n), &(parm)); ++(n))
    (*((const_cast<tree *> (tree_vec_elt_check ((introduction_list), (n), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16074, __FUNCTION__))))) = parm;

  release_tree_vector (introduction_vec);
  return introduction_list;
}




static inline cp_declarator*
get_id_declarator (cp_declarator *declarator)
{
  cp_declarator *d = declarator;
  while (d && d->kind != cdk_id)
    d = d->declarator;
  return d;
}




static inline tree
get_unqualified_id (cp_declarator *declarator)
{
  declarator = get_id_declarator (declarator);
  if (declarator)
    return declarator->u.id.unqualified_name;
  else
    return (tree) 
# 16102 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 16102 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
}



static inline bool
is_constrained_parameter (tree type)
{
  return (type
          && ((enum tree_code) (type)->base.code) == TYPE_DECL
          && ((contains_struct_check (((tree_check ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16112, __FUNCTION__, (TYPE_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16112, __FUNCTION__))->decl_common.size_unit)
          && (tree_code_type[(int) (((enum tree_code) (((contains_struct_check (((tree_check ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16113, __FUNCTION__, (TYPE_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16113, __FUNCTION__))->decl_common.size_unit))->base.code))] == tcc_declaration));
}



static inline bool
is_constrained_parameter (cp_parameter_declarator *parm)
{
  return is_constrained_parameter (parm->decl_specifiers.type);
}




bool
cp_parser_check_constrained_type_parm (cp_parser *parser,
           cp_parameter_declarator *parm)
{
  if (!parm->declarator)
    return true;

  if (parm->declarator->kind != cdk_id)
    {
      cp_parser_error (parser, "invalid constrained type parameter");
      return false;
    }


  if (decl_spec_seq_has_spec_p (&parm->decl_specifiers, ds_const)
      || decl_spec_seq_has_spec_p (&parm->decl_specifiers, ds_volatile))
    {
      cp_parser_error (parser, "cv-qualified type parameter");
      return false;
    }

  return true;
}




static inline tree
cp_parser_constrained_type_template_parm (cp_parser *parser,
                                          tree id,
                                          cp_parameter_declarator* parmdecl)
{
  if (cp_parser_check_constrained_type_parm (parser, parmdecl))
    return finish_template_type_parm (cp_global_trees[CPTI_CLASS_TYPE], id);
  else
    return global_trees[TI_ERROR_MARK];
}

static tree
finish_constrained_template_template_parm (tree proto, tree id)
{


  tree saved_parms = scope_chain->template_parms;
  begin_template_parm_list ();
  scope_chain->template_parms = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((proto), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16172, __FUNCTION__, (TEMPLATE_DECL))))))))->arguments;
  end_template_parm_list ();

  tree parm = finish_template_template_parm (cp_global_trees[CPTI_CLASS_TYPE], id);
  scope_chain->template_parms = saved_parms;

  return parm;
}




static tree
cp_parser_constrained_template_template_parm (cp_parser *parser,
                                              tree proto,
                                              tree id,
                                              cp_parameter_declarator *parmdecl)
{
  if (!cp_parser_check_constrained_type_parm (parser, parmdecl))
    return global_trees[TI_ERROR_MARK];
  return finish_constrained_template_template_parm (proto, id);
}




static tree
cp_parser_constrained_non_type_template_parm (bool *is_non_type,
           cp_parameter_declarator *parm)
{
  *is_non_type = true;
  cp_declarator *decl = parm->declarator;
  cp_decl_specifier_seq *specs = &parm->decl_specifiers;
  specs->type = ((contains_struct_check ((((contains_struct_check ((specs->type), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16205, __FUNCTION__))->decl_common.initial)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16205, __FUNCTION__))->typed.type);
  return grokdeclarator (decl, specs, TPARM, 0, 
# 16206 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null
# 16206 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   );
}






static tree
finish_constrained_parameter (cp_parser *parser,
                              cp_parameter_declarator *parmdecl,
                              bool *is_non_type)
{
  tree decl = parmdecl->decl_specifiers.type;
  tree id = get_unqualified_id (parmdecl->declarator);
  tree def = parmdecl->default_argument;
  tree proto = ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16222, __FUNCTION__))->decl_common.initial);


  tree parm;
  if (((enum tree_code) (proto)->base.code) == TYPE_DECL)
    parm = cp_parser_constrained_type_template_parm (parser, id, parmdecl);
  else if (((enum tree_code) (proto)->base.code) == TEMPLATE_DECL)
    parm = cp_parser_constrained_template_template_parm (parser, proto, id,
        parmdecl);
  else
    parm = cp_parser_constrained_non_type_template_parm (is_non_type, parmdecl);
  if (parm == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];



  parm = build_tree_list (def, parm);
  ((contains_struct_check (((tree_check ((parm), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16239, __FUNCTION__, (TREE_LIST)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16239, __FUNCTION__))->typed.type) = decl;

  return parm;
}




static bool
declares_constrained_type_template_parameter (tree type)
{
  return (is_constrained_parameter (type)
   && ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16251, __FUNCTION__))->typed.type))->base.code) == TEMPLATE_TYPE_PARM);
}




static bool
declares_constrained_template_template_parameter (tree type)
{
  return (is_constrained_parameter (type)
   && ((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16261, __FUNCTION__))->typed.type))->base.code) == TEMPLATE_TEMPLATE_PARM);
}




static tree
cp_parser_default_type_template_argument (cp_parser *parser)
{
  ((void)(!(cp_lexer_next_token_is (parser->lexer, CPP_EQ)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16270, __FUNCTION__), 0 : 0));


  cp_lexer_consume_token (parser->lexer);

  cp_token *token = cp_lexer_peek_token (parser->lexer);


  push_deferring_access_checks (dk_no_deferred);
  tree default_argument = cp_parser_type_id (parser,
          CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
          
# 16281 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 16281 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             );
  pop_deferring_access_checks ();

  if (global_options.x_flag_concepts && type_uses_auto (default_argument))
    {
      error_at (token->location,
  "invalid use of %<auto%> in default template argument");
      return global_trees[TI_ERROR_MARK];
    }

  return default_argument;
}



static tree
cp_parser_default_template_template_argument (cp_parser *parser)
{
  ((void)(!(cp_lexer_next_token_is (parser->lexer, CPP_EQ)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16299, __FUNCTION__), 0 : 0));

  bool is_template;


  cp_lexer_consume_token (parser->lexer);

  push_deferring_access_checks (dk_no_deferred);


  const cp_token* token = cp_lexer_peek_token (parser->lexer);
  tree default_argument
    = cp_parser_id_expression (parser,
                                                      false,
                                                      true,
                                              &is_template,
                                                false,
                                              false);
  if (((enum tree_code) (default_argument)->base.code) == TYPE_DECL)



    ;
  else

    default_argument
      = cp_parser_lookup_name (parser, default_argument,
                               none_type,
                                               is_template,
                                                false,
                                                    true,
                                                   
# 16330 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                  __null
# 16330 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                      ,
                               token->location);

  default_argument = check_template_template_default_arg (default_argument);
  pop_deferring_access_checks ();
  return default_argument;
}
# 16350 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_template_parameter (cp_parser* parser, bool *is_non_type,
                              bool *is_parameter_pack)
{
  cp_token *token;
  cp_parameter_declarator *parameter_declarator;
  tree parm;


  *is_non_type = false;

  *is_parameter_pack = false;

  token = cp_lexer_peek_token (parser->lexer);

  if (token->keyword == RID_TEMPLATE)
    return cp_parser_type_parameter (parser, is_parameter_pack);
# 16380 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (token->keyword == RID_TYPENAME || token->keyword == RID_CLASS)
    {

      token = cp_lexer_peek_nth_token (parser->lexer, 2);


      if (token->type == CPP_ELLIPSIS)
        return cp_parser_type_parameter (parser, is_parameter_pack);

      if (token->type == CPP_NAME)
 token = cp_lexer_peek_nth_token (parser->lexer, 3);


      if (token->type == CPP_COMMA
   || token->type == CPP_EQ
   || token->type == CPP_GREATER)
 return cp_parser_type_parameter (parser, is_parameter_pack);
    }
# 16407 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  parameter_declarator
     = cp_parser_parameter_declaration (parser,
     CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
                         true,
                         
# 16411 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 16411 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            );

  if (!parameter_declarator)
    return global_trees[TI_ERROR_MARK];



  if (parameter_declarator->template_parameter_pack_p)
    *is_parameter_pack = true;

  if (parameter_declarator->default_argument)
    {

      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))

 cp_lexer_consume_token (parser->lexer);
    }


  if (is_constrained_parameter (parameter_declarator))
    return finish_constrained_parameter (parser,
                                         parameter_declarator,
                                         is_non_type);


  *is_non_type = true;

  parm = grokdeclarator (parameter_declarator->declarator,
    &parameter_declarator->decl_specifiers,
    TPARM, 0,
                 
# 16441 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 16441 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    );
  if (parm == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  return build_tree_list (parameter_declarator->default_argument, parm);
}
# 16471 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_type_parameter (cp_parser* parser, bool *is_parameter_pack)
{
  cp_token *token;
  tree parameter;


  token = cp_parser_require (parser, CPP_KEYWORD, RT_CLASS_TYPENAME_TEMPLATE);
  if (!token)
    return global_trees[TI_ERROR_MARK];

  switch (token->keyword)
    {
    case RID_CLASS:
    case RID_TYPENAME:
      {
 tree identifier;
 tree default_argument;



        if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
          {

            cp_lexer_consume_token (parser->lexer);
            maybe_warn_variadic_templates ();

            *is_parameter_pack = true;
          }



 if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
   identifier = cp_parser_identifier (parser);
 else
   identifier = (tree) 
# 16506 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 16506 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;


 parameter = finish_template_type_parm (cp_global_trees[CPTI_CLASS_TYPE], identifier);


 if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
   {
     default_argument
       = cp_parser_default_type_template_argument (parser);



            if (*is_parameter_pack)
              {
                if (identifier)
                  error_at (token->location,
       "template parameter pack %qD cannot have a "
       "default argument", identifier);
                else
                  error_at (token->location,
       "template parameter packs cannot have "
       "default arguments");
                default_argument = (tree) 
# 16529 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 16529 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           ;
              }
     else if (check_for_bare_parameter_packs (default_argument))
       default_argument = global_trees[TI_ERROR_MARK];
   }
 else
   default_argument = (tree) 
# 16535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 16535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;



 parameter = build_tree_list (default_argument, parameter);
      }
      break;

    case RID_TEMPLATE:
      {
 tree identifier;
 tree default_argument;


 cp_parser_require (parser, CPP_LESS, RT_LESS);

 cp_parser_template_parameter_list (parser);

 cp_parser_require (parser, CPP_GREATER, RT_GREATER);


 if (global_options.x_flag_concepts)
          {
     tree reqs = get_shorthand_constraints (scope_chain->template_parms);
     if (tree dreqs = cp_parser_requires_clause_opt (parser, false))
              reqs = combine_constraint_expressions (reqs, dreqs);
     ((contains_struct_check (((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16561, __FUNCTION__, (TREE_LIST)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16561, __FUNCTION__))->typed.type) = reqs;
          }


 cp_parser_type_parameter_key (parser);


        if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
          {

            cp_lexer_consume_token (parser->lexer);
            maybe_warn_variadic_templates ();

            *is_parameter_pack = true;
          }




 if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ)
     && cp_lexer_next_token_is_not (parser->lexer, CPP_GREATER)
     && cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
   {
     identifier = cp_parser_identifier (parser);

     if (identifier == global_trees[TI_ERROR_MARK])
       identifier = (tree) 
# 16587 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 16587 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
   }
 else
   identifier = (tree) 
# 16590 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 16590 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;


 parameter = finish_template_template_parm (cp_global_trees[CPTI_CLASS_TYPE],
         identifier);



 if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
   {
     default_argument
       = cp_parser_default_template_template_argument (parser);



            if (*is_parameter_pack)
              {
                if (identifier)
                  error_at (token->location,
       "template parameter pack %qD cannot "
       "have a default argument",
       identifier);
                else
                  error_at (token->location, "template parameter packs cannot "
       "have default arguments");
                default_argument = (tree) 
# 16615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 16615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           ;
              }
   }
 else
   default_argument = (tree) 
# 16619 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 16619 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;



 parameter = build_tree_list (default_argument, parameter);
      }
      break;

    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16628, __FUNCTION__));
      break;
    }

  return parameter;
}
# 16649 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_template_id (cp_parser *parser,
         bool template_keyword_p,
         bool check_dependency_p,
         enum tag_types tag_type,
         bool is_declaration)
{
  tree templ;
  tree arguments;
  tree template_id;
  cp_token_position start_of_id = 0;
  cp_token *next_token = 
# 16660 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 16660 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            , *next_token_2 = 
# 16660 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 16660 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  ;
  bool is_identifier;



  cp_token *token = cp_lexer_peek_token (parser->lexer);

  if (token->type == ((enum cpp_ttype) (CPP_KEYWORD + 1)))
    {
      cp_lexer_consume_token (parser->lexer);
      return saved_checks_value (token->u.tree_check_value);
    }



  if ((token->type != CPP_NAME && token->keyword != RID_OPERATOR)
      || (token->type == CPP_NAME
   && !cp_parser_nth_token_starts_template_argument_list_p
        (parser, 2)))
    {
      cp_parser_error (parser, "expected template-id");
      return global_trees[TI_ERROR_MARK];
    }


  if (cp_parser_uncommitted_to_tentative_parse_p (parser))
    start_of_id = cp_lexer_token_position (parser->lexer, false);

  push_deferring_access_checks (dk_deferred);


  is_identifier = false;
  templ = cp_parser_template_name (parser, template_keyword_p,
       check_dependency_p,
       is_declaration,
       tag_type,
       &is_identifier);


  vec<deferred_access_check, va_gc> *checks = get_deferred_access_checks ();
  pop_deferring_access_checks ();
  if (templ == global_trees[TI_ERROR_MARK] || is_identifier)
    return templ;




  tentative_firewall firewall (parser);
  reopen_deferring_access_checks (checks);




  if (((next_token = cp_lexer_peek_token (parser->lexer))->type
       == CPP_OPEN_SQUARE)
      && next_token->flags & (1 << 1)
      && ((next_token_2 = cp_lexer_peek_nth_token (parser->lexer, 2))->type
   == CPP_COLON)
      && !(next_token_2->flags & (1 << 0)))
    {
      cp_parser_parse_tentatively (parser);

      next_token_2->type = CPP_SCOPE;


      cp_lexer_consume_token (parser->lexer);


      arguments = cp_parser_enclosed_template_argument_list (parser);
      if (!cp_parser_parse_definitely (parser))
 {



   next_token_2->type = CPP_COLON;
   cp_parser_error (parser, "expected %<<%>");
   pop_deferring_access_checks ();
   return global_trees[TI_ERROR_MARK];
 }


      if (permerror (next_token->location,
       "%<<::%> cannot begin a template-argument list"))
 {
   static bool hint = false;
   inform (next_token->location,
    "%<<:%> is an alternate spelling for %<[%>."
    " Insert whitespace between %<<%> and %<::%>");
   if (!hint && !global_options.x_flag_permissive)
     {
       inform (next_token->location, "(if you use %<-fpermissive%> "
        "or %<-std=c++11%>, or %<-std=gnu++11%> G++ will "
        "accept your code)");
       hint = true;
     }
 }
    }
  else
    {

      if (!cp_parser_require (parser, CPP_LESS, RT_LESS))
 {
   pop_deferring_access_checks ();
   return global_trees[TI_ERROR_MARK];
 }

      arguments = cp_parser_enclosed_template_argument_list (parser);

      if ((cxx_dialect > cxx17)
   && (((enum tree_code) (templ)->base.code) == FUNCTION_DECL || identifier_p (templ))
   && !template_keyword_p
   && (cp_parser_error_occurred (parser)
       || cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN)))
 {

   if (((enum tree_code) (templ)->base.code) == FUNCTION_DECL)
     {

       if (cp_parser_error_occurred (parser))
  {
    error_at (token->location, "invalid template-argument-list");
    inform (token->location, "function name as the left hand "
     "operand of %<<%> is ill-formed in C++20; wrap the "
     "function name in %<()%>");
  }
       else

  error_at (cp_lexer_peek_token (parser->lexer)->location,
     "expected %<(%> after template-argument-list");
       if (start_of_id)

  cp_lexer_purge_tokens_after (parser->lexer, start_of_id);
     }
   else
     cp_parser_simulate_error (parser);
   pop_deferring_access_checks ();
   return global_trees[TI_ERROR_MARK];
 }
    }






  location_t combined_loc
    = make_location (token->location, token->location, parser->lexer);







  if (global_options.x_flag_concepts && check_auto_in_tmpl_args (templ, arguments))
    template_id = global_trees[TI_ERROR_MARK];

  else if (identifier_p (templ))
    template_id = build_min_nt_loc (combined_loc,
        TEMPLATE_ID_EXPR,
        templ, arguments);
  else if ((((enum tree_code) (templ)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((templ), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16821, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 16821 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null 
# 16821 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((templ), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16821, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL)
    || (((enum tree_code) (templ)->base.code) == TEMPLATE_DECL && (((contains_struct_check ((templ), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16822, __FUNCTION__))->decl_common.lang_flag_0) && (((enum tree_code) (templ)->base.code) == CONST_DECL || ((enum tree_code) (templ)->base.code) == PARM_DECL || ((enum tree_code) (templ)->base.code) == TYPE_DECL || ((enum tree_code) (templ)->base.code) == TEMPLATE_DECL))))
    {





      bool entering_scope
 = (template_parm_scope_p ()
    && cp_lexer_next_token_is (parser->lexer, CPP_SCOPE));
      template_id
 = finish_template_type (templ, arguments, entering_scope);
    }
  else if (concept_definition_p (templ))
    {


      template_id = build2_loc (combined_loc, TEMPLATE_ID_EXPR,
    global_trees[TI_BOOLEAN_TYPE], templ, arguments);
    }
  else if (variable_template_p (templ))
    {
      template_id = lookup_template_variable (templ, arguments);
      if (((enum tree_code) (template_id)->base.code) == TEMPLATE_ID_EXPR)
 (expr_check (((template_id)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16846, __FUNCTION__))->exp.locus = (combined_loc);
    }
  else
    {


      ((void)(!((((enum tree_code) (templ)->base.code) == FUNCTION_DECL || ((enum tree_code) (templ)->base.code) == OVERLOAD) || (((enum tree_code) (templ)->base.code) == BASELINK)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16852, __FUNCTION__), 0 : 0));

      template_id = lookup_template_function (templ, arguments);
      if (((enum tree_code) (template_id)->base.code) == TEMPLATE_ID_EXPR)
 (expr_check (((template_id)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 16856, __FUNCTION__))->exp.locus = (combined_loc);
    }







  if (start_of_id


      && !(cp_parser_error_occurred (parser)
    && cp_parser_parsing_tentatively (parser)
    && parser->in_declarator_p))
    {

      token->type = ((enum cpp_ttype) (CPP_KEYWORD + 1));
      token->location = combined_loc;



      token->u.tree_check_value = ggc_cleared_alloc<struct tree_check> ();
      token->tree_check_p = true;
      token->u.tree_check_value->value = template_id;
      token->u.tree_check_value->checks = get_deferred_access_checks ();
      token->keyword = RID_MAX;


      cp_lexer_purge_tokens_after (parser->lexer, start_of_id);





      if (cp_parser_error_occurred (parser) && template_id != global_trees[TI_ERROR_MARK])
 error_at (token->location, "parse error in template argument list");
    }

  pop_to_parent_deferring_access_checks ();
  return template_id;
}



static tree
cp_parser_template_id_expr (cp_parser *parser,
       bool template_keyword_p,
       bool check_dependency_p,
       bool is_declaration)
{
  tree x = cp_parser_template_id (parser, template_keyword_p, check_dependency_p,
      none_type, is_declaration);
  if (((enum tree_code) (x)->base.code) == TEMPLATE_ID_EXPR
      && concept_check_p (x))

    return build_concept_id (x);
  return x;
}
# 16953 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_template_name (cp_parser* parser,
    bool template_keyword_p,
    bool check_dependency_p,
    bool is_declaration,
    enum tag_types tag_type,
    bool *is_identifier)
{
  tree identifier;
  tree decl;
  cp_token *token = cp_lexer_peek_token (parser->lexer);



  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_OPERATOR))
    {


      cp_parser_parse_tentatively (parser);

      identifier = cp_parser_operator_function_id (parser);

      if (!cp_parser_parse_definitely (parser))
 {
   cp_parser_error (parser, "expected template-name");
   return global_trees[TI_ERROR_MARK];
 }
    }

  else
    identifier = cp_parser_identifier (parser);


  if (identifier == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
# 17001 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (scope_chain->x_processing_template_decl
      && cp_parser_nth_token_starts_template_argument_list_p (parser, 1))
    {







      if (is_declaration
   && !template_keyword_p
   && parser->scope && (tree_code_type[(int) (((enum tree_code) (parser->scope)->base.code))] == tcc_type)
   && check_dependency_p
   && dependent_scope_p (parser->scope)


   && !constructor_name_p (identifier, parser->scope))
 {
   cp_token_position start = 0;


   error_at (token->location, "non-template %qD used as template",
      identifier);
   inform (token->location, "use %<%T::template %D%> to indicate that it is a template",
    parser->scope, identifier);

   if (cp_parser_simulate_error (parser))
     start = cp_lexer_token_position (parser->lexer, true);


   cp_lexer_consume_token (parser->lexer);
   cp_parser_enclosed_template_argument_list (parser);


   cp_parser_skip_to_closing_parenthesis (parser,
                      true,
                    true,
                         false);




   if (start)
     cp_lexer_purge_tokens_after (parser->lexer, start);
   if (is_identifier)
     *is_identifier = true;
   parser->context->object_type = (tree) 
# 17048 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 17048 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          ;
   return identifier;
 }





      if (template_keyword_p)
 {
   tree scope = (parser->scope ? parser->scope
   : parser->context->object_type);
   if (scope && (tree_code_type[(int) (((enum tree_code) (scope)->base.code))] == tcc_type)
       && (!(((((enum tree_code) (scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17061, __FUNCTION__))->type_common.lang_flag_5))
    || (check_dependency_p && dependent_type_p (scope))))
     {


       parser->context->object_type = (tree) 
# 17066 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                     __null
# 17066 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                              ;
       return identifier;
     }
 }
    }


  const bool scoped_p = ((parser->scope ? parser->scope
     : parser->context->object_type) != (tree) 
# 17074 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 17074 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                );


  decl = cp_parser_lookup_name (parser, identifier,
    tag_type,
                    true,
                     false,
    check_dependency_p,
                        
# 17082 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 17082 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ,
    token->location);

  decl = strip_using_decl (decl);


  if (((enum tree_code) (decl)->base.code) == TEMPLATE_DECL)
    {
      if (((decl)->base.deprecated_flag)
   && deprecated_state != DEPRECATED_SUPPRESS)
 {
   tree d = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17093, __FUNCTION__, (TEMPLATE_DECL))))))))->result;
   tree attr;
   if (((enum tree_code) (d)->base.code) == TYPE_DECL)
     attr = lookup_attribute ("deprecated",
         ((tree_class_check ((((contains_struct_check ((d), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17097, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17097, __FUNCTION__))->type_common.attributes));
   else
     attr = lookup_attribute ("deprecated",
         ((contains_struct_check ((d), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17100, __FUNCTION__))->decl_common.attributes));
   warn_deprecated_use (decl, attr);
 }
    }
  else
    {





      bool found = false;

      for (lkp_iterator iter (((((enum tree_code) (decl)->base.code) == BASELINK) ? (((struct tree_baselink*) (tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17113, __FUNCTION__, (BASELINK))))->functions) : decl));
    !found && iter; ++iter)
 if (((enum tree_code) (*iter)->base.code) == TEMPLATE_DECL)
   found = true;

      if (!found
   && (cxx_dialect > cxx17)
   && !scoped_p
   && cp_lexer_next_token_is (parser->lexer, CPP_LESS)
   && tag_type == none_type)
 {







   if (((enum tree_code) (decl)->base.code) == OVERLOAD

       || ((enum tree_code) (decl)->base.code) == FUNCTION_DECL)
     found = true;

   else if (decl == global_trees[TI_ERROR_MARK])
     return identifier;
 }

      if (!found)
 {

   cp_parser_error (parser, "expected template-name");
   return global_trees[TI_ERROR_MARK];
 }
    }

  return decl;
}
# 17159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_template_argument_list (cp_parser* parser)
{
  tree fixed_args[10];
  unsigned n_args = 0;
  unsigned alloced = 10;
  tree *arg_ary = fixed_args;
  tree vec;
  bool saved_in_template_argument_list_p;
  bool saved_ice_p;
  bool saved_non_ice_p;


  auto_suppress_location_wrappers sentinel;

  saved_in_template_argument_list_p = parser->in_template_argument_list_p;
  parser->in_template_argument_list_p = true;



  saved_ice_p = parser->integral_constant_expression_p;
  parser->integral_constant_expression_p = false;
  saved_non_ice_p = parser->non_integral_constant_expression_p;
  parser->non_integral_constant_expression_p = false;


  do
    {
      tree argument;

      if (n_args)

 cp_lexer_consume_token (parser->lexer);


      argument = cp_parser_template_argument (parser);



      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
        {
   if (argument == global_trees[TI_ERROR_MARK])
     {
       cp_token *token = cp_lexer_peek_token (parser->lexer);
       error_at (token->location,
   "expected parameter pack before %<...%>");
     }

          cp_lexer_consume_token (parser->lexer);



          argument = make_pack_expansion (argument);
        }

      if (n_args == alloced)
 {
   alloced *= 2;

   if (arg_ary == fixed_args)
     {
       arg_ary = ((tree *) xmalloc (sizeof (tree) * (alloced)));
       memcpy (arg_ary, fixed_args, sizeof (tree) * n_args);
     }
   else
     arg_ary = ((tree *) xrealloc ((void *) (arg_ary), sizeof (tree) * (alloced)));
 }
      arg_ary[n_args++] = argument;
    }
  while (cp_lexer_next_token_is (parser->lexer, CPP_COMMA));

  vec = make_tree_vec (n_args);

  while (n_args--)
    (*((const_cast<tree *> (tree_vec_elt_check ((vec), (n_args), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17233, __FUNCTION__))))) = arg_ary[n_args];

  if (arg_ary != fixed_args)
    free (arg_ary);
  parser->non_integral_constant_expression_p = saved_non_ice_p;
  parser->integral_constant_expression_p = saved_ice_p;
  parser->in_template_argument_list_p = saved_in_template_argument_list_p;
  if (1)
    ((contains_struct_check (((tree_check ((vec), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17241, __FUNCTION__, (TREE_VEC)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17241, __FUNCTION__))->common.chain) = build_int_cst ((tree) 
# 17241 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
   __null
# 17241 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   , ((tree_check ((vec), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17241, __FUNCTION__, (TREE_VEC)))->base.u.length));
  return vec;
}
# 17261 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_template_argument (cp_parser* parser)
{
  tree argument;
  bool template_p;
  bool address_p;
  bool maybe_type_id = false;
  cp_token *token = 
# 17268 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 17268 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       , *argument_start_token = 
# 17268 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                 __null
# 17268 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     ;
  location_t loc = 0;
  cp_id_kind idk;
# 17282 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  cp_parser_parse_tentatively (parser);
  argument = cp_parser_template_type_arg (parser);
# 17300 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (!cp_parser_error_occurred (parser)
      && cxx_dialect == cxx98
      && cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))
    {
      maybe_type_id = true;
      cp_parser_abort_tentative_parse (parser);
    }
  else
    {



      if (!cp_parser_next_token_ends_template_argument_p (parser))
 cp_parser_error (parser, "expected template-argument");

      if (cp_parser_parse_definitely (parser))
 return argument;
    }

  cp_parser_parse_tentatively (parser);

  argument_start_token = cp_lexer_peek_token (parser->lexer);
  argument = cp_parser_id_expression (parser,
                                 false,
                                 true,
          &template_p,
                           false,
                         false);


  if (!cp_parser_next_token_ends_template_argument_p (parser))
    cp_parser_error (parser, "expected template-argument");
  if (!cp_parser_error_occurred (parser))
    {




      if (((enum tree_code) (argument)->base.code) != TYPE_DECL)
 argument = cp_parser_lookup_name (parser, argument,
       none_type,
                       template_p,
                        false,
                            true,
                           
# 17344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 17344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
       argument_start_token->location);
      if (((enum tree_code) (argument)->base.code) != TEMPLATE_DECL
        && ((enum tree_code) (argument)->base.code) != UNBOUND_CLASS_TEMPLATE)
 cp_parser_error (parser, "expected template-name");
    }
  if (cp_parser_parse_definitely (parser))
    {
      if (((argument)->base.deprecated_flag))
 warn_deprecated_use (argument, (tree) 
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 17353 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        );
      return argument;
    }


  if (cxx_dialect > cxx14)
    goto general_expr;
# 17374 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      cp_parser_parse_tentatively (parser);
      argument = cp_parser_primary_expression (parser,
                          false,
                       false,
                               true,
            &idk);
      if (((enum tree_code) (argument)->base.code) != TEMPLATE_PARM_INDEX
   || !cp_parser_next_token_ends_template_argument_p (parser))
 cp_parser_simulate_error (parser);
      if (cp_parser_parse_definitely (parser))
 return argument;
    }



  address_p = cp_lexer_next_token_is (parser->lexer, CPP_AND);
  if (address_p)
    {
      loc = cp_lexer_peek_token (parser->lexer)->location;
      cp_lexer_consume_token (parser->lexer);
    }

  token = cp_lexer_peek_token (parser->lexer);
  if (token->type == CPP_NAME
      || token->keyword == RID_OPERATOR
      || token->type == CPP_SCOPE
      || token->type == ((enum cpp_ttype) (CPP_KEYWORD + 1))
      || token->type == ((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)))
    {
      cp_parser_parse_tentatively (parser);
      argument = cp_parser_primary_expression (parser,
            address_p,
                       false,
                               true,
            &idk);
      if (cp_parser_error_occurred (parser)
   || !cp_parser_next_token_ends_template_argument_p (parser))
 cp_parser_abort_tentative_parse (parser);
      else
 {
   tree probe;

   if ((((enum tree_code) (argument)->base.code) == INDIRECT_REF))
     {

       ((void)(!(((((enum tree_code) (argument)->base.code) == INDIRECT_REF) && ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((argument), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17421, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17421, __FUNCTION__))->typed.type) && (((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check (((argument)), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17421, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17421, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE))) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17421, __FUNCTION__), 0 : 0));
       argument = (*((const_cast<tree*> (tree_operand_check ((argument), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17422, __FUNCTION__)))));
     }




   probe = argument;
   if (((enum tree_code) (probe)->base.code) == SCOPE_REF)
     probe = (*((const_cast<tree*> (tree_operand_check ((probe), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 17430, __FUNCTION__)))));
   if ((((enum tree_code) (probe)->base.code) == VAR_DECL))
     {



       if (!address_p && !(decl_linkage (probe) == lk_external))
  cp_parser_simulate_error (parser);
     }
   else if (is_overloaded_fn (argument))



     ;
   else if (address_p
     && (((enum tree_code) (argument)->base.code) == OFFSET_REF
         || ((enum tree_code) (argument)->base.code) == SCOPE_REF))

     ;
   else if (((enum tree_code) (argument)->base.code) == TEMPLATE_PARM_INDEX)
     ;
   else
     cp_parser_simulate_error (parser);

   if (cp_parser_parse_definitely (parser))
     {
       if (address_p)
  argument = build_x_unary_op (loc, ADDR_EXPR, argument,
          tf_warning_or_error);
       else
  argument = convert_from_reference (argument);
       return argument;
     }
 }
    }


  if (address_p)
    {
      cp_parser_error (parser, "invalid non-type template argument");
      return global_trees[TI_ERROR_MARK];
    }

 general_expr:




  if (maybe_type_id)
    cp_parser_parse_tentatively (parser);

  if (cxx_dialect <= cxx14)
    argument = cp_parser_constant_expression (parser);
  else
    {

      if (cxx_dialect >= cxx20
   && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
 {
   bool expr_non_constant_p;
   return cp_parser_braced_list (parser, &expr_non_constant_p);
 }



      argument = cp_parser_assignment_expression (parser);
      require_potential_constant_expression (argument);
    }

  if (!maybe_type_id)
    return argument;
  if (!cp_parser_next_token_ends_template_argument_p (parser))
    cp_parser_error (parser, "expected template-argument");
  if (cp_parser_parse_definitely (parser))
    return argument;




  return cp_parser_template_type_arg (parser);
}
# 17534 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_explicit_instantiation (cp_parser* parser)
{
  int declares_class_or_enum;
  cp_decl_specifier_seq decl_specifiers;
  tree extension_specifier = (tree) 
# 17539 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 17539 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;

  timevar_push (TV_TEMPLATE_INST);



  if (cp_parser_allow_gnu_extensions_p (parser))
    {
      extension_specifier
 = cp_parser_storage_class_specifier_opt (parser);
      if (!extension_specifier)
 extension_specifier
   = cp_parser_function_specifier_opt (parser,
                          
# 17552 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 17552 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             );
    }


  cp_parser_require_keyword (parser, RID_TEMPLATE, RT_TEMPLATE);


  begin_explicit_instantiation ();


  push_deferring_access_checks (dk_no_check);

  cp_parser_decl_specifier_seq (parser,
    CP_PARSER_FLAGS_OPTIONAL,
    &decl_specifiers,
    &declares_class_or_enum);



  if (declares_class_or_enum && cp_parser_declares_only_class_p (parser))
    {
      tree type;

      type = check_tag_decl (&decl_specifiers,
                                          true);


      pop_deferring_access_checks ();
      if (type)
 do_type_instantiation (type, extension_specifier,
                       tf_error);
    }
  else
    {
      cp_declarator *declarator;
      tree decl;


      declarator
 = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
    CP_PARSER_FLAGS_NONE,
                            
# 17593 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 17593 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ,
                        
# 17594 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 17594 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ,
                 false,
                 false,
                 false);
      if (declares_class_or_enum & 2)
 cp_parser_check_for_definition_in_return_type (declarator,
             decl_specifiers.type,
             decl_specifiers.locations[ds_type_spec]);
      if (declarator != cp_error_declarator)
 {
   if (decl_spec_seq_has_spec_p (&decl_specifiers, ds_inline))
     permerror (decl_specifiers.locations[ds_inline],
         "explicit instantiation shall not use"
         " %<inline%> specifier");
   if (decl_spec_seq_has_spec_p (&decl_specifiers, ds_constexpr))
     permerror (decl_specifiers.locations[ds_constexpr],
         "explicit instantiation shall not use"
         " %<constexpr%> specifier");
   if (decl_spec_seq_has_spec_p (&decl_specifiers, ds_consteval))
     permerror (decl_specifiers.locations[ds_consteval],
         "explicit instantiation shall not use"
         " %<consteval%> specifier");

   decl = grokdeclarator (declarator, &decl_specifiers,
     NORMAL, 0, &decl_specifiers.attributes);


   pop_deferring_access_checks ();

   do_decl_instantiation (decl, extension_specifier);
 }
      else
 {
   pop_deferring_access_checks ();

   cp_parser_skip_to_end_of_statement (parser);
 }
    }

  end_explicit_instantiation ();

  cp_parser_consume_semicolon_at_end_of_statement (parser);

  timevar_pop (TV_TEMPLATE_INST);
}
# 17653 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_explicit_specialization (cp_parser* parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);


  cp_parser_require_keyword (parser, RID_TEMPLATE, RT_TEMPLATE);

  cp_parser_require (parser, CPP_LESS, RT_LESS);

  cp_parser_require (parser, CPP_GREATER, RT_GREATER);

  ++parser->num_template_parameter_lists;





  bool need_lang_pop = scope_chain->lang_name == cp_global_trees[CPTI_LANG_NAME_C];
  if (need_lang_pop)
    {
      error_at (token->location, "template specialization with C linkage");
      maybe_show_extern_c_location ();



      push_lang_context (cp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]);
      need_lang_pop = true;
    }


  if (begin_specialization ())
    {


      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
 {
   if (cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_LESS
       && cp_lexer_peek_nth_token (parser->lexer, 3)->type != CPP_GREATER)
     cp_parser_template_declaration_after_export (parser,
                     false);
   else
     cp_parser_explicit_specialization (parser);
 }
      else

 cp_parser_single_declaration (parser,
                     
# 17700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 17700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ,
                       false,
                                        true,
                       
# 17703 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 17703 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
    }


  end_specialization ();



  if (need_lang_pop)
    pop_lang_context ();


  --parser->num_template_parameter_lists;
}
# 17751 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_type_specifier (cp_parser* parser,
     cp_parser_flags flags,
     cp_decl_specifier_seq *decl_specs,
     bool is_declaration,
     int* declares_class_or_enum,
     bool* is_cv_qualifier)
{
  tree type_spec = (tree) 
# 17759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 17759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
  cp_token *token;
  enum rid keyword;
  cp_decl_spec ds = ds_last;


  if (declares_class_or_enum)
    *declares_class_or_enum = 0;

  if (is_cv_qualifier)
    *is_cv_qualifier = false;

  token = cp_lexer_peek_token (parser->lexer);



  keyword = token->keyword;
  switch (keyword)
    {
    case RID_ENUM:
      if ((flags & CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS))
 goto elaborated_type_specifier;


      type_spec = cp_parser_enum_specifier (parser);

      if (type_spec)
 {
   if (declares_class_or_enum)
     *declares_class_or_enum = 2;
   if (decl_specs)
     cp_parser_set_decl_spec_type (decl_specs,
       type_spec,
       token,
                             true);
   return type_spec;
 }
      else
 goto elaborated_type_specifier;



    case RID_CLASS:
    case RID_STRUCT:
    case RID_UNION:
      if ((flags & CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS))
 goto elaborated_type_specifier;



      cp_parser_parse_tentatively (parser);

      type_spec = cp_parser_class_specifier (parser);
      invoke_plugin_callbacks (PLUGIN_FINISH_TYPE, type_spec);

      if (cp_parser_parse_definitely (parser))
 {
   if (declares_class_or_enum)
     *declares_class_or_enum = 2;
   if (decl_specs)
     cp_parser_set_decl_spec_type (decl_specs,
       type_spec,
       token,
                             true);
   return type_spec;
 }


    elaborated_type_specifier:

      if (declares_class_or_enum)
 *declares_class_or_enum = 1;


    case RID_TYPENAME:

      type_spec
 = (cp_parser_elaborated_type_specifier
    (parser,
     decl_spec_seq_has_spec_p (decl_specs, ds_friend),
     is_declaration));
      if (decl_specs)
 cp_parser_set_decl_spec_type (decl_specs,
          type_spec,
          token,
                                false);
      return type_spec;

    case RID_CONST:
      ds = ds_const;
      if (is_cv_qualifier)
 *is_cv_qualifier = true;
      break;

    case RID_VOLATILE:
      ds = ds_volatile;
      if (is_cv_qualifier)
 *is_cv_qualifier = true;
      break;

    case RID_RESTRICT:
      ds = ds_restrict;
      if (is_cv_qualifier)
 *is_cv_qualifier = true;
      break;

    case RID_COMPLEX:

      ds = ds_complex;
      break;

    default:
      break;
    }


  if (ds != ds_last)
    {
      if (decl_specs)
 {
   set_and_check_decl_spec_loc (decl_specs, ds, token);
   decl_specs->any_specifiers_p = true;
 }
      return cp_lexer_consume_token (parser->lexer)->u.value;
    }



  type_spec = cp_parser_simple_type_specifier (parser,
            decl_specs,
            flags);



  if (!type_spec && !(flags & CP_PARSER_FLAGS_OPTIONAL))
    {
      cp_parser_error (parser, "expected type specifier");
      return global_trees[TI_ERROR_MARK];
    }

  return type_spec;
}
# 17948 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_simple_type_specifier (cp_parser* parser,
     cp_decl_specifier_seq *decl_specs,
     cp_parser_flags flags)
{
  tree type = (tree) 
# 17953 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 17953 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  cp_token *token;
  int idx;


  token = cp_lexer_peek_token (parser->lexer);


  switch (token->keyword)
    {
    case RID_CHAR:
      if (decl_specs)
 decl_specs->explicit_char_p = true;
      type = integer_types[itk_char];
      break;
    case RID_CHAR8:
      type = c_global_trees[CTI_CHAR8_TYPE];
      break;
    case RID_CHAR16:
      type = c_global_trees[CTI_CHAR16_TYPE];
      break;
    case RID_CHAR32:
      type = c_global_trees[CTI_CHAR32_TYPE];
      break;
    case RID_WCHAR:
      type = c_global_trees[CTI_WCHAR_TYPE];
      break;
    case RID_BOOL:
      type = global_trees[TI_BOOLEAN_TYPE];
      break;
    case RID_SHORT:
      set_and_check_decl_spec_loc (decl_specs, ds_short, token);
      type = integer_types[itk_short];
      break;
    case RID_INT:
      if (decl_specs)
 decl_specs->explicit_int_p = true;
      type = integer_types[itk_int];
      break;
    case RID_INT_N_0:
    case RID_INT_N_1:
    case RID_INT_N_2:
    case RID_INT_N_3:
      idx = token->keyword - RID_INT_N_0;
      if (! int_n_enabled_p [idx])
 break;
      if (decl_specs)
 {
   decl_specs->explicit_intN_p = true;
   decl_specs->int_n_idx = idx;


   if (strncmp (((const char *) (tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18005, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str)
   + (((tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18006, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.len) - 2),
   "__", 2) == 0)
     decl_specs->int_n_alt = true;
 }
      type = int_n_trees [idx].signed_type;
      break;
    case RID_LONG:
      if (decl_specs)
 set_and_check_decl_spec_loc (decl_specs, ds_long, token);
      type = integer_types[itk_long];
      break;
    case RID_SIGNED:
      set_and_check_decl_spec_loc (decl_specs, ds_signed, token);
      type = integer_types[itk_int];
      break;
    case RID_UNSIGNED:
      set_and_check_decl_spec_loc (decl_specs, ds_unsigned, token);
      type = integer_types[itk_unsigned_int];
      break;
    case RID_FLOAT:
      type = global_trees[TI_FLOAT_TYPE];
      break;
    case RID_DOUBLE:
      type = global_trees[TI_DOUBLE_TYPE];
      break;
    case RID_VOID:
      type = global_trees[TI_VOID_TYPE];
      break;

    case RID_AUTO:
      maybe_warn_cpp0x (CPP0X_AUTO);
      if (parser->auto_is_implicit_function_template_parm_p)
 {


   bool have_trailing_return_fn_decl = false;

   cp_parser_parse_tentatively (parser);
   cp_lexer_consume_token (parser->lexer);
   while (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_EOF))
     {
       if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
  {
    cp_lexer_consume_token (parser->lexer);
    cp_parser_skip_to_closing_parenthesis (parser,
                      false,
                    false,
                         true);
    continue;
  }

       if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))
  {
    have_trailing_return_fn_decl = true;
    break;
  }

       cp_lexer_consume_token (parser->lexer);
     }
   cp_parser_abort_tentative_parse (parser);

   if (have_trailing_return_fn_decl)
     {
       type = make_auto ();
       break;
     }

   if (cxx_dialect >= cxx14)
     {
       type = synthesize_implicit_template_parm (parser, (tree) 
# 18078 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                        __null
# 18078 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                 );
       type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18079, __FUNCTION__))->typed.type);
     }
   else
     type = global_trees[TI_ERROR_MARK];

   if (scope_chain->class_type && (((enum tree_code) (scope_chain->class_type)->base.code) == RECORD_TYPE && ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name))) && ((tree_check ((((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__))->type_common.name)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18084, __FUNCTION__, (IDENTIFIER_NODE)))->base.protected_flag)))
     {
       if (cxx_dialect < cxx14)
  error_at (token->location,
    "use of %<auto%> in lambda parameter declaration "
    "only available with "
    "%<-std=c++14%> or %<-std=gnu++14%>");
     }
   else if (cxx_dialect < cxx14)
     error_at (token->location,
       "use of %<auto%> in parameter declaration "
       "only available with "
       "%<-std=c++14%> or %<-std=gnu++14%>");
   else if (!global_options.x_flag_concepts)
     pedwarn (token->location, 0,
       "use of %<auto%> in parameter declaration "
       "only available with %<-fconcepts-ts%>");
 }
      else
 type = make_auto ();
      break;

    case RID_DECLTYPE:




      cp_parser_decltype (parser);
      cp_lexer_set_token_position (parser->lexer, token);
      break;

    case RID_TYPEOF:

      cp_lexer_consume_token (parser->lexer);

      type = cp_parser_sizeof_operand (parser, RID_TYPEOF);

      if (!(tree_code_type[(int) (((enum tree_code) (type)->base.code))] == tcc_type))
 type = finish_typeof (type);

      if (decl_specs)
 cp_parser_set_decl_spec_type (decl_specs, type,
          token,
                                false);

      return type;

    case RID_UNDERLYING_TYPE:
      type = cp_parser_trait_expr (parser, RID_UNDERLYING_TYPE);
      if (decl_specs)
 cp_parser_set_decl_spec_type (decl_specs, type,
          token,
                                false);

      return type;

    case RID_BASES:
    case RID_DIRECT_BASES:
      type = cp_parser_trait_expr (parser, token->keyword);
      if (decl_specs)
       cp_parser_set_decl_spec_type (decl_specs, type,
                                     token,
                                                           false);
      return type;
    default:
      break;
    }



  if (token->type == ((enum cpp_ttype) (((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1)) + 1))
      && cp_lexer_peek_nth_token (parser->lexer, 2)->type != CPP_SCOPE)
    {
      type = saved_checks_value (token->u.tree_check_value);
      if (decl_specs)
 {
   cp_parser_set_decl_spec_type (decl_specs, type,
     token,
                           false);



   decl_specs->decltype_p = true;
 }
      cp_lexer_consume_token (parser->lexer);
      return type;
    }


  if (type)
    {

      if (decl_specs
   && (token->keyword != RID_SIGNED
       && token->keyword != RID_UNSIGNED
       && token->keyword != RID_SHORT
       && token->keyword != RID_LONG))
 cp_parser_set_decl_spec_type (decl_specs,
          type,
          token,
                                false);
      if (decl_specs)
 decl_specs->any_specifiers_p = true;


      cp_lexer_consume_token (parser->lexer);

      if (type == global_trees[TI_ERROR_MARK])
 return global_trees[TI_ERROR_MARK];




      cp_parser_check_for_invalid_template_id (parser, type, none_type,
            token->location);

      return ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18200, __FUNCTION__))->type_common.name);
    }


  if (!(flags & CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES))
    {
      bool qualified_p;
      bool global_p;
      const bool typename_p = (cxx_dialect >= cxx20
          && (flags & CP_PARSER_FLAGS_TYPENAME_OPTIONAL));



      if (flags & CP_PARSER_FLAGS_OPTIONAL)
 cp_parser_parse_tentatively (parser);



      bool tent = cp_parser_parsing_tentatively (parser);

      token = cp_lexer_peek_token (parser->lexer);


      global_p
 = (cp_parser_global_scope_opt (parser,
                                     false)
    != (tree) 
# 18226 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 18226 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               );

      qualified_p
 = (cp_parser_nested_name_specifier_opt (parser,
                             false,
                             true,
                 false,
                         false)
    != (tree) 
# 18234 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 18234 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               );


      if (parser->scope
   && cp_parser_optional_template_keyword (parser))
 {

   type = cp_parser_template_id (parser,
                            true,
                            true,
     none_type,
                        false);


   if (((enum tree_code) (type)->base.code) != TYPE_DECL)
     {

       if (typename_p)
  type = cp_parser_make_typename_type (parser, type,
           token->location);
       else
  {
    cp_parser_error (parser, "expected template-id for type");
    type = global_trees[TI_ERROR_MARK];
  }
     }
 }



      else if (parser->scope
        && qualified_p
        && typename_p
        && cp_lexer_next_token_is (parser->lexer, ((enum cpp_ttype) (CPP_KEYWORD + 1))))
 {
   cp_parser_parse_tentatively (parser);

   type = cp_parser_template_id (parser,
                            true,
                            true,
     none_type,
                        false);

   if (type && concept_check_p (type))
     cp_parser_simulate_error (parser);

   if (!cp_parser_parse_definitely (parser))
     type = (tree) 
# 18281 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 18281 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
   else if (((enum tree_code) (type)->base.code) == TEMPLATE_ID_EXPR)
     type = make_typename_type (parser->scope, type, typename_type,
                        tf_error);
   else if (((enum tree_code) (type)->base.code) != TYPE_DECL)
     type = (tree) 
# 18286 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 18286 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
 }


      if (!type)
 {
   if (cxx_dialect >= cxx17)
     cp_parser_parse_tentatively (parser);

   type = cp_parser_type_name (parser, (qualified_p && typename_p));

   if (cxx_dialect >= cxx17 && !cp_parser_parse_definitely (parser))
     type = (tree) 
# 18298 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 18298 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
 }

      if (!type && global_options.x_flag_concepts && decl_specs)
 {



   cp_parser_parse_tentatively (parser);

   type = cp_parser_template_id (parser,
                            false,
                            true,
     none_type,
                        false);
   if (type && concept_check_p (type))
     {
       location_t loc = ((((type)) && ((tree_code_type[(int) (((enum tree_code) ((type))->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) ((type))->base.code))]) <= tcc_expression)) ? (type)->exp.locus : ((location_t) 0));
       type = cp_parser_placeholder_type_specifier (parser, loc,
          type, tent);
       if (tent && type == global_trees[TI_ERROR_MARK])

  cp_parser_simulate_error (parser);
     }
   else
     cp_parser_simulate_error (parser);

   if (!cp_parser_parse_definitely (parser))
     type = (tree) 
# 18326 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 18326 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
 }

      if (!type && cxx_dialect >= cxx17)
 {


   tree name = cp_parser_identifier (parser);
   if (name && ((enum tree_code) (name)->base.code) == IDENTIFIER_NODE
       && parser->scope != global_trees[TI_ERROR_MARK])
     {
       location_t loc
  = cp_lexer_previous_token (parser->lexer)->location;
       tree tmpl = cp_parser_lookup_name (parser, name,
       none_type,
                       false,
                        false,
                            true,
                           
# 18344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 18344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
       token->location);
       if (tmpl && tmpl != global_trees[TI_ERROR_MARK]
    && ctad_template_p (tmpl))
  type = make_template_placeholder (tmpl);
       else if (global_options.x_flag_concepts && tmpl && concept_definition_p (tmpl))
  type = cp_parser_placeholder_type_specifier (parser, loc,
            tmpl, tent);
       else
  {
    type = global_trees[TI_ERROR_MARK];
    if (!cp_parser_simulate_error (parser))
      cp_parser_name_lookup_error (parser, name, tmpl,
       NLE_TYPE, token->location);
  }
     }
   else
     type = global_trees[TI_ERROR_MARK];
 }


      if ((flags & CP_PARSER_FLAGS_OPTIONAL)
   && !cp_parser_parse_definitely (parser))
 type = (tree) 
# 18367 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 18367 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;


      if (type
   && !global_p
   && !qualified_p
   && ((enum tree_code) (type)->base.code) == TYPE_DECL
   && identifier_p (((contains_struct_check ((type), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18374, __FUNCTION__))->decl_minimal.name)))
 maybe_note_name_used_in_class (((contains_struct_check ((type), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18375, __FUNCTION__))->decl_minimal.name), type);

      if (type && decl_specs)
 cp_parser_set_decl_spec_type (decl_specs, type,
          token,
                                false);
    }


  if (!type && !(flags & CP_PARSER_FLAGS_OPTIONAL))
    {
      cp_parser_error (parser, "expected type-name");
      return global_trees[TI_ERROR_MARK];
    }

  if (type && type != global_trees[TI_ERROR_MARK])
    {






      if (((c_language & clk_objc) != 0) && !parser->scope
   && (objc_is_id (type) || objc_is_class_name (type)))
 {
   tree protos = cp_parser_objc_protocol_refs_opt (parser);
   tree qual_type = objc_get_protocol_qualified_type (type, protos);



   if (decl_specs)
     decl_specs->type = qual_type;

   return qual_type;
 }




      cp_parser_check_for_invalid_template_id (parser, type,
            none_type,
            token->location);
    }

  return type;
}
# 18442 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
tree
cp_parser_placeholder_type_specifier (cp_parser *parser, location_t loc,
          tree tmpl, bool tentative)
{
  if (tmpl == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  tree orig_tmpl = tmpl;


  tree args = (tree) 
# 18452 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 18452 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  if (((enum tree_code) (tmpl)->base.code) == TEMPLATE_ID_EXPR)
    {
      args = (*((const_cast<tree*> (tree_operand_check ((tmpl), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18455, __FUNCTION__)))));
      tmpl = (*((const_cast<tree*> (tree_operand_check ((tmpl), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18456, __FUNCTION__)))));
    }
  if (args == (tree) 
# 18458 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 18458 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )

    tentative = false;

  tsubst_flags_t complain = tentative ? tf_none : tf_warning_or_error;


  tree_pair info = finish_type_constraints (tmpl, args, complain);
  tree con = info.first;
  tree proto = info.second;
  if (con == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];



  cp_token *placeholder = 
# 18473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 18473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , *close_paren = 
# 18473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 18473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  ;
  if (cxx_dialect >= cxx20)
    {
      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO))
 placeholder = cp_lexer_consume_token (parser->lexer);
      else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_DECLTYPE))
 {
   placeholder = cp_lexer_consume_token (parser->lexer);
   matching_parens parens;
   parens.require_open (parser);
   cp_parser_require_keyword (parser, RID_AUTO, RT_AUTO);
   close_paren = parens.require_close (parser);
 }
    }




  if (((enum tree_code) (proto)->base.code) != TYPE_DECL)
    {
      if (!global_options.x_flag_concepts_ts
   || !processing_template_parmlist)
 {
   error_at (loc, "%qE does not constrain a type", ((contains_struct_check ((con), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18496, __FUNCTION__))->decl_minimal.name));
   inform (((contains_struct_check ((con), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18497, __FUNCTION__))->decl_minimal.locus), "concept defined here");
   return global_trees[TI_ERROR_MARK];
 }
    }



  if (processing_template_parmlist && !placeholder)
    return build_constrained_parameter (con, proto, args);


  if (!global_options.x_flag_concepts_ts
      && !parser->in_result_type_constraint_p
      && !placeholder)
    {
      if (tentative)

 return global_trees[TI_ERROR_MARK];

      tree id = build_nt (TEMPLATE_ID_EXPR, tmpl, args);
      tree expr = (tree_code_type[(int) (((enum tree_code) (orig_tmpl)->base.code))] == tcc_declaration) ? ((contains_struct_check ((con), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18517, __FUNCTION__))->decl_minimal.name) : id;
      error_at (input_location,
  "expected %<auto%> or %<decltype(auto)%> after %qE", expr);

    }
  else if (parser->in_result_type_constraint_p && placeholder)
    {

      error_at (input_location,
  "unexpected placeholder in constrained result type");
    }



  if (parser->auto_is_implicit_function_template_parm_p)
    {
      if (close_paren)
 {
   location_t loc = make_location (placeholder->location,
       placeholder->location,
       close_paren->location);
   error_at (loc, "cannot declare a parameter with %<decltype(auto)%>");
   return global_trees[TI_ERROR_MARK];
 }
      tree parm = build_constrained_parameter (con, proto, args);
      return synthesize_implicit_template_parm (parser, parm);
    }




  bool decltype_p = placeholder
    ? placeholder->keyword == RID_DECLTYPE
    : parser->in_result_type_constraint_p;


  if (decltype_p)
    return make_constrained_decltype_auto (con, args);
  else
    return make_constrained_auto (con, args);
}
# 18584 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_type_name (cp_parser* parser, bool typename_keyword_p)
{
  tree type_decl;


  cp_parser_parse_tentatively (parser);

  type_decl = cp_parser_class_name (parser,
        typename_keyword_p,
                               false,
        none_type,
                               true,
                         false,
                           false);

  if (!cp_parser_parse_definitely (parser))
    {
      if (cxx_dialect < cxx11)

 return cp_parser_nonclass_name (parser);

      cp_parser_parse_tentatively (parser);


      type_decl = cp_parser_template_id (parser,
                             false,
                             true,
      none_type,
                         false);
# 18627 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (type_decl != (tree) 
# 18627 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
   
# 18628 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && ((enum tree_code) (type_decl)->base.code) == TYPE_DECL
   && ((contains_struct_check (((tree_check ((type_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18629, __FUNCTION__, (TYPE_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18629, __FUNCTION__))->decl_common.lang_flag_6))
 ((void)(!(((((contains_struct_check ((type_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18630, __FUNCTION__))->decl_common.lang_specific)->u.base.use_template) & 1)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18630, __FUNCTION__), 0 : 0));
      else
 cp_parser_simulate_error (parser);

      if (!cp_parser_parse_definitely (parser))

 return cp_parser_nonclass_name (parser);
    }

  return type_decl;
}
# 18656 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_nonclass_name (cp_parser* parser)
{
  tree type_decl;
  tree identifier;

  cp_token *token = cp_lexer_peek_token (parser->lexer);
  identifier = cp_parser_identifier (parser);
  if (identifier == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];


  type_decl = cp_parser_lookup_name_simple (parser, identifier, token->location);

  type_decl = strip_using_decl (type_decl);

  if (((enum tree_code) (type_decl)->base.code) != TYPE_DECL
      && (objc_is_id (identifier) || objc_is_class_name (identifier)))
    {

      tree protos = cp_parser_objc_protocol_refs_opt (parser);
      tree type = objc_get_protocol_qualified_type (identifier, protos);
      if (type)
 type_decl = ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18679, __FUNCTION__))->type_common.name);
    }


  if (((enum tree_code) (type_decl)->base.code) != TYPE_DECL






      || (objc_is_class_name (((contains_struct_check ((type_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18690, __FUNCTION__))->typed.type))
   && cp_lexer_peek_token (parser->lexer)->type == CPP_DOT))
    {
      if (!cp_parser_simulate_error (parser))
 cp_parser_name_lookup_error (parser, identifier, type_decl,
         NLE_TYPE, token->location);
      return global_trees[TI_ERROR_MARK];
    }




  else if (type_decl != global_trees[TI_ERROR_MARK]
    && !parser->scope)
    maybe_note_name_used_in_class (identifier, type_decl);

  return type_decl;
}
# 18735 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_elaborated_type_specifier (cp_parser* parser,
         bool is_friend,
         bool is_declaration)
{
  enum tag_types tag_type;
  tree identifier;
  tree type = (tree) 
# 18742 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 18742 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  tree attributes = (tree) 
# 18743 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 18743 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  tree globalscope;
  cp_token *token = 
# 18745 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 18745 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;


  location_t key_loc = cp_lexer_peek_token (parser->lexer)->location;

  rid scoped_key = RID_MAX;


  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_ENUM))
    {

      cp_lexer_consume_token (parser->lexer);

      tag_type = enum_type;


      cp_token *token = cp_lexer_peek_token (parser->lexer);
      if (cp_parser_is_keyword (token, scoped_key = RID_CLASS)
   || cp_parser_is_keyword (token, scoped_key = RID_STRUCT))
 {
   location_t loc = token->location;
   gcc_rich_location richloc (loc);
   richloc.add_range (input_location);
   richloc.add_fixit_remove ();
   pedwarn (&richloc, 0, "elaborated-type-specifier for "
     "a scoped enum must not use the %qD keyword",
     token->u.value);

   cp_lexer_consume_token (parser->lexer);

   key_loc = make_location (key_loc, key_loc, loc);
 }
      else
 scoped_key = RID_MAX;


      attributes = cp_parser_attributes_opt (parser);
    }

  else if (cp_lexer_next_token_is_keyword (parser->lexer,
        RID_TYPENAME))
    {

      cp_lexer_consume_token (parser->lexer);

      tag_type = typename_type;
    }

  else
    {
      key_loc = cp_lexer_peek_token (parser->lexer)->location;
      tag_type = cp_parser_class_key (parser);
      if (tag_type == none_type)
 return global_trees[TI_ERROR_MARK];

      attributes = cp_parser_attributes_opt (parser);
    }


  globalscope = cp_parser_global_scope_opt (parser,
                                    false);

  tree nested_name_specifier;
  if (tag_type == typename_type && !globalscope)
    {
      nested_name_specifier
 = cp_parser_nested_name_specifier (parser,
                               true,
                               true,
                   true,
        is_declaration);
      if (!nested_name_specifier)
 return global_trees[TI_ERROR_MARK];
    }
  else



    nested_name_specifier
      = cp_parser_nested_name_specifier_opt (parser,
                                 true,
                                 true,
                     true,
          is_declaration);


  if (tag_type != enum_type)
    {
      bool template_p = false;
      tree decl;


      template_p = cp_parser_optional_template_keyword (parser);


      if (!template_p)
 cp_parser_parse_tentatively (parser);

      else if (!nested_name_specifier && !globalscope)
 {
   cp_parser_error (parser, "%<template%> must follow a nested-"
      "name-specifier");
   return global_trees[TI_ERROR_MARK];
 }


      token = cp_lexer_peek_token (parser->lexer);
      decl = cp_parser_template_id (parser, template_p,
                               true,
        tag_type,
        is_declaration);


      if (!template_p && !cp_parser_parse_definitely (parser))
 ;






      else if (tag_type == typename_type && (((enum tree_code) (decl)->base.code) == BASELINK))
 {
   cp_parser_diagnose_invalid_type_name (parser, decl, token->location);
   type = global_trees[TI_ERROR_MARK];
 }



      else if (((enum tree_code) (decl)->base.code) == TEMPLATE_ID_EXPR
        && tag_type == typename_type)
 type = make_typename_type (parser->scope, decl,
       typename_type,
                    tf_error);


      else if (tag_type == typename_type && ((enum tree_code) (decl)->base.code) != TYPE_DECL)
        ;
      else if (((enum tree_code) (decl)->base.code) == TYPE_DECL)
 {
   type = check_elaborated_type_specifier (tag_type, decl,
                             true);




   if (type != global_trees[TI_ERROR_MARK]
       && !nested_name_specifier && !is_friend
       && cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
     check_unqualified_spec_or_inst (type, token->location);
 }
      else if (decl == global_trees[TI_ERROR_MARK])
 type = global_trees[TI_ERROR_MARK];
    }

  if (!type)
    {
      token = cp_lexer_peek_token (parser->lexer);
      identifier = cp_parser_identifier (parser);

      if (identifier == global_trees[TI_ERROR_MARK])
 {
   parser->scope = (tree) 
# 18907 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 18907 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
   return global_trees[TI_ERROR_MARK];
 }


      if (tag_type == typename_type
   && ((enum tree_code) (parser->scope)->base.code) != NAMESPACE_DECL)
 return cp_parser_make_typename_type (parser, identifier,
          token->location);



      bool template_parm_lists_apply
   = parser->num_template_parameter_lists;
      if (template_parm_lists_apply)
 for (cp_binding_level *s = (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings));
      s && s->kind != sk_template_parms;
      s = s->level_chain)
   if (s->kind == sk_function_parms)
     template_parm_lists_apply = false;


      if (parser->scope)
 {
   tree decl;
   tree ambiguous_decls;

   decl = cp_parser_lookup_name (parser, identifier,
     tag_type,
                     false,
                      false,
                          true,
     &ambiguous_decls,
     token->location);



   if (ambiguous_decls)
     return global_trees[TI_ERROR_MARK];
# 18968 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   decl = (cp_parser_maybe_treat_template_as_class
    (decl, is_friend
    && template_parm_lists_apply));

   if (((enum tree_code) (decl)->base.code) != TYPE_DECL)
     {
       cp_parser_diagnose_invalid_type_name (parser,
          identifier,
          token->location);
       return global_trees[TI_ERROR_MARK];
     }

   if (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18980, __FUNCTION__))->typed.type))->base.code) != TYPENAME_TYPE)
            {
              bool allow_template = (template_parm_lists_apply
                       || (((enum tree_code) (decl)->base.code) == TYPE_DECL && ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 18983, __FUNCTION__))->decl_common.lang_flag_4)));
              type = check_elaborated_type_specifier (tag_type, decl,
                                                      allow_template);

              if (type == global_trees[TI_ERROR_MARK])
                return global_trees[TI_ERROR_MARK];
            }
# 19004 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)
       && !is_friend && is_declaration
       && !scope_chain->x_processing_explicit_instantiation)
            warning (0, "declaration %qD does not declare anything", decl);

   type = ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19009, __FUNCTION__))->typed.type);
 }
      else
 {
# 19056 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   tag_scope ts;
   bool template_p;

   if (is_friend)

     ts = ts_within_enclosing_non_class;
   else if (is_declaration
     && cp_lexer_next_token_is (parser->lexer,
           CPP_SEMICOLON))

     ts = ts_current;
   else
     ts = ts_global;

   template_p =
     (template_parm_lists_apply
      && (cp_parser_next_token_starts_class_definition_p (parser)
   || cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)));


   if (template_parm_lists_apply
       && !cp_parser_check_template_parameters (parser,
                               0,
                            false,
             token->location,
                            
# 19081 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 19081 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ))
     return global_trees[TI_ERROR_MARK];
   type = xref_tag (tag_type, identifier, ts, template_p);
 }
    }

  if (type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];


  if (attributes)
    {
      if (((enum tree_code) (type)->base.code) == TYPENAME_TYPE)
 warning (OPT_Wattributes,
   "attributes ignored on uninstantiated type");
      else if (tag_type != enum_type && (((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19096, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) & 1)
        && ! scope_chain->x_processing_explicit_instantiation)
 warning (OPT_Wattributes,
   "attributes ignored on template instantiation");
      else if (is_declaration && cp_parser_declares_only_class_p (parser))
 cplus_decl_attributes (&type, attributes, (int) ATTR_FLAG_TYPE_IN_PLACE);
      else
 warning (OPT_Wattributes,
   "attributes ignored on elaborated-type-specifier that is not a forward declaration");
    }

  if (tag_type == enum_type)
    cp_parser_maybe_warn_enum_key (parser, key_loc, type, scoped_key);
  else
    {


      bool decl_class = (is_declaration
    && cp_parser_declares_only_class_p (parser));
      cp_parser_check_class_key (parser, key_loc, tag_type, type, false,
     decl_class);



      if ((((((enum tree_code) (type)->base.code)) == RECORD_TYPE || (((enum tree_code) (type)->base.code)) == UNION_TYPE) && ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19120, __FUNCTION__))->type_common.lang_flag_5)) && !currently_open_class (type))
 ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19121, __FUNCTION__))->type_with_lang_specific.lang_specific))->declared_class) = (tag_type == class_type);
    }



  cp_parser_check_for_invalid_template_id (parser, type, tag_type,
        token->location);

  return type;
}
# 19162 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_enum_specifier (cp_parser* parser)
{
  tree identifier;
  tree type = (tree) 
# 19166 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 19166 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  tree prev_scope;
  tree nested_name_specifier = (tree) 
# 19168 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 19168 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;
  tree attributes;
  bool scoped_enum_p = false;
  bool has_underlying_type = false;
  bool nested_being_defined = false;
  bool new_value_list = false;
  bool is_new_type = false;
  bool is_unnamed = false;
  tree underlying_type = (tree) 
# 19176 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 19176 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
  cp_token *type_start_token = 
# 19177 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 19177 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;
  temp_override<bool> cleanup (parser->colon_corrects_to_scope_p, false);



  cp_parser_parse_tentatively (parser);





  cp_lexer_consume_token (parser->lexer);



  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_CLASS)
      || cp_lexer_next_token_is_keyword (parser->lexer, RID_STRUCT))
    {
      if (cxx_dialect < cxx11)
        maybe_warn_cpp0x (CPP0X_SCOPED_ENUMS);


      cp_lexer_consume_token (parser->lexer);

      scoped_enum_p = true;
    }

  attributes = cp_parser_attributes_opt (parser);


  parser->scope = (tree) 
# 19207 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 19207 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
  parser->qualifying_scope = (tree) 
# 19208 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 19208 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  parser->object_scope = (tree) 
# 19209 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 19209 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;


  prev_scope = current_scope ();

  type_start_token = cp_lexer_peek_token (parser->lexer);

  push_deferring_access_checks (dk_no_check);
  nested_name_specifier
    = cp_parser_nested_name_specifier_opt (parser,
                               true,
                               false,
                   false,
                           false);

  if (nested_name_specifier)
    {
      tree name;

      identifier = cp_parser_identifier (parser);
      name = cp_parser_lookup_name (parser, identifier,
        enum_type,
                        false,
                         false,
                             true,
                            
# 19234 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 19234 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ,
        input_location);
      if (name && name != global_trees[TI_ERROR_MARK])
 {
   type = ((contains_struct_check ((name), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19238, __FUNCTION__))->typed.type);
   if (((enum tree_code) (type)->base.code) == TYPENAME_TYPE)
     {

       if (template_parm_scope_p ())
  pedwarn (type_start_token->location, OPT_Wpedantic,
    "%qD is an enumeration template", name);


       type = (tree) 
# 19247 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 19247 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
     }
 }
      else if (nested_name_specifier == global_trees[TI_ERROR_MARK])
                                   ;
      else
 {
   error_at (type_start_token->location,
      "%qD does not name an enumeration in %qT",
      identifier, nested_name_specifier);
   nested_name_specifier = global_trees[TI_ERROR_MARK];
 }
    }
  else
    {
      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 identifier = cp_parser_identifier (parser);
      else
 {
   identifier = make_anon_name ();
   is_unnamed = true;
   if (scoped_enum_p)
     error_at (type_start_token->location,
        "unnamed scoped enum is not allowed");
 }
    }
  pop_deferring_access_checks ();



  if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))
    {
      cp_decl_specifier_seq type_specifiers;


      cp_lexer_consume_token (parser->lexer);


      cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_NONE,
                           false,
                               false,
                                    &type_specifiers);


      if (!cp_parser_parse_definitely (parser))
 return (tree) 
# 19292 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 19292 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;

      if (cxx_dialect < cxx11)
        maybe_warn_cpp0x (CPP0X_SCOPED_ENUMS);

      has_underlying_type = true;


      if (type_specifiers.type != global_trees[TI_ERROR_MARK])
        {
          underlying_type = grokdeclarator (
# 19302 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                           __null
# 19302 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                               , &type_specifiers, TYPENAME,
                                                            0, 
# 19303 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                              __null
# 19303 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                  );
          if (underlying_type == global_trees[TI_ERROR_MARK]
       || check_for_bare_parameter_packs (underlying_type))
            underlying_type = (tree) 
# 19306 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 19306 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
        }
    }


  if (!cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      if (cxx_dialect < cxx11 || (!scoped_enum_p && !underlying_type))
 {
   if (has_underlying_type)
     cp_parser_commit_to_tentative_parse (parser);
   cp_parser_error (parser, "expected %<{%>");
   if (has_underlying_type)
     return global_trees[TI_ERROR_MARK];
 }

      if ((scoped_enum_p || underlying_type)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
 {
   if (has_underlying_type)
     cp_parser_commit_to_tentative_parse (parser);
   cp_parser_error (parser, "expected %<;%> or %<{%>");
   if (has_underlying_type)
     return global_trees[TI_ERROR_MARK];
 }
    }

  if (!has_underlying_type && !cp_parser_parse_definitely (parser))
    return (tree) 
# 19334 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 19334 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  if (nested_name_specifier)
    {
      if ((((((enum tree_code) (nested_name_specifier)->base.code)) == RECORD_TYPE || (((enum tree_code) (nested_name_specifier)->base.code)) == UNION_TYPE) && ((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19338, __FUNCTION__))->type_common.lang_flag_5)))
 {
   nested_being_defined = ((((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19340, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined);
   ((((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19341, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined) = 1;
   push_scope (nested_name_specifier);
 }
      else if (((enum tree_code) (nested_name_specifier)->base.code) == NAMESPACE_DECL)
 push_nested_namespace (nested_name_specifier);
    }


  if (!cp_parser_check_type_definition (parser))
    type = global_trees[TI_ERROR_MARK];
  else



    type = start_enum (identifier, type, underlying_type,
         attributes, scoped_enum_p, &is_new_type);



  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      timevar_push (TV_PARSE_ENUM);
      if (nested_name_specifier
   && nested_name_specifier != global_trees[TI_ERROR_MARK])
 {


   if (!scope_chain->x_processing_specialization
       && (((((enum tree_code) (nested_name_specifier)->base.code)) == RECORD_TYPE || (((enum tree_code) (nested_name_specifier)->base.code)) == UNION_TYPE) && ((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19369, __FUNCTION__))->type_common.lang_flag_5))
       && ((((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19370, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template))
     error_at (type_start_token->location, "cannot add an enumerator "
        "list to a template instantiation");

   if (((enum tree_code) (nested_name_specifier)->base.code) == TYPENAME_TYPE)
     {
       error_at (type_start_token->location,
   "%<%T::%E%> has not been declared",
   ((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19378, __FUNCTION__))->type_common.context),
   nested_name_specifier);
       type = global_trees[TI_ERROR_MARK];
     }
   else if (((enum tree_code) (nested_name_specifier)->base.code) != NAMESPACE_DECL
     && !(((((enum tree_code) (nested_name_specifier)->base.code)) == RECORD_TYPE || (((enum tree_code) (nested_name_specifier)->base.code)) == UNION_TYPE) && ((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19383, __FUNCTION__))->type_common.lang_flag_5)))
     {
       error_at (type_start_token->location, "nested name specifier "
   "%qT for enum declaration does not name a class "
   "or namespace", nested_name_specifier);
       type = global_trees[TI_ERROR_MARK];
     }


   else if (prev_scope && !is_ancestor (prev_scope,
            nested_name_specifier))
     {
       if (at_namespace_scope_p ())
  error_at (type_start_token->location,
     "declaration of %qD in namespace %qD which does not "
     "enclose %qD",
     type, prev_scope, nested_name_specifier);
       else
  error_at (type_start_token->location,
     "declaration of %qD in %qD which does not "
     "enclose %qD",
     type, prev_scope, nested_name_specifier);
       type = global_trees[TI_ERROR_MARK];
     }


   else if ((((((enum tree_code) (nested_name_specifier)->base.code)) == RECORD_TYPE || (((enum tree_code) (nested_name_specifier)->base.code)) == UNION_TYPE) && ((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19409, __FUNCTION__))->type_common.lang_flag_5))
     && (((((enum tree_code) (prev_scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (prev_scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((prev_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19410, __FUNCTION__))->type_common.lang_flag_5))
     && comptypes ((nested_name_specifier), (prev_scope), 0))
     {
       permerror (type_start_token->location,
    "extra qualification not allowed");
       nested_name_specifier = (tree) 
# 19415 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 19415 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;
     }
 }

      if (scoped_enum_p)
 begin_scope (sk_scoped_enum, type);


      matching_braces braces;
      braces.consume_open (parser);

      if (type == global_trees[TI_ERROR_MARK])
 ;
      else if ((((enum tree_code) (type)->base.code) == ENUMERAL_TYPE && ((tree_check ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19428, __FUNCTION__, (ENUMERAL_TYPE)))->base.private_flag))
        || (cxx_dialect > cxx98 && scope_chain->x_processing_specialization))
 {
   new_value_list = true;
   (((tree_check ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19432, __FUNCTION__, (ENUMERAL_TYPE)))->base.private_flag) = (false));
   ((contains_struct_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19433, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19433, __FUNCTION__))->decl_minimal.locus) = type_start_token->location;
 }
      else
 {
   error_at (type_start_token->location,
      "multiple definition of %q#T", type);
   inform (((contains_struct_check ((((((contains_struct_check (((tree_class_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19439, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19439, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19439, __FUNCTION__))->common.chain)))), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19439, __FUNCTION__))->decl_minimal.locus),
    "previous definition here");
   type = global_trees[TI_ERROR_MARK];
 }

      if (type == global_trees[TI_ERROR_MARK])
 cp_parser_skip_to_end_of_block_or_statement (parser);

      else if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))
 {
   if (is_unnamed && !scoped_enum_p)
     pedwarn (type_start_token->location, OPT_Wpedantic,
       "ISO C++ forbids empty unnamed enum");
 }
      else
 {


   cp_parser_commit_to_tentative_parse (parser);
   cp_parser_enumerator_list (parser, type);
 }


      braces.require_close (parser);

      if (scoped_enum_p)
 finish_scope ();
      timevar_pop (TV_PARSE_ENUM);
    }
  else
    {


      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
 {
   if (is_unnamed)
     error_at (type_start_token->location,
        "opaque-enum-specifier without name");
   else if (nested_name_specifier)
     error_at (type_start_token->location,
        "opaque-enum-specifier must use a simple identifier");
 }
    }



  if (cp_parser_allow_gnu_extensions_p (parser))
    {
      tree trailing_attr = cp_parser_gnu_attributes_opt (parser);
      cplus_decl_attributes (&type,
        trailing_attr,
        (int) ATTR_FLAG_TYPE_IN_PLACE);
    }


  if (type != global_trees[TI_ERROR_MARK])
    {
      if (new_value_list)
 finish_enum_value_list (type);
      if (is_new_type)
 finish_enum (type);
    }

  if (nested_name_specifier)
    {
      if ((((((enum tree_code) (nested_name_specifier)->base.code)) == RECORD_TYPE || (((enum tree_code) (nested_name_specifier)->base.code)) == UNION_TYPE) && ((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19504, __FUNCTION__))->type_common.lang_flag_5)))
 {
   ((((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19506, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined) = nested_being_defined;
   pop_scope (nested_name_specifier);
 }
      else if (((enum tree_code) (nested_name_specifier)->base.code) == NAMESPACE_DECL)
 pop_nested_namespace (nested_name_specifier);
    }
  return type;
}
# 19522 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_enumerator_list (cp_parser* parser, tree type)
{
  while (true)
    {

      cp_parser_enumerator_definition (parser, type);



      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);

      if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))
 {
   if (cxx_dialect < cxx11)
     pedwarn (input_location, OPT_Wpedantic,
                     "comma at end of enumerator list");
   break;
 }
    }
}
# 19563 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_enumerator_definition (cp_parser* parser, tree type)
{
  tree identifier;
  tree value;
  location_t loc;



  loc = cp_lexer_peek_token (parser->lexer)->location;


  identifier = cp_parser_identifier (parser);
  if (identifier == global_trees[TI_ERROR_MARK])
    return;


  tree attrs = cp_parser_attributes_opt (parser);


  if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
    {

      cp_lexer_consume_token (parser->lexer);

      value = cp_parser_constant_expression (parser);
    }
  else
    value = (tree) 
# 19591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 19591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;



  if (check_for_bare_parameter_packs (value))
    value = global_trees[TI_ERROR_MARK];


  build_enumerator (identifier, value, type, attrs, loc);
}
# 19610 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_namespace_name (cp_parser* parser)
{
  tree identifier;
  tree namespace_decl;

  cp_token *token = cp_lexer_peek_token (parser->lexer);


  identifier = cp_parser_identifier (parser);
  if (identifier == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
# 19641 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  namespace_decl = cp_parser_lookup_name (parser, identifier,
       none_type,
                       false,
                        true,
                            true,
                           
# 19646 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 19646 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
       token->location);

  if (namespace_decl == global_trees[TI_ERROR_MARK]
      || ((enum tree_code) (namespace_decl)->base.code) != NAMESPACE_DECL)
    {
      if (!cp_parser_uncommitted_to_tentative_parse_p (parser))
 {
   auto_diagnostic_group d;
   name_hint hint;
   if (namespace_decl == global_trees[TI_ERROR_MARK]
       && parser->scope && ((enum tree_code) (parser->scope)->base.code) == NAMESPACE_DECL)
     hint = suggest_alternative_in_explicit_scope (token->location,
         identifier,
         parser->scope);
   if (const char *suggestion = hint.suggestion ())
     {
       gcc_rich_location richloc (token->location);
       richloc.add_fixit_replace (suggestion);
       error_at (&richloc,
   "%qD is not a namespace-name; did you mean %qs?",
   identifier, suggestion);
     }
   else
     error_at (token->location, "%qD is not a namespace-name",
        identifier);
 }
      else
 cp_parser_error (parser, "expected namespace-name");
      namespace_decl = global_trees[TI_ERROR_MARK];
    }

  return namespace_decl;
}
# 19700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_namespace_definition (cp_parser* parser)
{
  tree identifier;
  int nested_definition_count = 0;

  cp_ensure_no_omp_declare_simd (parser);
  cp_ensure_no_oacc_routine (parser);

  bool is_inline = cp_lexer_next_token_is_keyword (parser->lexer, RID_INLINE);
  const bool topmost_inline_p = is_inline;

  if (is_inline)
    {
      maybe_warn_cpp0x (CPP0X_INLINE_NAMESPACES);
      cp_lexer_consume_token (parser->lexer);
    }


  cp_token* token
    = cp_parser_require_keyword (parser, RID_NAMESPACE, RT_NAMESPACE);


  tree attribs = cp_parser_attributes_opt (parser);

  for (;;)
    {
      identifier = (tree) 
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 19727 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;

      bool nested_inline_p = cp_lexer_next_token_is_keyword (parser->lexer,
            RID_INLINE);
      if (nested_inline_p && nested_definition_count != 0)
 {
   if (cxx_dialect < cxx20)
     pedwarn (cp_lexer_peek_token (parser->lexer)->location,
       OPT_Wpedantic, "nested inline namespace definitions only "
       "available with %<-std=c++20%> or %<-std=gnu++20%>");
   cp_lexer_consume_token (parser->lexer);
 }

      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 {
   identifier = cp_parser_identifier (parser);

   if (cp_next_tokens_can_be_std_attribute_p (parser))
     pedwarn (input_location, OPT_Wpedantic,
       "standard attributes on namespaces must precede "
       "the namespace name");


   attribs = attr_chainon (attribs, cp_parser_attributes_opt (parser));
 }

      if (cp_lexer_next_token_is_not (parser->lexer, CPP_SCOPE))
 {




   is_inline |= nested_inline_p;
   break;
 }

      if (!nested_definition_count && cxx_dialect < cxx17)
        pedwarn (input_location, OPT_Wpedantic,
   "nested namespace definitions only available with "
   "%<-std=c++17%> or %<-std=gnu++17%>");



      if (int count = (identifier
         ? push_namespace (identifier, nested_inline_p)
         : 0))
 nested_definition_count += count;
      else
 cp_parser_error (parser, "nested namespace name required");
      cp_lexer_consume_token (parser->lexer);
    }

  if (nested_definition_count && !identifier)
    cp_parser_error (parser, "namespace name required");

  if (nested_definition_count && attribs)
    error_at (token->location,
       "a nested namespace definition cannot have attributes");
  if (nested_definition_count && topmost_inline_p)
    error_at (token->location,
       "a nested namespace definition cannot be inline");


  nested_definition_count += push_namespace (identifier, is_inline);

  bool has_visibility = handle_namespace_attrs (scope_chain->old_namespace, attribs);

  warning (OPT_Wnamespaces, "namespace %qD entered", scope_chain->old_namespace);


  matching_braces braces;
  if (braces.require_open (parser))
    {

      cp_parser_namespace_body (parser);


      braces.require_close (parser);
    }

  if (has_visibility)
    pop_visibility (1);


  while (nested_definition_count--)
    pop_namespace ();
}






static void
cp_parser_namespace_body (cp_parser* parser)
{
  cp_parser_declaration_seq_opt (parser);
}






static void
cp_parser_namespace_alias_definition (cp_parser* parser)
{
  tree identifier;
  tree namespace_specifier;

  cp_token *token = cp_lexer_peek_token (parser->lexer);


  cp_parser_require_keyword (parser, RID_NAMESPACE, RT_NAMESPACE);

  identifier = cp_parser_identifier (parser);
  if (identifier == global_trees[TI_ERROR_MARK])
    return;

  if (!cp_parser_uncommitted_to_tentative_parse_p (parser)
      && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      error_at (token->location, "%<namespace%> definition is not allowed here");

      cp_lexer_consume_token (parser->lexer);
      if (cp_parser_skip_to_closing_brace (parser))
 cp_lexer_consume_token (parser->lexer);
      return;
    }
  cp_parser_require (parser, CPP_EQ, RT_EQ);

  namespace_specifier
    = cp_parser_qualified_namespace_specifier (parser);
  cp_warn_deprecated_use_scopes (namespace_specifier);

  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);


  do_namespace_alias (identifier, namespace_specifier);
}
# 19876 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_qualified_namespace_specifier (cp_parser* parser)
{

  cp_parser_global_scope_opt (parser,
                                   false);


  cp_parser_nested_name_specifier_opt (parser,
                                  false,
                                  true,
                      false,
                              true);

  return cp_parser_namespace_name (parser);
}
# 19905 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_using_declaration (cp_parser* parser,
        bool access_declaration_p)
{
  cp_token *token;
  bool typename_p = false;
  bool global_scope_p;
  tree decl;
  tree identifier;
  tree qscope;
  int oldcount = (global_dc)->diagnostic_count[(int) (DK_ERROR)];
  cp_token *diag_token = 
# 19916 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 19916 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;

  if (access_declaration_p)
    {
      diag_token = cp_lexer_peek_token (parser->lexer);
      cp_parser_parse_tentatively (parser);
    }
  else
    {

      cp_parser_require_keyword (parser, RID_USING, RT_USING);

 again:

      token = cp_lexer_peek_token (parser->lexer);

      if (token->keyword == RID_TYPENAME)
 {

   typename_p = true;

   cp_lexer_consume_token (parser->lexer);
 }
    }


  global_scope_p
    = (cp_parser_global_scope_opt (parser,
                                 false)
       != (tree) 
# 19945 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 19945 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );



  if (typename_p || !global_scope_p)
    {
      qscope = cp_parser_nested_name_specifier (parser, typename_p,
                             true,
                 false,
                         true);
      if (!qscope && !cp_parser_uncommitted_to_tentative_parse_p (parser))
 {
   cp_parser_skip_to_end_of_block_or_statement (parser);
   return false;
 }
    }


  else
    qscope = cp_parser_nested_name_specifier_opt (parser,
                               false,
                               true,
                   false,
                           true);
  if (!qscope)
    qscope = cp_global_trees[CPTI_GLOBAL];
  else if ((((enum tree_code) (qscope)->base.code) == ENUMERAL_TYPE && !((tree_check ((qscope), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19971, __FUNCTION__, (ENUMERAL_TYPE)))->base.static_flag))
    && !(((tree_class_check ((qscope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19972, __FUNCTION__))->type_common.context) && ((enum tree_code) (((tree_class_check ((qscope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19972, __FUNCTION__))->type_common.context))->base.code) == FUNCTION_DECL))
    qscope = (!(! (((tree_class_check ((qscope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19973, __FUNCTION__))->type_common.context)) || ((enum tree_code) (((tree_class_check ((qscope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19973, __FUNCTION__))->type_common.context))->base.code) == TRANSLATION_UNIT_DECL) ? ((tree_class_check ((qscope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 19973, __FUNCTION__))->type_common.context) : cp_global_trees[CPTI_GLOBAL]);

  cp_warn_deprecated_use_scopes (qscope);

  if (access_declaration_p && cp_parser_error_occurred (parser))



    return cp_parser_parse_definitely (parser);

  token = cp_lexer_peek_token (parser->lexer);

  identifier = cp_parser_unqualified_id (parser,
                             false,
                             true,
                       true,
                     false);

  if (access_declaration_p)
    {
      if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
 cp_parser_simulate_error (parser);
      if (!cp_parser_parse_definitely (parser))
 return false;
    }
  else if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
    {
      cp_token *ell = cp_lexer_consume_token (parser->lexer);
      if (cxx_dialect < cxx17)
 pedwarn (ell->location, 0,
   "pack expansion in using-declaration only available "
   "with %<-std=c++17%> or %<-std=gnu++17%>");
      qscope = make_pack_expansion (qscope);
    }



  if (qscope == global_trees[TI_ERROR_MARK] || identifier == global_trees[TI_ERROR_MARK])
    ;
  else if (!identifier_p (identifier)
    && ((enum tree_code) (identifier)->base.code) != BIT_NOT_EXPR)



    error_at (token->location,
       "a template-id may not appear in a using-declaration");
  else
    {
      if (at_class_scope_p ())
 {

   decl = do_class_using_decl (qscope, identifier);

   if (decl && typename_p)
     ((contains_struct_check (((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20027, __FUNCTION__, (USING_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20027, __FUNCTION__))->decl_common.lang_flag_1) = 1;

   if (check_for_bare_parameter_packs (decl))
     {
       cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
       return false;
     }
   else

     finish_member_declaration (decl);
 }
      else
 finish_nonmember_using_decl (qscope, identifier);
    }

  if (!access_declaration_p
      && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
    {
      cp_token *comma = cp_lexer_consume_token (parser->lexer);
      if (cxx_dialect < cxx17)
 pedwarn (comma->location, 0,
   "comma-separated list in using-declaration only available "
   "with %<-std=c++17%> or %<-std=gnu++17%>");
      goto again;
    }


  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);

  if (access_declaration_p && (global_dc)->diagnostic_count[(int) (DK_ERROR)] == oldcount)
    warning_at (diag_token->location, OPT_Wdeprecated,
  "access declarations are deprecated "
  "in favour of using-declarations; "
  "suggestion: add the %<using%> keyword");

  return true;
}






static tree
cp_parser_alias_declaration (cp_parser* parser)
{
  tree id, type, decl, pushed_scope = (tree) 
# 20073 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                     __null
# 20073 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                              , attributes;
  location_t id_location, type_location;
  cp_declarator *declarator;
  cp_decl_specifier_seq decl_specs;
  bool member_p;
  const char *saved_message = 
# 20078 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 20078 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;


  cp_token *using_token
    = cp_parser_require_keyword (parser, RID_USING, RT_USING);
  if (using_token == 
# 20083 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 20083 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        )
    return global_trees[TI_ERROR_MARK];

  id_location = cp_lexer_peek_token (parser->lexer)->location;
  id = cp_parser_identifier (parser);
  if (id == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  cp_token *attrs_token = cp_lexer_peek_token (parser->lexer);
  attributes = cp_parser_attributes_opt (parser);
  if (attributes == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  cp_parser_require (parser, CPP_EQ, RT_EQ);

  if (cp_parser_error_occurred (parser))
    return global_trees[TI_ERROR_MARK];

  cp_parser_commit_to_tentative_parse (parser);
# 20119 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (parser->num_template_parameter_lists)
    {
      saved_message = parser->type_definition_forbidden_message;
      parser->type_definition_forbidden_message =
 "types may not be defined in alias template declarations";
    }

  type = cp_parser_type_id (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
       &type_location);


  if (parser->num_template_parameter_lists)
    parser->type_definition_forbidden_message = saved_message;

  if (type == global_trees[TI_ERROR_MARK]
      || !cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON))
    {
      cp_parser_skip_to_end_of_block_or_statement (parser);
      return global_trees[TI_ERROR_MARK];
    }







  clear_decl_specs (&decl_specs);
  decl_specs.type = type;
  if (attributes != (tree) 
# 20148 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 20148 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
    {
      decl_specs.attributes = attributes;
      set_and_check_decl_spec_loc (&decl_specs,
       ds_attribute,
       attrs_token);
    }
  set_and_check_decl_spec_loc (&decl_specs,
          ds_typedef,
          using_token);
  set_and_check_decl_spec_loc (&decl_specs,
          ds_alias,
          using_token);
  decl_specs.locations[ds_type_spec] = type_location;

  if (parser->num_template_parameter_lists
      && !cp_parser_check_template_parameters (parser,
                              0,
                           false,
            id_location,
                           
# 20168 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 20168 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ))
    return global_trees[TI_ERROR_MARK];

  declarator = make_id_declarator ((tree) 
# 20171 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 20171 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , id, sfk_none, id_location);

  member_p = at_class_scope_p ();
  if (member_p)
    decl = grokfield (declarator, &decl_specs, (tree) 
# 20175 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 20175 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       , false,
        (tree) 
# 20176 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 20176 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                , attributes);
  else
    decl = start_decl (declarator, &decl_specs, 0,
         attributes, (tree) 
# 20179 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 20179 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , &pushed_scope);
  if (decl == global_trees[TI_ERROR_MARK])
    return decl;

  cp_finish_decl (decl, (tree) 
# 20183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 20183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                , 0, (tree) 
# 20183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                     __null
# 20183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                              , 0);

  if (pushed_scope)
    pop_scope (pushed_scope);



  if (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20190, __FUNCTION__))->decl_common.lang_specific)
      && (((contains_struct_check ((template_info_decl_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20191, __FUNCTION__)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20191, __FUNCTION__))->decl_common.lang_specific) ->u.min.template_info)
      && (((((contains_struct_check ((((tree_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((((struct tree_template_info*)(tree_check (((((contains_struct_check ((template_info_decl_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__))->decl_common.lang_specific) ->u.min.template_info)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__, (TEMPLATE_INFO))))->tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__, (TEMPLATE_DECL))))))))->arguments), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__))->typed.type))) == (((struct tree_template_info*)(tree_check (((((contains_struct_check ((template_info_decl_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__))->decl_common.lang_specific) ->u.min.template_info)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20192, __FUNCTION__, (TEMPLATE_INFO))))->tmpl)))
    {
      decl = ((struct tree_template_info*)(tree_check (((((contains_struct_check ((template_info_decl_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20194, __FUNCTION__)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20194, __FUNCTION__))->decl_common.lang_specific) ->u.min.template_info)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20194, __FUNCTION__, (TEMPLATE_INFO))))->tmpl;
      if (member_p)
 check_member_template (decl);
    }

  return decl;
}







static void
cp_parser_using_directive (cp_parser* parser)
{
  tree namespace_decl;
  tree attribs;


  cp_parser_require_keyword (parser, RID_USING, RT_USING);

  cp_parser_require_keyword (parser, RID_NAMESPACE, RT_NAMESPACE);

  cp_parser_global_scope_opt (parser, false);

  cp_parser_nested_name_specifier_opt (parser,
                                  false,
                                  true,
                      false,
                              true);

  namespace_decl = cp_parser_namespace_name (parser);
  cp_warn_deprecated_use_scopes (namespace_decl);

  attribs = cp_parser_attributes_opt (parser);


  finish_using_directive (namespace_decl, attribs);


  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
}
# 20271 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_asm_definition (cp_parser* parser)
{
  tree string;
  tree outputs = (tree) 
# 20275 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 20275 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
  tree inputs = (tree) 
# 20276 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 20276 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  tree clobbers = (tree) 
# 20277 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 20277 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
  tree labels = (tree) 
# 20278 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 20278 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  tree asm_stmt;
  bool extended_p = false;
  bool invalid_inputs_p = false;
  bool invalid_outputs_p = false;
  required_token missing = RT_NONE;
  location_t asm_loc = cp_lexer_peek_token (parser->lexer)->location;


  cp_parser_require_keyword (parser, RID_ASM, RT_ASM);



  if (parser->in_function_body
      && ((contains_struct_check (((tree_check2 (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20292, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20292, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20292, __FUNCTION__))->decl_common.lang_flag_8)
      && (cxx_dialect < cxx20))
    pedwarn (asm_loc, 0, "%<asm%> in %<constexpr%> function only available "
      "with %<-std=c++20%> or %<-std=gnu++20%>");


  location_t volatile_loc = ((location_t) 0);
  location_t inline_loc = ((location_t) 0);
  location_t goto_loc = ((location_t) 0);
  location_t first_loc = ((location_t) 0);

  if (cp_parser_allow_gnu_extensions_p (parser))
    for (;;)
      {
 cp_token *token = cp_lexer_peek_token (parser->lexer);
 location_t loc = token->location;
 switch (cp_lexer_peek_token (parser->lexer)->keyword)
   {
   case RID_VOLATILE:
     if (volatile_loc)
       {
  error_at (loc, "duplicate %<asm%> qualifier %qT",
     token->u.value);
  inform (volatile_loc, "first seen here");
       }
     else
       {
  if (!parser->in_function_body)
    warning_at (loc, 0, "%<asm%> qualifier %qT ignored "
         "outside of function body", token->u.value);
  volatile_loc = loc;
       }
     cp_lexer_consume_token (parser->lexer);
     continue;

   case RID_INLINE:
     if (inline_loc)
       {
  error_at (loc, "duplicate %<asm%> qualifier %qT",
     token->u.value);
  inform (inline_loc, "first seen here");
       }
     else
       inline_loc = loc;
     if (!first_loc)
       first_loc = loc;
     cp_lexer_consume_token (parser->lexer);
     continue;

   case RID_GOTO:
     if (goto_loc)
       {
  error_at (loc, "duplicate %<asm%> qualifier %qT",
     token->u.value);
  inform (goto_loc, "first seen here");
       }
     else
       goto_loc = loc;
     if (!first_loc)
       first_loc = loc;
     cp_lexer_consume_token (parser->lexer);
     continue;

   case RID_CONST:
   case RID_RESTRICT:
     error_at (loc, "%qT is not an %<asm%> qualifier", token->u.value);
     cp_lexer_consume_token (parser->lexer);
     continue;

   default:
     break;
   }
 break;
      }

  bool volatile_p = (volatile_loc != ((location_t) 0));
  bool inline_p = (inline_loc != ((location_t) 0));
  bool goto_p = (goto_loc != ((location_t) 0));

  if (!parser->in_function_body && (inline_p || goto_p))
    {
      error_at (first_loc, "%<asm%> qualifier outside of function body");
      inline_p = goto_p = false;
    }


  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return;

  string = cp_parser_string_literal (parser, false, false);
  if (string == global_trees[TI_ERROR_MARK])
    {
      cp_parser_skip_to_closing_parenthesis (parser, true, false,
                            true);
      return;
    }






  if (cp_parser_allow_gnu_extensions_p (parser)
      && parser->in_function_body
      && (cp_lexer_next_token_is (parser->lexer, CPP_COLON)
   || cp_lexer_next_token_is (parser->lexer, CPP_SCOPE)))
    {
      bool inputs_p = false;
      bool clobbers_p = false;
      bool labels_p = false;


      extended_p = true;


      if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))
 {

   cp_lexer_consume_token (parser->lexer);

   if (cp_lexer_next_token_is_not (parser->lexer,
       CPP_COLON)
       && cp_lexer_next_token_is_not (parser->lexer,
          CPP_SCOPE)
       && cp_lexer_next_token_is_not (parser->lexer,
          CPP_CLOSE_PAREN)
       && !goto_p)
            {
              outputs = cp_parser_asm_operand_list (parser);
              if (outputs == global_trees[TI_ERROR_MARK])
                invalid_outputs_p = true;
            }
 }


      else if (cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))

 inputs_p = true;


      if (inputs_p
   || cp_lexer_next_token_is (parser->lexer, CPP_COLON))
 {

   cp_lexer_consume_token (parser->lexer);

   if (cp_lexer_next_token_is_not (parser->lexer,
       CPP_COLON)
       && cp_lexer_next_token_is_not (parser->lexer,
          CPP_SCOPE)
       && cp_lexer_next_token_is_not (parser->lexer,
          CPP_CLOSE_PAREN))
            {
              inputs = cp_parser_asm_operand_list (parser);
              if (inputs == global_trees[TI_ERROR_MARK])
                invalid_inputs_p = true;
            }
 }
      else if (cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))

 clobbers_p = true;


      if (clobbers_p
   || cp_lexer_next_token_is (parser->lexer, CPP_COLON))
 {
   clobbers_p = true;

   cp_lexer_consume_token (parser->lexer);

   if (cp_lexer_next_token_is_not (parser->lexer,
       CPP_COLON)
       && cp_lexer_next_token_is_not (parser->lexer,
          CPP_CLOSE_PAREN))
     clobbers = cp_parser_asm_clobber_list (parser);
 }
      else if (goto_p && cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))

 labels_p = true;


      if (labels_p
   || (goto_p && cp_lexer_next_token_is (parser->lexer, CPP_COLON)))
 {
   labels_p = true;

   cp_lexer_consume_token (parser->lexer);

   labels = cp_parser_asm_label_list (parser);
 }

      if (goto_p && !labels_p)
 missing = clobbers_p ? RT_COLON : RT_COLON_SCOPE;
    }
  else if (goto_p)
    missing = RT_COLON_SCOPE;


  if (!cp_parser_require (parser, missing ? CPP_COLON : CPP_CLOSE_PAREN,
     missing ? missing : RT_CLOSE_PAREN))
    cp_parser_skip_to_closing_parenthesis (parser, true, false,
                          true);
  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);

  if (!invalid_inputs_p && !invalid_outputs_p)
    {

      if (parser->in_function_body)
 {
   asm_stmt = finish_asm_stmt (asm_loc, volatile_p, string, outputs,
          inputs, clobbers, labels, inline_p);

   if (!extended_p)
     {
       tree temp = asm_stmt;
       if (((enum tree_code) (temp)->base.code) == CLEANUP_POINT_EXPR)
  temp = (*((const_cast<tree*> (tree_operand_check ((temp), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20508, __FUNCTION__)))));

       ((tree_check ((temp), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20510, __FUNCTION__, (ASM_EXPR)))->base.static_flag) = 1;
     }
 }
      else
 symtab->finalize_toplevel_asm (string);
    }
}




static tree
strip_declarator_types (tree type, cp_declarator *declarator)
{
  for (cp_declarator *d = declarator; d;)
    switch (d->kind)
      {
      case cdk_id:
      case cdk_decomp:
      case cdk_error:
 d = 
# 20530 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
    __null
# 20530 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        ;
 break;

      default:
 if ((((enum tree_code) (type)->base.code) == RECORD_TYPE && (((tree_class_check (((tree_check ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20534, __FUNCTION__, (RECORD_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20534, __FUNCTION__))->type_common.lang_flag_2))))
   type = (cp_build_qualified_type_real ((((contains_struct_check ((((tree_check3 ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20535, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))->type_non_common.values)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20535, __FUNCTION__))->typed.type)), (cp_type_quals (type)), tf_warning_or_error));
 type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20536, __FUNCTION__))->typed.type);
 d = d->declarator;
 break;
      }

  return type;
}
# 20602 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_init_declarator (cp_parser* parser,
      cp_parser_flags flags,
      cp_decl_specifier_seq *decl_specifiers,
      vec<deferred_access_check, va_gc> *checks,
      bool function_definition_allowed_p,
      bool member_p,
      int declares_class_or_enum,
      bool* function_definition_p,
      tree* maybe_range_for_decl,
      location_t* init_loc,
      tree* auto_result)
{
  cp_token *token = 
# 20615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 20615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       , *asm_spec_start_token = 
# 20615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                 __null
# 20615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     ,
           *attributes_start_token = 
# 20616 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 20616 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
  cp_declarator *declarator;
  tree prefix_attributes;
  tree attributes = 
# 20619 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 20619 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  tree asm_specification;
  tree initializer;
  tree decl = (tree) 
# 20622 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 20622 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  tree scope;
  int is_initialized;



  enum cpp_ttype initialization_kind;
  bool is_direct_init = false;
  bool is_non_constant_init;
  int ctor_dtor_or_conv_p;
  bool friend_p = cp_parser_friend_p (decl_specifiers);
  tree pushed_scope = (tree) 
# 20633 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 20633 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  bool range_for_decl_p = false;
  bool saved_default_arg_ok_p = parser->default_arg_ok_p;
  location_t tmp_init_loc = ((location_t) 0);

  if (decl_spec_seq_has_spec_p (decl_specifiers, ds_consteval))
    flags |= CP_PARSER_FLAGS_CONSTEVAL;



  prefix_attributes = decl_specifiers->attributes;



  if (function_definition_p)
    *function_definition_p = false;


  if (decl_spec_seq_has_spec_p (decl_specifiers, ds_typedef))
    parser->default_arg_ok_p = false;




  resume_deferring_access_checks ();

  token = cp_lexer_peek_token (parser->lexer);


  declarator
    = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
       flags, &ctor_dtor_or_conv_p,
                           
# 20665 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 20665 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
       member_p, friend_p, false);

  stop_deferring_access_checks ();

  parser->default_arg_ok_p = saved_default_arg_ok_p;



  if (declarator == cp_error_declarator)
    return global_trees[TI_ERROR_MARK];


  if (!cp_parser_check_declarator_template_parameters (parser, declarator,
             token->location))
    return global_trees[TI_ERROR_MARK];

  if (declares_class_or_enum & 2)
    cp_parser_check_for_definition_in_return_type (declarator,
         decl_specifiers->type,
         decl_specifiers->locations[ds_type_spec]);




  scope = get_scope_of_declarator (declarator);



  decl_specifiers->type
    = maybe_update_decl_type (decl_specifiers->type, scope);



  if (cp_parser_allow_gnu_extensions_p (parser))
    {

      asm_spec_start_token = cp_lexer_peek_token (parser->lexer);
      asm_specification = cp_parser_asm_specification_opt (parser);
    }
  else
    asm_specification = (tree) 
# 20706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 20706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;


  attributes_start_token = cp_lexer_peek_token (parser->lexer);
  attributes = cp_parser_attributes_opt (parser);


  token = cp_lexer_peek_token (parser->lexer);

  bool bogus_implicit_tmpl = false;

  if (function_declarator_p (declarator))
    {

      if (!decl_specifiers->type
   && ctor_dtor_or_conv_p <= 0
   && cxx_dialect >= cxx17)
 {
   cp_declarator *id = get_id_declarator (declarator);
   tree name = id->u.id.unqualified_name;
   parser->scope = id->u.id.qualifying_scope;
   tree tmpl = cp_parser_lookup_name_simple (parser, name, id->id_loc);
   if (tmpl
       && (((((enum tree_code) (tmpl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20729, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 20729 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null 
# 20729 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20729, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL) && (((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20729, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL && ((contains_struct_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20729, __FUNCTION__, (TEMPLATE_DECL))))))))->result), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20729, __FUNCTION__))->decl_common.lang_flag_2)))
    || (((enum tree_code) (tmpl)->base.code) == TEMPLATE_DECL && (((contains_struct_check ((tmpl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20730, __FUNCTION__))->decl_common.lang_flag_0) && (((enum tree_code) (tmpl)->base.code) == CONST_DECL || ((enum tree_code) (tmpl)->base.code) == PARM_DECL || ((enum tree_code) (tmpl)->base.code) == TYPE_DECL || ((enum tree_code) (tmpl)->base.code) == TEMPLATE_DECL)))))
     {
       id->u.id.unqualified_name = dguide_name (tmpl);
       id->u.id.sfk = sfk_deduction_guide;
       ctor_dtor_or_conv_p = 1;
     }
 }



      if (cp_parser_token_starts_function_definition_p (token))
 {
   if (!function_definition_allowed_p)
     {


       cp_parser_error (parser,
          "a function-definition is not allowed here");
       return global_trees[TI_ERROR_MARK];
     }

   location_t func_brace_location
     = cp_lexer_peek_token (parser->lexer)->location;



   if (asm_specification)
     error_at (asm_spec_start_token->location,
        "an %<asm%> specification is not allowed "
        "on a function-definition");
   if (attributes)
     error_at (attributes_start_token->location,
        "attributes are not allowed "
        "on a function-definition");

   *function_definition_p = true;


   if (member_p)
     decl = cp_parser_save_member_function_body (parser,
       decl_specifiers,
       declarator,
       prefix_attributes);
   else
     decl =
       (cp_parser_function_definition_from_specifiers_and_declarator
        (parser, decl_specifiers, prefix_attributes, declarator));

   if (decl != global_trees[TI_ERROR_MARK] && ((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20778, __FUNCTION__, (FUNCTION_DECL)))->function_decl.f))
     {

       ((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20781, __FUNCTION__, (FUNCTION_DECL)))->function_decl.f)->function_start_locus
  = func_brace_location;
     }

   return decl;
 }
    }
  else if (parser->fully_implicit_function_template_p)
    {
# 20798 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      bogus_implicit_tmpl = true;
      finish_fully_implicit_template (parser, (tree) 
# 20799 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                             __null
# 20799 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                      );
    }
# 20810 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (!decl_specifiers->any_specifiers_p && ctor_dtor_or_conv_p <= 0)
    {
      cp_parser_error (parser,
         "expected constructor, destructor, or type conversion");
      return global_trees[TI_ERROR_MARK];
    }


  if (token->type == CPP_EQ
      || token->type == CPP_OPEN_PAREN
      || token->type == CPP_OPEN_BRACE)
    {
      is_initialized = 1;
      initialization_kind = token->type;
      if (maybe_range_for_decl)
 *maybe_range_for_decl = global_trees[TI_ERROR_MARK];
      tmp_init_loc = token->location;
      if (init_loc && *init_loc == ((location_t) 0))
 *init_loc = tmp_init_loc;

      if (token->type == CPP_EQ
   && function_declarator_p (declarator))
 {
   cp_token *t2 = cp_lexer_peek_nth_token (parser->lexer, 2);
   if (t2->keyword == RID_DEFAULT)
     is_initialized = 3;
   else if (t2->keyword == RID_DELETE)
     is_initialized = 4;
 }
    }
  else
    {


      if (token->type != CPP_COMMA
   && token->type != CPP_SEMICOLON)
 {
   if (maybe_range_for_decl && *maybe_range_for_decl != global_trees[TI_ERROR_MARK])
     range_for_decl_p = true;
   else
     {
       if (!maybe_range_for_decl)
  cp_parser_error (parser, "expected initializer");
       return global_trees[TI_ERROR_MARK];
     }
 }
      is_initialized = 0;
      initialization_kind = CPP_EOF;
    }




  cp_parser_commit_to_tentative_parse (parser);




  if (!member_p)
    {
      if (parser->in_unbraced_linkage_specification_p)
 decl_specifiers->storage_class = sc_extern;
      decl = start_decl (declarator, decl_specifiers,
    range_for_decl_p? 1 : is_initialized,
    attributes, prefix_attributes, &pushed_scope);
      cp_finalize_omp_declare_simd (parser, decl);
      cp_finalize_oacc_routine (parser, decl, false);



      if ((tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration)
   && declarator->id_loc != ((location_t) 0)
   && ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20882, __FUNCTION__))->decl_minimal.locus) == input_location)
 ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20883, __FUNCTION__))->decl_minimal.locus) = declarator->id_loc;
    }
  else if (scope)


    pushed_scope = push_scope (scope);



  if (!member_p && decl)
    {
      tree saved_current_function_decl = (tree) 
# 20894 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 20894 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 ;




      if (((enum tree_code) (decl)->base.code) == FUNCTION_DECL)
 {
   saved_current_function_decl = current_function_decl;
   current_function_decl = decl;
 }


      cp_parser_perform_template_parameter_access_checks (checks);



      perform_deferred_access_checks (tf_warning_or_error);


      if (((enum tree_code) (decl)->base.code) == FUNCTION_DECL)
 current_function_decl = saved_current_function_decl;
    }


  initializer = (tree) 
# 20918 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 20918 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  is_direct_init = false;
  is_non_constant_init = true;
  if (is_initialized)
    {
      if (function_declarator_p (declarator))
 {
    if (initialization_kind == CPP_EQ)
      initializer = cp_parser_pure_specifier (parser);
    else
      {



        if (decl != global_trees[TI_ERROR_MARK])
   error_at (tmp_init_loc, "initializer provided for function");
        cp_parser_skip_to_closing_parenthesis (parser,
                           true,
                         false,
                              true);
      }
 }
      else
 {






   bool has_lambda_scope = false;

   if (decl != global_trees[TI_ERROR_MARK]
       && !member_p
       && (scope_chain->x_processing_template_decl || (!(((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20952, __FUNCTION__))->decl_common.lang_flag_0) && (((enum tree_code) (decl)->base.code) == CONST_DECL || ((enum tree_code) (decl)->base.code) == PARM_DECL || ((enum tree_code) (decl)->base.code) == TYPE_DECL || ((enum tree_code) (decl)->base.code) == TEMPLATE_DECL)) && ((enum tree_code) ((!(! (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20952, __FUNCTION__))->decl_minimal.context)) || ((enum tree_code) (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20952, __FUNCTION__))->decl_minimal.context))->base.code) == TRANSLATION_UNIT_DECL) ? ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20952, __FUNCTION__))->decl_minimal.context) : cp_global_trees[CPTI_GLOBAL]))->base.code) == NAMESPACE_DECL)))
     has_lambda_scope = true;

   if (has_lambda_scope)
     start_lambda_scope (decl);
   initializer = cp_parser_initializer (parser,
            &is_direct_init,
            &is_non_constant_init);
   if (has_lambda_scope)
     finish_lambda_scope ();
   if (initializer == global_trees[TI_ERROR_MARK])
     cp_parser_skip_to_end_of_statement (parser);
 }
    }





  if (cp_parser_allow_gnu_extensions_p (parser)
      && initialization_kind == CPP_OPEN_PAREN
      && cp_parser_attributes_opt (parser)
      && permerror (input_location,
      "attributes after parenthesized initializer ignored"))
    {
      static bool hint;
      if (global_options.x_flag_permissive && !hint)
 {
   hint = true;
   inform (input_location,
    "this flexibility is deprecated and will be removed");
 }
    }


  if (bogus_implicit_tmpl && decl != global_trees[TI_ERROR_MARK])
    error_at (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 20988, __FUNCTION__))->decl_minimal.locus),
       "non-function %qD declared as implicit template", decl);



  if (member_p)
    {
      if (pushed_scope)
 {
   pop_scope (pushed_scope);
   pushed_scope = (tree) 
# 20998 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 20998 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
 }
      decl = grokfield (declarator, decl_specifiers,
   initializer, !is_non_constant_init,
               (tree) 
# 21002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 21002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ,
   attr_chainon (attributes, prefix_attributes));
      if (decl && ((enum tree_code) (decl)->base.code) == FUNCTION_DECL)
 cp_parser_save_default_args (parser, decl);
      cp_finalize_omp_declare_simd (parser, decl);
      cp_finalize_oacc_routine (parser, decl, false);
    }



  if (!member_p && decl && decl != global_trees[TI_ERROR_MARK] && !range_for_decl_p)
    {
      int cf = (decl_spec_seq_has_spec_p (decl_specifiers, ds_constinit)
  ? ((((((((((((((1 << 6) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) : 0);
      cp_finish_decl (decl,
        initializer, !is_non_constant_init,
        asm_specification,




        ((is_direct_init || !is_initialized)
         ? ((1 << 0)) : (((1 << 0)) | (1 << 2))) | cf);
    }
  else if ((cxx_dialect != cxx98) && friend_p
    && decl && ((enum tree_code) (decl)->base.code) == FUNCTION_DECL)



    check_default_tmpl_args (decl, scope_chain->template_parms, true,
                                            false, 1);

  if (!friend_p && pushed_scope)
    pop_scope (pushed_scope);

  if (function_declarator_p (declarator)
      && parser->fully_implicit_function_template_p)
    {
      if (member_p)
 decl = finish_fully_implicit_template (parser, decl);
      else
 finish_fully_implicit_template (parser, 0);
    }

  if (auto_result && is_initialized && decl_specifiers->type
      && type_uses_auto (decl_specifiers->type))
    *auto_result = strip_declarator_types (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21048, __FUNCTION__))->typed.type), declarator);

  return decl;
}
# 21098 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_declarator *
cp_parser_declarator (cp_parser* parser,
        cp_parser_declarator_kind dcl_kind,
        cp_parser_flags flags,
        int* ctor_dtor_or_conv_p,
        bool* parenthesized_p,
        bool member_p, bool friend_p, bool static_p)
{
  cp_declarator *declarator;
  enum tree_code code;
  cp_cv_quals cv_quals;
  tree class_type;
  tree gnu_attributes = (tree) 
# 21110 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 21110 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                , std_attributes = (tree) 
# 21110 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 21110 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                            ;



  if (ctor_dtor_or_conv_p)
    *ctor_dtor_or_conv_p = 0;

  if (cp_parser_allow_gnu_extensions_p (parser))
    gnu_attributes = cp_parser_gnu_attributes_opt (parser);


  cp_parser_parse_tentatively (parser);

  code = cp_parser_ptr_operator (parser,
     &class_type,
     &cv_quals,
     &std_attributes);


  if (cp_parser_parse_definitely (parser))
    {


      if (parenthesized_p)
 *parenthesized_p = true;


      if (dcl_kind != CP_PARSER_DECLARATOR_NAMED)
 cp_parser_parse_tentatively (parser);


      declarator = cp_parser_declarator (parser, dcl_kind,
      CP_PARSER_FLAGS_NONE,
                              
# 21143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 21143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ,
                          
# 21144 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 21144 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ,
                   false,
      friend_p, false);



      if (dcl_kind != CP_PARSER_DECLARATOR_NAMED
   && !cp_parser_parse_definitely (parser))
 declarator = 
# 21152 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 21152 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;

      declarator = cp_parser_make_indirect_declarator
 (code, class_type, cv_quals, declarator, std_attributes);
    }

  else
    {
      if (parenthesized_p)
 *parenthesized_p = cp_lexer_next_token_is (parser->lexer,
         CPP_OPEN_PAREN);
      declarator = cp_parser_direct_declarator (parser, dcl_kind,
      flags, ctor_dtor_or_conv_p,
      member_p, friend_p, static_p);
    }

  if (gnu_attributes && declarator && declarator != cp_error_declarator)
    declarator->attributes = gnu_attributes;
  return declarator;
}
# 21204 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_declarator *
cp_parser_direct_declarator (cp_parser* parser,
        cp_parser_declarator_kind dcl_kind,
        cp_parser_flags flags,
        int* ctor_dtor_or_conv_p,
        bool member_p, bool friend_p, bool static_p)
{
  cp_token *token;
  cp_declarator *declarator = 
# 21212 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 21212 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
  tree scope = (tree) 
# 21213 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 21213 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  bool saved_default_arg_ok_p = parser->default_arg_ok_p;
  bool saved_in_declarator_p = parser->in_declarator_p;
  bool first = true;
  tree pushed_scope = (tree) 
# 21217 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 21217 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  cp_token *open_paren = 
# 21218 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 21218 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            , *close_paren = 
# 21218 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                             __null
# 21218 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 ;

  while (true)
    {

      token = cp_lexer_peek_token (parser->lexer);
      if (token->type == CPP_OPEN_PAREN)
 {
# 21264 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (!first || dcl_kind != CP_PARSER_DECLARATOR_NAMED)
     {
       tree params;
       bool is_declarator = false;

       open_paren = 
# 21269 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 21269 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;







       if (!member_p)
  cp_parser_parse_tentatively (parser);


       matching_parens parens;
       parens.consume_open (parser);
       if (first)
  {


    parser->default_arg_ok_p = false;
    parser->in_declarator_p = true;
  }

       begin_scope (sk_function_parms, (tree) 
# 21291 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                      __null
# 21291 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                               );


       if (flags & CP_PARSER_FLAGS_CONSTEVAL)
  (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->immediate_fn_ctx_p = true;


       params
  = cp_parser_parameter_declaration_clause (parser, flags);


       parens.require_close (parser);



       if (member_p || cp_parser_parse_definitely (parser))
  {
    cp_cv_quals cv_quals;
    cp_virt_specifiers virt_specifiers;
    cp_ref_qualifier ref_qual;
    tree exception_specification;
    tree late_return;
    tree attrs;
    bool memfn = (member_p || (pushed_scope
          && (((((enum tree_code) (pushed_scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (pushed_scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((pushed_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21315, __FUNCTION__))->type_common.lang_flag_5))));
    unsigned char local_variables_forbidden_p
      = parser->local_variables_forbidden_p;

    if (static_p || friend_p)
      parser->local_variables_forbidden_p |= (1 << 1);

    is_declarator = true;

    if (ctor_dtor_or_conv_p)
      *ctor_dtor_or_conv_p = *ctor_dtor_or_conv_p < 0;
    first = false;


    cv_quals = cp_parser_cv_qualifier_seq_opt (parser);

    ref_qual = cp_parser_ref_qualifier_opt (parser);

    tree tx_qual = cp_parser_tx_qualifier_opt (parser);

    tree save_ccp = (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr));
    tree save_ccr = (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref));
    if (memfn)

      inject_this_parameter (scope_chain->class_type, cv_quals);



    if (declarator == 
# 21343 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null 
# 21343 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          || declarator->kind != cdk_id)
      flags &= ~CP_PARSER_FLAGS_DELAY_NOEXCEPT;


    exception_specification
      = cp_parser_exception_specification_opt (parser,
            flags);

    attrs = cp_parser_std_attribute_spec_seq (parser);




    tree gnu_attrs = (tree) 
# 21356 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 21356 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
    tree requires_clause = (tree) 
# 21357 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 21357 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;
    late_return = (cp_parser_late_return_type_opt
     (parser, declarator, requires_clause));


    virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);


    declarator = make_call_declarator (declarator,
           params,
           cv_quals,
           virt_specifiers,
           ref_qual,
           tx_qual,
           exception_specification,
           late_return,
           requires_clause);
    declarator->std_attributes = attrs;
    declarator->attributes = gnu_attrs;



    parser->default_arg_ok_p = false;

    (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) = save_ccp;
    (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref)) = save_ccr;


    parser->local_variables_forbidden_p
      = local_variables_forbidden_p;
  }


       pop_bindings_and_leave_scope ();

       if (is_declarator)

  continue;
     }



   if (first)
     {
       bool saved_in_type_id_in_expr_p;

       parser->default_arg_ok_p = saved_default_arg_ok_p;
       parser->in_declarator_p = saved_in_declarator_p;

       open_paren = token;

       matching_parens parens;
       parens.consume_open (parser);

       saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;
       parser->in_type_id_in_expr_p = true;
       declarator
  = cp_parser_declarator (parser, dcl_kind, flags,
     ctor_dtor_or_conv_p,
                         
# 21416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 21416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ,
     member_p, friend_p,
                  false);
       parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;
       first = false;

       close_paren = cp_lexer_peek_token (parser->lexer);
       if (!parens.require_close (parser))
  declarator = cp_error_declarator;
       if (declarator == cp_error_declarator)
  break;

       goto handle_declarator;
     }

   else
     break;
 }
      else if ((!first || dcl_kind != CP_PARSER_DECLARATOR_NAMED)
        && token->type == CPP_OPEN_SQUARE
        && !cp_next_tokens_can_be_attribute_p (parser))
 {

   tree bounds, attrs;

   if (ctor_dtor_or_conv_p)
     *ctor_dtor_or_conv_p = 0;

   open_paren = 
# 21444 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 21444 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
   first = false;
   parser->default_arg_ok_p = false;
   parser->in_declarator_p = true;

   cp_lexer_consume_token (parser->lexer);

   token = cp_lexer_peek_token (parser->lexer);


   if (token->type != CPP_CLOSE_SQUARE)
     {
       bool non_constant_p;
       bounds
  = cp_parser_constant_expression (parser,
                              true,
       &non_constant_p);
       if (!non_constant_p)
          ;
       else if (((bounds) == global_trees[TI_ERROR_MARK] || ((bounds) && ((contains_struct_check (((bounds)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21463, __FUNCTION__))->typed.type) == global_trees[TI_ERROR_MARK])))
                               ;
       else if (!cp_parser_uncommitted_to_tentative_parse_p (parser))
                                                    ;
       else if (!parser->in_function_body
         || (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->kind == sk_function_parms)
  {




    cp_parser_error (parser,
       "array bound is not an integer constant");
    bounds = global_trees[TI_ERROR_MARK];
  }
       else if (scope_chain->x_processing_template_decl
         && !type_dependent_expression_p (bounds))
  {

    bounds = build_nop (((contains_struct_check ((bounds), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21482, __FUNCTION__))->typed.type), bounds);
    ((non_type_check ((bounds), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21483, __FUNCTION__))->base.side_effects_flag) = 1;
  }
     }
   else
     bounds = (tree) 
# 21487 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 21487 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;

   if (!cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE))
     {
       declarator = cp_error_declarator;
       break;
     }

   attrs = cp_parser_std_attribute_spec_seq (parser);
   declarator = make_array_declarator (declarator, bounds);
   declarator->std_attributes = attrs;
 }
      else if (first && dcl_kind != CP_PARSER_DECLARATOR_ABSTRACT)
 {
   {
     tree qualifying_scope;
     tree unqualified_name;
     tree attrs;
     special_function_kind sfk;
     bool abstract_ok;
     bool pack_expansion_p = false;
     cp_token *declarator_id_start_token;


     abstract_ok = (dcl_kind == CP_PARSER_DECLARATOR_EITHER);
     if (abstract_ok)
       {
  cp_parser_parse_tentatively (parser);



  if (token->type == CPP_ELLIPSIS)
    {

      cp_lexer_consume_token (parser->lexer);

      pack_expansion_p = true;
    }
       }

     declarator_id_start_token = cp_lexer_peek_token (parser->lexer);
     unqualified_name
       = cp_parser_declarator_id (parser, abstract_ok);
     qualifying_scope = parser->scope;
     if (abstract_ok)
       {
  bool okay = false;

  if (!unqualified_name && pack_expansion_p)
    {

      okay = !cp_parser_error_occurred (parser);





      cp_parser_abort_tentative_parse (parser);
    }
  else
    okay = cp_parser_parse_definitely (parser);

  if (!okay)
    unqualified_name = global_trees[TI_ERROR_MARK];
  else if (unqualified_name
    && (qualifying_scope
        || (!identifier_p (unqualified_name))))
    {
      cp_parser_error (parser, "expected unqualified-id");
      unqualified_name = global_trees[TI_ERROR_MARK];
    }
       }

     if (!unqualified_name)
       return 
# 21561 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 21561 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;
     if (unqualified_name == global_trees[TI_ERROR_MARK])
       {
  declarator = cp_error_declarator;
  pack_expansion_p = false;
  declarator->parameter_pack_p = false;
  break;
       }

     attrs = cp_parser_std_attribute_spec_seq (parser);

     if (qualifying_scope && at_namespace_scope_p ()
  && ((enum tree_code) (qualifying_scope)->base.code) == TYPENAME_TYPE)
       {
# 21591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  tree type;


  type = resolve_typename_type (qualifying_scope,
                              false);

  if (((enum tree_code) (type)->base.code) == TYPENAME_TYPE)
    {
      if (typedef_variant_p (type))
        error_at (declarator_id_start_token->location,
    "cannot define member of dependent typedef "
    "%qT", type);
      else
        error_at (declarator_id_start_token->location,
    "%<%T::%E%> is not a type",
    ((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21606, __FUNCTION__))->type_common.context),
    (((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21607, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21607, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21607, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21607, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21607, __FUNCTION__))->type_common.name)));
    }
  qualifying_scope = type;
       }

     sfk = sfk_none;

     if (unqualified_name)
       {
  tree class_type;

  if (qualifying_scope
      && (((((enum tree_code) (qualifying_scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (qualifying_scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21619, __FUNCTION__))->type_common.lang_flag_5)))
    class_type = qualifying_scope;
  else
    class_type = scope_chain->class_type;

  if (((enum tree_code) (unqualified_name)->base.code) == TYPE_DECL)
    {
      tree name_type = ((contains_struct_check ((unqualified_name), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21626, __FUNCTION__))->typed.type);

      if (!class_type || !comptypes ((name_type), (class_type), 0))
        {




   cp_parser_error (parser, "invalid declarator");
   declarator = cp_error_declarator;
   break;
        }
      else if (qualifying_scope
        && ((((tree_class_check ((name_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21639, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template))
        {
   error_at (declarator_id_start_token->location,
      "invalid use of constructor as a template");
   inform (declarator_id_start_token->location,
    "use %<%T::%D%> instead of %<%T::%D%> to "
    "name the constructor in a qualified name",
    class_type,
    ((contains_struct_check (((((struct tree_template_info*)(tree_check (((((enum tree_code) (class_type)->base.code) == ENUMERAL_TYPE || ((enum tree_code) (class_type)->base.code) == BOUND_TEMPLATE_TEMPLATE_PARM || (((enum tree_code) (class_type)->base.code) == RECORD_TYPE || ((enum tree_code) (class_type)->base.code) == UNION_TYPE || ((enum tree_code) (class_type)->base.code) == QUAL_UNION_TYPE) ? ((tree_class_check ((class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21647, __FUNCTION__))->type_non_common.lang_1) : (tree) 
# 21647 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
   __null
# 21647 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   )), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21647, __FUNCTION__, (TEMPLATE_INFO))))->tmpl)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21647, __FUNCTION__))->decl_minimal.name),
    class_type, name_type);
   declarator = cp_error_declarator;
   break;
        }
      unqualified_name = constructor_name (class_type);
    }

  if (class_type)
    {
      if (((enum tree_code) (unqualified_name)->base.code) == BIT_NOT_EXPR)
        sfk = sfk_destructor;
      else if (identifier_p (unqualified_name)
        && ((((tree_not_check2 (((tree_check ((unqualified_name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21660, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21660, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_2)) & ((tree_not_check2 (((tree_check ((unqualified_name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21660, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21660, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_1) & (!((tree_not_check2 (((tree_check ((unqualified_name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21660, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21660, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0))))
        sfk = sfk_conversion;
      else if (


        !(((tree_class_check ((((tree_class_check ((class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21665, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21665, __FUNCTION__))->type_common.name) != (((contains_struct_check (((tree_class_check ((((tree_class_check ((class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21665, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21665, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21665, __FUNCTION__))->common.chain)))
# 21682 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        && (!friend_p || class_type == qualifying_scope)
        && constructor_name_p (unqualified_name,
          class_type))
        sfk = sfk_constructor;
      else if (is_overloaded_fn (unqualified_name)
        && ((tree_check (((((enum tree_code) (get_first_fn (unqualified_name))->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((get_first_fn (unqualified_name)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21687, __FUNCTION__, (TEMPLATE_DECL))))))))->result : get_first_fn (unqualified_name))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21687, __FUNCTION__, (FUNCTION_DECL)))->decl_with_vis.cxx_constructor)
                             )
        sfk = sfk_constructor;

      if (ctor_dtor_or_conv_p && sfk != sfk_none)
        *ctor_dtor_or_conv_p = -1;
    }
       }
     declarator = make_id_declarator (qualifying_scope,
          unqualified_name,
          sfk, token->location);
     declarator->std_attributes = attrs;
     declarator->parameter_pack_p = pack_expansion_p;

     if (pack_expansion_p)
       maybe_warn_variadic_templates ();






     if (cxx_dialect >= cxx20
  && (flags & CP_PARSER_FLAGS_TYPENAME_OPTIONAL)
  && declarator->kind == cdk_id
  && !at_class_scope_p ()
  && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
       {


  if (qualifying_scope == (tree) 
# 21717 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 21717 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  )
    flags &= ~CP_PARSER_FLAGS_TYPENAME_OPTIONAL;
  else
    {







      tree decl
        = cp_parser_lookup_name_simple (parser, unqualified_name,
            token->location);
      if (!is_overloaded_fn (decl)



   && !(((((enum tree_code) (qualifying_scope)->base.code) == TEMPLATE_TYPE_PARM || ((enum tree_code) (qualifying_scope)->base.code) == TYPENAME_TYPE || ((enum tree_code) (qualifying_scope)->base.code) == TYPEOF_TYPE || ((enum tree_code) (qualifying_scope)->base.code) == BOUND_TEMPLATE_TEMPLATE_PARM || ((enum tree_code) (qualifying_scope)->base.code) == DECLTYPE_TYPE) || (((((enum tree_code) (qualifying_scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (qualifying_scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((qualifying_scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 21735, __FUNCTION__))->type_common.lang_flag_5)))
        && constructor_name_p (unqualified_name,
          qualifying_scope)))
        flags &= ~CP_PARSER_FLAGS_TYPENAME_OPTIONAL;
    }
       }
   }

 handle_declarator:;
   scope = get_scope_of_declarator (declarator);
   if (scope)
     {


       if (at_function_scope_p ())
  {


    cp_parser_error (parser, "qualified-id in declaration");
    declarator = cp_error_declarator;
    break;
  }
       pushed_scope = push_scope (scope);
     }
   parser->in_declarator_p = true;
   if ((ctor_dtor_or_conv_p && *ctor_dtor_or_conv_p)
       || (declarator && declarator->kind == cdk_id))


     parser->default_arg_ok_p = saved_default_arg_ok_p;
   else
     parser->default_arg_ok_p = false;

   first = false;
 }

      else
 break;
    }



  if (!declarator)
    cp_parser_error (parser, "expected declarator");
  else if (open_paren)
    {


      if (declarator->kind == cdk_array)
 {


   expanded_location open = expand_location (open_paren->location);
   expanded_location close = expand_location (close_paren->location);
   if (open.line != close.line || open.file != close.file)
     open_paren = 
# 21790 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 21790 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
 }
      if (open_paren)
 declarator->parenthesized = open_paren->location;
    }


  if (pushed_scope)
    pop_scope (pushed_scope);

  parser->default_arg_ok_p = saved_default_arg_ok_p;
  parser->in_declarator_p = saved_in_declarator_p;

  return declarator;
}
# 21830 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static enum tree_code
cp_parser_ptr_operator (cp_parser* parser,
   tree* type,
   cp_cv_quals *cv_quals,
   tree *attributes)
{
  enum tree_code code = ERROR_MARK;
  cp_token *token;
  tree attrs = (tree) 
# 21838 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 21838 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;


  *type = (tree) 
# 21841 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 21841 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;

  *cv_quals = TYPE_UNQUALIFIED;


  token = cp_lexer_peek_token (parser->lexer);


  if (token->type == CPP_MULT)
    code = INDIRECT_REF;
  else if (token->type == CPP_AND)
    code = ADDR_EXPR;
  else if ((cxx_dialect != cxx98) &&
    token->type == CPP_AND_AND)
    code = NON_LVALUE_EXPR;

  if (code != ERROR_MARK)
    {

      cp_lexer_consume_token (parser->lexer);





      if (code == INDIRECT_REF
   || cp_parser_allow_gnu_extensions_p (parser))
 *cv_quals = cp_parser_cv_qualifier_seq_opt (parser);

      attrs = cp_parser_std_attribute_spec_seq (parser);
      if (attributes != 
# 21871 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 21871 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           )
 *attributes = attrs;
    }
  else
    {

      cp_parser_parse_tentatively (parser);

      cp_parser_global_scope_opt (parser,
                                false);

      token = cp_lexer_peek_token (parser->lexer);
      cp_parser_nested_name_specifier (parser,
                                  false,
                                  true,
                      false,
                              false);


      if (!cp_parser_error_occurred (parser)
   && cp_parser_require (parser, CPP_MULT, RT_MULT))
 {

   code = INDIRECT_REF;

   if (((enum tree_code) (parser->scope)->base.code) == NAMESPACE_DECL)
     error_at (token->location, "%qD is a namespace", parser->scope);
   else if (((enum tree_code) (parser->scope)->base.code) == ENUMERAL_TYPE)
     error_at (token->location, "cannot form pointer to member of "
        "non-class %q#T", parser->scope);
   else
     {


       *type = parser->scope;

       parser->scope = (tree) 
# 21907 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 21907 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
       parser->qualifying_scope = (tree) 
# 21908 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 21908 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          ;
       parser->object_scope = (tree) 
# 21909 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 21909 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;

       attrs = cp_parser_std_attribute_spec_seq (parser);
       if (attributes != 
# 21912 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 21912 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
  *attributes = attrs;

       *cv_quals = cp_parser_cv_qualifier_seq_opt (parser);
     }
 }

      if (!cp_parser_parse_definitely (parser))
 cp_parser_error (parser, "expected ptr-operator");
    }

  return code;
}
# 21942 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_cv_quals
cp_parser_cv_qualifier_seq_opt (cp_parser* parser)
{
  cp_cv_quals cv_quals = TYPE_UNQUALIFIED;

  while (true)
    {
      cp_token *token;
      cp_cv_quals cv_qualifier;


      token = cp_lexer_peek_token (parser->lexer);

      switch (token->keyword)
 {
 case RID_CONST:
   cv_qualifier = TYPE_QUAL_CONST;
   break;

 case RID_VOLATILE:
   cv_qualifier = TYPE_QUAL_VOLATILE;
   break;

 case RID_RESTRICT:
   cv_qualifier = TYPE_QUAL_RESTRICT;
   break;

 default:
   cv_qualifier = TYPE_UNQUALIFIED;
   break;
 }

      if (!cv_qualifier)
 break;

      if (cv_quals & cv_qualifier)
 {
   gcc_rich_location richloc (token->location);
   richloc.add_fixit_remove ();
   error_at (&richloc, "duplicate cv-qualifier");
   cp_lexer_purge_token (parser->lexer);
 }
      else
 {
   cp_lexer_consume_token (parser->lexer);
   cv_quals |= cv_qualifier;
 }
    }

  return cv_quals;
}
# 22002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_ref_qualifier
cp_parser_ref_qualifier_opt (cp_parser* parser)
{
  cp_ref_qualifier ref_qual = REF_QUAL_NONE;


  if (cxx_dialect < cxx11 && cp_parser_parsing_tentatively (parser))
    return ref_qual;

  while (true)
    {
      cp_ref_qualifier curr_ref_qual = REF_QUAL_NONE;
      cp_token *token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {
 case CPP_AND:
   curr_ref_qual = REF_QUAL_LVALUE;
   break;

 case CPP_AND_AND:
   curr_ref_qual = REF_QUAL_RVALUE;
   break;

 default:
   curr_ref_qual = REF_QUAL_NONE;
   break;
 }

      if (!curr_ref_qual)
 break;
      else if (ref_qual)
 {
   error_at (token->location, "multiple ref-qualifiers");
   cp_lexer_purge_token (parser->lexer);
 }
      else
 {
   ref_qual = curr_ref_qual;
   cp_lexer_consume_token (parser->lexer);
 }
    }

  return ref_qual;
}







static tree
cp_parser_tx_qualifier_opt (cp_parser *parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  if (token->type == CPP_NAME)
    {
      tree name = token->u.value;
      const char *p = ((const char *) (tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22061, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      const int len = strlen ("transaction_safe");
      if (!strncmp (p, "transaction_safe", len))
 {
   p += len;
   if (*p == '\0'
       || !strcmp (p, "_dynamic"))
     {
       cp_lexer_consume_token (parser->lexer);
       if (!global_options.x_flag_tm)
  {
    error ("%qE requires %<-fgnu-tm%>", name);
    return (tree) 
# 22073 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 22073 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
  }
       else
  return name;
     }
 }
    }
  return (tree) 
# 22080 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 22080 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;
}
# 22094 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_virt_specifiers
cp_parser_virt_specifier_seq_opt (cp_parser* parser)
{
  cp_virt_specifiers virt_specifiers = VIRT_SPEC_UNSPECIFIED;

  while (true)
    {
      cp_token *token;
      cp_virt_specifiers virt_specifier;


      token = cp_lexer_peek_token (parser->lexer);

      if (token->type != CPP_NAME)
        break;
      if (id_equal (token->u.value, "override"))
        {
          maybe_warn_cpp0x (CPP0X_OVERRIDE_CONTROLS);
          virt_specifier = VIRT_SPEC_OVERRIDE;
        }
      else if (id_equal (token->u.value, "final"))
        {
          maybe_warn_cpp0x (CPP0X_OVERRIDE_CONTROLS);
          virt_specifier = VIRT_SPEC_FINAL;
        }
      else if (id_equal (token->u.value, "__final"))
        {
          virt_specifier = VIRT_SPEC_FINAL;
        }
      else
 break;

      if (virt_specifiers & virt_specifier)
 {
   gcc_rich_location richloc (token->location);
   richloc.add_fixit_remove ();
   error_at (&richloc, "duplicate virt-specifier");
   cp_lexer_purge_token (parser->lexer);
 }
      else
 {
   cp_lexer_consume_token (parser->lexer);
   virt_specifiers |= virt_specifier;
 }
    }
  return virt_specifiers;
}




void
inject_this_parameter (tree ctype, cp_cv_quals quals)
{
  tree this_parm;

  if ((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)))
    {

      tree type = ((contains_struct_check ((((contains_struct_check (((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22153, __FUNCTION__))->typed.type)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22153, __FUNCTION__))->typed.type);
      if ((tree_code_type[(int) (((enum tree_code) ((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)))->base.code))] == tcc_declaration)
   && ((contains_struct_check (((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr))), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22155, __FUNCTION__))->decl_minimal.context) == (tree) 
# 22155 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                         __null
   
# 22156 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && same_type_ignoring_top_level_qualifiers_p (ctype, type)
   && cp_type_quals (type) == quals)
 return;
    }

  this_parm = build_this_parm ((tree) 
# 22161 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 22161 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , ctype, quals);

  (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) = (tree) 
# 22163 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 22163 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref))
    = cp_build_fold_indirect_ref (this_parm);
  (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) = this_parm;
}




bool
parsing_nsdmi (void)
{


  if ((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr))
      && ((enum tree_code) ((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)))->base.code) == PARM_DECL
      && ((contains_struct_check (((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr))), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22179, __FUNCTION__))->decl_minimal.context) == (tree) 
# 22179 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 22179 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     )
    return true;
  return false;
}
# 22197 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_late_return_type_opt (cp_parser* parser, cp_declarator *declarator,
    tree& requires_clause)
{
  cp_token *token;
  tree type = (tree) 
# 22202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 22202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  bool declare_simd_p = (parser->omp_declare_simd
    && declarator
    && declarator->kind == cdk_id);

  bool oacc_routine_p = (parser->oacc_routine
    && declarator
    && declarator->kind == cdk_id);


  token = cp_lexer_peek_token (parser->lexer);

  if (token->type != CPP_DEREF
      && token->keyword != RID_REQUIRES
      && !(token->type == CPP_NAME
    && token->u.value == ridpointers[RID_REQUIRES])
      && !(declare_simd_p || oacc_routine_p))
    return (tree) 
# 22219 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 22219 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  if (token->type == CPP_DEREF)
    {

      cp_lexer_consume_token (parser->lexer);

      type = cp_parser_trailing_type_id (parser);
    }



  requires_clause = cp_parser_requires_clause_opt (parser, false);

  if (declare_simd_p)
    declarator->attributes
      = cp_parser_late_parsing_omp_declare_simd (parser,
       declarator->attributes);
  if (oacc_routine_p)
    declarator->attributes
      = cp_parser_late_parsing_oacc_routine (parser,
          declarator->attributes);

  return type;
}
# 22258 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_declarator_id (cp_parser* parser, bool optional_p)
{
  tree id;
# 22276 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  id = cp_parser_id_expression (parser,
                           false,
                           false,
                   
# 22279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 22279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ,
                     true,
    optional_p);
  if (id && (((enum tree_code) (id)->base.code) == BASELINK))
    id = (((struct tree_baselink*) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22283, __FUNCTION__, (BASELINK))))->functions);
  return id;
}
# 22301 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_type_id_1 (cp_parser *parser, cp_parser_flags flags,
       bool is_template_arg, bool is_trailing_return,
       location_t *type_location)
{
  cp_decl_specifier_seq type_specifier_seq;
  cp_declarator *abstract_declarator;


  cp_parser_type_specifier_seq (parser, flags,
                       false,
    is_trailing_return,
    &type_specifier_seq);
  if (type_location)
    *type_location = type_specifier_seq.locations[ds_type_spec];

  if (is_template_arg && type_specifier_seq.type
      && ((enum tree_code) (type_specifier_seq.type)->base.code) == TEMPLATE_TYPE_PARM
      && (((contains_struct_check ((((tree_class_check (((tree_check ((type_specifier_seq.type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22319, __FUNCTION__, (TEMPLATE_TYPE_PARM)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22319, __FUNCTION__))->type_common.name)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22319, __FUNCTION__))->decl_common.initial)))


    {
      ((void)(!(cp_parser_uncommitted_to_tentative_parse_p (parser)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22323, __FUNCTION__), 0 : 0));
      cp_parser_simulate_error (parser);
      return global_trees[TI_ERROR_MARK];
    }
  if (type_specifier_seq.type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];


  cp_parser_parse_tentatively (parser);

  abstract_declarator
    = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_ABSTRACT,
       CP_PARSER_FLAGS_NONE, 
# 22335 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 22335 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ,
                           
# 22336 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 22336 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
                    false,
                    false,
                    false);

  if (!cp_parser_parse_definitely (parser))
    abstract_declarator = 
# 22342 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 22342 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;

  if (type_specifier_seq.type

      && (!global_options.x_flag_concepts || parser->in_type_id_in_expr_p)


      && !(cxx_dialect >= cxx14 && is_trailing_return))
    if (tree auto_node = type_uses_auto (type_specifier_seq.type))
      {





 if (abstract_declarator
     && abstract_declarator->kind == cdk_function
     && abstract_declarator->u.function.late_return_type)
           ;
 else if (parser->in_result_type_constraint_p)
           ;
 else
   {
     location_t loc = type_specifier_seq.locations[ds_type_spec];
     if (tree tmpl = (((contains_struct_check ((((tree_class_check (((tree_check ((auto_node), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22366, __FUNCTION__, (TEMPLATE_TYPE_PARM)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22366, __FUNCTION__))->type_common.name)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22366, __FUNCTION__))->decl_common.initial)))
       {
  error_at (loc, "missing template arguments after %qT",
     auto_node);
  inform (((contains_struct_check ((tmpl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22370, __FUNCTION__))->decl_minimal.locus), "%qD declared here",
   tmpl);
       }
     else
       error_at (loc, "invalid use of %qT", auto_node);
     return global_trees[TI_ERROR_MARK];
   }
      }

  return groktypename (&type_specifier_seq, abstract_declarator,
         is_template_arg);
}



static tree
cp_parser_type_id (cp_parser *parser, cp_parser_flags flags,
     location_t *type_location)
{
  return cp_parser_type_id_1 (parser, flags, false, false, type_location);
}



static tree
cp_parser_template_type_arg (cp_parser *parser)
{
  tree r;
  const char *saved_message = parser->type_definition_forbidden_message;
  parser->type_definition_forbidden_message
    = "types may not be defined in template arguments";
  r = cp_parser_type_id_1 (parser, CP_PARSER_FLAGS_NONE, true, false, 
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                     __null
# 22401 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                         );
  parser->type_definition_forbidden_message = saved_message;
  if (cxx_dialect >= cxx14 && !global_options.x_flag_concepts && type_uses_auto (r))
    {
      error ("invalid use of %<auto%> in template argument");
      r = global_trees[TI_ERROR_MARK];
    }
  return r;
}



static tree
cp_parser_trailing_type_id (cp_parser *parser)
{
  return cp_parser_type_id_1 (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
         false, true, 
# 22417 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 22417 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         );
}
# 22440 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_type_specifier_seq (cp_parser* parser,
         cp_parser_flags flags,
         bool is_declaration,
         bool is_trailing_return,
         cp_decl_specifier_seq *type_specifier_seq)
{
  bool seen_type_specifier = false;
  cp_token *start_token = 
# 22448 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 22448 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;


  clear_decl_specs (type_specifier_seq);

  flags |= CP_PARSER_FLAGS_OPTIONAL;



  if (is_trailing_return)
    flags |= CP_PARSER_FLAGS_NO_TYPE_DEFINITIONS;


  while (true)
    {
      tree type_specifier;
      bool is_cv_qualifier;


      if (cp_next_tokens_can_be_attribute_p (parser))
 {



   if (seen_type_specifier && is_trailing_return
       && cp_next_tokens_can_be_gnu_attribute_p (parser))
     {
       size_t n = cp_parser_skip_attributes_opt (parser, 1);
       cp_token *tok = cp_lexer_peek_nth_token (parser->lexer, n);
       if (tok->type == CPP_SEMICOLON || tok->type == CPP_COMMA
    || tok->type == CPP_EQ || tok->type == CPP_OPEN_BRACE)
  break;
     }
   type_specifier_seq->attributes
     = attr_chainon (type_specifier_seq->attributes,
       cp_parser_attributes_opt (parser));
   continue;
 }



     if (!start_token)
       start_token = cp_lexer_peek_token (parser->lexer);


      type_specifier = cp_parser_type_specifier (parser,
       flags,
       type_specifier_seq,
                          false,
       
# 22497 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 22497 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          ,
       &is_cv_qualifier);
      if (!type_specifier)
 {


   if (!seen_type_specifier)
     {

       int in_decl = parser->in_declarator_p;
       parser->in_declarator_p = true;

       if (cp_parser_uncommitted_to_tentative_parse_p (parser)
    || !cp_parser_parse_and_diagnose_invalid_type_name (parser))
  cp_parser_error (parser, "expected type-specifier");

       parser->in_declarator_p = in_decl;

       type_specifier_seq->type = global_trees[TI_ERROR_MARK];
       return;
     }


   break;
 }

      seen_type_specifier = true;
# 22540 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (is_declaration && !is_cv_qualifier)
 flags |= CP_PARSER_FLAGS_NO_USER_DEFINED_TYPES;
    }
}




static bool
function_being_declared_is_template_p (cp_parser* parser)
{
  if (!scope_chain->template_parms || processing_template_parmlist)
    return false;

  if (parser->implicit_template_scope)
    return true;

  if (at_class_scope_p ()
      && ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22558, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined))
    return parser->num_template_parameter_lists != 0;

  return ((int) parser->num_template_parameter_lists > template_class_depth
   (scope_chain->class_type));
}
# 22577 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_parameter_declaration_clause (cp_parser* parser,
     cp_parser_flags flags)
{
  tree parameters;
  cp_token *token;
  bool ellipsis_p;

  temp_override<bool> cleanup
    (parser->auto_is_implicit_function_template_parm_p);

  if (!scope_chain->x_processing_specialization
      && !processing_template_parmlist
      && !scope_chain->x_processing_explicit_instantiation


      && parser->default_arg_ok_p)
    if (!current_function_decl
 || (scope_chain->class_type && (((enum tree_code) (scope_chain->class_type)->base.code) == RECORD_TYPE && ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name))) && ((tree_check ((((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__))->type_common.name)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22595, __FUNCTION__, (IDENTIFIER_NODE)))->base.protected_flag))))
      parser->auto_is_implicit_function_template_parm_p = true;


  token = cp_lexer_peek_token (parser->lexer);

  if (token->type == CPP_ELLIPSIS)
    {

      cp_lexer_consume_token (parser->lexer);
      return (tree) 
# 22605 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 22605 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }
  else if (token->type == CPP_CLOSE_PAREN)

    return global_trees[TI_VOID_LIST_NODE];

  else if (token->keyword == RID_VOID
    && (cp_lexer_peek_nth_token (parser->lexer, 2)->type
        == CPP_CLOSE_PAREN))
    {

      cp_lexer_consume_token (parser->lexer);

      return global_trees[TI_VOID_LIST_NODE];
    }


  parameters = cp_parser_parameter_declaration_list (parser, flags);



  if (parameters == global_trees[TI_ERROR_MARK])
    return (tree) 
# 22627 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 22627 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;


  token = cp_lexer_peek_token (parser->lexer);

  if (token->type == CPP_COMMA)
    {

      cp_lexer_consume_token (parser->lexer);

      ellipsis_p
 = (cp_parser_require (parser, CPP_ELLIPSIS, RT_ELLIPSIS) != 
# 22638 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                            __null
# 22638 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                );
    }


  else if (token->type == CPP_ELLIPSIS)
    {

      cp_lexer_consume_token (parser->lexer);

      ellipsis_p = true;
    }
  else
    ellipsis_p = false;


  if (!ellipsis_p)
    parameters = chainon (parameters, global_trees[TI_VOID_LIST_NODE]);

  return parameters;
}
# 22671 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_parameter_declaration_list (cp_parser* parser, cp_parser_flags flags)
{
  tree parameters = (tree) 
# 22674 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 22674 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  tree *tail = &parameters;
  bool saved_in_unbraced_linkage_specification_p;
  int index = 0;




  saved_in_unbraced_linkage_specification_p
    = parser->in_unbraced_linkage_specification_p;
  parser->in_unbraced_linkage_specification_p = false;


  while (true)
    {
      cp_parameter_declarator *parameter;
      tree decl = global_trees[TI_ERROR_MARK];
      bool parenthesized_p = false;


      parameter
 = cp_parser_parameter_declaration (parser, flags,
                            false,
        &parenthesized_p);



      deprecated_state = DEPRECATED_SUPPRESS;

      if (parameter)
 {
   decl = grokdeclarator (parameter->declarator,
     &parameter->decl_specifiers,
     PARM,
     parameter->default_argument != (tree) 
# 22708 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 22708 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            ,
     &parameter->decl_specifiers.attributes);
   if (decl != global_trees[TI_ERROR_MARK] && parameter->loc != ((location_t) 0))
     ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22711, __FUNCTION__))->decl_minimal.locus) = parameter->loc;
 }

      deprecated_state = DEPRECATED_NORMAL;



      if (decl == global_trees[TI_ERROR_MARK])
 {
   parameters = global_trees[TI_ERROR_MARK];
   break;
 }

      if (parameter->decl_specifiers.attributes)
 cplus_decl_attributes (&decl,
          parameter->decl_specifiers.attributes,
          0);
      if (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22728, __FUNCTION__))->decl_minimal.name))
 decl = pushdecl (decl);

      if (decl != global_trees[TI_ERROR_MARK])
 {
   retrofit_lang_decl (decl);
   (__extension__ ({ struct lang_decl *lt = ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22734, __FUNCTION__))->decl_common.lang_specific); if (((enum tree_code) (decl)->base.code) != PARM_DECL || lt->u.base.selector != lds_parm) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22734, __FUNCTION__); &lt->u.parm; })->index) = ++index;
   (__extension__ ({ struct lang_decl *lt = ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22735, __FUNCTION__))->decl_common.lang_specific); if (((enum tree_code) (decl)->base.code) != PARM_DECL || lt->u.base.selector != lds_parm) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22735, __FUNCTION__); &lt->u.parm; })->level) = function_parm_depth ();
 }


      *tail = build_tree_list (parameter->default_argument, decl);
      tail = &((contains_struct_check ((*tail), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22740, __FUNCTION__))->common.chain);


      if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN)
   || cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS)

   || cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)
   || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))

 break;
      else if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 {
   cp_token *token;


   token = cp_lexer_peek_nth_token (parser->lexer, 2);

   if (token->type == CPP_ELLIPSIS)
     break;


   cp_lexer_consume_token (parser->lexer);
# 22774 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (!parser->in_template_argument_list_p
       && !parser->in_type_id_in_expr_p
       && cp_parser_uncommitted_to_tentative_parse_p (parser)




       && !parenthesized_p)
     cp_parser_commit_to_tentative_parse (parser);
 }
      else
 {
   cp_parser_error (parser, "expected %<,%> or %<...%>");
   if (!cp_parser_uncommitted_to_tentative_parse_p (parser))
     cp_parser_skip_to_closing_parenthesis (parser,
                        true,
                      false,
                           false);
   break;
 }
    }

  parser->in_unbraced_linkage_specification_p
    = saved_in_unbraced_linkage_specification_p;






  if (cp_binding_level *its = parser->implicit_template_scope)
    if (cp_binding_level *maybe_its = (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->level_chain)
      {
 while (maybe_its->kind == sk_class)
   maybe_its = maybe_its->level_chain;
 if (maybe_its == its)
   {
     parser->implicit_template_parms = 0;
     parser->implicit_template_scope = 0;
   }
      }

  return parameters;
}
# 22838 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_parameter_declarator *
cp_parser_parameter_declaration (cp_parser *parser,
     cp_parser_flags flags,
     bool template_parm_p,
     bool *parenthesized_p)
{
  int declares_class_or_enum;
  cp_decl_specifier_seq decl_specifiers;
  cp_declarator *declarator;
  tree default_argument;
  cp_token *token = 
# 22848 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 22848 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       , *declarator_token_start = 
# 22848 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 22848 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       ;
  const char *saved_message;
  bool template_parameter_pack_p = false;
# 22862 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  saved_message = parser->type_definition_forbidden_message;
  parser->type_definition_forbidden_message
    = "types may not be defined in parameter types";

  int template_parm_idx = (function_being_declared_is_template_p (parser) ?
      ((tree_check ((((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22867, __FUNCTION__, (TREE_LIST)))->list.value)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22867, __FUNCTION__, (TREE_VEC)))->base.u.length)
                                   : 0);


  cp_token *decl_spec_token_start = cp_lexer_peek_token (parser->lexer);
  cp_parser_decl_specifier_seq (parser,
    flags,
    &decl_specifiers,
    &declares_class_or_enum);


  if (!decl_specifiers.any_type_specifiers_p
      && cp_parser_parse_and_diagnose_invalid_type_name (parser))
    decl_specifiers.type = global_trees[TI_ERROR_MARK];



  if (cp_parser_error_occurred (parser))
    {
      parser->type_definition_forbidden_message = saved_message;
      return 
# 22887 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 22887 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
    }


  token = cp_lexer_peek_token (parser->lexer);




  if (token->type == CPP_CLOSE_PAREN
      || token->type == CPP_COMMA
      || token->type == CPP_EQ
      || token->type == CPP_GREATER)
    {
      declarator = 
# 22901 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 22901 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
      if (parenthesized_p)
 *parenthesized_p = false;
    }

  else
    {
      bool saved_default_arg_ok_p = parser->default_arg_ok_p;
      parser->default_arg_ok_p = false;





      if (!parser->in_template_argument_list_p







   && !parser->in_type_id_in_expr_p
   && cp_parser_uncommitted_to_tentative_parse_p (parser)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_PAREN))
 cp_parser_commit_to_tentative_parse (parser);

      declarator_token_start = token;
      declarator = cp_parser_declarator (parser,
      CP_PARSER_DECLARATOR_EITHER,
      CP_PARSER_FLAGS_NONE,
                              
# 22933 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 22933 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ,
      parenthesized_p,
                   false,
                   false,
                   false);
      parser->default_arg_ok_p = saved_default_arg_ok_p;

      decl_specifiers.attributes
 = attr_chainon (decl_specifiers.attributes,
   cp_parser_attributes_opt (parser));




      if (template_parm_p && declarator && declarator->parameter_pack_p)
 {
   declarator->parameter_pack_p = false;
   template_parameter_pack_p = true;
 }
    }







  token = cp_lexer_peek_token (parser->lexer);




  if (parser->implicit_template_parms
      && ((token->type == CPP_ELLIPSIS
    && declarator_can_be_parameter_pack (declarator))
   || (declarator && declarator->parameter_pack_p)))
    {
      int latest_template_parm_idx = ((tree_check ((((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22971, __FUNCTION__, (TREE_LIST)))->list.value)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22970, __FUNCTION__, (TREE_VEC)))->base.u.length)
                                                    ;

      if (latest_template_parm_idx != template_parm_idx)
 decl_specifiers.type = convert_generic_types_to_packs
   (decl_specifiers.type,
    template_parm_idx, latest_template_parm_idx);
    }

  if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
    {
      tree type = decl_specifiers.type;

      if (type && (tree_code_type[(int) (((enum tree_code) (type)->base.code))] == tcc_declaration))
        type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 22984, __FUNCTION__))->typed.type);

      if (((type
     && ((enum tree_code) (type)->base.code) != TYPE_PACK_EXPANSION
     && (template_parm_p || uses_parameter_packs (type)))
    || (!type && template_parm_p))
   && declarator_can_be_parameter_pack (declarator))
 {

   cp_lexer_consume_token (parser->lexer);
   maybe_warn_variadic_templates ();


   if (template_parm_p)
     template_parameter_pack_p = true;
   else if (declarator)
     declarator->parameter_pack_p = true;
   else
     decl_specifiers.type = make_pack_expansion (type);
 }
    }



  parser->type_definition_forbidden_message = saved_message;


  if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
    {
      tree type = decl_specifiers.type;
      token = cp_lexer_peek_token (parser->lexer);


      if (!template_parm_p && at_class_scope_p ()
   && ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23018, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined)
   && !(((enum tree_code) (scope_chain->class_type)->base.code) == RECORD_TYPE && ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name))) && ((tree_check ((((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__))->type_common.name)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23019, __FUNCTION__, (IDENTIFIER_NODE)))->base.protected_flag)))
 default_argument = cp_parser_cache_defarg (parser, false);



      else if (declares_constrained_type_template_parameter (type))
        default_argument
          = cp_parser_default_type_template_argument (parser);



      else if (declares_constrained_template_template_parameter (type))
        default_argument
          = cp_parser_default_template_template_argument (parser);



      else
 default_argument
   = cp_parser_default_argument (parser, template_parm_p);

      if (!parser->default_arg_ok_p)
 {
   permerror (token->location,
       "default arguments are only "
       "permitted for function parameters");
 }
      else if ((declarator && declarator->parameter_pack_p)
        || template_parameter_pack_p
        || (decl_specifiers.type
     && (((enum tree_code) (decl_specifiers.type)->base.code) == TYPE_PACK_EXPANSION || ((enum tree_code) (decl_specifiers.type)->base.code) == EXPR_PACK_EXPANSION)))
 {

   cp_declarator *id_declarator = declarator;
   while (id_declarator && id_declarator->kind != cdk_id)
     id_declarator = id_declarator->declarator;

   if (id_declarator && id_declarator->kind == cdk_id)
     error_at (declarator_token_start->location,
        template_parm_p
        ? "template parameter pack %qD " "cannot have a default argument"

        : "parameter pack %qD cannot have " "a default argument"
                           ,
        id_declarator->u.id.unqualified_name);
   else
     error_at (declarator_token_start->location,
        template_parm_p
        ? "template parameter pack cannot have " "a default argument"

        : "parameter pack cannot have a " "default argument"
                         );

   default_argument = (tree) 
# 23072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 23072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
 }
    }
  else
    default_argument = (tree) 
# 23076 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 23076 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;

  if (default_argument)
    (default_argument) = tree_strip_any_location_wrapper ((const_cast<union tree_node *> (((default_argument)))));
# 23097 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  location_t caret_loc = (declarator && declarator->id_loc != ((location_t) 0)
     ? declarator->id_loc
     : decl_spec_token_start->location);
  location_t param_loc = make_location (caret_loc,
     decl_spec_token_start->location,
     input_location);

  return make_parameter_declarator (&decl_specifiers,
        declarator,
        default_argument,
        param_loc,
        template_parameter_pack_p);
}





static tree
cp_parser_default_argument (cp_parser *parser, bool template_parm_p)
{
  tree default_argument = (tree) 
# 23118 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 23118 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;
  bool saved_greater_than_is_operator_p;
  unsigned char saved_local_variables_forbidden_p;
  bool non_constant_p, is_direct_init;



  saved_greater_than_is_operator_p = parser->greater_than_is_operator_p;
  parser->greater_than_is_operator_p = !template_parm_p;


  saved_local_variables_forbidden_p = parser->local_variables_forbidden_p;
  parser->local_variables_forbidden_p = ((1 << 0) | (1 << 1));

  if (template_parm_p)
    push_deferring_access_checks (dk_no_deferred);
  tree saved_class_ptr = (tree) 
# 23134 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 23134 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
  tree saved_class_ref = (tree) 
# 23135 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 23135 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;

  if ((cfun + 0))
    {
      saved_class_ptr = (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr));
      ((cfun + 0)->language)->x_current_class_ptr = (tree) 
# 23140 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 23140 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       ;
      saved_class_ref = (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref));
      ((cfun + 0)->language)->x_current_class_ref = (tree) 
# 23142 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 23142 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       ;
    }
  default_argument
    = cp_parser_initializer (parser, &is_direct_init, &non_constant_p);

  if ((cfun + 0))
    {
      ((cfun + 0)->language)->x_current_class_ptr = saved_class_ptr;
      ((cfun + 0)->language)->x_current_class_ref = saved_class_ref;
    }
  if ((((enum tree_code) (default_argument)->base.code) == CONSTRUCTOR && ((contains_struct_check ((default_argument), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23152, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE]))
    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
  if (template_parm_p)
    pop_deferring_access_checks ();
  parser->greater_than_is_operator_p = saved_greater_than_is_operator_p;
  parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;

  return default_argument;
}






static void
cp_parser_function_body (cp_parser *parser, bool in_function_try_block)
{
  cp_parser_compound_statement (parser, 
# 23170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 23170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , (in_function_try_block
            ? BCS_TRY_BLOCK : BCS_NORMAL),
    true);
}





static void
cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,
        bool in_function_try_block)
{
  tree body, list;
  const bool check_body_p
     = (((tree_check (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23185, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23185, __FUNCTION__, (FUNCTION_DECL)))->decl_with_vis.cxx_constructor)
 && ((contains_struct_check (((tree_check2 (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23186, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23186, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23186, __FUNCTION__))->decl_common.lang_flag_8));
  tree last = 
# 23187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 23187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;

  if (in_function_try_block
      && ((contains_struct_check (((tree_check2 (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23190, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23190, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23190, __FUNCTION__))->decl_common.lang_flag_8)
      && cxx_dialect < cxx20)
    {
      if (((tree_check (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23193, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23193, __FUNCTION__, (FUNCTION_DECL)))->decl_with_vis.cxx_constructor))
 pedwarn (input_location, 0,
   "function-try-block body of %<constexpr%> constructor only "
   "available with %<-std=c++20%> or %<-std=gnu++20%>");
      else
 pedwarn (input_location, 0,
   "function-try-block body of %<constexpr%> function only "
   "available with %<-std=c++20%> or %<-std=gnu++20%>");
    }


  body = begin_function_body ();

  cp_parser_ctor_initializer_opt (parser);







  if (check_body_p)
    {
      list = ((current_stmt_tree ()->x_cur_stmt_list)->last ());
      if (((tree_check ((list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23217, __FUNCTION__, (STATEMENT_LIST)))->stmt_list.tail))
 last = ((tree_check ((list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23218, __FUNCTION__, (STATEMENT_LIST)))->stmt_list.tail)->stmt;
    }

  cp_parser_function_body (parser, in_function_try_block);
  if (check_body_p)
    check_constexpr_ctor_body (last, list, true);

  finish_function_body (body);
}
# 23243 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_initializer (cp_parser* parser, bool* is_direct_init,
         bool* non_constant_p, bool subexpression_p)
{
  cp_token *token;
  tree init;


  token = cp_lexer_peek_token (parser->lexer);



  *is_direct_init = (token->type != CPP_EQ);

  *non_constant_p = false;

  if (token->type == CPP_EQ)
    {

      cp_lexer_consume_token (parser->lexer);

      init = cp_parser_initializer_clause (parser, non_constant_p);
    }
  else if (token->type == CPP_OPEN_PAREN)
    {
      vec<tree, va_gc> *vec;
      vec = cp_parser_parenthesized_expression_list (parser, non_attr,
                      false,
                                 true,
           non_constant_p);
      if (vec == 
# 23273 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 23273 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    )
 return global_trees[TI_ERROR_MARK];
      init = build_tree_list_vec (vec);
      release_tree_vector (vec);
    }
  else if (token->type == CPP_OPEN_BRACE)
    {
      cp_lexer_set_source_position (parser->lexer);
      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
      init = cp_parser_braced_list (parser, non_constant_p);
      (((tree_not_check2 (((tree_check ((init), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23283, __FUNCTION__, (CONSTRUCTOR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23283, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)) = 1;
    }
  else
    {

      cp_parser_error (parser, "expected initializer");
      init = global_trees[TI_ERROR_MARK];
    }

  if (!subexpression_p && check_for_bare_parameter_packs (init))
    init = global_trees[TI_ERROR_MARK];

  return init;
}
# 23311 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_initializer_clause (cp_parser* parser, bool* non_constant_p)
{
  cp_expr initializer;


  *non_constant_p = false;



  if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))
    {
      initializer
 = cp_parser_constant_expression (parser,
                              true,
     non_constant_p);
    }
  else
    initializer = cp_parser_braced_list (parser, non_constant_p);

  return initializer;
}
# 23348 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_braced_list (cp_parser* parser, bool* non_constant_p)
{
  tree initializer;
  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;


  matching_braces braces;
  braces.require_open (parser);

  initializer = make_node (CONSTRUCTOR);

  if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_BRACE))
    {
      bool designated;

      ((tree_check ((initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23364, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts)
 = cp_parser_initializer_list (parser, non_constant_p, &designated);
      (((tree_not_check2 (((tree_check ((initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23366, __FUNCTION__, (CONSTRUCTOR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23366, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_6)) = designated;

      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);
    }
  else
    *non_constant_p = false;

  location_t finish_loc = cp_lexer_peek_token (parser->lexer)->location;
  braces.require_close (parser);
  ((contains_struct_check ((initializer), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23376, __FUNCTION__))->typed.type) = cp_global_trees[CPTI_INIT_LIST_TYPE];

  cp_expr result (initializer);




  location_t combined_loc = make_location (start_loc, start_loc, finish_loc);
  result.set_location (combined_loc);
  return result;
}




static bool
cp_parser_skip_to_closing_square_bracket (cp_parser *parser)
{
  unsigned square_depth = 0;

  while (true)
    {
      cp_token * token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {
 case CPP_PRAGMA_EOL:
   if (!parser->lexer->in_pragma)
     break;

 case CPP_EOF:

   return false;

        case CPP_OPEN_SQUARE:
          ++square_depth;
          break;

        case CPP_CLOSE_SQUARE:
   if (!square_depth--)
     {
       cp_lexer_consume_token (parser->lexer);
       return true;
     }
   break;

 default:
   break;
 }


      cp_lexer_consume_token (parser->lexer);
    }
}



static bool
cp_parser_array_designator_p (cp_parser *parser)
{

  cp_lexer_consume_token (parser->lexer);

  cp_lexer_save_tokens (parser->lexer);




  bool array_designator_p
    = (cp_parser_skip_to_closing_square_bracket (parser)
       && cp_lexer_next_token_is (parser->lexer, CPP_EQ));


  cp_lexer_rollback_tokens (parser->lexer);

  return array_designator_p;
}
# 23489 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static vec<constructor_elt, va_gc> *
cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p,
       bool *designated)
{
  vec<constructor_elt, va_gc> *v = 
# 23493 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 23493 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
  bool first_p = true;
  tree first_designator = (tree) 
# 23495 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 23495 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;


  *non_constant_p = false;

  unsigned nelts = 0;
  int suppress = suppress_location_wrappers;


  while (true)
    {
      cp_token *token;
      tree designator;
      tree initializer;
      bool clause_non_constant_p;
      location_t loc = cp_lexer_peek_token (parser->lexer)->location;


      if ((cxx_dialect >= cxx20
    || cp_parser_allow_gnu_extensions_p (parser))
   && cp_lexer_next_token_is (parser->lexer, CPP_DOT)
   && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_NAME
   && (cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_EQ
       || (cp_lexer_peek_nth_token (parser->lexer, 3)->type
    == CPP_OPEN_BRACE)))
 {
   if (cxx_dialect < cxx20)
     pedwarn (loc, OPT_Wpedantic,
       "C++ designated initializers only available with "
       "%<-std=c++20%> or %<-std=gnu++20%>");

   cp_lexer_consume_token (parser->lexer);

   designator = cp_lexer_consume_token (parser->lexer)->u.value;
   if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))

     cp_lexer_consume_token (parser->lexer);
 }



      else if (cp_parser_allow_gnu_extensions_p (parser)
        && cp_lexer_next_token_is (parser->lexer, CPP_NAME)
        && (cp_lexer_peek_nth_token (parser->lexer, 2)->type
     == CPP_COLON))
 {

   pedwarn (loc, OPT_Wpedantic,
     "ISO C++ does not allow GNU designated initializers");

   designator = cp_lexer_consume_token (parser->lexer)->u.value;

   cp_lexer_consume_token (parser->lexer);
 }

      else if (cp_parser_allow_gnu_extensions_p (parser)
        && !((c_language & clk_objc) != 0)
        && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))
 {

   bool non_const = false;

   cp_parser_parse_tentatively (parser);

   if (!cp_parser_array_designator_p (parser))
     {
       cp_parser_simulate_error (parser);
       designator = (tree) 
# 23562 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 23562 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
     }
   else
     {
       designator = cp_parser_constant_expression (parser, true,
         &non_const);
       cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);
       cp_parser_require (parser, CPP_EQ, RT_EQ);
     }

   if (!cp_parser_parse_definitely (parser))
     designator = (tree) 
# 23573 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 23573 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
   else if (non_const
     && (!require_potential_rvalue_constant_expression
         (designator)))
     designator = (tree) 
# 23577 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 23577 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
   if (designator)

     pedwarn (loc, OPT_Wpedantic,
       "ISO C++ does not allow C99 designated initializers");
 }
      else
 designator = (tree) 
# 23584 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 23584 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;

      if (first_p)
 {
   first_designator = designator;
   first_p = false;
 }
      else if (cxx_dialect >= cxx20
        && first_designator != global_trees[TI_ERROR_MARK]
        && (!first_designator != !designator))
 {
   error_at (loc, "either all initializer clauses should be designated "
    "or none of them should be");
   first_designator = global_trees[TI_ERROR_MARK];
 }
      else if (cxx_dialect < cxx20 && !first_designator)
 first_designator = designator;


      initializer = cp_parser_initializer_clause (parser,
        &clause_non_constant_p);

      if (clause_non_constant_p)
 *non_constant_p = true;



      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
        {
   location_t loc = cp_lexer_peek_token (parser->lexer)->location;


          cp_lexer_consume_token (parser->lexer);

   if (designator && cxx_dialect >= cxx20)
     error_at (loc,
        "%<...%> not allowed in designated initializer list");


   initializer = make_pack_expansion (initializer);
        }


      do { constructor_elt _ce___ = {designator, initializer}; vec_safe_push ((v), _ce___); } while (0);



      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;


      token = cp_lexer_peek_nth_token (parser->lexer, 2);



      if (token->type == CPP_CLOSE_BRACE)
 break;



      const unsigned loc_max = 256;
      unsigned incr = 1;
      if (((enum tree_code) (initializer)->base.code) == CONSTRUCTOR)



 incr = (vec_safe_length (((tree_check ((initializer), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23650, __FUNCTION__, (CONSTRUCTOR)))->constructor.elts)));
      nelts += incr;
      if (nelts >= loc_max && (nelts - incr) < loc_max)
 ++suppress_location_wrappers;


      cp_lexer_consume_token (parser->lexer);
    }



  if (first_designator)
    {
      unsigned int i;
      tree designator, val;
      for (i = 0; (i >= vec_safe_length (v)) ? false : (((void) (val = (*v)[i].value)), (designator = (*v)[i].index), true); (i)++)
 if (designator && ((enum tree_code) (designator)->base.code) == IDENTIFIER_NODE)
   {
     if (((tree_not_check2 (((tree_check ((designator), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23668, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23668, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_4))
       {
  error_at (cp_expr_loc_or_input_loc (val),
     "%<.%s%> designator used multiple times in "
     "the same initializer list",
     ((const char *) (tree_check ((designator), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23673, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
  (*v)[i].index = global_trees[TI_ERROR_MARK];
       }
     else
       ((tree_not_check2 (((tree_check ((designator), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23677, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23677, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_4) = 1;
   }
      for (i = 0; (i >= vec_safe_length (v)) ? false : (((void) (val = (*v)[i].value)), (designator = (*v)[i].index), true); (i)++)
 if (designator && ((enum tree_code) (designator)->base.code) == IDENTIFIER_NODE)
   ((tree_not_check2 (((tree_check ((designator), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23681, __FUNCTION__, (IDENTIFIER_NODE)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23681, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_4) = 0;
    }

  suppress_location_wrappers = suppress;

  *designated = first_designator != (tree) 
# 23686 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 23686 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            ;
  return v;
}
# 23710 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_class_name (cp_parser *parser,
        bool typename_keyword_p,
        bool template_keyword_p,
        enum tag_types tag_type,
        bool check_dependency_p,
        bool class_head_p,
        bool is_declaration,
        bool enum_ok)
{
  tree decl;
  tree scope;
  bool typename_p;
  cp_token *token;
  tree identifier = (tree) 
# 23724 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 23724 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;


  token = cp_lexer_peek_token (parser->lexer);
  if (token->type != CPP_NAME && token->type != ((enum cpp_ttype) (CPP_KEYWORD + 1)))
    {
      cp_parser_error (parser, "expected class-name");
      return global_trees[TI_ERROR_MARK];
    }
# 23743 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  scope = parser->scope ? parser->scope : parser->context->object_type;
  if (scope == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];



  typename_p = (typename_keyword_p && scope && (tree_code_type[(int) (((enum tree_code) (scope)->base.code))] == tcc_type)
  && dependent_type_p (scope));


  if (token->type == CPP_NAME
      && !cp_parser_nth_token_starts_template_argument_list_p (parser, 2))
    {
      cp_token *identifier_token;
      bool ambiguous_p;


      identifier_token = cp_lexer_peek_token (parser->lexer);
      ambiguous_p = identifier_token->error_reported;
      identifier = cp_parser_identifier (parser);


      if (identifier == global_trees[TI_ERROR_MARK])
 decl = global_trees[TI_ERROR_MARK];


      else if (typename_p)
 decl = identifier;
      else
 {
   tree ambiguous_decls;



   if (ambiguous_p)
     {
       cp_parser_simulate_error (parser);
       return global_trees[TI_ERROR_MARK];
     }
# 23790 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))
     tag_type = scope_type;

   decl = cp_parser_lookup_name (parser, identifier,
     tag_type,
                     false,
                      false,
     check_dependency_p,
     &ambiguous_decls,
     identifier_token->location);
   if (ambiguous_decls)
     {
       if (cp_parser_parsing_tentatively (parser))
  cp_parser_simulate_error (parser);
       return global_trees[TI_ERROR_MARK];
     }
 }
    }
  else
    {

      decl = cp_parser_template_id (parser, template_keyword_p,
        check_dependency_p,
        tag_type,
        is_declaration);
      if (decl == global_trees[TI_ERROR_MARK])
 return global_trees[TI_ERROR_MARK];
    }

  decl = cp_parser_maybe_treat_template_as_class (decl, class_head_p);


  if (typename_p
      && decl != global_trees[TI_ERROR_MARK]
      && !is_overloaded_fn (decl))
    {
      decl = make_typename_type (scope, decl, typename_type,
                  tf_error);
      if (decl != global_trees[TI_ERROR_MARK])
 decl = ((tree_class_check ((decl), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23829, __FUNCTION__))->type_common.name);
    }

  decl = strip_using_decl (decl);


  if (((enum tree_code) (decl)->base.code) == TEMPLATE_ID_EXPR
      && identifier_p ((*((const_cast<tree*> (tree_operand_check ((decl), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23836, __FUNCTION__))))))
      && cp_lexer_next_token_is (parser->lexer, CPP_SCOPE))
# 23848 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
    {
      decl = make_typename_type (scope, decl, tag_type, tf_error);
      if (decl != global_trees[TI_ERROR_MARK])
 decl = ((tree_class_check ((decl), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23851, __FUNCTION__))->type_common.name);
    }
  else if (((enum tree_code) (decl)->base.code) != TYPE_DECL
    || ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23854, __FUNCTION__))->typed.type) == global_trees[TI_ERROR_MARK]
    || !(((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type))->base.code) == TEMPLATE_TYPE_PARM || ((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type))->base.code) == TYPENAME_TYPE || ((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type))->base.code) == TYPEOF_TYPE || ((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type))->base.code) == BOUND_TEMPLATE_TEMPLATE_PARM || ((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type))->base.code) == DECLTYPE_TYPE) || (((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23855, __FUNCTION__))->type_common.lang_flag_5)))
  || (enum_ok && ((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23856, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE))


    || (((c_language & clk_objc) != 0)
        && cp_lexer_peek_token (parser->lexer)->type == CPP_DOT
        && objc_is_class_name (decl)))
    decl = global_trees[TI_ERROR_MARK];

  if (decl == global_trees[TI_ERROR_MARK])
    cp_parser_error (parser, "expected class-name");
  else if (identifier && !parser->scope)
    maybe_note_name_used_in_class (identifier, decl);

  return decl;
}
# 23883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
inject_parm_decls (tree decl)
{
  begin_scope (sk_function_parms, decl);
  tree args = ((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23887, __FUNCTION__, (FUNCTION_DECL)))->function_decl.arguments);

  do_push_parm_decls (decl, args, 
# 23889 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 23889 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  );

  if (args && is_this_parameter (args))
    {
      ((void)(!((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) == (tree) 
# 23893 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null
# 23893 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23893, __FUNCTION__), 0 : 0));
      (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) = (tree) 
# 23894 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 23894 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;
      (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref)) = cp_build_fold_indirect_ref (args);
      (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) = args;
    }
}



static void
pop_injected_parms (void)
{
  pop_bindings_and_leave_scope ();
  (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) = (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref)) = (tree) 
# 23906 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                         __null
# 23906 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  ;
}
# 23916 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_class_specifier_1 (cp_parser* parser)
{
  tree type;
  tree attributes = (tree) 
# 23920 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 23920 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  bool nested_name_specifier_p;
  unsigned saved_num_template_parameter_lists;
  bool saved_in_function_body;
  unsigned char in_statement;
  bool in_switch_statement_p;
  bool saved_in_unbraced_linkage_specification_p;
  tree old_scope = (tree) 
# 23927 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 23927 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
  tree scope = (tree) 
# 23928 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 23928 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  cp_token *closing_brace;

  push_deferring_access_checks (dk_no_deferred);


  type = cp_parser_class_head (parser,
          &nested_name_specifier_p);


  if (!type)
    {
      cp_parser_skip_to_end_of_block_or_statement (parser);
      pop_deferring_access_checks ();
      return global_trees[TI_ERROR_MARK];
    }


  matching_braces braces;
  if (!braces.require_open (parser))
    {
      pop_deferring_access_checks ();
      return global_trees[TI_ERROR_MARK];
    }

  cp_ensure_no_omp_declare_simd (parser);
  cp_ensure_no_oacc_routine (parser);


  bool type_definition_ok_p = cp_parser_check_type_definition (parser);

  ++parser->num_classes_being_defined;


  saved_num_template_parameter_lists
    = parser->num_template_parameter_lists;
  parser->num_template_parameter_lists = 0;

  saved_in_function_body = parser->in_function_body;
  parser->in_function_body = false;

  in_statement = parser->in_statement;
  parser->in_statement = 0;

  in_switch_statement_p = parser->in_switch_statement_p;
  parser->in_switch_statement_p = false;

  saved_in_unbraced_linkage_specification_p
    = parser->in_unbraced_linkage_specification_p;
  parser->in_unbraced_linkage_specification_p = false;


  if (global_options.x_flag_concepts)
    type = associate_classtype_constraints (type);


  if (nested_name_specifier_p)
    {
      scope = (!(! (((contains_struct_check ((((((contains_struct_check (((tree_class_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->common.chain)))), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->decl_minimal.context)) || ((enum tree_code) (((contains_struct_check ((((((contains_struct_check (((tree_class_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->common.chain)))), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->decl_minimal.context))->base.code) == TRANSLATION_UNIT_DECL) ? ((contains_struct_check ((((((contains_struct_check (((tree_class_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->common.chain)))), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 23986, __FUNCTION__))->decl_minimal.context) : cp_global_trees[CPTI_GLOBAL]);

      if (is_nested_namespace (scope_chain->old_namespace,
          decl_namespace_context (scope)))
 old_scope = push_inner_scope (scope);
      else
 nested_name_specifier_p = false;
    }
  type = begin_class_definition (type);

  if (type == global_trees[TI_ERROR_MARK])

    cp_parser_skip_to_closing_brace (parser);
  else

    cp_parser_member_specification_opt (parser);


  closing_brace = braces.require_close (parser);

  if (cp_parser_allow_gnu_extensions_p (parser))
    attributes = cp_parser_gnu_attributes_opt (parser);
  if (type != global_trees[TI_ERROR_MARK])
    type = finish_struct (type, attributes);
  if (nested_name_specifier_p)
    pop_inner_scope (old_scope, scope);
# 24024 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  {
    cp_token *token = cp_lexer_peek_token (parser->lexer);
    bool want_semicolon = true;

    if (cp_next_tokens_can_be_std_attribute_p (parser))



      want_semicolon = false;

    switch (token->type)
      {
      case CPP_NAME:
      case CPP_SEMICOLON:
      case CPP_MULT:
      case CPP_AND:
      case CPP_OPEN_PAREN:
      case CPP_CLOSE_PAREN:
      case CPP_COMMA:
        want_semicolon = false;
        break;
# 24068 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      case CPP_KEYWORD:
 if (keyword_is_decl_specifier (token->keyword))
   {
     cp_token *lookahead = cp_lexer_peek_nth_token (parser->lexer, 2);



     want_semicolon
       = (lookahead->type == CPP_KEYWORD
   && keyword_begins_type_specifier (lookahead->keyword));
   }
 break;
      default:
 break;
      }




    if (closing_brace && (tree_code_type[(int) (((enum tree_code) (type)->base.code))] == tcc_type) && want_semicolon)
      {

 cp_token_position prev
   = cp_lexer_previous_token_position (parser->lexer);
 cp_token *prev_token = cp_lexer_token_at (parser->lexer, prev);
 location_t loc = prev_token->location;



 location_t next_loc = loc;
 if (!linemap_location_from_macro_expansion_p (line_table, loc))
   next_loc = linemap_position_for_loc_and_offset (line_table, loc, 1);

 rich_location richloc (line_table, next_loc);


 if (next_loc != loc)
   richloc.add_fixit_insert_before (next_loc, ";");

 if (((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24107, __FUNCTION__))->type_with_lang_specific.lang_specific))->declared_class))
   error_at (&richloc,
      "expected %<;%> after class definition");
 else if (((enum tree_code) (type)->base.code) == RECORD_TYPE)
   error_at (&richloc,
      "expected %<;%> after struct definition");
 else if (((enum tree_code) (type)->base.code) == UNION_TYPE)
   error_at (&richloc,
      "expected %<;%> after union definition");
 else
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24117, __FUNCTION__));



 cp_lexer_set_token_position (parser->lexer, prev);
 token = cp_lexer_peek_token (parser->lexer);
 token->type = CPP_SEMICOLON;
 token->keyword = RID_MAX;
      }
  }
# 24148 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (--parser->num_classes_being_defined == 0)
    {
      tree decl;
      tree class_type = (tree) 
# 24151 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 24151 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
      tree pushed_scope = (tree) 
# 24152 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 24152 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;
      unsigned ix;
      cp_default_arg_entry *e;
      tree save_ccp, save_ccr;

      if (!type_definition_ok_p || any_erroneous_template_args_p (type))
 {


   vec_safe_truncate (parser->unparsed_queues->last ().funs_with_default_args, 0);
   vec_safe_truncate (parser->unparsed_queues->last ().nsdmis, 0);
   vec_safe_truncate (parser->unparsed_queues->last ().funs_with_definitions, 0);
 }
# 24176 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      for (ix = 0; vec_safe_iterate ((parser->unparsed_queues->last ().funs_with_default_args), (ix), &(e)); ++(ix))
 {
   decl = e->decl;


   if (class_type != e->class_type)
     {
       if (pushed_scope)
  pop_scope (pushed_scope);
       class_type = e->class_type;
       pushed_scope = push_scope (class_type);
     }

   maybe_begin_member_template_processing (decl);

   cp_parser_late_parsing_default_args (parser, decl);

   maybe_end_member_template_processing ();
 }
      vec_safe_truncate (parser->unparsed_queues->last ().funs_with_default_args, 0);

      save_ccp = (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr));
      save_ccr = (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref));
      for (ix = 0; vec_safe_iterate ((parser->unparsed_queues->last ().nsdmis), (ix), &(decl)); ++(ix))
 {
   if (class_type != ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24201, __FUNCTION__))->decl_minimal.context))
     {
       if (pushed_scope)
  pop_scope (pushed_scope);
       class_type = ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24205, __FUNCTION__))->decl_minimal.context);
       pushed_scope = push_scope (class_type);
     }
   inject_this_parameter (class_type, TYPE_UNQUALIFIED);
   cp_parser_late_parsing_nsdmi (parser, decl);
 }
      vec_safe_truncate (parser->unparsed_queues->last ().nsdmis, 0);
      (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr)) = save_ccp;
      (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref)) = save_ccr;
      if (pushed_scope)
 pop_scope (pushed_scope);



      class_type = (tree) 
# 24219 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 24219 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
      pushed_scope = (tree) 
# 24220 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 24220 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
      for (ix = 0; vec_safe_iterate ((parser->unparsed_queues->last ().noexcepts), (ix), &(decl)); ++(ix))
 {
   tree ctx = ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24223, __FUNCTION__))->decl_minimal.context);
   if (class_type != ctx)
     {
       if (pushed_scope)
  pop_scope (pushed_scope);
       class_type = ctx;
       pushed_scope = push_scope (class_type);
     }

   tree spec = ((tree_class_check (((tree_check2 ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24232, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24232, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24232, __FUNCTION__))->type_non_common.lang_1);
   spec = ((tree_check ((spec), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24233, __FUNCTION__, (TREE_LIST)))->list.purpose);


   maybe_begin_member_template_processing (decl);


   inject_parm_decls (decl);


   unsigned char local_variables_forbidden_p
     = parser->local_variables_forbidden_p;
   if (((contains_struct_check (((tree_check3 ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24244, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL), (PARM_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24244, __FUNCTION__))->decl_common.lang_flag_6))
     parser->local_variables_forbidden_p |= (1 << 1);


   spec = cp_parser_late_noexcept_specifier (parser, spec);

   if (spec != global_trees[TI_ERROR_MARK])
     ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24251, __FUNCTION__))->typed.type) = build_exception_variant (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24251, __FUNCTION__))->typed.type), spec);


   parser->local_variables_forbidden_p = local_variables_forbidden_p;




   noexcept_override_late_checks (type, decl);


   pop_injected_parms ();


   maybe_end_member_template_processing ();
 }
      vec_safe_truncate (parser->unparsed_queues->last ().noexcepts, 0);
      if (pushed_scope)
 pop_scope (pushed_scope);


      if (global_options.x_flag_openmp)
 {

   for (ix = 0; vec_safe_iterate ((parser->unparsed_queues->last ().funs_with_definitions), (ix), &(decl)); ++(ix))
     if ((__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__)))->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__, (TEMPLATE_DECL))))))))->result : (contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__)))->base.code) == FUNCTION_DECL || (((enum tree_code) ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__)))->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 24276 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null 
# 24276 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24276, __FUNCTION__); &lt->u.fn; })->omp_declare_reduction_p))
       cp_parser_late_parsing_for_member (parser, decl);
   for (ix = 0; vec_safe_iterate ((parser->unparsed_queues->last ().funs_with_definitions), (ix), &(decl)); ++(ix))
     if (!(__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__)))->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__, (TEMPLATE_DECL))))))))->result : (contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__)))->base.code) == FUNCTION_DECL || (((enum tree_code) ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__)))->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 24279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null 
# 24279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24279, __FUNCTION__); &lt->u.fn; })->omp_declare_reduction_p))
       cp_parser_late_parsing_for_member (parser, decl);
 }
      else
 for (ix = 0; vec_safe_iterate ((parser->unparsed_queues->last ().funs_with_definitions), (ix), &(decl)); ++(ix))
   cp_parser_late_parsing_for_member (parser, decl);
      vec_safe_truncate (parser->unparsed_queues->last ().funs_with_definitions, 0);
    }


  pop_deferring_access_checks ();


  parser->in_switch_statement_p = in_switch_statement_p;
  parser->in_statement = in_statement;
  parser->in_function_body = saved_in_function_body;
  parser->num_template_parameter_lists
    = saved_num_template_parameter_lists;
  parser->in_unbraced_linkage_specification_p
    = saved_in_unbraced_linkage_specification_p;

  return type;
}

static tree
cp_parser_class_specifier (cp_parser* parser)
{
  tree ret;
  timevar_push (TV_PARSE_STRUCT);
  ret = cp_parser_class_specifier_1 (parser);
  timevar_pop (TV_PARSE_STRUCT);
  return ret;
}
# 24344 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_class_head (cp_parser* parser,
        bool* nested_name_specifier_p)
{
  tree nested_name_specifier;
  enum tag_types class_key;
  tree id = (tree) 
# 24350 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 24350 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
  tree type = (tree) 
# 24351 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 24351 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  tree attributes;
  tree bases;
  cp_virt_specifiers virt_specifiers = VIRT_SPEC_UNSPECIFIED;
  bool template_id_p = false;
  bool qualified_p = false;
  bool invalid_nested_name_p = false;
  bool invalid_explicit_specialization_p = false;
  bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;
  tree pushed_scope = (tree) 
# 24360 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 24360 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  unsigned num_templates;
  cp_token *type_start_token = 
# 24362 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 24362 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  , *nested_name_specifier_token_start = 
# 24362 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                         __null
# 24362 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                             ;

  *nested_name_specifier_p = false;


  num_templates = 0;
  parser->colon_corrects_to_scope_p = false;


  class_key = cp_parser_class_key (parser);
  if (class_key == none_type)
    return global_trees[TI_ERROR_MARK];

  location_t class_head_start_location = input_location;


  attributes = cp_parser_attributes_opt (parser);
# 24389 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (cp_parser_global_scope_opt (parser, false))
    qualified_p = true;

  push_deferring_access_checks (dk_no_check);



  nested_name_specifier_token_start = cp_lexer_peek_token (parser->lexer);
  nested_name_specifier
    = cp_parser_nested_name_specifier_opt (parser,
                               false,
                               false,
                   true,
                           false);



  cp_token *bad_template_keyword = 
# 24406 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 24406 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;

  if (nested_name_specifier)
    {
      type_start_token = cp_lexer_peek_token (parser->lexer);
# 24428 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      cp_parser_parse_tentatively (parser);
      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
 bad_template_keyword = cp_lexer_consume_token (parser->lexer);
      type = cp_parser_class_name (parser,
                              false,
                              false,
       class_type,
                              false,
                        true,
                          false);

      if (!cp_parser_parse_definitely (parser))
 {
   invalid_nested_name_p = true;
   type_start_token = cp_lexer_peek_token (parser->lexer);
   id = cp_parser_identifier (parser);
   if (id == global_trees[TI_ERROR_MARK])
     id = (tree) 
# 24445 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 24445 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
 }


      if (type == global_trees[TI_ERROR_MARK])
 nested_name_specifier = (tree) 
# 24450 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 24450 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;


      else
 num_templates = num_template_headers_for_class (((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24454, __FUNCTION__))->typed.type));
    }

  else
    {


      cp_parser_parse_tentatively (parser);

      type_start_token = cp_lexer_peek_token (parser->lexer);
      id = cp_parser_template_id (parser,
                             false,
                             true,
      class_key,
                         true);

      if (!cp_parser_parse_definitely (parser))
 {
   if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
     {
       type_start_token = cp_lexer_peek_token (parser->lexer);
       id = cp_parser_identifier (parser);
     }
   else
     id = (tree) 
# 24478 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 24478 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
 }
      else
 {
   template_id_p = true;
   ++num_templates;
 }
    }

  pop_deferring_access_checks ();

  if (id)
    {
      cp_parser_check_for_invalid_template_id (parser, id,
            class_key,
                                               type_start_token->location);
    }
  virt_specifiers = cp_parser_virt_specifier_seq_opt (parser);





  if (!cp_parser_next_token_starts_class_definition_p (parser))
    {
      cp_parser_error (parser, "expected %<{%> or %<:%>");
      type = global_trees[TI_ERROR_MARK];
      goto out;
    }



  cp_parser_commit_to_tentative_parse (parser);
  if (virt_specifiers & VIRT_SPEC_OVERRIDE)
    {
      cp_parser_error (parser,
                       "cannot specify %<override%> for a class");
      type = global_trees[TI_ERROR_MARK];
      goto out;
    }

  if (qualified_p)
    {
      cp_parser_error (parser,
         "global qualification of class name is invalid");
      type = global_trees[TI_ERROR_MARK];
      goto out;
    }
  else if (invalid_nested_name_p)
    {
      cp_parser_error (parser,
         "qualified name does not name a class");
      type = global_trees[TI_ERROR_MARK];
      goto out;
    }
  else if (nested_name_specifier)
    {
      tree scope;

      if (bad_template_keyword)


 pedwarn (bad_template_keyword->location, OPT_Wpedantic,
   "keyword %<template%> not allowed in class-head-name");


      if (!(((enum tree_code) (type)->base.code) == TYPE_DECL && ((contains_struct_check ((type), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24544, __FUNCTION__))->decl_common.lang_flag_2)))
 {
   error_at (type_start_token->location,
      "invalid class name in declaration of %qD",
      type);
   type = (tree) 
# 24549 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 24549 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
   goto done;
 }


      scope = current_scope ();


      if (scope && !is_ancestor (scope, nested_name_specifier))
 {
   if (at_namespace_scope_p ())
     error_at (type_start_token->location,
        "declaration of %qD in namespace %qD which does not "
        "enclose %qD",
        type, scope, nested_name_specifier);
   else
     error_at (type_start_token->location,
        "declaration of %qD in %qD which does not enclose %qD",
        type, scope, nested_name_specifier);
   type = (tree) 
# 24568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 24568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
   goto done;
 }






      if (scope == nested_name_specifier)
 permerror (nested_name_specifier_token_start->location,
     "extra qualification not allowed");
    }


  if (at_namespace_scope_p ()
      && parser->num_template_parameter_lists == 0
      && !processing_template_parmlist
      && template_id_p)
    {





      location_t reported_loc
        = make_location (class_head_start_location,
                         class_head_start_location,
                         get_finish (type_start_token->location));
      rich_location richloc (line_table, reported_loc);
      richloc.add_fixit_insert_before (class_head_start_location,
                                       "template <> ");
      error_at (&richloc,
  "an explicit specialization must be preceded by"
  " %<template <>%>");
      invalid_explicit_specialization_p = true;


      ++parser->num_template_parameter_lists;
      begin_specialization ();
    }





  if (!cp_parser_check_template_parameters (parser, num_templates,
         template_id_p,
         type_start_token->location,
                        
# 24617 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 24617 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ))
    {


      type = (tree) 
# 24621 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 24621 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
      goto done;
    }


  if (template_id_p)
    {
      if (((enum tree_code) (id)->base.code) == TEMPLATE_ID_EXPR
   && ((((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((id), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24629, __FUNCTION__))))))->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((*((const_cast<tree*> (tree_operand_check ((id), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24629, __FUNCTION__)))))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24629, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 24629 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null 
# 24629 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((*((const_cast<tree*> (tree_operand_check ((id), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24629, __FUNCTION__)))))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24629, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)
       || ((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((id), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24630, __FUNCTION__))))))->base.code) == OVERLOAD))
 {
   error_at (type_start_token->location,
      "function template %qD redeclared as a class template", id);
   type = global_trees[TI_ERROR_MARK];
 }
      else
 {
   type = ((contains_struct_check ((id), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24638, __FUNCTION__))->typed.type);
   type = maybe_process_partial_specialization (type);



   if (type != global_trees[TI_ERROR_MARK])
     check_unqualified_spec_or_inst (type, type_start_token->location);
 }
      if (nested_name_specifier)
 pushed_scope = push_scope (nested_name_specifier);
    }
  else if (nested_name_specifier)
    {
      tree class_type;
# 24661 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (((enum tree_code) (((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24661, __FUNCTION__))->typed.type))->base.code) == TYPENAME_TYPE)
 {
   class_type = resolve_typename_type (((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24663, __FUNCTION__))->typed.type),
                              false);
   if (((enum tree_code) (class_type)->base.code) != TYPENAME_TYPE)
     type = ((tree_class_check ((class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24666, __FUNCTION__))->type_common.name);
   else
     {
       cp_parser_error (parser, "could not resolve typename type");
       type = global_trees[TI_ERROR_MARK];
     }
 }

      if (maybe_process_partial_specialization (((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24674, __FUNCTION__))->typed.type))
   == global_trees[TI_ERROR_MARK])
 {
   type = (tree) 
# 24677 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 24677 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
   goto done;
 }

      class_type = scope_chain->class_type;

      pushed_scope = push_scope (nested_name_specifier);

      type = ((((contains_struct_check (((tree_class_check ((((tree_class_check ((((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24685, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24685, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24685, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24685, __FUNCTION__))->common.chain)));



      if (((!processing_template_parmlist && scope_chain->x_processing_template_decl > template_class_depth (current_scope ()))
    || (((tree_class_check (((tree_check3 ((((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24690, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24690, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24690, __FUNCTION__))->type_non_common.lang_1)))
   && !(((((tree_class_check ((((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24691, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24691, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) == 2))
 {
   type = push_template_decl (type);
   if (type == global_trees[TI_ERROR_MARK])
     {
       type = (tree) 
# 24696 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 24696 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
       goto done;
     }
 }

      type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24701, __FUNCTION__))->typed.type);
      *nested_name_specifier_p = true;
    }
  else
    {

      if (!id)
 id = make_anon_name ();
      tag_scope tag_scope = (parser->in_type_id_in_expr_p
        ? ts_within_enclosing_non_class
        : ts_current);
      type = xref_tag (class_key, id, tag_scope,
         parser->num_template_parameter_lists);
    }


  cp_parser_check_class_key (parser, ((location_t) 0), class_key, type,
        true, true);



  if (((enum tree_code) (type)->base.code) == RECORD_TYPE)
    ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24723, __FUNCTION__))->type_with_lang_specific.lang_specific))->declared_class) = class_key == class_type;





  if (type != global_trees[TI_ERROR_MARK]
      && ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24730, __FUNCTION__))->type_common.size) != (tree) 
# 24730 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 24730 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         ) || ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24730, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined)))
    {
      error_at (type_start_token->location, "redefinition of %q#T",
  type);
      inform (location_of (type), "previous definition of %q#T",
       type);
      type = (tree) 
# 24736 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 24736 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
      goto done;
    }
  else if (type == global_trees[TI_ERROR_MARK])
    type = (tree) 
# 24740 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 24740 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  if (type)
    {


      cplus_decl_attributes (&type, attributes, (int)ATTR_FLAG_TYPE_IN_PLACE);
      fixup_attribute_variants (type);
    }
# 24759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))
    {


      if (type)
 pushclass (type);
      bases = cp_parser_base_clause (parser);


      if (type)
 popclass ();
    }
  else
    bases = (tree) 
# 24772 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 24772 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;



  if (type && cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    xref_basetypes (type, bases);

 done:


  if (pushed_scope)
    pop_scope (pushed_scope);

  if (invalid_explicit_specialization_p)
    {
      end_specialization ();
      --parser->num_template_parameter_lists;
    }

  if (type)
    ((contains_struct_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24792, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24792, __FUNCTION__))->decl_minimal.locus) = type_start_token->location;
  if (type && (virt_specifiers & VIRT_SPEC_FINAL))
    ((tree_check3 ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 24794, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))->base.default_def_flag) = 1;
 out:
  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
  return type;
}
# 24810 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static enum tag_types
cp_parser_class_key (cp_parser* parser)
{
  cp_token *token;
  enum tag_types tag_type;


  token = cp_parser_require (parser, CPP_KEYWORD, RT_CLASS_KEY);
  if (!token)
    return none_type;


  tag_type = cp_parser_token_is_class_key (token);
  if (!tag_type)
    cp_parser_error (parser, "expected class-key");
  return tag_type;
}
# 24835 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_type_parameter_key (cp_parser* parser)
{

  enum tag_types tag_type = none_type;
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  if ((tag_type = cp_parser_token_is_type_parameter_key (token)) != none_type)
    {
      cp_lexer_consume_token (parser->lexer);
      if (global_options.x_pedantic && tag_type == typename_type && cxx_dialect < cxx17)


 pedwarn (token->location, OPT_Wpedantic,
   "ISO C++ forbids typename key in template template parameter;"
   " use %<-std=c++17%> or %<-std=gnu++17%>");
    }
  else
    cp_parser_error (parser, "expected %<class%> or %<typename%>");

  return;
}







static void
cp_parser_member_specification_opt (cp_parser* parser)
{
  while (true)
    {
      cp_token *token;
      enum rid keyword;


      token = cp_lexer_peek_token (parser->lexer);

      if (token->type == CPP_CLOSE_BRACE
   || token->type == CPP_EOF
   || token->type == CPP_PRAGMA_EOL)
 break;


      keyword = token->keyword;
      switch (keyword)
 {
 case RID_PUBLIC:
 case RID_PROTECTED:
 case RID_PRIVATE:

   cp_lexer_consume_token (parser->lexer);

   scope_chain->access_specifier = token->u.value;

   cp_parser_require (parser, CPP_COLON, RT_COLON);
   break;

 default:

   if (token->type == CPP_PRAGMA)
     {
       cp_parser_pragma (parser, pragma_member, 
# 24898 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null
# 24898 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   );
       break;
     }



   cp_parser_member_declaration (parser);
 }
    }
}
# 24943 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_member_declaration (cp_parser* parser)
{
  cp_decl_specifier_seq decl_specifiers;
  tree prefix_attributes;
  tree decl;
  int declares_class_or_enum;
  bool friend_p;
  cp_token *token = 
# 24951 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 24951 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  cp_token *decl_spec_token_start = 
# 24952 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 24952 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;
  cp_token *initializer_token_start = 
# 24953 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                     __null
# 24953 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;
  int saved_pedantic;
  bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;


  if (cp_parser_extension_opt (parser, &saved_pedantic))
    {

      cp_parser_member_declaration (parser);

      global_options.x_pedantic = saved_pedantic;

      return;
    }


  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
    {


      if (cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_LESS
   && cp_lexer_peek_nth_token (parser->lexer, 3)->type == CPP_GREATER)
 cp_parser_explicit_specialization (parser);
      else
 cp_parser_template_declaration (parser, true);

      return;
    }

  else if (cp_parser_template_declaration_after_export (parser, true))
    return;


  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_USING))
    {
      if (cxx_dialect < cxx11)
 {

   cp_parser_using_declaration (parser,
                                    false);
   return;
 }
      else
 {
   tree decl;
   bool alias_decl_expected;
   cp_parser_parse_tentatively (parser);
   decl = cp_parser_alias_declaration (parser);





   alias_decl_expected =
     !cp_parser_uncommitted_to_tentative_parse_p (parser);
   cp_parser_parse_definitely (parser);

   if (alias_decl_expected)
     finish_member_declaration (decl);
   else
     cp_parser_using_declaration (parser,
                               false);
   return;
 }
    }


  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AT_DEFS))
    {
      tree ivar, member;
      tree ivar_chains = cp_parser_objc_defs_expression (parser);
      ivar = ivar_chains;
      while (ivar)
 {
   member = ivar;
   ivar = ((contains_struct_check ((member), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25028, __FUNCTION__))->common.chain);
   ((contains_struct_check ((member), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25029, __FUNCTION__))->common.chain) = (tree) 
# 25029 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 25029 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
   finish_member_declaration (member);
 }
      return;
    }


  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_STATIC_ASSERT))
    {
      cp_parser_static_assert (parser, true);
      return;
    }

  parser->colon_corrects_to_scope_p = false;

  if (cp_parser_using_declaration (parser, true))
      goto out;


  decl_spec_token_start = cp_lexer_peek_token (parser->lexer);
  cp_parser_decl_specifier_seq (parser,
    (CP_PARSER_FLAGS_OPTIONAL
     | CP_PARSER_FLAGS_TYPENAME_OPTIONAL),
    &decl_specifiers,
    &declares_class_or_enum);

  if (!decl_specifiers.any_type_specifiers_p
      && cp_parser_parse_and_diagnose_invalid_type_name (parser))
    goto out;


  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
    {
# 25071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (!decl_specifiers.any_specifiers_p)
 {
   cp_token *token = cp_lexer_peek_token (parser->lexer);
   if (!in_system_header_at (token->location))
     {
       gcc_rich_location richloc (token->location);
       richloc.add_fixit_remove ();
       pedwarn (&richloc, OPT_Wpedantic, "extra %<;%>");
     }
 }
      else
 {
   tree type;


   friend_p = cp_parser_friend_p (&decl_specifiers);


   type = check_tag_decl (&decl_specifiers,
                                       false);


   if (friend_p)
     {


        if (!declares_class_or_enum && cxx_dialect < cxx11)
   pedwarn (decl_spec_token_start->location, OPT_Wpedantic,
     "in C++03 a class-key must be used "
     "when declaring a friend");
# 25109 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        if (!type)
   {
     type = decl_specifiers.type;
     if (type && ((enum tree_code) (type)->base.code) == TYPE_DECL)
       type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25113, __FUNCTION__))->typed.type);
   }
        if (!type || !(tree_code_type[(int) (((enum tree_code) (type)->base.code))] == tcc_type))
   error_at (decl_spec_token_start->location,
      "friend declaration does not name a class or "
      "function");
        else
   make_friend_class (scope_chain->class_type, type,
                     true);
     }


   else if (!type || type == global_trees[TI_ERROR_MARK])
     ;



   else if (((((((enum tree_code) (type)->base.code)) == RECORD_TYPE || (((enum tree_code) (type)->base.code)) == UNION_TYPE) && ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25130, __FUNCTION__))->type_common.lang_flag_5)) && (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25130, __FUNCTION__))->type_with_lang_specific.lang_specific))->anon_aggr))
     {

       if (decl_specifiers.storage_class != sc_none)
  error_at (decl_spec_token_start->location,
     "a storage class on an anonymous aggregate "
     "in class scope is not allowed");



       fixup_anonymous_aggr (type);

       decl = build_decl (decl_spec_token_start->location,
     FIELD_DECL, (tree) 
# 25143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 25143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         , type);

       finish_member_declaration (decl);
     }
   else
     cp_parser_check_access_in_redeclaration
           (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25149, __FUNCTION__))->type_common.name),
            decl_spec_token_start->location);
 }
    }
  else
    {
      bool assume_semicolon = false;




      prefix_attributes = decl_specifiers.attributes;
      decl_specifiers.attributes = (tree) 
# 25161 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 25161 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           ;


      friend_p = cp_parser_friend_p (&decl_specifiers);



      while (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
 {
   tree attributes = (tree) 
# 25170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 25170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
   tree first_attribute;
   tree initializer;
   bool named_bitfld = false;


   token = cp_lexer_peek_token (parser->lexer);





   if (cp_next_tokens_can_be_attribute_p (parser)
       || (token->type == CPP_NAME
    && cp_nth_tokens_can_be_attribute_p (parser, 2)
    && (named_bitfld = true)))
     {
       size_t n
  = cp_parser_skip_attributes_opt (parser, 1 + named_bitfld);
       token = cp_lexer_peek_nth_token (parser->lexer, n);
     }


   if (token->type == CPP_COLON
       || (token->type == CPP_NAME
    && token == cp_lexer_peek_token (parser->lexer)
    && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COLON)
    && (named_bitfld = true)))
     {
       tree identifier;
       tree width;
       tree late_attributes = (tree) 
# 25201 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 25201 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
       location_t id_location
  = cp_lexer_peek_token (parser->lexer)->location;

       if (named_bitfld)
  identifier = cp_parser_identifier (parser);
       else
  identifier = (tree) 
# 25208 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 25208 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;


       attributes = cp_parser_attributes_opt (parser);


       cp_lexer_consume_token (parser->lexer);


       width = cp_parser_constant_expression (parser, false, 
# 25217 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                            __null
# 25217 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                ,
           cxx_dialect >= cxx11);



       initializer = (tree) 
# 25222 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 25222 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
       if (cxx_dialect >= cxx11
    && (cp_lexer_next_token_is (parser->lexer, CPP_EQ)
        || cp_lexer_next_token_is (parser->lexer,
       CPP_OPEN_BRACE)))
  {
    location_t loc
      = cp_lexer_peek_token (parser->lexer)->location;
    if (cxx_dialect < cxx20
        && identifier != (tree) 
# 25231 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 25231 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 )
      pedwarn (loc, 0,
        "default member initializers for bit-fields "
        "only available with %<-std=c++20%> or "
        "%<-std=gnu++20%>");

    initializer = cp_parser_save_nsdmi (parser);
    if (identifier == (tree) 
# 25238 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 25238 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              )
      {
        error_at (loc, "default member initializer for "
         "unnamed bit-field");
        initializer = (tree) 
# 25242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 25242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
      }
  }
       else
  {




    if (cp_next_tokens_can_be_std_attribute_p (parser))
      pedwarn (input_location, OPT_Wpedantic,
        "ISO C++ allows bit-field attributes only "
        "before the %<:%> token");

    late_attributes = cp_parser_attributes_opt (parser);
  }

       attributes = attr_chainon (attributes, late_attributes);



       first_attribute = attributes;

       attributes = attr_chainon (prefix_attributes, attributes);


       decl = grokbitfield (identifier
       ? make_id_declarator ((tree) 
# 25269 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 25269 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ,
        identifier,
        sfk_none,
        id_location)
       : 
# 25273 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 25273 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
            ,
       &decl_specifiers,
       width, initializer,
       attributes);
     }
   else
     {
       cp_declarator *declarator;
       tree asm_specification;
       int ctor_dtor_or_conv_p;
       bool static_p = (decl_specifiers.storage_class == sc_static);
       cp_parser_flags flags = CP_PARSER_FLAGS_TYPENAME_OPTIONAL;
       if (!friend_p
    && !decl_spec_seq_has_spec_p (&decl_specifiers, ds_typedef))
  flags |= CP_PARSER_FLAGS_DELAY_NOEXCEPT;


       declarator
  = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
     flags,
     &ctor_dtor_or_conv_p,
                         
# 25294 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 25294 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ,
                  true,
     friend_p, static_p);



       if (declarator == cp_error_declarator)
  {

    cp_parser_skip_to_end_of_statement (parser);





    if (cp_lexer_next_token_is (parser->lexer,
           CPP_SEMICOLON))
      cp_lexer_consume_token (parser->lexer);
    goto out;
  }

       if (declares_class_or_enum & 2)
  cp_parser_check_for_definition_in_return_type
         (declarator, decl_specifiers.type,
          decl_specifiers.locations[ds_type_spec]);


       asm_specification = cp_parser_asm_specification_opt (parser);

       attributes = cp_parser_attributes_opt (parser);


       first_attribute = attributes;

       attributes = attr_chainon (prefix_attributes, attributes);
# 25337 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
       if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
  {
# 25352 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
    initializer_token_start = cp_lexer_peek_token (parser->lexer);
    if (function_declarator_p (declarator)
        || (decl_specifiers.type
     && ((enum tree_code) (decl_specifiers.type)->base.code) == TYPE_DECL
     && declarator->kind == cdk_id
     && (((enum tree_code) (((contains_struct_check ((decl_specifiers.type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25357, __FUNCTION__))->typed.type))->base.code)
         == FUNCTION_TYPE)))
      initializer = cp_parser_pure_specifier (parser);
    else if (decl_specifiers.storage_class != sc_static)
      initializer = cp_parser_save_nsdmi (parser);
    else if (cxx_dialect >= cxx11)
      {
        bool nonconst;



        cp_lexer_consume_token (parser->lexer);

        initializer = cp_parser_initializer_clause (parser,
          &nonconst);
      }
    else

      initializer = cp_parser_constant_initializer (parser);
  }
       else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE)
         && !function_declarator_p (declarator))
  {
    bool x;
    if (decl_specifiers.storage_class != sc_static)
      initializer = cp_parser_save_nsdmi (parser);
    else
      initializer = cp_parser_initializer (parser, &x, &x);
  }






       else if (cp_lexer_next_token_is (parser->lexer, CPP_COLON)


         && decl_specifiers.any_type_specifiers_p)
  {

    tree d = grokdeclarator (declarator, &decl_specifiers,
        BITFIELD, false,
        &attributes);
    if (!((d) == global_trees[TI_ERROR_MARK] || ((d) && ((contains_struct_check (((d)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25401, __FUNCTION__))->typed.type) == global_trees[TI_ERROR_MARK])))
      error_at (((contains_struct_check ((d), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25402, __FUNCTION__))->decl_minimal.locus),
         "bit-field %qD has non-integral type %qT",
         d, ((contains_struct_check ((d), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25404, __FUNCTION__))->typed.type));
    cp_parser_skip_to_end_of_statement (parser);

    if (cp_lexer_next_token_is (parser->lexer,
           CPP_SEMICOLON))
      cp_lexer_consume_token (parser->lexer);
    goto out;
  }

       else
  initializer = (tree) 
# 25414 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 25414 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;






       if (cp_parser_token_starts_function_definition_p
    (cp_lexer_peek_token (parser->lexer)))
  {





    if (initializer && initializer_token_start)
      error_at (initializer_token_start->location,
         "pure-specifier on function-definition");
    decl = cp_parser_save_member_function_body (parser,
             &decl_specifiers,
             declarator,
             attributes);
    if (parser->fully_implicit_function_template_p)
      decl = finish_fully_implicit_template (parser, decl);

    if (!friend_p)
      finish_member_declaration (decl);

    token = cp_lexer_peek_token (parser->lexer);

    if (token->type == CPP_SEMICOLON)
      {
        location_t semicolon_loc
   = cp_lexer_consume_token (parser->lexer)->location;
        gcc_rich_location richloc (semicolon_loc);
        richloc.add_fixit_remove ();
        warning_at (&richloc, OPT_Wextra_semi,
      "extra %<;%> after in-class "
      "function definition");
      }
    goto out;
  }
       else
  if (declarator->kind == cdk_function)
    declarator->id_loc = token->location;

       decl = grokfield (declarator, &decl_specifiers,
    initializer, true,
    asm_specification, attributes);
       if (parser->fully_implicit_function_template_p)
  {
    if (friend_p)
      finish_fully_implicit_template (parser, 0);
    else
      decl = finish_fully_implicit_template (parser, decl);
  }
     }

   cp_finalize_omp_declare_simd (parser, decl);
   cp_finalize_oacc_routine (parser, decl, false);


   if (attributes != global_trees[TI_ERROR_MARK])
     {
       while (attributes && ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25478, __FUNCTION__))->common.chain) != first_attribute)
  attributes = ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25479, __FUNCTION__))->common.chain);
       if (attributes)
  ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25481, __FUNCTION__))->common.chain) = (tree) 
# 25481 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 25481 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
     }



   parser->scope = (tree) 
# 25486 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 25486 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
   parser->qualifying_scope = (tree) 
# 25487 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 25487 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
   parser->object_scope = (tree) 
# 25488 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 25488 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;

   if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
     {
       cp_lexer_consume_token (parser->lexer);
       if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
  {
    cp_token *token = cp_lexer_previous_token (parser->lexer);
    gcc_rich_location richloc (token->location);
    richloc.add_fixit_remove ();
    error_at (&richloc, "stray %<,%> at end of "
       "member declaration");
  }
     }

   else if (cp_lexer_next_token_is_not (parser->lexer,
            CPP_SEMICOLON))
     {



       cp_token *token = cp_lexer_previous_token (parser->lexer);
       gcc_rich_location richloc (token->location);
       richloc.add_fixit_insert_after (";");
       error_at (&richloc, "expected %<;%> at end of "
   "member declaration");





       assume_semicolon = true;
     }

   if (decl)
     {

       if (!friend_p


    || !(((enum tree_code) (decl)->base.code) == FUNCTION_DECL || (((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25528, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 25528 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null 
# 25528 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
       && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25528, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)))
  finish_member_declaration (decl);

       if (((enum tree_code) (decl)->base.code) == FUNCTION_DECL)
  cp_parser_save_default_args (parser, decl);
       else if (((enum tree_code) (decl)->base.code) == FIELD_DECL
         && ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25534, __FUNCTION__))->decl_common.initial))

  vec_safe_push (parser->unparsed_queues->last ().nsdmis, decl);
     }

   if (assume_semicolon)
     goto out;
 }
    }

  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
 out:
  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
}
# 25557 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_pure_specifier (cp_parser* parser)
{
  cp_token *token;


  if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
    return global_trees[TI_ERROR_MARK];

  token = cp_lexer_peek_token (parser->lexer);

  if (token->type == CPP_EOF
      || token->type == CPP_PRAGMA_EOL)
    return global_trees[TI_ERROR_MARK];

  cp_lexer_consume_token (parser->lexer);


  if (token->keyword == RID_DEFAULT
      || token->keyword == RID_DELETE)
    {
      maybe_warn_cpp0x (CPP0X_DEFAULTED_DELETED);
      return token->u.value;
    }


  if (token->type != CPP_NUMBER || !(token->flags & (1 << 7)))
    {
      cp_parser_error (parser,
         "invalid pure specifier (only %<= 0%> is allowed)");
      cp_parser_skip_to_end_of_statement (parser);
      return global_trees[TI_ERROR_MARK];
    }
  if ((!processing_template_parmlist && scope_chain->x_processing_template_decl > template_class_depth (current_scope ())))
    {
      error_at (token->location, "templates may not be %<virtual%>");
      return global_trees[TI_ERROR_MARK];
    }

  return global_trees[TI_INTEGER_ZERO];
}
# 25606 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_constant_initializer (cp_parser* parser)
{

  if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
    return global_trees[TI_ERROR_MARK];






  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      cp_parser_error (parser,
         "a brace-enclosed initializer is not allowed here");

      matching_braces braces;
      braces.consume_open (parser);

      cp_parser_skip_to_closing_brace (parser);

      braces.require_close (parser);

      return global_trees[TI_ERROR_MARK];
    }

  return cp_parser_constant_expression (parser);
}
# 25654 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_base_clause (cp_parser* parser)
{
  tree bases = (tree) 
# 25657 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 25657 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;


  cp_parser_require (parser, CPP_COLON, RT_COLON);


  while (true)
    {
      cp_token *token;
      tree base;
      bool pack_expansion_p = false;


      base = cp_parser_base_specifier (parser);

      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
        {

          cp_lexer_consume_token (parser->lexer);

          pack_expansion_p = true;
        }


      if (base && base != global_trees[TI_ERROR_MARK])
 {
          if (pack_expansion_p)

            ((tree_check ((base), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25685, __FUNCTION__, (TREE_LIST)))->list.value) = make_pack_expansion (((tree_check ((base), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25685, __FUNCTION__, (TREE_LIST)))->list.value));

          if (!check_for_bare_parameter_packs (((tree_check ((base), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25687, __FUNCTION__, (TREE_LIST)))->list.value)))
            {
              ((contains_struct_check ((base), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25689, __FUNCTION__))->common.chain) = bases;
              bases = base;
            }
 }

      token = cp_lexer_peek_token (parser->lexer);

      if (token->type != CPP_COMMA)
 break;

      cp_lexer_consume_token (parser->lexer);
    }




  parser->scope = (tree) 
# 25705 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 25705 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
  parser->qualifying_scope = (tree) 
# 25706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 25706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  parser->object_scope = (tree) 
# 25707 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 25707 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;

  return nreverse (bases);
}
# 25726 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_base_specifier (cp_parser* parser)
{
  cp_token *token;
  bool done = false;
  bool virtual_p = false;
  bool duplicate_virtual_error_issued_p = false;
  bool duplicate_access_error_issued_p = false;
  bool class_scope_p, template_p;
  tree access = c_global_trees[CTI_NULL];
  tree type;


  while (!done)
    {

      token = cp_lexer_peek_token (parser->lexer);

      switch (token->keyword)
 {
 case RID_VIRTUAL:

   if (virtual_p && !duplicate_virtual_error_issued_p)
     {
       cp_parser_error (parser,
          "%<virtual%> specified more than once in base-specifier");
       duplicate_virtual_error_issued_p = true;
     }

   virtual_p = true;


   cp_lexer_consume_token (parser->lexer);

   break;

 case RID_PUBLIC:
 case RID_PROTECTED:
 case RID_PRIVATE:


   if (access != c_global_trees[CTI_NULL]
       && !duplicate_access_error_issued_p)
     {
       cp_parser_error (parser,
          "more than one access specifier in base-specifier");
       duplicate_access_error_issued_p = true;
     }

   access = ridpointers[(int) token->keyword];


   cp_lexer_consume_token (parser->lexer);

   break;

 default:
   done = true;
   break;
 }
    }



  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TYPENAME))
    {
      token = cp_lexer_peek_token (parser->lexer);
      if (!scope_chain->x_processing_template_decl)
 error_at (token->location,
    "keyword %<typename%> not allowed outside of templates");
      else
 error_at (token->location,
    "keyword %<typename%> not allowed in this context "
    "(the base class is implicitly a type)");
      cp_lexer_consume_token (parser->lexer);
    }


  cp_parser_global_scope_opt (parser, false);
# 25817 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  cp_parser_nested_name_specifier_opt (parser,
                                  true,
                                  true,
                      true,
                              true);


  class_scope_p = (parser->scope && (tree_code_type[(int) (((enum tree_code) (parser->scope)->base.code))] == tcc_type));
  template_p = class_scope_p && cp_parser_optional_template_keyword (parser);

  if (!parser->scope
      && cp_lexer_next_token_is_decltype (parser->lexer))

    type = cp_parser_decltype (parser);
  else
    {

      type = cp_parser_class_name (parser,
       class_scope_p,
       template_p,
       typename_type,
                              true,
                        false,
                          true);
      type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25841, __FUNCTION__))->typed.type);
    }

  if (type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  return finish_base_specifier (type, access, virtual_p);
}






static tree
cp_parser_save_noexcept (cp_parser *parser)
{
  cp_token *first = parser->lexer->next_token;

  cp_parser_cache_group (parser, CPP_CLOSE_PAREN, 0);
  cp_token *last = parser->lexer->next_token;



  tree expr = make_node (DEFERRED_PARSE);


  (((struct tree_deferred_parse *)(tree_check ((expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25868, __FUNCTION__, (DEFERRED_PARSE))))->tokens) = cp_token_cache_new (first, last);
  expr = build_tree_list (expr, (tree) 
# 25869 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 25869 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        );
  return expr;
}






static tree
cp_parser_late_noexcept_specifier (cp_parser *parser, tree default_arg)
{

  ((void)(!(((enum tree_code) (default_arg)->base.code) == DEFERRED_PARSE) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25882, __FUNCTION__), 0 : 0));

  push_unparsed_function_queues (parser);



  cp_token_cache *tokens = (((struct tree_deferred_parse *)(tree_check ((default_arg), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25888, __FUNCTION__, (DEFERRED_PARSE))))->tokens);
  cp_parser_push_lexer_for_tokens (parser, tokens);


  tree parsed_arg
    = cp_parser_noexcept_specification_opt (parser,
         CP_PARSER_FLAGS_NONE,
                               true,
                           
# 25896 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 25896 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
                         false);


  cp_parser_pop_lexer (parser);


  pop_unparsed_function_queues (parser);


  return parsed_arg;
}






static void
noexcept_override_late_checks (tree type, tree fndecl)
{
  tree binfo = ((tree_check3 ((type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25917, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))->type_non_common.maxval);
  tree base_binfo;

  if ((__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25920, __FUNCTION__, (TEMPLATE_DECL))))))))->result : fndecl)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25920, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (fndecl)->base.code) == FUNCTION_DECL || (((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25920, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 25920 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 25920 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25920, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25920, __FUNCTION__); &lt->u.fn; })->static_function))
    return;

  for (int i = 0; ((&(tree_check ((binfo), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25923, __FUNCTION__, (TREE_BINFO)))->binfo.base_binfos)->iterate ((i), &(base_binfo))); ++i)
    {
      tree basetype = ((contains_struct_check (((tree_check ((base_binfo), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25925, __FUNCTION__, (TREE_BINFO)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25925, __FUNCTION__))->typed.type);

      if (!(((tree_not_check2 ((basetype), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25927, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_2)))
 continue;

      tree fn = look_for_overrides_here (basetype, fndecl);
      if (fn)
 maybe_check_overriding_exception_spec (fndecl, fn);
    }
}
# 25950 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_noexcept_specification_opt (cp_parser* parser,
          cp_parser_flags flags,
          bool require_constexpr,
          bool* consumed_expr,
          bool return_cond)
{
  cp_token *token;
  const char *saved_message;


  token = cp_lexer_peek_token (parser->lexer);


  if (cp_parser_is_keyword (token, RID_NOEXCEPT))
    {
      tree expr;






      const bool literal_p
 = ((cp_lexer_nth_token_is (parser->lexer, 3, CPP_NUMBER)
     || cp_lexer_nth_token_is (parser->lexer, 3, CPP_KEYWORD))
    && cp_lexer_nth_token_is (parser->lexer, 4, CPP_CLOSE_PAREN));

      if (cp_lexer_nth_token_is (parser->lexer, 2, CPP_OPEN_PAREN)

   && !literal_p
   && at_class_scope_p ()



   && (flags & CP_PARSER_FLAGS_DELAY_NOEXCEPT)
   && ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25986, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined)
   && !(((enum tree_code) (scope_chain->class_type)->base.code) == RECORD_TYPE && ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name))) && ((tree_check ((((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__))->type_common.name)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 25987, __FUNCTION__, (IDENTIFIER_NODE)))->base.protected_flag)))
 return cp_parser_save_noexcept (parser);

      cp_lexer_consume_token (parser->lexer);

      if (cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)
 {
   matching_parens parens;
   parens.consume_open (parser);

   if (require_constexpr)
     {

       saved_message = parser->type_definition_forbidden_message;
       parser->type_definition_forbidden_message
       = "types may not be defined in an exception-specification";

       bool non_constant_p;
       expr
  = cp_parser_constant_expression (parser,
                              true,
       &non_constant_p);
       if (non_constant_p
    && !require_potential_rvalue_constant_expression (expr))
  {
    expr = (tree) 
# 26012 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 26012 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
    return_cond = true;
  }


       parser->type_definition_forbidden_message = saved_message;
     }
   else
     {
       expr = cp_parser_expression (parser);
       *consumed_expr = true;
     }

   parens.require_close (parser);
 }
      else
 {
   expr = global_trees[TI_BOOLEAN_TRUE];
   if (!require_constexpr)
     *consumed_expr = false;
 }



      if (!return_cond)
 return build_noexcept_spec (expr, tf_warning_or_error);
      else
 return expr;
    }
  else
    return (tree) 
# 26042 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 26042 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
}
# 26055 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_exception_specification_opt (cp_parser* parser,
           cp_parser_flags flags)
{
  cp_token *token;
  tree type_id_list;
  const char *saved_message;


  token = cp_lexer_peek_token (parser->lexer);


  type_id_list
    = cp_parser_noexcept_specification_opt (parser, flags,
                               true,
                           
# 26070 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 26070 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
                         false);
  if (type_id_list != (tree) 
# 26072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 26072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              )
    return type_id_list;


  if (!cp_parser_is_keyword (token, RID_THROW))
    return (tree) 
# 26077 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 26077 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  location_t loc = token->location;


  cp_lexer_consume_token (parser->lexer);


  matching_parens parens;
  parens.require_open (parser);


  token = cp_lexer_peek_token (parser->lexer);

  if (token->type != CPP_CLOSE_PAREN)
    {

      saved_message = parser->type_definition_forbidden_message;
      parser->type_definition_forbidden_message
 = "types may not be defined in an exception-specification";

      type_id_list = cp_parser_type_id_list (parser);

      parser->type_definition_forbidden_message = saved_message;

      if (cxx_dialect >= cxx17)
 {
   error_at (loc, "ISO C++17 does not allow dynamic exception "
    "specifications");
   type_id_list = (tree) 
# 26106 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 26106 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
 }
      else if (cxx_dialect >= cxx11)
 warning_at (loc, OPT_Wdeprecated,
      "dynamic exception specifications are deprecated in "
      "C++11");
    }



  else if (cxx_dialect >= cxx17)
    type_id_list = cp_global_trees[CPTI_NOEXCEPT_TRUE_SPEC];
  else
    type_id_list = cp_global_trees[CPTI_EMPTY_EXCEPT_SPEC];


  parens.require_close (parser);

  return type_id_list;
}
# 26136 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_type_id_list (cp_parser* parser)
{
  tree types = (tree) 
# 26139 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 26139 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;

  while (true)
    {
      cp_token *token;
      tree type;

      token = cp_lexer_peek_token (parser->lexer);


      type = cp_parser_type_id (parser);

      if (global_options.x_flag_concepts && type_uses_auto (type))
 {
   error_at (token->location,
      "invalid use of %<auto%> in exception-specification");
   type = global_trees[TI_ERROR_MARK];
 }

      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
        {

          cp_lexer_consume_token (parser->lexer);


          type = make_pack_expansion (type);
        }

      types = add_exception_specifier (types, type, 1);

      token = cp_lexer_peek_token (parser->lexer);

      if (token->type != CPP_COMMA)
 break;

      cp_lexer_consume_token (parser->lexer);
    }

  return nreverse (types);
}






static tree
cp_parser_try_block (cp_parser* parser)
{
  tree try_block;

  cp_parser_require_keyword (parser, RID_TRY, RT_TRY);
  if (parser->in_function_body
      && ((contains_struct_check (((tree_check2 (((((enum tree_code) (current_function_decl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26192, __FUNCTION__, (TEMPLATE_DECL))))))))->result : current_function_decl)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26192, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26192, __FUNCTION__))->decl_common.lang_flag_8)
      && cxx_dialect < cxx20)
    pedwarn (input_location, 0,
      "%<try%> in %<constexpr%> function only "
      "available with %<-std=c++20%> or %<-std=gnu++20%>");

  try_block = begin_try_block ();
  cp_parser_compound_statement (parser, 
# 26199 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 26199 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , BCS_TRY_BLOCK, false);
  finish_try_block (try_block);
  cp_parser_handler_seq (parser);
  finish_handler_sequence (try_block);

  return try_block;
}






static void
cp_parser_function_try_block (cp_parser* parser)
{
  tree compound_stmt;
  tree try_block;


  if (!cp_parser_require_keyword (parser, RID_TRY, RT_TRY))
    return;

  try_block = begin_function_try_block (&compound_stmt);

  cp_parser_ctor_initializer_opt_and_function_body
    (parser, true);

  finish_function_try_block (try_block);

  cp_parser_handler_seq (parser);

  finish_function_handler_sequence (try_block, compound_stmt);
}






static void
cp_parser_handler_seq (cp_parser* parser)
{
  while (true)
    {
      cp_token *token;


      cp_parser_handler (parser);

      token = cp_lexer_peek_token (parser->lexer);

      if (!cp_parser_is_keyword (token, RID_CATCH))
 break;
    }
}






static void
cp_parser_handler (cp_parser* parser)
{
  tree handler;
  tree declaration;

  cp_parser_require_keyword (parser, RID_CATCH, RT_CATCH);
  handler = begin_handler ();
  matching_parens parens;
  parens.require_open (parser);
  declaration = cp_parser_exception_declaration (parser);
  finish_handler_parms (declaration, handler);
  parens.require_close (parser);
  cp_parser_compound_statement (parser, 
# 26274 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 26274 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , BCS_NORMAL, false);
  finish_handler (handler);
}
# 26289 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_exception_declaration (cp_parser* parser)
{
  cp_decl_specifier_seq type_specifiers;
  cp_declarator *declarator;
  const char *saved_message;


  if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
    {

      cp_lexer_consume_token (parser->lexer);
      return (tree) 
# 26301 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 26301 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }


  saved_message = parser->type_definition_forbidden_message;
  parser->type_definition_forbidden_message
    = "types may not be defined in exception-declarations";


  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_NONE,
                       true,
                           false,
    &type_specifiers);

  if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))
    declarator = 
# 26316 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 26316 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
  else
    declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_EITHER,
           CP_PARSER_FLAGS_NONE,
                                   
# 26320 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 26320 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ,
                               
# 26321 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 26321 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ,
                        false,
                        false,
                        false);


  parser->type_definition_forbidden_message = saved_message;

  if (!type_specifiers.any_specifiers_p)
    return global_trees[TI_ERROR_MARK];

  return grokdeclarator (declarator, &type_specifiers, CATCHPARM, 1, 
# 26332 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                    __null
# 26332 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                        );
}
# 26342 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_throw_expression (cp_parser* parser)
{
  tree expression;
  cp_token* token;
  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_parser_require_keyword (parser, RID_THROW, RT_THROW);
  token = cp_lexer_peek_token (parser->lexer);


  if (token->type == CPP_COMMA
      || token->type == CPP_SEMICOLON
      || token->type == CPP_CLOSE_PAREN
      || token->type == CPP_CLOSE_SQUARE
      || token->type == CPP_CLOSE_BRACE
      || token->type == CPP_COLON)
    expression = (tree) 
# 26359 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 26359 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
  else
    expression = cp_parser_assignment_expression (parser);






  location_t combined_loc = make_location (start_loc, start_loc,
        parser->lexer);
  expression = build_throw (combined_loc, expression);

  return expression;
}
# 26383 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_yield_expression (cp_parser* parser)
{
  tree expr;

  cp_token *token = cp_lexer_peek_token (parser->lexer);
  location_t kw_loc = token->location;

  cp_parser_require_keyword (parser, RID_CO_YIELD, RT_CO_YIELD);

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      bool expr_non_constant_p;
      cp_lexer_set_source_position (parser->lexer);

      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
      expr = cp_parser_braced_list (parser, &expr_non_constant_p);
    }
  else
    expr = cp_parser_assignment_expression (parser);

  if (expr == global_trees[TI_ERROR_MARK])
    return expr;

  return finish_co_yield_expr (kw_loc, expr);
}
# 26421 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_asm_specification_opt (cp_parser* parser)
{
  cp_token *token;
  tree asm_specification;


  token = cp_lexer_peek_token (parser->lexer);


  if (!cp_parser_is_keyword (token, RID_ASM))
    return (tree) 
# 26432 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 26432 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;


  cp_lexer_consume_token (parser->lexer);

  matching_parens parens;
  parens.require_open (parser);


  asm_specification = cp_parser_string_literal (parser, false, false);


  parens.require_close (parser);

  return asm_specification;
}
# 26466 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_asm_operand_list (cp_parser* parser)
{
  tree asm_operands = (tree) 
# 26469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 26469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  bool invalid_operands = false;

  while (true)
    {
      tree string_literal;
      tree expression;
      tree name;

      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))
 {

   cp_lexer_consume_token (parser->lexer);

   name = cp_parser_identifier (parser);
   if (name != global_trees[TI_ERROR_MARK])
     name = build_string (((tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26485, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.len),
     ((const char *) (tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26486, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));

   cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);
 }
      else
 name = (tree) 
# 26491 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 26491 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;

      string_literal = cp_parser_string_literal (parser, false, false);


      matching_parens parens;
      parens.require_open (parser);

      expression = cp_parser_expression (parser);

      parens.require_close (parser);

      if (name == global_trees[TI_ERROR_MARK]
   || string_literal == global_trees[TI_ERROR_MARK]
   || expression == global_trees[TI_ERROR_MARK])
        invalid_operands = true;


      asm_operands = tree_cons (build_tree_list (name, string_literal),
    expression,
    asm_operands);


      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);
    }

  return invalid_operands ? global_trees[TI_ERROR_MARK] : nreverse (asm_operands);
}
# 26532 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_asm_clobber_list (cp_parser* parser)
{
  tree clobbers = (tree) 
# 26535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 26535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;

  while (true)
    {
      tree string_literal;


      string_literal = cp_parser_string_literal (parser, false, false);

      clobbers = tree_cons ((tree) 
# 26544 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 26544 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    , string_literal, clobbers);


      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);
    }

  return clobbers;
}
# 26565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_asm_label_list (cp_parser* parser)
{
  tree labels = (tree) 
# 26568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 26568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;

  while (true)
    {
      tree identifier, label, name;


      identifier = cp_parser_identifier (parser);
      if (!((identifier) == global_trees[TI_ERROR_MARK] || ((identifier) && ((contains_struct_check (((identifier)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26576, __FUNCTION__))->typed.type) == global_trees[TI_ERROR_MARK])))
        {
   label = lookup_label (identifier);
   if (((enum tree_code) (label)->base.code) == LABEL_DECL)
     {
       ((label)->base.used_flag) = 1;
       check_goto (label);
       name = build_string (((tree_check ((identifier), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26583, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.len),
       ((const char *) (tree_check ((identifier), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26584, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
       labels = tree_cons (name, label, labels);
     }
 }


      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);
    }

  return nreverse (labels);
}




static bool
cp_next_tokens_can_be_gnu_attribute_p (cp_parser *parser)
{
  return cp_nth_tokens_can_be_gnu_attribute_p (parser, 1);
}




static bool
cp_next_tokens_can_be_std_attribute_p (cp_parser *parser)
{
  return cp_nth_tokens_can_be_std_attribute_p (parser, 1);
}




static bool
cp_nth_tokens_can_be_std_attribute_p (cp_parser *parser, size_t n)
{
  cp_token *token = cp_lexer_peek_nth_token (parser->lexer, n);

  return (cxx_dialect >= cxx11
   && ((token->type == CPP_KEYWORD && token->keyword == RID_ALIGNAS)
       || (token->type == CPP_OPEN_SQUARE
    && (token = cp_lexer_peek_nth_token (parser->lexer, n + 1))
    && token->type == CPP_OPEN_SQUARE)));
}




static bool
cp_nth_tokens_can_be_gnu_attribute_p (cp_parser *parser, size_t n)
{
  cp_token *token = cp_lexer_peek_nth_token (parser->lexer, n);

  return token->type == CPP_KEYWORD && token->keyword == RID_ATTRIBUTE;
}




static bool
cp_next_tokens_can_be_attribute_p (cp_parser *parser)
{
  return (cp_next_tokens_can_be_gnu_attribute_p (parser)
   || cp_next_tokens_can_be_std_attribute_p (parser));
}




static bool
cp_nth_tokens_can_be_attribute_p (cp_parser *parser, size_t n)
{
  return (cp_nth_tokens_can_be_gnu_attribute_p (parser, n)
   || cp_nth_tokens_can_be_std_attribute_p (parser, n));
}




static tree
cp_parser_attributes_opt (cp_parser *parser)
{
  if (cp_next_tokens_can_be_gnu_attribute_p (parser))
    return cp_parser_gnu_attributes_opt (parser);
  return cp_parser_std_attribute_spec_seq (parser);
}
# 26684 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_gnu_attributes_opt (cp_parser* parser)
{
  tree attributes = (tree) 
# 26687 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 26687 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;

  temp_override<bool> cleanup
    (parser->auto_is_implicit_function_template_parm_p, false);

  while (true)
    {
      cp_token *token;
      tree attribute_list;
      bool ok = true;


      token = cp_lexer_peek_token (parser->lexer);

      if (token->keyword != RID_ATTRIBUTE)
 break;


      cp_lexer_consume_token (parser->lexer);

      matching_parens outer_parens;
      if (!outer_parens.require_open (parser))
 ok = false;
      matching_parens inner_parens;
      if (!inner_parens.require_open (parser))
 ok = false;


      token = cp_lexer_peek_token (parser->lexer);
      if (token->type != CPP_CLOSE_PAREN)

 attribute_list = cp_parser_gnu_attribute_list (parser);
      else


 attribute_list = 
# 26722 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 26722 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;


      if (!inner_parens.require_close (parser))
 ok = false;
      if (!outer_parens.require_close (parser))
 ok = false;
      if (!ok)
 cp_parser_skip_to_end_of_statement (parser);


      attributes = attr_chainon (attributes, attribute_list);
    }

  return attributes;
}
# 26756 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_gnu_attribute_list (cp_parser* parser, bool exactly_one )
{
  tree attribute_list = (tree) 
# 26759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 26759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
  bool save_translate_strings_p = parser->translate_strings_p;



  auto_suppress_location_wrappers sentinel;

  parser->translate_strings_p = false;
  while (true)
    {
      cp_token *token;
      tree identifier;
      tree attribute;



      token = cp_lexer_peek_token (parser->lexer);
      if (token->type == CPP_NAME
   || token->type == CPP_KEYWORD)
 {
   tree arguments = (tree) 
# 26779 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 26779 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;



   cp_token *id_token = cp_lexer_consume_token (parser->lexer);



   identifier = (token->type == CPP_KEYWORD)


     ? ridpointers[(int) token->keyword]
     : id_token->u.value;

   identifier = canonicalize_attr_name (identifier);
   attribute = build_tree_list (identifier, (tree) 
# 26794 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                           __null
# 26794 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                    );


   token = cp_lexer_peek_token (parser->lexer);

   if (token->type == CPP_OPEN_PAREN)
     {
       vec<tree, va_gc> *vec;
       int attr_flag = (attribute_takes_identifier_p (identifier)
          ? id_attr : normal_attr);
       vec = cp_parser_parenthesized_expression_list
      (parser, attr_flag, false,
                            false,
                         
# 26807 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 26807 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            );
       if (vec == 
# 26808 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 26808 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     )
  arguments = global_trees[TI_ERROR_MARK];
       else
  {
    arguments = build_tree_list_vec (vec);
    release_tree_vector (vec);
  }

       ((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26816, __FUNCTION__, (TREE_LIST)))->list.value) = arguments;
     }

   if (arguments != global_trees[TI_ERROR_MARK])
     {

       ((contains_struct_check ((attribute), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26822, __FUNCTION__))->common.chain) = attribute_list;
       attribute_list = attribute;
     }

   token = cp_lexer_peek_token (parser->lexer);
 }


      if (exactly_one || token->type != CPP_COMMA)
 break;


      cp_lexer_consume_token (parser->lexer);
    }
  parser->translate_strings_p = save_translate_strings_p;


  return nreverse (attribute_list);
}
# 26883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_std_attribute (cp_parser *parser, tree attr_ns)
{
  tree attribute, attr_id = (tree) 
# 26886 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 26886 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    , arguments;
  cp_token *token;

  temp_override<bool> cleanup
    (parser->auto_is_implicit_function_template_parm_p, false);



  token = cp_lexer_peek_token (parser->lexer);
  if (token->type == CPP_NAME)
    attr_id = token->u.value;
  else if (token->type == CPP_KEYWORD)
    attr_id = ridpointers[(int) token->keyword];
  else if (token->flags & (1 << 4))
    attr_id = (__builtin_constant_p (cpp_type2name (token->type, token->flags)) ? get_identifier_with_length ((cpp_type2name (token->type, token->flags)), strlen (cpp_type2name (token->type, token->flags))) : get_identifier (cpp_type2name (token->type, token->flags)));

  if (attr_id == (tree) 
# 26902 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 26902 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         )
    return (tree) 
# 26903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 26903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  cp_lexer_consume_token (parser->lexer);

  token = cp_lexer_peek_token (parser->lexer);
  if (token->type == CPP_SCOPE)
    {


      cp_lexer_consume_token (parser->lexer);
      if (attr_ns)
 error_at (token->location, "attribute using prefix used together "
       "with scoped attribute token");
      attr_ns = attr_id;

      token = cp_lexer_peek_token (parser->lexer);
      if (token->type == CPP_NAME)
 attr_id = token->u.value;
      else if (token->type == CPP_KEYWORD)
 attr_id = ridpointers[(int) token->keyword];
      else if (token->flags & (1 << 4))
 attr_id = (__builtin_constant_p (cpp_type2name (token->type, token->flags)) ? get_identifier_with_length ((cpp_type2name (token->type, token->flags)), strlen (cpp_type2name (token->type, token->flags))) : get_identifier (cpp_type2name (token->type, token->flags)));
      else
 {
   error_at (token->location,
      "expected an identifier for the attribute name");
   return global_trees[TI_ERROR_MARK];
 }
      cp_lexer_consume_token (parser->lexer);

      attr_ns = canonicalize_attr_name (attr_ns);
      attr_id = canonicalize_attr_name (attr_id);
      attribute = build_tree_list (build_tree_list (attr_ns, attr_id),
       (tree) 
# 26936 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 26936 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               );
      token = cp_lexer_peek_token (parser->lexer);
    }
  else if (attr_ns)
    {
      attr_ns = canonicalize_attr_name (attr_ns);
      attr_id = canonicalize_attr_name (attr_id);
      attribute = build_tree_list (build_tree_list (attr_ns, attr_id),
       (tree) 
# 26944 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 26944 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               );
    }
  else
    {
      attr_id = canonicalize_attr_name (attr_id);
      attribute = build_tree_list (build_tree_list ((tree) 
# 26949 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 26949 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                            , attr_id),
       (tree) 
# 26950 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 26950 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               );




      if (is_attribute_p ("deprecated", attr_id))
 ((tree_check ((((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26956, __FUNCTION__, (TREE_LIST)))->list.purpose)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26956, __FUNCTION__, (TREE_LIST)))->list.purpose) = cp_global_trees[CPTI_GNU_IDENTIFIER];

      else if (is_attribute_p ("fallthrough", attr_id))
 ((tree_check ((((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26959, __FUNCTION__, (TREE_LIST)))->list.purpose)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26959, __FUNCTION__, (TREE_LIST)))->list.purpose) = cp_global_trees[CPTI_GNU_IDENTIFIER];


      else if (is_attribute_p ("optimize_for_synchronized", attr_id))
 ((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26963, __FUNCTION__, (TREE_LIST)))->list.purpose)
   = (__builtin_constant_p ("transaction_callable") ? get_identifier_with_length (("transaction_callable"), strlen ("transaction_callable")) : get_identifier ("transaction_callable"));

      else if (tm_attr_to_mask (attr_id))
 ((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26967, __FUNCTION__, (TREE_LIST)))->list.purpose) = attr_id;
    }



  if (token->type != CPP_OPEN_PAREN)
    return attribute;

  {
    vec<tree, va_gc> *vec;
    int attr_flag = normal_attr;


    const attribute_spec *as
      = lookup_attribute_spec (((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 26981, __FUNCTION__, (TREE_LIST)))->list.purpose));
    if (as && as->max_length == 0)
      {
 error_at (token->location, "%qE attribute does not take any arguments",
    attr_id);
 cp_parser_skip_to_closing_parenthesis (parser,
                           true,
                         false,
                              true);
 return global_trees[TI_ERROR_MARK];
      }

    if (attr_ns == cp_global_trees[CPTI_GNU_IDENTIFIER]
 && attribute_takes_identifier_p (attr_id))

      attr_flag = id_attr;

    if (as == 
# 26998 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 26998 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
      {


 for (size_t n = cp_parser_skip_balanced_tokens (parser, 1) - 1; n; --n)
   cp_lexer_consume_token (parser->lexer);
 return attribute;
      }

    vec = cp_parser_parenthesized_expression_list
      (parser, attr_flag, false,
                             true,
                          
# 27010 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 27010 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             );
    if (vec == 
# 27011 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 27011 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  )
      arguments = global_trees[TI_ERROR_MARK];
    else
      {
 if (vec->is_empty ())

   error_at (token->location, "parentheses must be omitted if "
      "%qE attribute argument list is empty",
      attr_id);
 arguments = build_tree_list_vec (vec);
 release_tree_vector (vec);
      }

    if (arguments == global_trees[TI_ERROR_MARK])
      attribute = global_trees[TI_ERROR_MARK];
    else
      ((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 27027, __FUNCTION__, (TREE_LIST)))->list.value) = arguments;
  }

  return attribute;
}






static void
cp_parser_check_std_attribute (tree attributes, tree attribute)
{
  if (attributes)
    {
      tree name = get_attribute_name (attribute);
      if (is_attribute_p ("noreturn", name)
   && lookup_attribute ("noreturn", attributes))
 error ("attribute %<noreturn%> can appear at most once "
        "in an attribute-list");
      else if (is_attribute_p ("deprecated", name)
        && lookup_attribute ("deprecated", attributes))
 error ("attribute %<deprecated%> can appear at most once "
        "in an attribute-list");
      else if (is_attribute_p ("nodiscard", name)
        && lookup_attribute ("nodiscard", attributes))
 error ("attribute %<nodiscard%> can appear at most once "
        "in an attribute-list");
    }
}
# 27068 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_std_attribute_list (cp_parser *parser, tree attr_ns)
{
  tree attributes = (tree) 
# 27071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 27071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            , attribute = (tree) 
# 27071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 27071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   ;
  cp_token *token = 
# 27072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 27072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;

  while (true)
    {
      attribute = cp_parser_std_attribute (parser, attr_ns);
      if (attribute == global_trees[TI_ERROR_MARK])
 break;
      if (attribute != (tree) 
# 27079 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 27079 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               )
 {
   cp_parser_check_std_attribute (attributes, attribute);
   ((contains_struct_check ((attribute), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 27082, __FUNCTION__))->common.chain) = attributes;
   attributes = attribute;
 }
      token = cp_lexer_peek_token (parser->lexer);
      if (token->type == CPP_ELLIPSIS)
 {
   cp_lexer_consume_token (parser->lexer);
   if (attribute == (tree) 
# 27089 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 27089 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
     error_at (token->location,
        "expected attribute before %<...%>");
   else
     {
       tree pack = make_pack_expansion (((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 27094, __FUNCTION__, (TREE_LIST)))->list.value));
       if (pack == global_trees[TI_ERROR_MARK])
  return global_trees[TI_ERROR_MARK];
       ((tree_check ((attribute), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 27097, __FUNCTION__, (TREE_LIST)))->list.value) = pack;
     }
   token = cp_lexer_peek_token (parser->lexer);
 }
      if (token->type != CPP_COMMA)
 break;
      cp_lexer_consume_token (parser->lexer);
    }
  attributes = nreverse (attributes);
  return attributes;
}
# 27122 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_std_attribute_spec (cp_parser *parser)
{
  tree attributes = (tree) 
# 27125 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 27125 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  if (token->type == CPP_OPEN_SQUARE
      && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_OPEN_SQUARE)
    {
      tree attr_ns = (tree) 
# 27131 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 27131 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;

      cp_lexer_consume_token (parser->lexer);
      cp_lexer_consume_token (parser->lexer);

      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_USING))
 {
   token = cp_lexer_peek_nth_token (parser->lexer, 2);
   if (token->type == CPP_NAME)
     attr_ns = token->u.value;
   else if (token->type == CPP_KEYWORD)
     attr_ns = ridpointers[(int) token->keyword];
   else if (token->flags & (1 << 4))
     attr_ns = (__builtin_constant_p (cpp_type2name (token->type, token->flags)) ? get_identifier_with_length ((cpp_type2name (token->type, token->flags)), strlen (cpp_type2name (token->type, token->flags))) : get_identifier (cpp_type2name (token->type, token->flags)))
                         ;
   if (attr_ns
       && cp_lexer_nth_token_is (parser->lexer, 3, CPP_COLON))
     {
       if (cxx_dialect < cxx17)
  pedwarn (input_location, 0,
    "attribute using prefix only available "
    "with %<-std=c++17%> or %<-std=gnu++17%>");

       cp_lexer_consume_token (parser->lexer);
       cp_lexer_consume_token (parser->lexer);
       cp_lexer_consume_token (parser->lexer);
     }
   else
     attr_ns = (tree) 
# 27159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 27159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
 }

      attributes = cp_parser_std_attribute_list (parser, attr_ns);

      if (!cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE)
   || !cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE))
 cp_parser_skip_to_end_of_statement (parser);
      else


 maybe_warn_cpp0x (CPP0X_ATTRIBUTES);
    }
  else
    {
      tree alignas_expr;



      token = cp_lexer_peek_token (parser->lexer);

      if (token->type != CPP_KEYWORD
   || token->keyword != RID_ALIGNAS)
 return (tree) 
# 27182 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 27182 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;

      cp_lexer_consume_token (parser->lexer);
      maybe_warn_cpp0x (CPP0X_ATTRIBUTES);

      matching_parens parens;
      if (!parens.require_open (parser))
 return global_trees[TI_ERROR_MARK];

      cp_parser_parse_tentatively (parser);
      alignas_expr = cp_parser_type_id (parser);

      if (!cp_parser_parse_definitely (parser))
 {
   alignas_expr = cp_parser_assignment_expression (parser);
   if (alignas_expr == global_trees[TI_ERROR_MARK])
     cp_parser_skip_to_end_of_statement (parser);
   if (alignas_expr == (tree) 
# 27199 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
       
# 27200 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      || alignas_expr == global_trees[TI_ERROR_MARK])
     return alignas_expr;
 }

      alignas_expr = cxx_alignas_expr (alignas_expr);
      alignas_expr = build_tree_list ((tree) 
# 27205 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                     __null
# 27205 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                              , alignas_expr);


      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
 {
   cp_lexer_consume_token (parser->lexer);
   alignas_expr = make_pack_expansion (alignas_expr);
 }


      if (alignas_expr == global_trees[TI_ERROR_MARK])
 return global_trees[TI_ERROR_MARK];



      if (cp_parser_uncommitted_to_tentative_parse_p (parser)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN))
 cp_parser_commit_to_tentative_parse (parser);

      if (!parens.require_close (parser))
 return global_trees[TI_ERROR_MARK];



      attributes
 = build_tree_list (build_tree_list (cp_global_trees[CPTI_GNU_IDENTIFIER],
         cp_global_trees[CPTI_ALIGNED_IDENTIFIER]), alignas_expr);
    }

  return attributes;
}







static tree
cp_parser_std_attribute_spec_seq (cp_parser *parser)
{
  tree attr_specs = (tree) 
# 27246 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 27246 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  tree attr_last = (tree) 
# 27247 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 27247 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;



  auto_suppress_location_wrappers sentinel;

  while (true)
    {
      tree attr_spec = cp_parser_std_attribute_spec (parser);
      if (attr_spec == (tree) 
# 27256 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 27256 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               )
 break;
      if (attr_spec == global_trees[TI_ERROR_MARK])
 return global_trees[TI_ERROR_MARK];

      if (attr_last)
 ((contains_struct_check ((attr_last), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 27262, __FUNCTION__))->common.chain) = attr_spec;
      else
 attr_specs = attr_last = attr_spec;
      attr_last = tree_last (attr_last);
    }

  return attr_specs;
}




static size_t
cp_parser_skip_balanced_tokens (cp_parser *parser, size_t n)
{
  size_t orig_n = n;
  int nparens = 0, nbraces = 0, nsquares = 0;
  do
    switch (cp_lexer_peek_nth_token (parser->lexer, n++)->type)
      {
      case CPP_PRAGMA_EOL:
 if (!parser->lexer->in_pragma)
   break;

      case CPP_EOF:

 return orig_n;
      case CPP_OPEN_PAREN:
 ++nparens;
 break;
      case CPP_OPEN_BRACE:
 ++nbraces;
 break;
      case CPP_OPEN_SQUARE:
 ++nsquares;
 break;
      case CPP_CLOSE_PAREN:
 --nparens;
 break;
      case CPP_CLOSE_BRACE:
 --nbraces;
 break;
      case CPP_CLOSE_SQUARE:
 --nsquares;
 break;
      default:
 break;
      }
  while (nparens || nbraces || nsquares);
  return n;
}





static size_t
cp_parser_skip_gnu_attributes_opt (cp_parser *parser, size_t n)
{
  while (true)
    {
      if (!cp_lexer_nth_token_is_keyword (parser->lexer, n, RID_ATTRIBUTE)
   || !cp_lexer_nth_token_is (parser->lexer, n + 1, CPP_OPEN_PAREN)
   || !cp_lexer_nth_token_is (parser->lexer, n + 2, CPP_OPEN_PAREN))
 break;

      size_t n2 = cp_parser_skip_balanced_tokens (parser, n + 2);
      if (n2 == n + 2)
 break;
      if (!cp_lexer_nth_token_is (parser->lexer, n2, CPP_CLOSE_PAREN))
 break;
      n = n2 + 1;
    }
  return n;
}





static size_t
cp_parser_skip_std_attribute_spec_seq (cp_parser *parser, size_t n)
{
  while (true)
    {
      if (cp_lexer_nth_token_is (parser->lexer, n, CPP_OPEN_SQUARE)
   && cp_lexer_nth_token_is (parser->lexer, n + 1, CPP_OPEN_SQUARE))
 {
   size_t n2 = cp_parser_skip_balanced_tokens (parser, n + 1);
   if (n2 == n + 1)
     break;
   if (!cp_lexer_nth_token_is (parser->lexer, n2, CPP_CLOSE_SQUARE))
     break;
   n = n2 + 1;
 }
      else if (cp_lexer_nth_token_is_keyword (parser->lexer, n, RID_ALIGNAS)
        && cp_lexer_nth_token_is (parser->lexer, n + 1, CPP_OPEN_PAREN))
 {
   size_t n2 = cp_parser_skip_balanced_tokens (parser, n + 1);
   if (n2 == n + 1)
     break;
   n = n2;
 }
      else
 break;
    }
  return n;
}





static size_t
cp_parser_skip_attributes_opt (cp_parser *parser, size_t n)
{
  if (cp_nth_tokens_can_be_gnu_attribute_p (parser, n))
    return cp_parser_skip_gnu_attributes_opt (parser, n);
  return cp_parser_skip_std_attribute_spec_seq (parser, n);
}







static bool
cp_parser_extension_opt (cp_parser* parser, int* saved_pedantic)
{

  *saved_pedantic = global_options.x_pedantic;

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_EXTENSION))
    {

      cp_lexer_consume_token (parser->lexer);


      global_options.x_pedantic = 0;

      return true;
    }

  return false;
}
# 27418 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_label_declaration (cp_parser* parser)
{

  cp_parser_require_keyword (parser, RID_LABEL, RT_LABEL);

  while (true)
    {
      tree identifier;


      identifier = cp_parser_identifier (parser);

      if (identifier == global_trees[TI_ERROR_MARK])
 break;

      finish_label_decl (identifier);

      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
 break;

      cp_parser_require (parser, CPP_COMMA, RT_COMMA);
    }


  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
}




static tree
cp_parser_concept_definition (cp_parser *parser)
{
  ((void)(!(cp_lexer_next_token_is_keyword (parser->lexer, RID_CONCEPT)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 27452, __FUNCTION__), 0 : 0));
  cp_lexer_consume_token (parser->lexer);

  cp_expr id = cp_parser_identifier (parser);
  if (id == global_trees[TI_ERROR_MARK])
    {
      cp_parser_skip_to_end_of_statement (parser);
      cp_parser_consume_semicolon_at_end_of_statement (parser);
      return (tree) 
# 27460 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 27460 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
    {
      cp_parser_skip_to_end_of_statement (parser);
      cp_parser_consume_semicolon_at_end_of_statement (parser);
      return global_trees[TI_ERROR_MARK];
    }

  processing_constraint_expression_sentinel parsing_constraint;
  tree init = cp_parser_constraint_expression (parser);
  if (init == global_trees[TI_ERROR_MARK])
    cp_parser_skip_to_end_of_statement (parser);



  cp_parser_consume_semicolon_at_end_of_statement (parser);

  return finish_concept_definition (id, init);
}







static void
cp_parser_diagnose_ungrouped_constraint_plain (location_t loc)
{
  error_at (loc, "expression must be enclosed in parentheses");
}

static void
cp_parser_diagnose_ungrouped_constraint_rich (location_t loc)
{
  gcc_rich_location richloc (loc);
  richloc.add_fixit_insert_before ("(");
  richloc.add_fixit_insert_after (")");
  error_at (&richloc, "expression must be enclosed in parentheses");
}



enum primary_constraint_error
{
  pce_ok,
  pce_maybe_operator,
  pce_maybe_postfix
};




static primary_constraint_error
cp_parser_constraint_requires_parens (cp_parser *parser, bool lambda_p)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  switch (token->type)
    {
      default:
 return pce_ok;

      case CPP_EQ:
 {
# 27536 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_DELETE)
       || cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_DEFAULT))
     return pce_ok;

   __attribute__((fallthrough));
 }


      case CPP_PLUS:
      case CPP_MINUS:
      case CPP_MULT:
      case CPP_DIV:
      case CPP_MOD:

      case CPP_AND:
      case CPP_OR:
      case CPP_XOR:
      case CPP_RSHIFT:
      case CPP_LSHIFT:

      case CPP_EQ_EQ:
      case CPP_NOT_EQ:
      case CPP_LESS:
      case CPP_GREATER:
      case CPP_LESS_EQ:
      case CPP_GREATER_EQ:
      case CPP_SPACESHIP:

      case CPP_DOT_STAR:
      case CPP_DEREF_STAR:

      case CPP_PLUS_EQ:
      case CPP_MINUS_EQ:
      case CPP_MULT_EQ:
      case CPP_DIV_EQ:
      case CPP_MOD_EQ:
      case CPP_AND_EQ:
      case CPP_OR_EQ:
      case CPP_XOR_EQ:
      case CPP_RSHIFT_EQ:
      case CPP_LSHIFT_EQ:

      case CPP_QUERY:

 return pce_maybe_operator;

      case CPP_OPEN_PAREN:
 {






   if (lambda_p)
     return pce_ok;

   __attribute__((fallthrough));
 }
      case CPP_OPEN_SQUARE:
 {


   if (cp_lexer_nth_token_is (parser->lexer, 2, CPP_OPEN_SQUARE))
     return pce_ok;

   __attribute__((fallthrough));
 }
      case CPP_PLUS_PLUS:
      case CPP_MINUS_MINUS:
      case CPP_DOT:
      case CPP_DEREF:

 return pce_maybe_postfix;
   }
}




static bool
cp_parser_unary_constraint_requires_parens (cp_parser *parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  switch (token->type)
    {
      case CPP_NOT:
      case CPP_PLUS:
      case CPP_MINUS:
      case CPP_MULT:
      case CPP_COMPL:
      case CPP_PLUS_PLUS:
      case CPP_MINUS_MINUS:
 return true;

      case CPP_KEYWORD:
 {
   switch (token->keyword)
     {
       case RID_STATCAST:
       case RID_DYNCAST:
       case RID_REINTCAST:
       case RID_CONSTCAST:
       case RID_TYPEID:
       case RID_SIZEOF:
       case RID_ALIGNOF:
       case RID_NOEXCEPT:
       case RID_NEW:
       case RID_DELETE:
       case RID_THROW:
  return true;

      default:
  break;
   }
 }

      default:
 break;
    }

  return false;
}



static cp_expr
cp_parser_constraint_primary_expression (cp_parser *parser, bool lambda_p)
{


  if (cp_parser_unary_constraint_requires_parens (parser))
    {
      cp_expr e = cp_parser_assignment_expression (parser, 
# 27669 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                          __null
# 27669 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                              , false, false);
      cp_parser_diagnose_ungrouped_constraint_rich (e.get_location());
      return e;
    }

  cp_lexer_save_tokens (parser->lexer);
  cp_id_kind idk;
  location_t loc = input_location;
  cp_expr expr = cp_parser_primary_expression (parser,
                          false,
                       false,
                               false,
            &idk);
  expr.maybe_add_location_wrapper ();

  primary_constraint_error pce = pce_ok;
  if (expr != global_trees[TI_ERROR_MARK])
    {


      pce = cp_parser_constraint_requires_parens (parser, lambda_p);
    }
  if (pce == pce_ok)
    {
      cp_lexer_commit_tokens (parser->lexer);
      return finish_constraint_primary_expr (expr);
    }



  cp_lexer_rollback_tokens (parser->lexer);
  cp_parser_parse_tentatively (parser);
  if (pce == pce_maybe_operator)
    expr = cp_parser_assignment_expression (parser, 
# 27702 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 27702 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       , false, false);
  else
    expr = cp_parser_simple_cast_expression (parser);
  if (cp_parser_parse_definitely (parser))
    {
      cp_parser_diagnose_ungrouped_constraint_rich (expr.get_location());
      return expr;
    }



  cp_parser_diagnose_ungrouped_constraint_plain (loc);
  return global_trees[TI_ERROR_MARK];
}







static cp_expr
cp_parser_constraint_logical_and_expression (cp_parser *parser, bool lambda_p)
{
  cp_expr lhs = cp_parser_constraint_primary_expression (parser, lambda_p);
  while (cp_lexer_next_token_is (parser->lexer, CPP_AND_AND))
    {
      cp_token *op = cp_lexer_consume_token (parser->lexer);
      tree rhs = cp_parser_constraint_primary_expression (parser, lambda_p);
      lhs = finish_constraint_and_expr (op->location, lhs, rhs);
    }
  return lhs;
}







static cp_expr
cp_parser_constraint_logical_or_expression (cp_parser *parser, bool lambda_p)
{
  cp_expr lhs = cp_parser_constraint_logical_and_expression (parser, lambda_p);
  while (cp_lexer_next_token_is (parser->lexer, CPP_OR_OR))
    {
      cp_token *op = cp_lexer_consume_token (parser->lexer);
      cp_expr rhs = cp_parser_constraint_logical_and_expression (parser, lambda_p);
      lhs = finish_constraint_or_expr (op->location, lhs, rhs);
    }
  return lhs;
}




static tree
cp_parser_requires_clause_expression (cp_parser *parser, bool lambda_p)
{
  processing_constraint_expression_sentinel parsing_constraint;
  temp_override<int> ovr (scope_chain->x_processing_template_decl);
  if (!scope_chain->x_processing_template_decl)




    scope_chain->x_processing_template_decl = 1;
  cp_expr expr = cp_parser_constraint_logical_or_expression (parser, lambda_p);
  if (check_for_bare_parameter_packs (expr))
    expr = global_trees[TI_ERROR_MARK];
  return expr;
}
# 27784 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_constraint_expression (cp_parser *parser)
{
  processing_constraint_expression_sentinel parsing_constraint;
  temp_override<int> ovr (scope_chain->x_processing_template_decl);
  if (!scope_chain->x_processing_template_decl)

    scope_chain->x_processing_template_decl = 1;
  cp_expr expr = cp_parser_binary_expression (parser, false, true,
           PREC_NOT_OPERATOR, 
# 27793 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 27793 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 );
  if (check_for_bare_parameter_packs (expr))
    expr = global_trees[TI_ERROR_MARK];
  expr.maybe_add_location_wrapper ();
  return expr;
}
# 27810 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_requires_clause_opt (cp_parser *parser, bool lambda_p)
{
  cp_token *tok = cp_lexer_peek_token (parser->lexer);
  if (tok->keyword != RID_REQUIRES)
    {
      if (!global_options.x_flag_concepts && tok->type == CPP_NAME
   && tok->u.value == ridpointers[RID_REQUIRES])
 {
   error_at (cp_lexer_peek_token (parser->lexer)->location,
      "%<requires%> only available with "
      "%<-std=c++20%> or %<-fconcepts%>");

   cp_lexer_consume_token (parser->lexer);
   cp_parser_constraint_expression (parser);
 }
      return (tree) 
# 27826 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 27826 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  cp_token *tok2 = cp_lexer_peek_nth_token (parser->lexer, 2);
  if (tok2->type == CPP_OPEN_BRACE)
    {



      gcc_rich_location richloc (tok2->location);
      richloc.add_fixit_insert_after (tok->location, " requires");
      error_at (&richloc, "missing additional %<requires%> to start "
  "a requires-expression");


    }
  else
    cp_lexer_consume_token (parser->lexer);

  if (!global_options.x_flag_concepts_ts)
    return cp_parser_requires_clause_expression (parser, lambda_p);
  else
    return cp_parser_constraint_expression (parser);
}
# 27860 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_requires_expression (cp_parser *parser)
{
  ((void)(!(cp_lexer_next_token_is_keyword (parser->lexer, RID_REQUIRES)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 27863, __FUNCTION__), 0 : 0));
  location_t loc = cp_lexer_consume_token (parser->lexer)->location;


  tentative_firewall firewall (parser);


  cp_parser_commit_to_tentative_parse (parser);

  tree parms, reqs;
  {




    struct scope_sentinel
    {
      scope_sentinel ()
      {
 ++cp_unevaluated_operand;
 begin_scope (sk_block, (tree) 
# 27883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 27883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                );
      }

      ~scope_sentinel ()
      {
 pop_bindings_and_leave_scope ();
 --cp_unevaluated_operand;
      }
    } s;


    if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
      {
 parms = cp_parser_requirement_parameter_list (parser);
 if (parms == global_trees[TI_ERROR_MARK])
   return global_trees[TI_ERROR_MARK];
      }
    else
      parms = (tree) 
# 27901 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 27901 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;


    temp_override<int> ovr (scope_chain->x_processing_template_decl);
    if (!scope_chain->x_processing_template_decl)

      scope_chain->x_processing_template_decl = 1;
    reqs = cp_parser_requirement_body (parser);
    if (reqs == global_trees[TI_ERROR_MARK])
      return global_trees[TI_ERROR_MARK];
  }



  grokparms (parms, &parms);
  loc = make_location (loc, loc, parser->lexer);
  tree expr = finish_requires_expr (loc, parms, reqs);
  if (!scope_chain->x_processing_template_decl)
    {


      int saved_errorcount = (global_dc)->diagnostic_count[(int) (DK_ERROR)];
      tsubst_requires_expr (expr, (tree) 
# 27923 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 27923 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          , tf_warning_or_error, (tree) 
# 27923 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                 __null
# 27923 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                          );
      if ((global_dc)->diagnostic_count[(int) (DK_ERROR)] > saved_errorcount)
 return global_trees[TI_ERROR_MARK];
    }
  return expr;
}






static tree
cp_parser_requirement_parameter_list (cp_parser *parser)
{
  matching_parens parens;
  if (!parens.require_open (parser))
    return global_trees[TI_ERROR_MARK];

  tree parms = (cp_parser_parameter_declaration_clause
  (parser, CP_PARSER_FLAGS_TYPENAME_OPTIONAL));

  if (!parens.require_close (parser))
    return global_trees[TI_ERROR_MARK];

  return parms;
}





static tree
cp_parser_requirement_body (cp_parser *parser)
{
  matching_braces braces;
  if (!braces.require_open (parser))
    return global_trees[TI_ERROR_MARK];

  tree reqs = cp_parser_requirement_seq (parser);

  if (!braces.require_close (parser))
    return global_trees[TI_ERROR_MARK];

  return reqs;
}







static tree
cp_parser_requirement_seq (cp_parser *parser)
{
  tree result = (tree) 
# 27979 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 27979 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  do
    {
      tree req = cp_parser_requirement (parser);
      if (req != global_trees[TI_ERROR_MARK])
 result = tree_cons ((tree) 
# 27984 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 27984 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , req, result);
    } while (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_BRACE));


  if (!result)
    return global_trees[TI_ERROR_MARK];


  return nreverse (result);
}
# 28003 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_requirement (cp_parser *parser)
{
  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    return cp_parser_compound_requirement (parser);
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TYPENAME))
    return cp_parser_type_requirement (parser);
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_REQUIRES))
    return cp_parser_nested_requirement (parser);
  else
    return cp_parser_simple_requirement (parser);
}






static tree
cp_parser_simple_requirement (cp_parser *parser)
{
  location_t start = cp_lexer_peek_token (parser->lexer)->location;
  cp_expr expr = cp_parser_expression (parser, 
# 28025 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 28025 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  , false, false);
  if (expr == global_trees[TI_ERROR_MARK])
    cp_parser_skip_to_end_of_statement (parser);

  cp_parser_consume_semicolon_at_end_of_statement (parser);

  if (!expr || expr == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];



  if (expr.get_location() == ((location_t) 0))
    expr.set_location (start);

  return finish_simple_requirement (expr.get_location (), expr);
}
# 28051 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_type_requirement (cp_parser *parser)
{
  cp_token *start_tok = cp_lexer_consume_token (parser->lexer);
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;


  tree saved_scope = parser->scope;
  tree saved_object_scope = parser->object_scope;
  tree saved_qualifying_scope = parser->qualifying_scope;
  cp_parser_global_scope_opt (parser, false);
  cp_parser_nested_name_specifier_opt (parser,
                                                              true,
                                                              false,
                                                  true,
                                                          false);

  tree type;
  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
    {
      cp_lexer_consume_token (parser->lexer);
      type = cp_parser_template_id (parser,
                                                           true,
                                                         false,
                                                 none_type,
                                                       false);
      type = make_typename_type (parser->scope, type, typename_type,
                                              tf_error);
    }
  else
   type = cp_parser_type_name (parser, true);

  if (((enum tree_code) (type)->base.code) == TYPE_DECL)
    type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28084, __FUNCTION__))->typed.type);

  parser->scope = saved_scope;
  parser->object_scope = saved_object_scope;
  parser->qualifying_scope = saved_qualifying_scope;

  if (type == global_trees[TI_ERROR_MARK])
    cp_parser_skip_to_end_of_statement (parser);

  cp_parser_consume_semicolon_at_end_of_statement (parser);

  if (type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  loc = make_location (loc, start_tok->location, parser->lexer);
  return finish_type_requirement (loc, type);
}






static tree
cp_parser_compound_requirement (cp_parser *parser)
{

  matching_braces braces;
  if (!braces.require_open (parser))
    return global_trees[TI_ERROR_MARK];

  cp_token *expr_token = cp_lexer_peek_token (parser->lexer);

  tree expr = cp_parser_expression (parser, 
# 28117 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                           __null
# 28117 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                               , false, false);
  if (expr == global_trees[TI_ERROR_MARK])
    cp_parser_skip_to_closing_brace (parser);

  if (!braces.require_close (parser))
    {
      cp_parser_skip_to_end_of_statement (parser);
      cp_parser_consume_semicolon_at_end_of_statement (parser);
      return global_trees[TI_ERROR_MARK];
    }


  if (!expr || expr == global_trees[TI_ERROR_MARK])
    {
      cp_parser_skip_to_end_of_statement (parser);
      cp_parser_consume_semicolon_at_end_of_statement (parser);
      return global_trees[TI_ERROR_MARK];
    }


  bool noexcept_p = false;
  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_NOEXCEPT))
    {
      cp_lexer_consume_token (parser->lexer);
      noexcept_p = true;
    }


  tree type = (tree) 
# 28145 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 28145 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))
    {
      cp_lexer_consume_token (parser->lexer);
      cp_token *tok = cp_lexer_peek_token (parser->lexer);

      bool saved_result_type_constraint_p = parser->in_result_type_constraint_p;
      parser->in_result_type_constraint_p = true;



      type = cp_parser_trailing_type_id (parser);
      parser->in_result_type_constraint_p = saved_result_type_constraint_p;
      if (type == global_trees[TI_ERROR_MARK])
        return global_trees[TI_ERROR_MARK];

      location_t type_loc = make_location (tok->location, tok->location,
        parser->lexer);


      if (type_uses_auto (type))
 {
   if (!is_auto (type))
     {
       error_at (type_loc,
   "result type is not a plain type-constraint");
       cp_parser_consume_semicolon_at_end_of_statement (parser);
       return global_trees[TI_ERROR_MARK];
     }
 }
      else if (!global_options.x_flag_concepts_ts)

 error_at (type_loc,
    "return-type-requirement is not a type-constraint");
    }

  location_t loc = make_location (expr_token->location,
      braces.open_location (),
      parser->lexer);

  cp_parser_consume_semicolon_at_end_of_statement (parser);

  if (expr == global_trees[TI_ERROR_MARK] || type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  return finish_compound_requirement (loc, expr, type, noexcept_p);
}






static tree
cp_parser_nested_requirement (cp_parser *parser)
{
  ((void)(!(cp_lexer_next_token_is_keyword (parser->lexer, RID_REQUIRES)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28201, __FUNCTION__), 0 : 0));
  cp_token *tok = cp_lexer_consume_token (parser->lexer);
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;
  tree req = cp_parser_constraint_expression (parser);
  if (req == global_trees[TI_ERROR_MARK])
    cp_parser_skip_to_end_of_statement (parser);
  loc = make_location (loc, tok->location, parser->lexer);
  cp_parser_consume_semicolon_at_end_of_statement (parser);
  if (req == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
  return finish_nested_requirement (loc, req);
}






static inline LOOK_want
prefer_type_arg (tag_types tag_type)
{
  switch (tag_type)
    {
    case none_type: return LOOK_want::NORMAL;
    case scope_type: return LOOK_want::TYPE_NAMESPACE;
    default: return LOOK_want::TYPE;
    }
}
# 28265 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_lookup_name (cp_parser *parser, tree name,
         enum tag_types tag_type,
         bool is_template,
         bool is_namespace,
         bool check_dependency,
         tree *ambiguous_decls,
         location_t name_location)
{
  tree decl;
  tree object_type = parser->context->object_type;


  if (ambiguous_decls)
    *ambiguous_decls = (tree) 
# 28279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 28279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;




  parser->context->object_type = (tree) 
# 28284 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 28284 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;

  if (name == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];



  if (((enum tree_code) (name)->base.code) == TEMPLATE_ID_EXPR)
    return name;
  if ((((enum tree_code) (name)->base.code) == BASELINK))
    {
      ((void)(!(((enum tree_code) ((((struct tree_baselink*) (tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28295, __FUNCTION__, (BASELINK))))->functions))->base.code) == TEMPLATE_ID_EXPR) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28295, __FUNCTION__), 0 : 0))
                        ;
      return name;
    }




  if (((enum tree_code) (name)->base.code) == BIT_NOT_EXPR)
    {
      tree type;


      if (parser->scope)
 type = parser->scope;
      else if (object_type)
 type = object_type;
      else
 type = scope_chain->class_type;

      if (!type || !(((((enum tree_code) (type)->base.code)) == RECORD_TYPE || (((enum tree_code) (type)->base.code)) == UNION_TYPE) && ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28315, __FUNCTION__))->type_common.lang_flag_5)))
 return global_trees[TI_ERROR_MARK];


      if ((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref)))
 return lookup_destructor ((*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ref : &scope_chain->x_current_class_ref)), parser->scope, name,
      tf_warning_or_error);

      if (((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28323, __FUNCTION__))->type_with_lang_specific.lang_specific))->lazy_destructor))
 lazily_declare_fn (sfk_destructor, type);

      if (tree dtor = (get_class_binding_direct (type, cp_global_trees[CPTI_DTOR_IDENTIFIER])))
 return dtor;

      return global_trees[TI_ERROR_MARK];
    }




  ((void)(!(identifier_p (name)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28335, __FUNCTION__), 0 : 0));


  if (parser->scope)
    {
      bool dependent_p;

      if (parser->scope == global_trees[TI_ERROR_MARK])
 return global_trees[TI_ERROR_MARK];






      dependent_p = ((tree_code_type[(int) (((enum tree_code) (parser->scope)->base.code))] == tcc_type)
       && dependent_scope_p (parser->scope));
      if ((check_dependency || !(((((enum tree_code) (parser->scope)->base.code)) == RECORD_TYPE || (((enum tree_code) (parser->scope)->base.code)) == UNION_TYPE) && ((tree_class_check ((parser->scope), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28352, __FUNCTION__))->type_common.lang_flag_5)))
   && dependent_p)

 decl = global_trees[TI_ERROR_MARK];
      else
 {
   tree pushed_scope = (tree) 
# 28358 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 28358 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;






   if (dependent_p)
     pushed_scope = push_scope (parser->scope);





   decl = lookup_qualified_name (parser->scope, name,
     prefer_type_arg (tag_type),
                  true);
# 28390 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (tag_type == none_type
       && (((enum tree_code) (decl)->base.code) == TYPE_DECL && ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28391, __FUNCTION__))->decl_common.lang_flag_4))
       && comptypes ((((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28392, __FUNCTION__))->decl_minimal.context)), (parser->scope), 0))
     decl = lookup_qualified_name (parser->scope, cp_global_trees[CPTI_CTOR_IDENTIFIER],
       prefer_type_arg (tag_type),
                    true);


   if (((enum tree_code) (decl)->base.code) == OVERLOAD
       && !really_overloaded_fn (decl))
     decl = (((struct tree_overload*)(tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28400, __FUNCTION__, (OVERLOAD))))->function);

   if (pushed_scope)
     pop_scope (pushed_scope);
 }



      if (decl == global_trees[TI_ERROR_MARK] && (tree_code_type[(int) (((enum tree_code) (parser->scope)->base.code))] == tcc_type)
   && dependent_type_p (parser->scope))
 {
   if (tag_type)
     {
       tree type;




       type = make_typename_type (parser->scope, name, tag_type,
                   tf_error);
       if (type != global_trees[TI_ERROR_MARK])
  decl = ((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28421, __FUNCTION__))->type_common.name);
     }
   else if (is_template
     && (cp_parser_next_token_ends_template_argument_p (parser)
         || cp_lexer_next_token_is (parser->lexer,
        CPP_CLOSE_PAREN)))
     decl = make_unbound_class_template (parser->scope,
      name, (tree) 
# 28428 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 28428 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ,
                   tf_error);
   else
     decl = build_qualified_name ( (tree) 
# 28431 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 28431 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   ,
      parser->scope, name,
      is_template);
 }
      parser->qualifying_scope = parser->scope;
      parser->object_scope = (tree) 
# 28436 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 28436 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
    }
  else if (object_type)
    {


      if ((((((enum tree_code) (object_type)->base.code)) == RECORD_TYPE || (((enum tree_code) (object_type)->base.code)) == UNION_TYPE) && ((tree_class_check ((object_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28442, __FUNCTION__))->type_common.lang_flag_5)))




 decl = lookup_member (object_type,
         name,
                     0,
                         tag_type != none_type,
         tf_warning_or_error);
      else
 decl = (tree) 
# 28453 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 28453 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;

      if (!decl)


 decl = lookup_name (name, is_namespace ? LOOK_want::NAMESPACE




       : is_template ? LOOK_want::TYPE
       : prefer_type_arg (tag_type));
      parser->object_scope = object_type;
      parser->qualifying_scope = (tree) 
# 28466 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 28466 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;
    }
  else
    {
      decl = lookup_name (name, is_namespace ? LOOK_want::NAMESPACE
     : prefer_type_arg (tag_type));
      parser->qualifying_scope = (tree) 
# 28472 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 28472 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;
      parser->object_scope = (tree) 
# 28473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 28473 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
    }


  if (!decl || decl == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];


  if (is_template)
    decl = maybe_get_template_decl_from_type_decl (decl);


  if (((enum tree_code) (decl)->base.code) == TREE_LIST)
    {
      if (ambiguous_decls)
 *ambiguous_decls = decl;


      if (!cp_parser_simulate_error (parser))
 {
   error_at (name_location, "reference to %qD is ambiguous",
      name);
   print_candidates (decl);
 }
      return global_trees[TI_ERROR_MARK];
    }

  ((void)(!((tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration) || ((enum tree_code) (decl)->base.code) == OVERLOAD || ((enum tree_code) (decl)->base.code) == SCOPE_REF || ((enum tree_code) (decl)->base.code) == UNBOUND_CLASS_TEMPLATE || (((enum tree_code) (decl)->base.code) == BASELINK)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28500, __FUNCTION__), 0 : 0))



                            ;
# 28513 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if ((tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration))
    check_accessibility_of_qualified_id (decl, object_type, parser->scope,
      tf_warning_or_error);

  maybe_record_typedef_use (decl);

  return cp_expr (decl, name_location);
}





static tree
cp_parser_lookup_name_simple (cp_parser* parser, tree name, location_t location)
{
  return cp_parser_lookup_name (parser, name,
    none_type,
                    false,
                     false,
                         true,
                        
# 28534 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 28534 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ,
    location);
}
# 28545 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_maybe_treat_template_as_class (tree decl, bool tag_name_p)
{
# 28576 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (((((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28576, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 28576 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 28576 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28576, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL) && (((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28576, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL && ((contains_struct_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28576, __FUNCTION__, (TEMPLATE_DECL))))))))->result), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28576, __FUNCTION__))->decl_common.lang_flag_2))) && tag_name_p)
    return ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28577, __FUNCTION__, (TEMPLATE_DECL))))))))->result;

  return decl;
}





static bool
cp_parser_check_declarator_template_parameters (cp_parser* parser,
      cp_declarator *declarator,
      location_t declarator_location)
{
  switch (declarator->kind)
    {
    case cdk_id:
      {
 unsigned num_templates = 0;
 tree scope = declarator->u.id.qualifying_scope;
 bool template_id_p = false;

 if (scope)
   num_templates = num_template_headers_for_class (scope);
 else if (((enum tree_code) (declarator->u.id.unqualified_name)->base.code)
   == TEMPLATE_ID_EXPR)
   {


     ++num_templates;
     template_id_p = true;
   }

 return cp_parser_check_template_parameters
   (parser, num_templates, template_id_p, declarator_location,
    declarator);
      }

    case cdk_function:
    case cdk_array:
    case cdk_pointer:
    case cdk_reference:
    case cdk_ptrmem:
      return (cp_parser_check_declarator_template_parameters
       (parser, declarator->declarator, declarator_location));

    case cdk_decomp:
    case cdk_error:
      return true;

    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28628, __FUNCTION__));
    }
  return false;
}






static bool
cp_parser_check_template_parameters (cp_parser* parser,
         unsigned num_templates,
         bool template_id_p,
         location_t location,
         cp_declarator *declarator)
{


  if (parser->num_template_parameter_lists == num_templates)
    return true;


  if (!template_id_p
      && parser->num_template_parameter_lists == num_templates + 1)
    return true;

  if (cp_parser_simulate_error (parser))
    return false;





  if (parser->num_template_parameter_lists < num_templates)
    {
      if (declarator && !current_function_decl)
 error_at (location, "specializing member %<%T::%E%> "
    "requires %<template<>%> syntax",
    declarator->u.id.qualifying_scope,
    declarator->u.id.unqualified_name);
      else if (declarator)
 error_at (location, "invalid declaration of %<%T::%E%>",
    declarator->u.id.qualifying_scope,
    declarator->u.id.unqualified_name);
      else
 error_at (location, "too few template-parameter-lists");
      return false;
    }




  error_at (location, "too many template-parameter-lists");
  return false;
}
# 28692 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_global_scope_opt (cp_parser* parser, bool current_scope_valid_p)
{
  cp_token *token;


  token = cp_lexer_peek_token (parser->lexer);


  if (token->type == CPP_SCOPE)
    {

      cp_lexer_consume_token (parser->lexer);

      parser->scope = cp_global_trees[CPTI_GLOBAL];
      parser->qualifying_scope = cp_global_trees[CPTI_GLOBAL];
      parser->object_scope = (tree) 
# 28708 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 28708 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;

      return parser->scope;
    }
  else if (!current_scope_valid_p)
    {
      parser->scope = (tree) 
# 28714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 28714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
      parser->qualifying_scope = (tree) 
# 28715 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 28715 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;
      parser->object_scope = (tree) 
# 28716 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 28716 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
    }

  return (tree) 
# 28719 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 28719 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;
}






static bool
cp_parser_constructor_declarator_p (cp_parser *parser, cp_parser_flags flags,
        bool friend_p)
{
  bool constructor_p;
  bool outside_class_specifier_p;
  tree nested_name_specifier;
  cp_token *next_token;




  if (parser->in_function_body)
    return false;

  next_token = cp_lexer_peek_token (parser->lexer);
  if (next_token->type != CPP_NAME
      && next_token->type != CPP_SCOPE
      && next_token->type != ((enum cpp_ttype) (((enum cpp_ttype) (CPP_KEYWORD + 1)) + 1))


      && (next_token->type != ((enum cpp_ttype) (CPP_KEYWORD + 1)) || cxx_dialect >= cxx20))
    return false;



  cp_parser_parse_tentatively (parser);

  constructor_p = true;


  cp_parser_global_scope_opt (parser,
                                   false);

  nested_name_specifier
    = (cp_parser_nested_name_specifier_opt (parser,
                                false,
                                false,
                    false,
                            false));


  if (nested_name_specifier
      && ((enum tree_code) (nested_name_specifier)->base.code) == TYPENAME_TYPE)
    {
      tree s = resolve_typename_type (nested_name_specifier,
                             false);
      if (((enum tree_code) (s)->base.code) != TYPENAME_TYPE)
 nested_name_specifier = s;
    }

  outside_class_specifier_p = (!at_class_scope_p ()
          || !((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28779, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined)
          || friend_p);




  if (!nested_name_specifier && outside_class_specifier_p
      && cxx_dialect < cxx17)
    constructor_p = false;
  else if (nested_name_specifier == global_trees[TI_ERROR_MARK])
    constructor_p = false;



  if (constructor_p && nested_name_specifier
      && (((((enum tree_code) (nested_name_specifier)->base.code)) == RECORD_TYPE || (((enum tree_code) (nested_name_specifier)->base.code)) == UNION_TYPE) && ((tree_class_check ((nested_name_specifier), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28794, __FUNCTION__))->type_common.lang_flag_5)))
    {
      tree id = cp_parser_unqualified_id (parser,
                              false,
                              false,
                        true,
                      false);
      if (is_overloaded_fn (id))
 id = ((contains_struct_check ((get_first_fn (id)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28802, __FUNCTION__))->decl_minimal.name);
      if (!constructor_name_p (id, nested_name_specifier))
 constructor_p = false;
    }


  else if (constructor_p)
    {







      if (cxx_dialect >= cxx17)
 cp_parser_parse_tentatively (parser);

      tree type_decl;
      type_decl = cp_parser_class_name (parser,
                            false,
                            false,
     none_type,
                            false,
                      false,
                        false);

      if (cxx_dialect >= cxx17
   && !cp_parser_parse_definitely (parser))
 {
   type_decl = (tree) 
# 28832 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 28832 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
   tree tmpl = cp_parser_template_name (parser,
                                false,
                                  false,
                              false,
            none_type,
                             
# 28838 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 28838 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                );
   if (((((enum tree_code) (tmpl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28839, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 28839 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null 
# 28839 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28839, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL) && (((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28839, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL && ((contains_struct_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28839, __FUNCTION__, (TEMPLATE_DECL))))))))->result), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28839, __FUNCTION__))->decl_common.lang_flag_2)))
       || (((enum tree_code) (tmpl)->base.code) == TEMPLATE_DECL && (((contains_struct_check ((tmpl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28840, __FUNCTION__))->decl_common.lang_flag_0) && (((enum tree_code) (tmpl)->base.code) == CONST_DECL || ((enum tree_code) (tmpl)->base.code) == PARM_DECL || ((enum tree_code) (tmpl)->base.code) == TYPE_DECL || ((enum tree_code) (tmpl)->base.code) == TEMPLATE_DECL))))
                                                ;
   else
     cp_parser_simulate_error (parser);
 }






      constructor_p = (!cp_parser_error_occurred (parser)
         && (outside_class_specifier_p
      || type_decl == (tree) 
# 28853 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
      
# 28854 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     || type_decl == global_trees[TI_ERROR_MARK]
      || comptypes ((scope_chain->class_type), (((contains_struct_check ((type_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28856, __FUNCTION__))->typed.type)), 0)
                              ));
# 28868 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
      if (constructor_p
   && !cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
 constructor_p = false;

      if (constructor_p
   && cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_ELLIPSIS)



   && (!cp_lexer_next_token_is_decl_specifier_keyword (parser->lexer)






       || (cp_parser_allow_gnu_extensions_p (parser)
    && cp_next_tokens_can_be_gnu_attribute_p (parser)))

   && !cp_next_tokens_can_be_std_attribute_p (parser))
 {
   tree type;
   tree pushed_scope = (tree) 
# 28891 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 28891 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
   unsigned saved_num_template_parameter_lists;

   if (cp_next_tokens_can_be_gnu_attribute_p (parser))
     {
       unsigned int n = cp_parser_skip_gnu_attributes_opt (parser, 1);
       while (--n)
  cp_lexer_consume_token (parser->lexer);
     }



   if (scope_chain->class_type)
     type = (tree) 
# 28904 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 28904 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
   else if (type_decl)
     {
       type = ((contains_struct_check ((type_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 28907, __FUNCTION__))->typed.type);
       if (((enum tree_code) (type)->base.code) == TYPENAME_TYPE)
  {
    type = resolve_typename_type (type,
                         false);
    if (((enum tree_code) (type)->base.code) == TYPENAME_TYPE)
      {
        cp_parser_abort_tentative_parse (parser);
        return false;
      }
  }
       pushed_scope = push_scope (type);
     }



   saved_num_template_parameter_lists
     = parser->num_template_parameter_lists;
   parser->num_template_parameter_lists = 0;
# 28944 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   cp_decl_specifier_seq ctor_specs;
   clear_decl_specs (&ctor_specs);
   cp_parser_type_specifier (parser,
        (friend_p ? CP_PARSER_FLAGS_NONE
         : (flags & ~CP_PARSER_FLAGS_OPTIONAL)),
                       &ctor_specs,
                          true,
                                   
# 28951 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 28951 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ,
                            
# 28952 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 28952 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               );

   parser->num_template_parameter_lists
     = saved_num_template_parameter_lists;


   if (pushed_scope)
     pop_scope (pushed_scope);

   constructor_p = !cp_parser_error_occurred (parser);
 }
    }


  cp_parser_abort_tentative_parse (parser);

  return constructor_p;
}







static tree
cp_parser_function_definition_from_specifiers_and_declarator
  (cp_parser* parser,
   cp_decl_specifier_seq *decl_specifiers,
   tree attributes,
   const cp_declarator *declarator)
{
  tree fn;
  bool success_p;


  success_p = start_function (decl_specifiers, declarator, attributes);



  reset_specialization ();





  perform_deferred_access_checks (tf_warning_or_error);

  if (success_p)
    {
      cp_finalize_omp_declare_simd (parser, current_function_decl);
      parser->omp_declare_simd = 
# 29003 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 29003 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
      cp_finalize_oacc_routine (parser, current_function_decl, true);
      parser->oacc_routine = 
# 29005 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 29005 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
    }

  if (!success_p)
    {

      cp_parser_skip_to_end_of_block_or_statement (parser);
      fn = global_trees[TI_ERROR_MARK];
    }
  else if (((contains_struct_check ((current_function_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29014, __FUNCTION__))->decl_common.initial) != global_trees[TI_ERROR_MARK])
    {

      cp_parser_skip_to_end_of_block_or_statement (parser);
      fn = current_function_decl;
      current_function_decl = (tree) 
# 29019 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 29019 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;

      if (scope_chain->class_name)
 pop_nested_class ();
    }
  else
    {
      timevar_id_t tv;
      if (((tree_check ((current_function_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29027, __FUNCTION__, (FUNCTION_DECL)))->function_decl.declared_inline_flag))
        tv = TV_PARSE_INLINE;
      else
        tv = TV_PARSE_FUNC;
      timevar_push (tv);
      fn = cp_parser_function_definition_after_declarator (parser,
                     false);
      timevar_pop (tv);
    }

  return fn;
}







static tree
cp_parser_function_definition_after_declarator (cp_parser* parser,
      bool inline_p)
{
  tree fn;
  bool saved_in_unbraced_linkage_specification_p;
  bool saved_in_function_body;
  unsigned saved_num_template_parameter_lists;
  cp_token *token;
  bool fully_implicit_function_template_p
    = parser->fully_implicit_function_template_p;
  parser->fully_implicit_function_template_p = false;
  tree implicit_template_parms
    = parser->implicit_template_parms;
  parser->implicit_template_parms = 0;
  cp_binding_level* implicit_template_scope
    = parser->implicit_template_scope;
  parser->implicit_template_scope = 0;

  saved_in_function_body = parser->in_function_body;
  parser->in_function_body = true;



  token = cp_lexer_peek_token (parser->lexer);
  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_RETURN))
    {

      cp_lexer_consume_token (parser->lexer);


      cp_parser_identifier (parser);

      error_at (token->location,
  "named return values are no longer supported");

      while (true)
 {
   cp_token *token = cp_lexer_peek_token (parser->lexer);
   if (token->type == CPP_OPEN_BRACE
       || token->type == CPP_EOF
       || token->type == CPP_PRAGMA_EOL)
     break;
   cp_lexer_consume_token (parser->lexer);
 }
    }


  saved_in_unbraced_linkage_specification_p
    = parser->in_unbraced_linkage_specification_p;
  parser->in_unbraced_linkage_specification_p = false;


  saved_num_template_parameter_lists
    = parser->num_template_parameter_lists;
  parser->num_template_parameter_lists = 0;





  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRANSACTION_ATOMIC))
    cp_parser_function_transaction (parser, RID_TRANSACTION_ATOMIC);
  else if (cp_lexer_next_token_is_keyword (parser->lexer,
      RID_TRANSACTION_RELAXED))
    cp_parser_function_transaction (parser, RID_TRANSACTION_RELAXED);
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRY))
    cp_parser_function_try_block (parser);
  else
    cp_parser_ctor_initializer_opt_and_function_body
      (parser, false);


  fn = finish_function (inline_p);

  expand_or_defer_fn (fn);

  parser->in_unbraced_linkage_specification_p
    = saved_in_unbraced_linkage_specification_p;
  parser->num_template_parameter_lists
    = saved_num_template_parameter_lists;
  parser->in_function_body = saved_in_function_body;

  parser->fully_implicit_function_template_p
    = fully_implicit_function_template_p;
  parser->implicit_template_parms
    = implicit_template_parms;
  parser->implicit_template_scope
    = implicit_template_scope;

  if (parser->fully_implicit_function_template_p)
    finish_fully_implicit_template (parser, 0);

  return fn;
}



static void
cp_parser_template_declaration_after_parameters (cp_parser* parser,
       tree parameter_list,
       bool member_p)
{
  tree decl = (tree) 
# 29149 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 29149 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  bool friend_p = false;


  ++parser->num_template_parameter_lists;





  vec<deferred_access_check, va_gc> *checks = get_deferred_access_checks ();



  if (cp_parser_template_declaration_after_export (parser, member_p))
            ;
  else if (cxx_dialect >= cxx11
    && cp_lexer_next_token_is_keyword (parser->lexer, RID_USING))
    decl = cp_parser_alias_declaration (parser);
  else if (cxx_dialect >= cxx20
           && cp_lexer_next_token_is_keyword (parser->lexer, RID_CONCEPT)
           && !cp_lexer_nth_token_is_keyword (parser->lexer, 2, RID_BOOL))

    decl = cp_parser_concept_definition (parser);
  else
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);
      decl = cp_parser_single_declaration (parser,
        checks,
        member_p,
                                                                         false,
        &friend_p);



      if (member_p && !friend_p && decl)
 {
   if (((enum tree_code) (decl)->base.code) == TYPE_DECL)
     cp_parser_check_access_in_redeclaration (decl, token->location);

   decl = finish_member_template_decl (decl);
 }
      else if (friend_p && decl
        && (((enum tree_code) (decl)->base.code) == TYPE_DECL || (((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29192, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29192 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null 
# 29192 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29192, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL)))
 make_friend_class (scope_chain->class_type, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29193, __FUNCTION__))->typed.type),
                   true);
    }

  --parser->num_template_parameter_lists;

  pop_deferring_access_checks ();


  finish_template_decl (parameter_list);


  if (decl
      && (((enum tree_code) (decl)->base.code) == FUNCTION_DECL || (((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29206, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29206 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null 
# 29206 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29206, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL))
      && (!strncmp (((const char *) (tree_check ((((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29207, __FUNCTION__))->decl_minimal.name)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29207, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str), "operator\"\"", sizeof ("operator\"\"") - 1)))
    {
      bool ok = true;
      if (parameter_list == (tree) 
# 29210 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 29210 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    )
 ok = false;
      else
 {
   int num_parms = ((tree_check ((parameter_list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29214, __FUNCTION__, (TREE_VEC)))->base.u.length);
   if (num_parms == 1)
     {
       tree parm_list = (*((const_cast<tree *> (tree_vec_elt_check ((parameter_list), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29217, __FUNCTION__)))));
       tree parm = ((tree_check ((parm_list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29218, __FUNCTION__, (TREE_LIST)))->list.value);
       if (((enum tree_code) (parm)->base.code) != PARM_DECL)
  ok = false;
       else if (((((enum tree_code) (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type))->base.code) == TEMPLATE_TYPE_PARM || ((enum tree_code) (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type))->base.code) == TYPENAME_TYPE || ((enum tree_code) (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type))->base.code) == TYPEOF_TYPE || ((enum tree_code) (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type))->base.code) == BOUND_TEMPLATE_TEMPLATE_PARM || ((enum tree_code) (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type))->base.code) == DECLTYPE_TYPE) || (((((enum tree_code) (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29221, __FUNCTION__))->type_common.lang_flag_5)))
         && !(((tree_not_check2 (((tree_check ((((contains_struct_check ((parm), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29222, __FUNCTION__))->decl_common.initial)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29222, __FUNCTION__, (TEMPLATE_PARM_INDEX)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29222, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)))


                                             ;
       else if (((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29226, __FUNCTION__))->typed.type) != integer_types[itk_char]
         || !(((tree_not_check2 (((tree_check ((((contains_struct_check ((parm), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29227, __FUNCTION__))->decl_common.initial)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29227, __FUNCTION__, (TEMPLATE_PARM_INDEX)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29227, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)))
  ok = false;
     }
   else if (num_parms == 2 && cxx_dialect >= cxx14)
     {
       tree parm_type = (*((const_cast<tree *> (tree_vec_elt_check ((parameter_list), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29232, __FUNCTION__)))));
       tree type = ((tree_check ((parm_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29233, __FUNCTION__, (TREE_LIST)))->list.value);
       tree parm_list = (*((const_cast<tree *> (tree_vec_elt_check ((parameter_list), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29234, __FUNCTION__)))));
       tree parm = ((tree_check ((parm_list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29235, __FUNCTION__, (TREE_LIST)))->list.value);
       if (((enum tree_code) (parm)->base.code) != PARM_DECL
    || ((contains_struct_check ((parm), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29237, __FUNCTION__))->typed.type) != ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29237, __FUNCTION__))->typed.type)
    || !(((tree_not_check2 (((tree_check ((((contains_struct_check ((parm), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29238, __FUNCTION__))->decl_common.initial)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29238, __FUNCTION__, (TEMPLATE_PARM_INDEX)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29238, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)))
  ok = false;
       else

  pedwarn (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29242, __FUNCTION__))->decl_minimal.locus), OPT_Wpedantic,
    "ISO C++ did not adopt string literal operator templa"
    "tes taking an argument pack of characters");
     }
   else
     ok = false;
 }
      if (!ok)
 {
   if (cxx_dialect > cxx17)
     error_at (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29252, __FUNCTION__))->decl_minimal.locus), "literal operator "
        "template %qD has invalid parameter list; expected "
        "non-type template parameter pack %<<char...>%> or "
        "single non-type parameter of class type",
        decl);
   else
     error_at (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29258, __FUNCTION__))->decl_minimal.locus), "literal operator "
        "template %qD has invalid parameter list; expected "
        "non-type template parameter pack %<<char...>%>",
        decl);
 }
    }


  if (member_p && !friend_p && decl && !((((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29266, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29266 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null 
# 29266 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29266, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL) && (((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29266, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == TYPE_DECL && ((contains_struct_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29266, __FUNCTION__, (TEMPLATE_DECL))))))))->result), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29266, __FUNCTION__))->decl_common.lang_flag_2))))
    finish_member_declaration (decl);



  if (member_p && decl
      && (((enum tree_code) (decl)->base.code) == FUNCTION_DECL || (((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29272, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29272 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null 
# 29272 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29272, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)))
    vec_safe_push (parser->unparsed_queues->last ().funs_with_definitions, decl);
}




static bool
cp_parser_template_introduction (cp_parser* parser, bool member_p)
{
  cp_parser_parse_tentatively (parser);

  tree saved_scope = parser->scope;
  tree saved_object_scope = parser->object_scope;
  tree saved_qualifying_scope = parser->qualifying_scope;

  cp_token *start_token = cp_lexer_peek_token (parser->lexer);


  cp_parser_global_scope_opt (parser,
                                   false);

  cp_parser_nested_name_specifier_opt (parser,
                                  false,
                                  true,
                      false,
                              false);

  cp_token *token = cp_lexer_peek_token (parser->lexer);
  tree concept_name = cp_parser_identifier (parser);



  tree tmpl_decl = cp_parser_lookup_name_simple (parser, concept_name,
       token->location);
  parser->scope = saved_scope;
  parser->object_scope = saved_object_scope;
  parser->qualifying_scope = saved_qualifying_scope;

  if (concept_name == global_trees[TI_ERROR_MARK]
      || (seen_error () && !concept_definition_p (tmpl_decl)))
    cp_parser_simulate_error (parser);


  matching_braces braces;
  braces.require_open (parser);
  location_t open_loc = input_location;

  if (!cp_parser_parse_definitely (parser))
    return false;

  push_deferring_access_checks (dk_deferred);



  tree introduction_list = cp_parser_introduction_list (parser);


  if (!braces.require_close (parser))
    return true;


  int nargs = ((tree_check ((introduction_list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29334, __FUNCTION__, (TREE_VEC)))->base.u.length);
  if (nargs == 0)
    {

      return true;
    }

  if (tmpl_decl == global_trees[TI_ERROR_MARK])
    {
      cp_parser_name_lookup_error (parser, concept_name, tmpl_decl, NLE_NULL,
       token->location);
      return true;
    }


  location_t introduction_loc = make_location (open_loc,
            start_token->location,
            parser->lexer);
  tree parms = finish_template_introduction (tmpl_decl,
          introduction_list,
          introduction_loc);
  if (parms && parms != global_trees[TI_ERROR_MARK])
    {
      if (!global_options.x_flag_concepts_ts)
 pedwarn (introduction_loc, 0, "template-introductions"
   " are not part of C++20 concepts [-fconcepts-ts]");

      cp_parser_template_declaration_after_parameters (parser, parms,
             member_p);
      return true;
    }

  if (parms == (tree) 
# 29366 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 29366 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       )
    error_at (token->location, "no matching concept for template-introduction");

  return true;
}



static void
cp_parser_explicit_template_declaration (cp_parser* parser, bool member_p)
{
  tree parameter_list;
  bool need_lang_pop;
  location_t location = input_location;


  if (!cp_parser_require (parser, CPP_LESS, RT_LESS))
    return;
  if (at_class_scope_p () && current_function_decl)
    {



      error_at (location,
                "invalid declaration of member template in local class");
      cp_parser_skip_to_end_of_block_or_statement (parser);
      return;
    }



  if (scope_chain->lang_name == cp_global_trees[CPTI_LANG_NAME_C])
    {
      error_at (location, "template with C linkage");
      maybe_show_extern_c_location ();


      push_lang_context (cp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]);
      need_lang_pop = true;
    }
  else
    need_lang_pop = false;




  push_deferring_access_checks (dk_deferred);




  if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER))
    {
      cp_parser_error (parser, "invalid explicit specialization");
      begin_specialization ();
      parameter_list = (tree) 
# 29421 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 29421 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
    }
  else
    {

      parameter_list = cp_parser_template_parameter_list (parser);
    }


  cp_parser_skip_to_end_of_template_parameter_list (parser);


  if (global_options.x_flag_concepts)
  {
    tree reqs = get_shorthand_constraints (scope_chain->template_parms);
    if (tree treqs = cp_parser_requires_clause_opt (parser, false))
      reqs = combine_constraint_expressions (reqs, treqs);
    ((contains_struct_check (((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29438, __FUNCTION__, (TREE_LIST)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29438, __FUNCTION__))->typed.type) = reqs;
  }

  cp_parser_template_declaration_after_parameters (parser, parameter_list,
         member_p);



  if (need_lang_pop)
    pop_lang_context ();
}





static bool
cp_parser_template_declaration_after_export (cp_parser* parser, bool member_p)
{
  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
    {
      cp_lexer_consume_token (parser->lexer);
      cp_parser_explicit_template_declaration (parser, member_p);
      return true;
    }
  else if (global_options.x_flag_concepts)
    return cp_parser_template_introduction (parser, member_p);

  return false;
}





static void
cp_parser_perform_template_parameter_access_checks (vec<deferred_access_check, va_gc> *checks)
{
  ++processing_template_parmlist;
  perform_access_checks (checks, tf_warning_or_error);
  --processing_template_parmlist;
}
# 29488 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_single_declaration (cp_parser* parser,
         vec<deferred_access_check, va_gc> *checks,
         bool member_p,
                              bool explicit_specialization_p,
         bool* friend_p)
{
  int declares_class_or_enum;
  tree decl = (tree) 
# 29496 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 29496 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  cp_decl_specifier_seq decl_specifiers;
  bool function_definition_p = false;
  cp_token *decl_spec_token_start;



  ((void)(!(innermost_scope_kind () == sk_template_parms || innermost_scope_kind () == sk_template_spec) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29503, __FUNCTION__), 0 : 0))
                                                      ;


  push_deferring_access_checks (dk_deferred);



  decl_spec_token_start = cp_lexer_peek_token (parser->lexer);
  cp_parser_decl_specifier_seq (parser,
    (CP_PARSER_FLAGS_OPTIONAL
     | CP_PARSER_FLAGS_TYPENAME_OPTIONAL),
    &decl_specifiers,
    &declares_class_or_enum);
  if (friend_p)
    *friend_p = cp_parser_friend_p (&decl_specifiers);


  if (decl_spec_seq_has_spec_p (&decl_specifiers, ds_typedef))
    {
      error_at (decl_spec_token_start->location,
  "template declaration of %<typedef%>");
      decl = global_trees[TI_ERROR_MARK];
    }



  stop_deferring_access_checks ();


  if (declares_class_or_enum)
    {
      if (cp_parser_declares_only_class_p (parser)
   || (declares_class_or_enum & 2))
 {



   if (declares_class_or_enum == 1)
     associate_classtype_constraints (decl_specifiers.type);

   decl = shadow_tag (&decl_specifiers);
# 29554 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (friend_p && *friend_p
       && !decl
       && decl_specifiers.type
       && (tree_code_type[(int) (((enum tree_code) (decl_specifiers.type)->base.code))] == tcc_type))
     decl = decl_specifiers.type;

   if (decl && decl != global_trees[TI_ERROR_MARK])
     decl = ((tree_class_check ((decl), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29561, __FUNCTION__))->type_common.name);
   else
     decl = global_trees[TI_ERROR_MARK];


   cp_parser_perform_template_parameter_access_checks (checks);




   if (!cp_parser_declares_only_class_p (parser)
       && !seen_error ())
     {
       error_at (cp_lexer_peek_token (parser->lexer)->location,
   "a class template declaration must not declare "
   "anything else");
       cp_parser_skip_to_end_of_block_or_statement (parser);
       goto out;
     }
 }
    }


  if (!decl_specifiers.any_type_specifiers_p
      && cp_parser_parse_and_diagnose_invalid_type_name (parser))
    {



      decl = global_trees[TI_ERROR_MARK];
      goto out;
    }






  if (!decl
      && (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON)
   || decl_specifiers.type != global_trees[TI_ERROR_MARK]))
    {
      decl = cp_parser_init_declarator (parser,
     CP_PARSER_FLAGS_TYPENAME_OPTIONAL,
            &decl_specifiers,
            checks,
                                              true,
            member_p,
            declares_class_or_enum,
            &function_definition_p,
     
# 29611 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
    __null
# 29611 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        , 
# 29611 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 29611 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              , 
# 29611 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 29611 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    );





    if (decl
        && explicit_specialization_p
        && decl_specifiers.storage_class != sc_none)
      {
        error_at (decl_spec_token_start->location,
    "explicit template specialization cannot have a storage class");
        decl = global_trees[TI_ERROR_MARK];
      }

    if (decl && (((enum tree_code) (decl)->base.code) == VAR_DECL))
      check_template_variable (decl);
    }


  if (!function_definition_p
      && (decl == global_trees[TI_ERROR_MARK]
   || !cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON)))
    cp_parser_skip_to_end_of_block_or_statement (parser);

 out:
  pop_deferring_access_checks ();



  parser->scope = (tree) 
# 29641 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 29641 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
  parser->qualifying_scope = (tree) 
# 29642 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 29642 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  parser->object_scope = (tree) 
# 29643 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 29643 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;

  return decl;
}



static cp_expr
cp_parser_simple_cast_expression (cp_parser *parser)
{
  return cp_parser_cast_expression (parser, false,
                   false, false, 
# 29654 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 29654 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                );
}




static cp_expr
cp_parser_functional_cast (cp_parser* parser, tree type)
{
  vec<tree, va_gc> *vec;
  tree expression_list;
  cp_expr cast;
  bool nonconst_p;

  location_t start_loc = input_location;

  if (!type)
    type = global_trees[TI_ERROR_MARK];

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
    {
      cp_lexer_set_source_position (parser->lexer);
      maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);
      expression_list = cp_parser_braced_list (parser, &nonconst_p);
      (((tree_not_check2 (((tree_check ((expression_list), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29678, __FUNCTION__, (CONSTRUCTOR)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29678, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0)) = 1;
      if (((enum tree_code) (type)->base.code) == TYPE_DECL)
 type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29680, __FUNCTION__))->typed.type);

      cast = finish_compound_literal (type, expression_list,
          tf_warning_or_error, fcl_functional);





      location_t combined_loc = make_location (start_loc, start_loc,
            parser->lexer);
      cast.set_location (combined_loc);
      return cast;
   }


  vec = cp_parser_parenthesized_expression_list (parser, non_attr,
                  true,
                             true,
                          
# 29699 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 29699 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             );
  if (vec == 
# 29700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 29700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                )
    expression_list = global_trees[TI_ERROR_MARK];
  else
    {
      expression_list = build_tree_list_vec (vec);
      release_tree_vector (vec);
    }






  location_t combined_loc = make_location (start_loc, start_loc,
        parser->lexer);
  cast = build_functional_cast (combined_loc, type, expression_list,
                                tf_warning_or_error);



  if (((enum tree_code) (type)->base.code) == TYPE_DECL)
    type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29721, __FUNCTION__))->typed.type);
  if (cast != global_trees[TI_ERROR_MARK]
      && !cast_valid_in_integral_constant_expression_p (type)
      && cp_parser_non_integral_constant_expression (parser,
           NIC_CONSTRUCTOR))
    return global_trees[TI_ERROR_MARK];

  return cast;
}







static tree
cp_parser_save_member_function_body (cp_parser* parser,
         cp_decl_specifier_seq *decl_specifiers,
         cp_declarator *declarator,
         tree attributes)
{
  cp_token *first;
  cp_token *last;
  tree fn;
  bool function_try_block = false;


  fn = grokmethod (decl_specifiers, declarator, attributes);
  cp_finalize_omp_declare_simd (parser, fn);
  cp_finalize_oacc_routine (parser, fn, true);

  if (fn == global_trees[TI_ERROR_MARK])
    {

      if (cp_parser_token_starts_function_definition_p
   (cp_lexer_peek_token (parser->lexer)))
 cp_parser_skip_to_end_of_block_or_statement (parser);
      return global_trees[TI_ERROR_MARK];
    }


  cp_parser_save_default_args (parser, fn);



  first = parser->lexer->next_token;

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRANSACTION_RELAXED))
    cp_lexer_consume_token (parser->lexer);
  else if (cp_lexer_next_token_is_keyword (parser->lexer,
        RID_TRANSACTION_ATOMIC))
    {
      cp_lexer_consume_token (parser->lexer);

      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE)
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_OPEN_SQUARE)
   && (cp_lexer_nth_token_is (parser->lexer, 3, CPP_NAME)
       || cp_lexer_nth_token_is (parser->lexer, 3, CPP_KEYWORD))
   && cp_lexer_nth_token_is (parser->lexer, 4, CPP_CLOSE_SQUARE)
   && cp_lexer_nth_token_is (parser->lexer, 5, CPP_CLOSE_SQUARE))
 {
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
 }
      else
 while (cp_next_tokens_can_be_gnu_attribute_p (parser)
        && cp_lexer_nth_token_is (parser->lexer, 2, CPP_OPEN_PAREN))
   {
     cp_lexer_consume_token (parser->lexer);
     if (cp_parser_cache_group (parser, CPP_CLOSE_PAREN, 0))
       break;
   }
    }


  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRY))
    {
      cp_lexer_consume_token (parser->lexer);
      function_try_block = true;
    }

  if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))
    {
      cp_lexer_consume_token (parser->lexer);
      while (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_BRACE))
 {

   if (cp_parser_cache_group (parser, CPP_CLOSE_PAREN, 0))
     break;


   if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
     cp_lexer_consume_token (parser->lexer);
 }
    }
  cp_parser_cache_group (parser, CPP_CLOSE_BRACE, 0);

  if (function_try_block)
    while (cp_lexer_next_token_is_keyword (parser->lexer, RID_CATCH))
      cp_parser_cache_group (parser, CPP_CLOSE_BRACE, 0);
  last = parser->lexer->next_token;



  (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (fn)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29829, __FUNCTION__, (TEMPLATE_DECL))))))))->result : fn)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29829, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (fn)->base.code) == FUNCTION_DECL || (((enum tree_code) (fn)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29829, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29829 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null 
# 29829 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29829, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29829, __FUNCTION__); &lt->u.fn; })->u.pending_inline_info) = cp_token_cache_new (first, last);
  (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (fn)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29830, __FUNCTION__, (TEMPLATE_DECL))))))))->result : fn)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29830, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (fn)->base.code) == FUNCTION_DECL || (((enum tree_code) (fn)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29830, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29830 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null 
# 29830 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29830, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29830, __FUNCTION__); &lt->u.fn; })->pending_inline_p) = 1;



  (((contains_struct_check (((tree_check2 ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29834, __FUNCTION__, (VAR_DECL), (FUNCTION_DECL)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29834, __FUNCTION__))->decl_common.lang_specific) ->u.base.initialized_in_class) = 1;


  vec_safe_push (parser->unparsed_queues->last ().funs_with_definitions, fn);

  return fn;
}




static tree
cp_parser_save_nsdmi (cp_parser* parser)
{
  return cp_parser_cache_defarg (parser, true);
}





static tree
cp_parser_enclosed_template_argument_list (cp_parser* parser)
{
  tree arguments;
  tree saved_scope;
  tree saved_qualifying_scope;
  tree saved_object_scope;
  bool saved_greater_than_is_operator_p;






  saved_greater_than_is_operator_p
    = parser->greater_than_is_operator_p;
  parser->greater_than_is_operator_p = false;


  saved_scope = parser->scope;
  saved_qualifying_scope = parser->qualifying_scope;
  saved_object_scope = parser->object_scope;


  cp_evaluated ev;

  if (cp_lexer_next_token_is (parser->lexer, CPP_GREATER)
      || cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))
    arguments = (tree) 
# 29883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 29883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  else
    arguments = cp_parser_template_argument_list (parser);


  if (cp_lexer_next_token_is (parser->lexer, CPP_RSHIFT))
    {
      if (cxx_dialect != cxx98)
        {
# 29908 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   cp_token *token = cp_lexer_peek_token (parser->lexer);
          token->type = CPP_GREATER;
        }
      else if (!saved_greater_than_is_operator_p)
 {






   cp_token *token = cp_lexer_peek_token (parser->lexer);
   gcc_rich_location richloc (token->location);
   richloc.add_fixit_replace ("> >");
   error_at (&richloc, "%<>>%> should be %<> >%> "
      "within a nested template argument list");

   token->type = CPP_GREATER;
 }
      else
 {




   cp_token *token = cp_lexer_consume_token (parser->lexer);
   error_at (token->location,
      "spurious %<>>%>, use %<>%> to terminate "
      "a template argument list");
 }
    }
  else
    cp_parser_skip_to_end_of_template_parameter_list (parser);

  parser->greater_than_is_operator_p
    = saved_greater_than_is_operator_p;

  parser->scope = saved_scope;
  parser->qualifying_scope = saved_qualifying_scope;
  parser->object_scope = saved_object_scope;

  return arguments;
}





static void
cp_parser_late_parsing_for_member (cp_parser* parser, tree member_function)
{
  timevar_push (TV_PARSE_INMETH);


  if ((((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29962, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29962 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 29962 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29962, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL))
    member_function = ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29963, __FUNCTION__, (TEMPLATE_DECL))))))))->result;




  ((void)(!(parser->num_classes_being_defined == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29968, __FUNCTION__), 0 : 0));




  push_unparsed_function_queues (parser);


  maybe_begin_member_template_processing (member_function);



  if ((__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29980, __FUNCTION__, (TEMPLATE_DECL))))))))->result : member_function)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29980, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (member_function)->base.code) == FUNCTION_DECL || (((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29980, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29980 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 29980 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29980, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29980, __FUNCTION__); &lt->u.fn; })->pending_inline_p))
    {
      tree function_scope;
      cp_token_cache *tokens;


      tokens = (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29986, __FUNCTION__, (TEMPLATE_DECL))))))))->result : member_function)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29986, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (member_function)->base.code) == FUNCTION_DECL || (((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29986, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29986 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null 
# 29986 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29986, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29986, __FUNCTION__); &lt->u.fn; })->u.pending_inline_info);
      (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29987, __FUNCTION__, (TEMPLATE_DECL))))))))->result : member_function)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29987, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (member_function)->base.code) == FUNCTION_DECL || (((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29987, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29987 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 29987 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29987, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29987, __FUNCTION__); &lt->u.fn; })->u.pending_inline_info) = 
# 29987 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                  __null
# 29987 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                      ;
      (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29988, __FUNCTION__, (TEMPLATE_DECL))))))))->result : member_function)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29988, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (member_function)->base.code) == FUNCTION_DECL || (((enum tree_code) (member_function)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29988, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 29988 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 29988 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((member_function), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29988, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 29988, __FUNCTION__); &lt->u.fn; })->pending_inline_p) = 0;



      function_scope = current_function_decl;
      if (function_scope)
 push_function_context ();


      cp_parser_push_lexer_for_tokens (parser, tokens);



      start_preparsed_function (member_function, (tree) 
# 30001 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 30001 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                         ,
    1 | 2);


      if (scope_chain->x_processing_template_decl)
 push_deferring_access_checks (dk_no_check);


      if ((__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) ((contains_struct_check ((member_function), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__)))->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((member_function), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__, (TEMPLATE_DECL))))))))->result : (contains_struct_check ((member_function), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) ((contains_struct_check ((member_function), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__)))->base.code) == FUNCTION_DECL || (((enum tree_code) ((contains_struct_check ((member_function), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__)))->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((member_function), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 30009 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null 
# 30009 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((member_function), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30009, __FUNCTION__); &lt->u.fn; })->omp_declare_reduction_p))
 {
   parser->lexer->in_pragma = true;
   cp_parser_omp_declare_reduction_exprs (member_function, parser);
   finish_function ( true);
   cp_check_omp_declare_reduction (member_function);
 }
      else

 cp_parser_function_definition_after_declarator (parser,
                    true);

      if (scope_chain->x_processing_template_decl)
 pop_deferring_access_checks ();


      if (function_scope)
 pop_function_context ();
      cp_parser_pop_lexer (parser);
    }


  maybe_end_member_template_processing ();


  pop_unparsed_function_queues (parser);
  timevar_pop (TV_PARSE_INMETH);
}




static void
cp_parser_save_default_args (cp_parser* parser, tree decl)
{
  tree probe;

  for (probe = ((tree_check2 ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30046, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30046, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))->type_non_common.values);
       probe;
       probe = ((contains_struct_check ((probe), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30048, __FUNCTION__))->common.chain))
    if (((tree_check ((probe), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30049, __FUNCTION__, (TREE_LIST)))->list.purpose))
      {
 cp_default_arg_entry entry = {scope_chain->class_type, decl};
 vec_safe_push (parser->unparsed_queues->last ().funs_with_default_args, entry);
 break;
      }


  tree spec = ((tree_class_check (((tree_check2 ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30057, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30057, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30057, __FUNCTION__))->type_non_common.lang_1);
  if (((spec) && (((tree_check ((spec), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30058, __FUNCTION__, (TREE_LIST)))->list.purpose)) && (((enum tree_code) (((tree_check ((spec), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30058, __FUNCTION__, (TREE_LIST)))->list.purpose))->base.code) == DEFERRED_PARSE)))
    vec_safe_push (parser->unparsed_queues->last ().noexcepts, decl);
}






static tree
cp_parser_late_parse_one_default_arg (cp_parser *parser, tree decl,
          tree default_arg, tree parmtype)
{
  cp_token_cache *tokens;
  tree parsed_arg;
  bool dummy;

  if (default_arg == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];



  tokens = (((struct tree_deferred_parse *)(tree_check ((default_arg), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30080, __FUNCTION__, (DEFERRED_PARSE))))->tokens);
  cp_parser_push_lexer_for_tokens (parser, tokens);

  start_lambda_scope (decl);


  parsed_arg = cp_parser_initializer (parser, &dummy, &dummy);
  if ((((enum tree_code) (parsed_arg)->base.code) == CONSTRUCTOR && ((contains_struct_check ((parsed_arg), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30087, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE]))
    maybe_warn_cpp0x (CPP0X_INITIALIZER_LISTS);

  finish_lambda_scope ();

  if (parsed_arg == global_trees[TI_ERROR_MARK])
    cp_parser_skip_to_end_of_statement (parser);

  if (!scope_chain->x_processing_template_decl)
    {


      if (((enum tree_code) (decl)->base.code) == PARM_DECL)
 parsed_arg = check_default_argument (parmtype, parsed_arg,
          tf_warning_or_error);
      else if (maybe_reject_flexarray_init (decl, parsed_arg))
 parsed_arg = global_trees[TI_ERROR_MARK];
      else
 parsed_arg = digest_nsdmi_init (decl, parsed_arg, tf_warning_or_error);
    }




  if (!cp_lexer_next_token_is (parser->lexer, CPP_EOF))
    {
      if (((enum tree_code) (decl)->base.code) == PARM_DECL)
 cp_parser_error (parser, "expected %<,%>");
      else
 cp_parser_error (parser, "expected %<;%>");
    }


  cp_parser_pop_lexer (parser);

  return parsed_arg;
}




static void
cp_parser_late_parsing_nsdmi (cp_parser *parser, tree field)
{
  tree def;

  maybe_begin_member_template_processing (field);

  push_unparsed_function_queues (parser);
  def = cp_parser_late_parse_one_default_arg (parser, field,
           ((contains_struct_check ((field), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30137, __FUNCTION__))->decl_common.initial),
           (tree) 
# 30138 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 30138 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   );
  pop_unparsed_function_queues (parser);

  maybe_end_member_template_processing ();

  ((contains_struct_check ((field), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30143, __FUNCTION__))->decl_common.initial) = def;
}






static void
cp_parser_late_parsing_default_args (cp_parser *parser, tree fn)
{
  unsigned char saved_local_variables_forbidden_p;
  tree parm, parmdecl;





  push_unparsed_function_queues (parser);



  saved_local_variables_forbidden_p = parser->local_variables_forbidden_p;
  parser->local_variables_forbidden_p = ((1 << 0) | (1 << 1));

  push_defarg_context (fn);

  for (parm = ((tree_check2 ((((contains_struct_check ((fn), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30170, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30170, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))->type_non_common.values),
  parmdecl = ((tree_check ((fn), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30171, __FUNCTION__, (FUNCTION_DECL)))->function_decl.arguments);
       parm && parm != global_trees[TI_VOID_LIST_NODE];
       parm = ((contains_struct_check ((parm), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30173, __FUNCTION__))->common.chain),
  parmdecl = (((contains_struct_check (((contains_struct_check ((parmdecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30174, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30174, __FUNCTION__))->common.chain)))
    {
      tree default_arg = ((tree_check ((parm), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30176, __FUNCTION__, (TREE_LIST)))->list.purpose);
      tree parsed_arg;
      vec<tree, va_gc> *insts;
      tree copy;
      unsigned ix;

      if (!default_arg)
 continue;

      if (((enum tree_code) (default_arg)->base.code) != DEFERRED_PARSE)


 continue;

      parsed_arg
 = cp_parser_late_parse_one_default_arg (parser, parmdecl,
      default_arg,
      ((tree_check ((parm), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30193, __FUNCTION__, (TREE_LIST)))->list.value));
      ((tree_check ((parm), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30194, __FUNCTION__, (TREE_LIST)))->list.purpose) = parsed_arg;


      for (insts = (((struct tree_deferred_parse *)(tree_check ((default_arg), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30197, __FUNCTION__, (DEFERRED_PARSE))))->instantiations), ix = 0;
    vec_safe_iterate (insts, ix, &copy); ix++)
 ((tree_check ((copy), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30199, __FUNCTION__, (TREE_LIST)))->list.purpose) = parsed_arg;
    }

  pop_defarg_context ();


  check_default_args (fn);


  parser->local_variables_forbidden_p = saved_local_variables_forbidden_p;


  pop_unparsed_function_queues (parser);
}







static tree
cp_parser_sizeof_pack (cp_parser *parser)
{

  cp_lexer_consume_token (parser->lexer);
  maybe_warn_variadic_templates ();

  matching_parens parens;
  bool paren = cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN);
  if (paren)
    parens.consume_open (parser);
  else
    permerror (cp_lexer_peek_token (parser->lexer)->location,
        "%<sizeof...%> argument must be surrounded by parentheses");

  cp_token *token = cp_lexer_peek_token (parser->lexer);
  tree name = cp_parser_identifier (parser);
  if (name == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  parser->scope = (tree) 
# 30240 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 30240 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
  parser->qualifying_scope = (tree) 
# 30241 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 30241 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  parser->object_scope = (tree) 
# 30242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 30242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
  tree expr = cp_parser_lookup_name_simple (parser, name, token->location);
  if (expr == global_trees[TI_ERROR_MARK])
    cp_parser_name_lookup_error (parser, name, expr, NLE_NULL,
     token->location);
  if (((enum tree_code) (expr)->base.code) == TYPE_DECL || ((enum tree_code) (expr)->base.code) == TEMPLATE_DECL)
    expr = ((contains_struct_check ((expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30248, __FUNCTION__))->typed.type);
  else if (((enum tree_code) (expr)->base.code) == CONST_DECL)
    expr = ((contains_struct_check ((expr), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30250, __FUNCTION__))->decl_common.initial);
  expr = make_pack_expansion (expr);
  ((tree_not_check2 ((expr), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30252, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_1) = true;

  if (paren)
    parens.require_close (parser);

  return expr;
}






static tree
cp_parser_sizeof_operand (cp_parser* parser, enum rid keyword)
{
  tree expr = (tree) 
# 30268 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 30268 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  const char *saved_message;
  const char *saved_message_arg;
  bool saved_integral_constant_expression_p;
  bool saved_non_integral_constant_expression_p;



  if (keyword == RID_SIZEOF
      && cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
    return cp_parser_sizeof_pack (parser);



  saved_message = parser->type_definition_forbidden_message;
  saved_message_arg = parser->type_definition_forbidden_message_arg;
  parser->type_definition_forbidden_message
    = "types may not be defined in %qs expressions";
  parser->type_definition_forbidden_message_arg
    = ((const char *) (tree_check ((ridpointers[keyword]), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30287, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);



  saved_integral_constant_expression_p
    = parser->integral_constant_expression_p;
  saved_non_integral_constant_expression_p
    = parser->non_integral_constant_expression_p;
  parser->integral_constant_expression_p = false;


  ++cp_unevaluated_operand;
  ++c_inhibit_evaluation_warnings;


  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      tree type = (tree) 
# 30304 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 30304 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;

      tentative_firewall firewall (parser);



      cp_parser_parse_tentatively (parser);

      matching_parens parens;
      parens.consume_open (parser);





      if (cp_parser_compound_literal_p (parser))
 cp_parser_simulate_error (parser);
      else
 {
   bool saved_in_type_id_in_expr_p = parser->in_type_id_in_expr_p;
   parser->in_type_id_in_expr_p = true;

   type = cp_parser_type_id (parser);

   parens.require_close (parser);
   parser->in_type_id_in_expr_p = saved_in_type_id_in_expr_p;
 }


      if (cp_parser_parse_definitely (parser))
 expr = type;
      else
 {

   cp_parser_commit_to_tentative_parse (parser);

   expr = cp_parser_unary_expression (parser);
 }
    }
  else
    expr = cp_parser_unary_expression (parser);


  --cp_unevaluated_operand;
  --c_inhibit_evaluation_warnings;


  parser->type_definition_forbidden_message = saved_message;
  parser->type_definition_forbidden_message_arg = saved_message_arg;
  parser->integral_constant_expression_p
    = saved_integral_constant_expression_p;
  parser->non_integral_constant_expression_p
    = saved_non_integral_constant_expression_p;

  return expr;
}



static bool
cp_parser_declares_only_class_p (cp_parser *parser)
{


  return (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)
   || cp_lexer_next_token_is (parser->lexer, CPP_COMMA));
}




static void
cp_parser_set_storage_class (cp_parser *parser,
        cp_decl_specifier_seq *decl_specs,
        enum rid keyword,
        cp_token *token)
{
  cp_storage_class storage_class;

  if (parser->in_unbraced_linkage_specification_p)
    {
      error_at (token->location, "invalid use of %qD in linkage specification",
  ridpointers[keyword]);
      return;
    }
  else if (decl_specs->storage_class != sc_none)
    {
      decl_specs->conflicting_specifiers_p = true;
      return;
    }

  if ((keyword == RID_EXTERN || keyword == RID_STATIC)
      && decl_spec_seq_has_spec_p (decl_specs, ds_thread)
      && decl_specs->gnu_thread_keyword_p)
    {
      pedwarn (decl_specs->locations[ds_thread], 0,
  "%<__thread%> before %qD", ridpointers[keyword]);
    }

  switch (keyword)
    {
    case RID_AUTO:
      storage_class = sc_auto;
      break;
    case RID_REGISTER:
      storage_class = sc_register;
      break;
    case RID_STATIC:
      storage_class = sc_static;
      break;
    case RID_EXTERN:
      storage_class = sc_extern;
      break;
    case RID_MUTABLE:
      storage_class = sc_mutable;
      break;
    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30421, __FUNCTION__));
    }
  decl_specs->storage_class = storage_class;
  set_and_check_decl_spec_loc (decl_specs, ds_storage_class, token);





  if (decl_spec_seq_has_spec_p (decl_specs, ds_typedef))
    decl_specs->conflicting_specifiers_p = true;
}




static void
cp_parser_set_decl_spec_type (cp_decl_specifier_seq *decl_specs,
         tree type_spec,
         cp_token *token,
         bool type_definition_p)
{
  decl_specs->any_specifiers_p = true;






  if (decl_spec_seq_has_spec_p (decl_specs, ds_typedef)
      && !type_definition_p
      && (type_spec == global_trees[TI_BOOLEAN_TYPE]
   || type_spec == c_global_trees[CTI_CHAR8_TYPE]
   || type_spec == c_global_trees[CTI_CHAR16_TYPE]
   || type_spec == c_global_trees[CTI_CHAR32_TYPE]
   || type_spec == c_global_trees[CTI_WCHAR_TYPE])
      && (decl_specs->type
   || decl_spec_seq_has_spec_p (decl_specs, ds_long)
   || decl_spec_seq_has_spec_p (decl_specs, ds_short)
   || decl_spec_seq_has_spec_p (decl_specs, ds_unsigned)
   || decl_spec_seq_has_spec_p (decl_specs, ds_signed)))
    {
      decl_specs->redefined_builtin_type = type_spec;
      set_and_check_decl_spec_loc (decl_specs,
       ds_redefined_builtin_type_spec,
       token);
      if (!decl_specs->type)
 {
   decl_specs->type = type_spec;
   decl_specs->type_definition_p = false;
   set_and_check_decl_spec_loc (decl_specs,ds_type_spec, token);
 }
    }
  else if (decl_specs->type)
    decl_specs->multiple_types_p = true;
  else
    {
      decl_specs->type = type_spec;
      decl_specs->type_definition_p = type_definition_p;
      decl_specs->redefined_builtin_type = (tree) 
# 30480 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 30480 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   ;
      set_and_check_decl_spec_loc (decl_specs, ds_type_spec, token);
    }
}



static bool
token_is__thread (cp_token *token)
{
  ((void)(!(token->keyword == RID_THREAD) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30490, __FUNCTION__), 0 : 0));
  return id_equal (token->u.value, "__thread");
}
# 30506 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
set_and_check_decl_spec_loc (cp_decl_specifier_seq *decl_specs,
        cp_decl_spec ds, cp_token *token)
{
  ((void)(!(ds < ds_last) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30510, __FUNCTION__), 0 : 0));

  if (decl_specs == 
# 30512 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 30512 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       )
    return;

  location_t location = token->location;

  if (decl_specs->locations[ds] == 0)
    {
      decl_specs->locations[ds] = location;
      if (ds == ds_thread)
 decl_specs->gnu_thread_keyword_p = token_is__thread (token);
    }
  else
    {
      if (ds == ds_long)
 {
   if (decl_specs->locations[ds_long_long] != 0)
     error_at (location,
        "%<long long long%> is too long for GCC");
   else
     {
       decl_specs->locations[ds_long_long] = location;
       pedwarn_cxx98 (location,
        OPT_Wlong_long,
        "ISO C++ 1998 does not support %<long long%>");
     }
 }
      else if (ds == ds_thread)
 {
   bool gnu = token_is__thread (token);
   gcc_rich_location richloc (location);
   if (gnu != decl_specs->gnu_thread_keyword_p)
     {
       richloc.add_range (decl_specs->locations[ds_thread]);
       error_at (&richloc,
   "both %<__thread%> and %<thread_local%> specified");
     }
   else
     {
       richloc.add_fixit_remove ();
       error_at (&richloc, "duplicate %qD", token->u.value);
     }
 }
      else
 {
   static const char *const decl_spec_names[] = {
     "signed",
     "unsigned",
     "short",
     "long",
     "const",
     "volatile",
     "restrict",
     "inline",
     "virtual",
     "explicit",
     "friend",
     "typedef",
     "using",
     "constexpr",
     "__complex",
     "constinit",
     "consteval"
   };
   gcc_rich_location richloc (location);
   richloc.add_fixit_remove ();
   error_at (&richloc, "duplicate %qs", decl_spec_names[ds]);
 }
    }
}




bool
decl_spec_seq_has_spec_p (const cp_decl_specifier_seq * decl_specs,
     cp_decl_spec ds)
{
  ((void)(!(ds < ds_last) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30589, __FUNCTION__), 0 : 0));

  if (decl_specs == 
# 30591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 30591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       )
    return false;

  return decl_specs->locations[ds] != 0;
}




static bool
cp_parser_friend_p (const cp_decl_specifier_seq *decl_specifiers)
{
  return decl_spec_seq_has_spec_p (decl_specifiers, ds_friend);
}
# 30616 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_required_error (cp_parser *parser,
     required_token token_desc,
     bool keyword,
     location_t matching_location)
{
  if (cp_parser_simulate_error (parser))
    return;

  const char *gmsgid = 
# 30625 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 30625 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
  switch (token_desc)
    {
      case RT_NEW:
 gmsgid = "expected %<new%>";
 break;
      case RT_DELETE:
 gmsgid = "expected %<delete%>";
 break;
      case RT_RETURN:
 gmsgid = "expected %<return%>";
 break;
      case RT_WHILE:
 gmsgid = "expected %<while%>";
 break;
      case RT_EXTERN:
 gmsgid = "expected %<extern%>";
 break;
      case RT_STATIC_ASSERT:
 gmsgid = "expected %<static_assert%>";
 break;
      case RT_DECLTYPE:
 gmsgid = "expected %<decltype%>";
 break;
      case RT_OPERATOR:
 gmsgid = "expected %<operator%>";
 break;
      case RT_CLASS:
 gmsgid = "expected %<class%>";
 break;
      case RT_TEMPLATE:
 gmsgid = "expected %<template%>";
 break;
      case RT_NAMESPACE:
 gmsgid = "expected %<namespace%>";
 break;
      case RT_USING:
 gmsgid = "expected %<using%>";
 break;
      case RT_ASM:
 gmsgid = "expected %<asm%>";
 break;
      case RT_TRY:
 gmsgid = "expected %<try%>";
 break;
      case RT_CATCH:
 gmsgid = "expected %<catch%>";
 break;
      case RT_THROW:
 gmsgid = "expected %<throw%>";
 break;
      case RT_AUTO:
        gmsgid = "expected %<auto%>";
        break;
      case RT_LABEL:
 gmsgid = "expected %<__label__%>";
 break;
      case RT_AT_TRY:
 gmsgid = "expected %<@try%>";
 break;
      case RT_AT_SYNCHRONIZED:
 gmsgid = "expected %<@synchronized%>";
 break;
      case RT_AT_THROW:
 gmsgid = "expected %<@throw%>";
 break;
      case RT_TRANSACTION_ATOMIC:
 gmsgid = "expected %<__transaction_atomic%>";
 break;
      case RT_TRANSACTION_RELAXED:
 gmsgid = "expected %<__transaction_relaxed%>";
 break;
      case RT_CO_YIELD:
 gmsgid = "expected %<co_yield%>";
 break;
      default:
 break;
    }

  if (!gmsgid && !keyword)
    {
      switch (token_desc)
        {
   case RT_SEMICOLON:
     gmsgid = "expected %<;%>";
     break;
   case RT_OPEN_PAREN:
     gmsgid = "expected %<(%>";
     break;
   case RT_CLOSE_BRACE:
     gmsgid = "expected %<}%>";
     break;
   case RT_OPEN_BRACE:
     gmsgid = "expected %<{%>";
     break;
   case RT_CLOSE_SQUARE:
     gmsgid = "expected %<]%>";
     break;
   case RT_OPEN_SQUARE:
     gmsgid = "expected %<[%>";
     break;
   case RT_COMMA:
     gmsgid = "expected %<,%>";
     break;
   case RT_SCOPE:
     gmsgid = "expected %<::%>";
     break;
   case RT_LESS:
     gmsgid = "expected %<<%>";
     break;
   case RT_GREATER:
     gmsgid = "expected %<>%>";
     break;
   case RT_EQ:
     gmsgid = "expected %<=%>";
     break;
   case RT_ELLIPSIS:
     gmsgid = "expected %<...%>";
     break;
   case RT_MULT:
     gmsgid = "expected %<*%>";
     break;
   case RT_COMPL:
     gmsgid = "expected %<~%>";
     break;
   case RT_COLON:
     gmsgid = "expected %<:%>";
     break;
   case RT_COLON_SCOPE:
     gmsgid = "expected %<:%> or %<::%>";
     break;
   case RT_CLOSE_PAREN:
     gmsgid = "expected %<)%>";
     break;
   case RT_COMMA_CLOSE_PAREN:
     gmsgid = "expected %<,%> or %<)%>";
     break;
   case RT_PRAGMA_EOL:
     gmsgid = "expected end of line";
     break;
   case RT_NAME:
     gmsgid = "expected identifier";
     break;
   case RT_SELECT:
     gmsgid = "expected selection-statement";
     break;
   case RT_ITERATION:
     gmsgid = "expected iteration-statement";
     break;
   case RT_JUMP:
     gmsgid = "expected jump-statement";
     break;
   case RT_CLASS_KEY:
     gmsgid = "expected class-key";
     break;
   case RT_CLASS_TYPENAME_TEMPLATE:
     gmsgid = "expected %<class%>, %<typename%>, or %<template%>";
     break;
   default:
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 30784, __FUNCTION__));
 }
    }

  if (gmsgid)
    cp_parser_error_1 (parser, gmsgid, token_desc, matching_location);
}
# 30804 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_token *
cp_parser_require (cp_parser* parser,
     enum cpp_ttype type,
     required_token token_desc,
     location_t matching_location)
{
  if (cp_lexer_next_token_is (parser->lexer, type))
    return cp_lexer_consume_token (parser->lexer);
  else
    {

      if (!cp_parser_simulate_error (parser))
 cp_parser_required_error (parser, token_desc, false,
      matching_location);
      return 
# 30818 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 30818 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
    }
}





static void
cp_parser_skip_to_end_of_template_parameter_list (cp_parser* parser)
{

  unsigned level = 0;

  unsigned nesting_depth = 0;


  if (cp_parser_require (parser, CPP_GREATER, RT_GREATER))
    return;


  while (true)
    {

      switch (cp_lexer_peek_token (parser->lexer)->type)
 {
 case CPP_LESS:
   if (!nesting_depth)
     ++level;
   break;

        case CPP_RSHIFT:
          if (cxx_dialect == cxx98)


            break;
          else if (!nesting_depth && level-- == 0)
     {




       cp_lexer_consume_token (parser->lexer);
       return;
     }


   __attribute__((fallthrough));

 case CPP_GREATER:
   if (!nesting_depth && level-- == 0)
     {

       cp_lexer_consume_token (parser->lexer);
       return;
     }
   break;

 case CPP_OPEN_PAREN:
 case CPP_OPEN_SQUARE:
   ++nesting_depth;
   break;

 case CPP_CLOSE_PAREN:
 case CPP_CLOSE_SQUARE:
   if (nesting_depth-- == 0)
     return;
   break;

 case CPP_EOF:
 case CPP_PRAGMA_EOL:
 case CPP_SEMICOLON:
 case CPP_OPEN_BRACE:
 case CPP_CLOSE_BRACE:

   return;

 default:
   break;
 }


      cp_lexer_consume_token (parser->lexer);
    }
}







static cp_token *
cp_parser_require_keyword (cp_parser* parser,
      enum rid keyword,
      required_token token_desc)
{
  cp_token *token = cp_parser_require (parser, CPP_KEYWORD, token_desc);

  if (token && token->keyword != keyword)
    {
      cp_parser_required_error (parser, token_desc, true,
                                ((location_t) 0));
      return 
# 30921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 30921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
    }

  return token;
}




static bool
cp_parser_token_starts_function_definition_p (cp_token* token)
{
  return (
   token->type == CPP_OPEN_BRACE

   || token->type == CPP_COLON

   || token->keyword == RID_TRY


   || token->keyword == RID_TRANSACTION_ATOMIC
   || token->keyword == RID_TRANSACTION_RELAXED

   || token->keyword == RID_RETURN);
}




static bool
cp_parser_next_token_starts_class_definition_p (cp_parser *parser)
{
  cp_token *token;

  token = cp_lexer_peek_token (parser->lexer);
  return (token->type == CPP_OPEN_BRACE
   || (token->type == CPP_COLON
       && !parser->colon_doesnt_start_class_def_p));
}




static bool
cp_parser_next_token_ends_template_argument_p (cp_parser *parser)
{
  cp_token *token;

  token = cp_lexer_peek_token (parser->lexer);
  return (token->type == CPP_COMMA
          || token->type == CPP_GREATER
          || token->type == CPP_ELLIPSIS
   || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT));
}




static bool
cp_parser_nth_token_starts_template_argument_list_p (cp_parser * parser,
           size_t n)
{
  cp_token *token;

  token = cp_lexer_peek_nth_token (parser->lexer, n);
  if (token->type == CPP_LESS)
    return true;



  if (token->type == CPP_OPEN_SQUARE && token->flags & (1 << 1))
    {
      cp_token *token2;
      token2 = cp_lexer_peek_nth_token (parser->lexer, n+1);
      if (token2->type == CPP_COLON && !(token2->flags & (1 << 0)))
 return true;
    }
  return false;
}




static enum tag_types
cp_parser_token_is_class_key (cp_token* token)
{
  switch (token->keyword)
    {
    case RID_CLASS:
      return class_type;
    case RID_STRUCT:
      return record_type;
    case RID_UNION:
      return union_type;

    default:
      return none_type;
    }
}




static enum tag_types
cp_parser_token_is_type_parameter_key (cp_token* token)
{
  if (!token)
    return none_type;

  switch (token->keyword)
    {
    case RID_CLASS:
      return class_type;
    case RID_TYPENAME:
      return typename_type;

    default:
      return none_type;
    }
}



static void
cp_parser_maybe_warn_enum_key (cp_parser *parser, location_t key_loc,
          tree type, rid scoped_key)
{
  if (!global_options.x_warn_redundant_tags)
    return;

  tree type_decl = ((((contains_struct_check (((tree_class_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31051, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31051, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31051, __FUNCTION__))->common.chain)));
  tree name = ((contains_struct_check ((type_decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31052, __FUNCTION__))->decl_minimal.name);

  push_deferring_access_checks (dk_no_check);
  tree decl = cp_parser_lookup_name_simple (parser, name, input_location);
  pop_deferring_access_checks ();




  if (decl != type_decl)
    return;

  if (scoped_key != RID_CLASS
      && scoped_key != RID_STRUCT
      && scope_chain->lang_name != cp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]
      && scope_chain->old_namespace == cp_global_trees[CPTI_GLOBAL])
    {



      const line_map_ordinary *map = 
# 31072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 31072 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
      linemap_resolve_location (line_table, key_loc,
    LRK_MACRO_DEFINITION_LOCATION,
    &map);
      if (!MAIN_FILE_P (map))
 return;
    }

  gcc_rich_location richloc (key_loc);
  richloc.add_fixit_remove (key_loc);
  warning_at (&richloc, OPT_Wredundant_tags,
       "redundant enum-key %<enum%s%> in reference to %q#T",
       (scoped_key == RID_CLASS ? " class"
        : scoped_key == RID_STRUCT ? " struct" : ""), type);
}




class class_decl_loc_t
{
 public:

  class_decl_loc_t ()
    : locvec (), idxdef (), def_class_key ()
  {
    locvec.create (4);
  }
# 31108 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  class_decl_loc_t (tag_types class_key, bool key_redundant, bool def_p,
      location_t curloc = input_location)
    : locvec (), idxdef (def_p ? 0 : 
# 31110 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    (0x7fffffff * 2U + 1U)
# 31110 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            ), def_class_key (class_key)
  {
    locvec.create (4);
    class_key_loc_t ckl (current_function_decl, curloc, class_key,
    key_redundant);
    locvec.quick_push (ckl);
  }




  class_decl_loc_t (const class_decl_loc_t &rhs)
    : locvec (rhs.locvec.copy ()), idxdef (rhs.idxdef),
      def_class_key (rhs.def_class_key)
  { }

  class_decl_loc_t& operator= (const class_decl_loc_t &rhs)
  {
    if (this == &rhs)
      return *this;
    locvec.release ();
    locvec = rhs.locvec.copy ();
    idxdef = rhs.idxdef;
    def_class_key = rhs.def_class_key;
    return *this;
  }

  ~class_decl_loc_t ()
  {
    locvec.release ();
  }


  void diag_mismatched_tags (tree);


  static void diag_mismatched_tags ();



  static void add (cp_parser *, location_t, tag_types, tree, bool, bool);



  void add_or_diag_mismatched_tag (tree, tag_types, bool, bool);

private:

  tree function (unsigned i) const
  {
    return locvec[i].func;
  }

  location_t location (unsigned i) const
  {
    return locvec[i].loc;
  }

  bool key_redundant (unsigned i) const
  {
    return locvec[i].key_redundant;
  }

  tag_types class_key (unsigned i) const
  {
    return locvec[i].class_key;
  }


  bool def_p () const
  {
    return idxdef < locvec.length ();
  }



  struct class_key_loc_t
  {
    class_key_loc_t (tree func, location_t loc, tag_types key, bool redundant)
      : func (func), loc (loc), class_key (key), key_redundant (redundant)
    { }


    tree func;

    location_t loc;

    tag_types class_key;


    bool key_redundant;
  };

  vec <class_key_loc_t> locvec;

  unsigned idxdef;


  tag_types def_class_key;



  typedef hash_map<tree_decl_hash, class_decl_loc_t> class_to_loc_map_t;
  static class_to_loc_map_t class2loc;
};

class_decl_loc_t::class_to_loc_map_t class_decl_loc_t::class2loc;






static void
cp_parser_check_class_key (cp_parser *parser, location_t key_loc,
      tag_types class_key, tree type, bool def_p,
      bool decl_p)
{
  if (type == global_trees[TI_ERROR_MARK])
    return;

  bool seen_as_union = ((enum tree_code) (type)->base.code) == UNION_TYPE;
  if (seen_as_union != (class_key == union_type))
    {
      if (permerror (input_location, "%qs tag used in naming %q#T",
       class_key == union_type ? "union"
       : class_key == record_type ? "struct" : "class",
       type))
 inform (((contains_struct_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31238, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31238, __FUNCTION__))->decl_minimal.locus),
  "%q#T was previously declared here", type);
      return;
    }

  if (!global_options.x_warn_mismatched_tags && !global_options.x_warn_redundant_tags)
    return;



  if (class_key != class_type
      && class_key != record_type
      && class_key != union_type)
    return;

  class_decl_loc_t::add (parser, key_loc, class_key, type, def_p, decl_p);
}




static tree
specialization_of (tree type)
{
  tree ret = type;



  if (tree spec = most_specialized_partial_spec (type, tf_none))
    if (spec != global_trees[TI_ERROR_MARK])
      ret = ((contains_struct_check ((((tree_check ((spec), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31268, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31268, __FUNCTION__))->typed.type);

  if (ret == type)
    ret = ((((((tree_class_check (((type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) && !(((((tree_class_check (((type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) == 2)) ? ((contains_struct_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((((((contains_struct_check ((((tree_check ((((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((((struct tree_template_info*)(tree_check (((((tree_class_check (((tree_check3 (((type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__, (RECORD_TYPE), (UNION_TYPE), (QUAL_UNION_TYPE)))), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__))->type_non_common.lang_1))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__, (TEMPLATE_INFO))))->tmpl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__, (TEMPLATE_DECL))))))))->arguments), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__))->typed.type)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__, (TEMPLATE_DECL))))))))->result), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31271, __FUNCTION__))->typed.type) : (type));

  return ((((contains_struct_check (((tree_class_check ((((tree_class_check ((ret), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31273, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31273, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31273, __FUNCTION__))->common.chain)));
}
# 31283 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
void
class_decl_loc_t::add (cp_parser *parser, location_t key_loc,
         tag_types class_key, tree type, bool def_p, bool decl_p)
{
  tree type_decl = ((((contains_struct_check (((tree_class_check ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31287, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31287, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31287, __FUNCTION__))->common.chain)));
  tree name = ((contains_struct_check ((type_decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31288, __FUNCTION__))->decl_minimal.name);


  push_deferring_access_checks (dk_no_check);
  tree decl = cp_parser_lookup_name_simple (parser, name, input_location);
  pop_deferring_access_checks ();




  bool key_redundant = (!def_p && !decl_p
   && (decl == type_decl
       || ((enum tree_code) (decl)->base.code) == TEMPLATE_DECL
       || ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31301, __FUNCTION__))->type_with_lang_specific.lang_specific))->being_defined)));

  if (key_redundant
      && class_key != class_type
      && scope_chain->lang_name != cp_global_trees[CPTI_LANG_NAME_CPLUSPLUS]
      && scope_chain->old_namespace == cp_global_trees[CPTI_GLOBAL])
    {



      const line_map_ordinary *map = 
# 31311 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 31311 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
      linemap_resolve_location (line_table, key_loc,
    LRK_MACRO_DEFINITION_LOCATION,
    &map);
      if (!MAIN_FILE_P (map))
 key_redundant = false;
    }



  bool exist;
  class_decl_loc_t *rdl = &class2loc.get_or_insert (type_decl, &exist);
  if (!exist)
    {
      tree type = ((contains_struct_check ((type_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31325, __FUNCTION__))->typed.type);
      if (def_p || !(((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31326, __FUNCTION__))->type_common.size) != (tree) 
# 31326 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 31326 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ))
 {





   *rdl = class_decl_loc_t (class_key, false, def_p);
   if (((enum tree_code) (decl)->base.code) != TEMPLATE_DECL)
     return;
 }
      else
 {





   tag_types def_key
     = ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31345, __FUNCTION__))->type_with_lang_specific.lang_specific))->declared_class) ? class_type : record_type;
   location_t def_loc = ((contains_struct_check ((type_decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31346, __FUNCTION__))->decl_minimal.locus);
   *rdl = class_decl_loc_t (def_key, false, true, def_loc);
   exist = true;
 }
    }



  if (key_redundant)
    {
      gcc_rich_location richloc (key_loc);
      richloc.add_fixit_remove (key_loc);
      warning_at (&richloc, OPT_Wredundant_tags,
    "redundant class-key %qs in reference to %q#T",
    class_key == union_type ? "union"
    : class_key == record_type ? "struct" : "class",
    type);
    }

  if (!exist)

    return;

  if (rdl->idxdef != 
# 31369 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    (0x7fffffff * 2U + 1U) 
# 31369 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             && rdl->def_class_key == class_key)


    return;

  rdl->add_or_diag_mismatched_tag (type_decl, class_key, key_redundant,
       def_p);
}




void
class_decl_loc_t::add_or_diag_mismatched_tag (tree type_decl,
           tag_types class_key,
           bool redundant,
           bool def_p)
{



  if (def_class_key != class_key)
    def_class_key = none_type;



  if (def_p)
    idxdef = locvec.length ();


  class_key_loc_t ckl (current_function_decl, input_location, class_key,
         redundant);
  locvec.safe_push (ckl);

  if (idxdef == 
# 31403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               (0x7fffffff * 2U + 1U)
# 31403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       )
    return;




  diag_mismatched_tags (type_decl);
  if (idxdef)
    {
      class_decl_loc_t::class_key_loc_t ent = locvec[idxdef];
      locvec.release ();
      locvec.reserve (2);
      locvec.safe_push (ent);
      idxdef = 0;
    }
  else

    locvec.pop ();
}



void
class_decl_loc_t::diag_mismatched_tags (tree type_decl)
{
  if (!global_options.x_warn_mismatched_tags)
    return;


  const unsigned ndecls = locvec.length ();






  class_decl_loc_t *cdlguide = this;

  tree type = ((contains_struct_check ((type_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31441, __FUNCTION__))->typed.type);
  if ((((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31442, __FUNCTION__))->type_with_lang_specific.lang_specific))->use_template) == 1))
    {





      tree spec = specialization_of (type);
      cdlguide = class2loc.get (spec);
      ((void)(!(cdlguide != 
# 31451 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null
# 31451 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31451, __FUNCTION__), 0 : 0));
    }
  else
    {

      if (def_class_key != none_type)
 return;
    }


  const bool def_p = cdlguide->def_p ();




  const unsigned idxguide = def_p ? cdlguide->idxdef : 0;







  const tag_types xpect_key = cdlguide->class_key (idxguide);

  unsigned idx = 0;



  while (class_key (idx) == xpect_key)
    if (++idx == ndecls)
      return;


  tree save_func = current_function_decl;

  current_function_decl = function (idx);

  const char *xmatchkstr = xpect_key == record_type ? "class" : "struct";
  const char *xpectkstr = xpect_key == record_type ? "struct" : "class";

  location_t loc = location (idx);
  bool key_redundant_p = key_redundant (idx);
  auto_diagnostic_group d;



  if (warning_at (loc, OPT_Wmismatched_tags,
    "%qT declared with a mismatched class-key %qs",
    type_decl, xmatchkstr))
    {


      inform (loc,
       (key_redundant_p
        ? "remove the class-key or replace it with %qs"
        : "replace the class-key with %qs"),
       xpectkstr);



      inform (cdlguide->location (idxguide),
       (def_p
        ? "%qT defined as %qs here"
        : "%qT first declared as %qs here"),
       type_decl, xpectkstr);
    }


  for (unsigned i = idx + 1; i != ndecls; ++i)
    {
      tag_types clskey = class_key (i);


      if (clskey == xpect_key)
 continue;

      loc = location (i);
      key_redundant_p = key_redundant (i);

      current_function_decl = function (i);
      if (warning_at (loc, OPT_Wmismatched_tags,
        "%qT declared with a mismatched class-key %qs",
        type_decl, xmatchkstr))


 inform (loc,
  (key_redundant_p
   ? "remove the class-key or replace it with %qs"
   : "replace the class-key with %qs"),
  xpectkstr);
    }


  current_function_decl = save_func;
}





void
class_decl_loc_t::diag_mismatched_tags ()
{


  ((void)(!(global_options.x_warn_mismatched_tags || global_options.x_warn_redundant_tags || class2loc.is_empty ()) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31557, __FUNCTION__), 0 : 0))

                                ;



  temp_override<tree> cleanup (current_function_decl);

  if (global_options.x_warn_mismatched_tags)
    {

      typedef class_to_loc_map_t::iterator iter_t;
      for (iter_t it = class2loc.begin (); it != class2loc.end (); ++it)
 {
   tree type_decl = (*it).first;
   class_decl_loc_t &recloc = (*it).second;
   recloc.diag_mismatched_tags (type_decl);
 }
    }

  class2loc.empty ();
}






static void
cp_parser_check_access_in_redeclaration (tree decl, location_t location)
{
  if (!decl
      || (!(((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31589, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31589, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31589, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31589, __FUNCTION__))->type_common.lang_flag_5))
   && ((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31590, __FUNCTION__))->typed.type))->base.code) != ENUMERAL_TYPE))
    return;

  if ((((decl)->base.private_flag)
       != (scope_chain->access_specifier == global_trees[TI_PRIVATE]))
      || (((decl)->base.protected_flag)
   != (scope_chain->access_specifier == global_trees[TI_PROTECTED])))
    error_at (location, "%qD redeclared with different access", decl);
}





static bool
cp_parser_optional_template_keyword (cp_parser *parser)
{
  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TEMPLATE))
    {




      if (!scope_chain->x_processing_template_decl
   && global_options.x_pedantic && cxx_dialect == cxx98)
 {
   cp_token *token = cp_lexer_peek_token (parser->lexer);
   pedwarn (token->location, OPT_Wpedantic,
     "in C++98 %<template%> (as a disambiguator) is only "
     "allowed within templates");



   cp_lexer_purge_token (parser->lexer);
   return false;
 }
      else
 {

   cp_lexer_consume_token (parser->lexer);
   return true;
 }
    }
  return false;
}




static void
cp_parser_pre_parsed_nested_name_specifier (cp_parser *parser)
{
  struct tree_check *check_value;


  check_value = cp_lexer_consume_token (parser->lexer)->u.tree_check_value;

  parser->scope = saved_checks_value (check_value);
  parser->qualifying_scope = check_value->qualifying_scope;
  parser->object_scope = (tree) 
# 31649 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 31649 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
}




static bool
cp_parser_cache_group (cp_parser *parser,
         enum cpp_ttype end,
         unsigned depth)
{
  while (true)
    {
      cp_token *token = cp_lexer_peek_token (parser->lexer);


      if ((end == CPP_CLOSE_PAREN || depth == 0)
   && token->type == CPP_SEMICOLON)
 return true;

      if (token->type == CPP_EOF
   || (end != CPP_PRAGMA_EOL
       && token->type == CPP_PRAGMA_EOL))
 return true;
      if (token->type == CPP_CLOSE_BRACE && depth == 0)


 return true;


      cp_lexer_consume_token (parser->lexer);

      if (token->type == CPP_OPEN_BRACE)
 {
   cp_parser_cache_group (parser, CPP_CLOSE_BRACE, depth + 1);



   if (depth == 0)
     return false;
 }
      else if (token->type == CPP_OPEN_PAREN)
 {
   cp_parser_cache_group (parser, CPP_CLOSE_PAREN, depth + 1);
   if (depth == 0 && end == CPP_CLOSE_PAREN)
     return false;
 }
      else if (token->type == CPP_PRAGMA)
 cp_parser_cache_group (parser, CPP_PRAGMA_EOL, depth + 1);
      else if (token->type == end)
 return false;
    }
}
# 31711 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_cache_defarg (cp_parser *parser, bool nsdmi)
{
  unsigned depth = 0;
  int maybe_template_id = 0;
  cp_token *first_token;
  cp_token *token;
  tree default_argument;



  first_token = cp_lexer_peek_token (parser->lexer);
  if (first_token->type == CPP_OPEN_BRACE)
    {

      cp_parser_cache_group (parser, CPP_CLOSE_BRACE, 0);
      token = cp_lexer_peek_token (parser->lexer);
    }
  else while (true)
    {
      bool done = false;


      token = cp_lexer_peek_token (parser->lexer);

      switch (token->type)
 {


 case CPP_COMMA:
   if (depth == 0 && maybe_template_id)
     {
# 31751 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
       bool error = false;
       cp_token *peek;



       bool saved_italp = parser->in_template_argument_list_p;
       parser->in_template_argument_list_p = true;

       cp_parser_parse_tentatively (parser);

       if (nsdmi)
  {







    do
      {
        int ctor_dtor_or_conv_p;
        cp_lexer_consume_token (parser->lexer);
        cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
         CP_PARSER_FLAGS_NONE,
         &ctor_dtor_or_conv_p,
                             
# 31777 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 31777 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ,
                      true,
                      false,
                      false);
        peek = cp_lexer_peek_token (parser->lexer);
        if (cp_parser_error_occurred (parser))
   break;
      }
    while (peek->type == CPP_COMMA);



    error = (peek->type != CPP_EQ
      && peek->type != CPP_SEMICOLON);
  }
       else
  {
    cp_lexer_consume_token (parser->lexer);
    begin_scope (sk_function_parms, (tree) 
# 31795 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 31795 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            );
    tree t = cp_parser_parameter_declaration_list
       (parser, CP_PARSER_FLAGS_NONE);
    if (t == global_trees[TI_ERROR_MARK])
      error = true;
    pop_bindings_and_leave_scope ();
  }
       if (!cp_parser_error_occurred (parser) && !error)
  done = true;
       cp_parser_abort_tentative_parse (parser);

       parser->in_template_argument_list_p = saved_italp;
       break;
     }

 case CPP_CLOSE_PAREN:
 case CPP_ELLIPSIS:



 case CPP_SEMICOLON:
 case CPP_CLOSE_BRACE:
 case CPP_CLOSE_SQUARE:
   if (depth == 0

       && token->type != CPP_ELLIPSIS)
     done = true;

   else if (token->type == CPP_CLOSE_PAREN
     || token->type == CPP_CLOSE_BRACE
     || token->type == CPP_CLOSE_SQUARE)
     --depth;
   break;

 case CPP_OPEN_PAREN:
 case CPP_OPEN_SQUARE:
 case CPP_OPEN_BRACE:
   ++depth;
   break;

 case CPP_LESS:
   if (depth == 0)


     ++maybe_template_id;
   break;

 case CPP_RSHIFT:
   if (cxx_dialect == cxx98)
     break;



   __attribute__((fallthrough));

 case CPP_GREATER:
   if (depth == 0)
     {




       maybe_template_id -= 1 + (token->type == CPP_RSHIFT);
       if (maybe_template_id < 0)
  maybe_template_id = 0;
     }
   break;


 case CPP_EOF:
 case CPP_PRAGMA_EOL:
   error_at (token->location, "file ends in default argument");
   return global_trees[TI_ERROR_MARK];

 case CPP_NAME:
 case CPP_SCOPE:







   break;

 default:
   break;
 }


      if (done)
 break;


      token = cp_lexer_consume_token (parser->lexer);
    }



  default_argument = make_node (DEFERRED_PARSE);
  (((struct tree_deferred_parse *)(tree_check ((default_argument), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31895, __FUNCTION__, (DEFERRED_PARSE))))->tokens)
    = cp_token_cache_new (first_token, token);
  (((struct tree_deferred_parse *)(tree_check ((default_argument), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31897, __FUNCTION__, (DEFERRED_PARSE))))->instantiations) = 
# 31897 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
# 31897 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  ;

  return default_argument;
}



location_t
defparse_location (tree default_argument)
{
  cp_token_cache *tokens = (((struct tree_deferred_parse *)(tree_check ((default_argument), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31907, __FUNCTION__, (DEFERRED_PARSE))))->tokens);
  location_t start = tokens->first->location;
  location_t end = tokens->last->location;
  return make_location (start, start, end);
}





static void
cp_parser_parse_tentatively (cp_parser* parser)
{

  parser->context = cp_parser_context_new (parser->context);

  cp_lexer_save_tokens (parser->lexer);



  push_deferring_access_checks (dk_deferred);
}



static void
cp_parser_commit_to_tentative_parse (cp_parser* parser)
{
  cp_parser_context *context;
  cp_lexer *lexer;


  lexer = parser->lexer;
  for (context = parser->context; context->next; context = context->next)
    {
      if (context->status == CP_PARSER_STATUS_KIND_COMMITTED)
 break;
      context->status = CP_PARSER_STATUS_KIND_COMMITTED;
      while (!cp_lexer_saving_tokens (lexer))
 lexer = lexer->next;
      cp_lexer_commit_tokens (lexer);
    }
}
# 31959 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_commit_to_topmost_tentative_parse (cp_parser* parser)
{
  cp_parser_context *context = parser->context;
  cp_lexer *lexer = parser->lexer;

  if (context)
    {
      if (context->status == CP_PARSER_STATUS_KIND_COMMITTED)
 return;
      context->status = CP_PARSER_STATUS_KIND_COMMITTED;

      while (!cp_lexer_saving_tokens (lexer))
 lexer = lexer->next;
      cp_lexer_commit_tokens (lexer);
    }
}




static void
cp_parser_abort_tentative_parse (cp_parser* parser)
{
  ((void)(!(parser->context->status != CP_PARSER_STATUS_KIND_COMMITTED || (global_dc)->diagnostic_count[(int) (DK_ERROR)] > 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 31983, __FUNCTION__), 0 : 0))
                         ;
  cp_parser_simulate_error (parser);


  cp_parser_parse_definitely (parser);
}





static bool
cp_parser_parse_definitely (cp_parser* parser)
{
  bool error_occurred;
  cp_parser_context *context;



  error_occurred = cp_parser_error_occurred (parser);

  context = parser->context;
  parser->context = context->next;

  if (!error_occurred)
    {


      if (context->status != CP_PARSER_STATUS_KIND_COMMITTED)
 cp_lexer_commit_tokens (parser->lexer);

      pop_to_parent_deferring_access_checks ();
    }


  else
    {
      cp_lexer_rollback_tokens (parser->lexer);
      pop_deferring_access_checks ();
    }

  context->next = cp_parser_context_free_list;
  cp_parser_context_free_list = context;

  return !error_occurred;
}




static bool
cp_parser_uncommitted_to_tentative_parse_p (cp_parser* parser)
{
  return (cp_parser_parsing_tentatively (parser)
   && parser->context->status != CP_PARSER_STATUS_KIND_COMMITTED);
}




static bool
cp_parser_error_occurred (cp_parser* parser)
{
  return (cp_parser_parsing_tentatively (parser)
   && parser->context->status == CP_PARSER_STATUS_KIND_ERROR);
}



static bool
cp_parser_allow_gnu_extensions_p (cp_parser* parser)
{
  return parser->allow_gnu_extensions_p;
}
# 32074 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_objc_expression (cp_parser* parser)
{

  cp_token *kwd = cp_lexer_peek_token (parser->lexer);

  switch (kwd->type)
    {
    case CPP_OPEN_SQUARE:
      return cp_parser_objc_message_expression (parser);

    case CPP_OBJC_STRING:
      kwd = cp_lexer_consume_token (parser->lexer);
      return objc_build_string_object (kwd->u.value);

    case CPP_KEYWORD:
      switch (kwd->keyword)
 {
 case RID_AT_ENCODE:
   return cp_parser_objc_encode_expression (parser);

 case RID_AT_PROTOCOL:
   return cp_parser_objc_protocol_expression (parser);

 case RID_AT_SELECTOR:
   return cp_parser_objc_selector_expression (parser);

 default:
   break;
 }

    default:
      error_at (kwd->location,
  "misplaced %<@%D%> Objective-C++ construct",
  kwd->u.value);
      cp_parser_skip_to_end_of_block_or_statement (parser);
    }

  return global_trees[TI_ERROR_MARK];
}
# 32122 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_message_expression (cp_parser* parser)
{
  tree receiver, messageargs;

  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;
  cp_lexer_consume_token (parser->lexer);
  receiver = cp_parser_objc_message_receiver (parser);
  messageargs = cp_parser_objc_message_args (parser);
  location_t end_loc = cp_lexer_peek_token (parser->lexer)->location;
  cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);

  tree result = objc_build_message_expr (receiver, messageargs);





  location_t combined_loc = make_location (start_loc, start_loc, end_loc);
  protected_set_expr_location (result, combined_loc);

  return result;
}
# 32154 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_message_receiver (cp_parser* parser)
{
  tree rcv;



  cp_parser_parse_tentatively (parser);
  rcv = cp_parser_expression (parser);


  if (cp_parser_parse_definitely (parser))
    return rcv;

  cp_parser_parse_tentatively (parser);
  rcv = cp_parser_simple_type_specifier (parser,
                     
# 32170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 32170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ,
      CP_PARSER_FLAGS_NONE);

  if (cp_parser_parse_definitely (parser))
    return objc_get_class_reference (rcv);

  cp_parser_error (parser, "objective-c++ message receiver expected");
  return global_trees[TI_ERROR_MARK];
}
# 32199 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_message_args (cp_parser* parser)
{
  tree sel_args = (tree) 
# 32202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 32202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          , addl_args = (tree) 
# 32202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 32202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 ;
  bool maybe_unary_selector_p = true;
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  while (cp_parser_objc_selector_p (token->type) || token->type == CPP_COLON)
    {
      tree selector = (tree) 
# 32208 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 32208 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              , arg;

      if (token->type != CPP_COLON)
 selector = cp_parser_objc_selector (parser);


      if (maybe_unary_selector_p
   && cp_lexer_next_token_is_not (parser->lexer, CPP_COLON))
 return build_tree_list (selector, (tree) 
# 32216 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 32216 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           );

      maybe_unary_selector_p = false;
      cp_parser_require (parser, CPP_COLON, RT_COLON);
      arg = cp_parser_assignment_expression (parser);

      sel_args
 = chainon (sel_args,
     build_tree_list (selector, arg));

      token = cp_lexer_peek_token (parser->lexer);
    }


  while (token->type == CPP_COMMA)
    {
      tree arg;

      cp_lexer_consume_token (parser->lexer);
      arg = cp_parser_assignment_expression (parser);

      addl_args
 = chainon (addl_args,
     build_tree_list ((tree) 
# 32239 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 32239 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              , arg));

      token = cp_lexer_peek_token (parser->lexer);
    }

  if (sel_args == (tree) 
# 32244 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null 
# 32244 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           && addl_args == (tree) 
# 32244 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                           __null
# 32244 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                    )
    {
      cp_parser_error (parser, "objective-c++ message argument(s) are expected");
      return build_tree_list (global_trees[TI_ERROR_MARK], global_trees[TI_ERROR_MARK]);
    }

  return build_tree_list (sel_args, addl_args);
}
# 32260 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static cp_expr
cp_parser_objc_encode_expression (cp_parser* parser)
{
  tree type;
  cp_token *token;
  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_lexer_consume_token (parser->lexer);
  matching_parens parens;
  parens.require_open (parser);
  token = cp_lexer_peek_token (parser->lexer);
  type = complete_type (cp_parser_type_id (parser));
  parens.require_close (parser);

  if (!type)
    {
      error_at (token->location,
  "%<@encode%> must specify a type as an argument");
      return global_trees[TI_ERROR_MARK];
    }







  if (dependent_type_p (type))
    {
      tree value = build_min (AT_ENCODE_EXPR, global_trees[TI_SIZE_TYPE], type);
      ((non_type_check ((value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 32290, __FUNCTION__))->base.readonly_flag) = 1;
      return value;
    }






  location_t combined_loc = make_location (start_loc, start_loc, parser->lexer);

  return cp_expr (objc_build_encode_expr (type), combined_loc);
}



static tree
cp_parser_objc_defs_expression (cp_parser *parser)
{
  tree name;

  cp_lexer_consume_token (parser->lexer);
  matching_parens parens;
  parens.require_open (parser);
  name = cp_parser_identifier (parser);
  parens.require_close (parser);

  return objc_get_class_ivars (name);
}
# 32327 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_protocol_expression (cp_parser* parser)
{
  tree proto;
  location_t start_loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_lexer_consume_token (parser->lexer);
  matching_parens parens;
  parens.require_open (parser);
  proto = cp_parser_identifier (parser);
  parens.require_close (parser);





  location_t combined_loc = make_location (start_loc, start_loc, parser->lexer);
  tree result = objc_build_protocol_expr (proto);
  protected_set_expr_location (result, combined_loc);
  return result;
}
# 32364 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_selector_expression (cp_parser* parser)
{
  tree sel_seq = (tree) 
# 32367 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 32367 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
  bool maybe_unary_selector_p = true;
  cp_token *token;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_lexer_consume_token (parser->lexer);
  matching_parens parens;
  parens.require_open (parser);
  token = cp_lexer_peek_token (parser->lexer);

  while (cp_parser_objc_selector_p (token->type) || token->type == CPP_COLON
  || token->type == CPP_SCOPE)
    {
      tree selector = (tree) 
# 32380 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 32380 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;

      if (token->type != CPP_COLON
   || token->type == CPP_SCOPE)
 selector = cp_parser_objc_selector (parser);

      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COLON)
   && cp_lexer_next_token_is_not (parser->lexer, CPP_SCOPE))
 {

   if (maybe_unary_selector_p)
     {
       sel_seq = selector;
       goto finish_selector;
     }
   else
     {
       cp_parser_error (parser, "expected %<:%>");
     }
 }
      maybe_unary_selector_p = false;
      token = cp_lexer_consume_token (parser->lexer);

      if (token->type == CPP_SCOPE)
 {
   sel_seq
     = chainon (sel_seq,
         build_tree_list (selector, (tree) 
# 32407 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 32407 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            ));
   sel_seq
     = chainon (sel_seq,
         build_tree_list ((tree) 
# 32410 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 32410 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  , (tree) 
# 32410 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 32410 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                             ));
 }
      else
 sel_seq
   = chainon (sel_seq,
       build_tree_list (selector, (tree) 
# 32415 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 32415 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          ));

      token = cp_lexer_peek_token (parser->lexer);
    }

 finish_selector:
  parens.require_close (parser);






  location_t combined_loc = make_location (loc, loc, parser->lexer);
  tree result = objc_build_selector_expr (combined_loc, sel_seq);

  protected_set_expr_location (result, combined_loc);
  return result;
}
# 32443 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_identifier_list (cp_parser* parser)
{
  tree identifier;
  tree list;
  cp_token *sep;

  identifier = cp_parser_identifier (parser);
  if (identifier == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  list = build_tree_list ((tree) 
# 32454 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 32454 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  , identifier);
  sep = cp_lexer_peek_token (parser->lexer);

  while (sep->type == CPP_COMMA)
    {
      cp_lexer_consume_token (parser->lexer);
      identifier = cp_parser_identifier (parser);
      if (identifier == global_trees[TI_ERROR_MARK])
 return list;

      list = chainon (list, build_tree_list ((tree) 
# 32464 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 32464 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     ,
          identifier));
      sep = cp_lexer_peek_token (parser->lexer);
    }

  return list;
}
# 32480 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_objc_alias_declaration (cp_parser* parser)
{
  tree alias, orig;

  cp_lexer_consume_token (parser->lexer);
  alias = cp_parser_identifier (parser);
  orig = cp_parser_identifier (parser);
  objc_declare_alias (alias, orig);
  cp_parser_consume_semicolon_at_end_of_statement (parser);
}
# 32500 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_objc_class_declaration (cp_parser* parser)
{
  cp_lexer_consume_token (parser->lexer);
  while (true)
    {
      tree id;

      id = cp_parser_identifier (parser);
      if (id == global_trees[TI_ERROR_MARK])
 break;

      objc_declare_class (id);

      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);
      else
 break;
    }
  cp_parser_consume_semicolon_at_end_of_statement (parser);
}
# 32532 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_protocol_refs_opt (cp_parser* parser)
{
  tree protorefs = (tree) 
# 32535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 32535 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;

  if(cp_lexer_next_token_is (parser->lexer, CPP_LESS))
    {
      cp_lexer_consume_token (parser->lexer);
      protorefs = cp_parser_objc_identifier_list (parser);
      cp_parser_require (parser, CPP_GREATER, RT_GREATER);
    }

  return protorefs;
}



static void
cp_parser_objc_visibility_spec (cp_parser* parser)
{
  cp_token *vis = cp_lexer_peek_token (parser->lexer);

  switch (vis->keyword)
    {
    case RID_AT_PRIVATE:
      objc_set_visibility (OBJC_IVAR_VIS_PRIVATE);
      break;
    case RID_AT_PROTECTED:
      objc_set_visibility (OBJC_IVAR_VIS_PROTECTED);
      break;
    case RID_AT_PUBLIC:
      objc_set_visibility (OBJC_IVAR_VIS_PUBLIC);
      break;
    case RID_AT_PACKAGE:
      objc_set_visibility (OBJC_IVAR_VIS_PACKAGE);
      break;
    default:
      return;
    }


  cp_lexer_consume_token (parser->lexer);
}




static inline bool
cp_parser_objc_method_type (cp_parser* parser)
{
  if (cp_lexer_consume_token (parser->lexer)->type == CPP_PLUS)
    return true;
  else
    return false;
}



static tree
cp_parser_objc_protocol_qualifiers (cp_parser* parser)
{
  tree quals = (tree) 
# 32593 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 32593 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       , node;
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  node = token->u.value;

  while (node && identifier_p (node)
  && (node == ridpointers [(int) RID_IN]
      || node == ridpointers [(int) RID_OUT]
      || node == ridpointers [(int) RID_INOUT]
      || node == ridpointers [(int) RID_BYCOPY]
      || node == ridpointers [(int) RID_BYREF]
      || node == ridpointers [(int) RID_ONEWAY]))
    {
      quals = tree_cons ((tree) 
# 32606 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 32606 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 , node, quals);
      cp_lexer_consume_token (parser->lexer);
      token = cp_lexer_peek_token (parser->lexer);
      node = token->u.value;
    }

  return quals;
}



static tree
cp_parser_objc_typename (cp_parser* parser)
{
  tree type_name = (tree) 
# 32620 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 32620 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      tree proto_quals, cp_type = (tree) 
# 32624 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 32624 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          ;

      matching_parens parens;
      parens.consume_open (parser);
      proto_quals = cp_parser_objc_protocol_qualifiers (parser);



      if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN))
 {
   cp_type = cp_parser_type_id (parser);





   if (cp_type == global_trees[TI_ERROR_MARK])
     {
       cp_type = (tree) 
# 32642 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 32642 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;



       cp_parser_skip_to_closing_parenthesis (parser,
                          true,
                        false,
                             false);
     }
 }

      parens.require_close (parser);
      type_name = build_tree_list (proto_quals, cp_type);
    }

  return type_name;
}



static bool
cp_parser_objc_selector_p (enum cpp_ttype type)
{
  return (type == CPP_NAME || type == CPP_KEYWORD
   || type == CPP_AND_AND || type == CPP_AND_EQ || type == CPP_AND
   || type == CPP_OR || type == CPP_COMPL || type == CPP_NOT
   || type == CPP_NOT_EQ || type == CPP_OR_OR || type == CPP_OR_EQ
   || type == CPP_XOR || type == CPP_XOR_EQ);
}



static tree
cp_parser_objc_selector (cp_parser* parser)
{
  cp_token *token = cp_lexer_consume_token (parser->lexer);

  if (!cp_parser_objc_selector_p (token->type))
    {
      error_at (token->location, "invalid Objective-C++ selector name");
      return global_trees[TI_ERROR_MARK];
    }


  switch (token->type)
    {
    case CPP_AND_AND: return (__builtin_constant_p ("and") ? get_identifier_with_length (("and"), strlen ("and")) : get_identifier ("and"));
    case CPP_AND_EQ: return (__builtin_constant_p ("and_eq") ? get_identifier_with_length (("and_eq"), strlen ("and_eq")) : get_identifier ("and_eq"));
    case CPP_AND: return (__builtin_constant_p ("bitand") ? get_identifier_with_length (("bitand"), strlen ("bitand")) : get_identifier ("bitand"));
    case CPP_OR: return (__builtin_constant_p ("bitor") ? get_identifier_with_length (("bitor"), strlen ("bitor")) : get_identifier ("bitor"));
    case CPP_COMPL: return (__builtin_constant_p ("compl") ? get_identifier_with_length (("compl"), strlen ("compl")) : get_identifier ("compl"));
    case CPP_NOT: return (__builtin_constant_p ("not") ? get_identifier_with_length (("not"), strlen ("not")) : get_identifier ("not"));
    case CPP_NOT_EQ: return (__builtin_constant_p ("not_eq") ? get_identifier_with_length (("not_eq"), strlen ("not_eq")) : get_identifier ("not_eq"));
    case CPP_OR_OR: return (__builtin_constant_p ("or") ? get_identifier_with_length (("or"), strlen ("or")) : get_identifier ("or"));
    case CPP_OR_EQ: return (__builtin_constant_p ("or_eq") ? get_identifier_with_length (("or_eq"), strlen ("or_eq")) : get_identifier ("or_eq"));
    case CPP_XOR: return (__builtin_constant_p ("xor") ? get_identifier_with_length (("xor"), strlen ("xor")) : get_identifier ("xor"));
    case CPP_XOR_EQ: return (__builtin_constant_p ("xor_eq") ? get_identifier_with_length (("xor_eq"), strlen ("xor_eq")) : get_identifier ("xor_eq"));
    default: return token->u.value;
    }
}



static tree
cp_parser_objc_method_keyword_params (cp_parser* parser, tree* attributes)
{
  tree params = (tree) 
# 32708 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 32708 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  bool maybe_unary_selector_p = true;
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  while (cp_parser_objc_selector_p (token->type) || token->type == CPP_COLON)
    {
      tree selector = (tree) 
# 32714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 32714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              , type_name, identifier;
      tree parm_attr = (tree) 
# 32715 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 32715 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;

      if (token->keyword == RID_ATTRIBUTE)
 break;

      if (token->type != CPP_COLON)
 selector = cp_parser_objc_selector (parser);


      if (maybe_unary_selector_p
   && cp_lexer_next_token_is_not (parser->lexer, CPP_COLON))
 {
   params = selector;
   break;
 }

      maybe_unary_selector_p = false;
      if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
 {


   break;
 }
      type_name = cp_parser_objc_typename (parser);

      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_ATTRIBUTE))
 parm_attr = cp_parser_attributes_opt (parser);
      identifier = cp_parser_identifier (parser);

      params
 = chainon (params,
     objc_build_keyword_decl (selector,
         type_name,
         identifier,
         parm_attr));

      token = cp_lexer_peek_token (parser->lexer);
    }

  if (params == (tree) 
# 32754 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 32754 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        )
    {
      cp_parser_error (parser, "objective-c++ method declaration is expected");
      return global_trees[TI_ERROR_MARK];
    }


  if (token->keyword == RID_ATTRIBUTE)
    {
      *attributes = cp_parser_attributes_opt (parser);
      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)
   || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
 return params;
      cp_parser_error (parser,
         "method attributes must be specified at the end");
      return global_trees[TI_ERROR_MARK];
    }

  if (params == (tree) 
# 32772 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 32772 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        )
    {
      cp_parser_error (parser, "objective-c++ method declaration is expected");
      return global_trees[TI_ERROR_MARK];
    }
  return params;
}



static tree
cp_parser_objc_method_tail_params_opt (cp_parser* parser, bool *ellipsisp,
           tree* attributes)
{
  tree params = make_node (TREE_LIST);
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  *ellipsisp = false;

  while (token->type == CPP_COMMA)
    {
      cp_parameter_declarator *parmdecl;
      tree parm;

      cp_lexer_consume_token (parser->lexer);
      token = cp_lexer_peek_token (parser->lexer);

      if (token->type == CPP_ELLIPSIS)
 {
   cp_lexer_consume_token (parser->lexer);
   *ellipsisp = true;
   token = cp_lexer_peek_token (parser->lexer);
   break;
 }


      parmdecl = cp_parser_parameter_declaration (parser, CP_PARSER_FLAGS_NONE,
        false, 
# 32808 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 32808 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );
      parm = grokdeclarator (parmdecl->declarator,
        &parmdecl->decl_specifiers,
        PARM, 0,
                     
# 32812 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 32812 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        );

      chainon (params, build_tree_list ((tree) 
# 32814 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 32814 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                , parm));
      token = cp_lexer_peek_token (parser->lexer);
    }


  if (token->keyword == RID_ATTRIBUTE)
    {
      if (*attributes == (tree) 
# 32821 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 32821 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 )
 {
   *attributes = cp_parser_attributes_opt (parser);
   if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON)
       || cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
     return params;
 }
      else


 *attributes = cp_parser_attributes_opt (parser);

      cp_parser_error (parser,
         "method attributes must be specified at the end");
      return global_trees[TI_ERROR_MARK];
    }

  return params;
}



static void
cp_parser_objc_interstitial_code (cp_parser* parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);



  if (token->keyword == RID_EXTERN
      && cp_parser_is_pure_string_literal
  (cp_lexer_peek_nth_token (parser->lexer, 2)))
    cp_parser_linkage_specification (parser);

  else if (token->type == CPP_PRAGMA)
    cp_parser_pragma (parser, pragma_objc_icode, 
# 32856 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 32856 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                    );

  else if (token->type == CPP_SEMICOLON)
    cp_lexer_consume_token (parser->lexer);

  else if (token->keyword == RID_AT_OPTIONAL)
    {
      cp_lexer_consume_token (parser->lexer);
      objc_set_method_opt (true);
    }
  else if (token->keyword == RID_AT_REQUIRED)
    {
      cp_lexer_consume_token (parser->lexer);
      objc_set_method_opt (false);
    }
  else if (token->keyword == RID_NAMESPACE)
    cp_parser_namespace_definition (parser);

  else if (token->type == CPP_OPEN_BRACE || token->type == CPP_CLOSE_BRACE)
    {
      cp_lexer_consume_token (parser->lexer);
      error ("stray %qs between Objective-C++ methods",
      token->type == CPP_OPEN_BRACE ? "{" : "}");
    }

  else
    cp_parser_block_declaration (parser, false);
}



static tree
cp_parser_objc_method_signature (cp_parser* parser, tree* attributes)
{
  tree rettype, kwdparms, optparms;
  bool ellipsis = false;
  bool is_class_method;

  is_class_method = cp_parser_objc_method_type (parser);
  rettype = cp_parser_objc_typename (parser);
  *attributes = (tree) 
# 32896 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 32896 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  kwdparms = cp_parser_objc_method_keyword_params (parser, attributes);
  if (kwdparms == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];
  optparms = cp_parser_objc_method_tail_params_opt (parser, &ellipsis, attributes);
  if (optparms == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];

  return objc_build_method_signature (is_class_method, rettype, kwdparms, optparms, ellipsis);
}

static bool
cp_parser_objc_method_maybe_bad_prefix_attributes (cp_parser* parser)
{
  tree tattr;
  cp_lexer_save_tokens (parser->lexer);
  tattr = cp_parser_attributes_opt (parser);
  ((void)(!(tattr) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 32913, __FUNCTION__), 0 : 0)) ;



  if (cp_lexer_next_token_is (parser->lexer, CPP_PLUS)
      || cp_lexer_next_token_is (parser->lexer, CPP_MINUS))
    return true;



  cp_lexer_rollback_tokens (parser->lexer);
  return false;
}



static void
cp_parser_objc_method_prototype_list (cp_parser* parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  while (token->keyword != RID_AT_END && token->type != CPP_EOF)
    {
      if (token->type == CPP_PLUS || token->type == CPP_MINUS)
 {
   tree attributes, sig;
   bool is_class_method;
   if (token->type == CPP_PLUS)
     is_class_method = true;
   else
     is_class_method = false;
   sig = cp_parser_objc_method_signature (parser, &attributes);
   if (sig == global_trees[TI_ERROR_MARK])
     {
       cp_parser_skip_to_end_of_block_or_statement (parser);
       token = cp_lexer_peek_token (parser->lexer);
       continue;
     }
   objc_add_method_declaration (is_class_method, sig, attributes);
   cp_parser_consume_semicolon_at_end_of_statement (parser);
 }
      else if (token->keyword == RID_AT_PROPERTY)
 cp_parser_objc_at_property_declaration (parser);
      else if (token->keyword == RID_ATTRIBUTE
              && cp_parser_objc_method_maybe_bad_prefix_attributes(parser))
 warning_at (cp_lexer_peek_token (parser->lexer)->location,
      OPT_Wattributes,
      "prefix attributes are ignored for methods");
      else

 cp_parser_objc_interstitial_code (parser);

      token = cp_lexer_peek_token (parser->lexer);
    }

  if (token->type != CPP_EOF)
    cp_lexer_consume_token (parser->lexer);
  else
    cp_parser_error (parser, "expected %<@end%>");

  objc_finish_interface ();
}



static void
cp_parser_objc_method_definition_list (cp_parser* parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  while (token->keyword != RID_AT_END && token->type != CPP_EOF)
    {
      tree meth;

      if (token->type == CPP_PLUS || token->type == CPP_MINUS)
 {
   cp_token *ptk;
   tree sig, attribute;
   bool is_class_method;
   if (token->type == CPP_PLUS)
     is_class_method = true;
   else
     is_class_method = false;
   push_deferring_access_checks (dk_deferred);
   sig = cp_parser_objc_method_signature (parser, &attribute);
   if (sig == global_trees[TI_ERROR_MARK])
     {
       cp_parser_skip_to_end_of_block_or_statement (parser);
       token = cp_lexer_peek_token (parser->lexer);
       continue;
     }
   objc_start_method_definition (is_class_method, sig, attribute,
     (tree) 
# 33005 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
    __null
# 33005 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             );


   if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
     cp_lexer_consume_token (parser->lexer);

   ptk = cp_lexer_peek_token (parser->lexer);
   if (!(ptk->type == CPP_PLUS || ptk->type == CPP_MINUS
  || ptk->type == CPP_EOF || ptk->keyword == RID_AT_END))
     {
       perform_deferred_access_checks (tf_warning_or_error);
       stop_deferring_access_checks ();
       meth = cp_parser_function_definition_after_declarator (parser,
             false);
       pop_deferring_access_checks ();
       objc_finish_method_definition (meth);
     }
 }


      else if (token->keyword == RID_AT_PROPERTY)
 cp_parser_objc_at_property_declaration (parser);
      else if (token->keyword == RID_AT_SYNTHESIZE)
 cp_parser_objc_at_synthesize_declaration (parser);
      else if (token->keyword == RID_AT_DYNAMIC)
 cp_parser_objc_at_dynamic_declaration (parser);
      else if (token->keyword == RID_ATTRIBUTE
              && cp_parser_objc_method_maybe_bad_prefix_attributes(parser))
 warning_at (token->location, OPT_Wattributes,
             "prefix attributes are ignored for methods");
      else

 cp_parser_objc_interstitial_code (parser);

      token = cp_lexer_peek_token (parser->lexer);
    }

  if (token->type != CPP_EOF)
    cp_lexer_consume_token (parser->lexer);
  else
    cp_parser_error (parser, "expected %<@end%>");

  objc_finish_implementation ();
}



static void
cp_parser_objc_class_ivars (cp_parser* parser)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);

  if (token->type != CPP_OPEN_BRACE)
    return;

  cp_lexer_consume_token (parser->lexer);
  token = cp_lexer_peek_token (parser->lexer);

  while (token->type != CPP_CLOSE_BRACE
 && token->keyword != RID_AT_END && token->type != CPP_EOF)
    {
      cp_decl_specifier_seq declspecs;
      int decl_class_or_enum_p;
      tree prefix_attributes;

      cp_parser_objc_visibility_spec (parser);

      if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))
 break;

      cp_parser_decl_specifier_seq (parser,
        CP_PARSER_FLAGS_OPTIONAL,
        &declspecs,
        &decl_class_or_enum_p);


      if (declspecs.storage_class != sc_none)
 {
   cp_parser_error (parser, "invalid type for instance variable");
   declspecs.storage_class = sc_none;
 }


      if (decl_spec_seq_has_spec_p (&declspecs, ds_thread))
 {
   cp_parser_error (parser, "invalid type for instance variable");
   declspecs.locations[ds_thread] = 0;
 }


      if (decl_spec_seq_has_spec_p (&declspecs, ds_typedef))
 {
   cp_parser_error (parser, "invalid type for instance variable");
   declspecs.locations[ds_typedef] = 0;
 }

      prefix_attributes = declspecs.attributes;
      declspecs.attributes = (tree) 
# 33102 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 33102 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;



      while (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
 {
   tree width = (tree) 
# 33108 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 33108 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        , attributes, first_attribute, decl;
   cp_declarator *declarator = 
# 33109 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 33109 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;
   int ctor_dtor_or_conv_p;


   token = cp_lexer_peek_token (parser->lexer);
   if (token->type == CPP_COLON)
     goto eat_colon;

   if (token->type == CPP_NAME
       && (cp_lexer_peek_nth_token (parser->lexer, 2)->type
    == CPP_COLON))
     {

       declarator = make_id_declarator ((tree) 
# 33122 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 33122 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                ,
            cp_parser_identifier (parser),
            sfk_none, token->location);

      eat_colon:
       cp_lexer_consume_token (parser->lexer);

       width
  = cp_parser_constant_expression (parser);
     }
   else
     {

       declarator
  = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
     CP_PARSER_FLAGS_NONE,
     &ctor_dtor_or_conv_p,
                         
# 33139 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 33139 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ,
                  false,
                  false,
                  false);
     }


   attributes = cp_parser_attributes_opt (parser);


   first_attribute = attributes;

   attributes = attr_chainon (prefix_attributes, attributes);

   if (width)

     decl = grokbitfield (declarator, &declspecs,
     width, (tree) 
# 33156 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 33156 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    , attributes);
   else
     decl = grokfield (declarator, &declspecs,
         (tree) 
# 33159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 33159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 , false,
         (tree) 
# 33160 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 33160 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 , attributes);


   if (decl != global_trees[TI_ERROR_MARK] && decl != (tree) 
# 33163 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                         __null
# 33163 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                  )
     objc_add_instance_variable (decl);


   if (attributes != global_trees[TI_ERROR_MARK])
     {
       while (attributes && ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33169, __FUNCTION__))->common.chain) != first_attribute)
  attributes = ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33170, __FUNCTION__))->common.chain);
       if (attributes)
  ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33172, __FUNCTION__))->common.chain) = (tree) 
# 33172 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 33172 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
     }

   token = cp_lexer_peek_token (parser->lexer);

   if (token->type == CPP_COMMA)
     {
       cp_lexer_consume_token (parser->lexer);
       continue;
     }
   break;
 }

      cp_parser_consume_semicolon_at_end_of_statement (parser);
      token = cp_lexer_peek_token (parser->lexer);
    }

  if (token->keyword == RID_AT_END)
    cp_parser_error (parser, "expected %<}%>");



  if (token->keyword != RID_AT_END && token->type != CPP_EOF)
    cp_lexer_consume_token (parser->lexer);


  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
    cp_lexer_consume_token (parser->lexer);
}



static void
cp_parser_objc_protocol_declaration (cp_parser* parser, tree attributes)
{
  tree proto, protorefs;
  cp_token *tok;

  cp_lexer_consume_token (parser->lexer);
  if (cp_lexer_next_token_is_not (parser->lexer, CPP_NAME))
    {
      tok = cp_lexer_peek_token (parser->lexer);
      error_at (tok->location, "identifier expected after %<@protocol%>");
      cp_parser_consume_semicolon_at_end_of_statement (parser);
      return;
    }


  tok = cp_lexer_peek_nth_token (parser->lexer, 2);


  if (tok->type == CPP_COMMA || tok->type == CPP_SEMICOLON)
    {
      while (true)
 {
   tree id;

   id = cp_parser_identifier (parser);
   if (id == global_trees[TI_ERROR_MARK])
     break;

   objc_declare_protocol (id, attributes);

   if(cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
     cp_lexer_consume_token (parser->lexer);
   else
     break;
 }
      cp_parser_consume_semicolon_at_end_of_statement (parser);
    }


  else
    {
      proto = cp_parser_identifier (parser);
      protorefs = cp_parser_objc_protocol_refs_opt (parser);
      objc_start_protocol (proto, protorefs, attributes);
      cp_parser_objc_method_prototype_list (parser);
    }
}



static void
cp_parser_objc_superclass_or_category (cp_parser *parser,
           bool iface_p,
           tree *super,
           tree *categ, bool *is_class_extension)
{
  cp_token *next = cp_lexer_peek_token (parser->lexer);

  *super = *categ = (tree) 
# 33263 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 33263 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;
  *is_class_extension = false;
  if (next->type == CPP_COLON)
    {
      cp_lexer_consume_token (parser->lexer);
      *super = cp_parser_identifier (parser);
    }
  else if (next->type == CPP_OPEN_PAREN)
    {
      matching_parens parens;
      parens.consume_open (parser);



      if (iface_p && cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))
 {
   *categ = (tree) 
# 33279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 33279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
   *is_class_extension = true;
 }
      else
 *categ = cp_parser_identifier (parser);

      parens.require_close (parser);
    }
}



static void
cp_parser_objc_class_interface (cp_parser* parser, tree attributes)
{
  tree name, super, categ, protos;
  bool is_class_extension;

  cp_lexer_consume_token (parser->lexer);
  name = cp_parser_identifier (parser);
  if (name == global_trees[TI_ERROR_MARK])
    {





      return;
    }
  cp_parser_objc_superclass_or_category (parser, true, &super, &categ,
      &is_class_extension);
  protos = cp_parser_objc_protocol_refs_opt (parser);


  if (categ || is_class_extension)
    objc_start_category_interface (name, categ, protos, attributes);
  else
    {
      objc_start_class_interface (name, super, protos, attributes);

      cp_parser_objc_class_ivars (parser);
      objc_continue_interface ();
    }

  cp_parser_objc_method_prototype_list (parser);
}



static void
cp_parser_objc_class_implementation (cp_parser* parser)
{
  tree name, super, categ;
  bool is_class_extension;

  cp_lexer_consume_token (parser->lexer);
  name = cp_parser_identifier (parser);
  if (name == global_trees[TI_ERROR_MARK])
    {






      return;
    }
  cp_parser_objc_superclass_or_category (parser, false, &super, &categ,
      &is_class_extension);


  if (categ)
    objc_start_category_implementation (name, categ);
  else
    {
      objc_start_class_implementation (name, super);

      cp_parser_objc_class_ivars (parser);
      objc_continue_implementation ();
    }

  cp_parser_objc_method_definition_list (parser);
}



static void
cp_parser_objc_end_implementation (cp_parser* parser)
{
  cp_lexer_consume_token (parser->lexer);
  objc_finish_implementation ();
}



static void
cp_parser_objc_declaration (cp_parser* parser, tree attributes)
{

  cp_token *kwd = cp_lexer_peek_token (parser->lexer);

  if (attributes)
    switch (kwd->keyword)
      {
 case RID_AT_ALIAS:
 case RID_AT_CLASS:
 case RID_AT_END:
   error_at (kwd->location, "attributes may not be specified before"
             " the %<@%D%> Objective-C++ keyword",
      kwd->u.value);
   attributes = 
# 33389 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 33389 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
   break;
 case RID_AT_IMPLEMENTATION:
   warning_at (kwd->location, OPT_Wattributes,
        "prefix attributes are ignored before %<@%D%>",
        kwd->u.value);
   attributes = 
# 33395 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 33395 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
 default:
   break;
      }

  switch (kwd->keyword)
    {
    case RID_AT_ALIAS:
      cp_parser_objc_alias_declaration (parser);
      break;
    case RID_AT_CLASS:
      cp_parser_objc_class_declaration (parser);
      break;
    case RID_AT_PROTOCOL:
      cp_parser_objc_protocol_declaration (parser, attributes);
      break;
    case RID_AT_INTERFACE:
      cp_parser_objc_class_interface (parser, attributes);
      break;
    case RID_AT_IMPLEMENTATION:
      cp_parser_objc_class_implementation (parser);
      break;
    case RID_AT_END:
      cp_parser_objc_end_implementation (parser);
      break;
    default:
      error_at (kwd->location, "misplaced %<@%D%> Objective-C++ construct",
  kwd->u.value);
      cp_parser_skip_to_end_of_block_or_statement (parser);
    }
}
# 33453 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_try_catch_finally_statement (cp_parser *parser)
{
  location_t location;
  tree stmt;

  cp_parser_require_keyword (parser, RID_AT_TRY, RT_AT_TRY);
  location = cp_lexer_peek_token (parser->lexer)->location;
  objc_maybe_warn_exceptions (location);


  stmt = push_stmt_list ();
  cp_parser_compound_statement (parser, 
# 33465 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 33465 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , BCS_NORMAL, false);
  objc_begin_try_stmt (location, pop_stmt_list (stmt));

  while (cp_lexer_next_token_is_keyword (parser->lexer, RID_AT_CATCH))
    {
      cp_parameter_declarator *parm;
      tree parameter_declaration = global_trees[TI_ERROR_MARK];
      bool seen_open_paren = false;
      matching_parens parens;

      cp_lexer_consume_token (parser->lexer);
      if (parens.require_open (parser))
 seen_open_paren = true;
      if (cp_lexer_next_token_is (parser->lexer, CPP_ELLIPSIS))
 {





   cp_lexer_consume_token (parser->lexer);
   parameter_declaration = (tree) 
# 33486 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 33486 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;
 }
      else
 {


   parm = cp_parser_parameter_declaration (parser, CP_PARSER_FLAGS_NONE,
        false, 
# 33493 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 33493 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  );
   if (parm == 
# 33494 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 33494 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  )
     parameter_declaration = global_trees[TI_ERROR_MARK];
   else
     parameter_declaration = grokdeclarator (parm->declarator,
          &parm->decl_specifiers,
          PARM, 0,
                       
# 33500 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 33500 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
 }
      if (seen_open_paren)
 parens.require_close (parser);
      else
 {
# 33514 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))
     cp_lexer_consume_token (parser->lexer);





 }
      objc_begin_catch_clause (parameter_declaration);
      cp_parser_compound_statement (parser, 
# 33523 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                           __null
# 33523 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                               , BCS_NORMAL, false);
      objc_finish_catch_clause ();
    }
  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AT_FINALLY))
    {
      cp_lexer_consume_token (parser->lexer);
      location = cp_lexer_peek_token (parser->lexer)->location;


      stmt = push_stmt_list ();
      cp_parser_compound_statement (parser, 
# 33533 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                           __null
# 33533 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                               , BCS_NORMAL, false);
      objc_build_finally_clause (location, pop_stmt_list (stmt));
    }

  return objc_finish_try_stmt ();
}
# 33547 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_synchronized_statement (cp_parser *parser)
{
  location_t location;
  tree lock, stmt;

  cp_parser_require_keyword (parser, RID_AT_SYNCHRONIZED, RT_AT_SYNCHRONIZED);

  location = cp_lexer_peek_token (parser->lexer)->location;
  objc_maybe_warn_exceptions (location);
  matching_parens parens;
  parens.require_open (parser);
  lock = cp_parser_expression (parser);
  parens.require_close (parser);



  stmt = push_stmt_list ();
  cp_parser_compound_statement (parser, 
# 33565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 33565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , BCS_NORMAL, false);

  return objc_build_synchronized (location, lock, pop_stmt_list (stmt));
}
# 33577 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_throw_statement (cp_parser *parser)
{
  tree expr = (tree) 
# 33580 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 33580 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_parser_require_keyword (parser, RID_AT_THROW, RT_AT_THROW);

  if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
    expr = cp_parser_expression (parser);

  cp_parser_consume_semicolon_at_end_of_statement (parser);

  return objc_build_throw_stmt (loc, expr);
}



static tree
cp_parser_objc_statement (cp_parser * parser)
{

  cp_token *kwd = cp_lexer_peek_token (parser->lexer);

  switch (kwd->keyword)
    {
    case RID_AT_TRY:
      return cp_parser_objc_try_catch_finally_statement (parser);
    case RID_AT_SYNCHRONIZED:
      return cp_parser_objc_synchronized_statement (parser);
    case RID_AT_THROW:
      return cp_parser_objc_throw_statement (parser);
    default:
      error_at (kwd->location, "misplaced %<@%D%> Objective-C++ construct",
        kwd->u.value);
      cp_parser_skip_to_end_of_block_or_statement (parser);
    }

  return global_trees[TI_ERROR_MARK];
}






static bool
cp_parser_objc_valid_prefix_attributes (cp_parser* parser, tree *attrib)
{
  cp_lexer_save_tokens (parser->lexer);
  *attrib = cp_parser_attributes_opt (parser);
  ((void)(!(*attrib) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33628, __FUNCTION__), 0 : 0));
  if (((unsigned int) (cp_lexer_peek_token (parser->lexer)->keyword) >= (unsigned int) RID_FIRST_AT && (unsigned int) (cp_lexer_peek_token (parser->lexer)->keyword) <= (unsigned int) RID_LAST_AT))
    {
      cp_lexer_commit_tokens (parser->lexer);
      return true;
    }
  cp_lexer_rollback_tokens (parser->lexer);
  return false;
}
# 33650 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_objc_struct_declaration (cp_parser *parser)
{
  tree decls = (tree) 
# 33653 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 33653 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
  cp_decl_specifier_seq declspecs;
  int decl_class_or_enum_p;
  tree prefix_attributes;

  cp_parser_decl_specifier_seq (parser,
    CP_PARSER_FLAGS_NONE,
    &declspecs,
    &decl_class_or_enum_p);

  if (declspecs.type == global_trees[TI_ERROR_MARK])
    return global_trees[TI_ERROR_MARK];


  if (declspecs.storage_class != sc_none)
    {
      cp_parser_error (parser, "invalid type for property");
      declspecs.storage_class = sc_none;
    }


  if (decl_spec_seq_has_spec_p (&declspecs, ds_thread))
    {
      cp_parser_error (parser, "invalid type for property");
      declspecs.locations[ds_thread] = 0;
    }


  if (decl_spec_seq_has_spec_p (&declspecs, ds_typedef))
    {
      cp_parser_error (parser, "invalid type for property");
      declspecs.locations[ds_typedef] = 0;
    }

  prefix_attributes = declspecs.attributes;
  declspecs.attributes = (tree) 
# 33688 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 33688 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;


  while (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
    {
      tree attributes, first_attribute, decl;
      cp_declarator *declarator;
      cp_token *token;


      declarator = cp_parser_declarator (parser, CP_PARSER_DECLARATOR_NAMED,
      CP_PARSER_FLAGS_NONE,
      
# 33700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null
# 33700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         , 
# 33700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 33700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               , false, false, false);


      attributes = cp_parser_attributes_opt (parser);


      first_attribute = attributes;

      attributes = attr_chainon (prefix_attributes, attributes);

      decl = grokfield (declarator, &declspecs,
   (tree) 
# 33711 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
  __null
# 33711 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
           , false,
   (tree) 
# 33712 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
  __null
# 33712 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
           , attributes);

      if (decl == global_trees[TI_ERROR_MARK] || decl == (tree) 
# 33714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 33714 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     )
 return global_trees[TI_ERROR_MARK];


      if (attributes != global_trees[TI_ERROR_MARK])
 {
   while (attributes && ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33720, __FUNCTION__))->common.chain) != first_attribute)
     attributes = ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33721, __FUNCTION__))->common.chain);
   if (attributes)
     ((contains_struct_check ((attributes), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33723, __FUNCTION__))->common.chain) = (tree) 
# 33723 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 33723 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;
 }

      (((contains_struct_check (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33726, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33726, __FUNCTION__))->common.chain)) = decls;
      decls = decl;

      token = cp_lexer_peek_token (parser->lexer);
      if (token->type == CPP_COMMA)
 {
   cp_lexer_consume_token (parser->lexer);
   continue;
 }
      else
 break;
    }
  return decls;
}
# 33771 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_objc_at_property_declaration (cp_parser *parser)
{
# 33782 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  bool property_assign = false;
  bool property_copy = false;
  tree property_getter_ident = (tree) 
# 33784 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 33784 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;
  bool property_nonatomic = false;
  bool property_readonly = false;
  bool property_readwrite = false;
  bool property_retain = false;
  tree property_setter_ident = (tree) 
# 33789 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 33789 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ;




  tree properties;
  location_t loc;

  loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_lexer_consume_token (parser->lexer);


  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {

      matching_parens parens;
      parens.consume_open (parser);

      while (true)
 {
   bool syntax_error = false;
   cp_token *token = cp_lexer_peek_token (parser->lexer);
         enum rid keyword;

   if (token->type != CPP_NAME)
     {
       cp_parser_error (parser, "expected identifier");
       break;
     }
   keyword = ((enum rid) (((struct c_common_identifier *) (token->u.value))->node.rid_code));
   cp_lexer_consume_token (parser->lexer);
   switch (keyword)
     {
     case RID_ASSIGN: property_assign = true; break;
     case RID_COPY: property_copy = true; break;
     case RID_NONATOMIC: property_nonatomic = true; break;
     case RID_READONLY: property_readonly = true; break;
     case RID_READWRITE: property_readwrite = true; break;
     case RID_RETAIN: property_retain = true; break;

     case RID_GETTER:
     case RID_SETTER:
       if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ))
  {
    if (keyword == RID_GETTER)
      cp_parser_error (parser,
         "missing %<=%> (after %<getter%> attribute)");
    else
      cp_parser_error (parser,
         "missing %<=%> (after %<setter%> attribute)");
    syntax_error = true;
    break;
  }
       cp_lexer_consume_token (parser->lexer);
       if (!cp_parser_objc_selector_p (cp_lexer_peek_token (parser->lexer)->type))
  {
    cp_parser_error (parser, "expected identifier");
    syntax_error = true;
    break;
  }
       if (keyword == RID_SETTER)
  {
    if (property_setter_ident != (tree) 
# 33852 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 33852 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         )
      {
        cp_parser_error (parser, "the %<setter%> attribute may only be specified once");
        cp_lexer_consume_token (parser->lexer);
      }
    else
      property_setter_ident = cp_parser_objc_selector (parser);
    if (cp_lexer_next_token_is_not (parser->lexer, CPP_COLON))
      cp_parser_error (parser, "setter name must terminate with %<:%>");
    else
      cp_lexer_consume_token (parser->lexer);
  }
       else
  {
    if (property_getter_ident != (tree) 
# 33866 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 33866 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         )
      {
        cp_parser_error (parser, "the %<getter%> attribute may only be specified once");
        cp_lexer_consume_token (parser->lexer);
      }
    else
      property_getter_ident = cp_parser_objc_selector (parser);
  }
       break;
     default:
       cp_parser_error (parser, "unknown property attribute");
       syntax_error = true;
       break;
     }

   if (syntax_error)
     break;

   if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
     cp_lexer_consume_token (parser->lexer);
   else
     break;
 }





      if (!parens.require_close (parser))
 {
   cp_parser_skip_to_closing_parenthesis (parser,
                      true,
                    false,
                         true);
 }
    }


  properties = cp_parser_objc_struct_declaration (parser);

  if (properties == global_trees[TI_ERROR_MARK])
    {
      cp_parser_skip_to_end_of_statement (parser);

      if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
 cp_lexer_consume_token (parser->lexer);
      return;
    }

  if (properties == (tree) 
# 33915 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 33915 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
    cp_parser_error (parser, "expected identifier");
  else
    {


      properties = nreverse (properties);

      for (; properties; properties = ((contains_struct_check ((properties), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 33923, __FUNCTION__))->common.chain))
 objc_add_property_declaration (loc, copy_node (properties),
           property_readonly, property_readwrite,
           property_assign, property_retain,
           property_copy, property_nonatomic,
           property_getter_ident, property_setter_ident);
    }

  cp_parser_consume_semicolon_at_end_of_statement (parser);
}
# 33954 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_objc_at_synthesize_declaration (cp_parser *parser)
{
  tree list = (tree) 
# 33957 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 33957 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  location_t loc;
  loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_lexer_consume_token (parser->lexer);
  while (true)
    {
      tree property, ivar;
      property = cp_parser_identifier (parser);
      if (property == global_trees[TI_ERROR_MARK])
 {
   cp_parser_consume_semicolon_at_end_of_statement (parser);
   return;
 }
      if (cp_lexer_next_token_is (parser->lexer, CPP_EQ))
 {
   cp_lexer_consume_token (parser->lexer);
   ivar = cp_parser_identifier (parser);
   if (ivar == global_trees[TI_ERROR_MARK])
     {
       cp_parser_consume_semicolon_at_end_of_statement (parser);
       return;
     }
 }
      else
 ivar = (tree) 
# 33982 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 33982 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
      list = chainon (list, build_tree_list (ivar, property));
      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);
      else
 break;
    }
  cp_parser_consume_semicolon_at_end_of_statement (parser);
  objc_add_synthesize_declaration (loc, list);
}
# 34005 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_objc_at_dynamic_declaration (cp_parser *parser)
{
  tree list = (tree) 
# 34008 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 34008 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  location_t loc;
  loc = cp_lexer_peek_token (parser->lexer)->location;

  cp_lexer_consume_token (parser->lexer);
  while (true)
    {
      tree property;
      property = cp_parser_identifier (parser);
      if (property == global_trees[TI_ERROR_MARK])
 {
   cp_parser_consume_semicolon_at_end_of_statement (parser);
   return;
 }
      list = chainon (list, build_tree_list (
# 34022 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 34022 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                , property));
      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);
      else
 break;
    }
  cp_parser_consume_semicolon_at_end_of_statement (parser);
  objc_add_dynamic_declaration (loc, list);
}
# 34040 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static pragma_omp_clause
cp_parser_omp_clause_name (cp_parser *parser)
{
  pragma_omp_clause result = PRAGMA_OMP_CLAUSE_NONE;

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO))
    result = PRAGMA_OACC_CLAUSE_AUTO;
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_IF))
    result = PRAGMA_OMP_CLAUSE_IF;
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_DEFAULT))
    result = PRAGMA_OMP_CLAUSE_DEFAULT;
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_DELETE))
    result = PRAGMA_OACC_CLAUSE_DELETE;
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_PRIVATE))
    result = PRAGMA_OMP_CLAUSE_PRIVATE;
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_FOR))
    result = PRAGMA_OMP_CLAUSE_FOR;
  else if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34060, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      switch (p[0])
 {
 case 'a':
   if (!strcmp ("aligned", p))
     result = PRAGMA_OMP_CLAUSE_ALIGNED;
   else if (!strcmp ("async", p))
     result = PRAGMA_OACC_CLAUSE_ASYNC;
   else if (!strcmp ("attach", p))
     result = PRAGMA_OACC_CLAUSE_ATTACH;
   break;
 case 'b':
   if (!strcmp ("bind", p))
     result = PRAGMA_OMP_CLAUSE_BIND;
   break;
 case 'c':
   if (!strcmp ("collapse", p))
     result = PRAGMA_OMP_CLAUSE_COLLAPSE;
   else if (!strcmp ("copy", p))
     result = PRAGMA_OACC_CLAUSE_COPY;
   else if (!strcmp ("copyin", p))
     result = PRAGMA_OMP_CLAUSE_COPYIN;
   else if (!strcmp ("copyout", p))
     result = PRAGMA_OACC_CLAUSE_COPYOUT;
   else if (!strcmp ("copyprivate", p))
     result = PRAGMA_OMP_CLAUSE_COPYPRIVATE;
   else if (!strcmp ("create", p))
     result = PRAGMA_OACC_CLAUSE_CREATE;
   break;
 case 'd':
   if (!strcmp ("defaultmap", p))
     result = PRAGMA_OMP_CLAUSE_DEFAULTMAP;
   else if (!strcmp ("depend", p))
     result = PRAGMA_OMP_CLAUSE_DEPEND;
   else if (!strcmp ("detach", p))
     result = PRAGMA_OACC_CLAUSE_DETACH;
   else if (!strcmp ("device", p))
     result = PRAGMA_OMP_CLAUSE_DEVICE;
   else if (!strcmp ("deviceptr", p))
     result = PRAGMA_OACC_CLAUSE_DEVICEPTR;
   else if (!strcmp ("device_resident", p))
     result = PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT;
   else if (!strcmp ("device_type", p))
     result = PRAGMA_OMP_CLAUSE_DEVICE_TYPE;
   else if (!strcmp ("dist_schedule", p))
     result = PRAGMA_OMP_CLAUSE_DIST_SCHEDULE;
   break;
 case 'f':
   if (!strcmp ("final", p))
     result = PRAGMA_OMP_CLAUSE_FINAL;
   else if (!strcmp ("finalize", p))
     result = PRAGMA_OACC_CLAUSE_FINALIZE;
   else if (!strcmp ("firstprivate", p))
     result = PRAGMA_OMP_CLAUSE_FIRSTPRIVATE;
   else if (!strcmp ("from", p))
     result = PRAGMA_OMP_CLAUSE_FROM;
   break;
 case 'g':
   if (!strcmp ("gang", p))
     result = PRAGMA_OACC_CLAUSE_GANG;
   else if (!strcmp ("grainsize", p))
     result = PRAGMA_OMP_CLAUSE_GRAINSIZE;
   break;
 case 'h':
   if (!strcmp ("hint", p))
     result = PRAGMA_OMP_CLAUSE_HINT;
   else if (!strcmp ("host", p))
     result = PRAGMA_OACC_CLAUSE_HOST;
   break;
 case 'i':
   if (!strcmp ("if_present", p))
     result = PRAGMA_OACC_CLAUSE_IF_PRESENT;
   else if (!strcmp ("in_reduction", p))
     result = PRAGMA_OMP_CLAUSE_IN_REDUCTION;
   else if (!strcmp ("inbranch", p))
     result = PRAGMA_OMP_CLAUSE_INBRANCH;
   else if (!strcmp ("independent", p))
     result = PRAGMA_OACC_CLAUSE_INDEPENDENT;
   else if (!strcmp ("is_device_ptr", p))
     result = PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR;
   break;
 case 'l':
   if (!strcmp ("lastprivate", p))
     result = PRAGMA_OMP_CLAUSE_LASTPRIVATE;
   else if (!strcmp ("linear", p))
     result = PRAGMA_OMP_CLAUSE_LINEAR;
   else if (!strcmp ("link", p))
     result = PRAGMA_OMP_CLAUSE_LINK;
   break;
 case 'm':
   if (!strcmp ("map", p))
     result = PRAGMA_OMP_CLAUSE_MAP;
   else if (!strcmp ("mergeable", p))
     result = PRAGMA_OMP_CLAUSE_MERGEABLE;
   break;
 case 'n':
   if (!strcmp ("no_create", p))
     result = PRAGMA_OACC_CLAUSE_NO_CREATE;
   else if (!strcmp ("nogroup", p))
     result = PRAGMA_OMP_CLAUSE_NOGROUP;
   else if (!strcmp ("nontemporal", p))
     result = PRAGMA_OMP_CLAUSE_NONTEMPORAL;
   else if (!strcmp ("notinbranch", p))
     result = PRAGMA_OMP_CLAUSE_NOTINBRANCH;
   else if (!strcmp ("nowait", p))
     result = PRAGMA_OMP_CLAUSE_NOWAIT;
   else if (!strcmp ("num_gangs", p))
     result = PRAGMA_OACC_CLAUSE_NUM_GANGS;
   else if (!strcmp ("num_tasks", p))
     result = PRAGMA_OMP_CLAUSE_NUM_TASKS;
   else if (!strcmp ("num_teams", p))
     result = PRAGMA_OMP_CLAUSE_NUM_TEAMS;
   else if (!strcmp ("num_threads", p))
     result = PRAGMA_OMP_CLAUSE_NUM_THREADS;
   else if (!strcmp ("num_workers", p))
     result = PRAGMA_OACC_CLAUSE_NUM_WORKERS;
   break;
 case 'o':
   if (!strcmp ("ordered", p))
     result = PRAGMA_OMP_CLAUSE_ORDERED;
   else if (!strcmp ("order", p))
     result = PRAGMA_OMP_CLAUSE_ORDER;
   break;
 case 'p':
   if (!strcmp ("parallel", p))
     result = PRAGMA_OMP_CLAUSE_PARALLEL;
   else if (!strcmp ("present", p))
     result = PRAGMA_OACC_CLAUSE_PRESENT;
   else if (!strcmp ("present_or_copy", p)
     || !strcmp ("pcopy", p))
     result = PRAGMA_OACC_CLAUSE_COPY;
   else if (!strcmp ("present_or_copyin", p)
     || !strcmp ("pcopyin", p))
     result = PRAGMA_OACC_CLAUSE_COPYIN;
   else if (!strcmp ("present_or_copyout", p)
     || !strcmp ("pcopyout", p))
     result = PRAGMA_OACC_CLAUSE_COPYOUT;
   else if (!strcmp ("present_or_create", p)
     || !strcmp ("pcreate", p))
     result = PRAGMA_OACC_CLAUSE_CREATE;
   else if (!strcmp ("priority", p))
     result = PRAGMA_OMP_CLAUSE_PRIORITY;
   else if (!strcmp ("proc_bind", p))
     result = PRAGMA_OMP_CLAUSE_PROC_BIND;
   break;
 case 'r':
   if (!strcmp ("reduction", p))
     result = PRAGMA_OMP_CLAUSE_REDUCTION;
   break;
 case 's':
   if (!strcmp ("safelen", p))
     result = PRAGMA_OMP_CLAUSE_SAFELEN;
   else if (!strcmp ("schedule", p))
     result = PRAGMA_OMP_CLAUSE_SCHEDULE;
   else if (!strcmp ("sections", p))
     result = PRAGMA_OMP_CLAUSE_SECTIONS;
   else if (!strcmp ("self", p))
     result = PRAGMA_OACC_CLAUSE_HOST;
   else if (!strcmp ("seq", p))
     result = PRAGMA_OACC_CLAUSE_SEQ;
   else if (!strcmp ("shared", p))
     result = PRAGMA_OMP_CLAUSE_SHARED;
   else if (!strcmp ("simd", p))
     result = PRAGMA_OMP_CLAUSE_SIMD;
   else if (!strcmp ("simdlen", p))
     result = PRAGMA_OMP_CLAUSE_SIMDLEN;
   break;
 case 't':
   if (!strcmp ("task_reduction", p))
     result = PRAGMA_OMP_CLAUSE_TASK_REDUCTION;
   else if (!strcmp ("taskgroup", p))
     result = PRAGMA_OMP_CLAUSE_TASKGROUP;
   else if (!strcmp ("thread_limit", p))
     result = PRAGMA_OMP_CLAUSE_THREAD_LIMIT;
   else if (!strcmp ("threads", p))
     result = PRAGMA_OMP_CLAUSE_THREADS;
   else if (!strcmp ("tile", p))
     result = PRAGMA_OACC_CLAUSE_TILE;
   else if (!strcmp ("to", p))
     result = PRAGMA_OMP_CLAUSE_TO;
   break;
 case 'u':
   if (!strcmp ("uniform", p))
     result = PRAGMA_OMP_CLAUSE_UNIFORM;
   else if (!strcmp ("untied", p))
     result = PRAGMA_OMP_CLAUSE_UNTIED;
   else if (!strcmp ("use_device", p))
     result = PRAGMA_OACC_CLAUSE_USE_DEVICE;
   else if (!strcmp ("use_device_addr", p))
     result = PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR;
   else if (!strcmp ("use_device_ptr", p))
     result = PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR;
   break;
 case 'v':
   if (!strcmp ("vector", p))
     result = PRAGMA_OACC_CLAUSE_VECTOR;
   else if (!strcmp ("vector_length", p))
     result = PRAGMA_OACC_CLAUSE_VECTOR_LENGTH;
   break;
 case 'w':
   if (!strcmp ("wait", p))
     result = PRAGMA_OACC_CLAUSE_WAIT;
   else if (!strcmp ("worker", p))
     result = PRAGMA_OACC_CLAUSE_WORKER;
   break;
 }
    }

  if (result != PRAGMA_OMP_CLAUSE_NONE)
    cp_lexer_consume_token (parser->lexer);

  return result;
}



static void
check_no_duplicate_clause (tree clauses, enum omp_clause_code code,
      const char *name, location_t location)
{
  if (omp_find_clause (clauses, code))
    error_at (location, "too many %qs clauses", name);
}
# 34306 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_var_list_no_open (cp_parser *parser, enum omp_clause_code kind,
    tree list, bool *colon,
    bool allow_deref = false)
{
  cp_token *token;
  bool saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;
  if (colon)
    {
      parser->colon_corrects_to_scope_p = false;
      *colon = false;
    }
  while (1)
    {
      tree name, decl;

      if (kind == OMP_CLAUSE_DEPEND)
 cp_parser_parse_tentatively (parser);
      token = cp_lexer_peek_token (parser->lexer);
      if (kind != 0
   && (*((cfun + 0) && ((cfun + 0)->language) ? &((cfun + 0)->language)->x_current_class_ptr : &scope_chain->x_current_class_ptr))
   && cp_parser_is_keyword (token, RID_THIS))
 {
   decl = finish_this_expr ();
   if (((enum tree_code) (decl)->base.code) == NON_LVALUE_EXPR
       || ((((enum tree_code) (decl)->base.code)) == NOP_EXPR || (((enum tree_code) (decl)->base.code)) == CONVERT_EXPR))
     decl = (*((const_cast<tree*> (tree_operand_check ((decl), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34332, __FUNCTION__)))));
   cp_lexer_consume_token (parser->lexer);
 }
      else if (cp_parser_is_keyword (token, RID_FUNCTION_NAME)
        || cp_parser_is_keyword (token, RID_PRETTY_FUNCTION_NAME)
        || cp_parser_is_keyword (token, RID_C99_FUNCTION_NAME))
 {
   cp_id_kind idk;
   decl = cp_parser_primary_expression (parser, false, false, false,
            &idk);
 }
      else
 {
   name = cp_parser_id_expression (parser, false,
                              true,
                      
# 34347 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 34347 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ,
                        false,
                      false);
   if (name == global_trees[TI_ERROR_MARK])
     {
       if (kind == OMP_CLAUSE_DEPEND
    && cp_parser_simulate_error (parser))
  goto depend_lvalue;
       goto skip_comma;
     }

   if (identifier_p (name))
     decl = cp_parser_lookup_name_simple (parser, name, token->location);
   else
     decl = name;
   if (decl == global_trees[TI_ERROR_MARK])
     {
       if (kind == OMP_CLAUSE_DEPEND
    && cp_parser_simulate_error (parser))
  goto depend_lvalue;
       cp_parser_name_lookup_error (parser, name, decl, NLE_NULL,
        token->location);
     }
 }
      if (outer_automatic_var_p (decl))
 decl = process_outer_var_ref (decl, tf_warning_or_error);
      if (decl == global_trees[TI_ERROR_MARK])
 ;
      else if (kind != 0)
 {
   switch (kind)
     {
     case OMP_CLAUSE__CACHE_:


       if (cp_lexer_peek_token (parser->lexer)->type != CPP_OPEN_SQUARE)
  {
    error_at (token->location, "expected %<[%>");
    decl = global_trees[TI_ERROR_MARK];
    break;
  }

     case OMP_CLAUSE_MAP:
     case OMP_CLAUSE_FROM:
     case OMP_CLAUSE_TO:
       while (cp_lexer_next_token_is (parser->lexer, CPP_DOT)
       || (allow_deref
    && cp_lexer_next_token_is (parser->lexer, CPP_DEREF)))
  {
    cpp_ttype ttype
      = cp_lexer_next_token_is (parser->lexer, CPP_DOT)
        ? CPP_DOT : CPP_DEREF;
    location_t loc
      = cp_lexer_peek_token (parser->lexer)->location;
    cp_id_kind idk = CP_ID_KIND_NONE;
    cp_lexer_consume_token (parser->lexer);
    decl = convert_from_reference (decl);
    decl
      = cp_parser_postfix_dot_deref_expression (parser, ttype,
             decl, false,
             &idk, loc);
  }

     case OMP_CLAUSE_DEPEND:
     case OMP_CLAUSE_REDUCTION:
     case OMP_CLAUSE_IN_REDUCTION:
     case OMP_CLAUSE_TASK_REDUCTION:
       while (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_SQUARE))
  {
    tree low_bound = (tree) 
# 34416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 34416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , length = (tree) 
# 34416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 34416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 ;

    parser->colon_corrects_to_scope_p = false;
    cp_lexer_consume_token (parser->lexer);
    if (!cp_lexer_next_token_is (parser->lexer, CPP_COLON))
      low_bound = cp_parser_expression (parser);
    if (!colon)
      parser->colon_corrects_to_scope_p
        = saved_colon_corrects_to_scope_p;
    if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_SQUARE))
      length = global_trees[TI_INTEGER_ONE];
    else
      {

        if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
   {
     if (kind == OMP_CLAUSE_DEPEND
         && cp_parser_simulate_error (parser))
       goto depend_lvalue;
     goto skip_comma;
   }
        if (kind == OMP_CLAUSE_DEPEND)
   cp_parser_commit_to_tentative_parse (parser);
        if (!cp_lexer_next_token_is (parser->lexer,
         CPP_CLOSE_SQUARE))
   length = cp_parser_expression (parser);
      }

    if (!cp_parser_require (parser, CPP_CLOSE_SQUARE,
       RT_CLOSE_SQUARE))
      {
        if (kind == OMP_CLAUSE_DEPEND
     && cp_parser_simulate_error (parser))
   goto depend_lvalue;
        goto skip_comma;
      }

    decl = tree_cons (low_bound, length, decl);
  }
       break;
     default:
       break;
     }

   if (kind == OMP_CLAUSE_DEPEND)
     {
       if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA)
    && cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN)
    && cp_parser_simulate_error (parser))
  {
  depend_lvalue:
    cp_parser_abort_tentative_parse (parser);
    decl = cp_parser_assignment_expression (parser, 
# 34468 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 34468 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       ,
         false, false);
  }
       else
  cp_parser_parse_definitely (parser);
     }

   tree u = build_omp_clause (token->location, kind);
   (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((u), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34476, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34476, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34476, __FUNCTION__))) = decl;
   ((contains_struct_check (((tree_check ((u), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34477, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34477, __FUNCTION__))->common.chain) = list;
   list = u;
 }
      else
 list = tree_cons (decl, (tree) 
# 34481 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 34481 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 , list);

    get_comma:
      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;
      cp_lexer_consume_token (parser->lexer);
    }

  if (colon)
    parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;

  if (colon != 
# 34492 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null 
# 34492 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   && cp_lexer_next_token_is (parser->lexer, CPP_COLON))
    {
      *colon = true;
      cp_parser_require (parser, CPP_COLON, RT_COLON);
      return list;
    }

  if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))
    {
      int ending;



    skip_comma:
      if (colon)
 parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
      ending = cp_parser_skip_to_closing_parenthesis (parser,
                           true,
                         true,
                              true);
      if (ending < 0)
 goto get_comma;
    }

  return list;
}




static tree
cp_parser_omp_var_list (cp_parser *parser, enum omp_clause_code kind, tree list,
   bool allow_deref = false)
{
  if (cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return cp_parser_omp_var_list_no_open (parser, kind, list, 
# 34527 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                              __null
# 34527 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                  ,
        allow_deref);
  return list;
}
# 34545 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_data_clause (cp_parser *parser, pragma_omp_clause c_kind,
       tree list)
{
  enum gomp_map_kind kind;
  switch (c_kind)
    {
    case PRAGMA_OACC_CLAUSE_ATTACH:
      kind = GOMP_MAP_ATTACH;
      break;
    case PRAGMA_OACC_CLAUSE_COPY:
      kind = GOMP_MAP_TOFROM;
      break;
    case PRAGMA_OACC_CLAUSE_COPYIN:
      kind = GOMP_MAP_TO;
      break;
    case PRAGMA_OACC_CLAUSE_COPYOUT:
      kind = GOMP_MAP_FROM;
      break;
    case PRAGMA_OACC_CLAUSE_CREATE:
      kind = GOMP_MAP_ALLOC;
      break;
    case PRAGMA_OACC_CLAUSE_DELETE:
      kind = GOMP_MAP_RELEASE;
      break;
    case PRAGMA_OACC_CLAUSE_DETACH:
      kind = GOMP_MAP_DETACH;
      break;
    case PRAGMA_OACC_CLAUSE_DEVICE:
      kind = GOMP_MAP_FORCE_TO;
      break;
    case PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT:
      kind = GOMP_MAP_DEVICE_RESIDENT;
      break;
    case PRAGMA_OACC_CLAUSE_HOST:
      kind = GOMP_MAP_FORCE_FROM;
      break;
    case PRAGMA_OACC_CLAUSE_LINK:
      kind = GOMP_MAP_LINK;
      break;
    case PRAGMA_OACC_CLAUSE_NO_CREATE:
      kind = GOMP_MAP_IF_PRESENT;
      break;
    case PRAGMA_OACC_CLAUSE_PRESENT:
      kind = GOMP_MAP_FORCE_PRESENT;
      break;
    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34592, __FUNCTION__));
    }
  tree nl, c;
  nl = cp_parser_omp_var_list (parser, OMP_CLAUSE_MAP, list, true);

  for (c = nl; c != list; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34597, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34597, __FUNCTION__))->common.chain))
    ((omp_clause_subcode_check ((c), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34598, __FUNCTION__))->omp_clause.subcode.map_kind = (unsigned int) (kind));

  return nl;
}




static tree
cp_parser_oacc_data_clause_deviceptr (cp_parser *parser, tree list)
{
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;
  tree vars, t;




  vars = cp_parser_omp_var_list (parser, OMP_CLAUSE_ERROR, 
# 34615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                          __null
# 34615 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                              );
  for (t = vars; t; t = ((contains_struct_check ((t), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34616, __FUNCTION__))->common.chain))
    {
      tree v = ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34618, __FUNCTION__, (TREE_LIST)))->list.purpose);
      tree u = build_omp_clause (loc, OMP_CLAUSE_MAP);
      ((omp_clause_subcode_check ((u), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34620, __FUNCTION__))->omp_clause.subcode.map_kind = (unsigned int) (GOMP_MAP_FORCE_DEVICEPTR));
      (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((u), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34621, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34621, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34621, __FUNCTION__))) = v;
      ((contains_struct_check (((tree_check ((u), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34622, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34622, __FUNCTION__))->common.chain) = list;
      list = u;
    }

  return list;
}
# 34636 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_simple_clause (location_t loc, enum omp_clause_code code,
         tree list)
{
  check_no_duplicate_clause (list, code, omp_clause_code_name[code], loc);

  tree c = build_omp_clause (loc, code);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34643, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34643, __FUNCTION__))->common.chain) = list;

  return c;
}






static tree
cp_parser_oacc_single_int_clause (cp_parser *parser, omp_clause_code code,
      const char *str, tree list)
{
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  tree t = cp_parser_assignment_expression (parser, 
# 34663 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 34663 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       , false, false);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    {
      cp_parser_skip_to_closing_parenthesis (parser, true,
                       false,
                            true);
      return list;
    }

  check_no_duplicate_clause (list, code, str, loc);

  tree c = build_omp_clause (loc, code);
  (*(omp_clause_elt_check ((c), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34677, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34678, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34678, __FUNCTION__))->common.chain) = list;
  return c;
}
# 34699 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_shape_clause (cp_parser *parser, location_t loc,
        omp_clause_code kind,
        const char *str, tree list)
{
  const char *id = "num";
  cp_lexer *lexer = parser->lexer;
  tree ops[2] = { (tree) 
# 34706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 34706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          , (tree) 
# 34706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null 
# 34706 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      }, c;

  if (kind == OMP_CLAUSE_VECTOR)
    id = "length";

  if (cp_lexer_next_token_is (lexer, CPP_OPEN_PAREN))
    {
      matching_parens parens;
      parens.consume_open (parser);

      do
 {
   cp_token *next = cp_lexer_peek_token (lexer);
   int idx = 0;


   if (kind == OMP_CLAUSE_GANG
       && cp_lexer_next_token_is_keyword (lexer, RID_STATIC))
     {
       cp_lexer_consume_token (lexer);

       if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
  goto cleanup_error;

       idx = 1;
       if (ops[idx] != 
# 34731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 34731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          )
  {
    cp_parser_error (parser, "too many %<static%> arguments");
    goto cleanup_error;
  }


       if (cp_lexer_next_token_is (lexer, CPP_MULT)
    && (cp_lexer_nth_token_is (parser->lexer, 2, CPP_COMMA)
        || cp_lexer_nth_token_is (parser->lexer, 2,
      CPP_CLOSE_PAREN)))
  {
    cp_lexer_consume_token (lexer);
    ops[idx] = global_trees[TI_INTEGER_MINUS_ONE];

    if (cp_lexer_next_token_is (lexer, CPP_COMMA))
      {
        cp_lexer_consume_token (lexer);
        continue;
      }
    else break;
  }
     }

   else if (cp_lexer_next_token_is (lexer, CPP_NAME)
     && id_equal (next->u.value, id)
     && cp_lexer_nth_token_is (lexer, 2, CPP_COLON))
     {
       cp_lexer_consume_token (lexer);
       cp_lexer_consume_token (lexer);
     }


   if (ops[idx] != (tree) 
# 34764 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 34764 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           )
     {
       cp_parser_error (parser, "unexpected argument");
       goto cleanup_error;
     }

   tree expr = cp_parser_assignment_expression (parser, 
# 34770 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 34770 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           , false,
             false);
   if (expr == global_trees[TI_ERROR_MARK])
     goto cleanup_error;

   mark_exp_read (expr);
   ops[idx] = expr;

   if (kind == OMP_CLAUSE_GANG
       && cp_lexer_next_token_is (lexer, CPP_COMMA))
     {
       cp_lexer_consume_token (lexer);
       continue;
     }
   break;
 }
      while (1);

      if (!parens.require_close (parser))
 goto cleanup_error;
    }

  check_no_duplicate_clause (list, kind, str, loc);

  c = build_omp_clause (loc, kind);

  if (ops[1])
    (*(omp_clause_elt_check ((c), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34797, __FUNCTION__))) = ops[1];

  (*(omp_clause_elt_check ((c), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34799, __FUNCTION__))) = ops[0];
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34800, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34800, __FUNCTION__))->common.chain) = list;

  return c;

 cleanup_error:
  cp_parser_skip_to_closing_parenthesis (parser, false, false, true);
  return list;
}




static tree
cp_parser_oacc_clause_tile (cp_parser *parser, location_t clause_loc, tree list)
{
  tree c, expr = global_trees[TI_ERROR_MARK];
  tree tile = (tree) 
# 34816 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 34816 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;





  check_no_duplicate_clause (list, OMP_CLAUSE_TILE, "tile", clause_loc);
  check_no_duplicate_clause (list, OMP_CLAUSE_COLLAPSE, "collapse",
        clause_loc);

  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return list;

  do
    {
      if (tile && !cp_parser_require (parser, CPP_COMMA, RT_COMMA))
 return list;

      if (cp_lexer_next_token_is (parser->lexer, CPP_MULT)
   && (cp_lexer_nth_token_is (parser->lexer, 2, CPP_COMMA)
       || cp_lexer_nth_token_is (parser->lexer, 2, CPP_CLOSE_PAREN)))
 {
   cp_lexer_consume_token (parser->lexer);
   expr = global_trees[TI_INTEGER_ZERO];
 }
      else
 expr = cp_parser_constant_expression (parser);

      tile = tree_cons ((tree) 
# 34844 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 34844 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                , expr, tile);
    }
  while (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN));


  cp_lexer_consume_token (parser->lexer);

  c = build_omp_clause (clause_loc, OMP_CLAUSE_TILE);
  tile = nreverse (tile);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_TILE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34853, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34853, __FUNCTION__))) = tile;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34854, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34854, __FUNCTION__))->common.chain) = list;
  return c;
}




static tree
cp_parser_oacc_wait_list (cp_parser *parser, location_t clause_loc, tree list)
{
  vec<tree, va_gc> *args;
  tree t, args_tree;

  args = cp_parser_parenthesized_expression_list (parser, non_attr,
                   false,
                              true,
                           
# 34870 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 34870 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              );

  if (args == 
# 34872 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null 
# 34872 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  || args->length () == 0)
    {
      if (args != 
# 34874 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 34874 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     )
 {
   cp_parser_error (parser, "expected integer expression list");
   release_tree_vector (args);
 }
      return list;
    }

  args_tree = build_tree_list_vec (args);

  release_tree_vector (args);

  for (t = args_tree; t; t = ((contains_struct_check ((t), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34886, __FUNCTION__))->common.chain))
    {
      tree targ = ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34888, __FUNCTION__, (TREE_LIST)))->list.value);

      if (targ != global_trees[TI_ERROR_MARK])
 {
   if (!(((enum tree_code) (((contains_struct_check ((targ), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34892, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((targ), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34892, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((targ), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34892, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE))
     error ("%<wait%> expression must be integral");
   else
     {
       tree c = build_omp_clause (clause_loc, OMP_CLAUSE_WAIT);

       targ = mark_rvalue_use (targ);
       (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34899, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34899, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34899, __FUNCTION__))) = targ;
       ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34900, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34900, __FUNCTION__))->common.chain) = list;
       list = c;
     }
 }
    }

  return list;
}




static tree
cp_parser_oacc_clause_wait (cp_parser *parser, tree list)
{
  location_t location = cp_lexer_peek_token (parser->lexer)->location;

  if (cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)
    list = cp_parser_oacc_wait_list (parser, location, list);
  else
    {
      tree c = build_omp_clause (location, OMP_CLAUSE_WAIT);

      (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34923, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34923, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34923, __FUNCTION__))) = build_int_cst (integer_types[itk_int], -1);
      ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34924, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34924, __FUNCTION__))->common.chain) = list;
      list = c;
    }

  return list;
}




static tree
cp_parser_omp_clause_collapse (cp_parser *parser, tree list, location_t location)
{
  tree c, num;
  location_t loc;
  long n;

  loc = cp_lexer_peek_token (parser->lexer)->location;
  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  num = cp_parser_constant_expression (parser);

  if (!parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  if (num == global_trees[TI_ERROR_MARK])
    return list;
  num = fold_non_dependent_expr (num);
  if (!tree_fits_shwi_p (num)
      || !(((enum tree_code) (((contains_struct_check ((num), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34957, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((num), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34957, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((num), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34957, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)
      || (n = tree_to_shwi (num)) <= 0
      || (int) n != n)
    {
      error_at (loc, "collapse argument needs positive constant integer expression");
      return list;
    }

  check_no_duplicate_clause (list, OMP_CLAUSE_COLLAPSE, "collapse", location);
  check_no_duplicate_clause (list, OMP_CLAUSE_TILE, "tile", location);
  c = build_omp_clause (loc, OMP_CLAUSE_COLLAPSE);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34968, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34968, __FUNCTION__))->common.chain) = list;
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_COLLAPSE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34969, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34969, __FUNCTION__))) = num;

  return c;
}







static tree
cp_parser_omp_clause_default (cp_parser *parser, tree list,
         location_t location, bool is_oacc)
{
  enum omp_clause_default_kind kind = OMP_CLAUSE_DEFAULT_UNSPECIFIED;
  tree c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 34993, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      switch (p[0])
 {
 case 'n':
   if (strcmp ("none", p) != 0)
     goto invalid_kind;
   kind = OMP_CLAUSE_DEFAULT_NONE;
   break;

 case 'p':
   if (strcmp ("present", p) != 0 || !is_oacc)
     goto invalid_kind;
   kind = OMP_CLAUSE_DEFAULT_PRESENT;
   break;

 case 's':
   if (strcmp ("shared", p) != 0 || is_oacc)
     goto invalid_kind;
   kind = OMP_CLAUSE_DEFAULT_SHARED;
   break;

 default:
   goto invalid_kind;
 }

      cp_lexer_consume_token (parser->lexer);
    }
  else
    {
    invalid_kind:
      if (is_oacc)
 cp_parser_error (parser, "expected %<none%> or %<present%>");
      else
 cp_parser_error (parser, "expected %<none%> or %<shared%>");
    }

  if (kind == OMP_CLAUSE_DEFAULT_UNSPECIFIED
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  if (kind == OMP_CLAUSE_DEFAULT_UNSPECIFIED)
    return list;

  check_no_duplicate_clause (list, OMP_CLAUSE_DEFAULT, "default", location);
  c = build_omp_clause (location, OMP_CLAUSE_DEFAULT);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35041, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35041, __FUNCTION__))->common.chain) = list;
  ((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEFAULT), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35042, __FUNCTION__))->omp_clause.subcode.default_kind) = kind;

  return c;
}




static tree
cp_parser_omp_clause_final (cp_parser *parser, tree list, location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_FINAL, "final", location);

  c = build_omp_clause (location, OMP_CLAUSE_FINAL);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_FINAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35070, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35070, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35071, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35071, __FUNCTION__))->common.chain) = list;

  return c;
}
# 35090 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_clause_if (cp_parser *parser, tree list, location_t location,
    bool is_omp)
{
  tree t, c;
  enum tree_code if_modifier = ERROR_MARK;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  if (is_omp && cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35104, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      int n = 2;

      if (strcmp ("cancel", p) == 0)
 if_modifier = VOID_CST;
      else if (strcmp ("parallel", p) == 0)
 if_modifier = OMP_PARALLEL;
      else if (strcmp ("simd", p) == 0)
 if_modifier = OMP_SIMD;
      else if (strcmp ("task", p) == 0)
 if_modifier = OMP_TASK;
      else if (strcmp ("taskloop", p) == 0)
 if_modifier = OMP_TASKLOOP;
      else if (strcmp ("target", p) == 0)
 {
   if_modifier = OMP_TARGET;
   if (cp_lexer_nth_token_is (parser->lexer, 2, CPP_NAME))
     {
       id = cp_lexer_peek_nth_token (parser->lexer, 2)->u.value;
       p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35123, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
       if (strcmp ("data", p) == 0)
  if_modifier = OMP_TARGET_DATA;
       else if (strcmp ("update", p) == 0)
  if_modifier = OMP_TARGET_UPDATE;
       else if (strcmp ("enter", p) == 0)
  if_modifier = OMP_TARGET_ENTER_DATA;
       else if (strcmp ("exit", p) == 0)
  if_modifier = OMP_TARGET_EXIT_DATA;
       if (if_modifier != OMP_TARGET)
  n = 3;
       else
  {
    location_t loc
      = cp_lexer_peek_nth_token (parser->lexer, 2)->location;
    error_at (loc, "expected %<data%>, %<update%>, %<enter%> "
     "or %<exit%>");
    if_modifier = ERROR_MARK;
  }
       if (if_modifier == OMP_TARGET_ENTER_DATA
    || if_modifier == OMP_TARGET_EXIT_DATA)
  {
    if (cp_lexer_nth_token_is (parser->lexer, 3, CPP_NAME))
      {
        id = cp_lexer_peek_nth_token (parser->lexer, 3)->u.value;
        p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35148, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
        if (strcmp ("data", p) == 0)
   n = 4;
      }
    if (n != 4)
      {
        location_t loc
   = cp_lexer_peek_nth_token (parser->lexer, 3)->location;
        error_at (loc, "expected %<data%>");
        if_modifier = ERROR_MARK;
      }
  }
     }
 }
      if (if_modifier != ERROR_MARK)
 {
   if (cp_lexer_nth_token_is (parser->lexer, n, CPP_COLON))
     {
       while (n-- > 0)
  cp_lexer_consume_token (parser->lexer);
     }
   else
     {
       if (n > 2)
  {
    location_t loc
      = cp_lexer_peek_nth_token (parser->lexer, n)->location;
    error_at (loc, "expected %<:%>");
  }
       if_modifier = ERROR_MARK;
     }
 }
    }

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  for (c = list; c ; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35190, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35190, __FUNCTION__))->common.chain))
    if (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35191, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_IF)
      {
 if (if_modifier != ERROR_MARK
     && ((omp_clause_subcode_check ((c), (OMP_CLAUSE_IF), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35194, __FUNCTION__))->omp_clause.subcode.if_modifier) == if_modifier)
   {
     const char *p = 
# 35196 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 35196 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
     switch (if_modifier)
       {
       case VOID_CST: p = "cancel"; break;
       case OMP_PARALLEL: p = "parallel"; break;
       case OMP_SIMD: p = "simd"; break;
       case OMP_TASK: p = "task"; break;
       case OMP_TASKLOOP: p = "taskloop"; break;
       case OMP_TARGET_DATA: p = "target data"; break;
       case OMP_TARGET: p = "target"; break;
       case OMP_TARGET_UPDATE: p = "target update"; break;
       case OMP_TARGET_ENTER_DATA: p = "target enter data"; break;
       case OMP_TARGET_EXIT_DATA: p = "target exit data"; break;
       default: (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35209, __FUNCTION__));
       }
     error_at (location, "too many %<if%> clauses with %qs modifier",
        p);
     return list;
   }
 else if (((omp_clause_subcode_check ((c), (OMP_CLAUSE_IF), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35215, __FUNCTION__))->omp_clause.subcode.if_modifier) == if_modifier)
   {
     if (!is_omp)
       error_at (location, "too many %<if%> clauses");
     else
       error_at (location, "too many %<if%> clauses without modifier");
     return list;
   }
 else if (if_modifier == ERROR_MARK
   || ((omp_clause_subcode_check ((c), (OMP_CLAUSE_IF), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35224, __FUNCTION__))->omp_clause.subcode.if_modifier) == ERROR_MARK)
   {
     error_at (location, "if any %<if%> clause has modifier, then all "
    "%<if%> clauses have to use modifier");
     return list;
   }
      }

  c = build_omp_clause (location, OMP_CLAUSE_IF);
  ((omp_clause_subcode_check ((c), (OMP_CLAUSE_IF), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35233, __FUNCTION__))->omp_clause.subcode.if_modifier) = if_modifier;
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_IF), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35234, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35234, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35235, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35235, __FUNCTION__))->common.chain) = list;

  return c;
}




static tree
cp_parser_omp_clause_mergeable (cp_parser * ,
    tree list, location_t location)
{
  tree c;

  check_no_duplicate_clause (list, OMP_CLAUSE_MERGEABLE, "mergeable",
        location);

  c = build_omp_clause (location, OMP_CLAUSE_MERGEABLE);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35253, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35253, __FUNCTION__))->common.chain) = list;
  return c;
}




static tree
cp_parser_omp_clause_nowait (cp_parser * ,
        tree list, location_t location)
{
  tree c;

  check_no_duplicate_clause (list, OMP_CLAUSE_NOWAIT, "nowait", location);

  c = build_omp_clause (location, OMP_CLAUSE_NOWAIT);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35269, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35269, __FUNCTION__))->common.chain) = list;
  return c;
}




static tree
cp_parser_omp_clause_num_threads (cp_parser *parser, tree list,
      location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_NUM_THREADS,
        "num_threads", location);

  c = build_omp_clause (location, OMP_CLAUSE_NUM_THREADS);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_NUM_THREADS), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35298, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35298, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35299, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35299, __FUNCTION__))->common.chain) = list;

  return c;
}




static tree
cp_parser_omp_clause_num_tasks (cp_parser *parser, tree list,
    location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_NUM_TASKS,
        "num_tasks", location);

  c = build_omp_clause (location, OMP_CLAUSE_NUM_TASKS);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_NUM_TASKS), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35329, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35329, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35330, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35330, __FUNCTION__))->common.chain) = list;

  return c;
}




static tree
cp_parser_omp_clause_grainsize (cp_parser *parser, tree list,
    location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_GRAINSIZE,
        "grainsize", location);

  c = build_omp_clause (location, OMP_CLAUSE_GRAINSIZE);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_GRAINSIZE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35360, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35360, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35361, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35361, __FUNCTION__))->common.chain) = list;

  return c;
}




static tree
cp_parser_omp_clause_priority (cp_parser *parser, tree list,
          location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_PRIORITY,
        "priority", location);

  c = build_omp_clause (location, OMP_CLAUSE_PRIORITY);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_PRIORITY), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35391, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35391, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35392, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35392, __FUNCTION__))->common.chain) = list;

  return c;
}




static tree
cp_parser_omp_clause_hint (cp_parser *parser, tree list, location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t != global_trees[TI_ERROR_MARK])
    {
      t = fold_non_dependent_expr (t);
      if (!value_dependent_expression_p (t)
   && (!(((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35415, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35415, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35415, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)
       || !tree_fits_shwi_p (t)
       || tree_int_cst_sgn (t) == -1))
 error_at (location, "expected constant integer expression with "
       "valid sync-hint value");
    }
  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);
  check_no_duplicate_clause (list, OMP_CLAUSE_HINT, "hint", location);

  c = build_omp_clause (location, OMP_CLAUSE_HINT);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_HINT), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35429, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35429, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35430, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35430, __FUNCTION__))->common.chain) = list;

  return c;
}







static tree
cp_parser_omp_clause_defaultmap (cp_parser *parser, tree list,
     location_t location)
{
  tree c, id;
  const char *p;
  enum omp_clause_defaultmap_kind behavior = OMP_CLAUSE_DEFAULTMAP_DEFAULT;
  enum omp_clause_defaultmap_kind category
    = OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_DEFAULT))
    p = "default";
  else if (!cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
    invalid_behavior:
      cp_parser_error (parser, "expected %<alloc%>, %<to%>, %<from%>, "
          "%<tofrom%>, %<firstprivate%>, %<none%> "
          "or %<default%>");
      goto out_err;
    }
  else
    {
      id = cp_lexer_peek_token (parser->lexer)->u.value;
      p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35468, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
    }

  switch (p[0])
    {
    case 'a':
      if (strcmp ("alloc", p) == 0)
 behavior = OMP_CLAUSE_DEFAULTMAP_ALLOC;
      else
 goto invalid_behavior;
      break;

    case 'd':
      if (strcmp ("default", p) == 0)
 behavior = OMP_CLAUSE_DEFAULTMAP_DEFAULT;
      else
 goto invalid_behavior;
      break;

    case 'f':
      if (strcmp ("firstprivate", p) == 0)
 behavior = OMP_CLAUSE_DEFAULTMAP_FIRSTPRIVATE;
      else if (strcmp ("from", p) == 0)
 behavior = OMP_CLAUSE_DEFAULTMAP_FROM;
      else
 goto invalid_behavior;
      break;

    case 'n':
      if (strcmp ("none", p) == 0)
 behavior = OMP_CLAUSE_DEFAULTMAP_NONE;
      else
 goto invalid_behavior;
      break;

    case 't':
      if (strcmp ("tofrom", p) == 0)
 behavior = OMP_CLAUSE_DEFAULTMAP_TOFROM;
      else if (strcmp ("to", p) == 0)
 behavior = OMP_CLAUSE_DEFAULTMAP_TO;
      else
 goto invalid_behavior;
      break;

    default:
      goto invalid_behavior;
    }
  cp_lexer_consume_token (parser->lexer);

  if (!cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))
    {
      if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
 goto out_err;

      if (!cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 {
 invalid_category:
   cp_parser_error (parser, "expected %<scalar%>, %<aggregate%> or "
       "%<pointer%>");
   goto out_err;
 }
      id = cp_lexer_peek_token (parser->lexer)->u.value;
      p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35530, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      switch (p[0])
 {
 case 'a':
   if (strcmp ("aggregate", p) == 0)
     category = OMP_CLAUSE_DEFAULTMAP_CATEGORY_AGGREGATE;
   else
     goto invalid_category;
   break;

 case 'p':
   if (strcmp ("pointer", p) == 0)
     category = OMP_CLAUSE_DEFAULTMAP_CATEGORY_POINTER;
   else
     goto invalid_category;
   break;

 case 's':
   if (strcmp ("scalar", p) == 0)
     category = OMP_CLAUSE_DEFAULTMAP_CATEGORY_SCALAR;
   else
     goto invalid_category;
   break;

 default:
   goto invalid_category;
 }

      cp_lexer_consume_token (parser->lexer);
    }
  if (!parens.require_close (parser))
    goto out_err;

  for (c = list; c ; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35564, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35564, __FUNCTION__))->common.chain))
    if (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35565, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_DEFAULTMAP
 && (category == OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED
     || ((enum omp_clause_defaultmap_kind) (((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEFAULTMAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35567, __FUNCTION__))->omp_clause.subcode.defaultmap_kind) & OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK)) == category
     || (((enum omp_clause_defaultmap_kind) (((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEFAULTMAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35568, __FUNCTION__))->omp_clause.subcode.defaultmap_kind) & OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK))
  == OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED)))
      {
 enum omp_clause_defaultmap_kind cat = category;
 location_t loc = ((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35572, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus;
 if (cat == OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED)
   cat = ((enum omp_clause_defaultmap_kind) (((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEFAULTMAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35574, __FUNCTION__))->omp_clause.subcode.defaultmap_kind) & OMP_CLAUSE_DEFAULTMAP_CATEGORY_MASK));
 p = 
# 35575 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
    __null
# 35575 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        ;
 switch (cat)
   {
   case OMP_CLAUSE_DEFAULTMAP_CATEGORY_UNSPECIFIED:
     p = 
# 35579 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 35579 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
            ;
     break;
   case OMP_CLAUSE_DEFAULTMAP_CATEGORY_AGGREGATE:
     p = "aggregate";
     break;
   case OMP_CLAUSE_DEFAULTMAP_CATEGORY_POINTER:
     p = "pointer";
     break;
   case OMP_CLAUSE_DEFAULTMAP_CATEGORY_SCALAR:
     p = "scalar";
     break;
   default:
     (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35591, __FUNCTION__));
   }
 if (p)
   error_at (loc, "too many %<defaultmap%> clauses with %qs category",
      p);
 else
   error_at (loc, "too many %<defaultmap%> clauses with unspecified "
    "category");
 break;
      }

  c = build_omp_clause (location, OMP_CLAUSE_DEFAULTMAP);
  (((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEFAULTMAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35603, __FUNCTION__))->omp_clause.subcode.defaultmap_kind) = (enum omp_clause_defaultmap_kind) (category | behavior));
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35604, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35604, __FUNCTION__))->common.chain) = list;
  return c;

 out_err:
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}




static tree
cp_parser_omp_clause_order (cp_parser *parser, tree list, location_t location)
{
  tree c, id;
  const char *p;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  if (!cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      cp_parser_error (parser, "expected %<concurrent%>");
      goto out_err;
    }
  else
    {
      id = cp_lexer_peek_token (parser->lexer)->u.value;
      p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35635, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
    }
  if (strcmp (p, "concurrent") != 0)
    {
      cp_parser_error (parser, "expected %<concurrent%>");
      goto out_err;
    }
  cp_lexer_consume_token (parser->lexer);
  if (!parens.require_close (parser))
    goto out_err;


  c = build_omp_clause (location, OMP_CLAUSE_ORDER);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35648, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35648, __FUNCTION__))->common.chain) = list;
  return c;

 out_err:
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}




static tree
cp_parser_omp_clause_bind (cp_parser *parser, tree list,
      location_t location)
{
  tree c;
  const char *p;
  enum omp_clause_bind_kind kind = OMP_CLAUSE_BIND_THREAD;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  if (!cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
    invalid:
      cp_parser_error (parser,
         "expected %<teams%>, %<parallel%> or %<thread%>");
      goto out_err;
    }
  else
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35683, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
    }
  if (strcmp (p, "teams") == 0)
    kind = OMP_CLAUSE_BIND_TEAMS;
  else if (strcmp (p, "parallel") == 0)
    kind = OMP_CLAUSE_BIND_PARALLEL;
  else if (strcmp (p, "thread") != 0)
    goto invalid;
  cp_lexer_consume_token (parser->lexer);
  if (!parens.require_close (parser))
    goto out_err;


  c = build_omp_clause (location, OMP_CLAUSE_BIND);
  ((omp_clause_subcode_check ((c), (OMP_CLAUSE_BIND), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35697, __FUNCTION__))->omp_clause.subcode.bind_kind) = kind;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35698, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35698, __FUNCTION__))->common.chain) = list;
  return c;

 out_err:
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}







static tree
cp_parser_omp_clause_ordered (cp_parser *parser,
         tree list, location_t location)
{
  tree c, num = (tree) 
# 35718 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 35718 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  long n;

  check_no_duplicate_clause (list, OMP_CLAUSE_ORDERED,
        "ordered", location);

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      matching_parens parens;
      parens.consume_open (parser);

      num = cp_parser_constant_expression (parser);

      if (!parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                         false,
                              true);

      if (num == global_trees[TI_ERROR_MARK])
 return list;
      num = fold_non_dependent_expr (num);
      if (!tree_fits_shwi_p (num)
   || !(((enum tree_code) (((contains_struct_check ((num), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35740, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((num), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35740, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((num), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35740, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)
   || (n = tree_to_shwi (num)) <= 0
   || (int) n != n)
 {
   error_at (location,
      "ordered argument needs positive constant integer "
      "expression");
   return list;
 }
    }

  c = build_omp_clause (location, OMP_CLAUSE_ORDERED);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_ORDERED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35752, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35752, __FUNCTION__))) = num;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35753, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35753, __FUNCTION__))->common.chain) = list;
  return c;
}
# 35779 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_clause_reduction (cp_parser *parser, enum omp_clause_code kind,
    bool is_omp, tree list)
{
  enum tree_code code = ERROR_MARK;
  tree nlist, c, id = (tree) 
# 35784 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 35784 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
  bool task = false;
  bool inscan = false;

  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return list;

  if (kind == OMP_CLAUSE_REDUCTION && is_omp)
    {
      if (cp_lexer_next_token_is_keyword (parser->lexer, RID_DEFAULT)
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COMMA))
 {
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
 }
      else if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)
        && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COMMA))
 {
   tree id = cp_lexer_peek_token (parser->lexer)->u.value;
   const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35803, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
   if (strcmp (p, "task") == 0)
     task = true;
   else if (strcmp (p, "inscan") == 0)
     inscan = true;
   if (task || inscan)
     {
       cp_lexer_consume_token (parser->lexer);
       cp_lexer_consume_token (parser->lexer);
     }
 }
    }

  switch (cp_lexer_peek_token (parser->lexer)->type)
    {
    case CPP_PLUS: code = PLUS_EXPR; break;
    case CPP_MULT: code = MULT_EXPR; break;
    case CPP_MINUS: code = MINUS_EXPR; break;
    case CPP_AND: code = BIT_AND_EXPR; break;
    case CPP_XOR: code = BIT_XOR_EXPR; break;
    case CPP_OR: code = BIT_IOR_EXPR; break;
    case CPP_AND_AND: code = TRUTH_ANDIF_EXPR; break;
    case CPP_OR_OR: code = TRUTH_ORIF_EXPR; break;
    default: break;
    }

  if (code != ERROR_MARK)
    cp_lexer_consume_token (parser->lexer);
  else
    {
      bool saved_colon_corrects_to_scope_p;
      saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;
      parser->colon_corrects_to_scope_p = false;
      id = cp_parser_id_expression (parser, false,
                               true,
                       
# 35838 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 35838 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ,
                         false,
                       false);
      parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
      if (identifier_p (id))
 {
   const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35844, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

   if (strcmp (p, "min") == 0)
     code = MIN_EXPR;
   else if (strcmp (p, "max") == 0)
     code = MAX_EXPR;
   else if (id == ovl_op_identifier (false, PLUS_EXPR))
     code = PLUS_EXPR;
   else if (id == ovl_op_identifier (false, MULT_EXPR))
     code = MULT_EXPR;
   else if (id == ovl_op_identifier (false, MINUS_EXPR))
     code = MINUS_EXPR;
   else if (id == ovl_op_identifier (false, BIT_AND_EXPR))
     code = BIT_AND_EXPR;
   else if (id == ovl_op_identifier (false, BIT_IOR_EXPR))
     code = BIT_IOR_EXPR;
   else if (id == ovl_op_identifier (false, BIT_XOR_EXPR))
     code = BIT_XOR_EXPR;
   else if (id == ovl_op_identifier (false, TRUTH_ANDIF_EXPR))
     code = TRUTH_ANDIF_EXPR;
   else if (id == ovl_op_identifier (false, TRUTH_ORIF_EXPR))
     code = TRUTH_ORIF_EXPR;
   id = omp_reduction_id (code, id, (tree) 
# 35866 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 35866 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            );
   tree scope = parser->scope;
   if (scope)
     id = build_qualified_name ((tree) 
# 35869 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 35869 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        , scope, id, false);
   parser->scope = (tree) 
# 35870 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 35870 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
   parser->qualifying_scope = (tree) 
# 35871 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 35871 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ;
   parser->object_scope = (tree) 
# 35872 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 35872 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;
 }
      else
 {
   error ("invalid reduction-identifier");
  resync_fail:
   cp_parser_skip_to_closing_parenthesis (parser, true,
                    false,
                         true);
   return list;
 }
    }

  if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
    goto resync_fail;

  nlist = cp_parser_omp_var_list_no_open (parser, kind, list,
       
# 35889 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 35889 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          );
  for (c = nlist; c != list; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35890, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35890, __FUNCTION__))->common.chain))
    {
      ((omp_clause_range_check ((c), (OMP_CLAUSE_REDUCTION), (OMP_CLAUSE_IN_REDUCTION), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35892, __FUNCTION__))->omp_clause.subcode.reduction_code) = code;
      if (task)
 (((omp_clause_subcode_check ((c), (OMP_CLAUSE_REDUCTION), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35894, __FUNCTION__)))->base.protected_flag) = 1;
      else if (inscan)
 (((omp_clause_subcode_check ((c), (OMP_CLAUSE_REDUCTION), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35896, __FUNCTION__)))->base.private_flag) = 1;
      (*(omp_clause_elt_check (((omp_clause_range_check ((c), (OMP_CLAUSE_REDUCTION), (OMP_CLAUSE_IN_REDUCTION), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35897, __FUNCTION__))), (3), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35897, __FUNCTION__))) = id;
    }

  return nlist;
}
# 35919 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_clause_schedule (cp_parser *parser, tree list, location_t location)
{
  tree c, t;
  int modifiers = 0, nmodifiers = 0;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  c = build_omp_clause (location, OMP_CLAUSE_SCHEDULE);

  location_t comma = ((location_t) 0);
  while (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35935, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      if (strcmp ("simd", p) == 0)
 ((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35937, __FUNCTION__))->base.public_flag) = 1;
      else if (strcmp ("monotonic", p) == 0)
 modifiers |= OMP_CLAUSE_SCHEDULE_MONOTONIC;
      else if (strcmp ("nonmonotonic", p) == 0)
 modifiers |= OMP_CLAUSE_SCHEDULE_NONMONOTONIC;
      else
 break;
      comma = ((location_t) 0);
      cp_lexer_consume_token (parser->lexer);
      if (nmodifiers++ == 0
   && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 {
   comma = cp_lexer_peek_token (parser->lexer)->location;
   cp_lexer_consume_token (parser->lexer);
 }
      else
 {
   cp_parser_require (parser, CPP_COLON, RT_COLON);
   break;
 }
    }
  if (comma != ((location_t) 0))
    error_at (comma, "expected %<:%>");

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35964, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      switch (p[0])
 {
 case 'd':
   if (strcmp ("dynamic", p) != 0)
     goto invalid_kind;
   ((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35971, __FUNCTION__))->omp_clause.subcode.schedule_kind) = OMP_CLAUSE_SCHEDULE_DYNAMIC;
   break;

 case 'g':
   if (strcmp ("guided", p) != 0)
     goto invalid_kind;
   ((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35977, __FUNCTION__))->omp_clause.subcode.schedule_kind) = OMP_CLAUSE_SCHEDULE_GUIDED;
   break;

 case 'r':
   if (strcmp ("runtime", p) != 0)
     goto invalid_kind;
   ((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35983, __FUNCTION__))->omp_clause.subcode.schedule_kind) = OMP_CLAUSE_SCHEDULE_RUNTIME;
   break;

 default:
   goto invalid_kind;
 }
    }
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_STATIC))
    ((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35991, __FUNCTION__))->omp_clause.subcode.schedule_kind) = OMP_CLAUSE_SCHEDULE_STATIC;
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_AUTO))
    ((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 35993, __FUNCTION__))->omp_clause.subcode.schedule_kind) = OMP_CLAUSE_SCHEDULE_AUTO;
  else
    goto invalid_kind;
  cp_lexer_consume_token (parser->lexer);

  if ((modifiers & (OMP_CLAUSE_SCHEDULE_MONOTONIC
      | OMP_CLAUSE_SCHEDULE_NONMONOTONIC))
      == (OMP_CLAUSE_SCHEDULE_MONOTONIC
   | OMP_CLAUSE_SCHEDULE_NONMONOTONIC))
    {
      error_at (location, "both %<monotonic%> and %<nonmonotonic%> modifiers "
     "specified");
      modifiers = 0;
    }

  if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
    {
      cp_token *token;
      cp_lexer_consume_token (parser->lexer);

      token = cp_lexer_peek_token (parser->lexer);
      t = cp_parser_assignment_expression (parser);

      if (t == global_trees[TI_ERROR_MARK])
 goto resync_fail;
      else if (((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36018, __FUNCTION__))->omp_clause.subcode.schedule_kind) == OMP_CLAUSE_SCHEDULE_RUNTIME)
 error_at (token->location, "schedule %<runtime%> does not take "
    "a %<chunk_size%> parameter");
      else if (((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36021, __FUNCTION__))->omp_clause.subcode.schedule_kind) == OMP_CLAUSE_SCHEDULE_AUTO)
 error_at (token->location, "schedule %<auto%> does not take "
    "a %<chunk_size%> parameter");
      else
 (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36025, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36025, __FUNCTION__))) = t;

      if (!parens.require_close (parser))
 goto resync_fail;
    }
  else if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_COMMA_CLOSE_PAREN))
    goto resync_fail;

  ((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36033, __FUNCTION__))->omp_clause.subcode.schedule_kind)
    = (enum omp_clause_schedule_kind)
      (((omp_clause_subcode_check ((c), (OMP_CLAUSE_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36035, __FUNCTION__))->omp_clause.subcode.schedule_kind) | modifiers);

  check_no_duplicate_clause (list, OMP_CLAUSE_SCHEDULE, "schedule", location);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36038, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36038, __FUNCTION__))->common.chain) = list;
  return c;

 invalid_kind:
  cp_parser_error (parser, "invalid schedule kind");
 resync_fail:
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}




static tree
cp_parser_omp_clause_untied (cp_parser * ,
        tree list, location_t location)
{
  tree c;

  check_no_duplicate_clause (list, OMP_CLAUSE_UNTIED, "untied", location);

  c = build_omp_clause (location, OMP_CLAUSE_UNTIED);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36062, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36062, __FUNCTION__))->common.chain) = list;
  return c;
}





static tree
cp_parser_omp_clause_branch (cp_parser * , enum omp_clause_code code,
        tree list, location_t location)
{
  check_no_duplicate_clause (list, code, omp_clause_code_name[code], location);
  tree c = build_omp_clause (location, code);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36076, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36076, __FUNCTION__))->common.chain) = list;
  return c;
}







static tree
cp_parser_omp_clause_cancelkind (cp_parser * ,
     enum omp_clause_code code,
     tree list, location_t location)
{
  tree c = build_omp_clause (location, code);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36092, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36092, __FUNCTION__))->common.chain) = list;
  return c;
}




static tree
cp_parser_omp_clause_nogroup (cp_parser * ,
         tree list, location_t location)
{
  check_no_duplicate_clause (list, OMP_CLAUSE_NOGROUP, "nogroup", location);
  tree c = build_omp_clause (location, OMP_CLAUSE_NOGROUP);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36105, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36105, __FUNCTION__))->common.chain) = list;
  return c;
}





static tree
cp_parser_omp_clause_orderedkind (cp_parser * ,
      enum omp_clause_code code,
      tree list, location_t location)
{
  check_no_duplicate_clause (list, code, omp_clause_code_name[code], location);
  tree c = build_omp_clause (location, code);
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36120, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36120, __FUNCTION__))->common.chain) = list;
  return c;
}




static tree
cp_parser_omp_clause_num_teams (cp_parser *parser, tree list,
    location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_NUM_TEAMS,
        "num_teams", location);

  c = build_omp_clause (location, OMP_CLAUSE_NUM_TEAMS);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_NUM_TEAMS), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36149, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36149, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36150, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36150, __FUNCTION__))->common.chain) = list;

  return c;
}




static tree
cp_parser_omp_clause_thread_limit (cp_parser *parser, tree list,
       location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_THREAD_LIMIT,
        "thread_limit", location);

  c = build_omp_clause (location, OMP_CLAUSE_THREAD_LIMIT);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_THREAD_LIMIT), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36180, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36180, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36181, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36181, __FUNCTION__))->common.chain) = list;

  return c;
}





static tree
cp_parser_omp_clause_aligned (cp_parser *parser, tree list)
{
  tree nlist, c, alignment = (tree) 
# 36193 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 36193 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  bool colon;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  nlist = cp_parser_omp_var_list_no_open (parser, OMP_CLAUSE_ALIGNED, list,
       &colon);

  if (colon)
    {
      alignment = cp_parser_constant_expression (parser);

      if (!parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                         false,
                              true);

      if (alignment == global_trees[TI_ERROR_MARK])
 alignment = (tree) 
# 36213 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 36213 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  for (c = nlist; c != list; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36216, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36216, __FUNCTION__))->common.chain))
    (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_ALIGNED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36217, __FUNCTION__))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36217, __FUNCTION__))) = alignment;

  return nlist;
}







static tree
cp_parser_omp_clause_lastprivate (cp_parser *parser, tree list)
{
  bool conditional = false;

  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return list;

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)
      && cp_lexer_nth_token_is (parser->lexer, 2, CPP_COLON))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36240, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp ("conditional", p) == 0)
 {
   conditional = true;
   cp_lexer_consume_token (parser->lexer);
   cp_lexer_consume_token (parser->lexer);
 }
    }

  tree nlist = cp_parser_omp_var_list_no_open (parser, OMP_CLAUSE_LASTPRIVATE,
            list, 
# 36251 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 36251 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     );

  if (conditional)
    for (tree c = nlist; c != list; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36254, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36254, __FUNCTION__))->common.chain))
      (((omp_clause_subcode_check ((c), (OMP_CLAUSE_LASTPRIVATE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36255, __FUNCTION__)))->base.private_flag) = 1;
  return nlist;
}
# 36267 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_clause_linear (cp_parser *parser, tree list,
        bool declare_simd)
{
  tree nlist, c, step = global_trees[TI_INTEGER_ONE];
  bool colon;
  enum omp_clause_linear_kind kind = OMP_CLAUSE_LINEAR_DEFAULT;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36282, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp ("ref", p) == 0)
 kind = OMP_CLAUSE_LINEAR_REF;
      else if (strcmp ("val", p) == 0)
 kind = OMP_CLAUSE_LINEAR_VAL;
      else if (strcmp ("uval", p) == 0)
 kind = OMP_CLAUSE_LINEAR_UVAL;
      if (cp_lexer_nth_token_is (parser->lexer, 2, CPP_OPEN_PAREN))
 cp_lexer_consume_token (parser->lexer);
      else
 kind = OMP_CLAUSE_LINEAR_DEFAULT;
    }

  if (kind == OMP_CLAUSE_LINEAR_DEFAULT)
    nlist = cp_parser_omp_var_list_no_open (parser, OMP_CLAUSE_LINEAR, list,
         &colon);
  else
    {
      nlist = cp_parser_omp_var_list (parser, OMP_CLAUSE_LINEAR, list);
      colon = cp_lexer_next_token_is (parser->lexer, CPP_COLON);
      if (colon)
 cp_parser_require (parser, CPP_COLON, RT_COLON);
      else if (!parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                         false,
                              true);
    }

  if (colon)
    {
      step = (tree) 
# 36313 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 36313 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
      if (declare_simd
   && cp_lexer_next_token_is (parser->lexer, CPP_NAME)
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_CLOSE_PAREN))
 {
   cp_token *token = cp_lexer_peek_token (parser->lexer);
   cp_parser_parse_tentatively (parser);
   step = cp_parser_id_expression (parser, false,
                              true,
                      
# 36322 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 36322 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ,
                        false,
                      false);
   if (step != global_trees[TI_ERROR_MARK])
     step = cp_parser_lookup_name_simple (parser, step, token->location);
   if (step == global_trees[TI_ERROR_MARK])
     {
       step = (tree) 
# 36329 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 36329 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
       cp_parser_abort_tentative_parse (parser);
     }
   else if (!cp_parser_parse_definitely (parser))
     step = (tree) 
# 36333 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 36333 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
 }
      if (!step)
 step = cp_parser_assignment_expression (parser);

      if (!parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                         false,
                              true);

      if (step == global_trees[TI_ERROR_MARK])
 return list;
    }

  for (c = nlist; c != list; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36347, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36347, __FUNCTION__))->common.chain))
    {
      (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_LINEAR), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36349, __FUNCTION__))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36349, __FUNCTION__))) = step;
      ((omp_clause_subcode_check ((c), (OMP_CLAUSE_LINEAR), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36350, __FUNCTION__))->omp_clause.subcode.linear_kind) = kind;
    }

  return nlist;
}




static tree
cp_parser_omp_clause_safelen (cp_parser *parser, tree list,
         location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_constant_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_SAFELEN, "safelen", location);

  c = build_omp_clause (location, OMP_CLAUSE_SAFELEN);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_SAFELEN), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36380, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36380, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36381, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36381, __FUNCTION__))->common.chain) = list;

  return c;
}




static tree
cp_parser_omp_clause_simdlen (cp_parser *parser, tree list,
         location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_constant_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_SIMDLEN, "simdlen", location);

  c = build_omp_clause (location, OMP_CLAUSE_SIMDLEN);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_SIMDLEN), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36410, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36410, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36411, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36411, __FUNCTION__))->common.chain) = list;

  return c;
}







static tree
cp_parser_omp_clause_depend_sink (cp_parser *parser, location_t clause_loc,
      tree list)
{
  tree vec = 
# 36426 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 36426 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;

  if (cp_lexer_next_token_is_not (parser->lexer, CPP_NAME))
    {
      cp_parser_error (parser, "expected identifier");
      return list;
    }

  while (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      location_t id_loc = cp_lexer_peek_token (parser->lexer)->location;
      tree t, identifier = cp_parser_identifier (parser);
      tree addend = 
# 36438 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 36438 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;

      if (identifier == global_trees[TI_ERROR_MARK])
 t = global_trees[TI_ERROR_MARK];
      else
 {
   t = cp_parser_lookup_name_simple
  (parser, identifier,
   cp_lexer_peek_token (parser->lexer)->location);
   if (t == global_trees[TI_ERROR_MARK])
     cp_parser_name_lookup_error (parser, identifier, t, NLE_NULL,
      id_loc);
 }

      bool neg = false;
      if (cp_lexer_next_token_is (parser->lexer, CPP_MINUS))
 neg = true;
      else if (!cp_lexer_next_token_is (parser->lexer, CPP_PLUS))
 {
   addend = global_trees[TI_INTEGER_ZERO];
   goto add_to_vector;
 }
      cp_lexer_consume_token (parser->lexer);

      if (cp_lexer_next_token_is_not (parser->lexer, CPP_NUMBER))
 {
   cp_parser_error (parser, "expected integer");
   return list;
 }

      addend = cp_lexer_peek_token (parser->lexer)->u.value;
      if (((enum tree_code) (addend)->base.code) != INTEGER_CST)
 {
   cp_parser_error (parser, "expected integer");
   return list;
 }
      cp_lexer_consume_token (parser->lexer);

    add_to_vector:
      if (t != global_trees[TI_ERROR_MARK])
 {
   vec = tree_cons (addend, t, vec);
   if (neg)
     (((tree_check ((vec), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36481, __FUNCTION__, (TREE_LIST))))->base.public_flag) = 1;
 }

      if (cp_lexer_next_token_is_not (parser->lexer, CPP_COMMA))
 break;

      cp_lexer_consume_token (parser->lexer);
    }

  if (cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN) && vec)
    {
      tree u = build_omp_clause (clause_loc, OMP_CLAUSE_DEPEND);
      ((omp_clause_subcode_check ((u), (OMP_CLAUSE_DEPEND), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36493, __FUNCTION__))->omp_clause.subcode.depend_kind) = OMP_CLAUSE_DEPEND_SINK;
      (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((u), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36494, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36494, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36494, __FUNCTION__))) = nreverse (vec);
      ((contains_struct_check (((tree_check ((u), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36495, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36495, __FUNCTION__))->common.chain) = list;
      return u;
    }
  return list;
}
# 36516 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_iterators (cp_parser *parser)
{
  tree ret = (tree) 
# 36519 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 36519 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     , *last = &ret;
  cp_lexer_consume_token (parser->lexer);

  matching_parens parens;
  if (!parens.require_open (parser))
    return global_trees[TI_ERROR_MARK];

  bool saved_colon_corrects_to_scope_p
    = parser->colon_corrects_to_scope_p;
  bool saved_colon_doesnt_start_class_def_p
    = parser->colon_doesnt_start_class_def_p;

  do
    {
      tree iter_type;
      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_EQ))
 iter_type = integer_types[itk_int];
      else
 {
   const char *saved_message
     = parser->type_definition_forbidden_message;
   parser->type_definition_forbidden_message
     = "types may not be defined in iterator type";

   iter_type = cp_parser_type_id (parser);

   parser->type_definition_forbidden_message = saved_message;
 }

      location_t loc = cp_lexer_peek_token (parser->lexer)->location;
      if (cp_lexer_next_token_is_not (parser->lexer, CPP_NAME))
 {
   cp_parser_error (parser, "expected identifier");
   break;
 }

      tree id = cp_parser_identifier (parser);
      if (id == global_trees[TI_ERROR_MARK])
 break;

      if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
 break;

      parser->colon_corrects_to_scope_p = false;
      parser->colon_doesnt_start_class_def_p = true;
      tree begin = cp_parser_assignment_expression (parser);

      if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
 break;

      tree end = cp_parser_assignment_expression (parser);

      tree step = global_trees[TI_INTEGER_ONE];
      if (cp_lexer_next_token_is (parser->lexer, CPP_COLON))
 {
   cp_lexer_consume_token (parser->lexer);
   step = cp_parser_assignment_expression (parser);
 }

      tree iter_var = build_decl (loc, VAR_DECL, id, iter_type);
      ((contains_struct_check ((iter_var), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36580, __FUNCTION__))->decl_common.artificial_flag) = 1;
      ((contains_struct_check ((iter_var), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36581, __FUNCTION__))->decl_minimal.context) = current_function_decl;
      pushdecl (iter_var);

      *last = make_tree_vec (6);
      (*((const_cast<tree *> (tree_vec_elt_check ((*last), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36585, __FUNCTION__))))) = iter_var;
      (*((const_cast<tree *> (tree_vec_elt_check ((*last), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36586, __FUNCTION__))))) = begin;
      (*((const_cast<tree *> (tree_vec_elt_check ((*last), (2), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36587, __FUNCTION__))))) = end;
      (*((const_cast<tree *> (tree_vec_elt_check ((*last), (3), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36588, __FUNCTION__))))) = step;
      last = &((contains_struct_check ((*last), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36589, __FUNCTION__))->common.chain);

      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 {
   cp_lexer_consume_token (parser->lexer);
   continue;
 }
      break;
    }
  while (1);

  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
  parser->colon_doesnt_start_class_def_p
    = saved_colon_doesnt_start_class_def_p;

  if (!parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser,
                       true,
                     false,
                          true);

  return ret ? ret : global_trees[TI_ERROR_MARK];
}
# 36633 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_clause_depend (cp_parser *parser, tree list, location_t loc)
{
  tree nlist, c, iterators = (tree) 
# 36636 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 36636 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
  enum omp_clause_depend_kind kind = OMP_CLAUSE_DEPEND_LAST;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  do
    {
      if (cp_lexer_next_token_is_not (parser->lexer, CPP_NAME))
 goto invalid_kind;

      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36649, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp ("iterator", p) == 0 && iterators == (tree) 
# 36651 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                     __null
# 36651 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                              )
 {
   begin_scope (sk_omp, 
# 36653 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 36653 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           );
   iterators = cp_parser_omp_iterators (parser);
   cp_parser_require (parser, CPP_COMMA, RT_COMMA);
   continue;
 }
      if (strcmp ("in", p) == 0)
 kind = OMP_CLAUSE_DEPEND_IN;
      else if (strcmp ("inout", p) == 0)
 kind = OMP_CLAUSE_DEPEND_INOUT;
      else if (strcmp ("mutexinoutset", p) == 0)
 kind = OMP_CLAUSE_DEPEND_MUTEXINOUTSET;
      else if (strcmp ("out", p) == 0)
 kind = OMP_CLAUSE_DEPEND_OUT;
      else if (strcmp ("depobj", p) == 0)
 kind = OMP_CLAUSE_DEPEND_DEPOBJ;
      else if (strcmp ("sink", p) == 0)
 kind = OMP_CLAUSE_DEPEND_SINK;
      else if (strcmp ("source", p) == 0)
 kind = OMP_CLAUSE_DEPEND_SOURCE;
      else
 goto invalid_kind;
      break;
    }
  while (1);

  cp_lexer_consume_token (parser->lexer);

  if (iterators
      && (kind == OMP_CLAUSE_DEPEND_SOURCE || kind == OMP_CLAUSE_DEPEND_SINK))
    {
      poplevel (0, 1, 0);
      error_at (loc, "%<iterator%> modifier incompatible with %qs",
  kind == OMP_CLAUSE_DEPEND_SOURCE ? "source" : "sink");
      iterators = (tree) 
# 36686 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 36686 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ;
    }

  if (kind == OMP_CLAUSE_DEPEND_SOURCE)
    {
      c = build_omp_clause (loc, OMP_CLAUSE_DEPEND);
      ((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEPEND), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36692, __FUNCTION__))->omp_clause.subcode.depend_kind) = kind;
      (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36693, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36693, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36693, __FUNCTION__))) = (tree) 
# 36693 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 36693 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
      ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36694, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36694, __FUNCTION__))->common.chain) = list;
      if (!parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                         false,
                              true);
      return c;
    }

  if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
    goto resync_fail;

  if (kind == OMP_CLAUSE_DEPEND_SINK)
    nlist = cp_parser_omp_clause_depend_sink (parser, loc, list);
  else
    {
      nlist = cp_parser_omp_var_list_no_open (parser, OMP_CLAUSE_DEPEND,
           list, 
# 36710 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 36710 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    );

      if (iterators)
 {
   tree block = poplevel (1, 1, 0);
   if (iterators == global_trees[TI_ERROR_MARK])
     iterators = (tree) 
# 36716 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 36716 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
   else
     (*((const_cast<tree *> (tree_vec_elt_check ((iterators), (5), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36718, __FUNCTION__))))) = block;
 }

      for (c = nlist; c != list; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36721, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36721, __FUNCTION__))->common.chain))
 {
   ((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEPEND), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36723, __FUNCTION__))->omp_clause.subcode.depend_kind) = kind;
   if (iterators)
     (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36725, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36725, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36725, __FUNCTION__)))
       = build_tree_list (iterators, (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36726, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36726, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36726, __FUNCTION__))));
 }
    }
  return nlist;

 invalid_kind:
  cp_parser_error (parser, "invalid depend kind");
 resync_fail:
  if (iterators)
    poplevel (0, 1, 0);
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}
# 36755 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_clause_map (cp_parser *parser, tree list)
{
  tree nlist, c;
  enum gomp_map_kind kind = GOMP_MAP_TOFROM;
  bool always = false;

  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return list;

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36768, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp ("always", p) == 0)
 {
   int nth = 2;
   if (cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_COMMA)
     nth++;
   if ((cp_lexer_peek_nth_token (parser->lexer, nth)->type == CPP_NAME
        || (cp_lexer_peek_nth_token (parser->lexer, nth)->keyword
     == RID_DELETE))
       && (cp_lexer_peek_nth_token (parser->lexer, nth + 1)->type
    == CPP_COLON))
     {
       always = true;
       cp_lexer_consume_token (parser->lexer);
       if (nth == 3)
  cp_lexer_consume_token (parser->lexer);
     }
 }
    }

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME)
      && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_COLON)
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36793, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp ("alloc", p) == 0)
 kind = GOMP_MAP_ALLOC;
      else if (strcmp ("to", p) == 0)
 kind = always ? GOMP_MAP_ALWAYS_TO : GOMP_MAP_TO;
      else if (strcmp ("from", p) == 0)
 kind = always ? GOMP_MAP_ALWAYS_FROM : GOMP_MAP_FROM;
      else if (strcmp ("tofrom", p) == 0)
 kind = always ? GOMP_MAP_ALWAYS_TOFROM : GOMP_MAP_TOFROM;
      else if (strcmp ("release", p) == 0)
 kind = GOMP_MAP_RELEASE;
      else
 {
   cp_parser_error (parser, "invalid map kind");
   cp_parser_skip_to_closing_parenthesis (parser, true,
                    false,
                         true);
   return list;
 }
      cp_lexer_consume_token (parser->lexer);
      cp_lexer_consume_token (parser->lexer);
    }
  else if (cp_lexer_next_token_is_keyword (parser->lexer, RID_DELETE)
    && cp_lexer_peek_nth_token (parser->lexer, 2)->type == CPP_COLON)
    {
      kind = GOMP_MAP_DELETE;
      cp_lexer_consume_token (parser->lexer);
      cp_lexer_consume_token (parser->lexer);
    }

  nlist = cp_parser_omp_var_list_no_open (parser, OMP_CLAUSE_MAP, list,
       
# 36825 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 36825 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          );

  for (c = nlist; c != list; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36827, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36827, __FUNCTION__))->common.chain))
    ((omp_clause_subcode_check ((c), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36828, __FUNCTION__))->omp_clause.subcode.map_kind = (unsigned int) (kind));

  return nlist;
}




static tree
cp_parser_omp_clause_device (cp_parser *parser, tree list,
        location_t location)
{
  tree t, c;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  t = cp_parser_assignment_expression (parser);

  if (t == global_trees[TI_ERROR_MARK]
      || !parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  check_no_duplicate_clause (list, OMP_CLAUSE_DEVICE,
        "device", location);

  c = build_omp_clause (location, OMP_CLAUSE_DEVICE);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEVICE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36858, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36858, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36859, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36859, __FUNCTION__))->common.chain) = list;

  return c;
}





static tree
cp_parser_omp_clause_dist_schedule (cp_parser *parser, tree list,
        location_t location)
{
  tree c, t;

  matching_parens parens;
  if (!parens.require_open (parser))
    return list;

  c = build_omp_clause (location, OMP_CLAUSE_DIST_SCHEDULE);

  if (!cp_lexer_next_token_is_keyword (parser->lexer, RID_STATIC))
    goto invalid_kind;
  cp_lexer_consume_token (parser->lexer);

  if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
    {
      cp_lexer_consume_token (parser->lexer);

      t = cp_parser_assignment_expression (parser);

      if (t == global_trees[TI_ERROR_MARK])
 goto resync_fail;
      (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_DIST_SCHEDULE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36892, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36892, __FUNCTION__))) = t;

      if (!parens.require_close (parser))
 goto resync_fail;
    }
  else if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_COMMA_CLOSE_PAREN))
    goto resync_fail;



  if (omp_find_clause (list, OMP_CLAUSE_DIST_SCHEDULE))
    warning_at (location, 0, "too many %qs clauses", "dist_schedule");
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36904, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36904, __FUNCTION__))->common.chain) = list;
  return c;

 invalid_kind:
  cp_parser_error (parser, "invalid dist_schedule kind");
 resync_fail:
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}







static tree
cp_parser_omp_clause_proc_bind (cp_parser *parser, tree list,
    location_t location)
{
  tree c;
  enum omp_clause_proc_bind_kind kind;

  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return list;

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36935, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp ("master", p) == 0)
 kind = OMP_CLAUSE_PROC_BIND_MASTER;
      else if (strcmp ("close", p) == 0)
 kind = OMP_CLAUSE_PROC_BIND_CLOSE;
      else if (strcmp ("spread", p) == 0)
 kind = OMP_CLAUSE_PROC_BIND_SPREAD;
      else
 goto invalid_kind;
    }
  else
    goto invalid_kind;

  cp_lexer_consume_token (parser->lexer);
  if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_COMMA_CLOSE_PAREN))
    goto resync_fail;

  c = build_omp_clause (location, OMP_CLAUSE_PROC_BIND);
  check_no_duplicate_clause (list, OMP_CLAUSE_PROC_BIND, "proc_bind",
        location);
  ((omp_clause_subcode_check ((c), (OMP_CLAUSE_PROC_BIND), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36956, __FUNCTION__))->omp_clause.subcode.proc_bind_kind) = kind;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36957, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36957, __FUNCTION__))->common.chain) = list;
  return c;

 invalid_kind:
  cp_parser_error (parser, "invalid depend kind");
 resync_fail:
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}




static tree
cp_parser_omp_clause_device_type (cp_parser *parser, tree list,
      location_t location)
{
  tree c;
  enum omp_clause_device_type_kind kind;

  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    return list;

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 36985, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp ("host", p) == 0)
 kind = OMP_CLAUSE_DEVICE_TYPE_HOST;
      else if (strcmp ("nohost", p) == 0)
 kind = OMP_CLAUSE_DEVICE_TYPE_NOHOST;
      else if (strcmp ("any", p) == 0)
 kind = OMP_CLAUSE_DEVICE_TYPE_ANY;
      else
 goto invalid_kind;
    }
  else
    goto invalid_kind;

  cp_lexer_consume_token (parser->lexer);
  if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_COMMA_CLOSE_PAREN))
    goto resync_fail;

  c = build_omp_clause (location, OMP_CLAUSE_DEVICE_TYPE);


  ((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEVICE_TYPE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37006, __FUNCTION__))->omp_clause.subcode.device_type_kind) = kind;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37007, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37007, __FUNCTION__))->common.chain) = list;
  return c;

 invalid_kind:
  cp_parser_error (parser, "invalid depend kind");
 resync_fail:
  cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
  return list;
}




static tree
cp_parser_oacc_clause_async (cp_parser *parser, tree list)
{
  tree c, t;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  t = build_int_cst (integer_types[itk_int], -1);

  if (cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)
    {
      matching_parens parens;
      parens.consume_open (parser);

      t = cp_parser_expression (parser);
      if (t == global_trees[TI_ERROR_MARK]
   || !parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                   false,
                        true);
    }

  check_no_duplicate_clause (list, OMP_CLAUSE_ASYNC, "async", loc);

  c = build_omp_clause (loc, OMP_CLAUSE_ASYNC);
  (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_ASYNC), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37046, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37046, __FUNCTION__))) = t;
  ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37047, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37047, __FUNCTION__))->common.chain) = list;
  list = c;

  return list;
}




static tree
cp_parser_oacc_all_clauses (cp_parser *parser, omp_clause_mask mask,
       const char *where, cp_token *pragma_tok,
       bool finish_p = true)
{
  tree clauses = 
# 37061 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 37061 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
  bool first = true;

  while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))
    {
      location_t here;
      pragma_omp_clause c_kind;
      omp_clause_code code;
      const char *c_name;
      tree prev = clauses;

      if (!first && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);

      here = cp_lexer_peek_token (parser->lexer)->location;
      c_kind = cp_parser_omp_clause_name (parser);

      switch (c_kind)
 {
 case PRAGMA_OACC_CLAUSE_ASYNC:
   clauses = cp_parser_oacc_clause_async (parser, clauses);
   c_name = "async";
   break;
 case PRAGMA_OACC_CLAUSE_AUTO:
   clauses = cp_parser_oacc_simple_clause (here, OMP_CLAUSE_AUTO,
        clauses);
   c_name = "auto";
   break;
 case PRAGMA_OACC_CLAUSE_ATTACH:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "attach";
   break;
 case PRAGMA_OACC_CLAUSE_COLLAPSE:
   clauses = cp_parser_omp_clause_collapse (parser, clauses, here);
   c_name = "collapse";
   break;
 case PRAGMA_OACC_CLAUSE_COPY:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "copy";
   break;
 case PRAGMA_OACC_CLAUSE_COPYIN:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "copyin";
   break;
 case PRAGMA_OACC_CLAUSE_COPYOUT:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "copyout";
   break;
 case PRAGMA_OACC_CLAUSE_CREATE:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "create";
   break;
 case PRAGMA_OACC_CLAUSE_DELETE:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "delete";
   break;
 case PRAGMA_OMP_CLAUSE_DEFAULT:
   clauses = cp_parser_omp_clause_default (parser, clauses, here, true);
   c_name = "default";
   break;
 case PRAGMA_OACC_CLAUSE_DETACH:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "detach";
   break;
 case PRAGMA_OACC_CLAUSE_DEVICE:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "device";
   break;
 case PRAGMA_OACC_CLAUSE_DEVICEPTR:
   clauses = cp_parser_oacc_data_clause_deviceptr (parser, clauses);
   c_name = "deviceptr";
   break;
 case PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "device_resident";
   break;
 case PRAGMA_OACC_CLAUSE_FINALIZE:
   clauses = cp_parser_oacc_simple_clause (here, OMP_CLAUSE_FINALIZE,
        clauses);
   c_name = "finalize";
   break;
 case PRAGMA_OACC_CLAUSE_FIRSTPRIVATE:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_FIRSTPRIVATE,
         clauses);
   c_name = "firstprivate";
   break;
 case PRAGMA_OACC_CLAUSE_GANG:
   c_name = "gang";
   clauses = cp_parser_oacc_shape_clause (parser, here, OMP_CLAUSE_GANG,
       c_name, clauses);
   break;
 case PRAGMA_OACC_CLAUSE_HOST:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "host";
   break;
 case PRAGMA_OACC_CLAUSE_IF:
   clauses = cp_parser_omp_clause_if (parser, clauses, here, false);
   c_name = "if";
   break;
 case PRAGMA_OACC_CLAUSE_IF_PRESENT:
   clauses = cp_parser_oacc_simple_clause (here, OMP_CLAUSE_IF_PRESENT,
        clauses);
   c_name = "if_present";
   break;
 case PRAGMA_OACC_CLAUSE_INDEPENDENT:
   clauses = cp_parser_oacc_simple_clause (here, OMP_CLAUSE_INDEPENDENT,
        clauses);
   c_name = "independent";
   break;
 case PRAGMA_OACC_CLAUSE_LINK:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "link";
   break;
 case PRAGMA_OACC_CLAUSE_NO_CREATE:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "no_create";
   break;
 case PRAGMA_OACC_CLAUSE_NUM_GANGS:
   code = OMP_CLAUSE_NUM_GANGS;
   c_name = "num_gangs";
   clauses = cp_parser_oacc_single_int_clause (parser, code, c_name,
            clauses);
   break;
 case PRAGMA_OACC_CLAUSE_NUM_WORKERS:
   c_name = "num_workers";
   code = OMP_CLAUSE_NUM_WORKERS;
   clauses = cp_parser_oacc_single_int_clause (parser, code, c_name,
            clauses);
   break;
 case PRAGMA_OACC_CLAUSE_PRESENT:
   clauses = cp_parser_oacc_data_clause (parser, c_kind, clauses);
   c_name = "present";
   break;
 case PRAGMA_OACC_CLAUSE_PRIVATE:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_PRIVATE,
         clauses);
   c_name = "private";
   break;
 case PRAGMA_OACC_CLAUSE_REDUCTION:
   clauses
     = cp_parser_omp_clause_reduction (parser, OMP_CLAUSE_REDUCTION,
           false, clauses);
   c_name = "reduction";
   break;
 case PRAGMA_OACC_CLAUSE_SEQ:
   clauses = cp_parser_oacc_simple_clause (here, OMP_CLAUSE_SEQ,
        clauses);
   c_name = "seq";
   break;
 case PRAGMA_OACC_CLAUSE_TILE:
   clauses = cp_parser_oacc_clause_tile (parser, here, clauses);
   c_name = "tile";
   break;
 case PRAGMA_OACC_CLAUSE_USE_DEVICE:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_USE_DEVICE_PTR,
         clauses);
   c_name = "use_device";
   break;
 case PRAGMA_OACC_CLAUSE_VECTOR:
   c_name = "vector";
   clauses = cp_parser_oacc_shape_clause (parser, here,
       OMP_CLAUSE_VECTOR,
       c_name, clauses);
   break;
 case PRAGMA_OACC_CLAUSE_VECTOR_LENGTH:
   c_name = "vector_length";
   code = OMP_CLAUSE_VECTOR_LENGTH;
   clauses = cp_parser_oacc_single_int_clause (parser, code, c_name,
            clauses);
   break;
 case PRAGMA_OACC_CLAUSE_WAIT:
   clauses = cp_parser_oacc_clause_wait (parser, clauses);
   c_name = "wait";
   break;
 case PRAGMA_OACC_CLAUSE_WORKER:
   c_name = "worker";
   clauses = cp_parser_oacc_shape_clause (parser, here,
       OMP_CLAUSE_WORKER,
       c_name, clauses);
   break;
 default:
   cp_parser_error (parser, "expected %<#pragma acc%> clause");
   goto saw_error;
 }

      first = false;

      if (((mask >> c_kind) & 1) == 0)
 {


   clauses = prev;
   error_at (here, "%qs is not valid for %qs", c_name, where);
 }
    }

 saw_error:
  cp_parser_skip_to_pragma_eol (parser, pragma_tok);

  if (finish_p)
    return finish_omp_clauses (clauses, C_ORT_ACC);

  return clauses;
}
# 37273 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,
      const char *where, cp_token *pragma_tok,
      bool finish_p = true, int nested = 0)
{
  tree clauses = 
# 37278 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 37278 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    ;
  bool first = true;
  cp_token *token = 
# 37280 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 37280 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;


  auto_suppress_location_wrappers sentinel;

  while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))
    {
      pragma_omp_clause c_kind;
      const char *c_name;
      tree prev = clauses;

      if (nested && cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN))
 break;

      if (!first)
 {
   if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
     cp_lexer_consume_token (parser->lexer);
   else if (nested == 2)
     error_at (cp_lexer_peek_token (parser->lexer)->location,
        "clauses in %<simd%> trait should be separated "
                      "by %<,%>");
 }

      token = cp_lexer_peek_token (parser->lexer);
      c_kind = cp_parser_omp_clause_name (parser);

      switch (c_kind)
 {
 case PRAGMA_OMP_CLAUSE_BIND:
   clauses = cp_parser_omp_clause_bind (parser, clauses,
            token->location);
   c_name = "bind";
   break;
 case PRAGMA_OMP_CLAUSE_COLLAPSE:
   clauses = cp_parser_omp_clause_collapse (parser, clauses,
         token->location);
   c_name = "collapse";
   break;
 case PRAGMA_OMP_CLAUSE_COPYIN:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_COPYIN, clauses);
   c_name = "copyin";
   break;
 case PRAGMA_OMP_CLAUSE_COPYPRIVATE:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_COPYPRIVATE,
         clauses);
   c_name = "copyprivate";
   break;
 case PRAGMA_OMP_CLAUSE_DEFAULT:
   clauses = cp_parser_omp_clause_default (parser, clauses,
        token->location, false);
   c_name = "default";
   break;
 case PRAGMA_OMP_CLAUSE_FINAL:
   clauses = cp_parser_omp_clause_final (parser, clauses, token->location);
   c_name = "final";
   break;
 case PRAGMA_OMP_CLAUSE_FIRSTPRIVATE:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_FIRSTPRIVATE,
         clauses);
   c_name = "firstprivate";
   break;
 case PRAGMA_OMP_CLAUSE_GRAINSIZE:
   clauses = cp_parser_omp_clause_grainsize (parser, clauses,
          token->location);
   c_name = "grainsize";
   break;
 case PRAGMA_OMP_CLAUSE_HINT:
   clauses = cp_parser_omp_clause_hint (parser, clauses,
            token->location);
   c_name = "hint";
   break;
 case PRAGMA_OMP_CLAUSE_DEFAULTMAP:
   clauses = cp_parser_omp_clause_defaultmap (parser, clauses,
           token->location);
   c_name = "defaultmap";
   break;
 case PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_USE_DEVICE_PTR,
         clauses);
   c_name = "use_device_ptr";
   break;
 case PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_USE_DEVICE_ADDR,
         clauses);
   c_name = "use_device_addr";
   break;
 case PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_IS_DEVICE_PTR,
         clauses);
   c_name = "is_device_ptr";
   break;
 case PRAGMA_OMP_CLAUSE_IF:
   clauses = cp_parser_omp_clause_if (parser, clauses, token->location,
          true);
   c_name = "if";
   break;
 case PRAGMA_OMP_CLAUSE_IN_REDUCTION:
   clauses
     = cp_parser_omp_clause_reduction (parser, OMP_CLAUSE_IN_REDUCTION,
           true, clauses);
   c_name = "in_reduction";
   break;
 case PRAGMA_OMP_CLAUSE_LASTPRIVATE:
   clauses = cp_parser_omp_clause_lastprivate (parser, clauses);
   c_name = "lastprivate";
   break;
 case PRAGMA_OMP_CLAUSE_MERGEABLE:
   clauses = cp_parser_omp_clause_mergeable (parser, clauses,
          token->location);
   c_name = "mergeable";
   break;
 case PRAGMA_OMP_CLAUSE_NOWAIT:
   clauses = cp_parser_omp_clause_nowait (parser, clauses,
       token->location);
   c_name = "nowait";
   break;
 case PRAGMA_OMP_CLAUSE_NUM_TASKS:
   clauses = cp_parser_omp_clause_num_tasks (parser, clauses,
          token->location);
   c_name = "num_tasks";
   break;
 case PRAGMA_OMP_CLAUSE_NUM_THREADS:
   clauses = cp_parser_omp_clause_num_threads (parser, clauses,
            token->location);
   c_name = "num_threads";
   break;
 case PRAGMA_OMP_CLAUSE_ORDER:
   clauses = cp_parser_omp_clause_order (parser, clauses,
      token->location);
   c_name = "order";
   break;
 case PRAGMA_OMP_CLAUSE_ORDERED:
   clauses = cp_parser_omp_clause_ordered (parser, clauses,
        token->location);
   c_name = "ordered";
   break;
 case PRAGMA_OMP_CLAUSE_PRIORITY:
   clauses = cp_parser_omp_clause_priority (parser, clauses,
         token->location);
   c_name = "priority";
   break;
 case PRAGMA_OMP_CLAUSE_PRIVATE:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_PRIVATE,
         clauses);
   c_name = "private";
   break;
 case PRAGMA_OMP_CLAUSE_REDUCTION:
   clauses
     = cp_parser_omp_clause_reduction (parser, OMP_CLAUSE_REDUCTION,
           true, clauses);
   c_name = "reduction";
   break;
 case PRAGMA_OMP_CLAUSE_SCHEDULE:
   clauses = cp_parser_omp_clause_schedule (parser, clauses,
         token->location);
   c_name = "schedule";
   break;
 case PRAGMA_OMP_CLAUSE_SHARED:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_SHARED,
         clauses);
   c_name = "shared";
   break;
 case PRAGMA_OMP_CLAUSE_TASK_REDUCTION:
   clauses
     = cp_parser_omp_clause_reduction (parser,
           OMP_CLAUSE_TASK_REDUCTION,
           true, clauses);
   c_name = "task_reduction";
   break;
 case PRAGMA_OMP_CLAUSE_UNTIED:
   clauses = cp_parser_omp_clause_untied (parser, clauses,
       token->location);
   c_name = "untied";
   break;
 case PRAGMA_OMP_CLAUSE_INBRANCH:
   clauses = cp_parser_omp_clause_branch (parser, OMP_CLAUSE_INBRANCH,
       clauses, token->location);
   c_name = "inbranch";
   break;
 case PRAGMA_OMP_CLAUSE_NONTEMPORAL:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_NONTEMPORAL,
         clauses);
   c_name = "nontemporal";
   break;
 case PRAGMA_OMP_CLAUSE_NOTINBRANCH:
   clauses = cp_parser_omp_clause_branch (parser,
       OMP_CLAUSE_NOTINBRANCH,
       clauses, token->location);
   c_name = "notinbranch";
   break;
 case PRAGMA_OMP_CLAUSE_PARALLEL:
   clauses = cp_parser_omp_clause_cancelkind (parser, OMP_CLAUSE_PARALLEL,
           clauses, token->location);
   c_name = "parallel";
   if (!first)
     {
      clause_not_first:
       error_at (token->location, "%qs must be the first clause of %qs",
   c_name, where);
       clauses = prev;
     }
   break;
 case PRAGMA_OMP_CLAUSE_FOR:
   clauses = cp_parser_omp_clause_cancelkind (parser, OMP_CLAUSE_FOR,
           clauses, token->location);
   c_name = "for";
   if (!first)
     goto clause_not_first;
   break;
 case PRAGMA_OMP_CLAUSE_SECTIONS:
   clauses = cp_parser_omp_clause_cancelkind (parser, OMP_CLAUSE_SECTIONS,
           clauses, token->location);
   c_name = "sections";
   if (!first)
     goto clause_not_first;
   break;
 case PRAGMA_OMP_CLAUSE_TASKGROUP:
   clauses = cp_parser_omp_clause_cancelkind (parser, OMP_CLAUSE_TASKGROUP,
           clauses, token->location);
   c_name = "taskgroup";
   if (!first)
     goto clause_not_first;
   break;
 case PRAGMA_OMP_CLAUSE_LINK:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_LINK, clauses);
   c_name = "to";
   break;
 case PRAGMA_OMP_CLAUSE_TO:
   if ((mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LINK)) != 0)
     clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_TO_DECLARE,
           clauses);
   else
     clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_TO, clauses);
   c_name = "to";
   break;
 case PRAGMA_OMP_CLAUSE_FROM:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_FROM, clauses);
   c_name = "from";
   break;
 case PRAGMA_OMP_CLAUSE_UNIFORM:
   clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_UNIFORM,
         clauses);
   c_name = "uniform";
   break;
 case PRAGMA_OMP_CLAUSE_NUM_TEAMS:
   clauses = cp_parser_omp_clause_num_teams (parser, clauses,
          token->location);
   c_name = "num_teams";
   break;
 case PRAGMA_OMP_CLAUSE_THREAD_LIMIT:
   clauses = cp_parser_omp_clause_thread_limit (parser, clauses,
             token->location);
   c_name = "thread_limit";
   break;
 case PRAGMA_OMP_CLAUSE_ALIGNED:
   clauses = cp_parser_omp_clause_aligned (parser, clauses);
   c_name = "aligned";
   break;
 case PRAGMA_OMP_CLAUSE_LINEAR:
   {
     bool declare_simd = false;
     if (((mask >> PRAGMA_OMP_CLAUSE_UNIFORM) & 1) != 0)
       declare_simd = true;
     clauses = cp_parser_omp_clause_linear (parser, clauses, declare_simd);
   }
   c_name = "linear";
   break;
 case PRAGMA_OMP_CLAUSE_DEPEND:
   clauses = cp_parser_omp_clause_depend (parser, clauses,
       token->location);
   c_name = "depend";
   break;
 case PRAGMA_OMP_CLAUSE_MAP:
   clauses = cp_parser_omp_clause_map (parser, clauses);
   c_name = "map";
   break;
 case PRAGMA_OMP_CLAUSE_DEVICE:
   clauses = cp_parser_omp_clause_device (parser, clauses,
       token->location);
   c_name = "device";
   break;
 case PRAGMA_OMP_CLAUSE_DIST_SCHEDULE:
   clauses = cp_parser_omp_clause_dist_schedule (parser, clauses,
       token->location);
   c_name = "dist_schedule";
   break;
 case PRAGMA_OMP_CLAUSE_PROC_BIND:
   clauses = cp_parser_omp_clause_proc_bind (parser, clauses,
          token->location);
   c_name = "proc_bind";
   break;
 case PRAGMA_OMP_CLAUSE_DEVICE_TYPE:
   clauses = cp_parser_omp_clause_device_type (parser, clauses,
            token->location);
   c_name = "device_type";
   break;
 case PRAGMA_OMP_CLAUSE_SAFELEN:
   clauses = cp_parser_omp_clause_safelen (parser, clauses,
        token->location);
   c_name = "safelen";
   break;
 case PRAGMA_OMP_CLAUSE_SIMDLEN:
   clauses = cp_parser_omp_clause_simdlen (parser, clauses,
        token->location);
   c_name = "simdlen";
   break;
 case PRAGMA_OMP_CLAUSE_NOGROUP:
   clauses = cp_parser_omp_clause_nogroup (parser, clauses,
        token->location);
   c_name = "nogroup";
   break;
 case PRAGMA_OMP_CLAUSE_THREADS:
   clauses
     = cp_parser_omp_clause_orderedkind (parser, OMP_CLAUSE_THREADS,
      clauses, token->location);
   c_name = "threads";
   break;
 case PRAGMA_OMP_CLAUSE_SIMD:
   clauses
     = cp_parser_omp_clause_orderedkind (parser, OMP_CLAUSE_SIMD,
      clauses, token->location);
   c_name = "simd";
   break;
 default:
   cp_parser_error (parser, "expected %<#pragma omp%> clause");
   goto saw_error;
 }

      first = false;

      if (((mask >> c_kind) & 1) == 0)
 {


   clauses = prev;
   error_at (token->location, "%qs is not valid for %qs", c_name, where);
 }
    }
 saw_error:
  if (!nested)
    cp_parser_skip_to_pragma_eol (parser, pragma_tok);
  if (finish_p)
    {
      if ((mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_UNIFORM)) != 0)
 return finish_omp_clauses (clauses, C_ORT_OMP_DECLARE_SIMD);
      else
 return finish_omp_clauses (clauses, C_ORT_OMP);
    }
  return clauses;
}
# 37640 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static unsigned
cp_parser_begin_omp_structured_block (cp_parser *parser)
{
  unsigned save = parser->in_statement;
# 37653 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  if (parser->in_statement)
    parser->in_statement = 4;

  return save;
}

static void
cp_parser_end_omp_structured_block (cp_parser *parser, unsigned save)
{
  parser->in_statement = save;
}

static tree
cp_parser_omp_structured_block (cp_parser *parser, bool *if_p)
{
  tree stmt = begin_omp_structured_block ();
  unsigned int save = cp_parser_begin_omp_structured_block (parser);

  cp_parser_statement (parser, (tree) 
# 37671 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 37671 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , false, if_p);

  cp_parser_end_omp_structured_block (parser, save);
  return finish_omp_structured_block (stmt);
}
# 37728 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_atomic (cp_parser *parser, cp_token *pragma_tok)
{
  tree lhs = (tree) 
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     , rhs = (tree) 
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      , v = (tree) 
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     , lhs1 = (tree) 
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                              __null
# 37731 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                       ;
  tree rhs1 = (tree) 
# 37732 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 37732 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      , orig_lhs;
  location_t loc = pragma_tok->location;
  enum tree_code code = ERROR_MARK, opcode = NOP_EXPR;
  enum omp_memory_order memory_order = OMP_MEMORY_ORDER_UNSPECIFIED;
  bool structured_block = false;
  bool first = true;
  tree clauses = (tree) 
# 37738 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 37738 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;

  while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))
    {
      if (!first && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);

      first = false;

      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 {
   tree id = cp_lexer_peek_token (parser->lexer)->u.value;
   location_t cloc = cp_lexer_peek_token (parser->lexer)->location;
   const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37751, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
   enum tree_code new_code = ERROR_MARK;
   enum omp_memory_order new_memory_order
     = OMP_MEMORY_ORDER_UNSPECIFIED;

   if (!strcmp (p, "read"))
     new_code = OMP_ATOMIC_READ;
   else if (!strcmp (p, "write"))
     new_code = NOP_EXPR;
   else if (!strcmp (p, "update"))
     new_code = OMP_ATOMIC;
   else if (!strcmp (p, "capture"))
     new_code = OMP_ATOMIC_CAPTURE_NEW;
   else if (!strcmp (p, "seq_cst"))
     new_memory_order = OMP_MEMORY_ORDER_SEQ_CST;
   else if (!strcmp (p, "acq_rel"))
     new_memory_order = OMP_MEMORY_ORDER_ACQ_REL;
   else if (!strcmp (p, "release"))
     new_memory_order = OMP_MEMORY_ORDER_RELEASE;
   else if (!strcmp (p, "acquire"))
     new_memory_order = OMP_MEMORY_ORDER_ACQUIRE;
   else if (!strcmp (p, "relaxed"))
     new_memory_order = OMP_MEMORY_ORDER_RELAXED;
   else if (!strcmp (p, "hint"))
     {
       cp_lexer_consume_token (parser->lexer);
       clauses = cp_parser_omp_clause_hint (parser, clauses, cloc);
       continue;
     }
   else
     {
       p = 
# 37782 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 37782 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              ;
       error_at (cloc, "expected %<read%>, %<write%>, %<update%>, "
         "%<capture%>, %<seq_cst%>, %<acq_rel%>, "
         "%<release%>, %<relaxed%> or %<hint%> clause");
     }
   if (p)
     {
       if (new_code != ERROR_MARK)
  {
    if (code != ERROR_MARK)
      error_at (cloc, "too many atomic clauses");
    else
      code = new_code;
  }
       else if (new_memory_order != OMP_MEMORY_ORDER_UNSPECIFIED)
  {
    if (memory_order != OMP_MEMORY_ORDER_UNSPECIFIED)
      error_at (cloc, "too many memory order clauses");
    else
      memory_order = new_memory_order;
  }
       cp_lexer_consume_token (parser->lexer);
       continue;
     }
 }
      break;
    }
  cp_parser_require_pragma_eol (parser, pragma_tok);

  if (code == ERROR_MARK)
    code = OMP_ATOMIC;
  if (memory_order == OMP_MEMORY_ORDER_UNSPECIFIED)
    {
      omp_requires_mask
 = (enum omp_requires) (omp_requires_mask
          | OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER_USED);
      switch ((enum omp_memory_order)
       (omp_requires_mask & OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER))
 {
 case OMP_MEMORY_ORDER_UNSPECIFIED:
 case OMP_MEMORY_ORDER_RELAXED:
   memory_order = OMP_MEMORY_ORDER_RELAXED;
   break;
 case OMP_MEMORY_ORDER_SEQ_CST:
   memory_order = OMP_MEMORY_ORDER_SEQ_CST;
   break;
 case OMP_MEMORY_ORDER_ACQ_REL:
   switch (code)
     {
     case OMP_ATOMIC_READ:
       memory_order = OMP_MEMORY_ORDER_ACQUIRE;
       break;
     case NOP_EXPR:
     case OMP_ATOMIC:
       memory_order = OMP_MEMORY_ORDER_RELEASE;
       break;
     default:
       memory_order = OMP_MEMORY_ORDER_ACQ_REL;
       break;
     }
   break;
 default:
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37844, __FUNCTION__));
 }
    }
  else
    switch (code)
      {
      case OMP_ATOMIC_READ:
 if (memory_order == OMP_MEMORY_ORDER_ACQ_REL
     || memory_order == OMP_MEMORY_ORDER_RELEASE)
   {
     error_at (loc, "%<#pragma omp atomic read%> incompatible with "
      "%<acq_rel%> or %<release%> clauses");
     memory_order = OMP_MEMORY_ORDER_SEQ_CST;
   }
 break;
      case NOP_EXPR:
 if (memory_order == OMP_MEMORY_ORDER_ACQ_REL
     || memory_order == OMP_MEMORY_ORDER_ACQUIRE)
   {
     error_at (loc, "%<#pragma omp atomic write%> incompatible with "
      "%<acq_rel%> or %<acquire%> clauses");
     memory_order = OMP_MEMORY_ORDER_SEQ_CST;
   }
 break;
      case OMP_ATOMIC:
 if (memory_order == OMP_MEMORY_ORDER_ACQ_REL
     || memory_order == OMP_MEMORY_ORDER_ACQUIRE)
   {
     error_at (loc, "%<#pragma omp atomic update%> incompatible with "
      "%<acq_rel%> or %<acquire%> clauses");
     memory_order = OMP_MEMORY_ORDER_SEQ_CST;
   }
 break;
      default:
 break;
      }

  switch (code)
    {
    case OMP_ATOMIC_READ:
    case NOP_EXPR:
      v = cp_parser_unary_expression (parser);
      if (v == global_trees[TI_ERROR_MARK])
 goto saw_error;
      if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
 goto saw_error;
      if (code == NOP_EXPR)
 lhs = cp_parser_expression (parser);
      else
 lhs = cp_parser_unary_expression (parser);
      if (lhs == global_trees[TI_ERROR_MARK])
 goto saw_error;
      if (code == NOP_EXPR)
 {


   code = OMP_ATOMIC;
   rhs = lhs;
   lhs = v;
   v = (tree) 
# 37903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 37903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ;
 }
      goto done;
    case OMP_ATOMIC_CAPTURE_NEW:
      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
 {
   cp_lexer_consume_token (parser->lexer);
   structured_block = true;
 }
      else
 {
   v = cp_parser_unary_expression (parser);
   if (v == global_trees[TI_ERROR_MARK])
     goto saw_error;
   if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
     goto saw_error;
 }
    default:
      break;
    }

restart:
  lhs = cp_parser_unary_expression (parser);
  orig_lhs = lhs;
  switch (((enum tree_code) (lhs)->base.code))
    {
    case ERROR_MARK:
      goto saw_error;

    case POSTINCREMENT_EXPR:
      if (code == OMP_ATOMIC_CAPTURE_NEW && !structured_block)
 code = OMP_ATOMIC_CAPTURE_OLD;

    case PREINCREMENT_EXPR:
      lhs = (*((const_cast<tree*> (tree_operand_check ((lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37937, __FUNCTION__)))));
      opcode = PLUS_EXPR;
      rhs = global_trees[TI_INTEGER_ONE];
      break;

    case POSTDECREMENT_EXPR:
      if (code == OMP_ATOMIC_CAPTURE_NEW && !structured_block)
 code = OMP_ATOMIC_CAPTURE_OLD;

    case PREDECREMENT_EXPR:
      lhs = (*((const_cast<tree*> (tree_operand_check ((lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37947, __FUNCTION__)))));
      opcode = MINUS_EXPR;
      rhs = global_trees[TI_INTEGER_ONE];
      break;

    case COMPOUND_EXPR:
      if (((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37953, __FUNCTION__))))))->base.code) == SAVE_EXPR
  && ((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37954, __FUNCTION__))))))->base.code) == COMPOUND_EXPR
  && ((enum tree_code) ((*((const_cast<tree*> (tree_operand_check (((*((const_cast<tree*> (tree_operand_check ((lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37955, __FUNCTION__)))))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37955, __FUNCTION__))))))->base.code) == MODIFY_EXPR
  && (*((const_cast<tree*> (tree_operand_check (((*((const_cast<tree*> (tree_operand_check ((lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37956, __FUNCTION__)))))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37956, __FUNCTION__))))) == (*((const_cast<tree*> (tree_operand_check ((lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37956, __FUNCTION__)))))
  && ((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check (((*((const_cast<tree*> (tree_operand_check (((*((const_cast<tree*> (tree_operand_check ((lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37958, __FUNCTION__)))))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37957, __FUNCTION__)))))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37957, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37957, __FUNCTION__))->typed.type))->base.code)

     == BOOLEAN_TYPE)

       lhs = (*((const_cast<tree*> (tree_operand_check (((*((const_cast<tree*> (tree_operand_check ((lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37961, __FUNCTION__)))))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37961, __FUNCTION__)))));

    case MODIFY_EXPR:
      if (((enum tree_code) (lhs)->base.code) == MODIFY_EXPR
  && ((enum tree_code) (((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37965, __FUNCTION__)))))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37965, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE)
 {

   if (integer_onep ((*((const_cast<tree*> (tree_operand_check ((lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37968, __FUNCTION__)))))))
     {

       rhs = (*((const_cast<tree*> (tree_operand_check ((lhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37971, __FUNCTION__)))));
       lhs = (*((const_cast<tree*> (tree_operand_check ((lhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 37972, __FUNCTION__)))));
       opcode = NOP_EXPR;
       if (code == OMP_ATOMIC_CAPTURE_NEW
    && !structured_block
    && ((enum tree_code) (orig_lhs)->base.code) == COMPOUND_EXPR)
  code = OMP_ATOMIC_CAPTURE_OLD;
       break;
     }
 }

    default:
      switch (cp_lexer_peek_token (parser->lexer)->type)
 {
 case CPP_MULT_EQ:
   opcode = MULT_EXPR;
   break;
 case CPP_DIV_EQ:
   opcode = TRUNC_DIV_EXPR;
   break;
 case CPP_PLUS_EQ:
   opcode = PLUS_EXPR;
   break;
 case CPP_MINUS_EQ:
   opcode = MINUS_EXPR;
   break;
 case CPP_LSHIFT_EQ:
   opcode = LSHIFT_EXPR;
   break;
 case CPP_RSHIFT_EQ:
   opcode = RSHIFT_EXPR;
   break;
 case CPP_AND_EQ:
   opcode = BIT_AND_EXPR;
   break;
 case CPP_OR_EQ:
   opcode = BIT_IOR_EXPR;
   break;
 case CPP_XOR_EQ:
   opcode = BIT_XOR_EXPR;
   break;
 case CPP_EQ:
   enum cp_parser_prec oprec;
   cp_token *token;
   cp_lexer_consume_token (parser->lexer);
   cp_parser_parse_tentatively (parser);
   rhs1 = cp_parser_simple_cast_expression (parser);
   if (rhs1 == global_trees[TI_ERROR_MARK])
     {
       cp_parser_abort_tentative_parse (parser);
       cp_parser_simple_cast_expression (parser);
       goto saw_error;
     }
   token = cp_lexer_peek_token (parser->lexer);
   if (token->type != CPP_SEMICOLON && !cp_tree_equal (lhs, rhs1))
     {
       cp_parser_abort_tentative_parse (parser);
       cp_parser_parse_tentatively (parser);
       rhs = cp_parser_binary_expression (parser, false, true,
       PREC_NOT_OPERATOR, 
# 38030 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 38030 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             );
       if (rhs == global_trees[TI_ERROR_MARK])
  {
    cp_parser_abort_tentative_parse (parser);
    cp_parser_binary_expression (parser, false, true,
            PREC_NOT_OPERATOR, 
# 38035 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 38035 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  );
    goto saw_error;
  }
       switch (((enum tree_code) (rhs)->base.code))
  {
  case MULT_EXPR:
  case TRUNC_DIV_EXPR:
  case RDIV_EXPR:
  case PLUS_EXPR:
  case MINUS_EXPR:
  case LSHIFT_EXPR:
  case RSHIFT_EXPR:
  case BIT_AND_EXPR:
  case BIT_IOR_EXPR:
  case BIT_XOR_EXPR:
    if (cp_tree_equal (lhs, (*((const_cast<tree*> (tree_operand_check ((rhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38050, __FUNCTION__)))))))
      {
        if (cp_parser_parse_definitely (parser))
   {
     opcode = ((enum tree_code) (rhs)->base.code);
     rhs1 = (*((const_cast<tree*> (tree_operand_check ((rhs), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38055, __FUNCTION__)))));
     rhs = (*((const_cast<tree*> (tree_operand_check ((rhs), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38056, __FUNCTION__)))));
     goto stmt_done;
   }
        else
   goto saw_error;
      }
    break;
  default:
    break;
  }
       cp_parser_abort_tentative_parse (parser);
       if (structured_block && code == OMP_ATOMIC_CAPTURE_OLD)
  {
    rhs = cp_parser_expression (parser);
    if (rhs == global_trees[TI_ERROR_MARK])
      goto saw_error;
    opcode = NOP_EXPR;
    rhs1 = (tree) 
# 38073 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 38073 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
    goto stmt_done;
  }
       cp_parser_error (parser,
          "invalid form of %<#pragma omp atomic%>");
       goto saw_error;
     }
   if (!cp_parser_parse_definitely (parser))
     goto saw_error;
   switch (token->type)
     {
     case CPP_SEMICOLON:
       if (structured_block && code == OMP_ATOMIC_CAPTURE_NEW)
  {
    code = OMP_ATOMIC_CAPTURE_OLD;
    v = lhs;
    lhs = (tree) 
# 38089 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 38089 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
    lhs1 = rhs1;
    rhs1 = (tree) 
# 38091 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 38091 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
    cp_lexer_consume_token (parser->lexer);
    goto restart;
  }
       else if (structured_block)
  {
    opcode = NOP_EXPR;
    rhs = rhs1;
    rhs1 = (tree) 
# 38099 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 38099 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
    goto stmt_done;
  }
       cp_parser_error (parser,
          "invalid form of %<#pragma omp atomic%>");
       goto saw_error;
     case CPP_MULT:
       opcode = MULT_EXPR;
       break;
     case CPP_DIV:
       opcode = TRUNC_DIV_EXPR;
       break;
     case CPP_PLUS:
       opcode = PLUS_EXPR;
       break;
     case CPP_MINUS:
       opcode = MINUS_EXPR;
       break;
     case CPP_LSHIFT:
       opcode = LSHIFT_EXPR;
       break;
     case CPP_RSHIFT:
       opcode = RSHIFT_EXPR;
       break;
     case CPP_AND:
       opcode = BIT_AND_EXPR;
       break;
     case CPP_OR:
       opcode = BIT_IOR_EXPR;
       break;
     case CPP_XOR:
       opcode = BIT_XOR_EXPR;
       break;
     default:
       cp_parser_error (parser,
          "invalid operator for %<#pragma omp atomic%>");
       goto saw_error;
     }
   oprec = (((token->type == CPP_GREATER || ((cxx_dialect != cxx98) && token->type == CPP_RSHIFT)) && !parser->greater_than_is_operator_p) ? PREC_NOT_OPERATOR : binops_by_token[token->type].prec);
   ((void)(!(oprec != PREC_NOT_OPERATOR) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38138, __FUNCTION__), 0 : 0));
   if (commutative_tree_code (opcode))
     oprec = (enum cp_parser_prec) (oprec - 1);
   cp_lexer_consume_token (parser->lexer);
   rhs = cp_parser_binary_expression (parser, false, false,
          oprec, 
# 38143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 38143 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    );
   if (rhs == global_trees[TI_ERROR_MARK])
     goto saw_error;
   goto stmt_done;

 default:
   cp_parser_error (parser,
      "invalid operator for %<#pragma omp atomic%>");
   goto saw_error;
 }
      cp_lexer_consume_token (parser->lexer);

      rhs = cp_parser_expression (parser);
      if (rhs == global_trees[TI_ERROR_MARK])
 goto saw_error;
      break;
    }
stmt_done:
  if (structured_block && code == OMP_ATOMIC_CAPTURE_NEW)
    {
      if (!cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON))
 goto saw_error;
      v = cp_parser_unary_expression (parser);
      if (v == global_trees[TI_ERROR_MARK])
 goto saw_error;
      if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
 goto saw_error;
      lhs1 = cp_parser_unary_expression (parser);
      if (lhs1 == global_trees[TI_ERROR_MARK])
 goto saw_error;
    }
  if (structured_block)
    {
      cp_parser_consume_semicolon_at_end_of_statement (parser);
      cp_parser_require (parser, CPP_CLOSE_BRACE, RT_CLOSE_BRACE);
    }
done:
  clauses = finish_omp_clauses (clauses, C_ORT_OMP);
  finish_omp_atomic (pragma_tok->location, code, opcode, lhs, rhs, v, lhs1,
       rhs1, clauses, memory_order);
  if (!structured_block)
    cp_parser_consume_semicolon_at_end_of_statement (parser);
  return;

 saw_error:
  cp_parser_skip_to_end_of_block_or_statement (parser);
  if (structured_block)
    {
      if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))
        cp_lexer_consume_token (parser->lexer);
      else if (code == OMP_ATOMIC_CAPTURE_NEW)
 {
   cp_parser_skip_to_end_of_block_or_statement (parser);
   if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))
     cp_lexer_consume_token (parser->lexer);
 }
    }
}





static void
cp_parser_omp_barrier (cp_parser *parser, cp_token *pragma_tok)
{
  cp_parser_require_pragma_eol (parser, pragma_tok);
  finish_omp_barrier ();
}
# 38224 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_critical (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree stmt, name = (tree) 
# 38227 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 38227 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            , clauses = (tree) 
# 38227 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 38227 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 ;

  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      matching_parens parens;
      parens.consume_open (parser);

      name = cp_parser_identifier (parser);

      if (name == global_trees[TI_ERROR_MARK]
   || !parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                         false,
                              true);
      if (name == global_trees[TI_ERROR_MARK])
 name = 
# 38242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 38242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
           ;

      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA)
   && cp_lexer_nth_token_is (parser->lexer, 2, CPP_NAME))
 cp_lexer_consume_token (parser->lexer);
    }

  clauses = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_HINT) ),
           "#pragma omp critical", pragma_tok);

  stmt = cp_parser_omp_structured_block (parser, if_p);
  return c_finish_omp_critical (input_location, stmt, name, clauses);
}
# 38270 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_depobj (cp_parser *parser, cp_token *pragma_tok)
{
  location_t loc = pragma_tok->location;
  matching_parens parens;
  if (!parens.require_open (parser))
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return;
    }

  tree depobj = cp_parser_assignment_expression (parser);

  if (!parens.require_close (parser))
    cp_parser_skip_to_closing_parenthesis (parser, true,
                     false,
                          true);

  tree clause = (tree) 
# 38288 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 38288 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        ;
  enum omp_clause_depend_kind kind = OMP_CLAUSE_DEPEND_SOURCE;
  location_t c_loc = cp_lexer_peek_token (parser->lexer)->location;
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38294, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      cp_lexer_consume_token (parser->lexer);
      if (!strcmp ("depend", p))
 {
   clause = cp_parser_omp_clause_depend (parser, (tree) 
# 38299 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 38299 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                         , c_loc);
   if (clause)
     clause = finish_omp_clauses (clause, C_ORT_OMP);
   if (!clause)
     clause = global_trees[TI_ERROR_MARK];
 }
      else if (!strcmp ("destroy", p))
 kind = OMP_CLAUSE_DEPEND_LAST;
      else if (!strcmp ("update", p))
 {
   matching_parens c_parens;
   if (c_parens.require_open (parser))
     {
       location_t c2_loc
  = cp_lexer_peek_token (parser->lexer)->location;
       if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
  {
    tree id2 = cp_lexer_peek_token (parser->lexer)->u.value;
    const char *p2 = ((const char *) (tree_check ((id2), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38317, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

    cp_lexer_consume_token (parser->lexer);
    if (!strcmp ("in", p2))
      kind = OMP_CLAUSE_DEPEND_IN;
    else if (!strcmp ("out", p2))
      kind = OMP_CLAUSE_DEPEND_OUT;
    else if (!strcmp ("inout", p2))
      kind = OMP_CLAUSE_DEPEND_INOUT;
    else if (!strcmp ("mutexinoutset", p2))
      kind = OMP_CLAUSE_DEPEND_MUTEXINOUTSET;
  }
       if (kind == OMP_CLAUSE_DEPEND_SOURCE)
  {
    clause = global_trees[TI_ERROR_MARK];
    error_at (c2_loc, "expected %<in%>, %<out%>, %<inout%> or "
        "%<mutexinoutset%>");
  }
       if (!c_parens.require_close (parser))
  cp_parser_skip_to_closing_parenthesis (parser,
                            true,
                          false,
                               true);
     }
   else
     clause = global_trees[TI_ERROR_MARK];
 }
    }
  if (!clause && kind == OMP_CLAUSE_DEPEND_SOURCE)
    {
      clause = global_trees[TI_ERROR_MARK];
      error_at (c_loc, "expected %<depend%>, %<destroy%> or %<update%> clause");
    }
  cp_parser_require_pragma_eol (parser, pragma_tok);

  finish_omp_depobj (loc, depobj, kind, clause);
}
# 38365 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_flush (cp_parser *parser, cp_token *pragma_tok)
{
  enum memmodel mo = MEMMODEL_LAST;
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38372, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      if (!strcmp (p, "acq_rel"))
 mo = MEMMODEL_ACQ_REL;
      else if (!strcmp (p, "release"))
 mo = MEMMODEL_RELEASE;
      else if (!strcmp (p, "acquire"))
 mo = MEMMODEL_ACQUIRE;
      else
 error_at (cp_lexer_peek_token (parser->lexer)->location,
    "expected %<acq_rel%>, %<release%> or %<acquire%>");
      cp_lexer_consume_token (parser->lexer);
    }
  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      if (mo != MEMMODEL_LAST)
 error_at (cp_lexer_peek_token (parser->lexer)->location,
    "%<flush%> list specified together with memory order "
    "clause");
      (void) cp_parser_omp_var_list (parser, OMP_CLAUSE_ERROR, 
# 38390 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                              __null
# 38390 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                  );
    }
  cp_parser_require_pragma_eol (parser, pragma_tok);

  finish_omp_flush (mo);
}



static tree
cp_parser_omp_for_cond (cp_parser *parser, tree decl, enum tree_code code)
{
  tree cond = cp_parser_binary_expression (parser, false, true,
        PREC_NOT_OPERATOR, 
# 38403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 38403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              );
  if (cond == global_trees[TI_ERROR_MARK]
      || cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
    {
      cp_parser_skip_to_end_of_statement (parser);
      return global_trees[TI_ERROR_MARK];
    }

  switch (((enum tree_code) (cond)->base.code))
    {
    case GT_EXPR:
    case GE_EXPR:
    case LT_EXPR:
    case LE_EXPR:
      break;
    case NE_EXPR:
      if (code != OACC_LOOP)
 break;
      __attribute__((fallthrough));
    default:
      return global_trees[TI_ERROR_MARK];
    }



  if (decl
      && (type_dependent_expression_p (decl)
   || (((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38430, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38430, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38430, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38430, __FUNCTION__))->type_common.lang_flag_5))))
    return cond;

  return build_x_binary_op (cp_expr_loc_or_input_loc (cond),
       ((enum tree_code) (cond)->base.code),
       (*((const_cast<tree*> (tree_operand_check ((cond), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38435, __FUNCTION__))))), ERROR_MARK,
       (*((const_cast<tree*> (tree_operand_check ((cond), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38436, __FUNCTION__))))), ERROR_MARK,
                    
# 38437 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   __null
# 38437 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       , tf_warning_or_error);
}



static tree
cp_parser_omp_for_incr (cp_parser *parser, tree decl)
{
  cp_token *token = cp_lexer_peek_token (parser->lexer);
  enum tree_code op;
  tree lhs, rhs;
  cp_id_kind idk;
  bool decl_first;

  if (token->type == CPP_PLUS_PLUS || token->type == CPP_MINUS_MINUS)
    {
      op = (token->type == CPP_PLUS_PLUS
     ? PREINCREMENT_EXPR : PREDECREMENT_EXPR);
      cp_lexer_consume_token (parser->lexer);
      lhs = cp_parser_simple_cast_expression (parser);
      if (lhs != decl
   && (!scope_chain->x_processing_template_decl || !cp_tree_equal (lhs, decl)))
 return global_trees[TI_ERROR_MARK];
      return build2 (op, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38460, __FUNCTION__))->typed.type), decl, (tree) 
# 38460 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 38460 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                         );
    }

  lhs = cp_parser_primary_expression (parser, false, false, false, &idk);
  if (lhs != decl
      && (!scope_chain->x_processing_template_decl || !cp_tree_equal (lhs, decl)))
    return global_trees[TI_ERROR_MARK];

  token = cp_lexer_peek_token (parser->lexer);
  if (token->type == CPP_PLUS_PLUS || token->type == CPP_MINUS_MINUS)
    {
      op = (token->type == CPP_PLUS_PLUS
     ? POSTINCREMENT_EXPR : POSTDECREMENT_EXPR);
      cp_lexer_consume_token (parser->lexer);
      return build2 (op, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38474, __FUNCTION__))->typed.type), decl, (tree) 
# 38474 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                __null
# 38474 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                         );
    }

  op = cp_parser_assignment_operator_opt (parser);
  if (op == ERROR_MARK)
    return global_trees[TI_ERROR_MARK];

  if (op != NOP_EXPR)
    {
      rhs = cp_parser_assignment_expression (parser);
      rhs = build2 (op, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38484, __FUNCTION__))->typed.type), decl, rhs);
      return build2 (MODIFY_EXPR, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38485, __FUNCTION__))->typed.type), decl, rhs);
    }

  lhs = cp_parser_binary_expression (parser, false, false,
         PREC_ADDITIVE_EXPRESSION, 
# 38489 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 38489 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      );
  token = cp_lexer_peek_token (parser->lexer);
  decl_first = (lhs == decl
  || (scope_chain->x_processing_template_decl && cp_tree_equal (lhs, decl)));
  if (decl_first)
    lhs = (tree) 
# 38494 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 38494 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
  if (token->type != CPP_PLUS
      && token->type != CPP_MINUS)
    return global_trees[TI_ERROR_MARK];

  do
    {
      op = token->type == CPP_PLUS ? PLUS_EXPR : MINUS_EXPR;
      cp_lexer_consume_token (parser->lexer);
      rhs = cp_parser_binary_expression (parser, false, false,
      PREC_ADDITIVE_EXPRESSION, 
# 38504 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 38504 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   );
      token = cp_lexer_peek_token (parser->lexer);
      if (token->type == CPP_PLUS || token->type == CPP_MINUS || decl_first)
 {
   if (lhs == (tree) 
# 38508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 38508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     {
       if (op == PLUS_EXPR)
  lhs = rhs;
       else
  lhs = build_x_unary_op (input_location, NEGATE_EXPR, rhs,
     tf_warning_or_error);
     }
   else
     lhs = build_x_binary_op (input_location, op, lhs, ERROR_MARK, rhs,
         ERROR_MARK, 
# 38518 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 38518 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        , tf_warning_or_error);
 }
    }
  while (token->type == CPP_PLUS || token->type == CPP_MINUS);

  if (!decl_first)
    {
      if ((rhs != decl
    && (!scope_chain->x_processing_template_decl || !cp_tree_equal (rhs, decl)))
   || op == MINUS_EXPR)
 return global_trees[TI_ERROR_MARK];
      rhs = build2 (op, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38529, __FUNCTION__))->typed.type), lhs, decl);
    }
  else
    rhs = build2 (PLUS_EXPR, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38532, __FUNCTION__))->typed.type), decl, lhs);

  return build2 (MODIFY_EXPR, ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38534, __FUNCTION__))->typed.type), decl, rhs);
}






static tree
cp_parser_omp_for_loop_init (cp_parser *parser,
        tree &this_pre_body,
        releasing_vec &for_block,
        tree &init,
        tree &orig_init,
        tree &decl,
        tree &real_decl)
{
  if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
    return (tree) 
# 38552 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 38552 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  tree add_private_clause = (tree) 
# 38554 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 38554 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
# 38564 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  cp_decl_specifier_seq type_specifiers;




  cp_parser_parse_tentatively (parser);
  cp_parser_type_specifier_seq (parser, CP_PARSER_FLAGS_NONE,
                       true,
                           false,
    &type_specifiers);
  if (cp_parser_parse_definitely (parser))
    {


      tree asm_specification, attributes;
      cp_declarator *declarator;

      declarator = cp_parser_declarator (parser,
      CP_PARSER_DECLARATOR_NAMED,
      CP_PARSER_FLAGS_NONE,
                              
# 38584 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 38584 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ,
                          
# 38585 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 38585 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ,
                   false,
                   false,
                   false);
      attributes = cp_parser_attributes_opt (parser);
      asm_specification = cp_parser_asm_specification_opt (parser);

      if (declarator == cp_error_declarator)
 cp_parser_skip_to_end_of_statement (parser);

      else
 {
   tree pushed_scope, auto_node;

   decl = start_decl (declarator, &type_specifiers,
        1, attributes,
                              (tree) 
# 38601 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 38601 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      ,
        &pushed_scope);

   auto_node = type_uses_auto (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38604, __FUNCTION__))->typed.type));
   if (cp_lexer_next_token_is_not (parser->lexer, CPP_EQ))
     {
       if (cp_lexer_next_token_is (parser->lexer,
       CPP_OPEN_PAREN))
         error ("parenthesized initialization is not allowed in "
         "OpenMP %<for%> loop");
       else

  cp_parser_require (parser, CPP_EQ, RT_EQ);

       init = global_trees[TI_ERROR_MARK];
       cp_parser_skip_to_end_of_statement (parser);
     }
   else if ((((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38618, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38618, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38618, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38618, __FUNCTION__))->type_common.lang_flag_5))
     || type_dependent_expression_p (decl)
     || auto_node)
     {
       bool is_direct_init, is_non_constant_init;

       init = cp_parser_initializer (parser,
         &is_direct_init,
         &is_non_constant_init);

       if (auto_node)
  {
    ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38630, __FUNCTION__))->typed.type)
      = do_auto_deduction (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38631, __FUNCTION__))->typed.type), init,
      auto_node);

    if (!(((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38634, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38634, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38634, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38634, __FUNCTION__))->type_common.lang_flag_5))
        && !type_dependent_expression_p (decl))
      goto non_class;
  }

       cp_finish_decl (decl, init, !is_non_constant_init,
         asm_specification,
         (1 << 2));
       orig_init = init;
       if ((((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38643, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38643, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38643, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38643, __FUNCTION__))->type_common.lang_flag_5)))
  {
    vec_safe_push (for_block, this_pre_body);
    init = (tree) 
# 38646 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 38646 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
  }
       else
  {
    init = pop_stmt_list (this_pre_body);
    if (init && ((enum tree_code) (init)->base.code) == STATEMENT_LIST)
      {
        tree_stmt_iterator i = tsi_start (init);

        while (!tsi_end_p (i))
   {
     tree t = tsi_stmt (i);
     if (((enum tree_code) (t)->base.code) == DECL_EXPR
         && ((enum tree_code) ((*((const_cast<tree*> (tree_operand_check (((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38659, __FUNCTION__, (DECL_EXPR)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38659, __FUNCTION__))))))->base.code) == TYPE_DECL)
       {
         tsi_delink (&i);
         vec_safe_push (for_block, t);
         continue;
       }
     break;
   }
        if (tsi_one_before_end_p (i))
   {
     tree t = tsi_stmt (i);
     tsi_delink (&i);
     free_stmt_list (init);
     init = t;
   }
      }
  }
       this_pre_body = (tree) 
# 38676 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 38676 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
     }
   else
     {

       cp_lexer_consume_token (parser->lexer);
       init = cp_parser_assignment_expression (parser);

     non_class:
       if ((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38685, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE))
  init = global_trees[TI_ERROR_MARK];
       else
  cp_finish_decl (decl, (tree) 
# 38688 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 38688 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ,
                          false,
    asm_specification,
    (1 << 2));
     }

   if (pushed_scope)
     pop_scope (pushed_scope);
 }
    }
  else
    {
      cp_id_kind idk;


      cp_parser_parse_tentatively (parser);
      decl = cp_parser_primary_expression (parser, false, false,
        false, &idk);
      cp_token *last_tok = cp_lexer_peek_token (parser->lexer);
      if (!cp_parser_error_occurred (parser)
   && decl
   && (((enum tree_code) (decl)->base.code) == COMPONENT_REF
       || (((enum tree_code) (decl)->base.code) == SCOPE_REF && ((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38710, __FUNCTION__))->typed.type))))
 {
   cp_parser_abort_tentative_parse (parser);
   cp_parser_parse_tentatively (parser);
   cp_token *token = cp_lexer_peek_token (parser->lexer);
   tree name = cp_parser_id_expression (parser, false,
                                   true,
                           
# 38717 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 38717 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ,
                             false,
                           false);
   if (name != global_trees[TI_ERROR_MARK]
       && last_tok == cp_lexer_peek_token (parser->lexer))
     {
       decl = cp_parser_lookup_name_simple (parser, name,
         token->location);
       if (((enum tree_code) (decl)->base.code) == FIELD_DECL)
  add_private_clause = omp_privatize_field (decl, false);
     }
   cp_parser_abort_tentative_parse (parser);
   cp_parser_parse_tentatively (parser);
   decl = cp_parser_primary_expression (parser, false, false,
            false, &idk);
 }
      if (!cp_parser_error_occurred (parser)
   && decl
   && (tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration)
   && (((((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38736, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38736, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38736, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38736, __FUNCTION__))->type_common.lang_flag_5)))
 {
   tree rhs;

   cp_parser_parse_definitely (parser);
   cp_parser_require (parser, CPP_EQ, RT_EQ);
   rhs = cp_parser_assignment_expression (parser);
   orig_init = rhs;
   finish_expr_stmt (build_x_modify_expr (((((rhs)) && ((tree_code_type[(int) (((enum tree_code) ((rhs))->base.code))]) >= tcc_reference && (tree_code_type[(int) (((enum tree_code) ((rhs))->base.code))]) <= tcc_expression)) ? (rhs)->exp.locus : ((location_t) 0)),
       decl, NOP_EXPR,
       rhs,
       tf_warning_or_error));
   if (!add_private_clause)
     add_private_clause = decl;
 }
      else
 {
   decl = 
# 38753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 38753 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             ;
   cp_parser_abort_tentative_parse (parser);
   init = cp_parser_expression (parser);
   if (init)
     {
       if (((enum tree_code) (init)->base.code) == MODIFY_EXPR
    || ((enum tree_code) (init)->base.code) == MODOP_EXPR)
  real_decl = (*((const_cast<tree*> (tree_operand_check ((init), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38760, __FUNCTION__)))));
     }
 }
    }
  return add_private_clause;
}



void
cp_convert_omp_range_for (tree &this_pre_body, vec<tree, va_gc> *for_block,
     tree &decl, tree &orig_decl, tree &init,
     tree &orig_init, tree &cond, tree &incr)
{
  tree begin, end, range_temp_decl = (tree) 
# 38774 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 38774 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                             ;
  tree iter_type, begin_expr, end_expr;

  if (scope_chain->x_processing_template_decl)
    {
      if (check_for_bare_parameter_packs (init))
 init = global_trees[TI_ERROR_MARK];
      if (!type_dependent_expression_p (init)

   && !(((enum tree_code) (init)->base.code) == CONSTRUCTOR && ((contains_struct_check ((init), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38783, __FUNCTION__))->typed.type) == cp_global_trees[CPTI_INIT_LIST_TYPE]))
 {
   tree d = decl;
   if (decl != global_trees[TI_ERROR_MARK] && ((tree_check3 ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38786, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2))
     {
       tree v = (decl_value_expr_lookup ((contains_struct_check ((decl), (TS_DECL_WRTL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38788, __FUNCTION__))));
       if (((enum tree_code) (v)->base.code) == ARRAY_REF
    && (((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38790, __FUNCTION__))))))->base.code) == VAR_DECL)
    && ((((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38791, __FUNCTION__))))))->base.code) == VAR_DECL) && ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38791, __FUNCTION__)))))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38791, __FUNCTION__))->decl_common.lang_specific) ? ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38791, __FUNCTION__)))))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38791, __FUNCTION__))->decl_common.lang_specific)->u.base.selector == lds_decomp : false))
  d = (*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38792, __FUNCTION__)))));
     }
   do_range_for_auto_deduction (d, init);
 }
      cond = cp_global_trees[CPTI_GLOBAL];
      incr = (tree) 
# 38797 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 38797 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
      orig_init = init;
      if (this_pre_body)
 this_pre_body = pop_stmt_list (this_pre_body);
      return;
    }

  init = mark_lvalue_use (init);

  if (decl == global_trees[TI_ERROR_MARK] || init == global_trees[TI_ERROR_MARK])


    begin_expr = end_expr = iter_type = global_trees[TI_ERROR_MARK];
  else
    {
      tree range_temp;

      if ((((enum tree_code) (init)->base.code) == VAR_DECL)
   && array_of_runtime_bound_p (((contains_struct_check ((init), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38815, __FUNCTION__))->typed.type)))

 range_temp = init;
      else
 {
   range_temp = build_range_temp (init);
   ((contains_struct_check ((range_temp), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38821, __FUNCTION__))->decl_minimal.name) = (tree) 
# 38821 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                           __null
# 38821 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
   pushdecl (range_temp);
   cp_finish_decl (range_temp, init,
                         false, (tree) 
# 38824 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 38824 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ,
     (1 << 2));
   range_temp_decl = range_temp;
   range_temp = convert_from_reference (range_temp);
 }
      iter_type = cp_parser_perform_range_for_lookup (range_temp,
            &begin_expr, &end_expr);
    }

  tree end_iter_type = iter_type;
  if (cxx_dialect >= cxx17)
    end_iter_type = cv_unqualified (((contains_struct_check ((end_expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38835, __FUNCTION__))->typed.type));
  end = build_decl (input_location, VAR_DECL, (tree) 
# 38836 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                             __null
# 38836 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                      , end_iter_type);
  ((end)->base.used_flag) = 1;
  ((contains_struct_check ((end), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38838, __FUNCTION__))->decl_common.artificial_flag) = 1;
  pushdecl (end);
  cp_finish_decl (end, end_expr,
                        false, (tree) 
# 38841 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 38841 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ,
    (1 << 2));


  begin = build_decl (input_location, VAR_DECL, (tree) 
# 38845 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null
# 38845 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                        , iter_type);
  ((begin)->base.used_flag) = 1;
  ((contains_struct_check ((begin), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38847, __FUNCTION__))->decl_common.artificial_flag) = 1;
  pushdecl (begin);
  orig_init = init;
  if ((((((enum tree_code) (iter_type)->base.code)) == RECORD_TYPE || (((enum tree_code) (iter_type)->base.code)) == UNION_TYPE) && ((tree_class_check ((iter_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38850, __FUNCTION__))->type_common.lang_flag_5)))
    init = (tree) 
# 38851 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 38851 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
  else
    {
      init = begin_expr;
      begin_expr = (tree) 
# 38855 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 38855 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
    }
  cp_finish_decl (begin, begin_expr,
                        false, (tree) 
# 38858 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 38858 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ,
    (1 << 2));


  if ((((((enum tree_code) (iter_type)->base.code)) == RECORD_TYPE || (((enum tree_code) (iter_type)->base.code)) == UNION_TYPE) && ((tree_class_check ((iter_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38862, __FUNCTION__))->type_common.lang_flag_5)))
    cond = build2 (NE_EXPR, global_trees[TI_BOOLEAN_TYPE], begin, end);
  else
    cond = build_x_binary_op (input_location, NE_EXPR,
         begin, ERROR_MARK,
         end, ERROR_MARK,
         
# 38868 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 38868 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
            , tf_warning_or_error);


  if ((((((enum tree_code) (iter_type)->base.code)) == RECORD_TYPE || (((enum tree_code) (iter_type)->base.code)) == UNION_TYPE) && ((tree_class_check ((iter_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38871, __FUNCTION__))->type_common.lang_flag_5)))
    incr = build2 (PREINCREMENT_EXPR, iter_type, begin, (tree) 
# 38872 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 38872 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                );
  else
    incr = finish_unary_op_expr (input_location,
     PREINCREMENT_EXPR, begin,
     tf_warning_or_error);

  orig_decl = decl;
  decl = begin;
  if (for_block)
    {
      vec_safe_push (for_block, this_pre_body);
      this_pre_body = (tree) 
# 38883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 38883 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
    }

  tree decomp_first_name = (tree) 
# 38886 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 38886 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;
  unsigned decomp_cnt = 0;
  if (orig_decl != global_trees[TI_ERROR_MARK] && ((tree_check3 ((orig_decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38888, __FUNCTION__, (VAR_DECL), (PARM_DECL), (RESULT_DECL))) ->decl_common.decl_flag_2))
    {
      tree v = (decl_value_expr_lookup ((contains_struct_check ((orig_decl), (TS_DECL_WRTL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38890, __FUNCTION__))));
      if (((enum tree_code) (v)->base.code) == ARRAY_REF
   && (((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38892, __FUNCTION__))))))->base.code) == VAR_DECL)
   && ((((enum tree_code) ((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38893, __FUNCTION__))))))->base.code) == VAR_DECL) && ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38893, __FUNCTION__)))))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38893, __FUNCTION__))->decl_common.lang_specific) ? ((contains_struct_check (((*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38893, __FUNCTION__)))))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38893, __FUNCTION__))->decl_common.lang_specific)->u.base.selector == lds_decomp : false))
 {
   tree d = orig_decl;
   orig_decl = (*((const_cast<tree*> (tree_operand_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38896, __FUNCTION__)))));
   decomp_cnt = tree_to_uhwi ((*((const_cast<tree*> (tree_operand_check ((v), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38897, __FUNCTION__)))))) + 1;
   decomp_first_name = d;
 }
    }

  tree auto_node = type_uses_auto (((contains_struct_check ((orig_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38902, __FUNCTION__))->typed.type));
  if (auto_node)
    {
      tree t = build_x_indirect_ref (input_location, begin, RO_UNARY_STAR,
         tf_none);
      if (!((t) == global_trees[TI_ERROR_MARK] || ((t) && ((contains_struct_check (((t)), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38907, __FUNCTION__))->typed.type) == global_trees[TI_ERROR_MARK])))
 ((contains_struct_check ((orig_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38908, __FUNCTION__))->typed.type) = do_auto_deduction (((contains_struct_check ((orig_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38908, __FUNCTION__))->typed.type),
         t, auto_node);
    }

  tree v = make_tree_vec (decomp_cnt + 3);
  (*((const_cast<tree *> (tree_vec_elt_check ((v), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38913, __FUNCTION__))))) = range_temp_decl;
  (*((const_cast<tree *> (tree_vec_elt_check ((v), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38914, __FUNCTION__))))) = end;
  (*((const_cast<tree *> (tree_vec_elt_check ((v), (2), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38915, __FUNCTION__))))) = orig_decl;
  for (unsigned i = 0; i < decomp_cnt; i++)
    {
      (*((const_cast<tree *> (tree_vec_elt_check ((v), (i + 3), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38918, __FUNCTION__))))) = decomp_first_name;
      decomp_first_name = (((contains_struct_check (((contains_struct_check ((decomp_first_name), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38919, __FUNCTION__))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38919, __FUNCTION__))->common.chain));
    }
  orig_decl = tree_cons ((tree) 
# 38921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 38921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 , (tree) 
# 38921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 38921 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            , v);
}




void
cp_finish_omp_range_for (tree orig, tree begin)
{
  ((void)(!(((enum tree_code) (orig)->base.code) == TREE_LIST && ((enum tree_code) (((contains_struct_check ((orig), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38931, __FUNCTION__))->common.chain))->base.code) == TREE_VEC) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38930, __FUNCTION__), 0 : 0))
                                                    ;
  tree decl = (*((const_cast<tree *> (tree_vec_elt_check ((((contains_struct_check ((orig), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38932, __FUNCTION__))->common.chain)), (2), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38932, __FUNCTION__)))));
  tree decomp_first_name = (tree) 
# 38933 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 38933 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   ;
  unsigned int decomp_cnt = 0;

  if ((((enum tree_code) (decl)->base.code) == VAR_DECL) && ((((enum tree_code) (decl)->base.code) == VAR_DECL) && ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38936, __FUNCTION__))->decl_common.lang_specific) ? ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38936, __FUNCTION__))->decl_common.lang_specific)->u.base.selector == lds_decomp : false))
    {
      decomp_first_name = (*((const_cast<tree *> (tree_vec_elt_check ((((contains_struct_check ((orig), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38938, __FUNCTION__))->common.chain)), (3), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38938, __FUNCTION__)))));
      decomp_cnt = ((tree_check ((((contains_struct_check ((orig), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38939, __FUNCTION__))->common.chain)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38939, __FUNCTION__, (TREE_VEC)))->base.u.length) - 3;
      cp_maybe_mangle_decomp (decl, decomp_first_name, decomp_cnt);
    }


  cp_finish_decl (decl,
    build_x_indirect_ref (input_location, begin, RO_UNARY_STAR,
     tf_warning_or_error),
                        false, (tree) 
# 38947 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 38947 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       ,
    (1 << 2));
  if ((((enum tree_code) (decl)->base.code) == VAR_DECL) && ((((enum tree_code) (decl)->base.code) == VAR_DECL) && ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38949, __FUNCTION__))->decl_common.lang_specific) ? ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38949, __FUNCTION__))->decl_common.lang_specific)->u.base.selector == lds_decomp : false))
    cp_finish_decomp (decl, decomp_first_name, decomp_cnt);
}






static void
cp_parser_omp_scan_loop_body (cp_parser *parser)
{
  tree substmt, clauses = (tree) 
# 38961 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 38961 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                  ;

  matching_braces braces;
  if (!braces.require_open (parser))
    return;

  substmt = cp_parser_omp_structured_block (parser, 
# 38967 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 38967 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       );
  substmt = build2 (OMP_SCAN, global_trees[TI_VOID_TYPE], substmt, (tree) 
# 38968 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                      __null
# 38968 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                               );
  add_stmt (substmt);

  cp_token *tok = cp_lexer_peek_token (parser->lexer);
  if (cp_parser_pragma_kind (tok) == PRAGMA_OMP_SCAN)
    {
      enum omp_clause_code clause = OMP_CLAUSE_ERROR;

      cp_lexer_consume_token (parser->lexer);

      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 {
   tree id = cp_lexer_peek_token (parser->lexer)->u.value;
   const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 38981, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
   if (strcmp (p, "inclusive") == 0)
     clause = OMP_CLAUSE_INCLUSIVE;
   else if (strcmp (p, "exclusive") == 0)
     clause = OMP_CLAUSE_EXCLUSIVE;
 }
      if (clause != OMP_CLAUSE_ERROR)
 {
   cp_lexer_consume_token (parser->lexer);
   clauses = cp_parser_omp_var_list (parser, clause, (tree) 
# 38990 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                    __null
# 38990 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                             );
 }
      else
 cp_parser_error (parser, "expected %<inclusive%> or "
     "%<exclusive%> clause");

      cp_parser_require_pragma_eol (parser, tok);
    }
  else
    error ("expected %<#pragma omp scan%>");

  clauses = finish_omp_clauses (clauses, C_ORT_OMP);
  substmt = cp_parser_omp_structured_block (parser, 
# 39002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                   __null
# 39002 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                       );
  substmt = build2_loc (tok->location, OMP_SCAN, global_trees[TI_VOID_TYPE], substmt,
   clauses);
  add_stmt (substmt);

  braces.require_close (parser);
}



static tree
cp_parser_omp_for_loop (cp_parser *parser, enum tree_code code, tree clauses,
   tree *cclauses, bool *if_p)
{
  tree init, orig_init, cond, incr, body, decl, pre_body = (tree) 
# 39016 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                          __null
# 39016 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                   , ret;
  tree orig_decl;
  tree real_decl, initv, condv, incrv, declv, orig_declv;
  tree this_pre_body, cl, ordered_cl = (tree) 
# 39019 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                      __null
# 39019 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                               ;
  location_t loc_first;
  bool collapse_err = false;
  int i, collapse = 1, ordered = 0, count, nbraces = 0;
  releasing_vec for_block;
  auto_vec<tree, 4> orig_inits;
  bool tiling = false;
  bool inscan = false;

  for (cl = clauses; cl; cl = ((contains_struct_check (((tree_check ((cl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39028, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39028, __FUNCTION__))->common.chain))
    if (((tree_check ((cl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39029, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_COLLAPSE)
      collapse = tree_to_shwi ((*(omp_clause_elt_check (((omp_clause_subcode_check ((cl), (OMP_CLAUSE_COLLAPSE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39030, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39030, __FUNCTION__))));
    else if (((tree_check ((cl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39031, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_TILE)
      {
 tiling = true;
 collapse = list_length ((*(omp_clause_elt_check (((omp_clause_subcode_check ((cl), (OMP_CLAUSE_TILE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39034, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39034, __FUNCTION__))));
      }
    else if (((tree_check ((cl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39036, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_ORDERED
      && (*(omp_clause_elt_check (((omp_clause_subcode_check ((cl), (OMP_CLAUSE_ORDERED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39037, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39037, __FUNCTION__))))
      {
 ordered_cl = cl;
 ordered = tree_to_shwi ((*(omp_clause_elt_check (((omp_clause_subcode_check ((cl), (OMP_CLAUSE_ORDERED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39040, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39040, __FUNCTION__))));
      }
    else if (((tree_check ((cl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39042, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_REDUCTION
      && (((omp_clause_subcode_check ((cl), (OMP_CLAUSE_REDUCTION), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39043, __FUNCTION__)))->base.private_flag)
      && (code == OMP_SIMD || code == OMP_FOR))
      inscan = true;

  if (ordered && ordered < collapse)
    {
      error_at (((tree_check ((ordered_cl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39049, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
  "%<ordered%> clause parameter is less than %<collapse%>");
      (*(omp_clause_elt_check (((omp_clause_subcode_check ((ordered_cl), (OMP_CLAUSE_ORDERED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39051, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39051, __FUNCTION__)))
 = build_int_cst ((tree) 
# 39052 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 39052 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          , collapse);
      ordered = collapse;
    }
  if (ordered)
    {
      for (tree *pc = &clauses; *pc; )
 if (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39058, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_LINEAR)
   {
     error_at (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39060, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
        "%<linear%> clause may not be specified together "
        "with %<ordered%> clause with a parameter");
     *pc = ((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39063, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39063, __FUNCTION__))->common.chain);
   }
 else
   pc = &((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39066, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39066, __FUNCTION__))->common.chain);
    }

  ((void)(!(tiling || (collapse >= 1 && ordered >= 0)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39069, __FUNCTION__), 0 : 0));
  count = ordered ? ordered : collapse;

  declv = make_tree_vec (count);
  initv = make_tree_vec (count);
  condv = make_tree_vec (count);
  incrv = make_tree_vec (count);
  orig_declv = (tree) 
# 39076 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 39076 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;

  loc_first = cp_lexer_peek_token (parser->lexer)->location;

  for (i = 0; i < count; i++)
    {
      int bracecount = 0;
      tree add_private_clause = (tree) 
# 39083 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                               __null
# 39083 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
      location_t loc;

      if (!cp_lexer_next_token_is_keyword (parser->lexer, RID_FOR))
 {
   if (!collapse_err)
     cp_parser_error (parser, "for statement expected");
   return 
# 39090 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 39090 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             ;
 }
      loc = cp_lexer_consume_token (parser->lexer)->location;



      auto_suppress_location_wrappers sentinel;

      matching_parens parens;
      if (!parens.require_open (parser))
 return 
# 39100 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 39100 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
           ;

      init = orig_init = decl = real_decl = orig_decl = (tree) 
# 39102 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 39102 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                ;
      this_pre_body = push_stmt_list ();

      if (code != OACC_LOOP && cxx_dialect >= cxx11)
 {

   cp_lexer_save_tokens (parser->lexer);


   bool is_range_for
     = (cp_parser_skip_to_closing_parenthesis_1 (parser,
                      false,
       CPP_COLON,

       false) == -1);


   cp_lexer_rollback_tokens (parser->lexer);

   if (is_range_for)
     {
       bool saved_colon_corrects_to_scope_p
  = parser->colon_corrects_to_scope_p;


       parser->colon_corrects_to_scope_p = false;


       cp_parser_simple_declaration (parser,

         false, &decl);
       parser->colon_corrects_to_scope_p
  = saved_colon_corrects_to_scope_p;

       cp_parser_require (parser, CPP_COLON, RT_COLON);

       init = cp_parser_range_for (parser, (tree) 
# 39138 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                          __null
# 39138 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   , (tree) 
# 39138 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                     __null
# 39138 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                              , decl,
       false, 0, true);

       cp_convert_omp_range_for (this_pre_body, for_block, decl,
     orig_decl, init, orig_init,
     cond, incr);
       if (this_pre_body)
  {
    if (pre_body)
      {
        tree t = pre_body;
        pre_body = push_stmt_list ();
        add_stmt (t);
        add_stmt (this_pre_body);
        pre_body = pop_stmt_list (pre_body);
      }
    else
      pre_body = this_pre_body;
  }

       if (ordered_cl)
  error_at (((tree_check ((ordered_cl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39159, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
     "%<ordered%> clause with parameter on "
     "range-based %<for%> loop");

       goto parse_close_paren;
     }
 }

      add_private_clause
 = cp_parser_omp_for_loop_init (parser, this_pre_body, for_block,
           init, orig_init, decl, real_decl);

      cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);
      if (this_pre_body)
 {
   this_pre_body = pop_stmt_list (this_pre_body);
   if (pre_body)
     {
       tree t = pre_body;
       pre_body = push_stmt_list ();
       add_stmt (t);
       add_stmt (this_pre_body);
       pre_body = pop_stmt_list (pre_body);
     }
   else
     pre_body = this_pre_body;
 }

      if (decl)
 real_decl = decl;
      if (cclauses != 
# 39189 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
   
# 39190 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL] != 
# 39190 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                              __null
   
# 39191 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && real_decl != (tree) 
# 39191 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
   
# 39192 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && code != OMP_LOOP)
 {
   tree *c;
   for (c = &cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL]; *c ; )
     if (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39196, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_FIRSTPRIVATE
  && (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39197, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39197, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39197, __FUNCTION__))) == real_decl)
       {
  error_at (loc, "iteration variable %qD"
     " should not be firstprivate", real_decl);
  *c = ((contains_struct_check (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39201, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39201, __FUNCTION__))->common.chain);
       }
     else if (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39203, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_LASTPRIVATE
       && (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39204, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39204, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39204, __FUNCTION__))) == real_decl)
       {

  tree l = *c;
  *c = ((contains_struct_check (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39208, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39208, __FUNCTION__))->common.chain);
  if (code == OMP_SIMD)
    {
      ((contains_struct_check (((tree_check ((l), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39211, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39211, __FUNCTION__))->common.chain) = cclauses[C_OMP_CLAUSE_SPLIT_FOR];
      cclauses[C_OMP_CLAUSE_SPLIT_FOR] = l;
    }
  else
    {
      ((contains_struct_check (((tree_check ((l), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39216, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39216, __FUNCTION__))->common.chain) = clauses;
      clauses = l;
    }
  add_private_clause = (tree) 
# 39219 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 39219 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               ;
       }
     else
       {
  if (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39223, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_PRIVATE
      && (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39224, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39224, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39224, __FUNCTION__))) == real_decl)
    add_private_clause = (tree) 
# 39225 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 39225 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
  c = &((contains_struct_check (((tree_check ((*c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39226, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39226, __FUNCTION__))->common.chain);
       }
 }

      if (add_private_clause)
 {
   tree c;
   for (c = clauses; c ; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39233, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39233, __FUNCTION__))->common.chain))
     {
       if ((((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39235, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_PRIVATE
     || ((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39236, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_LASTPRIVATE)
    && (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39237, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39237, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39237, __FUNCTION__))) == decl)
  break;
       else if (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39239, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_FIRSTPRIVATE
         && (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39240, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39240, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39240, __FUNCTION__))) == decl)
  error_at (loc, "iteration variable %qD "
     "should not be firstprivate",
     decl);
       else if ((((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39244, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_REDUCTION
   || ((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39245, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_IN_REDUCTION)
         && (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39246, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39246, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39246, __FUNCTION__))) == decl)
  error_at (loc, "iteration variable %qD should not be reduction",
     decl);
     }
   if (c == 
# 39250 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 39250 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               )
     {
       if ((code == OMP_SIMD && collapse != 1) || code == OMP_LOOP)
  c = build_omp_clause (loc, OMP_CLAUSE_LASTPRIVATE);
       else if (code != OMP_SIMD)
  c = build_omp_clause (loc, OMP_CLAUSE_PRIVATE);
       else
  c = build_omp_clause (loc, OMP_CLAUSE_LINEAR);
       (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39258, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39258, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39258, __FUNCTION__))) = add_private_clause;
       c = finish_omp_clauses (c, C_ORT_OMP);
       if (c)
  {
    ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39262, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39262, __FUNCTION__))->common.chain) = clauses;
    clauses = c;


    if (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39266, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_LINEAR)
      (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_LINEAR), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39267, __FUNCTION__))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39267, __FUNCTION__))) = (tree) 
# 39267 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 39267 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           ;
  }
     }
 }

      cond = 
# 39272 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 39272 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
      if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))
 cond = cp_parser_omp_for_cond (parser, decl, code);
      cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);

      incr = 
# 39277 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 39277 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                ;
      if (cp_lexer_next_token_is_not (parser->lexer, CPP_CLOSE_PAREN))
 {


   if (real_decl
       && ((scope_chain->x_processing_template_decl
     && (((contains_struct_check ((real_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39284, __FUNCTION__))->typed.type) == (tree) 
# 39284 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
         
# 39285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
        || !((((enum tree_code) (((contains_struct_check ((real_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39285, __FUNCTION__))->typed.type))->base.code) == POINTER_TYPE) || (((enum tree_code) (((contains_struct_check ((real_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39285, __FUNCTION__))->typed.type))->base.code) == REFERENCE_TYPE))))
    || (((((enum tree_code) (((contains_struct_check ((real_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39286, __FUNCTION__))->typed.type))->base.code)) == RECORD_TYPE || (((enum tree_code) (((contains_struct_check ((real_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39286, __FUNCTION__))->typed.type))->base.code)) == UNION_TYPE) && ((tree_class_check ((((contains_struct_check ((real_decl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39286, __FUNCTION__))->typed.type)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39286, __FUNCTION__))->type_common.lang_flag_5))))
     incr = cp_parser_omp_for_incr (parser, real_decl);
   else
     incr = cp_parser_expression (parser);
   protected_set_expr_location_if_unset (incr, input_location);
 }

    parse_close_paren:
      if (!parens.require_close (parser))
 cp_parser_skip_to_closing_parenthesis (parser, true,
                         false,
                              true);

      (*((const_cast<tree *> (tree_vec_elt_check ((declv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39299, __FUNCTION__))))) = decl;
      (*((const_cast<tree *> (tree_vec_elt_check ((initv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39300, __FUNCTION__))))) = init;
      (*((const_cast<tree *> (tree_vec_elt_check ((condv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39301, __FUNCTION__))))) = cond;
      (*((const_cast<tree *> (tree_vec_elt_check ((incrv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39302, __FUNCTION__))))) = incr;
      if (orig_init)
 {
   orig_inits.safe_grow_cleared (i + 1);
   orig_inits[i] = orig_init;
 }
      if (orig_decl)
 {
   if (!orig_declv)
     orig_declv = copy_node (declv);
   (*((const_cast<tree *> (tree_vec_elt_check ((orig_declv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39312, __FUNCTION__))))) = orig_decl;
 }
      else if (orig_declv)
 (*((const_cast<tree *> (tree_vec_elt_check ((orig_declv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39315, __FUNCTION__))))) = decl;

      if (i == count - 1)
 break;





      cp_parser_parse_tentatively (parser);
      for (;;)
 {
   if (cp_lexer_next_token_is_keyword (parser->lexer, RID_FOR))
     break;
   else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_BRACE))
     {
       cp_lexer_consume_token (parser->lexer);
       bracecount++;
     }
   else if (bracecount
     && cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
     cp_lexer_consume_token (parser->lexer);
   else
     {
       loc = cp_lexer_peek_token (parser->lexer)->location;
       error_at (loc, "not enough for loops to collapse");
       collapse_err = true;
       cp_parser_abort_tentative_parse (parser);
       declv = (tree) 
# 39343 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 39343 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       ;
       break;
     }
 }

      if (declv)
 {
   cp_parser_parse_definitely (parser);
   nbraces += bracecount;
 }
    }

  if (nbraces)
    if_p = 
# 39356 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 39356 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              ;



  parser->in_statement = 8;



  if (orig_declv)
    {
      body = begin_omp_structured_block ();
      for (i = 0; i < count; i++)
 if ((*((const_cast<tree *> (tree_vec_elt_check ((orig_declv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39368, __FUNCTION__))))) != (*((const_cast<tree *> (tree_vec_elt_check ((declv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39368, __FUNCTION__))))))
   cp_finish_omp_range_for ((*((const_cast<tree *> (tree_vec_elt_check ((orig_declv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39369, __FUNCTION__))))),
       (*((const_cast<tree *> (tree_vec_elt_check ((declv), (i), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39370, __FUNCTION__))))));
    }
  else
    body = push_stmt_list ();
  if (inscan)
    cp_parser_omp_scan_loop_body (parser);
  else
    cp_parser_statement (parser, (tree) 
# 39377 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 39377 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         , false, if_p);
  if (orig_declv)
    body = finish_omp_structured_block (body);
  else
    body = pop_stmt_list (body);

  if (declv == (tree) 
# 39383 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 39383 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                       )
    ret = (tree) 
# 39384 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 39384 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
  else
    ret = finish_omp_for (loc_first, code, declv, orig_declv, initv, condv,
     incrv, body, pre_body, &orig_inits, clauses);

  while (nbraces)
    {
      if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_BRACE))
 {
   cp_lexer_consume_token (parser->lexer);
   nbraces--;
 }
      else if (cp_lexer_next_token_is (parser->lexer, CPP_SEMICOLON))
 cp_lexer_consume_token (parser->lexer);
      else
 {
   if (!collapse_err)
     {
       error_at (cp_lexer_peek_token (parser->lexer)->location,
   "collapsed loops not perfectly nested");
     }
   collapse_err = true;
   cp_parser_statement_seq_opt (parser, 
# 39406 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 39406 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           );
   if (cp_lexer_next_token_is (parser->lexer, CPP_EOF))
     break;
 }
    }

  while (!for_block->is_empty ())
    {
      tree t = for_block->pop ();
      if (((enum tree_code) (t)->base.code) == STATEMENT_LIST)
 add_stmt (pop_stmt_list (t));
      else
 add_stmt (t);
    }

  return ret;
}




static void
cp_omp_split_clauses (location_t loc, enum tree_code code,
        omp_clause_mask mask, tree clauses, tree *cclauses)
{
  int i;
  c_omp_split_clauses (loc, code, mask, clauses, cclauses);
  for (i = 0; i < C_OMP_CLAUSE_SPLIT_COUNT; i++)
    if (cclauses[i])
      cclauses[i] = finish_omp_clauses (cclauses[i], C_ORT_OMP);
}
# 39450 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_loop (cp_parser *parser, cp_token *pragma_tok,
      char *p_name, omp_clause_mask mask, tree *cclauses,
      bool *if_p)
{
  tree clauses, sb, ret;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " loop");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LASTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COLLAPSE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_BIND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ORDER));

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 39463 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 39463 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_LOOP, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_LOOP];
    }

  keep_next_level (true);
  sb = begin_omp_structured_block ();
  save = cp_parser_begin_omp_structured_block (parser);

  ret = cp_parser_omp_for_loop (parser, OMP_LOOP, clauses, cclauses, if_p);

  cp_parser_end_omp_structured_block (parser, save);
  add_stmt (finish_omp_for_block (finish_omp_structured_block (sb), ret));

  return ret;
}
# 39499 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_simd (cp_parser *parser, cp_token *pragma_tok,
      char *p_name, omp_clause_mask mask, tree *cclauses,
      bool *if_p)
{
  tree clauses, sb, ret;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " simd");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SAFELEN) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SIMDLEN) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LINEAR) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ALIGNED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LASTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COLLAPSE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NONTEMPORAL) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ORDER));

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 39512 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 39512 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_SIMD, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_SIMD];
      tree c = omp_find_clause (cclauses[C_OMP_CLAUSE_SPLIT_FOR],
    OMP_CLAUSE_ORDERED);
      if (c && (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_ORDERED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39519, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39519, __FUNCTION__))))
 {
   error_at (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39521, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
      "%<ordered%> clause with parameter may not be specified "
      "on %qs construct", p_name);
   (*(omp_clause_elt_check (((omp_clause_subcode_check ((c), (OMP_CLAUSE_ORDERED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39524, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39524, __FUNCTION__))) = (tree) 
# 39524 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 39524 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                         ;
 }
    }

  keep_next_level (true);
  sb = begin_omp_structured_block ();
  save = cp_parser_begin_omp_structured_block (parser);

  ret = cp_parser_omp_for_loop (parser, OMP_SIMD, clauses, cclauses, if_p);

  cp_parser_end_omp_structured_block (parser, save);
  add_stmt (finish_omp_for_block (finish_omp_structured_block (sb), ret));

  return ret;
}
# 39560 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_for (cp_parser *parser, cp_token *pragma_tok,
     char *p_name, omp_clause_mask mask, tree *cclauses,
     bool *if_p)
{
  tree clauses, sb, ret;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " for");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LASTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LINEAR) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ORDERED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SCHEDULE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COLLAPSE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ORDER));


  if (cclauses && (mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP)) == 0)
    mask &= ~(omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT);

  if ((mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) != 0)
    mask &= ~(omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ORDERED);

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39582, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "simd") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   if (cclauses == 
# 39587 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 39587 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   if (!global_options.x_flag_openmp)
     return cp_parser_omp_simd (parser, pragma_tok, p_name, mask,
           cclauses, if_p);
   sb = begin_omp_structured_block ();
   save = cp_parser_begin_omp_structured_block (parser);
   ret = cp_parser_omp_simd (parser, pragma_tok, p_name, mask,
        cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   tree body = finish_omp_structured_block (sb);
   if (ret == 
# 39600 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 39600 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
     return ret;
   ret = make_node (OMP_FOR);
   ((contains_struct_check ((ret), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39603, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
   (*((const_cast<tree*> (tree_operand_check (((tree_range_check ((ret), (OMP_FOR), (OACC_LOOP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39604, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39604, __FUNCTION__))))) = body;
   (*((const_cast<tree*> (tree_operand_check (((tree_range_check ((ret), (OMP_FOR), (OACC_LOOP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39605, __FUNCTION__))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39605, __FUNCTION__))))) = cclauses[C_OMP_CLAUSE_SPLIT_FOR];
   (expr_check (((ret)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39606, __FUNCTION__))->exp.locus = (loc);
   add_stmt (ret);
   return ret;
 }
    }
  if (!global_options.x_flag_openmp)
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 39614 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 39614 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }


  if ((mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) != 0)
    mask &= ~(omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LINEAR);

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 39622 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 39622 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_FOR, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_FOR];
    }

  keep_next_level (true);
  sb = begin_omp_structured_block ();
  save = cp_parser_begin_omp_structured_block (parser);

  ret = cp_parser_omp_for_loop (parser, OMP_FOR, clauses, cclauses, if_p);

  cp_parser_end_omp_structured_block (parser, save);
  add_stmt (finish_omp_for_block (finish_omp_structured_block (sb), ret));

  return ret;
}

static tree cp_parser_omp_taskloop (cp_parser *, cp_token *, char *,
        omp_clause_mask, tree *, bool *);





static tree
cp_parser_omp_master (cp_parser *parser, cp_token *pragma_tok,
        char *p_name, omp_clause_mask mask, tree *cclauses,
        bool *if_p)
{
  tree clauses, sb, ret;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " master");

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39662, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "taskloop") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   if (cclauses == 
# 39667 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 39667 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   if (!global_options.x_flag_openmp)
     return cp_parser_omp_taskloop (parser, pragma_tok, p_name, mask,
        cclauses, if_p);
   sb = begin_omp_structured_block ();
   save = cp_parser_begin_omp_structured_block (parser);
   ret = cp_parser_omp_taskloop (parser, pragma_tok, p_name, mask,
     cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   tree body = finish_omp_structured_block (sb);
   if (ret == 
# 39680 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 39680 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
     return ret;
   return c_finish_omp_master (loc, body);
 }
    }
  if (!global_options.x_flag_openmp)
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 39688 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 39688 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  if (cclauses)
    {
      clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
        false);
      cp_omp_split_clauses (loc, OMP_MASTER, mask, clauses, cclauses);
    }
  else
    cp_parser_require_pragma_eol (parser, pragma_tok);

  return c_finish_omp_master (loc,
         cp_parser_omp_structured_block (parser, if_p));
}
# 39719 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_omp_ordered (cp_parser *parser, cp_token *pragma_tok,
         enum pragma_context context, bool *if_p)
{
  location_t loc = pragma_tok->location;

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39728, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "depend") == 0)
 {
   if (!global_options.x_flag_openmp)
     {
       cp_parser_skip_to_pragma_eol (parser, pragma_tok);
       return false;
     }
   if (context == pragma_stmt)
     {
       error_at (pragma_tok->location, "%<#pragma omp ordered%> with "
   "%<depend%> clause may only be used in compound "
   "statements");
       cp_parser_skip_to_pragma_eol (parser, pragma_tok);
       return false;
     }
   tree clauses
     = cp_parser_omp_all_clauses (parser,
      (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND),
      "#pragma omp ordered", pragma_tok);
   c_finish_omp_ordered (loc, clauses, (tree) 
# 39749 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                      __null
# 39749 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                               );
   return false;
 }
    }

  tree clauses
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_THREADS) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SIMD)),
     "#pragma omp ordered", pragma_tok);

  if (!global_options.x_flag_openmp
      && omp_find_clause (clauses, OMP_CLAUSE_SIMD) == (tree) 
# 39759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                      __null
# 39759 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                               )
    return false;

  c_finish_omp_ordered (loc, clauses,
   cp_parser_omp_structured_block (parser, if_p));
  return true;
}
# 39776 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_sections_scope (cp_parser *parser)
{
  tree stmt, substmt;
  bool error_suppress = false;
  cp_token *tok;

  matching_braces braces;
  if (!braces.require_open (parser))
    return (tree) 
# 39785 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 39785 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  stmt = push_stmt_list ();

  if (cp_parser_pragma_kind (cp_lexer_peek_token (parser->lexer))
      != PRAGMA_OMP_SECTION)
    {
      substmt = cp_parser_omp_structured_block (parser, 
# 39792 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 39792 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           );
      substmt = build1 (OMP_SECTION, global_trees[TI_VOID_TYPE], substmt);
      add_stmt (substmt);
    }

  while (1)
    {
      tok = cp_lexer_peek_token (parser->lexer);
      if (tok->type == CPP_CLOSE_BRACE)
 break;
      if (tok->type == CPP_EOF)
 break;

      if (cp_parser_pragma_kind (tok) == PRAGMA_OMP_SECTION)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_require_pragma_eol (parser, tok);
   error_suppress = false;
 }
      else if (!error_suppress)
 {
   cp_parser_error (parser, "expected %<#pragma omp section%> or %<}%>");
   error_suppress = true;
 }

      substmt = cp_parser_omp_structured_block (parser, 
# 39817 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 39817 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           );
      substmt = build1 (OMP_SECTION, global_trees[TI_VOID_TYPE], substmt);
      add_stmt (substmt);
    }
  braces.require_close (parser);

  substmt = pop_stmt_list (stmt);

  stmt = make_node (OMP_SECTIONS);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39826, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39827, __FUNCTION__, (OMP_SECTIONS)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39827, __FUNCTION__))))) = substmt;

  add_stmt (stmt);
  return stmt;
}
# 39844 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_sections (cp_parser *parser, cp_token *pragma_tok,
   char *p_name, omp_clause_mask mask, tree *cclauses)
{
  tree clauses, ret;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " sections");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LASTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT));
  if (cclauses)
    mask &= ~(omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT);

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 39857 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 39857 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_SECTIONS, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_SECTIONS];
    }

  ret = cp_parser_omp_sections_scope (parser);
  if (ret)
    (*((const_cast<tree*> (tree_operand_check (((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39866, __FUNCTION__, (OMP_SECTIONS)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39866, __FUNCTION__))))) = clauses;

  return ret;
}
# 39894 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_parallel (cp_parser *parser, cp_token *pragma_tok,
   char *p_name, omp_clause_mask mask, tree *cclauses,
   bool *if_p)
{
  tree stmt, clauses, block;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " parallel");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SHARED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COPYIN) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NUM_THREADS) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PROC_BIND));

  if ((mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP)) != 0
      && (mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) == 0)
    mask &= ~(omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COPYIN);

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_FOR))
    {
      tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
      if (cclauses == 
# 39913 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 39913 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         )
 cclauses = cclauses_buf;

      cp_lexer_consume_token (parser->lexer);
      if (!global_options.x_flag_openmp)
 return cp_parser_omp_for (parser, pragma_tok, p_name, mask, cclauses,
      if_p);
      block = begin_omp_parallel ();
      save = cp_parser_begin_omp_structured_block (parser);
      tree ret = cp_parser_omp_for (parser, pragma_tok, p_name, mask, cclauses,
        if_p);
      cp_parser_end_omp_structured_block (parser, save);
      stmt = finish_omp_parallel (cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL],
      block);
      if (ret == (tree) 
# 39927 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 39927 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         )
 return ret;
      ((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39929, __FUNCTION__, (OMP_PARALLEL)))->base.private_flag) = 1;
      return stmt;
    }


  else if (cclauses
    && (mask & (omp_clause_mask (1)
         << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE)) != 0)
    {
      error_at (loc, "expected %<for%> after %qs", p_name);
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 39940 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 39940 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }
  else if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39945, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      if (cclauses == 
# 39946 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null 
# 39946 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          && strcmp (p, "master") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   block = begin_omp_parallel ();
   save = cp_parser_begin_omp_structured_block (parser);
   tree ret = cp_parser_omp_master (parser, pragma_tok, p_name, mask,
        cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   stmt = finish_omp_parallel (cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL],
          block);
   if (ret == (tree) 
# 39959 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 39959 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     return ret;
   ((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39961, __FUNCTION__, (OMP_PARALLEL)))->base.private_flag) = 1;
   return stmt;
 }
      else if (strcmp (p, "loop") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   if (cclauses == 
# 39967 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 39967 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   if (!global_options.x_flag_openmp)
     return cp_parser_omp_loop (parser, pragma_tok, p_name, mask,
           cclauses, if_p);
   block = begin_omp_parallel ();
   save = cp_parser_begin_omp_structured_block (parser);
   tree ret = cp_parser_omp_loop (parser, pragma_tok, p_name, mask,
      cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   stmt = finish_omp_parallel (cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL],
          block);
   if (ret == (tree) 
# 39981 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 39981 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     return ret;
   ((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 39983, __FUNCTION__, (OMP_PARALLEL)))->base.private_flag) = 1;
   return stmt;
 }
      else if (!global_options.x_flag_openmp)
 {
   cp_parser_skip_to_pragma_eol (parser, pragma_tok);
   return (tree) 
# 39989 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null
# 39989 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;
 }
      else if (cclauses == 
# 39991 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null 
# 39991 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               && strcmp (p, "sections") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   block = begin_omp_parallel ();
   save = cp_parser_begin_omp_structured_block (parser);
   cp_parser_omp_sections (parser, pragma_tok, p_name, mask, cclauses);
   cp_parser_end_omp_structured_block (parser, save);
   stmt = finish_omp_parallel (cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL],
          block);
   ((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40003, __FUNCTION__, (OMP_PARALLEL)))->base.private_flag) = 1;
   return stmt;
 }
    }
  else if (!global_options.x_flag_openmp)
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 40010 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40010 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 40014 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 40014 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_PARALLEL, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_PARALLEL];
    }

  block = begin_omp_parallel ();
  save = cp_parser_begin_omp_structured_block (parser);
  cp_parser_statement (parser, (tree) 
# 40023 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 40023 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , false, if_p);
  cp_parser_end_omp_structured_block (parser, save);
  stmt = finish_omp_parallel (clauses, block);
  return stmt;
}
# 40039 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_single (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree stmt = make_node (OMP_SINGLE);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40043, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40044, __FUNCTION__))->exp.locus = (pragma_tok->location);

  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40046, __FUNCTION__, (OMP_SINGLE)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40046, __FUNCTION__)))))
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COPYPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT)),
     "#pragma omp single", pragma_tok);
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40049, __FUNCTION__, (OMP_SINGLE)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40049, __FUNCTION__))))) = cp_parser_omp_structured_block (parser, if_p);

  return add_stmt (stmt);
}
# 40071 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_task (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree clauses, block;
  unsigned int save;

  clauses = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_UNTIED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SHARED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FINAL) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MERGEABLE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIORITY) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IN_REDUCTION)),
           "#pragma omp task", pragma_tok);
  block = begin_omp_task ();
  save = cp_parser_begin_omp_structured_block (parser);
  cp_parser_statement (parser, (tree) 
# 40081 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 40081 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , false, if_p);
  cp_parser_end_omp_structured_block (parser, save);
  return finish_omp_task (clauses, block);
}
# 40095 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_taskwait (cp_parser *parser, cp_token *pragma_tok)
{
  tree clauses
    = cp_parser_omp_all_clauses (parser, (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND),
     "#pragma omp taskwait", pragma_tok);

  if (clauses)
    {
      tree stmt = make_node (OMP_TASK);
      ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40105, __FUNCTION__))->typed.type) = global_trees[TI_VOID];
      (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40106, __FUNCTION__, (OMP_TASK)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40106, __FUNCTION__))))) = clauses;
      (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40107, __FUNCTION__, (OMP_TASK)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40107, __FUNCTION__))))) = (tree) 
# 40107 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 40107 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                     ;
      (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40108, __FUNCTION__))->exp.locus = (pragma_tok->location);
      add_stmt (stmt);
    }
  else
    finish_omp_taskwait ();
}




static void
cp_parser_omp_taskyield (cp_parser *parser, cp_token *pragma_tok)
{
  cp_parser_require_pragma_eol (parser, pragma_tok);
  finish_omp_taskyield ();
}
# 40135 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_taskgroup (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree clauses
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_TASK_REDUCTION)),
     "#pragma omp taskgroup", pragma_tok);
  return c_finish_omp_taskgroup (input_location,
     cp_parser_omp_structured_block (parser,
         if_p),
     clauses);
}





static void
cp_parser_omp_threadprivate (cp_parser *parser, cp_token *pragma_tok)
{
  tree vars;

  vars = cp_parser_omp_var_list (parser, OMP_CLAUSE_ERROR, 
# 40156 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                          __null
# 40156 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                              );
  cp_parser_require_pragma_eol (parser, pragma_tok);

  finish_omp_threadprivate (vars);
}
# 40172 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_cancel (cp_parser *parser, cp_token *pragma_tok)
{
  tree clauses = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PARALLEL) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FOR) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SECTIONS) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_TASKGROUP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF)),
         "#pragma omp cancel", pragma_tok);
  finish_omp_cancel (clauses);
}
# 40189 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_cancellation_point (cp_parser *parser, cp_token *pragma_tok,
      enum pragma_context context)
{
  tree clauses;
  bool point_seen = false;

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40199, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "point") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   point_seen = true;
 }
    }
  if (!point_seen)
    {
      cp_parser_error (parser, "expected %<point%>");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return;
    }

  if (context != pragma_compound)
    {
      if (context == pragma_stmt)
 error_at (pragma_tok->location,
    "%<#pragma %s%> may only be used in compound statements",
    "omp cancellation point");
      else
 cp_parser_error (parser, "expected declaration specifiers");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return;
    }

  clauses = cp_parser_omp_all_clauses (parser,
           ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PARALLEL) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FOR) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SECTIONS) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_TASKGROUP)),
           "#pragma omp cancellation point",
           pragma_tok);
  finish_omp_cancellation_point (clauses);
}
# 40244 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_distribute (cp_parser *parser, cp_token *pragma_tok,
     char *p_name, omp_clause_mask mask, tree *cclauses,
     bool *if_p)
{
  tree clauses, sb, ret;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " distribute");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LASTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DIST_SCHEDULE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COLLAPSE));

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40259, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      bool simd = false;
      bool parallel = false;

      if (strcmp (p, "simd") == 0)
 simd = true;
      else
 parallel = strcmp (p, "parallel") == 0;
      if (parallel || simd)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   if (cclauses == 
# 40270 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 40270 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     cclauses = cclauses_buf;
   cp_lexer_consume_token (parser->lexer);
   if (!global_options.x_flag_openmp)
     {
       if (simd)
  return cp_parser_omp_simd (parser, pragma_tok, p_name, mask,
        cclauses, if_p);
       else
  return cp_parser_omp_parallel (parser, pragma_tok, p_name, mask,
            cclauses, if_p);
     }
   sb = begin_omp_structured_block ();
   save = cp_parser_begin_omp_structured_block (parser);
   if (simd)
     ret = cp_parser_omp_simd (parser, pragma_tok, p_name, mask,
          cclauses, if_p);
   else
     ret = cp_parser_omp_parallel (parser, pragma_tok, p_name, mask,
       cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   tree body = finish_omp_structured_block (sb);
   if (ret == 
# 40292 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 40292 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
     return ret;
   ret = make_node (OMP_DISTRIBUTE);
   ((contains_struct_check ((ret), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40295, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
   (*((const_cast<tree*> (tree_operand_check (((tree_range_check ((ret), (OMP_FOR), (OACC_LOOP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40296, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40296, __FUNCTION__))))) = body;
   (*((const_cast<tree*> (tree_operand_check (((tree_range_check ((ret), (OMP_FOR), (OACC_LOOP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40297, __FUNCTION__))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40297, __FUNCTION__))))) = cclauses[C_OMP_CLAUSE_SPLIT_DISTRIBUTE];
   (expr_check (((ret)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40298, __FUNCTION__))->exp.locus = (loc);
   add_stmt (ret);
   return ret;
 }
    }
  if (!global_options.x_flag_openmp)
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 40306 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40306 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 40310 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 40310 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_DISTRIBUTE, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_DISTRIBUTE];
    }

  keep_next_level (true);
  sb = begin_omp_structured_block ();
  save = cp_parser_begin_omp_structured_block (parser);

  ret = cp_parser_omp_for_loop (parser, OMP_DISTRIBUTE, clauses, 
# 40321 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                __null
# 40321 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                    , if_p);

  cp_parser_end_omp_structured_block (parser, save);
  add_stmt (finish_omp_for_block (finish_omp_structured_block (sb), ret));

  return ret;
}
# 40342 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_teams (cp_parser *parser, cp_token *pragma_tok,
       char *p_name, omp_clause_mask mask, tree *cclauses,
       bool *if_p)
{
  tree clauses, sb, ret;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " teams");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SHARED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NUM_TEAMS) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_THREAD_LIMIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULT));

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40357, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      if (strcmp (p, "distribute") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   if (cclauses == 
# 40361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 40361 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   if (!global_options.x_flag_openmp)
     return cp_parser_omp_distribute (parser, pragma_tok, p_name, mask,
          cclauses, if_p);
   keep_next_level (true);
   sb = begin_omp_structured_block ();
   save = cp_parser_begin_omp_structured_block (parser);
   ret = cp_parser_omp_distribute (parser, pragma_tok, p_name, mask,
       cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   tree body = finish_omp_structured_block (sb);
   if (ret == 
# 40375 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 40375 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
     return ret;
   clauses = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];
   ret = make_node (OMP_TEAMS);
   ((contains_struct_check ((ret), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40379, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
   (*((const_cast<tree*> (tree_operand_check (((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40380, __FUNCTION__, (OMP_TEAMS)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40380, __FUNCTION__))))) = clauses;
   (*((const_cast<tree*> (tree_operand_check (((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40381, __FUNCTION__, (OMP_TEAMS)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40381, __FUNCTION__))))) = body;
   ((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40382, __FUNCTION__, (OMP_TEAMS)))->base.private_flag) = 1;
   (expr_check (((ret)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40383, __FUNCTION__))->exp.locus = (loc);
   return add_stmt (ret);
 }
      else if (strcmp (p, "loop") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   if (cclauses == 
# 40389 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 40389 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   if (!global_options.x_flag_openmp)
     return cp_parser_omp_loop (parser, pragma_tok, p_name, mask,
           cclauses, if_p);
   keep_next_level (true);
   sb = begin_omp_structured_block ();
   save = cp_parser_begin_omp_structured_block (parser);
   ret = cp_parser_omp_loop (parser, pragma_tok, p_name, mask,
        cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   tree body = finish_omp_structured_block (sb);
   if (ret == 
# 40403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 40403 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
     return ret;
   clauses = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];
   ret = make_node (OMP_TEAMS);
   ((contains_struct_check ((ret), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40407, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
   (*((const_cast<tree*> (tree_operand_check (((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40408, __FUNCTION__, (OMP_TEAMS)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40408, __FUNCTION__))))) = clauses;
   (*((const_cast<tree*> (tree_operand_check (((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40409, __FUNCTION__, (OMP_TEAMS)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40409, __FUNCTION__))))) = body;
   ((tree_check ((ret), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40410, __FUNCTION__, (OMP_TEAMS)))->base.private_flag) = 1;
   (expr_check (((ret)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40411, __FUNCTION__))->exp.locus = (loc);
   return add_stmt (ret);
 }
    }
  if (!global_options.x_flag_openmp)
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 40418 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40418 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 40422 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 40422 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_TEAMS, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];
    }

  tree stmt = make_node (OMP_TEAMS);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40430, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40431, __FUNCTION__, (OMP_TEAMS)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40431, __FUNCTION__))))) = clauses;
  keep_next_level (true);
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40433, __FUNCTION__, (OMP_TEAMS)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40433, __FUNCTION__))))) = cp_parser_omp_structured_block (parser, if_p);
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40434, __FUNCTION__))->exp.locus = (loc);

  return add_stmt (stmt);
}
# 40450 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_target_data (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree clauses
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_USE_DEVICE_PTR) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_USE_DEVICE_ADDR)),
     "#pragma omp target data", pragma_tok);
  int map_seen = 0;
  for (tree *pc = &clauses; *pc;)
    {
      if (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40459, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_MAP)
 switch (((enum gomp_map_kind) (omp_clause_subcode_check ((*pc), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40460, __FUNCTION__))->omp_clause.subcode.map_kind))
   {
   case GOMP_MAP_TO:
   case GOMP_MAP_ALWAYS_TO:
   case GOMP_MAP_FROM:
   case GOMP_MAP_ALWAYS_FROM:
   case GOMP_MAP_TOFROM:
   case GOMP_MAP_ALWAYS_TOFROM:
   case GOMP_MAP_ALLOC:
     map_seen = 3;
     break;
   case GOMP_MAP_FIRSTPRIVATE_POINTER:
   case GOMP_MAP_FIRSTPRIVATE_REFERENCE:
   case GOMP_MAP_ALWAYS_POINTER:
     break;
   default:
     map_seen |= 1;
     error_at (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40477, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
        "%<#pragma omp target data%> with map-type other "
        "than %<to%>, %<from%>, %<tofrom%> or %<alloc%> "
        "on %<map%> clause");
     *pc = ((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40481, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40481, __FUNCTION__))->common.chain);
     continue;
   }
      else if (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40484, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_USE_DEVICE_PTR
        || ((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40485, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_USE_DEVICE_ADDR)
 map_seen = 3;
      pc = &((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40487, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40487, __FUNCTION__))->common.chain);
    }

  if (map_seen != 3)
    {
      if (map_seen == 0)
 error_at (pragma_tok->location,
    "%<#pragma omp target data%> must contain at least "
    "one %<map%>, %<use_device_ptr%> or %<use_device_addr%> "
    "clause");
      return (tree) 
# 40497 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40497 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  tree stmt = make_node (OMP_TARGET_DATA);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40501, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40502, __FUNCTION__, (OMP_TARGET_DATA)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40502, __FUNCTION__))))) = clauses;

  keep_next_level (true);
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40505, __FUNCTION__, (OMP_TARGET_DATA)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40505, __FUNCTION__))))) = cp_parser_omp_structured_block (parser, if_p);

  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40507, __FUNCTION__))->exp.locus = (pragma_tok->location);
  return add_stmt (stmt);
}
# 40522 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_target_enter_data (cp_parser *parser, cp_token *pragma_tok,
     enum pragma_context context)
{
  bool data_seen = false;
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40530, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "data") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   data_seen = true;
 }
    }
  if (!data_seen)
    {
      cp_parser_error (parser, "expected %<data%>");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 40542 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40542 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  if (context == pragma_stmt)
    {
      error_at (pragma_tok->location,
  "%<#pragma %s%> may only be used in compound statements",
  "omp target enter data");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 40551 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40551 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  tree clauses
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT)),
     "#pragma omp target enter data", pragma_tok);
  int map_seen = 0;
  for (tree *pc = &clauses; *pc;)
    {
      if (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40560, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_MAP)
 switch (((enum gomp_map_kind) (omp_clause_subcode_check ((*pc), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40561, __FUNCTION__))->omp_clause.subcode.map_kind))
   {
   case GOMP_MAP_TO:
   case GOMP_MAP_ALWAYS_TO:
   case GOMP_MAP_ALLOC:
     map_seen = 3;
     break;
   case GOMP_MAP_FIRSTPRIVATE_POINTER:
   case GOMP_MAP_FIRSTPRIVATE_REFERENCE:
   case GOMP_MAP_ALWAYS_POINTER:
     break;
   default:
     map_seen |= 1;
     error_at (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40574, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
        "%<#pragma omp target enter data%> with map-type other "
        "than %<to%> or %<alloc%> on %<map%> clause");
     *pc = ((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40577, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40577, __FUNCTION__))->common.chain);
     continue;
   }
      pc = &((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40580, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40580, __FUNCTION__))->common.chain);
    }

  if (map_seen != 3)
    {
      if (map_seen == 0)
 error_at (pragma_tok->location,
    "%<#pragma omp target enter data%> must contain at least "
    "one %<map%> clause");
      return (tree) 
# 40589 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40589 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  tree stmt = make_node (OMP_TARGET_ENTER_DATA);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40593, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40594, __FUNCTION__, (OMP_TARGET_ENTER_DATA)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40594, __FUNCTION__))))) = clauses;
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40595, __FUNCTION__))->exp.locus = (pragma_tok->location);
  return add_stmt (stmt);
}
# 40610 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_target_exit_data (cp_parser *parser, cp_token *pragma_tok,
    enum pragma_context context)
{
  bool data_seen = false;
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40618, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "data") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   data_seen = true;
 }
    }
  if (!data_seen)
    {
      cp_parser_error (parser, "expected %<data%>");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 40630 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40630 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  if (context == pragma_stmt)
    {
      error_at (pragma_tok->location,
  "%<#pragma %s%> may only be used in compound statements",
  "omp target exit data");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 40639 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40639 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  tree clauses
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT)),
     "#pragma omp target exit data", pragma_tok);
  int map_seen = 0;
  for (tree *pc = &clauses; *pc;)
    {
      if (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40648, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_MAP)
 switch (((enum gomp_map_kind) (omp_clause_subcode_check ((*pc), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40649, __FUNCTION__))->omp_clause.subcode.map_kind))
   {
   case GOMP_MAP_FROM:
   case GOMP_MAP_ALWAYS_FROM:
   case GOMP_MAP_RELEASE:
   case GOMP_MAP_DELETE:
     map_seen = 3;
     break;
   case GOMP_MAP_FIRSTPRIVATE_POINTER:
   case GOMP_MAP_FIRSTPRIVATE_REFERENCE:
   case GOMP_MAP_ALWAYS_POINTER:
     break;
   default:
     map_seen |= 1;
     error_at (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40663, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
        "%<#pragma omp target exit data%> with map-type other "
        "than %<from%>, %<release%> or %<delete%> on %<map%>"
        " clause");
     *pc = ((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40667, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40667, __FUNCTION__))->common.chain);
     continue;
   }
      pc = &((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40670, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40670, __FUNCTION__))->common.chain);
    }

  if (map_seen != 3)
    {
      if (map_seen == 0)
 error_at (pragma_tok->location,
    "%<#pragma omp target exit data%> must contain at least "
    "one %<map%> clause");
      return (tree) 
# 40679 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40679 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  tree stmt = make_node (OMP_TARGET_EXIT_DATA);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40683, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40684, __FUNCTION__, (OMP_TARGET_EXIT_DATA)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40684, __FUNCTION__))))) = clauses;
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40685, __FUNCTION__))->exp.locus = (pragma_tok->location);
  return add_stmt (stmt);
}
# 40700 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_omp_target_update (cp_parser *parser, cp_token *pragma_tok,
        enum pragma_context context)
{
  if (context == pragma_stmt)
    {
      error_at (pragma_tok->location,
  "%<#pragma %s%> may only be used in compound statements",
  "omp target update");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return false;
    }

  tree clauses
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FROM) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_TO) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT)),
     "#pragma omp target update", pragma_tok);
  if (omp_find_clause (clauses, OMP_CLAUSE_TO) == (tree) 
# 40716 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                 __null
      
# 40717 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && omp_find_clause (clauses, OMP_CLAUSE_FROM) == (tree) 
# 40717 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                      __null
# 40717 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                               )
    {
      error_at (pragma_tok->location,
  "%<#pragma omp target update%> must contain at least one "
  "%<from%> or %<to%> clauses");
      return false;
    }

  tree stmt = make_node (OMP_TARGET_UPDATE);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40726, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40727, __FUNCTION__, (OMP_TARGET_UPDATE)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40727, __FUNCTION__))))) = clauses;
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40728, __FUNCTION__))->exp.locus = (pragma_tok->location);
  add_stmt (stmt);
  return false;
}
# 40748 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,
        enum pragma_context context, bool *if_p)
{
  tree *pc = 
# 40752 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 40752 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                , stmt;

  if (global_options.x_flag_openmp)
    omp_requires_mask
      = (enum omp_requires) (omp_requires_mask | OMP_REQUIRES_TARGET_USED);

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40761, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      enum tree_code ccode = ERROR_MARK;

      if (strcmp (p, "teams") == 0)
 ccode = OMP_TEAMS;
      else if (strcmp (p, "parallel") == 0)
 ccode = OMP_PARALLEL;
      else if (strcmp (p, "simd") == 0)
 ccode = OMP_SIMD;
      if (ccode != ERROR_MARK)
 {
   tree cclauses[C_OMP_CLAUSE_SPLIT_COUNT];
   char p_name[sizeof ("#pragma omp target teams distribute "
         "parallel for simd")];

   cp_lexer_consume_token (parser->lexer);
   strcpy (p_name, "#pragma omp target");
   if (!global_options.x_flag_openmp)
     {
       tree stmt;
       switch (ccode)
  {
  case OMP_TEAMS:
    stmt = cp_parser_omp_teams (parser, pragma_tok, p_name,
           ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULTMAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR)),
           cclauses, if_p);
    break;
  case OMP_PARALLEL:
    stmt = cp_parser_omp_parallel (parser, pragma_tok, p_name,
       ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULTMAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR)),
       cclauses, if_p);
    break;
  case OMP_SIMD:
    stmt = cp_parser_omp_simd (parser, pragma_tok, p_name,
          ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULTMAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR)),
          cclauses, if_p);
    break;
  default:
    (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40799, __FUNCTION__));
  }
       return stmt != (tree) 
# 40801 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 40801 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              ;
     }
   keep_next_level (true);
   tree sb = begin_omp_structured_block (), ret;
   unsigned save = cp_parser_begin_omp_structured_block (parser);
   switch (ccode)
     {
     case OMP_TEAMS:
       ret = cp_parser_omp_teams (parser, pragma_tok, p_name,
      ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULTMAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR)), cclauses,
      if_p);
       break;
     case OMP_PARALLEL:
       ret = cp_parser_omp_parallel (parser, pragma_tok, p_name,
         ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULTMAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR)), cclauses,
         if_p);
       break;
     case OMP_SIMD:
       ret = cp_parser_omp_simd (parser, pragma_tok, p_name,
     ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULTMAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR)), cclauses,
     if_p);
       break;
     default:
       (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40824, __FUNCTION__));
     }
   cp_parser_end_omp_structured_block (parser, save);
   tree body = finish_omp_structured_block (sb);
   if (ret == (tree) 
# 40828 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 40828 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     return false;
   if (ccode == OMP_TEAMS && !scope_chain->x_processing_template_decl)
     {



       tree c;
       for (c = cclauses[C_OMP_CLAUSE_SPLIT_TEAMS];
     c; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40837, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40837, __FUNCTION__))->common.chain))
  if ((((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40838, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_NUM_TEAMS
       || ((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40839, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_THREAD_LIMIT)
      && ((enum tree_code) ((*(omp_clause_elt_check ((c), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40840, __FUNCTION__))))->base.code) != INTEGER_CST)
    {
      tree expr = (*(omp_clause_elt_check ((c), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40842, __FUNCTION__)));
      expr = force_target_expr (((contains_struct_check ((expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40843, __FUNCTION__))->typed.type), expr, tf_none);
      if (expr == global_trees[TI_ERROR_MARK])
        continue;
      tree tmp = (*(tree_operand_check_code ((expr), (TARGET_EXPR), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40846, __FUNCTION__)));
      add_stmt (expr);
      (*(omp_clause_elt_check ((c), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40848, __FUNCTION__))) = expr;
      tree tc = build_omp_clause (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40849, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
      OMP_CLAUSE_FIRSTPRIVATE);
      (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((tc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40851, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40851, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40851, __FUNCTION__))) = tmp;
      ((contains_struct_check (((tree_check ((tc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40852, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40852, __FUNCTION__))->common.chain)
        = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];
      cclauses[C_OMP_CLAUSE_SPLIT_TARGET] = tc;
    }
     }
   tree stmt = make_node (OMP_TARGET);
   ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40858, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
   (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40859, __FUNCTION__, (OMP_TARGET)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40859, __FUNCTION__))))) = cclauses[C_OMP_CLAUSE_SPLIT_TARGET];
   (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40860, __FUNCTION__, (OMP_TARGET)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40860, __FUNCTION__))))) = body;
   ((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40861, __FUNCTION__, (OMP_TARGET)))->base.private_flag) = 1;
   (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40862, __FUNCTION__))->exp.locus = (pragma_tok->location);
   add_stmt (stmt);
   pc = &(*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40864, __FUNCTION__, (OMP_TARGET)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40864, __FUNCTION__)))));
   goto check_clauses;
 }
      else if (!global_options.x_flag_openmp)
 {
   cp_parser_skip_to_pragma_eol (parser, pragma_tok);
   return false;
 }
      else if (strcmp (p, "data") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_omp_target_data (parser, pragma_tok, if_p);
   return true;
 }
      else if (strcmp (p, "enter") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_omp_target_enter_data (parser, pragma_tok, context);
   return false;
 }
      else if (strcmp (p, "exit") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_omp_target_exit_data (parser, pragma_tok, context);
   return false;
 }
      else if (strcmp (p, "update") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   return cp_parser_omp_target_update (parser, pragma_tok, context);
 }
    }
  if (!global_options.x_flag_openmp)
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return false;
    }

  stmt = make_node (OMP_TARGET);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40903, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];

  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40905, __FUNCTION__, (OMP_TARGET)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40905, __FUNCTION__)))))
    = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEPEND) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOWAIT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULTMAP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IS_DEVICE_PTR)),
     "#pragma omp target", pragma_tok);
  pc = &(*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40908, __FUNCTION__, (OMP_TARGET)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40908, __FUNCTION__)))));
  keep_next_level (true);
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40910, __FUNCTION__, (OMP_TARGET)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40910, __FUNCTION__))))) = cp_parser_omp_structured_block (parser, if_p);

  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40912, __FUNCTION__))->exp.locus = (pragma_tok->location);
  add_stmt (stmt);

check_clauses:
  while (*pc)
    {
      if (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40918, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_MAP)
 switch (((enum gomp_map_kind) (omp_clause_subcode_check ((*pc), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40919, __FUNCTION__))->omp_clause.subcode.map_kind))
   {
   case GOMP_MAP_TO:
   case GOMP_MAP_ALWAYS_TO:
   case GOMP_MAP_FROM:
   case GOMP_MAP_ALWAYS_FROM:
   case GOMP_MAP_TOFROM:
   case GOMP_MAP_ALWAYS_TOFROM:
   case GOMP_MAP_ALLOC:
   case GOMP_MAP_FIRSTPRIVATE_POINTER:
   case GOMP_MAP_FIRSTPRIVATE_REFERENCE:
   case GOMP_MAP_ALWAYS_POINTER:
     break;
   default:
     error_at (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40933, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
        "%<#pragma omp target%> with map-type other "
        "than %<to%>, %<from%>, %<tofrom%> or %<alloc%> "
        "on %<map%> clause");
     *pc = ((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40937, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40937, __FUNCTION__))->common.chain);
     continue;
   }
      pc = &((contains_struct_check (((tree_check ((*pc), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40940, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40940, __FUNCTION__))->common.chain);
    }
  return true;
}





static tree
cp_parser_oacc_cache (cp_parser *parser, cp_token *pragma_tok)
{
  tree stmt, clauses;

  clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE__CACHE_, (tree) 
# 40954 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                               __null
# 40954 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                        );
  clauses = finish_omp_clauses (clauses, C_ORT_ACC);

  cp_parser_require_pragma_eol (parser, cp_lexer_peek_token (parser->lexer));

  stmt = make_node (OACC_CACHE);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40960, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40961, __FUNCTION__, (OACC_CACHE)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40961, __FUNCTION__))))) = clauses;
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 40962, __FUNCTION__))->exp.locus = (pragma_tok->location);
  add_stmt (stmt);

  return stmt;
}
# 40984 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_data (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree stmt, clauses, block;
  unsigned int save;

  clauses = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ATTACH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPY) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYIN) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYOUT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DETACH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEVICEPTR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NO_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRESENT) ),
     "#pragma acc data", pragma_tok);

  block = begin_omp_parallel ();
  save = cp_parser_begin_omp_structured_block (parser);
  cp_parser_statement (parser, (tree) 
# 40995 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 40995 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , false, if_p);
  cp_parser_end_omp_structured_block (parser, save);
  stmt = finish_oacc_data (clauses, block);
  return stmt;
}
# 41010 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_host_data (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree stmt, clauses, block;
  unsigned int save;

  clauses = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_USE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF_PRESENT) ),
     "#pragma acc host_data", pragma_tok);

  block = begin_omp_parallel ();
  save = cp_parser_begin_omp_structured_block (parser);
  cp_parser_statement (parser, (tree) 
# 41021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 41021 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , false, if_p);
  cp_parser_end_omp_structured_block (parser, save);
  stmt = finish_oacc_host_data (clauses, block);
  return stmt;
}
# 41041 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_declare (cp_parser *parser, cp_token *pragma_tok)
{
  tree clauses, stmt;
  bool error = false;
  bool found_in_scope = global_bindings_p ();

  clauses = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPY) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYIN) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYOUT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEVICEPTR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_LINK) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRESENT) ),
     "#pragma acc declare", pragma_tok, true);


  if (omp_find_clause (clauses, OMP_CLAUSE_MAP) == (tree) 
# 41052 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                  __null
# 41052 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           )
    {
      error_at (pragma_tok->location,
  "no valid clauses specified in %<#pragma acc declare%>");
      return (tree) 
# 41056 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 41056 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  for (tree t = clauses; t; t = ((contains_struct_check (((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41059, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41059, __FUNCTION__))->common.chain))
    {
      location_t loc = ((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41061, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus;
      tree decl = (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41062, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41062, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41062, __FUNCTION__)));
      if (!(tree_code_type[(int) (((enum tree_code) (decl)->base.code))] == tcc_declaration))
 {
   error_at (loc, "array section in %<#pragma acc declare%>");
   error = true;
   continue;
 }
      ((void)(!(((tree_check ((t), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41069, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_MAP) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41069, __FUNCTION__), 0 : 0));
      switch (((enum gomp_map_kind) (omp_clause_subcode_check ((t), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41070, __FUNCTION__))->omp_clause.subcode.map_kind))
 {
 case GOMP_MAP_FIRSTPRIVATE_POINTER:
 case GOMP_MAP_ALLOC:
 case GOMP_MAP_TO:
 case GOMP_MAP_FORCE_DEVICEPTR:
 case GOMP_MAP_DEVICE_RESIDENT:
   break;

 case GOMP_MAP_LINK:
   if (!global_bindings_p ()
       && (((decl)->base.static_flag)
        || !((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41082, __FUNCTION__))->decl_common.decl_flag_1)))
     {
       error_at (loc,
   "%qD must be a global variable in "
   "%<#pragma acc declare link%>",
   decl);
       error = true;
       continue;
     }
   break;

 default:
   if (global_bindings_p ())
     {
       error_at (loc, "invalid OpenACC clause at file scope");
       error = true;
       continue;
     }
   if (((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41100, __FUNCTION__))->decl_common.decl_flag_1))
     {
       error_at (loc,
   "invalid use of %<extern%> variable %qD "
   "in %<#pragma acc declare%>", decl);
       error = true;
       continue;
     }
   else if (((decl)->base.public_flag))
     {
       error_at (loc,
   "invalid use of %<global%> variable %qD "
   "in %<#pragma acc declare%>", decl);
       error = true;
       continue;
     }
   break;
 }

      if (!found_in_scope)
 for (tree d = (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->names; d; d = ((contains_struct_check ((d), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41120, __FUNCTION__))->common.chain))
   if (d == decl)
     {
       found_in_scope = true;
       break;
     }
      if (!found_in_scope)
 {
   error_at (loc,
      "%qD must be a variable declared in the same scope as "
      "%<#pragma acc declare%>", decl);
   error = true;
   continue;
 }

      if (lookup_attribute ("omp declare target", ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41135, __FUNCTION__))->decl_common.attributes))
   || lookup_attribute ("omp declare target link",
          ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41137, __FUNCTION__))->decl_common.attributes)))
 {
   error_at (loc, "variable %qD used more than once with "
      "%<#pragma acc declare%>", decl);
   error = true;
   continue;
 }

      if (!error)
 {
   tree id;

   if (((enum gomp_map_kind) (omp_clause_subcode_check ((t), (OMP_CLAUSE_MAP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41149, __FUNCTION__))->omp_clause.subcode.map_kind) == GOMP_MAP_LINK)
     id = (__builtin_constant_p ("omp declare target link") ? get_identifier_with_length (("omp declare target link"), strlen ("omp declare target link")) : get_identifier ("omp declare target link"));
   else
     id = (__builtin_constant_p ("omp declare target") ? get_identifier_with_length (("omp declare target"), strlen ("omp declare target")) : get_identifier ("omp declare target"));

   ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41154, __FUNCTION__))->decl_common.attributes)
     = tree_cons (id, (tree) 
# 41155 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 41155 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                              , ((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41155, __FUNCTION__))->decl_common.attributes));
   if ((*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->kind == sk_namespace)
     {
       symtab_node *node = symtab_node::get (decl);
       if (node != 
# 41159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 41159 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
  {
    node->offloadable = 1;
    if (0)
      {
        g->have_offload = true;
        if (is_a <varpool_node *> (node))
   vec_safe_push (offload_vars, decl);
      }
  }
     }
 }
    }

  if (error || (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->kind == sk_namespace)
    return (tree) 
# 41174 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 41174 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;

  stmt = make_node (OACC_DECLARE);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41177, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41178, __FUNCTION__, (OACC_DECLARE)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41178, __FUNCTION__))))) = clauses;
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41179, __FUNCTION__))->exp.locus = (pragma_tok->location);

  add_stmt (stmt);

  return (tree) 
# 41183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
        __null
# 41183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;
}
# 41213 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_enter_exit_data (cp_parser *parser, cp_token *pragma_tok,
    bool enter)
{
  location_t loc = pragma_tok->location;
  tree stmt, clauses;
  const char *p = "";

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    p = ((const char *) (tree_check ((cp_lexer_peek_token (parser->lexer)->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41222, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

  if (strcmp (p, "data") != 0)
    {
      error_at (loc, "expected %<data%> after %<#pragma acc %s%>",
  enter ? "enter" : "exit");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 41229 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 41229 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  cp_lexer_consume_token (parser->lexer);

  if (enter)
    clauses = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ATTACH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ASYNC) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYIN) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WAIT) ),
      "#pragma acc enter data", pragma_tok);
  else
    clauses = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ASYNC) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYOUT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DELETE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DETACH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_FINALIZE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WAIT) ),
      "#pragma acc exit data", pragma_tok);

  if (omp_find_clause (clauses, OMP_CLAUSE_MAP) == (tree) 
# 41241 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                  __null
# 41241 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           )
    {
      error_at (loc, "%<#pragma acc %s data%> has no data movement clause",
  enter ? "enter" : "exit");
      return (tree) 
# 41245 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 41245 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  stmt = enter ? make_node (OACC_ENTER_DATA) : make_node (OACC_EXIT_DATA);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41249, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_range_check ((stmt), (OACC_CACHE), (OMP_TARGET_EXIT_DATA), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41250, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41250, __FUNCTION__))))) = clauses;
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41251, __FUNCTION__))->exp.locus = (loc);
  add_stmt (stmt);
  return stmt;
}
# 41272 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_loop (cp_parser *parser, cp_token *pragma_tok, char *p_name,
       omp_clause_mask mask, tree *cclauses, bool *if_p)
{
  bool is_parallel = ((mask >> PRAGMA_OACC_CLAUSE_REDUCTION) & 1) == 1;

  strcat (p_name, " loop");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COLLAPSE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_GANG) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_VECTOR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WORKER) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_AUTO) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_INDEPENDENT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_SEQ) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_TILE));

  tree clauses = cp_parser_oacc_all_clauses (parser, mask, p_name, pragma_tok,
          cclauses == 
# 41282 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                     __null
# 41282 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         );
  if (cclauses)
    {
      clauses = c_oacc_split_loop_clauses (clauses, cclauses, is_parallel);
      if (*cclauses)
 *cclauses = finish_omp_clauses (*cclauses, C_ORT_ACC);
      if (clauses)
 clauses = finish_omp_clauses (clauses, C_ORT_ACC);
    }

  tree block = begin_omp_structured_block ();
  int save = cp_parser_begin_omp_structured_block (parser);
  tree stmt = cp_parser_omp_for_loop (parser, OACC_LOOP, clauses, 
# 41294 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                 __null
# 41294 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                     , if_p);
  cp_parser_end_omp_structured_block (parser, save);
  add_stmt (finish_omp_structured_block (block));

  return stmt;
}
# 41369 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_compute (cp_parser *parser, cp_token *pragma_tok,
   char *p_name, bool *if_p)
{
  omp_clause_mask mask;
  enum tree_code code;
  switch (cp_parser_pragma_kind (pragma_tok))
    {
    case PRAGMA_OACC_KERNELS:
      strcat (p_name, " kernels");
      mask = ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ASYNC) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ATTACH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPY) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYIN) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYOUT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEFAULT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEVICEPTR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NO_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NUM_GANGS) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NUM_WORKERS) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRESENT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WAIT) );
      code = OACC_KERNELS;
      break;
    case PRAGMA_OACC_PARALLEL:
      strcat (p_name, " parallel");
      mask = ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ASYNC) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ATTACH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPY) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYIN) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYOUT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEFAULT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEVICEPTR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NO_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NUM_GANGS) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NUM_WORKERS) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRESENT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_VECTOR_LENGTH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WAIT) );
      code = OACC_PARALLEL;
      break;
    case PRAGMA_OACC_SERIAL:
      strcat (p_name, " serial");
      mask = ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ASYNC) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ATTACH) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPY) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYIN) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_COPYOUT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEFAULT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEVICEPTR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_NO_CREATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_PRESENT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WAIT) );
      code = OACC_SERIAL;
      break;
    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41393, __FUNCTION__));
    }

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      const char *p
 = ((const char *) (tree_check ((cp_lexer_peek_token (parser->lexer)->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41399, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      if (strcmp (p, "loop") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   tree block = begin_omp_parallel ();
   tree clauses;
   tree stmt = cp_parser_oacc_loop (parser, pragma_tok, p_name, mask,
        &clauses, if_p);
   protected_set_expr_location (stmt, pragma_tok->location);
   return finish_omp_construct (code, block, clauses);
 }
    }

  tree clauses = cp_parser_oacc_all_clauses (parser, mask, p_name, pragma_tok);

  tree block = begin_omp_parallel ();
  unsigned int save = cp_parser_begin_omp_structured_block (parser);
  cp_parser_statement (parser, (tree) 
# 41416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 41416 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , false, if_p);
  cp_parser_end_omp_structured_block (parser, save);
  return finish_omp_construct (code, block, clauses);
}
# 41433 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_update (cp_parser *parser, cp_token *pragma_tok)
{
  tree stmt, clauses;

  clauses = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ASYNC) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_DEVICE) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_HOST) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_IF_PRESENT) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WAIT)),
      "#pragma acc update", pragma_tok);

  if (omp_find_clause (clauses, OMP_CLAUSE_MAP) == (tree) 
# 41441 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                  __null
# 41441 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                           )
    {
      error_at (pragma_tok->location,
  "%<#pragma acc update%> must contain at least one "
  "%<device%> or %<host%> or %<self%> clause");
      return (tree) 
# 41446 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 41446 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  stmt = make_node (OACC_UPDATE);
  ((contains_struct_check ((stmt), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41450, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
  (*((const_cast<tree*> (tree_operand_check (((tree_check ((stmt), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41451, __FUNCTION__, (OACC_UPDATE)))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41451, __FUNCTION__))))) = clauses;
  (expr_check (((stmt)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41452, __FUNCTION__))->exp.locus = (pragma_tok->location);
  add_stmt (stmt);
  return stmt;
}
# 41466 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_oacc_wait (cp_parser *parser, cp_token *pragma_tok)
{
  tree clauses, list = (tree) 
# 41469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 41469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                               , stmt = (tree) 
# 41469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 41469 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 ;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  if (cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)
    list = cp_parser_oacc_wait_list (parser, loc, list);

  clauses = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_ASYNC)),
     "#pragma acc wait", pragma_tok);

  stmt = c_finish_oacc_wait (loc, list, clauses);
  stmt = finish_expr_stmt (stmt);

  return stmt;
}
# 41495 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_declare_simd (cp_parser *parser, cp_token *pragma_tok,
       enum pragma_context context,
       bool variant_p)
{
  bool first_p = parser->omp_declare_simd == 
# 41500 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 41500 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                ;
  cp_omp_declare_simd_data data;
  if (first_p)
    {
      data.error_seen = false;
      data.fndecl_seen = false;
      data.variant_p = variant_p;
      data.tokens = vNULL;
      data.clauses = (tree) 
# 41508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 41508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;


      parser->omp_declare_simd = &data;
    }
  else if (parser->omp_declare_simd->variant_p != variant_p)
    {
      error_at (pragma_tok->location,
  "%<#pragma omp declare %s%> followed by "
  "%<#pragma omp declare %s%>",
  parser->omp_declare_simd->variant_p ? "variant" : "simd",
  parser->omp_declare_simd->variant_p ? "simd" : "variant");
      parser->omp_declare_simd->error_seen = true;
    }


  while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))
    cp_lexer_consume_token (parser->lexer);
  cp_parser_require_pragma_eol (parser, pragma_tok);
  struct cp_token_cache *cp
    = cp_token_cache_new (pragma_tok, cp_lexer_peek_token (parser->lexer));
  parser->omp_declare_simd->tokens.safe_push (cp);

  if (first_p)
    {
      while (cp_lexer_next_token_is (parser->lexer, CPP_PRAGMA))
 cp_parser_pragma (parser, context, 
# 41534 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 41534 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       );
      switch (context)
 {
 case pragma_external:
   cp_parser_declaration (parser);
   break;
 case pragma_member:
   cp_parser_member_declaration (parser);
   break;
 case pragma_objc_icode:
   cp_parser_block_declaration (parser, false);
   break;
 default:
   cp_parser_declaration_statement (parser);
   break;
 }
      if (parser->omp_declare_simd
   && !parser->omp_declare_simd->error_seen
   && !parser->omp_declare_simd->fndecl_seen)
 error_at (pragma_tok->location,
    "%<#pragma omp declare %s%> not immediately followed by "
    "function declaration or definition",
    parser->omp_declare_simd->variant_p ? "variant" : "simd");
      data.tokens.release ();
      parser->omp_declare_simd = 
# 41558 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 41558 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    ;
    }
}

static const char *const omp_construct_selectors[] = {
  "simd", "target", "teams", "parallel", "for", 
# 41563 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null 
# 41563 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                    };
static const char *const omp_device_selectors[] = {
  "kind", "isa", "arch", 
# 41565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null 
# 41565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             };
static const char *const omp_implementation_selectors[] = {
  "vendor", "extension", "atomic_default_mem_order", "unified_address",
  "unified_shared_memory", "dynamic_allocators", "reverse_offload", 
# 41568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                   __null 
# 41568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                        };
static const char *const omp_user_selectors[] = {
  "condition", 
# 41570 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null 
# 41570 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   };
# 41580 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)
{
  tree ret = (tree) 
# 41583 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 41583 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
  do
    {
      tree selector;
      if (cp_lexer_next_token_is (parser->lexer, CPP_KEYWORD)
   || cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 selector = cp_lexer_peek_token (parser->lexer)->u.value;
      else
 {
   cp_parser_error (parser, "expected trait selector name");
   return global_trees[TI_ERROR_MARK];
 }

      tree properties = (tree) 
# 41596 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 41596 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
      const char *const *selectors = 
# 41597 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    __null
# 41597 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                        ;
      bool allow_score = true;
      bool allow_user = false;
      int property_limit = 0;
      enum { CTX_PROPERTY_NONE, CTX_PROPERTY_USER, CTX_PROPERTY_NAME_LIST,
      CTX_PROPERTY_ID, CTX_PROPERTY_EXPR,
      CTX_PROPERTY_SIMD } property_kind = CTX_PROPERTY_NONE;
      switch (((const char *) (tree_check ((set), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41604, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str)[0])
 {
 case 'c':
   selectors = omp_construct_selectors;
   allow_score = false;
   property_limit = 1;
   property_kind = CTX_PROPERTY_SIMD;
   break;
 case 'd':
   selectors = omp_device_selectors;
   allow_score = false;
   allow_user = true;
   property_limit = 3;
   property_kind = CTX_PROPERTY_NAME_LIST;
   break;
 case 'i':
   selectors = omp_implementation_selectors;
   allow_user = true;
   property_limit = 3;
   property_kind = CTX_PROPERTY_NAME_LIST;
   break;
 case 'u':
   selectors = omp_user_selectors;
   property_limit = 1;
   property_kind = CTX_PROPERTY_EXPR;
   break;
 default:
   (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41631, __FUNCTION__));
 }
      for (int i = 0; ; i++)
 {
   if (selectors[i] == 
# 41635 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 41635 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          )
     {
       if (allow_user)
  {
    property_kind = CTX_PROPERTY_USER;
    break;
  }
       else
  {
    error ("selector %qs not allowed for context selector "
    "set %qs", ((const char *) (tree_check ((selector), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41645, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str),
    ((const char *) (tree_check ((set), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41646, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
    cp_lexer_consume_token (parser->lexer);
    return global_trees[TI_ERROR_MARK];
  }
     }
   if (i == property_limit)
     property_kind = CTX_PROPERTY_NONE;
   if (strcmp (selectors[i], ((const char *) (tree_check ((selector), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41653, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str)) == 0)
     break;
 }
      if (property_kind == CTX_PROPERTY_NAME_LIST
   && ((const char *) (tree_check ((set), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41657, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str)[0] == 'i'
   && strcmp (((const char *) (tree_check ((selector), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41658, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str),
       "atomic_default_mem_order") == 0)
 property_kind = CTX_PROPERTY_ID;

      cp_lexer_consume_token (parser->lexer);

      if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
 {
   if (property_kind == CTX_PROPERTY_NONE)
     {
       error ("selector %qs does not accept any properties",
       ((const char *) (tree_check ((selector), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41669, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str));
       return global_trees[TI_ERROR_MARK];
     }

   matching_parens parens;
   parens.consume_open (parser);

   cp_token *token = cp_lexer_peek_token (parser->lexer);
   if (allow_score
       && cp_lexer_next_token_is (parser->lexer, CPP_NAME)
       && strcmp (((const char *) (tree_check ((token->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41679, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str), "score") == 0
       && cp_lexer_nth_token_is (parser->lexer, 2, CPP_OPEN_PAREN))
     {
       cp_lexer_save_tokens (parser->lexer);
       cp_lexer_consume_token (parser->lexer);
       cp_lexer_consume_token (parser->lexer);
       if (cp_parser_skip_to_closing_parenthesis (parser, false, false,
        true)
    && cp_lexer_next_token_is (parser->lexer, CPP_COLON))
  {
    cp_lexer_rollback_tokens (parser->lexer);
    cp_lexer_consume_token (parser->lexer);

    matching_parens parens2;
    parens2.require_open (parser);
    tree score = cp_parser_constant_expression (parser);
    if (!parens2.require_close (parser))
      cp_parser_skip_to_closing_parenthesis (parser, true,
          false, true);
    cp_parser_require (parser, CPP_COLON, RT_COLON);
    if (score != global_trees[TI_ERROR_MARK])
      {
        score = fold_non_dependent_expr (score);
        if (value_dependent_expression_p (score))
   properties = tree_cons ((__builtin_constant_p (" score") ? get_identifier_with_length ((" score"), strlen (" score")) : get_identifier (" score")),
      score, properties);
        else if (!(((enum tree_code) (((contains_struct_check ((score), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41705, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((score), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41705, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((score), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41705, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)
          || ((enum tree_code) (score)->base.code) != INTEGER_CST)
   error_at (token->location, "score argument must be "
      "constant integer expression");
        else if (tree_int_cst_sgn (score) < 0)
   error_at (token->location, "score argument must be "
      "non-negative");
        else
   properties = tree_cons ((__builtin_constant_p (" score") ? get_identifier_with_length ((" score"), strlen (" score")) : get_identifier (" score")),
      score, properties);
      }
  }
       else
  cp_lexer_rollback_tokens (parser->lexer);

       token = cp_lexer_peek_token (parser->lexer);
     }

   switch (property_kind)
     {
       tree t;
     case CTX_PROPERTY_USER:
       do
  {
    t = cp_parser_constant_expression (parser);
    if (t != global_trees[TI_ERROR_MARK])
      {
        t = fold_non_dependent_expr (t);
        if (((enum tree_code) (t)->base.code) == STRING_CST)
   properties = tree_cons ((tree) 
# 41734 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 41734 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   , t, properties);
        else if (!value_dependent_expression_p (t)
          && (!(((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41736, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41736, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41736, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)
       || !tree_fits_shwi_p (t)))
   error_at (token->location, "property must be "
      "constant integer expression or string "
      "literal");
        else
   properties = tree_cons ((tree) 
# 41742 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                          __null
# 41742 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                   , t, properties);
      }
    else
      return global_trees[TI_ERROR_MARK];

    if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
      cp_lexer_consume_token (parser->lexer);
    else
      break;
  }
       while (1);
       break;
     case CTX_PROPERTY_ID:
       if (cp_lexer_next_token_is (parser->lexer, CPP_KEYWORD)
    || cp_lexer_next_token_is (parser->lexer, CPP_NAME))
  {
    tree prop = cp_lexer_peek_token (parser->lexer)->u.value;
    cp_lexer_consume_token (parser->lexer);
    properties = tree_cons (prop, (tree) 
# 41760 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                 __null
# 41760 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                          , properties);
  }
       else
  {
    cp_parser_error (parser, "expected identifier");
    return global_trees[TI_ERROR_MARK];
  }
       break;
     case CTX_PROPERTY_NAME_LIST:
       do
  {
    tree prop = (tree) 
# 41771 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null
# 41771 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                        , value = (tree) 
# 41771 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 41771 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           ;
    if (cp_lexer_next_token_is (parser->lexer, CPP_KEYWORD)
        || cp_lexer_next_token_is (parser->lexer, CPP_NAME))
      {
        prop = cp_lexer_peek_token (parser->lexer)->u.value;
        cp_lexer_consume_token (parser->lexer);
      }
    else if (cp_lexer_next_token_is (parser->lexer, CPP_STRING))
      value = cp_parser_string_literal (parser, false, false);
    else
      {
        cp_parser_error (parser, "expected identifier or "
            "string literal");
        return global_trees[TI_ERROR_MARK];
      }

    properties = tree_cons (prop, value, properties);

    if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
      cp_lexer_consume_token (parser->lexer);
    else
      break;
  }
       while (1);
       break;
     case CTX_PROPERTY_EXPR:
       t = cp_parser_constant_expression (parser);
       if (t != global_trees[TI_ERROR_MARK])
  {
    t = fold_non_dependent_expr (t);
    if (!value_dependent_expression_p (t)
        && (!(((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41802, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41802, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((t), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41802, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)
     || !tree_fits_shwi_p (t)))
      error_at (token->location, "property must be "
         "constant integer expression");
    else
      properties = tree_cons ((tree) 
# 41807 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 41807 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                      , t, properties);
  }
       else
  return global_trees[TI_ERROR_MARK];
       break;
     case CTX_PROPERTY_SIMD:
       if (!has_parms_p)
  {
    error_at (token->location, "properties for %<simd%> "
       "selector may not be specified in "
       "%<metadirective%>");
    return global_trees[TI_ERROR_MARK];
  }
       properties
  = cp_parser_omp_all_clauses (parser,
          ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SIMDLEN) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LINEAR) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ALIGNED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_UNIFORM) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_INBRANCH) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOTINBRANCH)),
          "simd", 
# 41823 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 41823 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     , true, 2);
       break;
     default:
       (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41826, __FUNCTION__));
     }

   if (!parens.require_close (parser))
     cp_parser_skip_to_closing_parenthesis (parser, true, false, true);

   properties = nreverse (properties);
 }
      else if (property_kind == CTX_PROPERTY_NAME_LIST
        || property_kind == CTX_PROPERTY_ID
        || property_kind == CTX_PROPERTY_EXPR)
 {
   cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN);
   return global_trees[TI_ERROR_MARK];
 }

      ret = tree_cons (selector, properties, ret);

      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);
      else
 break;
    }
  while (1);

  return nreverse (ret);
}
# 41867 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_context_selector_specification (cp_parser *parser,
           bool has_parms_p)
{
  tree ret = (tree) 
# 41871 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 41871 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
  do
    {
      const char *setp = "";
      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 setp
   = ((const char *) (tree_check ((cp_lexer_peek_token (parser->lexer)->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 41877, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      switch (setp[0])
 {
 case 'c':
   if (strcmp (setp, "construct") == 0)
     setp = 
# 41882 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 41882 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ;
   break;
 case 'd':
   if (strcmp (setp, "device") == 0)
     setp = 
# 41886 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 41886 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ;
   break;
 case 'i':
   if (strcmp (setp, "implementation") == 0)
     setp = 
# 41890 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 41890 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ;
   break;
 case 'u':
   if (strcmp (setp, "user") == 0)
     setp = 
# 41894 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
           __null
# 41894 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
               ;
   break;
 default:
   break;
 }
      if (setp)
 {
   cp_parser_error (parser, "expected %<construct%>, %<device%>, "
       "%<implementation%> or %<user%>");
   return global_trees[TI_ERROR_MARK];
 }

      tree set = cp_lexer_peek_token (parser->lexer)->u.value;
      cp_lexer_consume_token (parser->lexer);

      if (!cp_parser_require (parser, CPP_EQ, RT_EQ))
 return global_trees[TI_ERROR_MARK];

      matching_braces braces;
      if (!braces.require_open (parser))
 return global_trees[TI_ERROR_MARK];

      tree selectors
 = cp_parser_omp_context_selector (parser, set, has_parms_p);
      if (selectors == global_trees[TI_ERROR_MARK])
 {
   cp_parser_skip_to_closing_brace (parser);
   ret = global_trees[TI_ERROR_MARK];
 }
      else if (ret != global_trees[TI_ERROR_MARK])
 ret = tree_cons (set, selectors, ret);

      braces.require_close (parser);

      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);
      else
 break;
    }
  while (1);

  if (ret == global_trees[TI_ERROR_MARK])
    return ret;
  return nreverse (ret);
}




static tree
cp_finish_omp_declare_variant (cp_parser *parser, cp_token *pragma_tok,
          tree attrs)
{
  matching_parens parens;
  if (!parens.require_open (parser))
    {
     fail:
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return attrs;
    }

  bool template_p;
  cp_id_kind idk = CP_ID_KIND_NONE;
  cp_token *varid_token = cp_lexer_peek_token (parser->lexer);
  cp_expr varid
    = cp_parser_id_expression (parser, false,
                                 true,
                         &template_p,
                           false,
                         false);
  parens.require_close (parser);

  tree variant;
  if (((enum tree_code) (varid)->base.code) == TEMPLATE_ID_EXPR
      || ((enum tree_code) (varid)->base.code) == TYPE_DECL
      || varid == global_trees[TI_ERROR_MARK])
    variant = varid;
  else if (varid_token->type == CPP_NAME && varid_token->error_reported)
    variant = (tree) 
# 41972 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 41972 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      ;
  else
    {
      tree ambiguous_decls;
      variant = cp_parser_lookup_name (parser, varid, none_type,
           template_p, false,
                                true,
           &ambiguous_decls,
           varid.get_location ());
      if (ambiguous_decls)
 variant = (tree) 
# 41982 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 41982 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
    }
  if (variant == (tree) 
# 41984 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 41984 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         )
    variant = global_trees[TI_ERROR_MARK];
  else if (((enum tree_code) (variant)->base.code) != SCOPE_REF)
    {
      const char *error_msg;
      variant
 = finish_id_expression (varid, variant, parser->scope,
    &idk, false, true,
    &parser->non_integral_constant_expression_p,
    template_p, true, false, false, &error_msg,
    varid.get_location ());
      if (error_msg)
 cp_parser_error (parser, error_msg);
    }
  location_t caret_loc = get_pure_location (varid.get_location ());
  location_t start_loc = get_start (varid_token->location);
  location_t finish_loc = get_finish (varid.get_location ());
  location_t varid_loc = make_location (caret_loc, start_loc, finish_loc);

  const char *clause = "";
  location_t match_loc = cp_lexer_peek_token (parser->lexer)->location;
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    clause = ((const char *) (tree_check ((cp_lexer_peek_token (parser->lexer)->u.value), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42006, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
  if (strcmp (clause, "match"))
    {
      cp_parser_error (parser, "expected %<match%>");
      goto fail;
    }

  cp_lexer_consume_token (parser->lexer);

  if (!parens.require_open (parser))
    goto fail;

  tree ctx = cp_parser_omp_context_selector_specification (parser, true);
  if (ctx == global_trees[TI_ERROR_MARK])
    goto fail;
  ctx = c_omp_check_context_selector (match_loc, ctx);
  if (ctx != global_trees[TI_ERROR_MARK] && variant != global_trees[TI_ERROR_MARK])
    {
      tree match_loc_node = maybe_wrap_with_location (global_trees[TI_INTEGER_ZERO],
            match_loc);
      tree loc_node = maybe_wrap_with_location (global_trees[TI_INTEGER_ZERO], varid_loc);
      loc_node = tree_cons (match_loc_node,
       build_int_cst (integer_types[itk_int], idk),
       build_tree_list (loc_node, global_trees[TI_INTEGER_ZERO]));
      attrs = tree_cons ((__builtin_constant_p ("omp declare variant base") ? get_identifier_with_length (("omp declare variant base"), strlen ("omp declare variant base")) : get_identifier ("omp declare variant base")),
    tree_cons (variant, ctx, loc_node), attrs);
      if (scope_chain->x_processing_template_decl)
 ((tree_not_check2 (((tree_check ((attrs), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42033, __FUNCTION__, (TREE_LIST)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42033, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0) = 1;
    }

  parens.require_close (parser);
  cp_parser_skip_to_pragma_eol (parser, pragma_tok);
  return attrs;
}





static tree
cp_parser_late_parsing_omp_declare_simd (cp_parser *parser, tree attrs)
{
  struct cp_token_cache *ce;
  cp_omp_declare_simd_data *data = parser->omp_declare_simd;
  int i;

  if (!data->error_seen && data->fndecl_seen)
    {
      error ("%<#pragma omp declare %s%> not immediately followed by "
      "a single function declaration or definition",
      data->variant_p ? "variant" : "simd");
      data->error_seen = true;
    }
  if (data->error_seen)
    return attrs;

  for (i = 0; (data->tokens).iterate ((i), &(ce)); ++(i))
    {
      tree c, cl;

      cp_parser_push_lexer_for_tokens (parser, ce);
      parser->lexer->in_pragma = true;
      ((void)(!(cp_lexer_peek_token (parser->lexer)->type == CPP_PRAGMA) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42068, __FUNCTION__), 0 : 0));
      cp_token *pragma_tok = cp_lexer_consume_token (parser->lexer);
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *kind = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42071, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
      cp_lexer_consume_token (parser->lexer);
      if (strcmp (kind, "simd") == 0)
 {
   cl = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SIMDLEN) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LINEAR) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_ALIGNED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_UNIFORM) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_INBRANCH) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOTINBRANCH)),
       "#pragma omp declare simd",
       pragma_tok);
   if (cl)
     cl = tree_cons ((tree) 
# 42079 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                    __null
# 42079 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             , cl, (tree) 
# 42079 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                   __null
# 42079 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            );
   c = build_tree_list ((__builtin_constant_p ("omp declare simd") ? get_identifier_with_length (("omp declare simd"), strlen ("omp declare simd")) : get_identifier ("omp declare simd")), cl);
   ((contains_struct_check ((c), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42081, __FUNCTION__))->common.chain) = attrs;
   if (scope_chain->x_processing_template_decl)
     ((tree_not_check2 (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42083, __FUNCTION__, (TREE_LIST)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42083, __FUNCTION__, (TREE_VEC), (SSA_NAME)))->base.u.bits.lang_flag_0) = 1;
   attrs = c;
 }
      else
 {
   ((void)(!(strcmp (kind, "variant") == 0) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42088, __FUNCTION__), 0 : 0));
   attrs = cp_finish_omp_declare_variant (parser, pragma_tok, attrs);
 }
      cp_parser_pop_lexer (parser);
    }

  data->fndecl_seen = true;
  return attrs;
}
# 42114 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)
{
  tree clauses = (tree) 
# 42117 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 42117 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
  int device_type = 0;
  bool only_device_type = true;
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    clauses
      = cp_parser_omp_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_TO) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LINK) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEVICE_TYPE)),
       "#pragma omp declare target", pragma_tok);
  else if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      clauses = cp_parser_omp_var_list (parser, OMP_CLAUSE_TO_DECLARE,
     clauses);
      clauses = finish_omp_clauses (clauses, C_ORT_OMP);
      cp_parser_require_pragma_eol (parser, pragma_tok);
    }
  else
    {
      cp_parser_require_pragma_eol (parser, pragma_tok);
      scope_chain->omp_declare_target_attribute++;
      return;
    }
  for (tree c = clauses; c; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42137, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42137, __FUNCTION__))->common.chain))
    if (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42138, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_DEVICE_TYPE)
      device_type |= ((omp_clause_subcode_check ((c), (OMP_CLAUSE_DEVICE_TYPE), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42139, __FUNCTION__))->omp_clause.subcode.device_type_kind);
  for (tree c = clauses; c; c = ((contains_struct_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42140, __FUNCTION__, (OMP_CLAUSE)))), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42140, __FUNCTION__))->common.chain))
    {
      if (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42142, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_DEVICE_TYPE)
 continue;
      tree t = (*(omp_clause_elt_check (((omp_clause_range_check (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42144, __FUNCTION__, (OMP_CLAUSE)))), (OMP_CLAUSE_PRIVATE), (OMP_CLAUSE__SCANTEMP_), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42144, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42144, __FUNCTION__))), id;
      tree at1 = lookup_attribute ("omp declare target", ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42145, __FUNCTION__))->decl_common.attributes));
      tree at2 = lookup_attribute ("omp declare target link",
       ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42147, __FUNCTION__))->decl_common.attributes));
      only_device_type = false;
      if (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42149, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.code == OMP_CLAUSE_LINK)
 {
   id = (__builtin_constant_p ("omp declare target link") ? get_identifier_with_length (("omp declare target link"), strlen ("omp declare target link")) : get_identifier ("omp declare target link"));
   std::swap (at1, at2);
 }
      else
 id = (__builtin_constant_p ("omp declare target") ? get_identifier_with_length (("omp declare target"), strlen ("omp declare target")) : get_identifier ("omp declare target"));
      if (at2)
 {
   error_at (((tree_check ((c), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42158, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus,
      "%qD specified both in declare target %<link%> and %<to%>"
      " clauses", t);
   continue;
 }
      if (!at1)
 {
   ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42165, __FUNCTION__))->decl_common.attributes) = tree_cons (id, (tree) 
# 42165 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 42165 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                , ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42165, __FUNCTION__))->decl_common.attributes));
   if (((enum tree_code) (t)->base.code) != FUNCTION_DECL && !is_global_var (t))
     continue;

   symtab_node *node = symtab_node::get (t);
   if (node != 
# 42170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 42170 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  )
     {
       node->offloadable = 1;
       if (0)
  {
    g->have_offload = true;
    if (is_a <varpool_node *> (node))
      vec_safe_push (offload_vars, t);
  }
     }
 }
      if (((enum tree_code) (t)->base.code) != FUNCTION_DECL)
 continue;
      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_HOST) != 0)
 {
   tree at3 = lookup_attribute ("omp declare target host",
           ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42186, __FUNCTION__))->decl_common.attributes));
   if (at3 == (tree) 
# 42187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 42187 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     {
       id = (__builtin_constant_p ("omp declare target host") ? get_identifier_with_length (("omp declare target host"), strlen ("omp declare target host")) : get_identifier ("omp declare target host"));
       ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42190, __FUNCTION__))->decl_common.attributes)
  = tree_cons (id, (tree) 
# 42191 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 42191 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           , ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42191, __FUNCTION__))->decl_common.attributes));
     }
 }
      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_NOHOST) != 0)
 {
   tree at3 = lookup_attribute ("omp declare target nohost",
           ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42197, __FUNCTION__))->decl_common.attributes));
   if (at3 == (tree) 
# 42198 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 42198 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     {
       id = (__builtin_constant_p ("omp declare target nohost") ? get_identifier_with_length (("omp declare target nohost"), strlen ("omp declare target nohost")) : get_identifier ("omp declare target nohost"));
       ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42201, __FUNCTION__))->decl_common.attributes)
  = tree_cons (id, (tree) 
# 42202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 42202 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           , ((contains_struct_check ((t), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42202, __FUNCTION__))->decl_common.attributes));
     }
 }
    }
  if (device_type && only_device_type)
    warning_at (((tree_check ((clauses), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42207, __FUNCTION__, (OMP_CLAUSE))))->omp_clause.locus, 0,
  "directive with only %<device_type%> clauses ignored");
}

static void
cp_parser_omp_end_declare_target (cp_parser *parser, cp_token *pragma_tok)
{
  const char *p = "";
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42218, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
    }
  if (strcmp (p, "declare") == 0)
    {
      cp_lexer_consume_token (parser->lexer);
      p = "";
      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 {
   tree id = cp_lexer_peek_token (parser->lexer)->u.value;
   p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42227, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
 }
      if (strcmp (p, "target") == 0)
 cp_lexer_consume_token (parser->lexer);
      else
 {
   cp_parser_error (parser, "expected %<target%>");
   cp_parser_skip_to_pragma_eol (parser, pragma_tok);
   return;
 }
    }
  else
    {
      cp_parser_error (parser, "expected %<declare%>");
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return;
    }
  cp_parser_require_pragma_eol (parser, pragma_tok);
  if (!scope_chain->omp_declare_target_attribute)
    error_at (pragma_tok->location,
       "%<#pragma omp end declare target%> without corresponding "
       "%<#pragma omp declare target%>");
  else
    scope_chain->omp_declare_target_attribute--;
}
# 42270 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_omp_declare_reduction_exprs (tree fndecl, cp_parser *parser)
{
  tree type = ((tree_check ((((tree_check2 ((((contains_struct_check ((fndecl), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42273, __FUNCTION__))->typed.type)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42273, __FUNCTION__, (FUNCTION_TYPE), (METHOD_TYPE)))->type_non_common.values)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42273, __FUNCTION__, (TREE_LIST)))->list.value);
  ((void)(!((((enum tree_code) (type)->base.code) == REFERENCE_TYPE)) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42274, __FUNCTION__), 0 : 0));
  type = ((contains_struct_check ((type), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42275, __FUNCTION__))->typed.type);
  tree omp_out = build_lang_decl (VAR_DECL, (__builtin_constant_p ("omp_out") ? get_identifier_with_length (("omp_out"), strlen ("omp_out")) : get_identifier ("omp_out")), type);
  ((contains_struct_check ((omp_out), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42277, __FUNCTION__))->decl_common.artificial_flag) = 1;
  pushdecl (omp_out);
  add_decl_expr (omp_out);
  tree omp_in = build_lang_decl (VAR_DECL, (__builtin_constant_p ("omp_in") ? get_identifier_with_length (("omp_in"), strlen ("omp_in")) : get_identifier ("omp_in")), type);
  ((contains_struct_check ((omp_in), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42281, __FUNCTION__))->decl_common.artificial_flag) = 1;
  pushdecl (omp_in);
  add_decl_expr (omp_in);
  tree combiner;
  tree omp_priv = (tree) 
# 42285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 42285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          , omp_orig = (tree) 
# 42285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 42285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                , initializer = (tree) 
# 42285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                __null
# 42285 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                         ;

  keep_next_level (true);
  tree block = begin_omp_structured_block ();
  combiner = cp_parser_expression (parser);
  finish_expr_stmt (combiner);
  block = finish_omp_structured_block (block);
  if (scope_chain->x_processing_template_decl)
    block = build_stmt (input_location, EXPR_STMT, block);
  add_stmt (block);

  if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN))
    return false;

  const char *p = "";
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42303, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
    }

  if (strcmp (p, "initializer") == 0)
    {
      cp_lexer_consume_token (parser->lexer);
      matching_parens parens;
      if (!parens.require_open (parser))
 return false;

      p = "";
      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 {
   tree id = cp_lexer_peek_token (parser->lexer)->u.value;
   p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42317, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
 }

      omp_priv = build_lang_decl (VAR_DECL, (__builtin_constant_p ("omp_priv") ? get_identifier_with_length (("omp_priv"), strlen ("omp_priv")) : get_identifier ("omp_priv")), type);
      ((contains_struct_check ((omp_priv), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42321, __FUNCTION__))->decl_common.artificial_flag) = 1;
      pushdecl (omp_priv);
      add_decl_expr (omp_priv);
      omp_orig = build_lang_decl (VAR_DECL, (__builtin_constant_p ("omp_orig") ? get_identifier_with_length (("omp_orig"), strlen ("omp_orig")) : get_identifier ("omp_orig")), type);
      ((contains_struct_check ((omp_orig), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42325, __FUNCTION__))->decl_common.artificial_flag) = 1;
      pushdecl (omp_orig);
      add_decl_expr (omp_orig);

      keep_next_level (true);
      block = begin_omp_structured_block ();

      bool ctor = false;
      if (strcmp (p, "omp_priv") == 0)
 {
   bool is_direct_init, is_non_constant_init;
   ctor = true;
   cp_lexer_consume_token (parser->lexer);

   if (cp_lexer_next_token_is (parser->lexer, CPP_CLOSE_PAREN)
       || (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)
    && cp_lexer_peek_nth_token (parser->lexer, 2)->type
       == CPP_CLOSE_PAREN
    && cp_lexer_peek_nth_token (parser->lexer, 3)->type
       == CPP_CLOSE_PAREN))
     {
       finish_omp_structured_block (block);
       error ("invalid initializer clause");
       return false;
     }
   initializer = cp_parser_initializer (parser, &is_direct_init,
            &is_non_constant_init);
   cp_finish_decl (omp_priv, initializer, !is_non_constant_init,
     (tree) 
# 42353 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
    __null
# 42353 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
             , (1 << 2));
 }
      else
 {
   cp_parser_parse_tentatively (parser);

   auto_suppress_location_wrappers sentinel;
   tree fn_name = cp_parser_id_expression (parser, false,
                               true,
                       
# 42362 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 42362 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ,
                         false,
                       false);
   vec<tree, va_gc> *args;
   if (fn_name == global_trees[TI_ERROR_MARK]
       || cp_parser_error_occurred (parser)
       || !cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN)
       || ((args = cp_parser_parenthesized_expression_list
    (parser, non_attr, false,
                           true,
                        
# 42372 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 42372 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           )),
    cp_parser_error_occurred (parser)))
     {
       finish_omp_structured_block (block);
       cp_parser_abort_tentative_parse (parser);
       cp_parser_error (parser, "expected id-expression (arguments)");
       return false;
     }
   unsigned int i;
   tree arg;
   for (i = 0; vec_safe_iterate ((args), (i), &(arg)); ++(i))
     if (arg == omp_priv
  || (((enum tree_code) (arg)->base.code) == ADDR_EXPR
      && (*((const_cast<tree*> (tree_operand_check ((arg), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42385, __FUNCTION__))))) == omp_priv))
       break;
   cp_parser_abort_tentative_parse (parser);
   if (arg == (tree) 
# 42388 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 42388 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     error ("one of the initializer call arguments should be %<omp_priv%>"
     " or %<&omp_priv%>");
   initializer = cp_parser_postfix_expression (parser, false, false, false,
            false, 
# 42392 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 42392 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      );
   finish_expr_stmt (initializer);
 }

      block = finish_omp_structured_block (block);
      walk_tree_1 (&block, cp_remove_omp_priv_cleanup_stmt, omp_priv, 
# 42397 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null
# 42397 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     , cp_walk_subtrees);
      if (scope_chain->x_processing_template_decl)
 block = build_stmt (input_location, EXPR_STMT, block);
      add_stmt (block);

      if (ctor)
 add_decl_expr (omp_orig);

      if (!parens.require_close (parser))
 return false;
    }

  if (!cp_lexer_next_token_is (parser->lexer, CPP_PRAGMA_EOL))
    cp_parser_required_error (parser, RT_PRAGMA_EOL, false,
                              ((location_t) 0));

  return true;
}
# 42424 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_omp_declare_reduction (cp_parser *parser, cp_token *pragma_tok,
     enum pragma_context)
{
  auto_vec<tree> types;
  enum tree_code reduc_code = ERROR_MARK;
  tree reduc_id = (tree) 
# 42430 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                 __null
# 42430 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          , orig_reduc_id = (tree) 
# 42430 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 42430 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     , type;
  unsigned int i;
  cp_token *first_token;
  cp_token_cache *cp;
  int errs;
  void *p;


  p = __extension__ ({ struct obstack *__h = (&declarator_obstack); __extension__ ({ struct obstack *__o = (__h); size_t __len = ((0)); if (__extension__ ({ struct obstack const *__o1 = (__o); (size_t) (__o1->chunk_limit - __o1->next_free); }) < __len) _obstack_newchunk (__o, __len); ((void) ((__o)->next_free += (__len))); }); __extension__ ({ struct obstack *__o1 = (__h); void *__value = (void *) __o1->object_base; if (__o1->next_free == __value) __o1->maybe_empty_object = 1; __o1->next_free = ((sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (((__o1->next_free) - (sizeof (ptrdiff_t) < sizeof (void *) ? (__o1->object_base) : (char *) 0) + (__o1->alignment_mask)) & ~(__o1->alignment_mask))); if ((size_t) (__o1->next_free - (char *) __o1->chunk) > (size_t) (__o1->chunk_limit - (char *) __o1->chunk)) __o1->next_free = __o1->chunk_limit; __o1->object_base = __o1->next_free; __value; }); });

  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))
    goto fail;

  switch (cp_lexer_peek_token (parser->lexer)->type)
    {
    case CPP_PLUS:
      reduc_code = PLUS_EXPR;
      break;
    case CPP_MULT:
      reduc_code = MULT_EXPR;
      break;
    case CPP_MINUS:
      reduc_code = MINUS_EXPR;
      break;
    case CPP_AND:
      reduc_code = BIT_AND_EXPR;
      break;
    case CPP_XOR:
      reduc_code = BIT_XOR_EXPR;
      break;
    case CPP_OR:
      reduc_code = BIT_IOR_EXPR;
      break;
    case CPP_AND_AND:
      reduc_code = TRUTH_ANDIF_EXPR;
      break;
    case CPP_OR_OR:
      reduc_code = TRUTH_ORIF_EXPR;
      break;
    case CPP_NAME:
      reduc_id = orig_reduc_id = cp_parser_identifier (parser);
      break;
    default:
      cp_parser_error (parser, "expected %<+%>, %<*%>, %<-%>, %<&%>, %<^%>, "
          "%<|%>, %<&&%>, %<||%> or identifier");
      goto fail;
    }

  if (reduc_code != ERROR_MARK)
    cp_lexer_consume_token (parser->lexer);

  reduc_id = omp_reduction_id (reduc_code, reduc_id, (tree) 
# 42481 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                    __null
# 42481 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                             );
  if (reduc_id == global_trees[TI_ERROR_MARK])
    goto fail;

  if (!cp_parser_require (parser, CPP_COLON, RT_COLON))
    goto fail;


  const char *saved_message;
  saved_message = parser->type_definition_forbidden_message;
  parser->type_definition_forbidden_message
    = "types may not be defined in declare reduction type list";
  bool saved_colon_corrects_to_scope_p;
  saved_colon_corrects_to_scope_p = parser->colon_corrects_to_scope_p;
  parser->colon_corrects_to_scope_p = false;
  bool saved_colon_doesnt_start_class_def_p;
  saved_colon_doesnt_start_class_def_p
    = parser->colon_doesnt_start_class_def_p;
  parser->colon_doesnt_start_class_def_p = true;

  while (true)
    {
      location_t loc = cp_lexer_peek_token (parser->lexer)->location;
      type = cp_parser_type_id (parser);
      if (type == global_trees[TI_ERROR_MARK])
 ;
      else if (((((enum tree_code) (type)->base.code) == BOOLEAN_TYPE || ((enum tree_code) (type)->base.code) == INTEGER_TYPE) || ((enum tree_code) (type)->base.code) == REAL_TYPE || ((enum tree_code) (type)->base.code) == COMPLEX_TYPE)
        && (orig_reduc_id == (tree) 
# 42508 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
     
# 42509 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
    || (((enum tree_code) (type)->base.code) != COMPLEX_TYPE
         && (id_equal (orig_reduc_id, "min")
      || id_equal (orig_reduc_id, "max")))))
 error_at (loc, "predeclared arithmetic type %qT in "
         "%<#pragma omp declare reduction%>", type);
      else if ((((enum tree_code) (type)->base.code) == FUNCTION_TYPE || ((enum tree_code) (type)->base.code) == METHOD_TYPE)
        || ((enum tree_code) (type)->base.code) == ARRAY_TYPE)
 error_at (loc, "function or array type %qT in "
         "%<#pragma omp declare reduction%>", type);
      else if ((((enum tree_code) (type)->base.code) == REFERENCE_TYPE))
 error_at (loc, "reference type %qT in "
         "%<#pragma omp declare reduction%>", type);
      else if (((int) ((((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42521, __FUNCTION__))->base.readonly_flag) * TYPE_QUAL_CONST) | (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42521, __FUNCTION__))->base.volatile_flag) * TYPE_QUAL_VOLATILE) | (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42521, __FUNCTION__))->base.u.bits.atomic_flag) * TYPE_QUAL_ATOMIC) | (((tree_class_check ((type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42521, __FUNCTION__))->type_common.restrict_flag) * TYPE_QUAL_RESTRICT))))
 error_at (loc, "%<const%>, %<volatile%> or %<__restrict%>-qualified "
    "type %qT in %<#pragma omp declare reduction%>", type);
      else
 types.safe_push (type);

      if (cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);
      else
 break;
    }


  parser->type_definition_forbidden_message = saved_message;
  parser->colon_corrects_to_scope_p = saved_colon_corrects_to_scope_p;
  parser->colon_doesnt_start_class_def_p
    = saved_colon_doesnt_start_class_def_p;

  if (!cp_parser_require (parser, CPP_COLON, RT_COLON)
      || types.is_empty ())
    {
     fail:
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      goto done;
    }

  first_token = cp_lexer_peek_token (parser->lexer);
  cp = 
# 42548 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
      __null
# 42548 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
          ;
  errs = (global_dc)->diagnostic_count[(int) (DK_ERROR)];
  for (i = 0; (types).iterate ((i), &(type)); ++(i))
    {
      tree fntype
 = build_function_type_list (global_trees[TI_VOID_TYPE],
        cp_build_reference_type (type, false),
        (tree) 
# 42555 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
       __null
# 42555 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                );
      tree this_reduc_id = reduc_id;
      if (!dependent_type_p (type))
 this_reduc_id = omp_reduction_id (ERROR_MARK, reduc_id, type);
      tree fndecl = build_lang_decl (FUNCTION_DECL, this_reduc_id, fntype);
      ((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42560, __FUNCTION__))->decl_minimal.locus) = pragma_tok->location;
      ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42561, __FUNCTION__))->decl_common.artificial_flag) = 1;
      ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42562, __FUNCTION__))->decl_common.decl_flag_1) = 1;
      ((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42563, __FUNCTION__, (FUNCTION_DECL)))->function_decl.declared_inline_flag) = 1;
      ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42564, __FUNCTION__))->decl_common.ignored_flag) = 1;
      (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__)))->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__, (TEMPLATE_DECL))))))))->result : (contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__)))), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__)))->base.code) == FUNCTION_DECL || (((enum tree_code) ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__)))->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 42565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
     __null 
# 42565 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
     && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check (((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42565, __FUNCTION__); &lt->u.fn; })->omp_declare_reduction_p) = 1;
      overwrite_decl_assembler_name (fndecl, (__builtin_constant_p ("<udr>") ? get_identifier_with_length (("<udr>"), strlen ("<udr>")) : get_identifier ("<udr>")));
      ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42567, __FUNCTION__))->decl_common.attributes)
 = tree_cons ((__builtin_constant_p ("gnu_inline") ? get_identifier_with_length (("gnu_inline"), strlen ("gnu_inline")) : get_identifier ("gnu_inline")), (tree) 
# 42568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                            __null
# 42568 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     ,
       ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42569, __FUNCTION__))->decl_common.attributes));
      if (scope_chain->x_processing_template_decl)
 fndecl = push_template_decl (fndecl);
      bool block_scope = false;
      tree block = (tree) 
# 42573 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 42573 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
      if (current_function_decl)
 {
   block_scope = true;
   ((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42577, __FUNCTION__))->decl_minimal.context) = cp_global_trees[CPTI_GLOBAL];
   if (!scope_chain->x_processing_template_decl)
     pushdecl (fndecl);
 }
      else if (scope_chain->class_type)
 {
   if (cp == 
# 42583 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 42583 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                )
     {
       while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))
  cp_lexer_consume_token (parser->lexer);
       cp = cp_token_cache_new (first_token,
           cp_lexer_peek_nth_token (parser->lexer,
        2));
     }
   (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42591, __FUNCTION__, (TEMPLATE_DECL))))))))->result : fndecl)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42591, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (fndecl)->base.code) == FUNCTION_DECL || (((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42591, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 42591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
  __null 
# 42591 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42591, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42591, __FUNCTION__); &lt->u.fn; })->static_function) = 1;
   finish_member_declaration (fndecl);
   (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42593, __FUNCTION__, (TEMPLATE_DECL))))))))->result : fndecl)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42593, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (fndecl)->base.code) == FUNCTION_DECL || (((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42593, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 42593 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
  __null 
# 42593 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42593, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42593, __FUNCTION__); &lt->u.fn; })->u.pending_inline_info) = cp;
   (__extension__ ({ struct lang_decl *lt = ((contains_struct_check (((((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL ? ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42594, __FUNCTION__, (TEMPLATE_DECL))))))))->result : fndecl)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42594, __FUNCTION__))->decl_common.lang_specific); if (!(((enum tree_code) (fndecl)->base.code) == FUNCTION_DECL || (((enum tree_code) (fndecl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42594, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 42594 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
  __null 
# 42594 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
  && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42594, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)) || lt->u.base.selector != lds_fn) lang_check_failed ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42594, __FUNCTION__); &lt->u.fn; })->pending_inline_p) = 1;
   vec_safe_push (parser->unparsed_queues->last ().funs_with_definitions, fndecl);
   continue;
 }
      else
 {
   ((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42600, __FUNCTION__))->decl_minimal.context) = scope_chain->old_namespace;
   pushdecl (fndecl);
 }
      if (!block_scope)
 start_preparsed_function (fndecl, (tree) 
# 42604 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                  __null
# 42604 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , 1);
      else
 block = begin_omp_structured_block ();
      if (cp)
 {
   cp_parser_push_lexer_for_tokens (parser, cp);
   parser->lexer->in_pragma = true;
 }
      if (!cp_parser_omp_declare_reduction_exprs (fndecl, parser))
 {
   if (!block_scope)
     finish_function ( false);
   else
     ((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42617, __FUNCTION__))->decl_minimal.context) = current_function_decl;
   if (cp)
     cp_parser_pop_lexer (parser);
   goto fail;
 }
      if (cp)
 cp_parser_pop_lexer (parser);
      if (!block_scope)
 finish_function ( false);
      else
 {
   ((contains_struct_check ((fndecl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42628, __FUNCTION__))->decl_minimal.context) = current_function_decl;
   block = finish_omp_structured_block (block);
   if (((enum tree_code) (block)->base.code) == BIND_EXPR)
     ((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42631, __FUNCTION__, (FUNCTION_DECL)))->function_decl.saved_tree) = ((*((const_cast<tree*> (tree_operand_check (((tree_check ((block), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42631, __FUNCTION__, (BIND_EXPR)))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42631, __FUNCTION__))))));
   else if (((enum tree_code) (block)->base.code) == STATEMENT_LIST)
     ((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42633, __FUNCTION__, (FUNCTION_DECL)))->function_decl.saved_tree) = block;
   if (scope_chain->x_processing_template_decl)
     add_decl_expr (fndecl);
 }
      cp_check_omp_declare_reduction (fndecl);
      if (cp == 
# 42638 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
               __null 
# 42638 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                    && types.length () > 1)
 cp = cp_token_cache_new (first_token,
     cp_lexer_peek_nth_token (parser->lexer, 2));
      if (errs != (global_dc)->diagnostic_count[(int) (DK_ERROR)])
 break;
    }

  cp_parser_require_pragma_eol (parser, pragma_tok);

 done:

  __extension__ ({ struct obstack *__o = (&declarator_obstack); void *__obj = (void *) (p); if (__obj > (void *) __o->chunk && __obj < (void *) __o->chunk_limit) __o->next_free = __o->object_base = (char *) __obj; else _obstack_free (__o, __obj); });
}
# 42661 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static bool
cp_parser_omp_declare (cp_parser *parser, cp_token *pragma_tok,
         enum pragma_context context)
{
  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42668, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "simd") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_omp_declare_simd (parser, pragma_tok,
          context, false);
   return true;
 }
      if (global_options.x_flag_openmp && strcmp (p, "variant") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_omp_declare_simd (parser, pragma_tok,
          context, true);
   return true;
 }
      cp_ensure_no_omp_declare_simd (parser);
      if (strcmp (p, "reduction") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_omp_declare_reduction (parser, pragma_tok,
        context);
   return false;
 }
      if (!global_options.x_flag_openmp)
 {
   cp_parser_skip_to_pragma_eol (parser, pragma_tok);
   return false;
 }
      if (strcmp (p, "target") == 0)
 {
   cp_lexer_consume_token (parser->lexer);
   cp_parser_omp_declare_target (parser, pragma_tok);
   return false;
 }
    }
  cp_parser_error (parser, "expected %<simd%>, %<reduction%>, "
      "%<target%> or %<variant%>");
  cp_parser_require_pragma_eol (parser, pragma_tok);
  return false;
}




static bool
cp_parser_omp_requires (cp_parser *parser, cp_token *pragma_tok)
{
  bool first = true;
  enum omp_requires new_req = (enum omp_requires) 0;

  location_t loc = pragma_tok->location;
  while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))
    {
      if (!first && cp_lexer_next_token_is (parser->lexer, CPP_COMMA))
 cp_lexer_consume_token (parser->lexer);

      first = false;

      if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
 {
   tree id = cp_lexer_peek_token (parser->lexer)->u.value;
   const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42730, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);
   location_t cloc = cp_lexer_peek_token (parser->lexer)->location;
   enum omp_requires this_req = (enum omp_requires) 0;

   if (!strcmp (p, "unified_address"))
     this_req = OMP_REQUIRES_UNIFIED_ADDRESS;
   else if (!strcmp (p, "unified_shared_memory"))
     this_req = OMP_REQUIRES_UNIFIED_SHARED_MEMORY;
   else if (!strcmp (p, "dynamic_allocators"))
     this_req = OMP_REQUIRES_DYNAMIC_ALLOCATORS;
   else if (!strcmp (p, "reverse_offload"))
     this_req = OMP_REQUIRES_REVERSE_OFFLOAD;
   else if (!strcmp (p, "atomic_default_mem_order"))
     {
       cp_lexer_consume_token (parser->lexer);

       matching_parens parens;
       if (parens.require_open (parser))
  {
    if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
      {
        id = cp_lexer_peek_token (parser->lexer)->u.value;
        p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42752, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

        if (!strcmp (p, "seq_cst"))
   this_req
     = (enum omp_requires) OMP_MEMORY_ORDER_SEQ_CST;
        else if (!strcmp (p, "relaxed"))
   this_req
     = (enum omp_requires) OMP_MEMORY_ORDER_RELAXED;
        else if (!strcmp (p, "acq_rel"))
   this_req
     = (enum omp_requires) OMP_MEMORY_ORDER_ACQ_REL;
      }
    if (this_req == 0)
      {
        error_at (cp_lexer_peek_token (parser->lexer)->location,
    "expected %<seq_cst%>, %<relaxed%> or "
    "%<acq_rel%>");
        if (cp_lexer_nth_token_is (parser->lexer, 2,
       CPP_CLOSE_PAREN))
   cp_lexer_consume_token (parser->lexer);
      }
    else
      cp_lexer_consume_token (parser->lexer);

    if (!parens.require_close (parser))
      cp_parser_skip_to_closing_parenthesis (parser,
                         true,
                       false,

          true);

    if (this_req == 0)
      {
        cp_parser_require_pragma_eol (parser, pragma_tok);
        return false;
      }
  }
       p = 
# 42789 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 42789 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
              ;
     }
   else
     {
       error_at (cloc, "expected %<unified_address%>, "
         "%<unified_shared_memory%>, "
         "%<dynamic_allocators%>, "
          "%<reverse_offload%> "
          "or %<atomic_default_mem_order%> clause");
       cp_parser_skip_to_pragma_eol (parser, pragma_tok);
       return false;
     }
   if (p)
     sorry_at (cloc, "%qs clause on %<requires%> directive not "
       "supported yet", p);
   if (p)
     cp_lexer_consume_token (parser->lexer);
   if (this_req)
     {
       if ((this_req & ~OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER) != 0)
  {
    if ((this_req & new_req) != 0)
      error_at (cloc, "too many %qs clauses", p);
    if (this_req != OMP_REQUIRES_DYNAMIC_ALLOCATORS
        && (omp_requires_mask & OMP_REQUIRES_TARGET_USED) != 0)
      error_at (cloc, "%qs clause used lexically after first "
        "target construct or offloading API", p);
  }
       else if ((new_req & OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER) != 0)
  {
    error_at (cloc, "too many %qs clauses",
       "atomic_default_mem_order");
    this_req = (enum omp_requires) 0;
  }
       else if ((omp_requires_mask
   & OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER) != 0)
  {
    error_at (cloc, "more than one %<atomic_default_mem_order%>"
      " clause in a single compilation unit");
    this_req
      = (enum omp_requires)
         (omp_requires_mask
   & OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER);
  }
       else if ((omp_requires_mask
   & OMP_REQUIRES_ATOMIC_DEFAULT_MEM_ORDER_USED) != 0)
  error_at (cloc, "%<atomic_default_mem_order%> clause used "
    "lexically after first %<atomic%> construct "
    "without memory order clause");
       new_req = (enum omp_requires) (new_req | this_req);
       omp_requires_mask
  = (enum omp_requires) (omp_requires_mask | this_req);
       continue;
     }
 }
      break;
    }
  cp_parser_require_pragma_eol (parser, pragma_tok);

  if (new_req == 0)
    error_at (loc, "%<pragma omp requires%> requires at least one clause");
  return false;
}
# 42879 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_omp_taskloop (cp_parser *parser, cp_token *pragma_tok,
   char *p_name, omp_clause_mask mask, tree *cclauses,
   bool *if_p)
{
  tree clauses, sb, ret;
  unsigned int save;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  strcat (p_name, " taskloop");
  mask |= ( (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_SHARED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FIRSTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_LASTPRIVATE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_DEFAULT) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_GRAINSIZE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NUM_TASKS) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_COLLAPSE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_UNTIED) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IF) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_FINAL) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_MERGEABLE) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NOGROUP) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_PRIORITY) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_REDUCTION) | (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IN_REDUCTION));


  if ((mask & (omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_NUM_THREADS)) != 0)
    mask &= ~(omp_clause_mask (1) << PRAGMA_OMP_CLAUSE_IN_REDUCTION);

  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))
    {
      tree id = cp_lexer_peek_token (parser->lexer)->u.value;
      const char *p = ((const char *) (tree_check ((id), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42898, __FUNCTION__, (IDENTIFIER_NODE)))->identifier.id.str);

      if (strcmp (p, "simd") == 0)
 {
   tree cclauses_buf[C_OMP_CLAUSE_SPLIT_COUNT];
   if (cclauses == 
# 42903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                  __null
# 42903 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                      )
     cclauses = cclauses_buf;

   cp_lexer_consume_token (parser->lexer);
   if (!global_options.x_flag_openmp)
     return cp_parser_omp_simd (parser, pragma_tok, p_name, mask,
           cclauses, if_p);
   sb = begin_omp_structured_block ();
   save = cp_parser_begin_omp_structured_block (parser);
   ret = cp_parser_omp_simd (parser, pragma_tok, p_name, mask,
        cclauses, if_p);
   cp_parser_end_omp_structured_block (parser, save);
   tree body = finish_omp_structured_block (sb);
   if (ret == 
# 42916 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 42916 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 )
     return ret;
   ret = make_node (OMP_TASKLOOP);
   ((contains_struct_check ((ret), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42919, __FUNCTION__))->typed.type) = global_trees[TI_VOID_TYPE];
   (*((const_cast<tree*> (tree_operand_check (((tree_range_check ((ret), (OMP_FOR), (OACC_LOOP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42920, __FUNCTION__))), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42920, __FUNCTION__))))) = body;
   (*((const_cast<tree*> (tree_operand_check (((tree_range_check ((ret), (OMP_FOR), (OACC_LOOP), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42921, __FUNCTION__))), (1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42921, __FUNCTION__))))) = cclauses[C_OMP_CLAUSE_SPLIT_TASKLOOP];
   (expr_check (((ret)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42922, __FUNCTION__))->exp.locus = (loc);
   add_stmt (ret);
   return ret;
 }
    }
  if (!global_options.x_flag_openmp)
    {
      cp_parser_skip_to_pragma_eol (parser, pragma_tok);
      return (tree) 
# 42930 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 42930 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }

  clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,
           cclauses == 
# 42934 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 42934 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          );
  if (cclauses)
    {
      cp_omp_split_clauses (loc, OMP_TASKLOOP, mask, clauses, cclauses);
      clauses = cclauses[C_OMP_CLAUSE_SPLIT_TASKLOOP];
    }

  keep_next_level (true);
  sb = begin_omp_structured_block ();
  save = cp_parser_begin_omp_structured_block (parser);

  ret = cp_parser_omp_for_loop (parser, OMP_TASKLOOP, clauses, cclauses,
    if_p);

  cp_parser_end_omp_structured_block (parser, save);
  add_stmt (finish_omp_for_block (finish_omp_structured_block (sb), ret));

  return ret;
}
# 42975 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_oacc_routine (cp_parser *parser, cp_token *pragma_tok,
   enum pragma_context context)
{
  ((void)(!(context == pragma_external) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42979, __FUNCTION__), 0 : 0));


  ((void)(!(parser->oacc_routine == 
# 42982 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null
# 42982 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 42982, __FUNCTION__), 0 : 0));

  cp_oacc_routine_data data;
  data.error_seen = false;
  data.fndecl_seen = false;
  data.tokens = vNULL;
  data.clauses = (tree) 
# 42988 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                __null
# 42988 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                         ;
  data.loc = pragma_tok->location;


  parser->oacc_routine = &data;


  if (cp_lexer_next_token_is (parser->lexer, CPP_OPEN_PAREN))
    {
      matching_parens parens;
      parens.consume_open (parser);




      location_t name_loc = cp_lexer_peek_token (parser->lexer)->location;
      tree name = cp_parser_id_expression (parser,
                               false,
                               false,
                       
# 43007 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                      __null
# 43007 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                          ,
                         false,
                       false);
      tree decl = (identifier_p (name)
     ? cp_parser_lookup_name_simple (parser, name, name_loc)
     : name);
      if (name != global_trees[TI_ERROR_MARK] && decl == global_trees[TI_ERROR_MARK])
 cp_parser_name_lookup_error (parser, name, decl, NLE_NULL, name_loc);

      if (decl == global_trees[TI_ERROR_MARK]
   || !parens.require_close (parser))
 {
   cp_parser_skip_to_pragma_eol (parser, pragma_tok);
   parser->oacc_routine = 
# 43020 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 43020 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
   return;
 }

      data.clauses
 = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_GANG) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WORKER) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_VECTOR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_SEQ)),
          "#pragma acc routine",
          cp_lexer_peek_token (parser->lexer));


      data.clauses = nreverse (data.clauses);

      if (decl && is_overloaded_fn (decl)
   && (((enum tree_code) (decl)->base.code) != FUNCTION_DECL
       || (((enum tree_code) (decl)->base.code) == TEMPLATE_DECL && ((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43034, __FUNCTION__, (TEMPLATE_DECL))))))))->result != (tree) 
# 43034 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
         __null 
# 43034 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
         && ((enum tree_code) (((struct tree_template_decl *)(const_cast<union tree_node *> ((((tree_check ((decl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43034, __FUNCTION__, (TEMPLATE_DECL))))))))->result)->base.code) == FUNCTION_DECL)))
 {
   error_at (name_loc,
      "%<#pragma acc routine%> names a set of overloads");
   parser->oacc_routine = 
# 43038 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 43038 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
   return;
 }



      if (!(!(((contains_struct_check ((decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43044, __FUNCTION__))->decl_common.lang_flag_0) && (((enum tree_code) (decl)->base.code) == CONST_DECL || ((enum tree_code) (decl)->base.code) == PARM_DECL || ((enum tree_code) (decl)->base.code) == TYPE_DECL || ((enum tree_code) (decl)->base.code) == TEMPLATE_DECL)) && ((enum tree_code) ((!(! (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43044, __FUNCTION__))->decl_minimal.context)) || ((enum tree_code) (((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43044, __FUNCTION__))->decl_minimal.context))->base.code) == TRANSLATION_UNIT_DECL) ? ((contains_struct_check ((decl), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43044, __FUNCTION__))->decl_minimal.context) : cp_global_trees[CPTI_GLOBAL]))->base.code) == NAMESPACE_DECL))
 {
   error_at (name_loc,
      "%qD does not refer to a namespace scope function", decl);
   parser->oacc_routine = 
# 43048 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 43048 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
   return;
 }

      if (((enum tree_code) (decl)->base.code) != FUNCTION_DECL)
 {
   error_at (name_loc, "%qD does not refer to a function", decl);
   parser->oacc_routine = 
# 43055 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 43055 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
   return;
 }

      cp_finalize_oacc_routine (parser, decl, false);
      parser->oacc_routine = 
# 43060 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                            __null
# 43060 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                ;
    }
  else
    {

      while (cp_lexer_next_token_is_not (parser->lexer, CPP_PRAGMA_EOL))
 cp_lexer_consume_token (parser->lexer);
      cp_parser_require_pragma_eol (parser, pragma_tok);
      struct cp_token_cache *cp
 = cp_token_cache_new (pragma_tok, cp_lexer_peek_token (parser->lexer));
      parser->oacc_routine->tokens.safe_push (cp);



      if (cp_lexer_next_token_is (parser->lexer, CPP_PRAGMA))
 {
   cp_ensure_no_oacc_routine (parser);
   data.tokens.release ();

   return;
 }


      cp_parser_declaration (parser);
      if (parser->oacc_routine
   && !parser->oacc_routine->fndecl_seen)
 cp_ensure_no_oacc_routine (parser);
      else
 parser->oacc_routine = 
# 43088 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                       __null
# 43088 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                           ;
      data.tokens.release ();
    }
}




static tree
cp_parser_late_parsing_oacc_routine (cp_parser *parser, tree attrs)
{
  struct cp_token_cache *ce;
  cp_oacc_routine_data *data = parser->oacc_routine;

  if (!data->error_seen && data->fndecl_seen)
    {
      error_at (data->loc,
  "%<#pragma acc routine%> not immediately followed by "
  "a single function declaration or definition");
      data->error_seen = true;
    }
  if (data->error_seen)
    return attrs;

  ((void)(!(data->tokens.length () == 1) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43112, __FUNCTION__), 0 : 0));
  ce = data->tokens[0];

  cp_parser_push_lexer_for_tokens (parser, ce);
  parser->lexer->in_pragma = true;
  ((void)(!(cp_lexer_peek_token (parser->lexer)->type == CPP_PRAGMA) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43117, __FUNCTION__), 0 : 0));

  cp_token *pragma_tok = cp_lexer_consume_token (parser->lexer);
  ((void)(!(parser->oacc_routine->clauses == (tree) 
# 43120 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null
# 43120 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43120, __FUNCTION__), 0 : 0));
  parser->oacc_routine->clauses
    = cp_parser_oacc_all_clauses (parser, ( (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_GANG) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_WORKER) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_VECTOR) | (omp_clause_mask (1) << PRAGMA_OACC_CLAUSE_SEQ)),
      "#pragma acc routine", pragma_tok);


  parser->oacc_routine->clauses = nreverse (parser->oacc_routine->clauses);
  cp_parser_pop_lexer (parser);



  return attrs;
}




static void
cp_finalize_oacc_routine (cp_parser *parser, tree fndecl, bool is_defn)
{
  if (__builtin_expect (parser->oacc_routine != 
# 43140 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null
# 43140 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                   , 0))
    {

      if (parser->oacc_routine->error_seen
   || fndecl == global_trees[TI_ERROR_MARK])
 return;

      if (parser->oacc_routine->fndecl_seen)
 {
   error_at (parser->oacc_routine->loc,
      "%<#pragma acc routine%> not immediately followed by"
      " a single function declaration or definition");
   parser->oacc_routine = 
# 43152 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 43152 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
   return;
 }
      if (((enum tree_code) (fndecl)->base.code) != FUNCTION_DECL)
 {
   cp_ensure_no_oacc_routine (parser);
   return;
 }

      int compatible
 = oacc_verify_routine_clauses (fndecl, &parser->oacc_routine->clauses,
           parser->oacc_routine->loc,
           "#pragma acc routine");
      if (compatible < 0)
 {
   parser->oacc_routine = 
# 43167 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                         __null
# 43167 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                             ;
   return;
 }
      if (compatible > 0)
 {
 }
      else
 {
   if (((fndecl)->base.used_flag) || (!is_defn && ((tree_check ((fndecl), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43175, __FUNCTION__, (FUNCTION_DECL)))->function_decl.saved_tree)))
     {
       error_at (parser->oacc_routine->loc,
   ((fndecl)->base.used_flag)
   ? "%<#pragma acc routine%> must be applied before" " use"

   : "%<#pragma acc routine%> must be applied before" " definition"
                      );
       parser->oacc_routine = 
# 43183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                             __null
# 43183 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                 ;
       return;
     }


   tree dims = oacc_build_routine_dims (parser->oacc_routine->clauses);
   oacc_replace_fn_attrib (fndecl, dims);


   ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43192, __FUNCTION__))->decl_common.attributes)
     = tree_cons ((__builtin_constant_p ("omp declare target") ? get_identifier_with_length (("omp declare target"), strlen ("omp declare target")) : get_identifier ("omp declare target")),
    parser->oacc_routine->clauses,
    ((contains_struct_check ((fndecl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43195, __FUNCTION__))->decl_common.attributes));
 }




      parser->oacc_routine->fndecl_seen = true;
    }
}



static void
cp_parser_omp_construct (cp_parser *parser, cp_token *pragma_tok, bool *if_p)
{
  tree stmt;
  char p_name[sizeof "#pragma omp teams distribute parallel for simd"];
  omp_clause_mask mask (0);

  switch (cp_parser_pragma_kind (pragma_tok))
    {
    case PRAGMA_OACC_ATOMIC:
      cp_parser_omp_atomic (parser, pragma_tok);
      return;
    case PRAGMA_OACC_CACHE:
      stmt = cp_parser_oacc_cache (parser, pragma_tok);
      break;
    case PRAGMA_OACC_DATA:
      stmt = cp_parser_oacc_data (parser, pragma_tok, if_p);
      break;
    case PRAGMA_OACC_ENTER_DATA:
      stmt = cp_parser_oacc_enter_exit_data (parser, pragma_tok, true);
      break;
    case PRAGMA_OACC_EXIT_DATA:
      stmt = cp_parser_oacc_enter_exit_data (parser, pragma_tok, false);
      break;
    case PRAGMA_OACC_HOST_DATA:
      stmt = cp_parser_oacc_host_data (parser, pragma_tok, if_p);
      break;
    case PRAGMA_OACC_KERNELS:
    case PRAGMA_OACC_PARALLEL:
    case PRAGMA_OACC_SERIAL:
      strcpy (p_name, "#pragma acc");
      stmt = cp_parser_oacc_compute (parser, pragma_tok, p_name, if_p);
      break;
    case PRAGMA_OACC_LOOP:
      strcpy (p_name, "#pragma acc");
      stmt = cp_parser_oacc_loop (parser, pragma_tok, p_name, mask, 
# 43242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                   __null
# 43242 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                       ,
      if_p);
      break;
    case PRAGMA_OACC_UPDATE:
      stmt = cp_parser_oacc_update (parser, pragma_tok);
      break;
    case PRAGMA_OACC_WAIT:
      stmt = cp_parser_oacc_wait (parser, pragma_tok);
      break;
    case PRAGMA_OMP_ATOMIC:
      cp_parser_omp_atomic (parser, pragma_tok);
      return;
    case PRAGMA_OMP_CRITICAL:
      stmt = cp_parser_omp_critical (parser, pragma_tok, if_p);
      break;
    case PRAGMA_OMP_DISTRIBUTE:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_distribute (parser, pragma_tok, p_name, mask, 
# 43259 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                        __null
# 43259 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                            ,
           if_p);
      break;
    case PRAGMA_OMP_FOR:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_for (parser, pragma_tok, p_name, mask, 
# 43264 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                 __null
# 43264 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                     ,
    if_p);
      break;
    case PRAGMA_OMP_LOOP:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_loop (parser, pragma_tok, p_name, mask, 
# 43269 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                  __null
# 43269 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                      ,
     if_p);
      break;
    case PRAGMA_OMP_MASTER:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_master (parser, pragma_tok, p_name, mask, 
# 43274 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                    __null
# 43274 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                        ,
       if_p);
      break;
    case PRAGMA_OMP_PARALLEL:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_parallel (parser, pragma_tok, p_name, mask, 
# 43279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                      __null
# 43279 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                          ,
         if_p);
      break;
    case PRAGMA_OMP_SECTIONS:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_sections (parser, pragma_tok, p_name, mask, 
# 43284 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                      __null
# 43284 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                          );
      break;
    case PRAGMA_OMP_SIMD:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_simd (parser, pragma_tok, p_name, mask, 
# 43288 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                  __null
# 43288 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                      ,
     if_p);
      break;
    case PRAGMA_OMP_SINGLE:
      stmt = cp_parser_omp_single (parser, pragma_tok, if_p);
      break;
    case PRAGMA_OMP_TASK:
      stmt = cp_parser_omp_task (parser, pragma_tok, if_p);
      break;
    case PRAGMA_OMP_TASKGROUP:
      stmt = cp_parser_omp_taskgroup (parser, pragma_tok, if_p);
      break;
    case PRAGMA_OMP_TASKLOOP:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_taskloop (parser, pragma_tok, p_name, mask, 
# 43302 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                      __null
# 43302 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                          ,
         if_p);
      break;
    case PRAGMA_OMP_TEAMS:
      strcpy (p_name, "#pragma omp");
      stmt = cp_parser_omp_teams (parser, pragma_tok, p_name, mask, 
# 43307 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                                   __null
# 43307 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                       ,
      if_p);
      break;
    default:
      (fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43311, __FUNCTION__));
    }

  protected_set_expr_location (stmt, pragma_tok->location);
}
# 43328 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_txn_attribute_opt (cp_parser *parser)
{
  cp_token *token;
  tree attr_name, attr = 
# 43332 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 43332 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ;

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_ATTRIBUTE))
    return cp_parser_attributes_opt (parser);

  if (cp_lexer_next_token_is_not (parser->lexer, CPP_OPEN_SQUARE))
    return (tree) 
# 43338 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
          __null
# 43338 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                   ;
  cp_lexer_consume_token (parser->lexer);
  if (!cp_parser_require (parser, CPP_OPEN_SQUARE, RT_OPEN_SQUARE))
    goto error1;

  token = cp_lexer_peek_token (parser->lexer);
  if (token->type == CPP_NAME || token->type == CPP_KEYWORD)
    {
      token = cp_lexer_consume_token (parser->lexer);

      attr_name = (token->type == CPP_KEYWORD


     ? ridpointers[(int) token->keyword]
     : token->u.value);
      attr = build_tree_list (attr_name, (tree) 
# 43353 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 43353 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                 );
    }
  else
    cp_parser_error (parser, "expected identifier");

  cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);
 error1:
  cp_parser_require (parser, CPP_CLOSE_SQUARE, RT_CLOSE_SQUARE);
  return attr;
}
# 43372 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_transaction (cp_parser *parser, cp_token *token)
{
  unsigned char old_in = parser->in_transaction;
  unsigned char this_in = 1, new_in;
  enum rid keyword = token->keyword;
  tree stmt, attrs, noex;

  cp_lexer_consume_token (parser->lexer);

  if (keyword == RID_TRANSACTION_RELAXED
      || keyword == RID_SYNCHRONIZED)
    this_in |= 8;
  else
    {
      attrs = cp_parser_txn_attribute_opt (parser);
      if (attrs)
 this_in |= parse_tm_stmt_attr (attrs, 2);
    }


  if (keyword == RID_ATOMIC_NOEXCEPT)
    noex = global_trees[TI_BOOLEAN_TRUE];
  else if (keyword == RID_ATOMIC_CANCEL)
    {

      sorry ("%<atomic_cancel%>");
      noex = (tree) 
# 43399 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
            __null
# 43399 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                     ;
    }
  else
    noex = cp_parser_noexcept_specification_opt (parser,
       CP_PARSER_FLAGS_NONE,
                             true,
                         
# 43405 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                        __null
# 43405 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            ,
                       true);


  new_in = this_in | (old_in & 2);

  stmt = begin_transaction_stmt (token->location, 
# 43411 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                 __null
# 43411 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                     , this_in);

  parser->in_transaction = new_in;
  cp_parser_compound_statement (parser, 
# 43414 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                       __null
# 43414 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                           , BCS_TRANSACTION, false);
  parser->in_transaction = old_in;

  finish_transaction_stmt (stmt, 
# 43417 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                __null
# 43417 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                    , this_in, noex);

  return stmt;
}
# 43429 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_transaction_expression (cp_parser *parser, enum rid keyword)
{
  unsigned char old_in = parser->in_transaction;
  unsigned char this_in = 1;
  cp_token *token;
  tree expr, noex;
  bool noex_expr;
  location_t loc = cp_lexer_peek_token (parser->lexer)->location;

  ((void)(!(keyword == RID_TRANSACTION_ATOMIC || keyword == RID_TRANSACTION_RELAXED) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43439, __FUNCTION__), 0 : 0))
                                            ;

  if (!global_options.x_flag_tm)
    error_at (loc,
       keyword == RID_TRANSACTION_RELAXED
       ? "%<__transaction_relaxed%> without transactional memory " "support enabled"

       : "%<__transaction_atomic%> without transactional memory " "support enabled"
                       );

  token = cp_parser_require_keyword (parser, keyword,
      (keyword == RID_TRANSACTION_ATOMIC ? RT_TRANSACTION_ATOMIC
   : RT_TRANSACTION_RELAXED));
  ((void)(!(token != 
# 43453 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null
# 43453 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43453, __FUNCTION__), 0 : 0));

  if (keyword == RID_TRANSACTION_RELAXED)
    this_in |= 8;






  parser->in_transaction = this_in;


  noex = cp_parser_noexcept_specification_opt (parser,
            CP_PARSER_FLAGS_NONE,
                                  false,
            &noex_expr,
                            true);

  if (!noex || !noex_expr
      || cp_lexer_peek_token (parser->lexer)->type == CPP_OPEN_PAREN)
    {
      matching_parens parens;
      parens.require_open (parser);

      expr = cp_parser_expression (parser);
      expr = finish_parenthesized_expr (expr);

      parens.require_close (parser);
    }
  else
    {


      expr = noex;
      noex = global_trees[TI_BOOLEAN_TRUE];
    }

  expr = build_transaction_expr (token->location, expr, this_in, noex);
  parser->in_transaction = old_in;

  if (cp_parser_non_integral_constant_expression (parser, NIC_TRANSACTION))
    return global_trees[TI_ERROR_MARK];

  return (global_options.x_flag_tm ? expr : global_trees[TI_ERROR_MARK]);
}
# 43510 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_function_transaction (cp_parser *parser, enum rid keyword)
{
  unsigned char old_in = parser->in_transaction;
  unsigned char new_in = 1;
  tree compound_stmt, stmt, attrs;
  cp_token *token;

  ((void)(!(keyword == RID_TRANSACTION_ATOMIC || keyword == RID_TRANSACTION_RELAXED) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43518, __FUNCTION__), 0 : 0))
                                            ;
  token = cp_parser_require_keyword (parser, keyword,
      (keyword == RID_TRANSACTION_ATOMIC ? RT_TRANSACTION_ATOMIC
   : RT_TRANSACTION_RELAXED));
  ((void)(!(token != 
# 43523 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null
# 43523 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43523, __FUNCTION__), 0 : 0));

  if (keyword == RID_TRANSACTION_RELAXED)
    new_in |= 8;
  else
    {
      attrs = cp_parser_txn_attribute_opt (parser);
      if (attrs)
 new_in |= parse_tm_stmt_attr (attrs, 2);
    }

  stmt = begin_transaction_stmt (token->location, &compound_stmt, new_in);

  parser->in_transaction = new_in;

  if (cp_lexer_next_token_is_keyword (parser->lexer, RID_TRY))
    cp_parser_function_try_block (parser);
  else
    cp_parser_ctor_initializer_opt_and_function_body
      (parser, false);

  parser->in_transaction = old_in;

  finish_transaction_stmt (stmt, compound_stmt, new_in, (tree) 
# 43546 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                                       __null
# 43546 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                                );
}
# 43557 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
cp_parser_transaction_cancel (cp_parser *parser)
{
  cp_token *token;
  bool is_outer = false;
  tree stmt, attrs;

  token = cp_parser_require_keyword (parser, RID_TRANSACTION_CANCEL,
         RT_TRANSACTION_CANCEL);
  ((void)(!(token != 
# 43566 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
 __null
# 43566 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
 ) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43566, __FUNCTION__), 0 : 0));

  attrs = cp_parser_txn_attribute_opt (parser);
  if (attrs)
    is_outer = (parse_tm_stmt_attr (attrs, 2) != 0);



  cp_parser_require (parser, CPP_SEMICOLON, RT_SEMICOLON);

  if (!global_options.x_flag_tm)
    {
      error_at (token->location, "%<__transaction_cancel%> without "
  "transactional memory support enabled");
      return global_trees[TI_ERROR_MARK];
    }
  else if (parser->in_transaction & 8)
    {
      error_at (token->location, "%<__transaction_cancel%> within a "
  "%<__transaction_relaxed%>");
      return global_trees[TI_ERROR_MARK];
    }
  else if (is_outer)
    {
      if ((parser->in_transaction & 2) == 0
   && !is_tm_may_cancel_outer (current_function_decl))
 {
   error_at (token->location, "outer %<__transaction_cancel%> not "
      "within outer %<__transaction_atomic%>");
   error_at (token->location,
      "  or a %<transaction_may_cancel_outer%> function");
   return global_trees[TI_ERROR_MARK];
 }
    }
  else if (parser->in_transaction == 0)
    {
      error_at (token->location, "%<__transaction_cancel%> not within "
  "%<__transaction_atomic%>");
      return global_trees[TI_ERROR_MARK];
    }

  stmt = build_tm_abort_call (token->location, is_outer);
  add_stmt (stmt);

  return stmt;
}



static cp_parser *the_parser;
# 43627 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static void
cp_parser_initial_pragma (cp_token *first_token)
{
  if (cp_parser_pragma_kind (first_token) != PRAGMA_GCC_PCH_PREPROCESS)
    return;

  cp_lexer_get_preprocessor_token (0, first_token);

  tree name = 
# 43635 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
             __null
# 43635 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                 ;
  if (first_token->type == CPP_STRING)
    {
      name = first_token->u.value;

      cp_lexer_get_preprocessor_token (0, first_token);
    }


  if (first_token->type != CPP_PRAGMA_EOL)
    {
      error_at (first_token->location,
  "malformed %<#pragma GCC pch_preprocess%>");
      do
 cp_lexer_get_preprocessor_token (0, first_token);
      while (first_token->type != CPP_PRAGMA_EOL);
    }


  if (name)
    c_common_pch_pragma (parse_in, ((const char *)((tree_check ((name), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43655, __FUNCTION__, (STRING_CST)))->string.str)));




  cp_lexer_get_preprocessor_token (0, first_token);
}



static bool
cp_parser_pragma_ivdep (cp_parser *parser, cp_token *pragma_tok)
{
  cp_parser_skip_to_pragma_eol (parser, pragma_tok);
  return true;
}



static unsigned short
cp_parser_pragma_unroll (cp_parser *parser, cp_token *pragma_tok)
{
  location_t location = cp_lexer_peek_token (parser->lexer)->location;
  tree expr = cp_parser_constant_expression (parser);
  unsigned short unroll;
  expr = maybe_constant_value (expr);
  long lunroll = 0;
  if (!(((enum tree_code) (((contains_struct_check ((expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43682, __FUNCTION__))->typed.type))->base.code) == ENUMERAL_TYPE || ((enum tree_code) (((contains_struct_check ((expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43682, __FUNCTION__))->typed.type))->base.code) == BOOLEAN_TYPE || ((enum tree_code) (((contains_struct_check ((expr), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43682, __FUNCTION__))->typed.type))->base.code) == INTEGER_TYPE)
      || ((enum tree_code) (expr)->base.code) != INTEGER_CST
      || (lunroll = tree_to_shwi (expr)) < 0
      || lunroll >= 
# 43685 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                   (0x7fff * 2 + 1)
# 43685 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                            )
    {
      error_at (location, "%<#pragma GCC unroll%> requires an"
  " assignment-expression that evaluates to a non-negative"
  " integral constant less than %u", 
# 43689 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                    (0x7fff * 2 + 1)
# 43689 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                             );
      unroll = 0;
    }
  else
    {
      unroll = (unsigned short)lunroll;
      if (unroll == 0)
 unroll = 1;
    }
  cp_parser_skip_to_pragma_eol (parser, pragma_tok);
  return unroll;
}




static bool
cp_parser_pragma (cp_parser *parser, enum pragma_context context, bool *if_p)
{
  cp_token *pragma_tok;
  unsigned int id;
  tree stmt;
  bool ret;

  pragma_tok = cp_lexer_consume_token (parser->lexer);
  ((void)(!(pragma_tok->type == CPP_PRAGMA) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 43714, __FUNCTION__), 0 : 0));
  parser->lexer->in_pragma = true;

  id = cp_parser_pragma_kind (pragma_tok);
  if (id != PRAGMA_OMP_DECLARE && id != PRAGMA_OACC_ROUTINE)
    cp_ensure_no_omp_declare_simd (parser);
  switch (id)
    {
    case PRAGMA_GCC_PCH_PREPROCESS:
      error_at (pragma_tok->location,
  "%<#pragma GCC pch_preprocess%> must be first");
      break;

    case PRAGMA_OMP_BARRIER:
      switch (context)
 {
 case pragma_compound:
   cp_parser_omp_barrier (parser, pragma_tok);
   return false;
 case pragma_stmt:
   error_at (pragma_tok->location, "%<#pragma %s%> may only be "
      "used in compound statements", "omp barrier");
   break;
 default:
   goto bad_stmt;
 }
      break;

    case PRAGMA_OMP_DEPOBJ:
      switch (context)
 {
 case pragma_compound:
   cp_parser_omp_depobj (parser, pragma_tok);
   return false;
 case pragma_stmt:
   error_at (pragma_tok->location, "%<#pragma %s%> may only be "
      "used in compound statements", "omp depobj");
   break;
 default:
   goto bad_stmt;
 }
      break;

    case PRAGMA_OMP_FLUSH:
      switch (context)
 {
 case pragma_compound:
   cp_parser_omp_flush (parser, pragma_tok);
   return false;
 case pragma_stmt:
   error_at (pragma_tok->location, "%<#pragma %s%> may only be "
      "used in compound statements", "omp flush");
   break;
 default:
   goto bad_stmt;
 }
      break;

    case PRAGMA_OMP_TASKWAIT:
      switch (context)
 {
 case pragma_compound:
   cp_parser_omp_taskwait (parser, pragma_tok);
   return false;
 case pragma_stmt:
   error_at (pragma_tok->location,
      "%<#pragma %s%> may only be used in compound statements",
      "omp taskwait");
   break;
 default:
   goto bad_stmt;
 }
      break;

    case PRAGMA_OMP_TASKYIELD:
      switch (context)
 {
 case pragma_compound:
   cp_parser_omp_taskyield (parser, pragma_tok);
   return false;
 case pragma_stmt:
   error_at (pragma_tok->location,
      "%<#pragma %s%> may only be used in compound statements",
      "omp taskyield");
   break;
 default:
   goto bad_stmt;
 }
      break;

    case PRAGMA_OMP_CANCEL:
      switch (context)
 {
 case pragma_compound:
   cp_parser_omp_cancel (parser, pragma_tok);
   return false;
 case pragma_stmt:
   error_at (pragma_tok->location,
      "%<#pragma %s%> may only be used in compound statements",
      "omp cancel");
   break;
 default:
   goto bad_stmt;
 }
      break;

    case PRAGMA_OMP_CANCELLATION_POINT:
      cp_parser_omp_cancellation_point (parser, pragma_tok, context);
      return false;

    case PRAGMA_OMP_THREADPRIVATE:
      cp_parser_omp_threadprivate (parser, pragma_tok);
      return false;

    case PRAGMA_OMP_DECLARE:
      return cp_parser_omp_declare (parser, pragma_tok, context);

    case PRAGMA_OACC_DECLARE:
      cp_parser_oacc_declare (parser, pragma_tok);
      return false;

    case PRAGMA_OACC_ENTER_DATA:
      if (context == pragma_stmt)
 {
   error_at (pragma_tok->location,
      "%<#pragma %s%> may only be used in compound statements",
      "acc enter data");
   break;
 }
      else if (context != pragma_compound)
 goto bad_stmt;
      cp_parser_omp_construct (parser, pragma_tok, if_p);
      return true;

    case PRAGMA_OACC_EXIT_DATA:
      if (context == pragma_stmt)
 {
   error_at (pragma_tok->location,
      "%<#pragma %s%> may only be used in compound statements",
      "acc exit data");
   break;
 }
      else if (context != pragma_compound)
 goto bad_stmt;
      cp_parser_omp_construct (parser, pragma_tok, if_p);
      return true;

    case PRAGMA_OACC_ROUTINE:
      if (context != pragma_external)
 {
   error_at (pragma_tok->location,
      "%<#pragma acc routine%> must be at file scope");
   break;
 }
      cp_parser_oacc_routine (parser, pragma_tok, context);
      return false;

    case PRAGMA_OACC_UPDATE:
      if (context == pragma_stmt)
 {
   error_at (pragma_tok->location,
      "%<#pragma %s%> may only be used in compound statements",
      "acc update");
   break;
 }
      else if (context != pragma_compound)
 goto bad_stmt;
      cp_parser_omp_construct (parser, pragma_tok, if_p);
      return true;

    case PRAGMA_OACC_WAIT:
      if (context == pragma_stmt)
 {
   error_at (pragma_tok->location,
      "%<#pragma %s%> may only be used in compound statements",
      "acc wait");
   break;
 }
      else if (context != pragma_compound)
 goto bad_stmt;
      cp_parser_omp_construct (parser, pragma_tok, if_p);
      return true;

    case PRAGMA_OACC_ATOMIC:
    case PRAGMA_OACC_CACHE:
    case PRAGMA_OACC_DATA:
    case PRAGMA_OACC_HOST_DATA:
    case PRAGMA_OACC_KERNELS:
    case PRAGMA_OACC_LOOP:
    case PRAGMA_OACC_PARALLEL:
    case PRAGMA_OACC_SERIAL:
    case PRAGMA_OMP_ATOMIC:
    case PRAGMA_OMP_CRITICAL:
    case PRAGMA_OMP_DISTRIBUTE:
    case PRAGMA_OMP_FOR:
    case PRAGMA_OMP_LOOP:
    case PRAGMA_OMP_MASTER:
    case PRAGMA_OMP_PARALLEL:
    case PRAGMA_OMP_SECTIONS:
    case PRAGMA_OMP_SIMD:
    case PRAGMA_OMP_SINGLE:
    case PRAGMA_OMP_TASK:
    case PRAGMA_OMP_TASKGROUP:
    case PRAGMA_OMP_TASKLOOP:
    case PRAGMA_OMP_TEAMS:
      if (context != pragma_stmt && context != pragma_compound)
 goto bad_stmt;
      stmt = push_omp_privatization_clauses (false);
      cp_parser_omp_construct (parser, pragma_tok, if_p);
      pop_omp_privatization_clauses (stmt);
      return true;

    case PRAGMA_OMP_REQUIRES:
      if (context != pragma_external)
 {
   error_at (pragma_tok->location,
      "%<#pragma omp requires%> may only be used at file or "
      "namespace scope");
   break;
 }
      return cp_parser_omp_requires (parser, pragma_tok);

    case PRAGMA_OMP_ORDERED:
      if (context != pragma_stmt && context != pragma_compound)
 goto bad_stmt;
      stmt = push_omp_privatization_clauses (false);
      ret = cp_parser_omp_ordered (parser, pragma_tok, context, if_p);
      pop_omp_privatization_clauses (stmt);
      return ret;

    case PRAGMA_OMP_TARGET:
      if (context != pragma_stmt && context != pragma_compound)
 goto bad_stmt;
      stmt = push_omp_privatization_clauses (false);
      ret = cp_parser_omp_target (parser, pragma_tok, context, if_p);
      pop_omp_privatization_clauses (stmt);
      return ret;

    case PRAGMA_OMP_END_DECLARE_TARGET:
      cp_parser_omp_end_declare_target (parser, pragma_tok);
      return false;

    case PRAGMA_OMP_SCAN:
      error_at (pragma_tok->location,
  "%<#pragma omp scan%> may only be used in "
  "a loop construct with %<inscan%> %<reduction%> clause");
      break;

    case PRAGMA_OMP_SECTION:
      error_at (pragma_tok->location,
  "%<#pragma omp section%> may only be used in "
  "%<#pragma omp sections%> construct");
      break;

    case PRAGMA_IVDEP:
      {
 if (context == pragma_external)
   {
     error_at (pragma_tok->location,
        "%<#pragma GCC ivdep%> must be inside a function");
     break;
   }
 const bool ivdep = cp_parser_pragma_ivdep (parser, pragma_tok);
 unsigned short unroll;
 cp_token *tok = cp_lexer_peek_token (the_parser->lexer);
 if (tok->type == CPP_PRAGMA
     && cp_parser_pragma_kind (tok) == PRAGMA_UNROLL)
   {
     tok = cp_lexer_consume_token (parser->lexer);
     unroll = cp_parser_pragma_unroll (parser, tok);
     tok = cp_lexer_peek_token (the_parser->lexer);
   }
 else
   unroll = 0;
 if (tok->type != CPP_KEYWORD
     || (tok->keyword != RID_FOR
  && tok->keyword != RID_WHILE
  && tok->keyword != RID_DO))
   {
     cp_parser_error (parser, "for, while or do statement expected");
     return false;
   }
 cp_parser_iteration_statement (parser, if_p, ivdep, unroll);
 return true;
      }

    case PRAGMA_UNROLL:
      {
 if (context == pragma_external)
   {
     error_at (pragma_tok->location,
        "%<#pragma GCC unroll%> must be inside a function");
     break;
   }
 const unsigned short unroll
   = cp_parser_pragma_unroll (parser, pragma_tok);
 bool ivdep;
 cp_token *tok = cp_lexer_peek_token (the_parser->lexer);
 if (tok->type == CPP_PRAGMA
     && cp_parser_pragma_kind (tok) == PRAGMA_IVDEP)
   {
     tok = cp_lexer_consume_token (parser->lexer);
     ivdep = cp_parser_pragma_ivdep (parser, tok);
     tok = cp_lexer_peek_token (the_parser->lexer);
   }
 else
   ivdep = false;
 if (tok->type != CPP_KEYWORD
     || (tok->keyword != RID_FOR
  && tok->keyword != RID_WHILE
  && tok->keyword != RID_DO))
   {
     cp_parser_error (parser, "for, while or do statement expected");
     return false;
   }
 cp_parser_iteration_statement (parser, if_p, ivdep, unroll);
 return true;
      }

    default:
      ((void)(!(id >= PRAGMA_FIRST_EXTERNAL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44034, __FUNCTION__), 0 : 0));
      c_invoke_pragma_handler (id);
      break;

    bad_stmt:
      cp_parser_error (parser, "expected declaration specifiers");
      break;
    }

  cp_parser_skip_to_pragma_eol (parser, pragma_tok);
  return false;
}



enum cpp_ttype
pragma_lex (tree *value, location_t *loc)
{
  cp_token *tok = cp_lexer_peek_token (the_parser->lexer);
  enum cpp_ttype ret = tok->type;

  *value = tok->u.value;
  if (loc)
    *loc = tok->location;

  if (ret == CPP_PRAGMA_EOL)
    ret = CPP_EOF;
  else if (ret == CPP_STRING)
    *value = cp_parser_string_literal (the_parser, false, false);
  else
    {
      if (ret == CPP_KEYWORD)
 ret = CPP_NAME;
      cp_lexer_consume_token (the_parser->lexer);
    }

  return ret;
}






void
c_parse_file (void)
{
  static bool already_called = false;

  if (already_called)
    fatal_error (input_location,
   "multi-source compilation not implemented for C++");
  already_called = true;



  cp_lexer *lexer = cp_lexer_new_main ();

  the_parser = cp_parser_new (lexer);

  cp_parser_translation_unit (the_parser);
  class_decl_loc_t::diag_mismatched_tags ();

  the_parser = 
# 44097 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
              __null
# 44097 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                  ;

  finish_translation_unit ();
}




static int generic_parm_count;
static tree
make_generic_type_name ()
{
  char buf[32];
  sprintf (buf, "auto:%d", ++generic_parm_count);
  return (__builtin_constant_p (buf) ? get_identifier_with_length ((buf), strlen (buf)) : get_identifier (buf));
}





static tree
synthesize_implicit_template_parm (cp_parser *parser, tree constr)
{

  if ((*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->kind == sk_block)
    {
      error ("placeholder type not allowed in this context");
      return global_trees[TI_ERROR_MARK];
    }

  ((void)(!((*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings))->kind == sk_function_parms) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44128, __FUNCTION__), 0 : 0));






  cp_binding_level *const entry_scope = (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings));

  bool become_template = false;
  cp_binding_level *parent_scope = 0;

  if (parser->implicit_template_scope)
    {
      ((void)(!(parser->implicit_template_parms) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44142, __FUNCTION__), 0 : 0));

      (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings)) = parser->implicit_template_scope;
    }
  else
    {






      cp_binding_level *scope = entry_scope;

      while (scope->kind == sk_function_parms)
 {
   parent_scope = scope;
   scope = scope->level_chain;
 }
      if (scope_chain->class_type && !(((enum tree_code) (scope_chain->class_type)->base.code) == RECORD_TYPE && ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name))) && ((tree_check ((((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name) && (tree_code_type[(int) (((enum tree_code) (((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name))->base.code))] == tcc_declaration) ? ((contains_struct_check ((((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name)), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->decl_minimal.name) : ((tree_class_check ((((tree_class_check ((scope_chain->class_type), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.main_variant)), (tcc_type), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__))->type_common.name)))), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44161, __FUNCTION__, (IDENTIFIER_NODE)))->base.protected_flag)))
 {
# 44192 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
   while (scope->kind == sk_class && !scope->defining_class_p)
     {
       parent_scope = scope;
       scope = scope->level_chain;
     }
 }

      (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings)) = scope;

      if (scope->kind != sk_template_parms
   || !function_being_declared_is_template_p (parser))
 {



   become_template = true;

   parser->implicit_template_scope
       = begin_scope (sk_template_parms, 
# 44210 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                        __null
# 44210 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                            );

   ++scope_chain->x_processing_template_decl;

   parser->fully_implicit_function_template_p = true;
   ++parser->num_template_parameter_lists;
 }
      else
 {



   ((void)(!(scope_chain->template_parms) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44222, __FUNCTION__), 0 : 0));

   parser->implicit_template_scope = scope;

   tree v = ((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44226, __FUNCTION__, (TREE_LIST)))->list.value);
   parser->implicit_template_parms
     = (*((const_cast<tree *> (tree_vec_elt_check ((v), (((tree_check ((v), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44228, __FUNCTION__, (TREE_VEC)))->base.u.length) - 1), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44228, __FUNCTION__)))));
 }
    }




  tree proto = constr ? ((contains_struct_check ((constr), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44235, __FUNCTION__))->decl_common.initial) : (tree) 
# 44235 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                               __null
# 44235 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                                        ;
  tree synth_id = make_generic_type_name ();
  tree synth_tmpl_parm;
  bool non_type = false;


  ((void)(!(!proto || ((enum tree_code) (proto)->base.code) == TYPE_DECL) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44241, __FUNCTION__), 0 : 0));
  synth_tmpl_parm = finish_template_type_parm (cp_global_trees[CPTI_CLASS_TYPE], synth_id);


  tree node = build_tree_list ((tree) 
# 44245 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                              __null
# 44245 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                       , synth_tmpl_parm);
  ((contains_struct_check ((node), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44246, __FUNCTION__))->typed.type) = constr;
  tree new_parm
    = process_template_parm (parser->implicit_template_parms,
        input_location,
        node,
                     non_type,
                       false);






  ((contains_struct_check ((((tree_check ((new_parm), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44259, __FUNCTION__, (TREE_LIST)))->list.value)), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44259, __FUNCTION__))->decl_common.virtual_flag) = true;


  if (parser->implicit_template_parms)
    parser->implicit_template_parms
      = ((contains_struct_check ((parser->implicit_template_parms), (TS_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44264, __FUNCTION__))->common.chain);
  else
    parser->implicit_template_parms = new_parm;

  tree new_decl = get_local_decls ();
  if (non_type)

    new_decl = ((contains_struct_check ((new_decl), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44271, __FUNCTION__))->decl_common.initial);





  if (become_template)
    {
      parent_scope->level_chain = (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings));

      tree new_parms = make_tree_vec (1);
      (*((const_cast<tree *> (tree_vec_elt_check ((new_parms), (0), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44282, __FUNCTION__))))) = parser->implicit_template_parms;
      scope_chain->template_parms = tree_cons (size_int_kind (scope_chain->x_processing_template_decl, stk_sizetype),
       new_parms, scope_chain->template_parms);
    }
  else
    {
      tree& new_parms = ((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44288, __FUNCTION__, (TREE_LIST)))->list.value);
      int new_parm_idx = ((tree_check ((new_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44289, __FUNCTION__, (TREE_VEC)))->base.u.length);
      new_parms = grow_tree_vec (new_parms, new_parm_idx + 1);
      (*((const_cast<tree *> (tree_vec_elt_check ((new_parms), (new_parm_idx), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44291, __FUNCTION__))))) = parser->implicit_template_parms;
    }



  if (tree req = ((contains_struct_check (((tree_check ((tree_last (new_parm)), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44296, __FUNCTION__, (TREE_LIST)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44296, __FUNCTION__))->typed.type))
    {
      tree reqs = ((contains_struct_check (((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44298, __FUNCTION__, (TREE_LIST)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44298, __FUNCTION__))->typed.type);
      reqs = combine_constraint_expressions (reqs, req);
      ((contains_struct_check (((tree_check ((scope_chain->template_parms), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44300, __FUNCTION__, (TREE_LIST)))), (TS_TYPED), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44300, __FUNCTION__))->typed.type) = reqs;
    }

  (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings)) = entry_scope;

  return new_decl;
}
# 44316 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
static tree
finish_fully_implicit_template (cp_parser *parser, tree member_decl_opt)
{
  ((void)(!(parser->fully_implicit_function_template_p) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44319, __FUNCTION__), 0 : 0));

  if (member_decl_opt && member_decl_opt != global_trees[TI_ERROR_MARK]
      && ((contains_struct_check ((member_decl_opt), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44322, __FUNCTION__))->decl_common.virtual_flag))
    {
      error_at (((contains_struct_check ((member_decl_opt), (TS_DECL_MINIMAL), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44324, __FUNCTION__))->decl_minimal.locus),
  "implicit templates may not be %<virtual%>");
      ((contains_struct_check ((member_decl_opt), (TS_DECL_COMMON), "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44326, __FUNCTION__))->decl_common.virtual_flag) = false;
    }

  if (member_decl_opt)
    member_decl_opt = finish_member_template_decl (member_decl_opt);
  end_template_decl ();

  parser->fully_implicit_function_template_p = false;
  parser->implicit_template_parms = 0;
  parser->implicit_template_scope = 0;
  --parser->num_template_parameter_lists;

  return member_decl_opt;
}






static void
abort_fully_implicit_template (cp_parser *parser)
{
  cp_binding_level *return_to_scope = (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings));

  if (parser->implicit_template_scope
      && return_to_scope != parser->implicit_template_scope)
    {
      cp_binding_level *child = return_to_scope;
      for (cp_binding_level *scope = child->level_chain;
    scope != parser->implicit_template_scope;
    scope = child->level_chain)
 child = scope;
      child->level_chain = parser->implicit_template_scope->level_chain;
      parser->implicit_template_scope->level_chain = return_to_scope;
      (*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings)) = parser->implicit_template_scope;
    }
  else
    return_to_scope = return_to_scope->level_chain;

  finish_fully_implicit_template (parser, 
# 44366 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 3 4
                                         __null
# 44366 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c"
                                             );

  ((void)(!((*((cfun + 0) && ((cfun + 0)->language) && ((cfun + 0)->language)->bindings ? &((cfun + 0)->language)->bindings : &scope_chain->bindings)) == return_to_scope) ? fancy_abort ("/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c", 44368, __FUNCTION__), 0 : 0));
}






void
maybe_show_extern_c_location (void)
{
  if (the_parser->innermost_linkage_specification_location != ((location_t) 0))
    inform (the_parser->innermost_linkage_specification_location,
     "%<extern \"C\"%> linkage started here");
}

# 1 "./gt-cp-parser.h" 1
# 22 "./gt-cp-parser.h"
void
gt_ggc_mx_cp_token_cache (void *x_p)
{
  struct cp_token_cache * const x = (struct cp_token_cache *)x_p;
  if (((x) != 
# 26 "./gt-cp-parser.h" 3 4
     __null 
# 26 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
    }
}

void
gt_ggc_mx_tree_check (void *x_p)
{
  struct tree_check * const x = (struct tree_check *)x_p;
  if (((x) != 
# 35 "./gt-cp-parser.h" 3 4
     __null 
# 35 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      do { if ((*x).value != 
# 37 "./gt-cp-parser.h" 3 4
     __null
# 37 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).value); } while (0);
      do { if ((*x).checks != 
# 38 "./gt-cp-parser.h" 3 4
     __null
# 38 "./gt-cp-parser.h"
     ) gt_ggc_mx_vec_deferred_access_check_va_gc_ ((*x).checks); } while (0);
      do { if ((*x).qualifying_scope != 
# 39 "./gt-cp-parser.h" 3 4
     __null
# 39 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).qualifying_scope); } while (0);
    }
}

void
gt_ggc_mx_vec_cp_token_va_gc_ (void *x_p)
{
  vec<cp_token,va_gc> * const x = (vec<cp_token,va_gc> *)x_p;
  if (((x) != 
# 47 "./gt-cp-parser.h" 3 4
     __null 
# 47 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      gt_ggc_mx (x);
    }
}

void
gt_ggc_mx (struct cp_token& x_r __attribute__ ((__unused__)))
{
  struct cp_token * __attribute__ ((__unused__)) x = &x_r;
  switch ((int) (((*x)).tree_check_p))
    {
    case true:
      do { if ((*x).u.tree_check_value != 
# 60 "./gt-cp-parser.h" 3 4
     __null
# 60 "./gt-cp-parser.h"
     ) gt_ggc_mx_tree_check ((*x).u.tree_check_value); } while (0);
      break;
    case false:
      do { if ((*x).u.value != 
# 63 "./gt-cp-parser.h" 3 4
     __null
# 63 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).u.value); } while (0);
      break;
    default:
      break;
    }
}

void
gt_ggc_mx_cp_lexer (void *x_p)
{
  struct cp_lexer * const x = (struct cp_lexer *)x_p;
  if (((x) != 
# 74 "./gt-cp-parser.h" 3 4
     __null 
# 74 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      do { if ((*x).buffer != 
# 76 "./gt-cp-parser.h" 3 4
     __null
# 76 "./gt-cp-parser.h"
     ) gt_ggc_mx_vec_cp_token_va_gc_ ((*x).buffer); } while (0);
      do { if ((*x).next != 
# 77 "./gt-cp-parser.h" 3 4
     __null
# 77 "./gt-cp-parser.h"
     ) gt_ggc_mx_cp_lexer ((*x).next); } while (0);
    }
}

void
gt_ggc_mx_vec_cp_default_arg_entry_va_gc_ (void *x_p)
{
  vec<cp_default_arg_entry,va_gc> * const x = (vec<cp_default_arg_entry,va_gc> *)x_p;
  if (((x) != 
# 85 "./gt-cp-parser.h" 3 4
     __null 
# 85 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      gt_ggc_mx (x);
    }
}

void
gt_ggc_mx (struct cp_default_arg_entry& x_r __attribute__ ((__unused__)))
{
  struct cp_default_arg_entry * __attribute__ ((__unused__)) x = &x_r;
  do { if ((*x).class_type != 
# 95 "./gt-cp-parser.h" 3 4
 __null
# 95 "./gt-cp-parser.h"
 ) gt_ggc_mx_lang_tree_node ((*x).class_type); } while (0);
  do { if ((*x).decl != 
# 96 "./gt-cp-parser.h" 3 4
 __null
# 96 "./gt-cp-parser.h"
 ) gt_ggc_mx_lang_tree_node ((*x).decl); } while (0);
}

void
gt_ggc_mx_cp_parser_context (void *x_p)
{
  struct cp_parser_context * const x = (struct cp_parser_context *)x_p;
  if (((x) != 
# 103 "./gt-cp-parser.h" 3 4
     __null 
# 103 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      do { if ((*x).object_type != 
# 105 "./gt-cp-parser.h" 3 4
     __null
# 105 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).object_type); } while (0);
      do { if ((*x).next != 
# 106 "./gt-cp-parser.h" 3 4
     __null
# 106 "./gt-cp-parser.h"
     ) gt_ggc_mx_cp_parser_context ((*x).next); } while (0);
    }
}

void
gt_ggc_mx_vec_cp_unparsed_functions_entry_va_gc_ (void *x_p)
{
  vec<cp_unparsed_functions_entry,va_gc> * const x = (vec<cp_unparsed_functions_entry,va_gc> *)x_p;
  if (((x) != 
# 114 "./gt-cp-parser.h" 3 4
     __null 
# 114 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      gt_ggc_mx (x);
    }
}

void
gt_ggc_mx (struct cp_unparsed_functions_entry& x_r __attribute__ ((__unused__)))
{
  struct cp_unparsed_functions_entry * __attribute__ ((__unused__)) x = &x_r;
  do { if ((*x).funs_with_default_args != 
# 124 "./gt-cp-parser.h" 3 4
 __null
# 124 "./gt-cp-parser.h"
 ) gt_ggc_mx_vec_cp_default_arg_entry_va_gc_ ((*x).funs_with_default_args); } while (0);
  do { if ((*x).funs_with_definitions != 
# 125 "./gt-cp-parser.h" 3 4
 __null
# 125 "./gt-cp-parser.h"
 ) gt_ggc_mx_vec_tree_va_gc_ ((*x).funs_with_definitions); } while (0);
  do { if ((*x).nsdmis != 
# 126 "./gt-cp-parser.h" 3 4
 __null
# 126 "./gt-cp-parser.h"
 ) gt_ggc_mx_vec_tree_va_gc_ ((*x).nsdmis); } while (0);
  do { if ((*x).noexcepts != 
# 127 "./gt-cp-parser.h" 3 4
 __null
# 127 "./gt-cp-parser.h"
 ) gt_ggc_mx_vec_tree_va_gc_ ((*x).noexcepts); } while (0);
}

void
gt_ggc_mx_cp_parser (void *x_p)
{
  struct cp_parser * const x = (struct cp_parser *)x_p;
  if (((x) != 
# 134 "./gt-cp-parser.h" 3 4
     __null 
# 134 "./gt-cp-parser.h"
     && ((void *) (x)) != (void *) 1 && ! ggc_set_mark (x)))
    {
      do { if ((*x).lexer != 
# 136 "./gt-cp-parser.h" 3 4
     __null
# 136 "./gt-cp-parser.h"
     ) gt_ggc_mx_cp_lexer ((*x).lexer); } while (0);
      do { if ((*x).scope != 
# 137 "./gt-cp-parser.h" 3 4
     __null
# 137 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).scope); } while (0);
      do { if ((*x).object_scope != 
# 138 "./gt-cp-parser.h" 3 4
     __null
# 138 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).object_scope); } while (0);
      do { if ((*x).qualifying_scope != 
# 139 "./gt-cp-parser.h" 3 4
     __null
# 139 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).qualifying_scope); } while (0);
      do { if ((*x).context != 
# 140 "./gt-cp-parser.h" 3 4
     __null
# 140 "./gt-cp-parser.h"
     ) gt_ggc_mx_cp_parser_context ((*x).context); } while (0);
      gt_ggc_m_S ((*x).type_definition_forbidden_message);
      gt_ggc_m_S ((*x).type_definition_forbidden_message_arg);
      do { if ((*x).unparsed_queues != 
# 143 "./gt-cp-parser.h" 3 4
     __null
# 143 "./gt-cp-parser.h"
     ) gt_ggc_mx_vec_cp_unparsed_functions_entry_va_gc_ ((*x).unparsed_queues); } while (0);
      do { if ((*x).implicit_template_parms != 
# 144 "./gt-cp-parser.h" 3 4
     __null
# 144 "./gt-cp-parser.h"
     ) gt_ggc_mx_lang_tree_node ((*x).implicit_template_parms); } while (0);
      do { if ((*x).implicit_template_scope != 
# 145 "./gt-cp-parser.h" 3 4
     __null
# 145 "./gt-cp-parser.h"
     ) gt_ggc_mx_cp_binding_level ((*x).implicit_template_scope); } while (0);
    }
}

void
gt_pch_nx_cp_token_cache (void *x_p)
{
  struct cp_token_cache * const x = (struct cp_token_cache *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_14cp_token_cache))
    {
    }
}

void
gt_pch_nx_tree_check (void *x_p)
{
  struct tree_check * const x = (struct tree_check *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_10tree_check))
    {
      do { if ((*x).value != 
# 164 "./gt-cp-parser.h" 3 4
     __null
# 164 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).value); } while (0);
      do { if ((*x).checks != 
# 165 "./gt-cp-parser.h" 3 4
     __null
# 165 "./gt-cp-parser.h"
     ) gt_pch_nx_vec_deferred_access_check_va_gc_ ((*x).checks); } while (0);
      do { if ((*x).qualifying_scope != 
# 166 "./gt-cp-parser.h" 3 4
     __null
# 166 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).qualifying_scope); } while (0);
    }
}

void
gt_pch_nx_vec_cp_token_va_gc_ (void *x_p)
{
  vec<cp_token,va_gc> * const x = (vec<cp_token,va_gc> *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_19vec_cp_token_va_gc_))
    {
      gt_pch_nx (x);
    }
}

void
gt_pch_nx (struct cp_token& x_r __attribute__ ((__unused__)))
{
  struct cp_token * __attribute__ ((__unused__)) x = &x_r;
  switch ((int) (((*x)).tree_check_p))
    {
    case true:
      do { if ((*x).u.tree_check_value != 
# 187 "./gt-cp-parser.h" 3 4
     __null
# 187 "./gt-cp-parser.h"
     ) gt_pch_nx_tree_check ((*x).u.tree_check_value); } while (0);
      break;
    case false:
      do { if ((*x).u.value != 
# 190 "./gt-cp-parser.h" 3 4
     __null
# 190 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).u.value); } while (0);
      break;
    default:
      break;
    }
}

void
gt_pch_nx_cp_lexer (void *x_p)
{
  struct cp_lexer * const x = (struct cp_lexer *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_8cp_lexer))
    {
      do { if ((*x).buffer != 
# 203 "./gt-cp-parser.h" 3 4
     __null
# 203 "./gt-cp-parser.h"
     ) gt_pch_nx_vec_cp_token_va_gc_ ((*x).buffer); } while (0);
      do { if ((*x).next != 
# 204 "./gt-cp-parser.h" 3 4
     __null
# 204 "./gt-cp-parser.h"
     ) gt_pch_nx_cp_lexer ((*x).next); } while (0);
    }
}

void
gt_pch_nx_vec_cp_default_arg_entry_va_gc_ (void *x_p)
{
  vec<cp_default_arg_entry,va_gc> * const x = (vec<cp_default_arg_entry,va_gc> *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_31vec_cp_default_arg_entry_va_gc_))
    {
      gt_pch_nx (x);
    }
}

void
gt_pch_nx (struct cp_default_arg_entry& x_r __attribute__ ((__unused__)))
{
  struct cp_default_arg_entry * __attribute__ ((__unused__)) x = &x_r;
  do { if ((*x).class_type != 
# 222 "./gt-cp-parser.h" 3 4
 __null
# 222 "./gt-cp-parser.h"
 ) gt_pch_nx_lang_tree_node ((*x).class_type); } while (0);
  do { if ((*x).decl != 
# 223 "./gt-cp-parser.h" 3 4
 __null
# 223 "./gt-cp-parser.h"
 ) gt_pch_nx_lang_tree_node ((*x).decl); } while (0);
}

void
gt_pch_nx_cp_parser_context (void *x_p)
{
  struct cp_parser_context * const x = (struct cp_parser_context *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_17cp_parser_context))
    {
      do { if ((*x).object_type != 
# 232 "./gt-cp-parser.h" 3 4
     __null
# 232 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).object_type); } while (0);
      do { if ((*x).next != 
# 233 "./gt-cp-parser.h" 3 4
     __null
# 233 "./gt-cp-parser.h"
     ) gt_pch_nx_cp_parser_context ((*x).next); } while (0);
    }
}

void
gt_pch_nx_vec_cp_unparsed_functions_entry_va_gc_ (void *x_p)
{
  vec<cp_unparsed_functions_entry,va_gc> * const x = (vec<cp_unparsed_functions_entry,va_gc> *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_38vec_cp_unparsed_functions_entry_va_gc_))
    {
      gt_pch_nx (x);
    }
}

void
gt_pch_nx (struct cp_unparsed_functions_entry& x_r __attribute__ ((__unused__)))
{
  struct cp_unparsed_functions_entry * __attribute__ ((__unused__)) x = &x_r;
  do { if ((*x).funs_with_default_args != 
# 251 "./gt-cp-parser.h" 3 4
 __null
# 251 "./gt-cp-parser.h"
 ) gt_pch_nx_vec_cp_default_arg_entry_va_gc_ ((*x).funs_with_default_args); } while (0);
  do { if ((*x).funs_with_definitions != 
# 252 "./gt-cp-parser.h" 3 4
 __null
# 252 "./gt-cp-parser.h"
 ) gt_pch_nx_vec_tree_va_gc_ ((*x).funs_with_definitions); } while (0);
  do { if ((*x).nsdmis != 
# 253 "./gt-cp-parser.h" 3 4
 __null
# 253 "./gt-cp-parser.h"
 ) gt_pch_nx_vec_tree_va_gc_ ((*x).nsdmis); } while (0);
  do { if ((*x).noexcepts != 
# 254 "./gt-cp-parser.h" 3 4
 __null
# 254 "./gt-cp-parser.h"
 ) gt_pch_nx_vec_tree_va_gc_ ((*x).noexcepts); } while (0);
}

void
gt_pch_nx_cp_parser (void *x_p)
{
  struct cp_parser * const x = (struct cp_parser *)x_p;
  if (gt_pch_note_object (x, x, gt_pch_p_9cp_parser))
    {
      do { if ((*x).lexer != 
# 263 "./gt-cp-parser.h" 3 4
     __null
# 263 "./gt-cp-parser.h"
     ) gt_pch_nx_cp_lexer ((*x).lexer); } while (0);
      do { if ((*x).scope != 
# 264 "./gt-cp-parser.h" 3 4
     __null
# 264 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).scope); } while (0);
      do { if ((*x).object_scope != 
# 265 "./gt-cp-parser.h" 3 4
     __null
# 265 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).object_scope); } while (0);
      do { if ((*x).qualifying_scope != 
# 266 "./gt-cp-parser.h" 3 4
     __null
# 266 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).qualifying_scope); } while (0);
      do { if ((*x).context != 
# 267 "./gt-cp-parser.h" 3 4
     __null
# 267 "./gt-cp-parser.h"
     ) gt_pch_nx_cp_parser_context ((*x).context); } while (0);
      gt_pch_n_S ((*x).type_definition_forbidden_message);
      gt_pch_n_S ((*x).type_definition_forbidden_message_arg);
      do { if ((*x).unparsed_queues != 
# 270 "./gt-cp-parser.h" 3 4
     __null
# 270 "./gt-cp-parser.h"
     ) gt_pch_nx_vec_cp_unparsed_functions_entry_va_gc_ ((*x).unparsed_queues); } while (0);
      do { if ((*x).implicit_template_parms != 
# 271 "./gt-cp-parser.h" 3 4
     __null
# 271 "./gt-cp-parser.h"
     ) gt_pch_nx_lang_tree_node ((*x).implicit_template_parms); } while (0);
      do { if ((*x).implicit_template_scope != 
# 272 "./gt-cp-parser.h" 3 4
     __null
# 272 "./gt-cp-parser.h"
     ) gt_pch_nx_cp_binding_level ((*x).implicit_template_scope); } while (0);
    }
}

void
gt_pch_p_14cp_token_cache (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct cp_token_cache * x __attribute__ ((__unused__)) = (struct cp_token_cache *)x_p;
}

void
gt_pch_p_10tree_check (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct tree_check * x __attribute__ ((__unused__)) = (struct tree_check *)x_p;
  if ((void *)(x) == this_obj)
    op (&((*x).value), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).checks), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).qualifying_scope), cookie);
}

void
gt_pch_p_19vec_cp_token_va_gc_ (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct vec<cp_token,va_gc> * x __attribute__ ((__unused__)) = (struct vec<cp_token,va_gc> *)x_p;
  if ((void *)(x) == this_obj)
    gt_pch_nx (&((*x)), op, cookie);
}

void
gt_pch_nx (struct cp_token* x __attribute__ ((__unused__)),
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  switch ((int) (((*x)).tree_check_p))
    {
    case true:
        op (&((*x).u.tree_check_value), cookie);
      break;
    case false:
        op (&((*x).u.value), cookie);
      break;
    default:
      break;
    }
}

void
gt_pch_p_8cp_lexer (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct cp_lexer * x __attribute__ ((__unused__)) = (struct cp_lexer *)x_p;
  if ((void *)(x) == this_obj)
    op (&((*x).buffer), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).next), cookie);
}

void
gt_pch_p_31vec_cp_default_arg_entry_va_gc_ (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct vec<cp_default_arg_entry,va_gc> * x __attribute__ ((__unused__)) = (struct vec<cp_default_arg_entry,va_gc> *)x_p;
  if ((void *)(x) == this_obj)
    gt_pch_nx (&((*x)), op, cookie);
}

void
gt_pch_nx (struct cp_default_arg_entry* x __attribute__ ((__unused__)),
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
    op (&((*x).class_type), cookie);
    op (&((*x).decl), cookie);
}

void
gt_pch_p_17cp_parser_context (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct cp_parser_context * x __attribute__ ((__unused__)) = (struct cp_parser_context *)x_p;
  if ((void *)(x) == this_obj)
    op (&((*x).object_type), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).next), cookie);
}

void
gt_pch_p_38vec_cp_unparsed_functions_entry_va_gc_ (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct vec<cp_unparsed_functions_entry,va_gc> * x __attribute__ ((__unused__)) = (struct vec<cp_unparsed_functions_entry,va_gc> *)x_p;
  if ((void *)(x) == this_obj)
    gt_pch_nx (&((*x)), op, cookie);
}

void
gt_pch_nx (struct cp_unparsed_functions_entry* x __attribute__ ((__unused__)),
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
    op (&((*x).funs_with_default_args), cookie);
    op (&((*x).funs_with_definitions), cookie);
    op (&((*x).nsdmis), cookie);
    op (&((*x).noexcepts), cookie);
}

void
gt_pch_p_9cp_parser (__attribute__ ((__unused__)) void *this_obj,
 void *x_p,
 __attribute__ ((__unused__)) gt_pointer_operator op,
 __attribute__ ((__unused__)) void *cookie)
{
  struct cp_parser * x __attribute__ ((__unused__)) = (struct cp_parser *)x_p;
  if ((void *)(x) == this_obj)
    op (&((*x).lexer), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).scope), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).object_scope), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).qualifying_scope), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).context), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).type_definition_forbidden_message), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).type_definition_forbidden_message_arg), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).unparsed_queues), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).implicit_template_parms), cookie);
  if ((void *)(x) == this_obj)
    op (&((*x).implicit_template_scope), cookie);
}



extern const struct ggc_root_tab gt_ggc_r_gt_cp_parser_h[] = {
  {
    &the_parser,
    1,
    sizeof (the_parser),
    &gt_ggc_mx_cp_parser,
    &gt_pch_nx_cp_parser
  },
  { 
# 436 "./gt-cp-parser.h" 3 4
 __null
# 436 "./gt-cp-parser.h"
 , 0, 0, 
# 436 "./gt-cp-parser.h" 3 4
 __null
# 436 "./gt-cp-parser.h"
 , 
# 436 "./gt-cp-parser.h" 3 4
 __null 
# 436 "./gt-cp-parser.h"
 }
};

extern const struct ggc_root_tab gt_ggc_rd_gt_cp_parser_h[] = {
  { &cp_parser_context_free_list, 1, sizeof (cp_parser_context_free_list), 
# 440 "./gt-cp-parser.h" 3 4
                                                                          __null
# 440 "./gt-cp-parser.h"
                                                                              , 
# 440 "./gt-cp-parser.h" 3 4
                                                                                __null 
# 440 "./gt-cp-parser.h"
                                                                                     },
  { 
# 441 "./gt-cp-parser.h" 3 4
 __null
# 441 "./gt-cp-parser.h"
 , 0, 0, 
# 441 "./gt-cp-parser.h" 3 4
 __null
# 441 "./gt-cp-parser.h"
 , 
# 441 "./gt-cp-parser.h" 3 4
 __null 
# 441 "./gt-cp-parser.h"
 }
};

extern const struct ggc_root_tab gt_pch_rs_gt_cp_parser_h[] = {
  { &generic_parm_count, 1, sizeof (generic_parm_count), 
# 445 "./gt-cp-parser.h" 3 4
                                                        __null
# 445 "./gt-cp-parser.h"
                                                            , 
# 445 "./gt-cp-parser.h" 3 4
                                                              __null 
# 445 "./gt-cp-parser.h"
                                                                   },
  { 
# 446 "./gt-cp-parser.h" 3 4
 __null
# 446 "./gt-cp-parser.h"
 , 0, 0, 
# 446 "./gt-cp-parser.h" 3 4
 __null
# 446 "./gt-cp-parser.h"
 , 
# 446 "./gt-cp-parser.h" 3 4
 __null 
# 446 "./gt-cp-parser.h"
 }
};
# 44385 "/home/giulianob/gcc_git_gnu/gcc/gcc/cp/parser.c" 2
